
TTE_training_demo_mcunet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c4a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00087e40  0802c678  0802c678  0003c678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000f4  080b44b8  080b44b8  000c44b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000188  080b45ac  080b45ac  000c45ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000010  080b4734  080b4734  000c4734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  080b4744  080b4744  000c4744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00008de0  20000000  080b474c  000d0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00034214  20008de0  080bd52c  000d8de0  2**2
                  ALLOC
  9 ._user_heap_stack 00000a00  2003cff4  080bd52c  000dcff4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000d8de0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000dfcfe  00000000  00000000  000d8e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000bdef  00000000  00000000  001b8b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00055e7e  00000000  00000000  001c48fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001880  00000000  00000000  0021a780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 0000cc30  00000000  00000000  0021c000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002792f  00000000  00000000  00228c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000c22f  00000000  00000000  0025055f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0025c78e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000083a4  00000000  00000000  0025c80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  00264bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00264bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20008de0 	.word	0x20008de0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802c660 	.word	0x0802c660

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20008de4 	.word	0x20008de4
 800020c:	0802c660 	.word	0x0802c660

08000210 <d_make_comp>:
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	1e4c      	subs	r4, r1, #1
 8000214:	4605      	mov	r5, r0
 8000216:	2c4e      	cmp	r4, #78	; 0x4e
 8000218:	d83f      	bhi.n	800029a <d_make_comp+0x8a>
 800021a:	e8df f004 	tbb	[pc, r4]
 800021e:	3b3b      	.short	0x3b3b
 8000220:	3e3e3b3b 	.word	0x3e3e3b3b
 8000224:	28283e3e 	.word	0x28283e3e
 8000228:	2828283b 	.word	0x2828283b
 800022c:	28282828 	.word	0x28282828
 8000230:	28282828 	.word	0x28282828
 8000234:	29293e28 	.word	0x29293e28
 8000238:	29292929 	.word	0x29292929
 800023c:	283b2929 	.word	0x283b2929
 8000240:	28282828 	.word	0x28282828
 8000244:	3c29283e 	.word	0x3c29283e
 8000248:	293b3e3b 	.word	0x293b3e3b
 800024c:	3e3e3c29 	.word	0x3e3e3c29
 8000250:	3b282828 	.word	0x3b282828
 8000254:	3b3b3b3b 	.word	0x3b3b3b3b
 8000258:	283b3b28 	.word	0x283b3b28
 800025c:	283e3e3b 	.word	0x283e3e3b
 8000260:	3e3e2828 	.word	0x3e3e2828
 8000264:	2828283e 	.word	0x2828283e
 8000268:	293b293b 	.word	0x293b293b
 800026c:	29          	.byte	0x29
 800026d:	00          	.byte	0x00
 800026e:	b1a2      	cbz	r2, 800029a <d_make_comp+0x8a>
 8000270:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000274:	4284      	cmp	r4, r0
 8000276:	da10      	bge.n	800029a <d_make_comp+0x8a>
 8000278:	692f      	ldr	r7, [r5, #16]
 800027a:	0126      	lsls	r6, r4, #4
 800027c:	19b8      	adds	r0, r7, r6
 800027e:	3401      	adds	r4, #1
 8000280:	f04f 0c00 	mov.w	ip, #0
 8000284:	f8c0 c004 	str.w	ip, [r0, #4]
 8000288:	616c      	str	r4, [r5, #20]
 800028a:	55b9      	strb	r1, [r7, r6]
 800028c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000290:	bcf0      	pop	{r4, r5, r6, r7}
 8000292:	4770      	bx	lr
 8000294:	b10a      	cbz	r2, 800029a <d_make_comp+0x8a>
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1ea      	bne.n	8000270 <d_make_comp+0x60>
 800029a:	2000      	movs	r0, #0
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
 800029e:	4770      	bx	lr

080002a0 <d_ref_qualifier>:
 80002a0:	b410      	push	{r4}
 80002a2:	68c3      	ldr	r3, [r0, #12]
 80002a4:	781c      	ldrb	r4, [r3, #0]
 80002a6:	2c52      	cmp	r4, #82	; 0x52
 80002a8:	460a      	mov	r2, r1
 80002aa:	d00f      	beq.n	80002cc <d_ref_qualifier+0x2c>
 80002ac:	2c4f      	cmp	r4, #79	; 0x4f
 80002ae:	d003      	beq.n	80002b8 <d_ref_qualifier+0x18>
 80002b0:	4608      	mov	r0, r1
 80002b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ba:	3103      	adds	r1, #3
 80002bc:	6301      	str	r1, [r0, #48]	; 0x30
 80002be:	2120      	movs	r1, #32
 80002c0:	3301      	adds	r3, #1
 80002c2:	60c3      	str	r3, [r0, #12]
 80002c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002c8:	2300      	movs	r3, #0
 80002ca:	e7a1      	b.n	8000210 <d_make_comp>
 80002cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ce:	3102      	adds	r1, #2
 80002d0:	6301      	str	r1, [r0, #48]	; 0x30
 80002d2:	211f      	movs	r1, #31
 80002d4:	e7f4      	b.n	80002c0 <d_ref_qualifier+0x20>
 80002d6:	bf00      	nop

080002d8 <d_count_templates_scopes>:
 80002d8:	2a00      	cmp	r2, #0
 80002da:	d04e      	beq.n	800037a <d_count_templates_scopes+0xa2>
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4605      	mov	r5, r0
 80002e0:	460e      	mov	r6, r1
 80002e2:	4614      	mov	r4, r2
 80002e4:	7823      	ldrb	r3, [r4, #0]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	2b4e      	cmp	r3, #78	; 0x4e
 80002ea:	d82c      	bhi.n	8000346 <d_count_templates_scopes+0x6e>
 80002ec:	e8df f003 	tbb	[pc, r3]
 80002f0:	40373737 	.word	0x40373737
 80002f4:	28282b2b 	.word	0x28282b2b
 80002f8:	37373737 	.word	0x37373737
 80002fc:	37373737 	.word	0x37373737
 8000300:	37373737 	.word	0x37373737
 8000304:	2b373737 	.word	0x2b373737
 8000308:	37373737 	.word	0x37373737
 800030c:	37373737 	.word	0x37373737
 8000310:	30303737 	.word	0x30303737
 8000314:	372b3737 	.word	0x372b3737
 8000318:	2c373737 	.word	0x2c373737
 800031c:	37373737 	.word	0x37373737
 8000320:	3737282b 	.word	0x3737282b
 8000324:	37373737 	.word	0x37373737
 8000328:	37373737 	.word	0x37373737
 800032c:	2b373737 	.word	0x2b373737
 8000330:	2c2c372b 	.word	0x2c2c372b
 8000334:	372b2c2c 	.word	0x372b2c2c
 8000338:	37373737 	.word	0x37373737
 800033c:	3737      	.short	0x3737
 800033e:	37          	.byte	0x37
 800033f:	00          	.byte	0x00
 8000340:	68e4      	ldr	r4, [r4, #12]
 8000342:	2c00      	cmp	r4, #0
 8000344:	d1ce      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	68a4      	ldr	r4, [r4, #8]
 800034a:	2c00      	cmp	r4, #0
 800034c:	d1ca      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 800034e:	e7fa      	b.n	8000346 <d_count_templates_scopes+0x6e>
 8000350:	68a2      	ldr	r2, [r4, #8]
 8000352:	7813      	ldrb	r3, [r2, #0]
 8000354:	2b05      	cmp	r3, #5
 8000356:	d103      	bne.n	8000360 <d_count_templates_scopes+0x88>
 8000358:	6833      	ldr	r3, [r6, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	6033      	str	r3, [r6, #0]
 800035e:	68a2      	ldr	r2, [r4, #8]
 8000360:	4631      	mov	r1, r6
 8000362:	4628      	mov	r0, r5
 8000364:	f7ff ffb8 	bl	80002d8 <d_count_templates_scopes>
 8000368:	68e4      	ldr	r4, [r4, #12]
 800036a:	2c00      	cmp	r4, #0
 800036c:	d1ba      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 800036e:	e7ea      	b.n	8000346 <d_count_templates_scopes+0x6e>
 8000370:	682b      	ldr	r3, [r5, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	602b      	str	r3, [r5, #0]
 8000376:	68a2      	ldr	r2, [r4, #8]
 8000378:	e7f2      	b.n	8000360 <d_count_templates_scopes+0x88>
 800037a:	4770      	bx	lr

0800037c <d_append_buffer>:
 800037c:	b39a      	cbz	r2, 80003e6 <d_append_buffer+0x6a>
 800037e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000382:	188e      	adds	r6, r1, r2
 8000384:	4604      	mov	r4, r0
 8000386:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800038a:	3e01      	subs	r6, #1
 800038c:	1e4d      	subs	r5, r1, #1
 800038e:	2700      	movs	r7, #0
 8000390:	e016      	b.n	80003c0 <d_append_buffer+0x44>
 8000392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800039a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800039e:	4798      	blx	r3
 80003a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80003a4:	2200      	movs	r2, #0
 80003a6:	3301      	adds	r3, #1
 80003a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80003ac:	42b5      	cmp	r5, r6
 80003ae:	f04f 0301 	mov.w	r3, #1
 80003b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003b6:	f804 8002 	strb.w	r8, [r4, r2]
 80003ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003be:	d010      	beq.n	80003e2 <d_append_buffer+0x66>
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	4619      	mov	r1, r3
 80003c4:	4620      	mov	r0, r4
 80003c6:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80003ca:	d0e2      	beq.n	8000392 <d_append_buffer+0x16>
 80003cc:	461a      	mov	r2, r3
 80003ce:	42b5      	cmp	r5, r6
 80003d0:	f103 0301 	add.w	r3, r3, #1
 80003d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003d8:	f804 8002 	strb.w	r8, [r4, r2]
 80003dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003e0:	d1ee      	bne.n	80003c0 <d_append_buffer+0x44>
 80003e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003e6:	4770      	bx	lr

080003e8 <is_fnqual_component_type>:
 80003e8:	f1a0 031c 	sub.w	r3, r0, #28
 80003ec:	2b04      	cmp	r3, #4
 80003ee:	d907      	bls.n	8000400 <is_fnqual_component_type+0x18>
 80003f0:	284c      	cmp	r0, #76	; 0x4c
 80003f2:	d005      	beq.n	8000400 <is_fnqual_component_type+0x18>
 80003f4:	384e      	subs	r0, #78	; 0x4e
 80003f6:	2801      	cmp	r0, #1
 80003f8:	bf8c      	ite	hi
 80003fa:	2000      	movhi	r0, #0
 80003fc:	2001      	movls	r0, #1
 80003fe:	4770      	bx	lr
 8000400:	2001      	movs	r0, #1
 8000402:	4770      	bx	lr

08000404 <d_number.isra.1>:
 8000404:	b470      	push	{r4, r5, r6}
 8000406:	6802      	ldr	r2, [r0, #0]
 8000408:	7811      	ldrb	r1, [r2, #0]
 800040a:	296e      	cmp	r1, #110	; 0x6e
 800040c:	d018      	beq.n	8000440 <d_number.isra.1+0x3c>
 800040e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000412:	2b09      	cmp	r3, #9
 8000414:	d81e      	bhi.n	8000454 <d_number.isra.1+0x50>
 8000416:	2600      	movs	r6, #0
 8000418:	2300      	movs	r3, #0
 800041a:	3201      	adds	r2, #1
 800041c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000420:	6002      	str	r2, [r0, #0]
 8000422:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000426:	7811      	ldrb	r1, [r2, #0]
 8000428:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800042c:	2d09      	cmp	r5, #9
 800042e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000432:	d9f2      	bls.n	800041a <d_number.isra.1+0x16>
 8000434:	b10e      	cbz	r6, 800043a <d_number.isra.1+0x36>
 8000436:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800043a:	4618      	mov	r0, r3
 800043c:	bc70      	pop	{r4, r5, r6}
 800043e:	4770      	bx	lr
 8000440:	1c53      	adds	r3, r2, #1
 8000442:	6003      	str	r3, [r0, #0]
 8000444:	7851      	ldrb	r1, [r2, #1]
 8000446:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800044a:	2a09      	cmp	r2, #9
 800044c:	d802      	bhi.n	8000454 <d_number.isra.1+0x50>
 800044e:	461a      	mov	r2, r3
 8000450:	2601      	movs	r6, #1
 8000452:	e7e1      	b.n	8000418 <d_number.isra.1+0x14>
 8000454:	2300      	movs	r3, #0
 8000456:	4618      	mov	r0, r3
 8000458:	bc70      	pop	{r4, r5, r6}
 800045a:	4770      	bx	lr

0800045c <d_number_component>:
 800045c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000460:	4293      	cmp	r3, r2
 8000462:	b570      	push	{r4, r5, r6, lr}
 8000464:	da0e      	bge.n	8000484 <d_number_component+0x28>
 8000466:	6901      	ldr	r1, [r0, #16]
 8000468:	011a      	lsls	r2, r3, #4
 800046a:	188c      	adds	r4, r1, r2
 800046c:	3301      	adds	r3, #1
 800046e:	2600      	movs	r6, #0
 8000470:	2541      	movs	r5, #65	; 0x41
 8000472:	6066      	str	r6, [r4, #4]
 8000474:	300c      	adds	r0, #12
 8000476:	6083      	str	r3, [r0, #8]
 8000478:	548d      	strb	r5, [r1, r2]
 800047a:	f7ff ffc3 	bl	8000404 <d_number.isra.1>
 800047e:	60a0      	str	r0, [r4, #8]
 8000480:	4620      	mov	r0, r4
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	2400      	movs	r4, #0
 8000486:	4620      	mov	r0, r4
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	bf00      	nop

0800048c <d_compact_number>:
 800048c:	b510      	push	{r4, lr}
 800048e:	68c3      	ldr	r3, [r0, #12]
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	2a5f      	cmp	r2, #95	; 0x5f
 8000494:	4604      	mov	r4, r0
 8000496:	d00d      	beq.n	80004b4 <d_compact_number+0x28>
 8000498:	2a6e      	cmp	r2, #110	; 0x6e
 800049a:	d00d      	beq.n	80004b8 <d_compact_number+0x2c>
 800049c:	300c      	adds	r0, #12
 800049e:	f7ff ffb1 	bl	8000404 <d_number.isra.1>
 80004a2:	3001      	adds	r0, #1
 80004a4:	d408      	bmi.n	80004b8 <d_compact_number+0x2c>
 80004a6:	68e3      	ldr	r3, [r4, #12]
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	2a5f      	cmp	r2, #95	; 0x5f
 80004ac:	d104      	bne.n	80004b8 <d_compact_number+0x2c>
 80004ae:	3301      	adds	r3, #1
 80004b0:	60e3      	str	r3, [r4, #12]
 80004b2:	bd10      	pop	{r4, pc}
 80004b4:	2000      	movs	r0, #0
 80004b6:	e7fa      	b.n	80004ae <d_compact_number+0x22>
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	bf00      	nop

080004c0 <d_template_param>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	68c3      	ldr	r3, [r0, #12]
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	2a54      	cmp	r2, #84	; 0x54
 80004c8:	d119      	bne.n	80004fe <d_template_param+0x3e>
 80004ca:	3301      	adds	r3, #1
 80004cc:	60c3      	str	r3, [r0, #12]
 80004ce:	4604      	mov	r4, r0
 80004d0:	f7ff ffdc 	bl	800048c <d_compact_number>
 80004d4:	1e05      	subs	r5, r0, #0
 80004d6:	db12      	blt.n	80004fe <d_template_param+0x3e>
 80004d8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80004dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004de:	428b      	cmp	r3, r1
 80004e0:	f102 0201 	add.w	r2, r2, #1
 80004e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004e6:	da0a      	bge.n	80004fe <d_template_param+0x3e>
 80004e8:	6921      	ldr	r1, [r4, #16]
 80004ea:	011a      	lsls	r2, r3, #4
 80004ec:	1888      	adds	r0, r1, r2
 80004ee:	3301      	adds	r3, #1
 80004f0:	2700      	movs	r7, #0
 80004f2:	2605      	movs	r6, #5
 80004f4:	6047      	str	r7, [r0, #4]
 80004f6:	6163      	str	r3, [r4, #20]
 80004f8:	548e      	strb	r6, [r1, r2]
 80004fa:	6085      	str	r5, [r0, #8]
 80004fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fe:	2000      	movs	r0, #0
 8000500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000502:	bf00      	nop

08000504 <d_source_name>:
 8000504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000508:	4604      	mov	r4, r0
 800050a:	300c      	adds	r0, #12
 800050c:	f7ff ff7a 	bl	8000404 <d_number.isra.1>
 8000510:	1e07      	subs	r7, r0, #0
 8000512:	dd49      	ble.n	80005a8 <d_source_name+0xa4>
 8000514:	68e5      	ldr	r5, [r4, #12]
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	1b5b      	subs	r3, r3, r5
 800051a:	429f      	cmp	r7, r3
 800051c:	dc42      	bgt.n	80005a4 <d_source_name+0xa0>
 800051e:	68a2      	ldr	r2, [r4, #8]
 8000520:	19eb      	adds	r3, r5, r7
 8000522:	0752      	lsls	r2, r2, #29
 8000524:	60e3      	str	r3, [r4, #12]
 8000526:	d504      	bpl.n	8000532 <d_source_name+0x2e>
 8000528:	5dea      	ldrb	r2, [r5, r7]
 800052a:	2a24      	cmp	r2, #36	; 0x24
 800052c:	bf04      	itt	eq
 800052e:	3301      	addeq	r3, #1
 8000530:	60e3      	streq	r3, [r4, #12]
 8000532:	2f09      	cmp	r7, #9
 8000534:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000538:	dc10      	bgt.n	800055c <d_source_name+0x58>
 800053a:	45b0      	cmp	r8, r6
 800053c:	dd32      	ble.n	80005a4 <d_source_name+0xa0>
 800053e:	6921      	ldr	r1, [r4, #16]
 8000540:	0132      	lsls	r2, r6, #4
 8000542:	1888      	adds	r0, r1, r2
 8000544:	3601      	adds	r6, #1
 8000546:	2300      	movs	r3, #0
 8000548:	6043      	str	r3, [r0, #4]
 800054a:	6166      	str	r6, [r4, #20]
 800054c:	b355      	cbz	r5, 80005a4 <d_source_name+0xa0>
 800054e:	6043      	str	r3, [r0, #4]
 8000550:	548b      	strb	r3, [r1, r2]
 8000552:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000556:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800055c:	2208      	movs	r2, #8
 800055e:	4914      	ldr	r1, [pc, #80]	; (80005b0 <d_source_name+0xac>)
 8000560:	4628      	mov	r0, r5
 8000562:	f028 fca1 	bl	8028ea8 <memcmp>
 8000566:	2800      	cmp	r0, #0
 8000568:	d1e7      	bne.n	800053a <d_source_name+0x36>
 800056a:	7a2b      	ldrb	r3, [r5, #8]
 800056c:	2b2e      	cmp	r3, #46	; 0x2e
 800056e:	d003      	beq.n	8000578 <d_source_name+0x74>
 8000570:	2b5f      	cmp	r3, #95	; 0x5f
 8000572:	d001      	beq.n	8000578 <d_source_name+0x74>
 8000574:	2b24      	cmp	r3, #36	; 0x24
 8000576:	d1e0      	bne.n	800053a <d_source_name+0x36>
 8000578:	7a6b      	ldrb	r3, [r5, #9]
 800057a:	2b4e      	cmp	r3, #78	; 0x4e
 800057c:	d1dd      	bne.n	800053a <d_source_name+0x36>
 800057e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000580:	3316      	adds	r3, #22
 8000582:	1bdf      	subs	r7, r3, r7
 8000584:	45b0      	cmp	r8, r6
 8000586:	6327      	str	r7, [r4, #48]	; 0x30
 8000588:	dd0c      	ble.n	80005a4 <d_source_name+0xa0>
 800058a:	6922      	ldr	r2, [r4, #16]
 800058c:	4d09      	ldr	r5, [pc, #36]	; (80005b4 <d_source_name+0xb0>)
 800058e:	0133      	lsls	r3, r6, #4
 8000590:	18d0      	adds	r0, r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	3601      	adds	r6, #1
 8000596:	6166      	str	r6, [r4, #20]
 8000598:	6041      	str	r1, [r0, #4]
 800059a:	54d1      	strb	r1, [r2, r3]
 800059c:	2315      	movs	r3, #21
 800059e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 80005a2:	e7d8      	b.n	8000556 <d_source_name+0x52>
 80005a4:	2000      	movs	r0, #0
 80005a6:	e7d6      	b.n	8000556 <d_source_name+0x52>
 80005a8:	2000      	movs	r0, #0
 80005aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ae:	bf00      	nop
 80005b0:	080b39ac 	.word	0x080b39ac
 80005b4:	080b39b8 	.word	0x080b39b8

080005b8 <d_abi_tags>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	68c3      	ldr	r3, [r0, #12]
 80005bc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	2a42      	cmp	r2, #66	; 0x42
 80005c2:	4604      	mov	r4, r0
 80005c4:	460d      	mov	r5, r1
 80005c6:	d10f      	bne.n	80005e8 <d_abi_tags+0x30>
 80005c8:	3301      	adds	r3, #1
 80005ca:	60e3      	str	r3, [r4, #12]
 80005cc:	4620      	mov	r0, r4
 80005ce:	f7ff ff99 	bl	8000504 <d_source_name>
 80005d2:	462a      	mov	r2, r5
 80005d4:	4603      	mov	r3, r0
 80005d6:	214b      	movs	r1, #75	; 0x4b
 80005d8:	4620      	mov	r0, r4
 80005da:	f7ff fe19 	bl	8000210 <d_make_comp>
 80005de:	68e3      	ldr	r3, [r4, #12]
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	2a42      	cmp	r2, #66	; 0x42
 80005e4:	4605      	mov	r5, r0
 80005e6:	d0ef      	beq.n	80005c8 <d_abi_tags+0x10>
 80005e8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005ea:	4628      	mov	r0, r5
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
 80005ee:	bf00      	nop

080005f0 <d_substitution>:
 80005f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005f4:	4605      	mov	r5, r0
 80005f6:	68c0      	ldr	r0, [r0, #12]
 80005f8:	7803      	ldrb	r3, [r0, #0]
 80005fa:	2b53      	cmp	r3, #83	; 0x53
 80005fc:	d131      	bne.n	8000662 <d_substitution+0x72>
 80005fe:	1c43      	adds	r3, r0, #1
 8000600:	60eb      	str	r3, [r5, #12]
 8000602:	7842      	ldrb	r2, [r0, #1]
 8000604:	b3a2      	cbz	r2, 8000670 <d_substitution+0x80>
 8000606:	1c83      	adds	r3, r0, #2
 8000608:	60eb      	str	r3, [r5, #12]
 800060a:	7842      	ldrb	r2, [r0, #1]
 800060c:	2a5f      	cmp	r2, #95	; 0x5f
 800060e:	f000 8089 	beq.w	8000724 <d_substitution+0x134>
 8000612:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000616:	b2e3      	uxtb	r3, r4
 8000618:	2b09      	cmp	r3, #9
 800061a:	d825      	bhi.n	8000668 <d_substitution+0x78>
 800061c:	2100      	movs	r1, #0
 800061e:	e00e      	b.n	800063e <d_substitution+0x4e>
 8000620:	3b30      	subs	r3, #48	; 0x30
 8000622:	4299      	cmp	r1, r3
 8000624:	d81d      	bhi.n	8000662 <d_substitution+0x72>
 8000626:	68e9      	ldr	r1, [r5, #12]
 8000628:	780a      	ldrb	r2, [r1, #0]
 800062a:	1c48      	adds	r0, r1, #1
 800062c:	b122      	cbz	r2, 8000638 <d_substitution+0x48>
 800062e:	60e8      	str	r0, [r5, #12]
 8000630:	780a      	ldrb	r2, [r1, #0]
 8000632:	2a5f      	cmp	r2, #95	; 0x5f
 8000634:	f000 8082 	beq.w	800073c <d_substitution+0x14c>
 8000638:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800063c:	4619      	mov	r1, r3
 800063e:	b2e4      	uxtb	r4, r4
 8000640:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000644:	2c09      	cmp	r4, #9
 8000646:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800064a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800064e:	d9e7      	bls.n	8000620 <d_substitution+0x30>
 8000650:	2819      	cmp	r0, #25
 8000652:	d806      	bhi.n	8000662 <d_substitution+0x72>
 8000654:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800065c:	3b37      	subs	r3, #55	; 0x37
 800065e:	4299      	cmp	r1, r3
 8000660:	d9e1      	bls.n	8000626 <d_substitution+0x36>
 8000662:	2000      	movs	r0, #0
 8000664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000668:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800066c:	2b19      	cmp	r3, #25
 800066e:	d9d5      	bls.n	800061c <d_substitution+0x2c>
 8000670:	68ab      	ldr	r3, [r5, #8]
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2401      	movne	r4, #1
 800067c:	2400      	moveq	r4, #0
 800067e:	d101      	bne.n	8000684 <d_substitution+0x94>
 8000680:	2900      	cmp	r1, #0
 8000682:	d15d      	bne.n	8000740 <d_substitution+0x150>
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <d_substitution+0x16c>)
 8000686:	2174      	movs	r1, #116	; 0x74
 8000688:	4291      	cmp	r1, r2
 800068a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800068e:	d005      	beq.n	800069c <d_substitution+0xac>
 8000690:	331c      	adds	r3, #28
 8000692:	4283      	cmp	r3, r0
 8000694:	d2e5      	bcs.n	8000662 <d_substitution+0x72>
 8000696:	7819      	ldrb	r1, [r3, #0]
 8000698:	4291      	cmp	r1, r2
 800069a:	d1f9      	bne.n	8000690 <d_substitution+0xa0>
 800069c:	6958      	ldr	r0, [r3, #20]
 800069e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 80006a2:	b1a8      	cbz	r0, 80006d0 <d_substitution+0xe0>
 80006a4:	428a      	cmp	r2, r1
 80006a6:	da57      	bge.n	8000758 <d_substitution+0x168>
 80006a8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80006ac:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80006b0:	0117      	lsls	r7, r2, #4
 80006b2:	eb0c 0607 	add.w	r6, ip, r7
 80006b6:	3201      	adds	r2, #1
 80006b8:	f04f 0900 	mov.w	r9, #0
 80006bc:	f04f 0818 	mov.w	r8, #24
 80006c0:	f8c6 9004 	str.w	r9, [r6, #4]
 80006c4:	616a      	str	r2, [r5, #20]
 80006c6:	f80c 8007 	strb.w	r8, [ip, r7]
 80006ca:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 80006ce:	62ee      	str	r6, [r5, #44]	; 0x2c
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d13c      	bne.n	800074e <d_substitution+0x15e>
 80006d4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 80006d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006da:	4291      	cmp	r1, r2
 80006dc:	4423      	add	r3, r4
 80006de:	632b      	str	r3, [r5, #48]	; 0x30
 80006e0:	dd38      	ble.n	8000754 <d_substitution+0x164>
 80006e2:	6929      	ldr	r1, [r5, #16]
 80006e4:	0113      	lsls	r3, r2, #4
 80006e6:	18c8      	adds	r0, r1, r3
 80006e8:	3201      	adds	r2, #1
 80006ea:	f04f 0c00 	mov.w	ip, #0
 80006ee:	2718      	movs	r7, #24
 80006f0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006f4:	616a      	str	r2, [r5, #20]
 80006f6:	54cf      	strb	r7, [r1, r3]
 80006f8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006fc:	68eb      	ldr	r3, [r5, #12]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b42      	cmp	r3, #66	; 0x42
 8000702:	d1af      	bne.n	8000664 <d_substitution+0x74>
 8000704:	4601      	mov	r1, r0
 8000706:	4628      	mov	r0, r5
 8000708:	f7ff ff56 	bl	80005b8 <d_abi_tags>
 800070c:	2800      	cmp	r0, #0
 800070e:	d0a8      	beq.n	8000662 <d_substitution+0x72>
 8000710:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000714:	4293      	cmp	r3, r2
 8000716:	daa5      	bge.n	8000664 <d_substitution+0x74>
 8000718:	69e9      	ldr	r1, [r5, #28]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000720:	622a      	str	r2, [r5, #32]
 8000722:	e79f      	b.n	8000664 <d_substitution+0x74>
 8000724:	2300      	movs	r3, #0
 8000726:	6a2a      	ldr	r2, [r5, #32]
 8000728:	429a      	cmp	r2, r3
 800072a:	d99a      	bls.n	8000662 <d_substitution+0x72>
 800072c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800072e:	69e9      	ldr	r1, [r5, #28]
 8000730:	3201      	adds	r2, #1
 8000732:	62aa      	str	r2, [r5, #40]	; 0x28
 8000734:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800073c:	3301      	adds	r3, #1
 800073e:	e7f2      	b.n	8000726 <d_substitution+0x136>
 8000740:	68eb      	ldr	r3, [r5, #12]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3b43      	subs	r3, #67	; 0x43
 8000746:	2b01      	cmp	r3, #1
 8000748:	bf98      	it	ls
 800074a:	460c      	movls	r4, r1
 800074c:	e79a      	b.n	8000684 <d_substitution+0x94>
 800074e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000752:	e7c1      	b.n	80006d8 <d_substitution+0xe8>
 8000754:	2000      	movs	r0, #0
 8000756:	e7d1      	b.n	80006fc <d_substitution+0x10c>
 8000758:	2600      	movs	r6, #0
 800075a:	e7b8      	b.n	80006ce <d_substitution+0xde>
 800075c:	08031788 	.word	0x08031788

08000760 <d_discriminator>:
 8000760:	68c3      	ldr	r3, [r0, #12]
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	2a5f      	cmp	r2, #95	; 0x5f
 8000766:	d001      	beq.n	800076c <d_discriminator+0xc>
 8000768:	2001      	movs	r0, #1
 800076a:	4770      	bx	lr
 800076c:	b510      	push	{r4, lr}
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4604      	mov	r4, r0
 8000772:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	2a5f      	cmp	r2, #95	; 0x5f
 800077a:	d004      	beq.n	8000786 <d_discriminator+0x26>
 800077c:	f7ff fe42 	bl	8000404 <d_number.isra.1>
 8000780:	43c0      	mvns	r0, r0
 8000782:	0fc0      	lsrs	r0, r0, #31
 8000784:	bd10      	pop	{r4, pc}
 8000786:	3302      	adds	r3, #2
 8000788:	60e3      	str	r3, [r4, #12]
 800078a:	f7ff fe3b 	bl	8000404 <d_number.isra.1>
 800078e:	2800      	cmp	r0, #0
 8000790:	db05      	blt.n	800079e <d_discriminator+0x3e>
 8000792:	2809      	cmp	r0, #9
 8000794:	dd07      	ble.n	80007a6 <d_discriminator+0x46>
 8000796:	68e3      	ldr	r3, [r4, #12]
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	2a5f      	cmp	r2, #95	; 0x5f
 800079c:	d001      	beq.n	80007a2 <d_discriminator+0x42>
 800079e:	2000      	movs	r0, #0
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	3301      	adds	r3, #1
 80007a4:	60e3      	str	r3, [r4, #12]
 80007a6:	2001      	movs	r0, #1
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop

080007ac <d_index_template_argument.part.9>:
 80007ac:	b170      	cbz	r0, 80007cc <d_index_template_argument.part.9+0x20>
 80007ae:	7803      	ldrb	r3, [r0, #0]
 80007b0:	2b2f      	cmp	r3, #47	; 0x2f
 80007b2:	d10f      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	dc04      	bgt.n	80007c2 <d_index_template_argument.part.9+0x16>
 80007b8:	e009      	b.n	80007ce <d_index_template_argument.part.9+0x22>
 80007ba:	7803      	ldrb	r3, [r0, #0]
 80007bc:	2b2f      	cmp	r3, #47	; 0x2f
 80007be:	d109      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007c0:	b131      	cbz	r1, 80007d0 <d_index_template_argument.part.9+0x24>
 80007c2:	68c0      	ldr	r0, [r0, #12]
 80007c4:	3901      	subs	r1, #1
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1f7      	bne.n	80007ba <d_index_template_argument.part.9+0xe>
 80007ca:	4770      	bx	lr
 80007cc:	4770      	bx	lr
 80007ce:	d101      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007d0:	6880      	ldr	r0, [r0, #8]
 80007d2:	4770      	bx	lr
 80007d4:	2000      	movs	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <d_lookup_template_argument.isra.10>:
 80007d8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007dc:	b133      	cbz	r3, 80007ec <d_lookup_template_argument.isra.10+0x14>
 80007de:	6809      	ldr	r1, [r1, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2900      	cmp	r1, #0
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	db04      	blt.n	80007f2 <d_lookup_template_argument.isra.10+0x1a>
 80007e8:	4618      	mov	r0, r3
 80007ea:	e7df      	b.n	80007ac <d_index_template_argument.part.9>
 80007ec:	2201      	movs	r2, #1
 80007ee:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007f2:	4618      	mov	r0, r3
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <d_find_pack>:
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d042      	beq.n	8000882 <d_find_pack+0x8a>
 80007fc:	b538      	push	{r3, r4, r5, lr}
 80007fe:	4605      	mov	r5, r0
 8000800:	460c      	mov	r4, r1
 8000802:	7823      	ldrb	r3, [r4, #0]
 8000804:	2b4b      	cmp	r3, #75	; 0x4b
 8000806:	d827      	bhi.n	8000858 <d_find_pack+0x60>
 8000808:	e8df f003 	tbb	[pc, r3]
 800080c:	2626262e 	.word	0x2626262e
 8000810:	2b2e3026 	.word	0x2b2e3026
 8000814:	2626262b 	.word	0x2626262b
 8000818:	26262626 	.word	0x26262626
 800081c:	26262626 	.word	0x26262626
 8000820:	26262626 	.word	0x26262626
 8000824:	2626262e 	.word	0x2626262e
 8000828:	26262626 	.word	0x26262626
 800082c:	26262626 	.word	0x26262626
 8000830:	2e262626 	.word	0x2e262626
 8000834:	26262626 	.word	0x26262626
 8000838:	2626262e 	.word	0x2626262e
 800083c:	262b2e26 	.word	0x262b2e26
 8000840:	26262626 	.word	0x26262626
 8000844:	26262626 	.word	0x26262626
 8000848:	26262626 	.word	0x26262626
 800084c:	26262e2e 	.word	0x26262e2e
 8000850:	2e2e2e26 	.word	0x2e2e2e26
 8000854:	2e2e2626 	.word	0x2e2e2626
 8000858:	68a1      	ldr	r1, [r4, #8]
 800085a:	4628      	mov	r0, r5
 800085c:	f7ff ffcc 	bl	80007f8 <d_find_pack>
 8000860:	b918      	cbnz	r0, 800086a <d_find_pack+0x72>
 8000862:	68e4      	ldr	r4, [r4, #12]
 8000864:	2c00      	cmp	r4, #0
 8000866:	d1cc      	bne.n	8000802 <d_find_pack+0xa>
 8000868:	2000      	movs	r0, #0
 800086a:	bd38      	pop	{r3, r4, r5, pc}
 800086c:	f104 0108 	add.w	r1, r4, #8
 8000870:	4628      	mov	r0, r5
 8000872:	f7ff ffb1 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8000876:	2800      	cmp	r0, #0
 8000878:	d0f6      	beq.n	8000868 <d_find_pack+0x70>
 800087a:	7803      	ldrb	r3, [r0, #0]
 800087c:	2b2f      	cmp	r3, #47	; 0x2f
 800087e:	d1f3      	bne.n	8000868 <d_find_pack+0x70>
 8000880:	bd38      	pop	{r3, r4, r5, pc}
 8000882:	2000      	movs	r0, #0
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <d_growable_string_callback_adapter>:
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088c:	4614      	mov	r4, r2
 800088e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000892:	6852      	ldr	r2, [r2, #4]
 8000894:	1c4b      	adds	r3, r1, #1
 8000896:	4413      	add	r3, r2
 8000898:	42ab      	cmp	r3, r5
 800089a:	b082      	sub	sp, #8
 800089c:	460e      	mov	r6, r1
 800089e:	4680      	mov	r8, r0
 80008a0:	d814      	bhi.n	80008cc <d_growable_string_callback_adapter+0x44>
 80008a2:	b117      	cbz	r7, 80008aa <d_growable_string_callback_adapter+0x22>
 80008a4:	b002      	add	sp, #8
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008aa:	e9d4 0300 	ldrd	r0, r3, [r4]
 80008ae:	4632      	mov	r2, r6
 80008b0:	4641      	mov	r1, r8
 80008b2:	4418      	add	r0, r3
 80008b4:	f028 fb07 	bl	8028ec6 <memcpy>
 80008b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80008bc:	4433      	add	r3, r6
 80008be:	549f      	strb	r7, [r3, r2]
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	441e      	add	r6, r3
 80008c4:	6066      	str	r6, [r4, #4]
 80008c6:	b002      	add	sp, #8
 80008c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008cc:	2f00      	cmp	r7, #0
 80008ce:	d1e9      	bne.n	80008a4 <d_growable_string_callback_adapter+0x1c>
 80008d0:	b91d      	cbnz	r5, 80008da <d_growable_string_callback_adapter+0x52>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	f04f 0502 	mov.w	r5, #2
 80008d8:	d902      	bls.n	80008e0 <d_growable_string_callback_adapter+0x58>
 80008da:	006d      	lsls	r5, r5, #1
 80008dc:	42ab      	cmp	r3, r5
 80008de:	d8fc      	bhi.n	80008da <d_growable_string_callback_adapter+0x52>
 80008e0:	4629      	mov	r1, r5
 80008e2:	6820      	ldr	r0, [r4, #0]
 80008e4:	f028 fb5c 	bl	8028fa0 <realloc>
 80008e8:	b128      	cbz	r0, 80008f6 <d_growable_string_callback_adapter+0x6e>
 80008ea:	68e7      	ldr	r7, [r4, #12]
 80008ec:	6020      	str	r0, [r4, #0]
 80008ee:	60a5      	str	r5, [r4, #8]
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d1d7      	bne.n	80008a4 <d_growable_string_callback_adapter+0x1c>
 80008f4:	e7d9      	b.n	80008aa <d_growable_string_callback_adapter+0x22>
 80008f6:	9001      	str	r0, [sp, #4]
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	f028 f897 	bl	8028a2c <free>
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	e9c4 3300 	strd	r3, r3, [r4]
 8000906:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800090a:	e7cb      	b.n	80008a4 <d_growable_string_callback_adapter+0x1c>

0800090c <d_call_offset>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4604      	mov	r4, r0
 8000910:	b929      	cbnz	r1, 800091e <d_call_offset+0x12>
 8000912:	68c3      	ldr	r3, [r0, #12]
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	b132      	cbz	r2, 8000926 <d_call_offset+0x1a>
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	60c2      	str	r2, [r0, #12]
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	2968      	cmp	r1, #104	; 0x68
 8000920:	d012      	beq.n	8000948 <d_call_offset+0x3c>
 8000922:	2976      	cmp	r1, #118	; 0x76
 8000924:	d001      	beq.n	800092a <d_call_offset+0x1e>
 8000926:	2000      	movs	r0, #0
 8000928:	bd38      	pop	{r3, r4, r5, pc}
 800092a:	f104 050c 	add.w	r5, r4, #12
 800092e:	4628      	mov	r0, r5
 8000930:	f7ff fd68 	bl	8000404 <d_number.isra.1>
 8000934:	68e3      	ldr	r3, [r4, #12]
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	2a5f      	cmp	r2, #95	; 0x5f
 800093a:	d1f4      	bne.n	8000926 <d_call_offset+0x1a>
 800093c:	3301      	adds	r3, #1
 800093e:	60e3      	str	r3, [r4, #12]
 8000940:	4628      	mov	r0, r5
 8000942:	f7ff fd5f 	bl	8000404 <d_number.isra.1>
 8000946:	e003      	b.n	8000950 <d_call_offset+0x44>
 8000948:	f104 000c 	add.w	r0, r4, #12
 800094c:	f7ff fd5a 	bl	8000404 <d_number.isra.1>
 8000950:	68e3      	ldr	r3, [r4, #12]
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	2a5f      	cmp	r2, #95	; 0x5f
 8000956:	d1e6      	bne.n	8000926 <d_call_offset+0x1a>
 8000958:	3301      	adds	r3, #1
 800095a:	60e3      	str	r3, [r4, #12]
 800095c:	2001      	movs	r0, #1
 800095e:	bd38      	pop	{r3, r4, r5, pc}

08000960 <d_append_num>:
 8000960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000964:	b088      	sub	sp, #32
 8000966:	460a      	mov	r2, r1
 8000968:	4604      	mov	r4, r0
 800096a:	491c      	ldr	r1, [pc, #112]	; (80009dc <d_append_num+0x7c>)
 800096c:	a801      	add	r0, sp, #4
 800096e:	f028 fd1d 	bl	80293ac <sprintf>
 8000972:	a801      	add	r0, sp, #4
 8000974:	f006 fa16 	bl	8006da4 <strlen>
 8000978:	b368      	cbz	r0, 80009d6 <d_append_num+0x76>
 800097a:	ad01      	add	r5, sp, #4
 800097c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000980:	182e      	adds	r6, r5, r0
 8000982:	2700      	movs	r7, #0
 8000984:	e016      	b.n	80009b4 <d_append_num+0x54>
 8000986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800098a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800098e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000992:	4798      	blx	r3
 8000994:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000998:	2200      	movs	r2, #0
 800099a:	3301      	adds	r3, #1
 800099c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009a0:	42ae      	cmp	r6, r5
 80009a2:	f04f 0301 	mov.w	r3, #1
 80009a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009aa:	f804 8002 	strb.w	r8, [r4, r2]
 80009ae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009b2:	d010      	beq.n	80009d6 <d_append_num+0x76>
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	4619      	mov	r1, r3
 80009b8:	4620      	mov	r0, r4
 80009ba:	f815 8b01 	ldrb.w	r8, [r5], #1
 80009be:	d0e2      	beq.n	8000986 <d_append_num+0x26>
 80009c0:	461a      	mov	r2, r3
 80009c2:	42ae      	cmp	r6, r5
 80009c4:	f103 0301 	add.w	r3, r3, #1
 80009c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009cc:	f804 8002 	strb.w	r8, [r4, r2]
 80009d0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009d4:	d1ee      	bne.n	80009b4 <d_append_num+0x54>
 80009d6:	b008      	add	sp, #32
 80009d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009dc:	080b39d0 	.word	0x080b39d0

080009e0 <d_exprlist>:
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	68c3      	ldr	r3, [r0, #12]
 80009e6:	781d      	ldrb	r5, [r3, #0]
 80009e8:	b083      	sub	sp, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	428d      	cmp	r5, r1
 80009ee:	4604      	mov	r4, r0
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	f000 8199 	beq.w	8000d28 <d_exprlist+0x348>
 80009f6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000eb8 <d_exprlist+0x4d8>
 80009fa:	4688      	mov	r8, r1
 80009fc:	af01      	add	r7, sp, #4
 80009fe:	2501      	movs	r5, #1
 8000a00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8000a02:	6365      	str	r5, [r4, #52]	; 0x34
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	2a4c      	cmp	r2, #76	; 0x4c
 8000a08:	d05c      	beq.n	8000ac4 <d_exprlist+0xe4>
 8000a0a:	2a54      	cmp	r2, #84	; 0x54
 8000a0c:	d066      	beq.n	8000adc <d_exprlist+0xfc>
 8000a0e:	2a73      	cmp	r2, #115	; 0x73
 8000a10:	d045      	beq.n	8000a9e <d_exprlist+0xbe>
 8000a12:	2a66      	cmp	r2, #102	; 0x66
 8000a14:	d11c      	bne.n	8000a50 <d_exprlist+0x70>
 8000a16:	785a      	ldrb	r2, [r3, #1]
 8000a18:	2a70      	cmp	r2, #112	; 0x70
 8000a1a:	f000 8087 	beq.w	8000b2c <d_exprlist+0x14c>
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f001 fa70 	bl	8001f04 <d_operator_name>
 8000a24:	4605      	mov	r5, r0
 8000a26:	2800      	cmp	r0, #0
 8000a28:	f000 818c 	beq.w	8000d44 <d_exprlist+0x364>
 8000a2c:	7803      	ldrb	r3, [r0, #0]
 8000a2e:	2b31      	cmp	r3, #49	; 0x31
 8000a30:	f000 8098 	beq.w	8000b64 <d_exprlist+0x184>
 8000a34:	2b32      	cmp	r3, #50	; 0x32
 8000a36:	d056      	beq.n	8000ae6 <d_exprlist+0x106>
 8000a38:	2b33      	cmp	r3, #51	; 0x33
 8000a3a:	d171      	bne.n	8000b20 <d_exprlist+0x140>
 8000a3c:	68e3      	ldr	r3, [r4, #12]
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	2a5f      	cmp	r2, #95	; 0x5f
 8000a42:	f000 81da 	beq.w	8000dfa <d_exprlist+0x41a>
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 fa38 	bl	8000ebc <d_expression_1>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	e0c1      	b.n	8000bd4 <d_exprlist+0x1f4>
 8000a50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a54:	2909      	cmp	r1, #9
 8000a56:	f200 80e7 	bhi.w	8000c28 <d_exprlist+0x248>
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f001 fbfe 	bl	800225c <d_unqualified_name>
 8000a60:	4605      	mov	r5, r0
 8000a62:	2800      	cmp	r0, #0
 8000a64:	f000 816e 	beq.w	8000d44 <d_exprlist+0x364>
 8000a68:	68e3      	ldr	r3, [r4, #12]
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	2a49      	cmp	r2, #73	; 0x49
 8000a6e:	f000 80b8 	beq.w	8000be2 <d_exprlist+0x202>
 8000a72:	6366      	str	r6, [r4, #52]	; 0x34
 8000a74:	462a      	mov	r2, r5
 8000a76:	2300      	movs	r3, #0
 8000a78:	212e      	movs	r1, #46	; 0x2e
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff fbc8 	bl	8000210 <d_make_comp>
 8000a80:	6038      	str	r0, [r7, #0]
 8000a82:	b330      	cbz	r0, 8000ad2 <d_exprlist+0xf2>
 8000a84:	68e3      	ldr	r3, [r4, #12]
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4542      	cmp	r2, r8
 8000a8a:	f100 070c 	add.w	r7, r0, #12
 8000a8e:	d1b6      	bne.n	80009fe <d_exprlist+0x1e>
 8000a90:	3301      	adds	r3, #1
 8000a92:	9d01      	ldr	r5, [sp, #4]
 8000a94:	60e3      	str	r3, [r4, #12]
 8000a96:	4628      	mov	r0, r5
 8000a98:	b003      	add	sp, #12
 8000a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9e:	785a      	ldrb	r2, [r3, #1]
 8000aa0:	2a72      	cmp	r2, #114	; 0x72
 8000aa2:	f000 80ab 	beq.w	8000bfc <d_exprlist+0x21c>
 8000aa6:	2a70      	cmp	r2, #112	; 0x70
 8000aa8:	d1b9      	bne.n	8000a1e <d_exprlist+0x3e>
 8000aaa:	3302      	adds	r3, #2
 8000aac:	60e3      	str	r3, [r4, #12]
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f000 fa04 	bl	8000ebc <d_expression_1>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	214a      	movs	r1, #74	; 0x4a
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fba8 	bl	8000210 <d_make_comp>
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	e003      	b.n	8000acc <d_exprlist+0xec>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f002 f813 	bl	8002af0 <d_expr_primary>
 8000aca:	4605      	mov	r5, r0
 8000acc:	6366      	str	r6, [r4, #52]	; 0x34
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d1d0      	bne.n	8000a74 <d_exprlist+0x94>
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000adc:	4620      	mov	r0, r4
 8000ade:	f7ff fcef 	bl	80004c0 <d_template_param>
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	e7f2      	b.n	8000acc <d_exprlist+0xec>
 8000ae6:	6883      	ldr	r3, [r0, #8]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d819      	bhi.n	8000b20 <d_exprlist+0x140>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <d_exprlist+0x114>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000c87 	.word	0x08000c87
 8000af8:	08000a47 	.word	0x08000a47
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b21 	.word	0x08000b21
 8000b04:	2a74      	cmp	r2, #116	; 0x74
 8000b06:	d18a      	bne.n	8000a1e <d_exprlist+0x3e>
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	2b6c      	cmp	r3, #108	; 0x6c
 8000b0c:	d187      	bne.n	8000a1e <d_exprlist+0x3e>
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f000 fdfe 	bl	8001710 <d_type>
 8000b14:	68e3      	ldr	r3, [r4, #12]
 8000b16:	785a      	ldrb	r2, [r3, #1]
 8000b18:	4605      	mov	r5, r0
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8123 	bne.w	8000d66 <d_exprlist+0x386>
 8000b20:	2500      	movs	r5, #0
 8000b22:	4628      	mov	r0, r5
 8000b24:	6366      	str	r6, [r4, #52]	; 0x34
 8000b26:	b003      	add	sp, #12
 8000b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2c:	1c9a      	adds	r2, r3, #2
 8000b2e:	60e2      	str	r2, [r4, #12]
 8000b30:	789a      	ldrb	r2, [r3, #2]
 8000b32:	2a54      	cmp	r2, #84	; 0x54
 8000b34:	f040 8082 	bne.w	8000c3c <d_exprlist+0x25c>
 8000b38:	3303      	adds	r3, #3
 8000b3a:	60e3      	str	r3, [r4, #12]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	daec      	bge.n	8000b20 <d_exprlist+0x140>
 8000b46:	6921      	ldr	r1, [r4, #16]
 8000b48:	011a      	lsls	r2, r3, #4
 8000b4a:	188d      	adds	r5, r1, r2
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	f04f 0e00 	mov.w	lr, #0
 8000b52:	f04f 0c06 	mov.w	ip, #6
 8000b56:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b5a:	6163      	str	r3, [r4, #20]
 8000b5c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b60:	60a8      	str	r0, [r5, #8]
 8000b62:	e786      	b.n	8000a72 <d_exprlist+0x92>
 8000b64:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b6a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b6e:	f8db a000 	ldr.w	sl, [fp]
 8000b72:	3a02      	subs	r2, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	6323      	str	r3, [r4, #48]	; 0x30
 8000b78:	4650      	mov	r0, sl
 8000b7a:	4649      	mov	r1, r9
 8000b7c:	f006 f908 	bl	8006d90 <strcmp>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	f000 80e4 	beq.w	8000d4e <d_exprlist+0x36e>
 8000b86:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b8a:	f1bb 0f03 	cmp.w	fp, #3
 8000b8e:	d8c7      	bhi.n	8000b20 <d_exprlist+0x140>
 8000b90:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b94:	00040079 	.word	0x00040079
 8000b98:	008100f7 	.word	0x008100f7
 8000b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000ba0:	2b70      	cmp	r3, #112	; 0x70
 8000ba2:	d065      	beq.n	8000c70 <d_exprlist+0x290>
 8000ba4:	2b6d      	cmp	r3, #109	; 0x6d
 8000ba6:	d063      	beq.n	8000c70 <d_exprlist+0x290>
 8000ba8:	f04f 0b00 	mov.w	fp, #0
 8000bac:	4650      	mov	r0, sl
 8000bae:	49bd      	ldr	r1, [pc, #756]	; (8000ea4 <d_exprlist+0x4c4>)
 8000bb0:	f006 f8ee 	bl	8006d90 <strcmp>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	f040 80c0 	bne.w	8000d3a <d_exprlist+0x35a>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 fb90 	bl	80012e0 <d_template_args_1>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f1bb 0f00 	cmp.w	fp, #0
 8000bc6:	d005      	beq.n	8000bd4 <d_exprlist+0x1f4>
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2138      	movs	r1, #56	; 0x38
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f7ff fb1f 	bl	8000210 <d_make_comp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	2136      	movs	r1, #54	; 0x36
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff fb19 	bl	8000210 <d_make_comp>
 8000bde:	4605      	mov	r5, r0
 8000be0:	e774      	b.n	8000acc <d_exprlist+0xec>
 8000be2:	3301      	adds	r3, #1
 8000be4:	60e3      	str	r3, [r4, #12]
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 fb7a 	bl	80012e0 <d_template_args_1>
 8000bec:	462a      	mov	r2, r5
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fb0c 	bl	8000210 <d_make_comp>
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	e767      	b.n	8000acc <d_exprlist+0xec>
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	60e3      	str	r3, [r4, #12]
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fd85 	bl	8001710 <d_type>
 8000c06:	4682      	mov	sl, r0
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f001 fb27 	bl	800225c <d_unqualified_name>
 8000c0e:	68e3      	ldr	r3, [r4, #12]
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	2a49      	cmp	r2, #73	; 0x49
 8000c14:	4683      	mov	fp, r0
 8000c16:	d01e      	beq.n	8000c56 <d_exprlist+0x276>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4652      	mov	r2, sl
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff faf6 	bl	8000210 <d_make_comp>
 8000c24:	4605      	mov	r5, r0
 8000c26:	e751      	b.n	8000acc <d_exprlist+0xec>
 8000c28:	2a6f      	cmp	r2, #111	; 0x6f
 8000c2a:	f040 8094 	bne.w	8000d56 <d_exprlist+0x376>
 8000c2e:	785a      	ldrb	r2, [r3, #1]
 8000c30:	2a6e      	cmp	r2, #110	; 0x6e
 8000c32:	f47f aef4 	bne.w	8000a1e <d_exprlist+0x3e>
 8000c36:	3302      	adds	r3, #2
 8000c38:	60e3      	str	r3, [r4, #12]
 8000c3a:	e70e      	b.n	8000a5a <d_exprlist+0x7a>
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f7ff fc25 	bl	800048c <d_compact_number>
 8000c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c46:	4298      	cmp	r0, r3
 8000c48:	f43f af6a 	beq.w	8000b20 <d_exprlist+0x140>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	f43f af67 	beq.w	8000b20 <d_exprlist+0x140>
 8000c52:	3001      	adds	r0, #1
 8000c54:	e773      	b.n	8000b3e <d_exprlist+0x15e>
 8000c56:	3301      	adds	r3, #1
 8000c58:	60e3      	str	r3, [r4, #12]
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 fb40 	bl	80012e0 <d_template_args_1>
 8000c60:	465a      	mov	r2, fp
 8000c62:	4603      	mov	r3, r0
 8000c64:	2104      	movs	r1, #4
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff fad2 	bl	8000210 <d_make_comp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	e7d4      	b.n	8000c1a <d_exprlist+0x23a>
 8000c70:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d197      	bne.n	8000ba8 <d_exprlist+0x1c8>
 8000c78:	68e3      	ldr	r3, [r4, #12]
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c7e:	d195      	bne.n	8000bac <d_exprlist+0x1cc>
 8000c80:	3301      	adds	r3, #1
 8000c82:	60e3      	str	r3, [r4, #12]
 8000c84:	e790      	b.n	8000ba8 <d_exprlist+0x1c8>
 8000c86:	462a      	mov	r2, r5
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2135      	movs	r1, #53	; 0x35
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fabf 	bl	8000210 <d_make_comp>
 8000c92:	4605      	mov	r5, r0
 8000c94:	e71a      	b.n	8000acc <d_exprlist+0xec>
 8000c96:	f1ba 0f00 	cmp.w	sl, #0
 8000c9a:	f43f af41 	beq.w	8000b20 <d_exprlist+0x140>
 8000c9e:	4982      	ldr	r1, [pc, #520]	; (8000ea8 <d_exprlist+0x4c8>)
 8000ca0:	4650      	mov	r0, sl
 8000ca2:	f006 f875 	bl	8006d90 <strcmp>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	f000 80c7 	beq.w	8000e3a <d_exprlist+0x45a>
 8000cac:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb0:	2b66      	cmp	r3, #102	; 0x66
 8000cb2:	f000 80ed 	beq.w	8000e90 <d_exprlist+0x4b0>
 8000cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8000cb8:	f47f af32 	bne.w	8000b20 <d_exprlist+0x140>
 8000cbc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cc0:	2b77      	cmp	r3, #119	; 0x77
 8000cc2:	d002      	beq.n	8000cca <d_exprlist+0x2ea>
 8000cc4:	2b61      	cmp	r3, #97	; 0x61
 8000cc6:	f47f af2b 	bne.w	8000b20 <d_exprlist+0x140>
 8000cca:	215f      	movs	r1, #95	; 0x5f
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fe87 	bl	80009e0 <d_exprlist>
 8000cd2:	4682      	mov	sl, r0
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f000 fd1b 	bl	8001710 <d_type>
 8000cda:	68e3      	ldr	r3, [r4, #12]
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2a45      	cmp	r2, #69	; 0x45
 8000ce0:	4683      	mov	fp, r0
 8000ce2:	f000 8086 	beq.w	8000df2 <d_exprlist+0x412>
 8000ce6:	2a70      	cmp	r2, #112	; 0x70
 8000ce8:	f000 80c6 	beq.w	8000e78 <d_exprlist+0x498>
 8000cec:	2a69      	cmp	r2, #105	; 0x69
 8000cee:	f47f af17 	bne.w	8000b20 <d_exprlist+0x140>
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cf6:	f47f af13 	bne.w	8000b20 <d_exprlist+0x140>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f000 f8de 	bl	8000ebc <d_expression_1>
 8000d00:	4603      	mov	r3, r0
 8000d02:	465a      	mov	r2, fp
 8000d04:	213b      	movs	r1, #59	; 0x3b
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fa82 	bl	8000210 <d_make_comp>
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	4603      	mov	r3, r0
 8000d10:	213a      	movs	r1, #58	; 0x3a
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff fa7c 	bl	8000210 <d_make_comp>
 8000d18:	462a      	mov	r2, r5
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2139      	movs	r1, #57	; 0x39
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fa76 	bl	8000210 <d_make_comp>
 8000d24:	4605      	mov	r5, r0
 8000d26:	e6d1      	b.n	8000acc <d_exprlist+0xec>
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60c3      	str	r3, [r0, #12]
 8000d2c:	212e      	movs	r1, #46	; 0x2e
 8000d2e:	4613      	mov	r3, r2
 8000d30:	b003      	add	sp, #12
 8000d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d36:	f7ff ba6b 	b.w	8000210 <d_make_comp>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f8be 	bl	8000ebc <d_expression_1>
 8000d40:	4603      	mov	r3, r0
 8000d42:	e73e      	b.n	8000bc2 <d_exprlist+0x1e2>
 8000d44:	4628      	mov	r0, r5
 8000d46:	6366      	str	r6, [r4, #52]	; 0x34
 8000d48:	b003      	add	sp, #12
 8000d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f000 fcde 	bl	8001710 <d_type>
 8000d54:	e73d      	b.n	8000bd2 <d_exprlist+0x1f2>
 8000d56:	2a69      	cmp	r2, #105	; 0x69
 8000d58:	f47f aed4 	bne.w	8000b04 <d_exprlist+0x124>
 8000d5c:	785a      	ldrb	r2, [r3, #1]
 8000d5e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d60:	f47f ae5d 	bne.w	8000a1e <d_exprlist+0x3e>
 8000d64:	2500      	movs	r5, #0
 8000d66:	3302      	adds	r3, #2
 8000d68:	60e3      	str	r3, [r4, #12]
 8000d6a:	2145      	movs	r1, #69	; 0x45
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff fe37 	bl	80009e0 <d_exprlist>
 8000d72:	462a      	mov	r2, r5
 8000d74:	4603      	mov	r3, r0
 8000d76:	2130      	movs	r1, #48	; 0x30
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fa49 	bl	8000210 <d_make_comp>
 8000d7e:	4605      	mov	r5, r0
 8000d80:	e6a4      	b.n	8000acc <d_exprlist+0xec>
 8000d82:	f1ba 0f00 	cmp.w	sl, #0
 8000d86:	f43f aecb 	beq.w	8000b20 <d_exprlist+0x140>
 8000d8a:	68ab      	ldr	r3, [r5, #8]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	785a      	ldrb	r2, [r3, #1]
 8000d90:	2a63      	cmp	r2, #99	; 0x63
 8000d92:	d03a      	beq.n	8000e0a <d_exprlist+0x42a>
 8000d94:	f89a 3000 	ldrb.w	r3, [sl]
 8000d98:	2b66      	cmp	r3, #102	; 0x66
 8000d9a:	d149      	bne.n	8000e30 <d_exprlist+0x450>
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f001 f8b1 	bl	8001f04 <d_operator_name>
 8000da2:	4683      	mov	fp, r0
 8000da4:	4941      	ldr	r1, [pc, #260]	; (8000eac <d_exprlist+0x4cc>)
 8000da6:	4650      	mov	r0, sl
 8000da8:	f005 fff2 	bl	8006d90 <strcmp>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d039      	beq.n	8000e24 <d_exprlist+0x444>
 8000db0:	493f      	ldr	r1, [pc, #252]	; (8000eb0 <d_exprlist+0x4d0>)
 8000db2:	4650      	mov	r0, sl
 8000db4:	f005 ffec 	bl	8006d90 <strcmp>
 8000db8:	b128      	cbz	r0, 8000dc6 <d_exprlist+0x3e6>
 8000dba:	4650      	mov	r0, sl
 8000dbc:	493d      	ldr	r1, [pc, #244]	; (8000eb4 <d_exprlist+0x4d4>)
 8000dbe:	f005 ffe7 	bl	8006d90 <strcmp>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d168      	bne.n	8000e98 <d_exprlist+0x4b8>
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f001 fa48 	bl	800225c <d_unqualified_name>
 8000dcc:	68e3      	ldr	r3, [r4, #12]
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	2a49      	cmp	r2, #73	; 0x49
 8000dd2:	4682      	mov	sl, r0
 8000dd4:	d043      	beq.n	8000e5e <d_exprlist+0x47e>
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	465a      	mov	r2, fp
 8000dda:	2138      	movs	r1, #56	; 0x38
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff fa17 	bl	8000210 <d_make_comp>
 8000de2:	462a      	mov	r2, r5
 8000de4:	4603      	mov	r3, r0
 8000de6:	2137      	movs	r1, #55	; 0x37
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fa11 	bl	8000210 <d_make_comp>
 8000dee:	4605      	mov	r5, r0
 8000df0:	e66c      	b.n	8000acc <d_exprlist+0xec>
 8000df2:	3301      	adds	r3, #1
 8000df4:	60e3      	str	r3, [r4, #12]
 8000df6:	2300      	movs	r3, #0
 8000df8:	e783      	b.n	8000d02 <d_exprlist+0x322>
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60e3      	str	r3, [r4, #12]
 8000dfe:	2145      	movs	r1, #69	; 0x45
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fded 	bl	80009e0 <d_exprlist>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e6e4      	b.n	8000bd4 <d_exprlist+0x1f4>
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000e10:	2a01      	cmp	r2, #1
 8000e12:	d902      	bls.n	8000e1a <d_exprlist+0x43a>
 8000e14:	3b72      	subs	r3, #114	; 0x72
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d8bc      	bhi.n	8000d94 <d_exprlist+0x3b4>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 fc78 	bl	8001710 <d_type>
 8000e20:	4683      	mov	fp, r0
 8000e22:	e7bf      	b.n	8000da4 <d_exprlist+0x3c4>
 8000e24:	2145      	movs	r1, #69	; 0x45
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff fdda 	bl	80009e0 <d_exprlist>
 8000e2c:	4682      	mov	sl, r0
 8000e2e:	e7d2      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000e30:	4620      	mov	r0, r4
 8000e32:	f000 f843 	bl	8000ebc <d_expression_1>
 8000e36:	4683      	mov	fp, r0
 8000e38:	e7b4      	b.n	8000da4 <d_exprlist+0x3c4>
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f000 f83e 	bl	8000ebc <d_expression_1>
 8000e40:	4682      	mov	sl, r0
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 f83a 	bl	8000ebc <d_expression_1>
 8000e48:	4683      	mov	fp, r0
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 f836 	bl	8000ebc <d_expression_1>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2800      	cmp	r0, #0
 8000e54:	f47f af55 	bne.w	8000d02 <d_exprlist+0x322>
 8000e58:	6366      	str	r6, [r4, #52]	; 0x34
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	e61b      	b.n	8000a96 <d_exprlist+0xb6>
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60e3      	str	r3, [r4, #12]
 8000e62:	4620      	mov	r0, r4
 8000e64:	f000 fa3c 	bl	80012e0 <d_template_args_1>
 8000e68:	4652      	mov	r2, sl
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ce 	bl	8000210 <d_make_comp>
 8000e74:	4682      	mov	sl, r0
 8000e76:	e7ae      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000e78:	785a      	ldrb	r2, [r3, #1]
 8000e7a:	2a69      	cmp	r2, #105	; 0x69
 8000e7c:	f47f ae50 	bne.w	8000b20 <d_exprlist+0x140>
 8000e80:	3302      	adds	r3, #2
 8000e82:	60e3      	str	r3, [r4, #12]
 8000e84:	2145      	movs	r1, #69	; 0x45
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff fdaa 	bl	80009e0 <d_exprlist>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e738      	b.n	8000d02 <d_exprlist+0x322>
 8000e90:	4620      	mov	r0, r4
 8000e92:	f001 f837 	bl	8001f04 <d_operator_name>
 8000e96:	e7d3      	b.n	8000e40 <d_exprlist+0x460>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 f80f 	bl	8000ebc <d_expression_1>
 8000e9e:	4682      	mov	sl, r0
 8000ea0:	e799      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000ea2:	bf00      	nop
 8000ea4:	080b39d4 	.word	0x080b39d4
 8000ea8:	080b39e4 	.word	0x080b39e4
 8000eac:	080b39d8 	.word	0x080b39d8
 8000eb0:	080b39dc 	.word	0x080b39dc
 8000eb4:	080b39e0 	.word	0x080b39e0
 8000eb8:	080b3ef0 	.word	0x080b3ef0

08000ebc <d_expression_1>:
 8000ebc:	68c1      	ldr	r1, [r0, #12]
 8000ebe:	780b      	ldrb	r3, [r1, #0]
 8000ec0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec2:	d067      	beq.n	8000f94 <d_expression_1+0xd8>
 8000ec4:	2b54      	cmp	r3, #84	; 0x54
 8000ec6:	d067      	beq.n	8000f98 <d_expression_1+0xdc>
 8000ec8:	2b73      	cmp	r3, #115	; 0x73
 8000eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ece:	4604      	mov	r4, r0
 8000ed0:	d01c      	beq.n	8000f0c <d_expression_1+0x50>
 8000ed2:	2b66      	cmp	r3, #102	; 0x66
 8000ed4:	d13d      	bne.n	8000f52 <d_expression_1+0x96>
 8000ed6:	784b      	ldrb	r3, [r1, #1]
 8000ed8:	2b70      	cmp	r3, #112	; 0x70
 8000eda:	d11d      	bne.n	8000f18 <d_expression_1+0x5c>
 8000edc:	1c8b      	adds	r3, r1, #2
 8000ede:	60c3      	str	r3, [r0, #12]
 8000ee0:	788b      	ldrb	r3, [r1, #2]
 8000ee2:	2b54      	cmp	r3, #84	; 0x54
 8000ee4:	f040 809a 	bne.w	800101c <d_expression_1+0x160>
 8000ee8:	3103      	adds	r1, #3
 8000eea:	60c1      	str	r1, [r0, #12]
 8000eec:	2000      	movs	r0, #0
 8000eee:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	da4a      	bge.n	8000f8c <d_expression_1+0xd0>
 8000ef6:	6921      	ldr	r1, [r4, #16]
 8000ef8:	011a      	lsls	r2, r3, #4
 8000efa:	188d      	adds	r5, r1, r2
 8000efc:	3301      	adds	r3, #1
 8000efe:	2700      	movs	r7, #0
 8000f00:	2606      	movs	r6, #6
 8000f02:	606f      	str	r7, [r5, #4]
 8000f04:	6163      	str	r3, [r4, #20]
 8000f06:	548e      	strb	r6, [r1, r2]
 8000f08:	60a8      	str	r0, [r5, #8]
 8000f0a:	e02f      	b.n	8000f6c <d_expression_1+0xb0>
 8000f0c:	784b      	ldrb	r3, [r1, #1]
 8000f0e:	2b72      	cmp	r3, #114	; 0x72
 8000f10:	d06e      	beq.n	8000ff0 <d_expression_1+0x134>
 8000f12:	2b70      	cmp	r3, #112	; 0x70
 8000f14:	f000 8160 	beq.w	80011d8 <d_expression_1+0x31c>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f000 fff3 	bl	8001f04 <d_operator_name>
 8000f1e:	4605      	mov	r5, r0
 8000f20:	b3a0      	cbz	r0, 8000f8c <d_expression_1+0xd0>
 8000f22:	7803      	ldrb	r3, [r0, #0]
 8000f24:	2b31      	cmp	r3, #49	; 0x31
 8000f26:	d039      	beq.n	8000f9c <d_expression_1+0xe0>
 8000f28:	2b32      	cmp	r3, #50	; 0x32
 8000f2a:	f000 8127 	beq.w	800117c <d_expression_1+0x2c0>
 8000f2e:	2b33      	cmp	r3, #51	; 0x33
 8000f30:	d12c      	bne.n	8000f8c <d_expression_1+0xd0>
 8000f32:	68e3      	ldr	r3, [r4, #12]
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	2a5f      	cmp	r2, #95	; 0x5f
 8000f38:	f000 8176 	beq.w	8001228 <d_expression_1+0x36c>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff ffbd 	bl	8000ebc <d_expression_1>
 8000f42:	4603      	mov	r3, r0
 8000f44:	462a      	mov	r2, r5
 8000f46:	4620      	mov	r0, r4
 8000f48:	2136      	movs	r1, #54	; 0x36
 8000f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	f7ff b95f 	b.w	8000210 <d_make_comp>
 8000f52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f56:	2a09      	cmp	r2, #9
 8000f58:	d841      	bhi.n	8000fde <d_expression_1+0x122>
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f001 f97e 	bl	800225c <d_unqualified_name>
 8000f60:	4605      	mov	r5, r0
 8000f62:	b198      	cbz	r0, 8000f8c <d_expression_1+0xd0>
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	2a49      	cmp	r2, #73	; 0x49
 8000f6a:	d02b      	beq.n	8000fc4 <d_expression_1+0x108>
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f72:	2b74      	cmp	r3, #116	; 0x74
 8000f74:	d1d0      	bne.n	8000f18 <d_expression_1+0x5c>
 8000f76:	784b      	ldrb	r3, [r1, #1]
 8000f78:	2b6c      	cmp	r3, #108	; 0x6c
 8000f7a:	d1cd      	bne.n	8000f18 <d_expression_1+0x5c>
 8000f7c:	f000 fbc8 	bl	8001710 <d_type>
 8000f80:	68e1      	ldr	r1, [r4, #12]
 8000f82:	784b      	ldrb	r3, [r1, #1]
 8000f84:	4605      	mov	r5, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8190 	bne.w	80012ac <d_expression_1+0x3f0>
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	4628      	mov	r0, r5
 8000f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f94:	f001 bdac 	b.w	8002af0 <d_expr_primary>
 8000f98:	f7ff ba92 	b.w	80004c0 <d_template_param>
 8000f9c:	6887      	ldr	r7, [r0, #8]
 8000f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	683e      	ldr	r6, [r7, #0]
 8000fa4:	49c8      	ldr	r1, [pc, #800]	; (80012c8 <d_expression_1+0x40c>)
 8000fa6:	3a02      	subs	r2, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	6323      	str	r3, [r4, #48]	; 0x30
 8000fac:	4630      	mov	r0, r6
 8000fae:	f005 feef 	bl	8006d90 <strcmp>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d05b      	beq.n	800106e <d_expression_1+0x1b2>
 8000fb6:	68ff      	ldr	r7, [r7, #12]
 8000fb8:	2f03      	cmp	r7, #3
 8000fba:	d8e7      	bhi.n	8000f8c <d_expression_1+0xd0>
 8000fbc:	e8df f007 	tbb	[pc, r7]
 8000fc0:	64a7385c 	.word	0x64a7385c
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60e3      	str	r3, [r4, #12]
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f000 f989 	bl	80012e0 <d_template_args_1>
 8000fce:	462a      	mov	r2, r5
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fda:	f7ff b919 	b.w	8000210 <d_make_comp>
 8000fde:	2b6f      	cmp	r3, #111	; 0x6f
 8000fe0:	f040 815c 	bne.w	800129c <d_expression_1+0x3e0>
 8000fe4:	784b      	ldrb	r3, [r1, #1]
 8000fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fe8:	d196      	bne.n	8000f18 <d_expression_1+0x5c>
 8000fea:	3102      	adds	r1, #2
 8000fec:	60c1      	str	r1, [r0, #12]
 8000fee:	e7b4      	b.n	8000f5a <d_expression_1+0x9e>
 8000ff0:	3102      	adds	r1, #2
 8000ff2:	60c1      	str	r1, [r0, #12]
 8000ff4:	f000 fb8c 	bl	8001710 <d_type>
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f001 f92e 	bl	800225c <d_unqualified_name>
 8001000:	68e3      	ldr	r3, [r4, #12]
 8001002:	7819      	ldrb	r1, [r3, #0]
 8001004:	2949      	cmp	r1, #73	; 0x49
 8001006:	4606      	mov	r6, r0
 8001008:	f000 80d9 	beq.w	80011be <d_expression_1+0x302>
 800100c:	4603      	mov	r3, r0
 800100e:	462a      	mov	r2, r5
 8001010:	4620      	mov	r0, r4
 8001012:	2101      	movs	r1, #1
 8001014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001018:	f7ff b8fa 	b.w	8000210 <d_make_comp>
 800101c:	f7ff fa36 	bl	800048c <d_compact_number>
 8001020:	43c3      	mvns	r3, r0
 8001022:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8001026:	bf18      	it	ne
 8001028:	3001      	addne	r0, #1
 800102a:	f47f af60 	bne.w	8000eee <d_expression_1+0x32>
 800102e:	e7ad      	b.n	8000f8c <d_expression_1+0xd0>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d083      	beq.n	8000f3c <d_expression_1+0x80>
 8001034:	7833      	ldrb	r3, [r6, #0]
 8001036:	2b70      	cmp	r3, #112	; 0x70
 8001038:	f000 80b0 	beq.w	800119c <d_expression_1+0x2e0>
 800103c:	2b6d      	cmp	r3, #109	; 0x6d
 800103e:	f000 80ad 	beq.w	800119c <d_expression_1+0x2e0>
 8001042:	2700      	movs	r7, #0
 8001044:	4630      	mov	r0, r6
 8001046:	49a1      	ldr	r1, [pc, #644]	; (80012cc <d_expression_1+0x410>)
 8001048:	f005 fea2 	bl	8006d90 <strcmp>
 800104c:	2800      	cmp	r0, #0
 800104e:	f040 80b1 	bne.w	80011b4 <d_expression_1+0x2f8>
 8001052:	4620      	mov	r0, r4
 8001054:	f000 f944 	bl	80012e0 <d_template_args_1>
 8001058:	4603      	mov	r3, r0
 800105a:	2f00      	cmp	r7, #0
 800105c:	f43f af72 	beq.w	8000f44 <d_expression_1+0x88>
 8001060:	461a      	mov	r2, r3
 8001062:	2138      	movs	r1, #56	; 0x38
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff f8d3 	bl	8000210 <d_make_comp>
 800106a:	4603      	mov	r3, r0
 800106c:	e76a      	b.n	8000f44 <d_expression_1+0x88>
 800106e:	4620      	mov	r0, r4
 8001070:	f000 fb4e 	bl	8001710 <d_type>
 8001074:	4603      	mov	r3, r0
 8001076:	e765      	b.n	8000f44 <d_expression_1+0x88>
 8001078:	462a      	mov	r2, r5
 800107a:	4620      	mov	r0, r4
 800107c:	2300      	movs	r3, #0
 800107e:	2135      	movs	r1, #53	; 0x35
 8001080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001084:	f7ff b8c4 	b.w	8000210 <d_make_comp>
 8001088:	4991      	ldr	r1, [pc, #580]	; (80012d0 <d_expression_1+0x414>)
 800108a:	4630      	mov	r0, r6
 800108c:	f005 fe80 	bl	8006d90 <strcmp>
 8001090:	2800      	cmp	r0, #0
 8001092:	f000 80d1 	beq.w	8001238 <d_expression_1+0x37c>
 8001096:	7833      	ldrb	r3, [r6, #0]
 8001098:	2b66      	cmp	r3, #102	; 0x66
 800109a:	f000 80f6 	beq.w	800128a <d_expression_1+0x3ce>
 800109e:	2b6e      	cmp	r3, #110	; 0x6e
 80010a0:	f47f af74 	bne.w	8000f8c <d_expression_1+0xd0>
 80010a4:	7873      	ldrb	r3, [r6, #1]
 80010a6:	2b77      	cmp	r3, #119	; 0x77
 80010a8:	d002      	beq.n	80010b0 <d_expression_1+0x1f4>
 80010aa:	2b61      	cmp	r3, #97	; 0x61
 80010ac:	f47f af6e 	bne.w	8000f8c <d_expression_1+0xd0>
 80010b0:	215f      	movs	r1, #95	; 0x5f
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fc94 	bl	80009e0 <d_exprlist>
 80010b8:	4606      	mov	r6, r0
 80010ba:	4620      	mov	r0, r4
 80010bc:	f000 fb28 	bl	8001710 <d_type>
 80010c0:	68e3      	ldr	r3, [r4, #12]
 80010c2:	7819      	ldrb	r1, [r3, #0]
 80010c4:	2945      	cmp	r1, #69	; 0x45
 80010c6:	4607      	mov	r7, r0
 80010c8:	f000 80aa 	beq.w	8001220 <d_expression_1+0x364>
 80010cc:	2970      	cmp	r1, #112	; 0x70
 80010ce:	f000 80d0 	beq.w	8001272 <d_expression_1+0x3b6>
 80010d2:	2969      	cmp	r1, #105	; 0x69
 80010d4:	f47f af5a 	bne.w	8000f8c <d_expression_1+0xd0>
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	2b6c      	cmp	r3, #108	; 0x6c
 80010dc:	f47f af56 	bne.w	8000f8c <d_expression_1+0xd0>
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff feeb 	bl	8000ebc <d_expression_1>
 80010e6:	4603      	mov	r3, r0
 80010e8:	463a      	mov	r2, r7
 80010ea:	213b      	movs	r1, #59	; 0x3b
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff f88f 	bl	8000210 <d_make_comp>
 80010f2:	4632      	mov	r2, r6
 80010f4:	4603      	mov	r3, r0
 80010f6:	213a      	movs	r1, #58	; 0x3a
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff f889 	bl	8000210 <d_make_comp>
 80010fe:	462a      	mov	r2, r5
 8001100:	4603      	mov	r3, r0
 8001102:	2139      	movs	r1, #57	; 0x39
 8001104:	4620      	mov	r0, r4
 8001106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800110a:	f7ff b881 	b.w	8000210 <d_make_comp>
 800110e:	2e00      	cmp	r6, #0
 8001110:	f43f af3c 	beq.w	8000f8c <d_expression_1+0xd0>
 8001114:	68ab      	ldr	r3, [r5, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	785a      	ldrb	r2, [r3, #1]
 800111a:	2a63      	cmp	r2, #99	; 0x63
 800111c:	d068      	beq.n	80011f0 <d_expression_1+0x334>
 800111e:	7833      	ldrb	r3, [r6, #0]
 8001120:	2b66      	cmp	r3, #102	; 0x66
 8001122:	d178      	bne.n	8001216 <d_expression_1+0x35a>
 8001124:	4620      	mov	r0, r4
 8001126:	f000 feed 	bl	8001f04 <d_operator_name>
 800112a:	4607      	mov	r7, r0
 800112c:	4969      	ldr	r1, [pc, #420]	; (80012d4 <d_expression_1+0x418>)
 800112e:	4630      	mov	r0, r6
 8001130:	f005 fe2e 	bl	8006d90 <strcmp>
 8001134:	2800      	cmp	r0, #0
 8001136:	d068      	beq.n	800120a <d_expression_1+0x34e>
 8001138:	4967      	ldr	r1, [pc, #412]	; (80012d8 <d_expression_1+0x41c>)
 800113a:	4630      	mov	r0, r6
 800113c:	f005 fe28 	bl	8006d90 <strcmp>
 8001140:	b130      	cbz	r0, 8001150 <d_expression_1+0x294>
 8001142:	4630      	mov	r0, r6
 8001144:	4965      	ldr	r1, [pc, #404]	; (80012dc <d_expression_1+0x420>)
 8001146:	f005 fe23 	bl	8006d90 <strcmp>
 800114a:	2800      	cmp	r0, #0
 800114c:	f040 80a1 	bne.w	8001292 <d_expression_1+0x3d6>
 8001150:	4620      	mov	r0, r4
 8001152:	f001 f883 	bl	800225c <d_unqualified_name>
 8001156:	68e3      	ldr	r3, [r4, #12]
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	2a49      	cmp	r2, #73	; 0x49
 800115c:	4606      	mov	r6, r0
 800115e:	d07b      	beq.n	8001258 <d_expression_1+0x39c>
 8001160:	4633      	mov	r3, r6
 8001162:	463a      	mov	r2, r7
 8001164:	2138      	movs	r1, #56	; 0x38
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff f852 	bl	8000210 <d_make_comp>
 800116c:	462a      	mov	r2, r5
 800116e:	4603      	mov	r3, r0
 8001170:	2137      	movs	r1, #55	; 0x37
 8001172:	4620      	mov	r0, r4
 8001174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001178:	f7ff b84a 	b.w	8000210 <d_make_comp>
 800117c:	6883      	ldr	r3, [r0, #8]
 800117e:	2b03      	cmp	r3, #3
 8001180:	f63f af04 	bhi.w	8000f8c <d_expression_1+0xd0>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <d_expression_1+0x2d0>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	08001079 	.word	0x08001079
 8001190:	08000f3d 	.word	0x08000f3d
 8001194:	08000f8d 	.word	0x08000f8d
 8001198:	08000f8d 	.word	0x08000f8d
 800119c:	7872      	ldrb	r2, [r6, #1]
 800119e:	429a      	cmp	r2, r3
 80011a0:	f47f af4f 	bne.w	8001042 <d_expression_1+0x186>
 80011a4:	68e3      	ldr	r3, [r4, #12]
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	2a5f      	cmp	r2, #95	; 0x5f
 80011aa:	f47f af4b 	bne.w	8001044 <d_expression_1+0x188>
 80011ae:	3301      	adds	r3, #1
 80011b0:	60e3      	str	r3, [r4, #12]
 80011b2:	e746      	b.n	8001042 <d_expression_1+0x186>
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fe81 	bl	8000ebc <d_expression_1>
 80011ba:	4603      	mov	r3, r0
 80011bc:	e74d      	b.n	800105a <d_expression_1+0x19e>
 80011be:	3301      	adds	r3, #1
 80011c0:	60e3      	str	r3, [r4, #12]
 80011c2:	4620      	mov	r0, r4
 80011c4:	f000 f88c 	bl	80012e0 <d_template_args_1>
 80011c8:	4632      	mov	r2, r6
 80011ca:	4603      	mov	r3, r0
 80011cc:	2104      	movs	r1, #4
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff f81e 	bl	8000210 <d_make_comp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	e71a      	b.n	800100e <d_expression_1+0x152>
 80011d8:	3102      	adds	r1, #2
 80011da:	60e1      	str	r1, [r4, #12]
 80011dc:	f7ff fe6e 	bl	8000ebc <d_expression_1>
 80011e0:	2300      	movs	r3, #0
 80011e2:	4602      	mov	r2, r0
 80011e4:	214a      	movs	r1, #74	; 0x4a
 80011e6:	4620      	mov	r0, r4
 80011e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011ec:	f7ff b810 	b.w	8000210 <d_make_comp>
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011f6:	2a01      	cmp	r2, #1
 80011f8:	d902      	bls.n	8001200 <d_expression_1+0x344>
 80011fa:	3b72      	subs	r3, #114	; 0x72
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d88e      	bhi.n	800111e <d_expression_1+0x262>
 8001200:	4620      	mov	r0, r4
 8001202:	f000 fa85 	bl	8001710 <d_type>
 8001206:	4607      	mov	r7, r0
 8001208:	e790      	b.n	800112c <d_expression_1+0x270>
 800120a:	2145      	movs	r1, #69	; 0x45
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fbe7 	bl	80009e0 <d_exprlist>
 8001212:	4606      	mov	r6, r0
 8001214:	e7a4      	b.n	8001160 <d_expression_1+0x2a4>
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff fe50 	bl	8000ebc <d_expression_1>
 800121c:	4607      	mov	r7, r0
 800121e:	e785      	b.n	800112c <d_expression_1+0x270>
 8001220:	3301      	adds	r3, #1
 8001222:	60e3      	str	r3, [r4, #12]
 8001224:	2300      	movs	r3, #0
 8001226:	e75f      	b.n	80010e8 <d_expression_1+0x22c>
 8001228:	3301      	adds	r3, #1
 800122a:	60e3      	str	r3, [r4, #12]
 800122c:	2145      	movs	r1, #69	; 0x45
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff fbd6 	bl	80009e0 <d_exprlist>
 8001234:	4603      	mov	r3, r0
 8001236:	e685      	b.n	8000f44 <d_expression_1+0x88>
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fe3f 	bl	8000ebc <d_expression_1>
 800123e:	4606      	mov	r6, r0
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fe3b 	bl	8000ebc <d_expression_1>
 8001246:	4607      	mov	r7, r0
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff fe37 	bl	8000ebc <d_expression_1>
 800124e:	4603      	mov	r3, r0
 8001250:	2800      	cmp	r0, #0
 8001252:	f47f af49 	bne.w	80010e8 <d_expression_1+0x22c>
 8001256:	e699      	b.n	8000f8c <d_expression_1+0xd0>
 8001258:	3301      	adds	r3, #1
 800125a:	60e3      	str	r3, [r4, #12]
 800125c:	4620      	mov	r0, r4
 800125e:	f000 f83f 	bl	80012e0 <d_template_args_1>
 8001262:	4632      	mov	r2, r6
 8001264:	4603      	mov	r3, r0
 8001266:	2104      	movs	r1, #4
 8001268:	4620      	mov	r0, r4
 800126a:	f7fe ffd1 	bl	8000210 <d_make_comp>
 800126e:	4606      	mov	r6, r0
 8001270:	e776      	b.n	8001160 <d_expression_1+0x2a4>
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	2a69      	cmp	r2, #105	; 0x69
 8001276:	f47f ae89 	bne.w	8000f8c <d_expression_1+0xd0>
 800127a:	3302      	adds	r3, #2
 800127c:	60e3      	str	r3, [r4, #12]
 800127e:	2145      	movs	r1, #69	; 0x45
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fbad 	bl	80009e0 <d_exprlist>
 8001286:	4603      	mov	r3, r0
 8001288:	e72e      	b.n	80010e8 <d_expression_1+0x22c>
 800128a:	4620      	mov	r0, r4
 800128c:	f000 fe3a 	bl	8001f04 <d_operator_name>
 8001290:	e7d5      	b.n	800123e <d_expression_1+0x382>
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff fe12 	bl	8000ebc <d_expression_1>
 8001298:	4606      	mov	r6, r0
 800129a:	e761      	b.n	8001160 <d_expression_1+0x2a4>
 800129c:	2b69      	cmp	r3, #105	; 0x69
 800129e:	f47f ae68 	bne.w	8000f72 <d_expression_1+0xb6>
 80012a2:	784b      	ldrb	r3, [r1, #1]
 80012a4:	2b6c      	cmp	r3, #108	; 0x6c
 80012a6:	f47f ae37 	bne.w	8000f18 <d_expression_1+0x5c>
 80012aa:	2500      	movs	r5, #0
 80012ac:	3102      	adds	r1, #2
 80012ae:	60e1      	str	r1, [r4, #12]
 80012b0:	4620      	mov	r0, r4
 80012b2:	2145      	movs	r1, #69	; 0x45
 80012b4:	f7ff fb94 	bl	80009e0 <d_exprlist>
 80012b8:	462a      	mov	r2, r5
 80012ba:	4603      	mov	r3, r0
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	4620      	mov	r0, r4
 80012c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	f7fe bfa4 	b.w	8000210 <d_make_comp>
 80012c8:	080b3ef0 	.word	0x080b3ef0
 80012cc:	080b39d4 	.word	0x080b39d4
 80012d0:	080b39e4 	.word	0x080b39e4
 80012d4:	080b39d8 	.word	0x080b39d8
 80012d8:	080b39dc 	.word	0x080b39dc
 80012dc:	080b39e0 	.word	0x080b39e0

080012e0 <d_template_args_1>:
 80012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e4:	68c2      	ldr	r2, [r0, #12]
 80012e6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012e8:	7813      	ldrb	r3, [r2, #0]
 80012ea:	2b45      	cmp	r3, #69	; 0x45
 80012ec:	b082      	sub	sp, #8
 80012ee:	4604      	mov	r4, r0
 80012f0:	d04e      	beq.n	8001390 <d_template_args_1+0xb0>
 80012f2:	ad02      	add	r5, sp, #8
 80012f4:	2100      	movs	r1, #0
 80012f6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012fa:	2601      	movs	r6, #1
 80012fc:	3b49      	subs	r3, #73	; 0x49
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d83d      	bhi.n	800137e <d_template_args_1+0x9e>
 8001302:	e8df f003 	tbb	[pc, r3]
 8001306:	3737      	.short	0x3737
 8001308:	3c3c323c 	.word	0x3c3c323c
 800130c:	3c3c3c3c 	.word	0x3c3c3c3c
 8001310:	3c3c3c3c 	.word	0x3c3c3c3c
 8001314:	083c      	.short	0x083c
 8001316:	3201      	adds	r2, #1
 8001318:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 800131c:	60e2      	str	r2, [r4, #12]
 800131e:	6366      	str	r6, [r4, #52]	; 0x34
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fdcb 	bl	8000ebc <d_expression_1>
 8001326:	68e3      	ldr	r3, [r4, #12]
 8001328:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	2a45      	cmp	r2, #69	; 0x45
 8001330:	4684      	mov	ip, r0
 8001332:	f103 0301 	add.w	r3, r3, #1
 8001336:	d127      	bne.n	8001388 <d_template_args_1+0xa8>
 8001338:	60e3      	str	r3, [r4, #12]
 800133a:	2300      	movs	r3, #0
 800133c:	212f      	movs	r1, #47	; 0x2f
 800133e:	4662      	mov	r2, ip
 8001340:	4620      	mov	r0, r4
 8001342:	f1bc 0f00 	cmp.w	ip, #0
 8001346:	d01f      	beq.n	8001388 <d_template_args_1+0xa8>
 8001348:	f7fe ff62 	bl	8000210 <d_make_comp>
 800134c:	6028      	str	r0, [r5, #0]
 800134e:	f100 050c 	add.w	r5, r0, #12
 8001352:	b1c8      	cbz	r0, 8001388 <d_template_args_1+0xa8>
 8001354:	68e2      	ldr	r2, [r4, #12]
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	2b45      	cmp	r3, #69	; 0x45
 800135a:	d1cf      	bne.n	80012fc <d_template_args_1+0x1c>
 800135c:	9801      	ldr	r0, [sp, #4]
 800135e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001360:	3201      	adds	r2, #1
 8001362:	60e2      	str	r2, [r4, #12]
 8001364:	b002      	add	sp, #8
 8001366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136a:	4620      	mov	r0, r4
 800136c:	f001 fbc0 	bl	8002af0 <d_expr_primary>
 8001370:	4684      	mov	ip, r0
 8001372:	e7e2      	b.n	800133a <d_template_args_1+0x5a>
 8001374:	4620      	mov	r0, r4
 8001376:	f000 f815 	bl	80013a4 <d_template_args>
 800137a:	4684      	mov	ip, r0
 800137c:	e7dd      	b.n	800133a <d_template_args_1+0x5a>
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f9c6 	bl	8001710 <d_type>
 8001384:	4684      	mov	ip, r0
 8001386:	e7d8      	b.n	800133a <d_template_args_1+0x5a>
 8001388:	2000      	movs	r0, #0
 800138a:	b002      	add	sp, #8
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001390:	3201      	adds	r2, #1
 8001392:	2300      	movs	r3, #0
 8001394:	60c2      	str	r2, [r0, #12]
 8001396:	212f      	movs	r1, #47	; 0x2f
 8001398:	461a      	mov	r2, r3
 800139a:	b002      	add	sp, #8
 800139c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013a0:	f7fe bf36 	b.w	8000210 <d_make_comp>

080013a4 <d_template_args>:
 80013a4:	68c3      	ldr	r3, [r0, #12]
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	3a49      	subs	r2, #73	; 0x49
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d802      	bhi.n	80013b4 <d_template_args+0x10>
 80013ae:	3301      	adds	r3, #1
 80013b0:	60c3      	str	r3, [r0, #12]
 80013b2:	e795      	b.n	80012e0 <d_template_args_1>
 80013b4:	2000      	movs	r0, #0
 80013b6:	4770      	bx	lr

080013b8 <d_name>:
 80013b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013bc:	68c2      	ldr	r2, [r0, #12]
 80013be:	7813      	ldrb	r3, [r2, #0]
 80013c0:	3b4e      	subs	r3, #78	; 0x4e
 80013c2:	b083      	sub	sp, #12
 80013c4:	4604      	mov	r4, r0
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d846      	bhi.n	8001458 <d_name+0xa0>
 80013ca:	e8df f003 	tbb	[pc, r3]
 80013ce:	4567      	.short	0x4567
 80013d0:	0e454545 	.word	0x0e454545
 80013d4:	45450745 	.word	0x45450745
 80013d8:	4545      	.short	0x4545
 80013da:	a4          	.byte	0xa4
 80013db:	00          	.byte	0x00
 80013dc:	f000 ff3e 	bl	800225c <d_unqualified_name>
 80013e0:	4605      	mov	r5, r0
 80013e2:	4628      	mov	r0, r5
 80013e4:	b003      	add	sp, #12
 80013e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ea:	7853      	ldrb	r3, [r2, #1]
 80013ec:	2b74      	cmp	r3, #116	; 0x74
 80013ee:	f040 80d7 	bne.w	80015a0 <d_name+0x1e8>
 80013f2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013f6:	3202      	adds	r2, #2
 80013f8:	428b      	cmp	r3, r1
 80013fa:	60c2      	str	r2, [r0, #12]
 80013fc:	f280 8127 	bge.w	800164e <d_name+0x296>
 8001400:	6901      	ldr	r1, [r0, #16]
 8001402:	48c0      	ldr	r0, [pc, #768]	; (8001704 <d_name+0x34c>)
 8001404:	011a      	lsls	r2, r3, #4
 8001406:	188d      	adds	r5, r1, r2
 8001408:	3301      	adds	r3, #1
 800140a:	6163      	str	r3, [r4, #20]
 800140c:	2300      	movs	r3, #0
 800140e:	606b      	str	r3, [r5, #4]
 8001410:	548b      	strb	r3, [r1, r2]
 8001412:	2303      	movs	r3, #3
 8001414:	e9c5 0302 	strd	r0, r3, [r5, #8]
 8001418:	4620      	mov	r0, r4
 800141a:	f000 ff1f 	bl	800225c <d_unqualified_name>
 800141e:	462a      	mov	r2, r5
 8001420:	4603      	mov	r3, r0
 8001422:	2101      	movs	r1, #1
 8001424:	4620      	mov	r0, r4
 8001426:	f7fe fef3 	bl	8000210 <d_make_comp>
 800142a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800142c:	68e2      	ldr	r2, [r4, #12]
 800142e:	3303      	adds	r3, #3
 8001430:	6323      	str	r3, [r4, #48]	; 0x30
 8001432:	7813      	ldrb	r3, [r2, #0]
 8001434:	2b49      	cmp	r3, #73	; 0x49
 8001436:	4605      	mov	r5, r0
 8001438:	d1d3      	bne.n	80013e2 <d_name+0x2a>
 800143a:	2800      	cmp	r0, #0
 800143c:	f000 80ba 	beq.w	80015b4 <d_name+0x1fc>
 8001440:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001444:	4293      	cmp	r3, r2
 8001446:	f280 80b5 	bge.w	80015b4 <d_name+0x1fc>
 800144a:	69e1      	ldr	r1, [r4, #28]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001452:	6222      	str	r2, [r4, #32]
 8001454:	4620      	mov	r0, r4
 8001456:	e014      	b.n	8001482 <d_name+0xca>
 8001458:	f000 ff00 	bl	800225c <d_unqualified_name>
 800145c:	68e3      	ldr	r3, [r4, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b49      	cmp	r3, #73	; 0x49
 8001462:	4605      	mov	r5, r0
 8001464:	d1bd      	bne.n	80013e2 <d_name+0x2a>
 8001466:	2800      	cmp	r0, #0
 8001468:	f000 80a4 	beq.w	80015b4 <d_name+0x1fc>
 800146c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001470:	4293      	cmp	r3, r2
 8001472:	f280 809f 	bge.w	80015b4 <d_name+0x1fc>
 8001476:	69e1      	ldr	r1, [r4, #28]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800147e:	4620      	mov	r0, r4
 8001480:	6222      	str	r2, [r4, #32]
 8001482:	f7ff ff8f 	bl	80013a4 <d_template_args>
 8001486:	462a      	mov	r2, r5
 8001488:	4603      	mov	r3, r0
 800148a:	2104      	movs	r1, #4
 800148c:	4620      	mov	r0, r4
 800148e:	f7fe febf 	bl	8000210 <d_make_comp>
 8001492:	4605      	mov	r5, r0
 8001494:	4628      	mov	r0, r5
 8001496:	b003      	add	sp, #12
 8001498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800149c:	3201      	adds	r2, #1
 800149e:	60c2      	str	r2, [r0, #12]
 80014a0:	a901      	add	r1, sp, #4
 80014a2:	2201      	movs	r2, #1
 80014a4:	f000 fde6 	bl	8002074 <d_cv_qualifiers>
 80014a8:	4680      	mov	r8, r0
 80014aa:	2800      	cmp	r0, #0
 80014ac:	f000 8082 	beq.w	80015b4 <d_name+0x1fc>
 80014b0:	2100      	movs	r1, #0
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7fe fef4 	bl	80002a0 <d_ref_qualifier>
 80014b8:	68e2      	ldr	r2, [r4, #12]
 80014ba:	4e93      	ldr	r6, [pc, #588]	; (8001708 <d_name+0x350>)
 80014bc:	7815      	ldrb	r5, [r2, #0]
 80014be:	4681      	mov	r9, r0
 80014c0:	2700      	movs	r7, #0
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	f000 80b3 	beq.w	800162e <d_name+0x276>
 80014c8:	2d44      	cmp	r5, #68	; 0x44
 80014ca:	f000 8096 	beq.w	80015fa <d_name+0x242>
 80014ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b1c      	cmp	r3, #28
 80014d6:	d96f      	bls.n	80015b8 <d_name+0x200>
 80014d8:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b19      	cmp	r3, #25
 80014e0:	d96e      	bls.n	80015c0 <d_name+0x208>
 80014e2:	2d55      	cmp	r5, #85	; 0x55
 80014e4:	f000 80a1 	beq.w	800162a <d_name+0x272>
 80014e8:	2d53      	cmp	r5, #83	; 0x53
 80014ea:	f000 80b2 	beq.w	8001652 <d_name+0x29a>
 80014ee:	2d49      	cmp	r5, #73	; 0x49
 80014f0:	f000 80a4 	beq.w	800163c <d_name+0x284>
 80014f4:	2d54      	cmp	r5, #84	; 0x54
 80014f6:	f000 80e6 	beq.w	80016c6 <d_name+0x30e>
 80014fa:	2d45      	cmp	r5, #69	; 0x45
 80014fc:	f000 80e9 	beq.w	80016d2 <d_name+0x31a>
 8001500:	2d4d      	cmp	r5, #77	; 0x4d
 8001502:	f040 8094 	bne.w	800162e <d_name+0x276>
 8001506:	2f00      	cmp	r7, #0
 8001508:	f000 8091 	beq.w	800162e <d_name+0x276>
 800150c:	1c53      	adds	r3, r2, #1
 800150e:	60e3      	str	r3, [r4, #12]
 8001510:	7855      	ldrb	r5, [r2, #1]
 8001512:	461a      	mov	r2, r3
 8001514:	e7d5      	b.n	80014c2 <d_name+0x10a>
 8001516:	3201      	adds	r2, #1
 8001518:	60c2      	str	r2, [r0, #12]
 800151a:	2100      	movs	r1, #0
 800151c:	f001 f83a 	bl	8002594 <d_encoding>
 8001520:	68e3      	ldr	r3, [r4, #12]
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	2a45      	cmp	r2, #69	; 0x45
 8001526:	4606      	mov	r6, r0
 8001528:	d144      	bne.n	80015b4 <d_name+0x1fc>
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60e2      	str	r2, [r4, #12]
 800152e:	785a      	ldrb	r2, [r3, #1]
 8001530:	2a73      	cmp	r2, #115	; 0x73
 8001532:	f000 80b0 	beq.w	8001696 <d_name+0x2de>
 8001536:	2a64      	cmp	r2, #100	; 0x64
 8001538:	f000 8095 	beq.w	8001666 <d_name+0x2ae>
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff ff3b 	bl	80013b8 <d_name>
 8001542:	4605      	mov	r5, r0
 8001544:	b308      	cbz	r0, 800158a <d_name+0x1d2>
 8001546:	7803      	ldrb	r3, [r0, #0]
 8001548:	2b45      	cmp	r3, #69	; 0x45
 800154a:	d01e      	beq.n	800158a <d_name+0x1d2>
 800154c:	2b47      	cmp	r3, #71	; 0x47
 800154e:	d01c      	beq.n	800158a <d_name+0x1d2>
 8001550:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff f903 	bl	8000760 <d_discriminator>
 800155a:	b358      	cbz	r0, 80015b4 <d_name+0x1fc>
 800155c:	1c7b      	adds	r3, r7, #1
 800155e:	d014      	beq.n	800158a <d_name+0x1d2>
 8001560:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001564:	4293      	cmp	r3, r2
 8001566:	f280 8094 	bge.w	8001692 <d_name+0x2da>
 800156a:	6920      	ldr	r0, [r4, #16]
 800156c:	0119      	lsls	r1, r3, #4
 800156e:	1842      	adds	r2, r0, r1
 8001570:	3301      	adds	r3, #1
 8001572:	f04f 0e00 	mov.w	lr, #0
 8001576:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800157a:	f8c2 e004 	str.w	lr, [r2, #4]
 800157e:	6163      	str	r3, [r4, #20]
 8001580:	f800 c001 	strb.w	ip, [r0, r1]
 8001584:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001588:	4615      	mov	r5, r2
 800158a:	462b      	mov	r3, r5
 800158c:	4632      	mov	r2, r6
 800158e:	4620      	mov	r0, r4
 8001590:	2102      	movs	r1, #2
 8001592:	f7fe fe3d 	bl	8000210 <d_make_comp>
 8001596:	4605      	mov	r5, r0
 8001598:	4628      	mov	r0, r5
 800159a:	b003      	add	sp, #12
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	2100      	movs	r1, #0
 80015a2:	f7ff f825 	bl	80005f0 <d_substitution>
 80015a6:	68e3      	ldr	r3, [r4, #12]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b49      	cmp	r3, #73	; 0x49
 80015ac:	4605      	mov	r5, r0
 80015ae:	f47f af18 	bne.w	80013e2 <d_name+0x2a>
 80015b2:	e74f      	b.n	8001454 <d_name+0x9c>
 80015b4:	2500      	movs	r5, #0
 80015b6:	e714      	b.n	80013e2 <d_name+0x2a>
 80015b8:	fa26 f303 	lsr.w	r3, r6, r3
 80015bc:	07d9      	lsls	r1, r3, #31
 80015be:	d58b      	bpl.n	80014d8 <d_name+0x120>
 80015c0:	4620      	mov	r0, r4
 80015c2:	f000 fe4b 	bl	800225c <d_unqualified_name>
 80015c6:	b35f      	cbz	r7, 8001620 <d_name+0x268>
 80015c8:	2101      	movs	r1, #1
 80015ca:	4603      	mov	r3, r0
 80015cc:	463a      	mov	r2, r7
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7fe fe1e 	bl	8000210 <d_make_comp>
 80015d4:	4607      	mov	r7, r0
 80015d6:	68e2      	ldr	r2, [r4, #12]
 80015d8:	2d53      	cmp	r5, #83	; 0x53
 80015da:	7813      	ldrb	r3, [r2, #0]
 80015dc:	d01e      	beq.n	800161c <d_name+0x264>
 80015de:	2b45      	cmp	r3, #69	; 0x45
 80015e0:	d01a      	beq.n	8001618 <d_name+0x260>
 80015e2:	b327      	cbz	r7, 800162e <d_name+0x276>
 80015e4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015e8:	428b      	cmp	r3, r1
 80015ea:	da20      	bge.n	800162e <d_name+0x276>
 80015ec:	69e1      	ldr	r1, [r4, #28]
 80015ee:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015f2:	3301      	adds	r3, #1
 80015f4:	6223      	str	r3, [r4, #32]
 80015f6:	7815      	ldrb	r5, [r2, #0]
 80015f8:	e763      	b.n	80014c2 <d_name+0x10a>
 80015fa:	7853      	ldrb	r3, [r2, #1]
 80015fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001600:	2b54      	cmp	r3, #84	; 0x54
 8001602:	4620      	mov	r0, r4
 8001604:	d00e      	beq.n	8001624 <d_name+0x26c>
 8001606:	f000 fe29 	bl	800225c <d_unqualified_name>
 800160a:	2f00      	cmp	r7, #0
 800160c:	d1dc      	bne.n	80015c8 <d_name+0x210>
 800160e:	68e2      	ldr	r2, [r4, #12]
 8001610:	7813      	ldrb	r3, [r2, #0]
 8001612:	2b45      	cmp	r3, #69	; 0x45
 8001614:	4607      	mov	r7, r0
 8001616:	d1e4      	bne.n	80015e2 <d_name+0x22a>
 8001618:	461d      	mov	r5, r3
 800161a:	e758      	b.n	80014ce <d_name+0x116>
 800161c:	461d      	mov	r5, r3
 800161e:	e750      	b.n	80014c2 <d_name+0x10a>
 8001620:	4607      	mov	r7, r0
 8001622:	e7d8      	b.n	80015d6 <d_name+0x21e>
 8001624:	f000 f874 	bl	8001710 <d_type>
 8001628:	e7ef      	b.n	800160a <d_name+0x252>
 800162a:	4620      	mov	r0, r4
 800162c:	e7eb      	b.n	8001606 <d_name+0x24e>
 800162e:	2500      	movs	r5, #0
 8001630:	4628      	mov	r0, r5
 8001632:	f8c8 5000 	str.w	r5, [r8]
 8001636:	b003      	add	sp, #12
 8001638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800163c:	2f00      	cmp	r7, #0
 800163e:	d0f6      	beq.n	800162e <d_name+0x276>
 8001640:	3201      	adds	r2, #1
 8001642:	60e2      	str	r2, [r4, #12]
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fe4b 	bl	80012e0 <d_template_args_1>
 800164a:	2104      	movs	r1, #4
 800164c:	e7bd      	b.n	80015ca <d_name+0x212>
 800164e:	2500      	movs	r5, #0
 8001650:	e6e2      	b.n	8001418 <d_name+0x60>
 8001652:	2101      	movs	r1, #1
 8001654:	4620      	mov	r0, r4
 8001656:	f7fe ffcb 	bl	80005f0 <d_substitution>
 800165a:	2f00      	cmp	r7, #0
 800165c:	d1b4      	bne.n	80015c8 <d_name+0x210>
 800165e:	68e2      	ldr	r2, [r4, #12]
 8001660:	4607      	mov	r7, r0
 8001662:	7815      	ldrb	r5, [r2, #0]
 8001664:	e72d      	b.n	80014c2 <d_name+0x10a>
 8001666:	3302      	adds	r3, #2
 8001668:	60e3      	str	r3, [r4, #12]
 800166a:	4620      	mov	r0, r4
 800166c:	f7fe ff0e 	bl	800048c <d_compact_number>
 8001670:	1e07      	subs	r7, r0, #0
 8001672:	db9f      	blt.n	80015b4 <d_name+0x1fc>
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fe9f 	bl	80013b8 <d_name>
 800167a:	4605      	mov	r5, r0
 800167c:	2800      	cmp	r0, #0
 800167e:	f43f af6f 	beq.w	8001560 <d_name+0x1a8>
 8001682:	7803      	ldrb	r3, [r0, #0]
 8001684:	2b45      	cmp	r3, #69	; 0x45
 8001686:	f43f af69 	beq.w	800155c <d_name+0x1a4>
 800168a:	2b47      	cmp	r3, #71	; 0x47
 800168c:	f43f af66 	beq.w	800155c <d_name+0x1a4>
 8001690:	e760      	b.n	8001554 <d_name+0x19c>
 8001692:	2500      	movs	r5, #0
 8001694:	e779      	b.n	800158a <d_name+0x1d2>
 8001696:	3302      	adds	r3, #2
 8001698:	60e3      	str	r3, [r4, #12]
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff f860 	bl	8000760 <d_discriminator>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d087      	beq.n	80015b4 <d_name+0x1fc>
 80016a4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	da10      	bge.n	80016ce <d_name+0x316>
 80016ac:	6920      	ldr	r0, [r4, #16]
 80016ae:	4d17      	ldr	r5, [pc, #92]	; (800170c <d_name+0x354>)
 80016b0:	0111      	lsls	r1, r2, #4
 80016b2:	1843      	adds	r3, r0, r1
 80016b4:	3201      	adds	r2, #1
 80016b6:	6162      	str	r2, [r4, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	5442      	strb	r2, [r0, r1]
 80016be:	220e      	movs	r2, #14
 80016c0:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80016c4:	e762      	b.n	800158c <d_name+0x1d4>
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7fe fefa 	bl	80004c0 <d_template_param>
 80016cc:	e79d      	b.n	800160a <d_name+0x252>
 80016ce:	2300      	movs	r3, #0
 80016d0:	e75c      	b.n	800158c <d_name+0x1d4>
 80016d2:	f8c8 7000 	str.w	r7, [r8]
 80016d6:	2f00      	cmp	r7, #0
 80016d8:	f43f af6c 	beq.w	80015b4 <d_name+0x1fc>
 80016dc:	f1b9 0f00 	cmp.w	r9, #0
 80016e0:	d004      	beq.n	80016ec <d_name+0x334>
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	2b45      	cmp	r3, #69	; 0x45
 80016f0:	f47f af60 	bne.w	80015b4 <d_name+0x1fc>
 80016f4:	9d01      	ldr	r5, [sp, #4]
 80016f6:	3201      	adds	r2, #1
 80016f8:	4628      	mov	r0, r5
 80016fa:	60e2      	str	r2, [r4, #12]
 80016fc:	b003      	add	sp, #12
 80016fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001702:	bf00      	nop
 8001704:	080b39f8 	.word	0x080b39f8
 8001708:	100803ff 	.word	0x100803ff
 800170c:	080b39e8 	.word	0x080b39e8

08001710 <d_type>:
 8001710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001714:	68c2      	ldr	r2, [r0, #12]
 8001716:	7813      	ldrb	r3, [r2, #0]
 8001718:	2b72      	cmp	r3, #114	; 0x72
 800171a:	b083      	sub	sp, #12
 800171c:	4604      	mov	r4, r0
 800171e:	d05f      	beq.n	80017e0 <d_type+0xd0>
 8001720:	2b56      	cmp	r3, #86	; 0x56
 8001722:	d05d      	beq.n	80017e0 <d_type+0xd0>
 8001724:	2b4b      	cmp	r3, #75	; 0x4b
 8001726:	d05b      	beq.n	80017e0 <d_type+0xd0>
 8001728:	2b44      	cmp	r3, #68	; 0x44
 800172a:	d051      	beq.n	80017d0 <d_type+0xc0>
 800172c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001730:	294a      	cmp	r1, #74	; 0x4a
 8001732:	f200 809e 	bhi.w	8001872 <d_type+0x162>
 8001736:	e8df f011 	tbh	[pc, r1, lsl #1]
 800173a:	0111      	.short	0x0111
 800173c:	01110111 	.word	0x01110111
 8001740:	01110111 	.word	0x01110111
 8001744:	01110111 	.word	0x01110111
 8001748:	01110111 	.word	0x01110111
 800174c:	009c0111 	.word	0x009c0111
 8001750:	009c009c 	.word	0x009c009c
 8001754:	009c009c 	.word	0x009c009c
 8001758:	009c009c 	.word	0x009c009c
 800175c:	009c021e 	.word	0x009c021e
 8001760:	009c013b 	.word	0x009c013b
 8001764:	0135009c 	.word	0x0135009c
 8001768:	009c0149 	.word	0x009c0149
 800176c:	009c009c 	.word	0x009c009c
 8001770:	009c009c 	.word	0x009c009c
 8001774:	01110206 	.word	0x01110206
 8001778:	01650157 	.word	0x01650157
 800177c:	0173009c 	.word	0x0173009c
 8001780:	01a50181 	.word	0x01a50181
 8001784:	009c01cc 	.word	0x009c01cc
 8001788:	009c009c 	.word	0x009c009c
 800178c:	0111009c 	.word	0x0111009c
 8001790:	009c009c 	.word	0x009c009c
 8001794:	009c009c 	.word	0x009c009c
 8001798:	009c009c 	.word	0x009c009c
 800179c:	01e401e4 	.word	0x01e401e4
 80017a0:	01e401e4 	.word	0x01e401e4
 80017a4:	01e401e4 	.word	0x01e401e4
 80017a8:	01e401e4 	.word	0x01e401e4
 80017ac:	01e401e4 	.word	0x01e401e4
 80017b0:	01e4009c 	.word	0x01e4009c
 80017b4:	01e401e4 	.word	0x01e401e4
 80017b8:	009c01e4 	.word	0x009c01e4
 80017bc:	009c009c 	.word	0x009c009c
 80017c0:	01e401e4 	.word	0x01e401e4
 80017c4:	01e40127 	.word	0x01e40127
 80017c8:	01e401e4 	.word	0x01e401e4
 80017cc:	01e401e4 	.word	0x01e401e4
 80017d0:	7853      	ldrb	r3, [r2, #1]
 80017d2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80017d6:	294f      	cmp	r1, #79	; 0x4f
 80017d8:	d002      	beq.n	80017e0 <d_type+0xd0>
 80017da:	3b77      	subs	r3, #119	; 0x77
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d84d      	bhi.n	800187c <d_type+0x16c>
 80017e0:	2200      	movs	r2, #0
 80017e2:	a901      	add	r1, sp, #4
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 fc45 	bl	8002074 <d_cv_qualifiers>
 80017ea:	4605      	mov	r5, r0
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d040      	beq.n	8001872 <d_type+0x162>
 80017f0:	68e3      	ldr	r3, [r4, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b46      	cmp	r3, #70	; 0x46
 80017f6:	4620      	mov	r0, r4
 80017f8:	d119      	bne.n	800182e <d_type+0x11e>
 80017fa:	f000 fd0f 	bl	800221c <d_function_type>
 80017fe:	6028      	str	r0, [r5, #0]
 8001800:	2800      	cmp	r0, #0
 8001802:	d036      	beq.n	8001872 <d_type+0x162>
 8001804:	7803      	ldrb	r3, [r0, #0]
 8001806:	9a01      	ldr	r2, [sp, #4]
 8001808:	3b1f      	subs	r3, #31
 800180a:	2b01      	cmp	r3, #1
 800180c:	d913      	bls.n	8001836 <d_type+0x126>
 800180e:	2a00      	cmp	r2, #0
 8001810:	d02f      	beq.n	8001872 <d_type+0x162>
 8001812:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001816:	428b      	cmp	r3, r1
 8001818:	da2b      	bge.n	8001872 <d_type+0x162>
 800181a:	69e0      	ldr	r0, [r4, #28]
 800181c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	9d01      	ldr	r5, [sp, #4]
 8001824:	6221      	str	r1, [r4, #32]
 8001826:	4628      	mov	r0, r5
 8001828:	b003      	add	sp, #12
 800182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800182e:	f7ff ff6f 	bl	8001710 <d_type>
 8001832:	6028      	str	r0, [r5, #0]
 8001834:	e7e4      	b.n	8001800 <d_type+0xf0>
 8001836:	6883      	ldr	r3, [r0, #8]
 8001838:	6082      	str	r2, [r0, #8]
 800183a:	682a      	ldr	r2, [r5, #0]
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	602b      	str	r3, [r5, #0]
 8001840:	9a01      	ldr	r2, [sp, #4]
 8001842:	e7e4      	b.n	800180e <d_type+0xfe>
 8001844:	2301      	movs	r3, #1
 8001846:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001848:	6343      	str	r3, [r0, #52]	; 0x34
 800184a:	f7ff fb37 	bl	8000ebc <d_expression_1>
 800184e:	6365      	str	r5, [r4, #52]	; 0x34
 8001850:	4602      	mov	r2, r0
 8001852:	2300      	movs	r3, #0
 8001854:	2142      	movs	r1, #66	; 0x42
 8001856:	4620      	mov	r0, r4
 8001858:	f7fe fcda 	bl	8000210 <d_make_comp>
 800185c:	4605      	mov	r5, r0
 800185e:	9001      	str	r0, [sp, #4]
 8001860:	b138      	cbz	r0, 8001872 <d_type+0x162>
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	b122      	cbz	r2, 8001872 <d_type+0x162>
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60e2      	str	r2, [r4, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b45      	cmp	r3, #69	; 0x45
 8001870:	d07b      	beq.n	800196a <d_type+0x25a>
 8001872:	2500      	movs	r5, #0
 8001874:	4628      	mov	r0, r5
 8001876:	b003      	add	sp, #12
 8001878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800187c:	1c53      	adds	r3, r2, #1
 800187e:	60c3      	str	r3, [r0, #12]
 8001880:	7853      	ldrb	r3, [r2, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f5      	beq.n	8001872 <d_type+0x162>
 8001886:	1c93      	adds	r3, r2, #2
 8001888:	60c3      	str	r3, [r0, #12]
 800188a:	7853      	ldrb	r3, [r2, #1]
 800188c:	3b46      	subs	r3, #70	; 0x46
 800188e:	2b30      	cmp	r3, #48	; 0x30
 8001890:	d8ef      	bhi.n	8001872 <d_type+0x162>
 8001892:	a101      	add	r1, pc, #4	; (adr r1, 8001898 <d_type+0x188>)
 8001894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001898:	08001d55 	.word	0x08001d55
 800189c:	08001873 	.word	0x08001873
 80018a0:	08001873 	.word	0x08001873
 80018a4:	08001873 	.word	0x08001873
 80018a8:	08001873 	.word	0x08001873
 80018ac:	08001873 	.word	0x08001873
 80018b0:	08001873 	.word	0x08001873
 80018b4:	08001873 	.word	0x08001873
 80018b8:	08001873 	.word	0x08001873
 80018bc:	08001873 	.word	0x08001873
 80018c0:	08001873 	.word	0x08001873
 80018c4:	08001873 	.word	0x08001873
 80018c8:	08001873 	.word	0x08001873
 80018cc:	08001873 	.word	0x08001873
 80018d0:	08001845 	.word	0x08001845
 80018d4:	08001873 	.word	0x08001873
 80018d8:	08001873 	.word	0x08001873
 80018dc:	08001873 	.word	0x08001873
 80018e0:	08001873 	.word	0x08001873
 80018e4:	08001873 	.word	0x08001873
 80018e8:	08001873 	.word	0x08001873
 80018ec:	08001873 	.word	0x08001873
 80018f0:	08001873 	.word	0x08001873
 80018f4:	08001873 	.word	0x08001873
 80018f8:	08001873 	.word	0x08001873
 80018fc:	08001873 	.word	0x08001873
 8001900:	08001873 	.word	0x08001873
 8001904:	08001d31 	.word	0x08001d31
 8001908:	08001873 	.word	0x08001873
 800190c:	08001d0d 	.word	0x08001d0d
 8001910:	08001ce5 	.word	0x08001ce5
 8001914:	08001cbd 	.word	0x08001cbd
 8001918:	08001c95 	.word	0x08001c95
 800191c:	08001873 	.word	0x08001873
 8001920:	08001c6d 	.word	0x08001c6d
 8001924:	08001e09 	.word	0x08001e09
 8001928:	08001873 	.word	0x08001873
 800192c:	08001873 	.word	0x08001873
 8001930:	08001873 	.word	0x08001873
 8001934:	08001873 	.word	0x08001873
 8001938:	08001dbd 	.word	0x08001dbd
 800193c:	08001873 	.word	0x08001873
 8001940:	08001c57 	.word	0x08001c57
 8001944:	08001873 	.word	0x08001873
 8001948:	08001873 	.word	0x08001873
 800194c:	08001c2f 	.word	0x08001c2f
 8001950:	08001845 	.word	0x08001845
 8001954:	08001873 	.word	0x08001873
 8001958:	08001bf5 	.word	0x08001bf5
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fd2b 	bl	80013b8 <d_name>
 8001962:	4605      	mov	r5, r0
 8001964:	9001      	str	r0, [sp, #4]
 8001966:	2d00      	cmp	r5, #0
 8001968:	d083      	beq.n	8001872 <d_type+0x162>
 800196a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800196e:	4293      	cmp	r3, r2
 8001970:	f6bf af7f 	bge.w	8001872 <d_type+0x162>
 8001974:	69e1      	ldr	r1, [r4, #28]
 8001976:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800197a:	9d01      	ldr	r5, [sp, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	4628      	mov	r0, r5
 8001980:	6222      	str	r2, [r4, #32]
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001988:	3201      	adds	r2, #1
 800198a:	60e2      	str	r2, [r4, #12]
 800198c:	4620      	mov	r0, r4
 800198e:	f7fe fdb9 	bl	8000504 <d_source_name>
 8001992:	2300      	movs	r3, #0
 8001994:	4602      	mov	r2, r0
 8001996:	2128      	movs	r1, #40	; 0x28
 8001998:	4620      	mov	r0, r4
 800199a:	f7fe fc39 	bl	8000210 <d_make_comp>
 800199e:	4605      	mov	r5, r0
 80019a0:	9001      	str	r0, [sp, #4]
 80019a2:	e7e0      	b.n	8001966 <d_type+0x256>
 80019a4:	4620      	mov	r0, r4
 80019a6:	f000 fc39 	bl	800221c <d_function_type>
 80019aa:	4605      	mov	r5, r0
 80019ac:	9001      	str	r0, [sp, #4]
 80019ae:	e7da      	b.n	8001966 <d_type+0x256>
 80019b0:	3201      	adds	r2, #1
 80019b2:	60e2      	str	r2, [r4, #12]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff feab 	bl	8001710 <d_type>
 80019ba:	2300      	movs	r3, #0
 80019bc:	4602      	mov	r2, r0
 80019be:	2125      	movs	r1, #37	; 0x25
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7fe fc25 	bl	8000210 <d_make_comp>
 80019c6:	4605      	mov	r5, r0
 80019c8:	9001      	str	r0, [sp, #4]
 80019ca:	e7cc      	b.n	8001966 <d_type+0x256>
 80019cc:	3201      	adds	r2, #1
 80019ce:	60e2      	str	r2, [r4, #12]
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff fe9d 	bl	8001710 <d_type>
 80019d6:	2300      	movs	r3, #0
 80019d8:	4602      	mov	r2, r0
 80019da:	2126      	movs	r1, #38	; 0x26
 80019dc:	4620      	mov	r0, r4
 80019de:	f7fe fc17 	bl	8000210 <d_make_comp>
 80019e2:	4605      	mov	r5, r0
 80019e4:	9001      	str	r0, [sp, #4]
 80019e6:	e7be      	b.n	8001966 <d_type+0x256>
 80019e8:	3201      	adds	r2, #1
 80019ea:	60e2      	str	r2, [r4, #12]
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fe8f 	bl	8001710 <d_type>
 80019f2:	2300      	movs	r3, #0
 80019f4:	4602      	mov	r2, r0
 80019f6:	2124      	movs	r1, #36	; 0x24
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7fe fc09 	bl	8000210 <d_make_comp>
 80019fe:	4605      	mov	r5, r0
 8001a00:	9001      	str	r0, [sp, #4]
 8001a02:	e7b0      	b.n	8001966 <d_type+0x256>
 8001a04:	3201      	adds	r2, #1
 8001a06:	60e2      	str	r2, [r4, #12]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fe81 	bl	8001710 <d_type>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4602      	mov	r2, r0
 8001a12:	2122      	movs	r1, #34	; 0x22
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7fe fbfb 	bl	8000210 <d_make_comp>
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	9001      	str	r0, [sp, #4]
 8001a1e:	e7a2      	b.n	8001966 <d_type+0x256>
 8001a20:	3201      	adds	r2, #1
 8001a22:	60e2      	str	r2, [r4, #12]
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe73 	bl	8001710 <d_type>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	2123      	movs	r1, #35	; 0x23
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fbed 	bl	8000210 <d_make_comp>
 8001a36:	4605      	mov	r5, r0
 8001a38:	9001      	str	r0, [sp, #4]
 8001a3a:	e794      	b.n	8001966 <d_type+0x256>
 8001a3c:	7853      	ldrb	r3, [r2, #1]
 8001a3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a42:	2a09      	cmp	r2, #9
 8001a44:	d905      	bls.n	8001a52 <d_type+0x342>
 8001a46:	2b5f      	cmp	r3, #95	; 0x5f
 8001a48:	d003      	beq.n	8001a52 <d_type+0x342>
 8001a4a:	3b41      	subs	r3, #65	; 0x41
 8001a4c:	2b19      	cmp	r3, #25
 8001a4e:	f200 820f 	bhi.w	8001e70 <d_type+0x760>
 8001a52:	2100      	movs	r1, #0
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fdcb 	bl	80005f0 <d_substitution>
 8001a5a:	68e3      	ldr	r3, [r4, #12]
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	2a49      	cmp	r2, #73	; 0x49
 8001a62:	4605      	mov	r5, r0
 8001a64:	f47f aedf 	bne.w	8001826 <d_type+0x116>
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60e3      	str	r3, [r4, #12]
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff fc37 	bl	80012e0 <d_template_args_1>
 8001a72:	4603      	mov	r3, r0
 8001a74:	462a      	mov	r2, r5
 8001a76:	2104      	movs	r1, #4
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fbc9 	bl	8000210 <d_make_comp>
 8001a7e:	4605      	mov	r5, r0
 8001a80:	9001      	str	r0, [sp, #4]
 8001a82:	e770      	b.n	8001966 <d_type+0x256>
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7fe fd1b 	bl	80004c0 <d_template_param>
 8001a8a:	68e6      	ldr	r6, [r4, #12]
 8001a8c:	9001      	str	r0, [sp, #4]
 8001a8e:	7833      	ldrb	r3, [r6, #0]
 8001a90:	2b49      	cmp	r3, #73	; 0x49
 8001a92:	4605      	mov	r5, r0
 8001a94:	f47f af67 	bne.w	8001966 <d_type+0x256>
 8001a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 81f5 	bne.w	8001e8a <d_type+0x77a>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	f43f aee6 	beq.w	8001872 <d_type+0x162>
 8001aa6:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001aaa:	428a      	cmp	r2, r1
 8001aac:	f6bf aee1 	bge.w	8001872 <d_type+0x162>
 8001ab0:	69e1      	ldr	r1, [r4, #28]
 8001ab2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	6222      	str	r2, [r4, #32]
 8001aba:	7831      	ldrb	r1, [r6, #0]
 8001abc:	9d01      	ldr	r5, [sp, #4]
 8001abe:	3949      	subs	r1, #73	; 0x49
 8001ac0:	2901      	cmp	r1, #1
 8001ac2:	d8d7      	bhi.n	8001a74 <d_type+0x364>
 8001ac4:	3601      	adds	r6, #1
 8001ac6:	60e6      	str	r6, [r4, #12]
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fc09 	bl	80012e0 <d_template_args_1>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	e7d0      	b.n	8001a74 <d_type+0x364>
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	60e2      	str	r2, [r4, #12]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7fe fd14 	bl	8000504 <d_source_name>
 8001adc:	68e3      	ldr	r3, [r4, #12]
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	2a49      	cmp	r2, #73	; 0x49
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	f000 81a8 	beq.w	8001e3a <d_type+0x72a>
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fe10 	bl	8001710 <d_type>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	4602      	mov	r2, r0
 8001af4:	2121      	movs	r1, #33	; 0x21
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7fe fb8a 	bl	8000210 <d_make_comp>
 8001afc:	4605      	mov	r5, r0
 8001afe:	9001      	str	r0, [sp, #4]
 8001b00:	e731      	b.n	8001966 <d_type+0x256>
 8001b02:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001b06:	3b61      	subs	r3, #97	; 0x61
 8001b08:	4db6      	ldr	r5, [pc, #728]	; (8001de4 <d_type+0x6d4>)
 8001b0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b0e:	4281      	cmp	r1, r0
 8001b10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001b14:	f280 818b 	bge.w	8001e2e <d_type+0x71e>
 8001b18:	6858      	ldr	r0, [r3, #4]
 8001b1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001b1c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001b20:	010f      	lsls	r7, r1, #4
 8001b22:	eb0c 0507 	add.w	r5, ip, r7
 8001b26:	4406      	add	r6, r0
 8001b28:	4630      	mov	r0, r6
 8001b2a:	3201      	adds	r2, #1
 8001b2c:	3101      	adds	r1, #1
 8001b2e:	f04f 0e00 	mov.w	lr, #0
 8001b32:	2627      	movs	r6, #39	; 0x27
 8001b34:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b38:	6161      	str	r1, [r4, #20]
 8001b3a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b3e:	60ab      	str	r3, [r5, #8]
 8001b40:	60e2      	str	r2, [r4, #12]
 8001b42:	6320      	str	r0, [r4, #48]	; 0x30
 8001b44:	e66f      	b.n	8001826 <d_type+0x116>
 8001b46:	3201      	adds	r2, #1
 8001b48:	60e2      	str	r2, [r4, #12]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff fde0 	bl	8001710 <d_type>
 8001b50:	4605      	mov	r5, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	f43f ae8d 	beq.w	8001872 <d_type+0x162>
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff fdd9 	bl	8001710 <d_type>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f43f ae86 	beq.w	8001872 <d_type+0x162>
 8001b66:	462a      	mov	r2, r5
 8001b68:	212b      	movs	r1, #43	; 0x2b
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe fb50 	bl	8000210 <d_make_comp>
 8001b70:	4605      	mov	r5, r0
 8001b72:	9001      	str	r0, [sp, #4]
 8001b74:	e6f7      	b.n	8001966 <d_type+0x256>
 8001b76:	1c55      	adds	r5, r2, #1
 8001b78:	60e5      	str	r5, [r4, #12]
 8001b7a:	7853      	ldrb	r3, [r2, #1]
 8001b7c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b7e:	f000 815a 	beq.w	8001e36 <d_type+0x726>
 8001b82:	3b30      	subs	r3, #48	; 0x30
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	f200 8165 	bhi.w	8001e54 <d_type+0x744>
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	e000      	b.n	8001b90 <d_type+0x480>
 8001b8e:	4608      	mov	r0, r1
 8001b90:	1c41      	adds	r1, r0, #1
 8001b92:	60e1      	str	r1, [r4, #12]
 8001b94:	7843      	ldrb	r3, [r0, #1]
 8001b96:	3b30      	subs	r3, #48	; 0x30
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d9f8      	bls.n	8001b8e <d_type+0x47e>
 8001b9c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	eba1 0705 	sub.w	r7, r1, r5
 8001ba6:	f6bf ae64 	bge.w	8001872 <d_type+0x162>
 8001baa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001bae:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001bb2:	eb0e 060c 	add.w	r6, lr, ip
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6072      	str	r2, [r6, #4]
 8001bbc:	6163      	str	r3, [r4, #20]
 8001bbe:	2f00      	cmp	r7, #0
 8001bc0:	f43f ae57 	beq.w	8001872 <d_type+0x162>
 8001bc4:	6072      	str	r2, [r6, #4]
 8001bc6:	f80e 200c 	strb.w	r2, [lr, ip]
 8001bca:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001bce:	7843      	ldrb	r3, [r0, #1]
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	2b5f      	cmp	r3, #95	; 0x5f
 8001bd4:	f47f ae4d 	bne.w	8001872 <d_type+0x162>
 8001bd8:	3501      	adds	r5, #1
 8001bda:	60e5      	str	r5, [r4, #12]
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff fd97 	bl	8001710 <d_type>
 8001be2:	4632      	mov	r2, r6
 8001be4:	4603      	mov	r3, r0
 8001be6:	212a      	movs	r1, #42	; 0x2a
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7fe fb11 	bl	8000210 <d_make_comp>
 8001bee:	4605      	mov	r5, r0
 8001bf0:	9001      	str	r0, [sp, #4]
 8001bf2:	e6b8      	b.n	8001966 <d_type+0x256>
 8001bf4:	7893      	ldrb	r3, [r2, #2]
 8001bf6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bf8:	f000 8178 	beq.w	8001eec <d_type+0x7dc>
 8001bfc:	f7fe fc2e 	bl	800045c <d_number_component>
 8001c00:	4605      	mov	r5, r0
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	f43f ae35 	beq.w	8001872 <d_type+0x162>
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	2a5f      	cmp	r2, #95	; 0x5f
 8001c0e:	f47f ae30 	bne.w	8001872 <d_type+0x162>
 8001c12:	3301      	adds	r3, #1
 8001c14:	60e3      	str	r3, [r4, #12]
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff fd7a 	bl	8001710 <d_type>
 8001c1c:	462a      	mov	r2, r5
 8001c1e:	4603      	mov	r3, r0
 8001c20:	212d      	movs	r1, #45	; 0x2d
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe faf4 	bl	8000210 <d_make_comp>
 8001c28:	4605      	mov	r5, r0
 8001c2a:	9001      	str	r0, [sp, #4]
 8001c2c:	e69b      	b.n	8001966 <d_type+0x256>
 8001c2e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f280 80fb 	bge.w	8001e2e <d_type+0x71e>
 8001c38:	6900      	ldr	r0, [r0, #16]
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	0119      	lsls	r1, r3, #4
 8001c3e:	1845      	adds	r5, r0, r1
 8001c40:	3301      	adds	r3, #1
 8001c42:	2600      	movs	r6, #0
 8001c44:	606e      	str	r6, [r5, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	6163      	str	r3, [r4, #20]
 8001c4a:	2627      	movs	r6, #39	; 0x27
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <d_type+0x6d8>)
 8001c4e:	5446      	strb	r6, [r0, r1]
 8001c50:	60ab      	str	r3, [r5, #8]
 8001c52:	6322      	str	r2, [r4, #48]	; 0x30
 8001c54:	e5e7      	b.n	8001826 <d_type+0x116>
 8001c56:	f7ff fd5b 	bl	8001710 <d_type>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	214a      	movs	r1, #74	; 0x4a
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7fe fad5 	bl	8000210 <d_make_comp>
 8001c66:	4605      	mov	r5, r0
 8001c68:	9001      	str	r0, [sp, #4]
 8001c6a:	e67c      	b.n	8001966 <d_type+0x256>
 8001c6c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f280 80dc 	bge.w	8001e2e <d_type+0x71e>
 8001c76:	6900      	ldr	r0, [r0, #16]
 8001c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c7a:	0119      	lsls	r1, r3, #4
 8001c7c:	1845      	adds	r5, r0, r1
 8001c7e:	3301      	adds	r3, #1
 8001c80:	2600      	movs	r6, #0
 8001c82:	606e      	str	r6, [r5, #4]
 8001c84:	3204      	adds	r2, #4
 8001c86:	6163      	str	r3, [r4, #20]
 8001c88:	2627      	movs	r6, #39	; 0x27
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <d_type+0x6dc>)
 8001c8c:	5446      	strb	r6, [r0, r1]
 8001c8e:	60ab      	str	r3, [r5, #8]
 8001c90:	6322      	str	r2, [r4, #48]	; 0x30
 8001c92:	e5c8      	b.n	8001826 <d_type+0x116>
 8001c94:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f280 80c8 	bge.w	8001e2e <d_type+0x71e>
 8001c9e:	6900      	ldr	r0, [r0, #16]
 8001ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ca2:	0119      	lsls	r1, r3, #4
 8001ca4:	1845      	adds	r5, r0, r1
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	2600      	movs	r6, #0
 8001caa:	606e      	str	r6, [r5, #4]
 8001cac:	3209      	adds	r2, #9
 8001cae:	6163      	str	r3, [r4, #20]
 8001cb0:	2627      	movs	r6, #39	; 0x27
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <d_type+0x6e0>)
 8001cb4:	5446      	strb	r6, [r0, r1]
 8001cb6:	60ab      	str	r3, [r5, #8]
 8001cb8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cba:	e5b4      	b.n	8001826 <d_type+0x116>
 8001cbc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f280 80b4 	bge.w	8001e2e <d_type+0x71e>
 8001cc6:	6900      	ldr	r0, [r0, #16]
 8001cc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cca:	0119      	lsls	r1, r3, #4
 8001ccc:	1845      	adds	r5, r0, r1
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	606e      	str	r6, [r5, #4]
 8001cd4:	320a      	adds	r2, #10
 8001cd6:	6163      	str	r3, [r4, #20]
 8001cd8:	2627      	movs	r6, #39	; 0x27
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <d_type+0x6e4>)
 8001cdc:	5446      	strb	r6, [r0, r1]
 8001cde:	60ab      	str	r3, [r5, #8]
 8001ce0:	6322      	str	r2, [r4, #48]	; 0x30
 8001ce2:	e5a0      	b.n	8001826 <d_type+0x116>
 8001ce4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f280 80a0 	bge.w	8001e2e <d_type+0x71e>
 8001cee:	6900      	ldr	r0, [r0, #16]
 8001cf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cf2:	0119      	lsls	r1, r3, #4
 8001cf4:	1845      	adds	r5, r0, r1
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	606e      	str	r6, [r5, #4]
 8001cfc:	3209      	adds	r2, #9
 8001cfe:	6163      	str	r3, [r4, #20]
 8001d00:	2627      	movs	r6, #39	; 0x27
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <d_type+0x6e8>)
 8001d04:	5446      	strb	r6, [r0, r1]
 8001d06:	60ab      	str	r3, [r5, #8]
 8001d08:	6322      	str	r2, [r4, #48]	; 0x30
 8001d0a:	e58c      	b.n	8001826 <d_type+0x116>
 8001d0c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f6bf adae 	bge.w	8001872 <d_type+0x162>
 8001d16:	6901      	ldr	r1, [r0, #16]
 8001d18:	4e38      	ldr	r6, [pc, #224]	; (8001dfc <d_type+0x6ec>)
 8001d1a:	011a      	lsls	r2, r3, #4
 8001d1c:	188d      	adds	r5, r1, r2
 8001d1e:	3301      	adds	r3, #1
 8001d20:	6143      	str	r3, [r0, #20]
 8001d22:	2300      	movs	r3, #0
 8001d24:	200e      	movs	r0, #14
 8001d26:	606b      	str	r3, [r5, #4]
 8001d28:	548b      	strb	r3, [r1, r2]
 8001d2a:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d2e:	e57a      	b.n	8001826 <d_type+0x116>
 8001d30:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f6bf ad9c 	bge.w	8001872 <d_type+0x162>
 8001d3a:	6901      	ldr	r1, [r0, #16]
 8001d3c:	4e30      	ldr	r6, [pc, #192]	; (8001e00 <d_type+0x6f0>)
 8001d3e:	011a      	lsls	r2, r3, #4
 8001d40:	188d      	adds	r5, r1, r2
 8001d42:	3301      	adds	r3, #1
 8001d44:	6143      	str	r3, [r0, #20]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2004      	movs	r0, #4
 8001d4a:	606b      	str	r3, [r5, #4]
 8001d4c:	548b      	strb	r3, [r1, r2]
 8001d4e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d52:	e568      	b.n	8001826 <d_type+0x116>
 8001d54:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	f280 80af 	bge.w	8001ebc <d_type+0x7ac>
 8001d5e:	6905      	ldr	r5, [r0, #16]
 8001d60:	0118      	lsls	r0, r3, #4
 8001d62:	1829      	adds	r1, r5, r0
 8001d64:	3301      	adds	r3, #1
 8001d66:	2700      	movs	r7, #0
 8001d68:	262c      	movs	r6, #44	; 0x2c
 8001d6a:	604f      	str	r7, [r1, #4]
 8001d6c:	9101      	str	r1, [sp, #4]
 8001d6e:	6163      	str	r3, [r4, #20]
 8001d70:	542e      	strb	r6, [r5, r0]
 8001d72:	7893      	ldrb	r3, [r2, #2]
 8001d74:	3b30      	subs	r3, #48	; 0x30
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	463b      	movhi	r3, r7
 8001d80:	818b      	strh	r3, [r1, #12]
 8001d82:	f240 80ae 	bls.w	8001ee2 <d_type+0x7d2>
 8001d86:	4620      	mov	r0, r4
 8001d88:	9d01      	ldr	r5, [sp, #4]
 8001d8a:	f7ff fcc1 	bl	8001710 <d_type>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	60a8      	str	r0, [r5, #8]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f ad6c 	beq.w	8001872 <d_type+0x162>
 8001d9a:	f104 000c 	add.w	r0, r4, #12
 8001d9e:	f7fe fb31 	bl	8000404 <d_number.isra.1>
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	b113      	cbz	r3, 8001dae <d_type+0x69e>
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	60e3      	str	r3, [r4, #12]
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	9d01      	ldr	r5, [sp, #4]
 8001db0:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001db4:	4253      	negs	r3, r2
 8001db6:	4153      	adcs	r3, r2
 8001db8:	81eb      	strh	r3, [r5, #14]
 8001dba:	e534      	b.n	8001826 <d_type+0x116>
 8001dbc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	da34      	bge.n	8001e2e <d_type+0x71e>
 8001dc4:	6900      	ldr	r0, [r0, #16]
 8001dc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dc8:	0119      	lsls	r1, r3, #4
 8001dca:	1845      	adds	r5, r0, r1
 8001dcc:	3301      	adds	r3, #1
 8001dce:	2600      	movs	r6, #0
 8001dd0:	606e      	str	r6, [r5, #4]
 8001dd2:	3211      	adds	r2, #17
 8001dd4:	6163      	str	r3, [r4, #20]
 8001dd6:	2627      	movs	r6, #39	; 0x27
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <d_type+0x6f4>)
 8001dda:	5446      	strb	r6, [r0, r1]
 8001ddc:	60ab      	str	r3, [r5, #8]
 8001dde:	6322      	str	r2, [r4, #48]	; 0x30
 8001de0:	e521      	b.n	8001826 <d_type+0x116>
 8001de2:	bf00      	nop
 8001de4:	0803184c 	.word	0x0803184c
 8001de8:	08031aa4 	.word	0x08031aa4
 8001dec:	08031a90 	.word	0x08031a90
 8001df0:	08031a54 	.word	0x08031a54
 8001df4:	08031a7c 	.word	0x08031a7c
 8001df8:	08031a68 	.word	0x08031a68
 8001dfc:	080b3a04 	.word	0x080b3a04
 8001e00:	080b39fc 	.word	0x080b39fc
 8001e04:	08031acc 	.word	0x08031acc
 8001e08:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	da0e      	bge.n	8001e2e <d_type+0x71e>
 8001e10:	6900      	ldr	r0, [r0, #16]
 8001e12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e14:	0119      	lsls	r1, r3, #4
 8001e16:	1845      	adds	r5, r0, r1
 8001e18:	3301      	adds	r3, #1
 8001e1a:	2600      	movs	r6, #0
 8001e1c:	606e      	str	r6, [r5, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	6163      	str	r3, [r4, #20]
 8001e22:	2627      	movs	r6, #39	; 0x27
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <d_type+0x7f0>)
 8001e26:	5446      	strb	r6, [r0, r1]
 8001e28:	60ab      	str	r3, [r5, #8]
 8001e2a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e2c:	e4fb      	b.n	8001826 <d_type+0x116>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	deff      	udf	#255	; 0xff
 8001e36:	2600      	movs	r6, #0
 8001e38:	e6ce      	b.n	8001bd8 <d_type+0x4c8>
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60e3      	str	r3, [r4, #12]
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff fa4e 	bl	80012e0 <d_template_args_1>
 8001e44:	462a      	mov	r2, r5
 8001e46:	4603      	mov	r3, r0
 8001e48:	2104      	movs	r1, #4
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe f9e0 	bl	8000210 <d_make_comp>
 8001e50:	9001      	str	r0, [sp, #4]
 8001e52:	e64a      	b.n	8001aea <d_type+0x3da>
 8001e54:	2301      	movs	r3, #1
 8001e56:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e58:	6363      	str	r3, [r4, #52]	; 0x34
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff f82e 	bl	8000ebc <d_expression_1>
 8001e60:	6365      	str	r5, [r4, #52]	; 0x34
 8001e62:	4606      	mov	r6, r0
 8001e64:	2800      	cmp	r0, #0
 8001e66:	f43f ad04 	beq.w	8001872 <d_type+0x162>
 8001e6a:	68e5      	ldr	r5, [r4, #12]
 8001e6c:	782b      	ldrb	r3, [r5, #0]
 8001e6e:	e6b0      	b.n	8001bd2 <d_type+0x4c2>
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff faa1 	bl	80013b8 <d_name>
 8001e76:	4605      	mov	r5, r0
 8001e78:	9001      	str	r0, [sp, #4]
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	f43f acf9 	beq.w	8001872 <d_type+0x162>
 8001e80:	7803      	ldrb	r3, [r0, #0]
 8001e82:	2b18      	cmp	r3, #24
 8001e84:	f47f ad71 	bne.w	800196a <d_type+0x25a>
 8001e88:	e4cd      	b.n	8001826 <d_type+0x116>
 8001e8a:	1c73      	adds	r3, r6, #1
 8001e8c:	60e3      	str	r3, [r4, #12]
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e94:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e98:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e9c:	f7ff fa20 	bl	80012e0 <d_template_args_1>
 8001ea0:	68e2      	ldr	r2, [r4, #12]
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	2a49      	cmp	r2, #73	; 0x49
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	d00b      	beq.n	8001ec2 <d_type+0x7b2>
 8001eaa:	6325      	str	r5, [r4, #48]	; 0x30
 8001eac:	60e6      	str	r6, [r4, #12]
 8001eae:	f8c4 9014 	str.w	r9, [r4, #20]
 8001eb2:	f8c4 8020 	str.w	r8, [r4, #32]
 8001eb6:	62a7      	str	r7, [r4, #40]	; 0x28
 8001eb8:	9d01      	ldr	r5, [sp, #4]
 8001eba:	e554      	b.n	8001966 <d_type+0x256>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	701b      	strb	r3, [r3, #0]
 8001ec0:	deff      	udf	#255	; 0xff
 8001ec2:	9901      	ldr	r1, [sp, #4]
 8001ec4:	2900      	cmp	r1, #0
 8001ec6:	f43f acd4 	beq.w	8001872 <d_type+0x162>
 8001eca:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	f6bf accf 	bge.w	8001872 <d_type+0x162>
 8001ed4:	69e0      	ldr	r0, [r4, #28]
 8001ed6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001eda:	3201      	adds	r2, #1
 8001edc:	6222      	str	r2, [r4, #32]
 8001ede:	9a01      	ldr	r2, [sp, #4]
 8001ee0:	e5c9      	b.n	8001a76 <d_type+0x366>
 8001ee2:	f104 000c 	add.w	r0, r4, #12
 8001ee6:	f7fe fa8d 	bl	8000404 <d_number.isra.1>
 8001eea:	e74c      	b.n	8001d86 <d_type+0x676>
 8001eec:	3203      	adds	r2, #3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ef2:	60c2      	str	r2, [r0, #12]
 8001ef4:	6343      	str	r3, [r0, #52]	; 0x34
 8001ef6:	f7fe ffe1 	bl	8000ebc <d_expression_1>
 8001efa:	6366      	str	r6, [r4, #52]	; 0x34
 8001efc:	4605      	mov	r5, r0
 8001efe:	e680      	b.n	8001c02 <d_type+0x4f2>
 8001f00:	08031ab8 	.word	0x08031ab8

08001f04 <d_operator_name>:
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f06:	68c3      	ldr	r3, [r0, #12]
 8001f08:	781e      	ldrb	r6, [r3, #0]
 8001f0a:	4686      	mov	lr, r0
 8001f0c:	b336      	cbz	r6, 8001f5c <d_operator_name+0x58>
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60c2      	str	r2, [r0, #12]
 8001f12:	785a      	ldrb	r2, [r3, #1]
 8001f14:	781e      	ldrb	r6, [r3, #0]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d04a      	beq.n	8001fb0 <d_operator_name+0xac>
 8001f1a:	1c9a      	adds	r2, r3, #2
 8001f1c:	60c2      	str	r2, [r0, #12]
 8001f1e:	2e76      	cmp	r6, #118	; 0x76
 8001f20:	4604      	mov	r4, r0
 8001f22:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f26:	d145      	bne.n	8001fb4 <d_operator_name+0xb0>
 8001f28:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001f2c:	b2eb      	uxtb	r3, r5
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d815      	bhi.n	8001f5e <d_operator_name+0x5a>
 8001f32:	f7fe fae7 	bl	8000504 <d_source_name>
 8001f36:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f3a:	428b      	cmp	r3, r1
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	da21      	bge.n	8001f84 <d_operator_name+0x80>
 8001f40:	6926      	ldr	r6, [r4, #16]
 8001f42:	0119      	lsls	r1, r3, #4
 8001f44:	1870      	adds	r0, r6, r1
 8001f46:	3301      	adds	r3, #1
 8001f48:	2700      	movs	r7, #0
 8001f4a:	6047      	str	r7, [r0, #4]
 8001f4c:	6163      	str	r3, [r4, #20]
 8001f4e:	b1ca      	cbz	r2, 8001f84 <d_operator_name+0x80>
 8001f50:	2332      	movs	r3, #50	; 0x32
 8001f52:	6047      	str	r7, [r0, #4]
 8001f54:	5473      	strb	r3, [r6, r1]
 8001f56:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5c:	46b4      	mov	ip, r6
 8001f5e:	4c23      	ldr	r4, [pc, #140]	; (8001fec <d_operator_name+0xe8>)
 8001f60:	2043      	movs	r0, #67	; 0x43
 8001f62:	2200      	movs	r2, #0
 8001f64:	1a83      	subs	r3, r0, r2
 8001f66:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f6a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f6e:	0119      	lsls	r1, r3, #4
 8001f70:	1867      	adds	r7, r4, r1
 8001f72:	5861      	ldr	r1, [r4, r1]
 8001f74:	780d      	ldrb	r5, [r1, #0]
 8001f76:	42b5      	cmp	r5, r6
 8001f78:	d006      	beq.n	8001f88 <d_operator_name+0x84>
 8001f7a:	bf94      	ite	ls
 8001f7c:	1c5a      	addls	r2, r3, #1
 8001f7e:	4618      	movhi	r0, r3
 8001f80:	4282      	cmp	r2, r0
 8001f82:	d1ef      	bne.n	8001f64 <d_operator_name+0x60>
 8001f84:	2000      	movs	r0, #0
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	7849      	ldrb	r1, [r1, #1]
 8001f8a:	4561      	cmp	r1, ip
 8001f8c:	d1f5      	bne.n	8001f7a <d_operator_name+0x76>
 8001f8e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	daf6      	bge.n	8001f84 <d_operator_name+0x80>
 8001f96:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f9a:	011a      	lsls	r2, r3, #4
 8001f9c:	1888      	adds	r0, r1, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	2431      	movs	r4, #49	; 0x31
 8001fa4:	6045      	str	r5, [r0, #4]
 8001fa6:	f8ce 3014 	str.w	r3, [lr, #20]
 8001faa:	548c      	strb	r4, [r1, r2]
 8001fac:	6087      	str	r7, [r0, #8]
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb0:	4694      	mov	ip, r2
 8001fb2:	e7d4      	b.n	8001f5e <d_operator_name+0x5a>
 8001fb4:	2e63      	cmp	r6, #99	; 0x63
 8001fb6:	d1d2      	bne.n	8001f5e <d_operator_name+0x5a>
 8001fb8:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001fbc:	d1cf      	bne.n	8001f5e <d_operator_name+0x5a>
 8001fbe:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	6383      	str	r3, [r0, #56]	; 0x38
 8001fca:	f7ff fba1 	bl	8001710 <d_type>
 8001fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	b92b      	cbnz	r3, 8001fe0 <d_operator_name+0xdc>
 8001fd4:	2133      	movs	r1, #51	; 0x33
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7fe f91a 	bl	8000210 <d_make_comp>
 8001fdc:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2134      	movs	r1, #52	; 0x34
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7fe f913 	bl	8000210 <d_make_comp>
 8001fea:	e7f7      	b.n	8001fdc <d_operator_name+0xd8>
 8001fec:	08031ae0 	.word	0x08031ae0

08001ff0 <d_parmlist>:
 8001ff0:	b530      	push	{r4, r5, lr}
 8001ff2:	68c2      	ldr	r2, [r0, #12]
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d036      	beq.n	800206e <d_parmlist+0x7e>
 8002000:	2b45      	cmp	r3, #69	; 0x45
 8002002:	d034      	beq.n	800206e <d_parmlist+0x7e>
 8002004:	2b2e      	cmp	r3, #46	; 0x2e
 8002006:	d032      	beq.n	800206e <d_parmlist+0x7e>
 8002008:	4604      	mov	r4, r0
 800200a:	ad01      	add	r5, sp, #4
 800200c:	e015      	b.n	800203a <d_parmlist+0x4a>
 800200e:	2b4f      	cmp	r3, #79	; 0x4f
 8002010:	d016      	beq.n	8002040 <d_parmlist+0x50>
 8002012:	f7ff fb7d 	bl	8001710 <d_type>
 8002016:	2300      	movs	r3, #0
 8002018:	4602      	mov	r2, r0
 800201a:	212e      	movs	r1, #46	; 0x2e
 800201c:	b338      	cbz	r0, 800206e <d_parmlist+0x7e>
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe f8f6 	bl	8000210 <d_make_comp>
 8002024:	6028      	str	r0, [r5, #0]
 8002026:	b310      	cbz	r0, 800206e <d_parmlist+0x7e>
 8002028:	68e2      	ldr	r2, [r4, #12]
 800202a:	7813      	ldrb	r3, [r2, #0]
 800202c:	f100 050c 	add.w	r5, r0, #12
 8002030:	b14b      	cbz	r3, 8002046 <d_parmlist+0x56>
 8002032:	2b45      	cmp	r3, #69	; 0x45
 8002034:	d007      	beq.n	8002046 <d_parmlist+0x56>
 8002036:	2b2e      	cmp	r3, #46	; 0x2e
 8002038:	d005      	beq.n	8002046 <d_parmlist+0x56>
 800203a:	2b52      	cmp	r3, #82	; 0x52
 800203c:	4620      	mov	r0, r4
 800203e:	d1e6      	bne.n	800200e <d_parmlist+0x1e>
 8002040:	7853      	ldrb	r3, [r2, #1]
 8002042:	2b45      	cmp	r3, #69	; 0x45
 8002044:	d1e5      	bne.n	8002012 <d_parmlist+0x22>
 8002046:	9801      	ldr	r0, [sp, #4]
 8002048:	b188      	cbz	r0, 800206e <d_parmlist+0x7e>
 800204a:	68c3      	ldr	r3, [r0, #12]
 800204c:	b10b      	cbz	r3, 8002052 <d_parmlist+0x62>
 800204e:	b003      	add	sp, #12
 8002050:	bd30      	pop	{r4, r5, pc}
 8002052:	6882      	ldr	r2, [r0, #8]
 8002054:	7811      	ldrb	r1, [r2, #0]
 8002056:	2927      	cmp	r1, #39	; 0x27
 8002058:	d1f9      	bne.n	800204e <d_parmlist+0x5e>
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	7c11      	ldrb	r1, [r2, #16]
 800205e:	2909      	cmp	r1, #9
 8002060:	d1f5      	bne.n	800204e <d_parmlist+0x5e>
 8002062:	6851      	ldr	r1, [r2, #4]
 8002064:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002066:	1a52      	subs	r2, r2, r1
 8002068:	6322      	str	r2, [r4, #48]	; 0x30
 800206a:	6083      	str	r3, [r0, #8]
 800206c:	e7ef      	b.n	800204e <d_parmlist+0x5e>
 800206e:	2000      	movs	r0, #0
 8002070:	b003      	add	sp, #12
 8002072:	bd30      	pop	{r4, r5, pc}

08002074 <d_cv_qualifiers>:
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	4689      	mov	r9, r1
 800207a:	b083      	sub	sp, #12
 800207c:	68c1      	ldr	r1, [r0, #12]
 800207e:	1e13      	subs	r3, r2, #0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	4604      	mov	r4, r0
 8002084:	780b      	ldrb	r3, [r1, #0]
 8002086:	bf15      	itete	ne
 8002088:	f04f 081e 	movne.w	r8, #30
 800208c:	f04f 081b 	moveq.w	r8, #27
 8002090:	271d      	movne	r7, #29
 8002092:	271a      	moveq	r7, #26
 8002094:	bf14      	ite	ne
 8002096:	261c      	movne	r6, #28
 8002098:	2619      	moveq	r6, #25
 800209a:	464d      	mov	r5, r9
 800209c:	f04f 0a01 	mov.w	sl, #1
 80020a0:	e01c      	b.n	80020dc <d_cv_qualifiers+0x68>
 80020a2:	2b56      	cmp	r3, #86	; 0x56
 80020a4:	d03f      	beq.n	8002126 <d_cv_qualifiers+0xb2>
 80020a6:	2b4b      	cmp	r3, #75	; 0x4b
 80020a8:	d043      	beq.n	8002132 <d_cv_qualifiers+0xbe>
 80020aa:	784b      	ldrb	r3, [r1, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d035      	beq.n	800211c <d_cv_qualifiers+0xa8>
 80020b0:	1c8b      	adds	r3, r1, #2
 80020b2:	60e3      	str	r3, [r4, #12]
 80020b4:	784b      	ldrb	r3, [r1, #1]
 80020b6:	2b78      	cmp	r3, #120	; 0x78
 80020b8:	d041      	beq.n	800213e <d_cv_qualifiers+0xca>
 80020ba:	2b6f      	cmp	r3, #111	; 0x6f
 80020bc:	d145      	bne.n	800214a <d_cv_qualifiers+0xd6>
 80020be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020c0:	3309      	adds	r3, #9
 80020c2:	6323      	str	r3, [r4, #48]	; 0x30
 80020c4:	214e      	movs	r1, #78	; 0x4e
 80020c6:	2300      	movs	r3, #0
 80020c8:	2200      	movs	r2, #0
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe f8a0 	bl	8000210 <d_make_comp>
 80020d0:	6028      	str	r0, [r5, #0]
 80020d2:	b318      	cbz	r0, 800211c <d_cv_qualifiers+0xa8>
 80020d4:	68e1      	ldr	r1, [r4, #12]
 80020d6:	780b      	ldrb	r3, [r1, #0]
 80020d8:	f100 0508 	add.w	r5, r0, #8
 80020dc:	2b72      	cmp	r3, #114	; 0x72
 80020de:	d00d      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e0:	2b56      	cmp	r3, #86	; 0x56
 80020e2:	d00b      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e4:	2b4b      	cmp	r3, #75	; 0x4b
 80020e6:	d009      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e8:	2b44      	cmp	r3, #68	; 0x44
 80020ea:	d146      	bne.n	800217a <d_cv_qualifiers+0x106>
 80020ec:	784a      	ldrb	r2, [r1, #1]
 80020ee:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020f2:	284f      	cmp	r0, #79	; 0x4f
 80020f4:	d002      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020f6:	3a77      	subs	r2, #119	; 0x77
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d83e      	bhi.n	800217a <d_cv_qualifiers+0x106>
 80020fc:	1c4a      	adds	r2, r1, #1
 80020fe:	2b72      	cmp	r3, #114	; 0x72
 8002100:	60e2      	str	r2, [r4, #12]
 8002102:	d1ce      	bne.n	80020a2 <d_cv_qualifiers+0x2e>
 8002104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002106:	3309      	adds	r3, #9
 8002108:	6323      	str	r3, [r4, #48]	; 0x30
 800210a:	4631      	mov	r1, r6
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	4620      	mov	r0, r4
 8002112:	f7fe f87d 	bl	8000210 <d_make_comp>
 8002116:	6028      	str	r0, [r5, #0]
 8002118:	2800      	cmp	r0, #0
 800211a:	d1db      	bne.n	80020d4 <d_cv_qualifiers+0x60>
 800211c:	2500      	movs	r5, #0
 800211e:	4628      	mov	r0, r5
 8002120:	b003      	add	sp, #12
 8002122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002126:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002128:	3309      	adds	r3, #9
 800212a:	6323      	str	r3, [r4, #48]	; 0x30
 800212c:	4639      	mov	r1, r7
 800212e:	2300      	movs	r3, #0
 8002130:	e7ca      	b.n	80020c8 <d_cv_qualifiers+0x54>
 8002132:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002134:	3306      	adds	r3, #6
 8002136:	6323      	str	r3, [r4, #48]	; 0x30
 8002138:	4641      	mov	r1, r8
 800213a:	2300      	movs	r3, #0
 800213c:	e7c4      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800213e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002140:	3311      	adds	r3, #17
 8002142:	6323      	str	r3, [r4, #48]	; 0x30
 8002144:	214c      	movs	r1, #76	; 0x4c
 8002146:	2300      	movs	r3, #0
 8002148:	e7be      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800214a:	2b4f      	cmp	r3, #79	; 0x4f
 800214c:	d132      	bne.n	80021b4 <d_cv_qualifiers+0x140>
 800214e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002152:	3309      	adds	r3, #9
 8002154:	6323      	str	r3, [r4, #48]	; 0x30
 8002156:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800215a:	4620      	mov	r0, r4
 800215c:	f7fe feae 	bl	8000ebc <d_expression_1>
 8002160:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002164:	4603      	mov	r3, r0
 8002166:	2800      	cmp	r0, #0
 8002168:	d0d8      	beq.n	800211c <d_cv_qualifiers+0xa8>
 800216a:	68e2      	ldr	r2, [r4, #12]
 800216c:	7811      	ldrb	r1, [r2, #0]
 800216e:	2945      	cmp	r1, #69	; 0x45
 8002170:	d1d4      	bne.n	800211c <d_cv_qualifiers+0xa8>
 8002172:	3201      	adds	r2, #1
 8002174:	60e2      	str	r2, [r4, #12]
 8002176:	214e      	movs	r1, #78	; 0x4e
 8002178:	e7a6      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800217a:	9a01      	ldr	r2, [sp, #4]
 800217c:	2a00      	cmp	r2, #0
 800217e:	d1ce      	bne.n	800211e <d_cv_qualifiers+0xaa>
 8002180:	2b46      	cmp	r3, #70	; 0x46
 8002182:	d1cc      	bne.n	800211e <d_cv_qualifiers+0xaa>
 8002184:	454d      	cmp	r5, r9
 8002186:	d0ca      	beq.n	800211e <d_cv_qualifiers+0xaa>
 8002188:	241d      	movs	r4, #29
 800218a:	201e      	movs	r0, #30
 800218c:	211c      	movs	r1, #28
 800218e:	e008      	b.n	80021a2 <d_cv_qualifiers+0x12e>
 8002190:	2a1b      	cmp	r2, #27
 8002192:	d00d      	beq.n	80021b0 <d_cv_qualifiers+0x13c>
 8002194:	2a19      	cmp	r2, #25
 8002196:	d100      	bne.n	800219a <d_cv_qualifiers+0x126>
 8002198:	7019      	strb	r1, [r3, #0]
 800219a:	f103 0908 	add.w	r9, r3, #8
 800219e:	454d      	cmp	r5, r9
 80021a0:	d0bd      	beq.n	800211e <d_cv_qualifiers+0xaa>
 80021a2:	f8d9 3000 	ldr.w	r3, [r9]
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	2a1a      	cmp	r2, #26
 80021aa:	d1f1      	bne.n	8002190 <d_cv_qualifiers+0x11c>
 80021ac:	701c      	strb	r4, [r3, #0]
 80021ae:	e7f4      	b.n	800219a <d_cv_qualifiers+0x126>
 80021b0:	7018      	strb	r0, [r3, #0]
 80021b2:	e7f2      	b.n	800219a <d_cv_qualifiers+0x126>
 80021b4:	2b77      	cmp	r3, #119	; 0x77
 80021b6:	d1b1      	bne.n	800211c <d_cv_qualifiers+0xa8>
 80021b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ba:	3306      	adds	r3, #6
 80021bc:	6323      	str	r3, [r4, #48]	; 0x30
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff ff16 	bl	8001ff0 <d_parmlist>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d0a8      	beq.n	800211c <d_cv_qualifiers+0xa8>
 80021ca:	68e2      	ldr	r2, [r4, #12]
 80021cc:	7811      	ldrb	r1, [r2, #0]
 80021ce:	2945      	cmp	r1, #69	; 0x45
 80021d0:	d1a4      	bne.n	800211c <d_cv_qualifiers+0xa8>
 80021d2:	3201      	adds	r2, #1
 80021d4:	60e2      	str	r2, [r4, #12]
 80021d6:	214f      	movs	r1, #79	; 0x4f
 80021d8:	e776      	b.n	80020c8 <d_cv_qualifiers+0x54>
 80021da:	bf00      	nop

080021dc <d_bare_function_type>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	68c3      	ldr	r3, [r0, #12]
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	2a4a      	cmp	r2, #74	; 0x4a
 80021e4:	4604      	mov	r4, r0
 80021e6:	d013      	beq.n	8002210 <d_bare_function_type+0x34>
 80021e8:	b181      	cbz	r1, 800220c <d_bare_function_type+0x30>
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff fa90 	bl	8001710 <d_type>
 80021f0:	4605      	mov	r5, r0
 80021f2:	b180      	cbz	r0, 8002216 <d_bare_function_type+0x3a>
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fefb 	bl	8001ff0 <d_parmlist>
 80021fa:	b160      	cbz	r0, 8002216 <d_bare_function_type+0x3a>
 80021fc:	4603      	mov	r3, r0
 80021fe:	462a      	mov	r2, r5
 8002200:	4620      	mov	r0, r4
 8002202:	2129      	movs	r1, #41	; 0x29
 8002204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002208:	f7fe b802 	b.w	8000210 <d_make_comp>
 800220c:	460d      	mov	r5, r1
 800220e:	e7f1      	b.n	80021f4 <d_bare_function_type+0x18>
 8002210:	3301      	adds	r3, #1
 8002212:	60c3      	str	r3, [r0, #12]
 8002214:	e7e9      	b.n	80021ea <d_bare_function_type+0xe>
 8002216:	2000      	movs	r0, #0
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	bf00      	nop

0800221c <d_function_type>:
 800221c:	68c3      	ldr	r3, [r0, #12]
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	2a46      	cmp	r2, #70	; 0x46
 8002222:	d118      	bne.n	8002256 <d_function_type+0x3a>
 8002224:	b510      	push	{r4, lr}
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60c2      	str	r2, [r0, #12]
 800222a:	785a      	ldrb	r2, [r3, #1]
 800222c:	2a59      	cmp	r2, #89	; 0x59
 800222e:	bf04      	itt	eq
 8002230:	3302      	addeq	r3, #2
 8002232:	60c3      	streq	r3, [r0, #12]
 8002234:	2101      	movs	r1, #1
 8002236:	4604      	mov	r4, r0
 8002238:	f7ff ffd0 	bl	80021dc <d_bare_function_type>
 800223c:	4601      	mov	r1, r0
 800223e:	4620      	mov	r0, r4
 8002240:	f7fe f82e 	bl	80002a0 <d_ref_qualifier>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	2a45      	cmp	r2, #69	; 0x45
 800224a:	d102      	bne.n	8002252 <d_function_type+0x36>
 800224c:	3301      	adds	r3, #1
 800224e:	60e3      	str	r3, [r4, #12]
 8002250:	bd10      	pop	{r4, pc}
 8002252:	2000      	movs	r0, #0
 8002254:	bd10      	pop	{r4, pc}
 8002256:	2000      	movs	r0, #0
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <d_unqualified_name>:
 800225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002260:	68c1      	ldr	r1, [r0, #12]
 8002262:	780b      	ldrb	r3, [r1, #0]
 8002264:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002268:	2a09      	cmp	r2, #9
 800226a:	4604      	mov	r4, r0
 800226c:	d93c      	bls.n	80022e8 <d_unqualified_name+0x8c>
 800226e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002272:	2a19      	cmp	r2, #25
 8002274:	d922      	bls.n	80022bc <d_unqualified_name+0x60>
 8002276:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800227a:	2a01      	cmp	r2, #1
 800227c:	d969      	bls.n	8002352 <d_unqualified_name+0xf6>
 800227e:	2b4c      	cmp	r3, #76	; 0x4c
 8002280:	d056      	beq.n	8002330 <d_unqualified_name+0xd4>
 8002282:	2b55      	cmp	r3, #85	; 0x55
 8002284:	d15f      	bne.n	8002346 <d_unqualified_name+0xea>
 8002286:	784b      	ldrb	r3, [r1, #1]
 8002288:	2b6c      	cmp	r3, #108	; 0x6c
 800228a:	f000 80e5 	beq.w	8002458 <d_unqualified_name+0x1fc>
 800228e:	2b74      	cmp	r3, #116	; 0x74
 8002290:	d159      	bne.n	8002346 <d_unqualified_name+0xea>
 8002292:	1c4b      	adds	r3, r1, #1
 8002294:	60c3      	str	r3, [r0, #12]
 8002296:	784b      	ldrb	r3, [r1, #1]
 8002298:	2b74      	cmp	r3, #116	; 0x74
 800229a:	d158      	bne.n	800234e <d_unqualified_name+0xf2>
 800229c:	3102      	adds	r1, #2
 800229e:	60c1      	str	r1, [r0, #12]
 80022a0:	f7fe f8f4 	bl	800048c <d_compact_number>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f2c0 8155 	blt.w	8002554 <d_unqualified_name+0x2f8>
 80022aa:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	68e7      	ldr	r7, [r4, #12]
 80022b2:	f2c0 80f3 	blt.w	800249c <d_unqualified_name+0x240>
 80022b6:	783b      	ldrb	r3, [r7, #0]
 80022b8:	2500      	movs	r5, #0
 80022ba:	e010      	b.n	80022de <d_unqualified_name+0x82>
 80022bc:	2b6f      	cmp	r3, #111	; 0x6f
 80022be:	d104      	bne.n	80022ca <d_unqualified_name+0x6e>
 80022c0:	784b      	ldrb	r3, [r1, #1]
 80022c2:	2b6e      	cmp	r3, #110	; 0x6e
 80022c4:	bf04      	itt	eq
 80022c6:	3102      	addeq	r1, #2
 80022c8:	60c1      	streq	r1, [r0, #12]
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fe1a 	bl	8001f04 <d_operator_name>
 80022d0:	4605      	mov	r5, r0
 80022d2:	b110      	cbz	r0, 80022da <d_unqualified_name+0x7e>
 80022d4:	7803      	ldrb	r3, [r0, #0]
 80022d6:	2b31      	cmp	r3, #49	; 0x31
 80022d8:	d013      	beq.n	8002302 <d_unqualified_name+0xa6>
 80022da:	68e3      	ldr	r3, [r4, #12]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b42      	cmp	r3, #66	; 0x42
 80022e0:	d009      	beq.n	80022f6 <d_unqualified_name+0x9a>
 80022e2:	4628      	mov	r0, r5
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e8:	f7fe f90c 	bl	8000504 <d_source_name>
 80022ec:	68e3      	ldr	r3, [r4, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b42      	cmp	r3, #66	; 0x42
 80022f2:	4605      	mov	r5, r0
 80022f4:	d1f5      	bne.n	80022e2 <d_unqualified_name+0x86>
 80022f6:	4629      	mov	r1, r5
 80022f8:	4620      	mov	r0, r4
 80022fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022fe:	f7fe b95b 	b.w	80005b8 <d_abi_tags>
 8002302:	6882      	ldr	r2, [r0, #8]
 8002304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002306:	6896      	ldr	r6, [r2, #8]
 8002308:	6810      	ldr	r0, [r2, #0]
 800230a:	49a1      	ldr	r1, [pc, #644]	; (8002590 <d_unqualified_name+0x334>)
 800230c:	3307      	adds	r3, #7
 800230e:	4433      	add	r3, r6
 8002310:	6323      	str	r3, [r4, #48]	; 0x30
 8002312:	f004 fd3d 	bl	8006d90 <strcmp>
 8002316:	2800      	cmp	r0, #0
 8002318:	d1df      	bne.n	80022da <d_unqualified_name+0x7e>
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe f8f2 	bl	8000504 <d_source_name>
 8002320:	462a      	mov	r2, r5
 8002322:	4603      	mov	r3, r0
 8002324:	2136      	movs	r1, #54	; 0x36
 8002326:	4620      	mov	r0, r4
 8002328:	f7fd ff72 	bl	8000210 <d_make_comp>
 800232c:	4605      	mov	r5, r0
 800232e:	e7d4      	b.n	80022da <d_unqualified_name+0x7e>
 8002330:	3101      	adds	r1, #1
 8002332:	60c1      	str	r1, [r0, #12]
 8002334:	f7fe f8e6 	bl	8000504 <d_source_name>
 8002338:	4605      	mov	r5, r0
 800233a:	b120      	cbz	r0, 8002346 <d_unqualified_name+0xea>
 800233c:	4620      	mov	r0, r4
 800233e:	f7fe fa0f 	bl	8000760 <d_discriminator>
 8002342:	2800      	cmp	r0, #0
 8002344:	d1c9      	bne.n	80022da <d_unqualified_name+0x7e>
 8002346:	2500      	movs	r5, #0
 8002348:	4628      	mov	r0, r5
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234e:	2500      	movs	r5, #0
 8002350:	e7c5      	b.n	80022de <d_unqualified_name+0x82>
 8002352:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002354:	b132      	cbz	r2, 8002364 <d_unqualified_name+0x108>
 8002356:	7810      	ldrb	r0, [r2, #0]
 8002358:	b9e0      	cbnz	r0, 8002394 <d_unqualified_name+0x138>
 800235a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800235c:	68d0      	ldr	r0, [r2, #12]
 800235e:	4403      	add	r3, r0
 8002360:	6323      	str	r3, [r4, #48]	; 0x30
 8002362:	780b      	ldrb	r3, [r1, #0]
 8002364:	2b43      	cmp	r3, #67	; 0x43
 8002366:	d018      	beq.n	800239a <d_unqualified_name+0x13e>
 8002368:	2b44      	cmp	r3, #68	; 0x44
 800236a:	d1f0      	bne.n	800234e <d_unqualified_name+0xf2>
 800236c:	784b      	ldrb	r3, [r1, #1]
 800236e:	3b30      	subs	r3, #48	; 0x30
 8002370:	2b05      	cmp	r3, #5
 8002372:	d8e8      	bhi.n	8002346 <d_unqualified_name+0xea>
 8002374:	a001      	add	r0, pc, #4	; (adr r0, 800237c <d_unqualified_name+0x120>)
 8002376:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ed 	.word	0x080023ed
 8002380:	080023b7 	.word	0x080023b7
 8002384:	080023ff 	.word	0x080023ff
 8002388:	08002347 	.word	0x08002347
 800238c:	080023f9 	.word	0x080023f9
 8002390:	080023f3 	.word	0x080023f3
 8002394:	2818      	cmp	r0, #24
 8002396:	d1e5      	bne.n	8002364 <d_unqualified_name+0x108>
 8002398:	e7df      	b.n	800235a <d_unqualified_name+0xfe>
 800239a:	784b      	ldrb	r3, [r1, #1]
 800239c:	2b49      	cmp	r3, #73	; 0x49
 800239e:	f000 80b0 	beq.w	8002502 <d_unqualified_name+0x2a6>
 80023a2:	3b31      	subs	r3, #49	; 0x31
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d8ce      	bhi.n	8002346 <d_unqualified_name+0xea>
 80023a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ac:	005100ed 	.word	0x005100ed
 80023b0:	0047004c 	.word	0x0047004c
 80023b4:	002c      	.short	0x002c
 80023b6:	f04f 0c02 	mov.w	ip, #2
 80023ba:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023be:	1c8d      	adds	r5, r1, #2
 80023c0:	4283      	cmp	r3, r0
 80023c2:	60e5      	str	r5, [r4, #12]
 80023c4:	f280 80d0 	bge.w	8002568 <d_unqualified_name+0x30c>
 80023c8:	6926      	ldr	r6, [r4, #16]
 80023ca:	0118      	lsls	r0, r3, #4
 80023cc:	1835      	adds	r5, r6, r0
 80023ce:	3301      	adds	r3, #1
 80023d0:	2700      	movs	r7, #0
 80023d2:	606f      	str	r7, [r5, #4]
 80023d4:	6163      	str	r3, [r4, #20]
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	f000 80cf 	beq.w	800257a <d_unqualified_name+0x31e>
 80023dc:	2308      	movs	r3, #8
 80023de:	606f      	str	r7, [r5, #4]
 80023e0:	5433      	strb	r3, [r6, r0]
 80023e2:	f885 c008 	strb.w	ip, [r5, #8]
 80023e6:	60ea      	str	r2, [r5, #12]
 80023e8:	788b      	ldrb	r3, [r1, #2]
 80023ea:	e778      	b.n	80022de <d_unqualified_name+0x82>
 80023ec:	f04f 0c01 	mov.w	ip, #1
 80023f0:	e7e3      	b.n	80023ba <d_unqualified_name+0x15e>
 80023f2:	f04f 0c05 	mov.w	ip, #5
 80023f6:	e7e0      	b.n	80023ba <d_unqualified_name+0x15e>
 80023f8:	f04f 0c04 	mov.w	ip, #4
 80023fc:	e7dd      	b.n	80023ba <d_unqualified_name+0x15e>
 80023fe:	f04f 0c03 	mov.w	ip, #3
 8002402:	e7da      	b.n	80023ba <d_unqualified_name+0x15e>
 8002404:	3102      	adds	r1, #2
 8002406:	60e1      	str	r1, [r4, #12]
 8002408:	f04f 0805 	mov.w	r8, #5
 800240c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002410:	4283      	cmp	r3, r0
 8002412:	f280 80ac 	bge.w	800256e <d_unqualified_name+0x312>
 8002416:	6926      	ldr	r6, [r4, #16]
 8002418:	0118      	lsls	r0, r3, #4
 800241a:	1835      	adds	r5, r6, r0
 800241c:	3301      	adds	r3, #1
 800241e:	2700      	movs	r7, #0
 8002420:	606f      	str	r7, [r5, #4]
 8002422:	6163      	str	r3, [r4, #20]
 8002424:	2a00      	cmp	r2, #0
 8002426:	f000 80ab 	beq.w	8002580 <d_unqualified_name+0x324>
 800242a:	2307      	movs	r3, #7
 800242c:	606f      	str	r7, [r5, #4]
 800242e:	5433      	strb	r3, [r6, r0]
 8002430:	f885 8008 	strb.w	r8, [r5, #8]
 8002434:	60ea      	str	r2, [r5, #12]
 8002436:	780b      	ldrb	r3, [r1, #0]
 8002438:	e751      	b.n	80022de <d_unqualified_name+0x82>
 800243a:	3102      	adds	r1, #2
 800243c:	60e1      	str	r1, [r4, #12]
 800243e:	f04f 0804 	mov.w	r8, #4
 8002442:	e7e3      	b.n	800240c <d_unqualified_name+0x1b0>
 8002444:	3102      	adds	r1, #2
 8002446:	60e1      	str	r1, [r4, #12]
 8002448:	f04f 0803 	mov.w	r8, #3
 800244c:	e7de      	b.n	800240c <d_unqualified_name+0x1b0>
 800244e:	3102      	adds	r1, #2
 8002450:	60e1      	str	r1, [r4, #12]
 8002452:	f04f 0802 	mov.w	r8, #2
 8002456:	e7d9      	b.n	800240c <d_unqualified_name+0x1b0>
 8002458:	1c4b      	adds	r3, r1, #1
 800245a:	60c3      	str	r3, [r0, #12]
 800245c:	784b      	ldrb	r3, [r1, #1]
 800245e:	2b6c      	cmp	r3, #108	; 0x6c
 8002460:	f47f af75 	bne.w	800234e <d_unqualified_name+0xf2>
 8002464:	3102      	adds	r1, #2
 8002466:	60c1      	str	r1, [r0, #12]
 8002468:	f7ff fdc2 	bl	8001ff0 <d_parmlist>
 800246c:	4606      	mov	r6, r0
 800246e:	2800      	cmp	r0, #0
 8002470:	d070      	beq.n	8002554 <d_unqualified_name+0x2f8>
 8002472:	68e2      	ldr	r2, [r4, #12]
 8002474:	7813      	ldrb	r3, [r2, #0]
 8002476:	2b45      	cmp	r3, #69	; 0x45
 8002478:	f47f af69 	bne.w	800234e <d_unqualified_name+0xf2>
 800247c:	3201      	adds	r2, #1
 800247e:	60e2      	str	r2, [r4, #12]
 8002480:	4620      	mov	r0, r4
 8002482:	f7fe f803 	bl	800048c <d_compact_number>
 8002486:	f1b0 0e00 	subs.w	lr, r0, #0
 800248a:	db63      	blt.n	8002554 <d_unqualified_name+0x2f8>
 800248c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002490:	4293      	cmp	r3, r2
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	db1b      	blt.n	80024ce <d_unqualified_name+0x272>
 8002496:	7803      	ldrb	r3, [r0, #0]
 8002498:	2500      	movs	r5, #0
 800249a:	e720      	b.n	80022de <d_unqualified_name+0x82>
 800249c:	6926      	ldr	r6, [r4, #16]
 800249e:	6a22      	ldr	r2, [r4, #32]
 80024a0:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 80024a4:	0119      	lsls	r1, r3, #4
 80024a6:	1875      	adds	r5, r6, r1
 80024a8:	3301      	adds	r3, #1
 80024aa:	f04f 0c00 	mov.w	ip, #0
 80024ae:	f8c5 c004 	str.w	ip, [r5, #4]
 80024b2:	4572      	cmp	r2, lr
 80024b4:	6163      	str	r3, [r4, #20]
 80024b6:	f04f 0347 	mov.w	r3, #71	; 0x47
 80024ba:	5473      	strb	r3, [r6, r1]
 80024bc:	60a8      	str	r0, [r5, #8]
 80024be:	da4d      	bge.n	800255c <d_unqualified_name+0x300>
 80024c0:	69e3      	ldr	r3, [r4, #28]
 80024c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024c6:	3201      	adds	r2, #1
 80024c8:	6222      	str	r2, [r4, #32]
 80024ca:	783b      	ldrb	r3, [r7, #0]
 80024cc:	e707      	b.n	80022de <d_unqualified_name+0x82>
 80024ce:	6927      	ldr	r7, [r4, #16]
 80024d0:	6a22      	ldr	r2, [r4, #32]
 80024d2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80024d6:	0119      	lsls	r1, r3, #4
 80024d8:	187d      	adds	r5, r7, r1
 80024da:	3301      	adds	r3, #1
 80024dc:	f04f 0c00 	mov.w	ip, #0
 80024e0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024e4:	4542      	cmp	r2, r8
 80024e6:	6163      	str	r3, [r4, #20]
 80024e8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024ec:	547b      	strb	r3, [r7, r1]
 80024ee:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024f2:	da36      	bge.n	8002562 <d_unqualified_name+0x306>
 80024f4:	69e3      	ldr	r3, [r4, #28]
 80024f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024fa:	3201      	adds	r2, #1
 80024fc:	6222      	str	r2, [r4, #32]
 80024fe:	7803      	ldrb	r3, [r0, #0]
 8002500:	e6ed      	b.n	80022de <d_unqualified_name+0x82>
 8002502:	1c4b      	adds	r3, r1, #1
 8002504:	60e3      	str	r3, [r4, #12]
 8002506:	788b      	ldrb	r3, [r1, #2]
 8002508:	3b31      	subs	r3, #49	; 0x31
 800250a:	2b04      	cmp	r3, #4
 800250c:	d832      	bhi.n	8002574 <d_unqualified_name+0x318>
 800250e:	e8df f003 	tbb	[pc, r3]
 8002512:	1c03      	.short	0x1c03
 8002514:	1217      	.short	0x1217
 8002516:	0d          	.byte	0x0d
 8002517:	00          	.byte	0x00
 8002518:	3103      	adds	r1, #3
 800251a:	60e1      	str	r1, [r4, #12]
 800251c:	f04f 0801 	mov.w	r8, #1
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff f8f5 	bl	8001710 <d_type>
 8002526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002528:	68e1      	ldr	r1, [r4, #12]
 800252a:	e76f      	b.n	800240c <d_unqualified_name+0x1b0>
 800252c:	3103      	adds	r1, #3
 800252e:	60e1      	str	r1, [r4, #12]
 8002530:	f04f 0805 	mov.w	r8, #5
 8002534:	e7f4      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002536:	3103      	adds	r1, #3
 8002538:	60e1      	str	r1, [r4, #12]
 800253a:	f04f 0804 	mov.w	r8, #4
 800253e:	e7ef      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002540:	3103      	adds	r1, #3
 8002542:	60e1      	str	r1, [r4, #12]
 8002544:	f04f 0803 	mov.w	r8, #3
 8002548:	e7ea      	b.n	8002520 <d_unqualified_name+0x2c4>
 800254a:	3103      	adds	r1, #3
 800254c:	60e1      	str	r1, [r4, #12]
 800254e:	f04f 0802 	mov.w	r8, #2
 8002552:	e7e5      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002554:	68e3      	ldr	r3, [r4, #12]
 8002556:	2500      	movs	r5, #0
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	e6c0      	b.n	80022de <d_unqualified_name+0x82>
 800255c:	783b      	ldrb	r3, [r7, #0]
 800255e:	4665      	mov	r5, ip
 8002560:	e6bd      	b.n	80022de <d_unqualified_name+0x82>
 8002562:	7803      	ldrb	r3, [r0, #0]
 8002564:	4665      	mov	r5, ip
 8002566:	e6ba      	b.n	80022de <d_unqualified_name+0x82>
 8002568:	788b      	ldrb	r3, [r1, #2]
 800256a:	2500      	movs	r5, #0
 800256c:	e6b7      	b.n	80022de <d_unqualified_name+0x82>
 800256e:	780b      	ldrb	r3, [r1, #0]
 8002570:	2500      	movs	r5, #0
 8002572:	e6b4      	b.n	80022de <d_unqualified_name+0x82>
 8002574:	784b      	ldrb	r3, [r1, #1]
 8002576:	2500      	movs	r5, #0
 8002578:	e6b1      	b.n	80022de <d_unqualified_name+0x82>
 800257a:	788b      	ldrb	r3, [r1, #2]
 800257c:	4615      	mov	r5, r2
 800257e:	e6ae      	b.n	80022de <d_unqualified_name+0x82>
 8002580:	780b      	ldrb	r3, [r1, #0]
 8002582:	4615      	mov	r5, r2
 8002584:	e6ab      	b.n	80022de <d_unqualified_name+0x82>
 8002586:	3102      	adds	r1, #2
 8002588:	60e1      	str	r1, [r4, #12]
 800258a:	f04f 0801 	mov.w	r8, #1
 800258e:	e73d      	b.n	800240c <d_unqualified_name+0x1b0>
 8002590:	080b3a14 	.word	0x080b3a14

08002594 <d_encoding>:
 8002594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002598:	68c3      	ldr	r3, [r0, #12]
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	2a47      	cmp	r2, #71	; 0x47
 800259e:	4604      	mov	r4, r0
 80025a0:	d019      	beq.n	80025d6 <d_encoding+0x42>
 80025a2:	2a54      	cmp	r2, #84	; 0x54
 80025a4:	d017      	beq.n	80025d6 <d_encoding+0x42>
 80025a6:	460e      	mov	r6, r1
 80025a8:	f7fe ff06 	bl	80013b8 <d_name>
 80025ac:	4605      	mov	r5, r0
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d07d      	beq.n	80026ae <d_encoding+0x11a>
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d057      	beq.n	8002666 <d_encoding+0xd2>
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	07db      	lsls	r3, r3, #31
 80025ba:	d454      	bmi.n	8002666 <d_encoding+0xd2>
 80025bc:	e000      	b.n	80025c0 <d_encoding+0x2c>
 80025be:	68ad      	ldr	r5, [r5, #8]
 80025c0:	782b      	ldrb	r3, [r5, #0]
 80025c2:	f1a3 021c 	sub.w	r2, r3, #28
 80025c6:	2a04      	cmp	r2, #4
 80025c8:	d9f9      	bls.n	80025be <d_encoding+0x2a>
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	f000 8186 	beq.w	80028dc <d_encoding+0x348>
 80025d0:	4628      	mov	r0, r5
 80025d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025d8:	f101 0214 	add.w	r2, r1, #20
 80025dc:	6322      	str	r2, [r4, #48]	; 0x30
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	2a54      	cmp	r2, #84	; 0x54
 80025e2:	d068      	beq.n	80026b6 <d_encoding+0x122>
 80025e4:	2a47      	cmp	r2, #71	; 0x47
 80025e6:	d162      	bne.n	80026ae <d_encoding+0x11a>
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60e2      	str	r2, [r4, #12]
 80025ec:	785a      	ldrb	r2, [r3, #1]
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d05d      	beq.n	80026ae <d_encoding+0x11a>
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	60e2      	str	r2, [r4, #12]
 80025f6:	785a      	ldrb	r2, [r3, #1]
 80025f8:	3a41      	subs	r2, #65	; 0x41
 80025fa:	2a31      	cmp	r2, #49	; 0x31
 80025fc:	d857      	bhi.n	80026ae <d_encoding+0x11a>
 80025fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002602:	013e      	.short	0x013e
 8002604:	00560056 	.word	0x00560056
 8002608:	00560056 	.word	0x00560056
 800260c:	00560056 	.word	0x00560056
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	0056014a 	.word	0x0056014a
 8002628:	00560159 	.word	0x00560159
 800262c:	005600e0 	.word	0x005600e0
 8002630:	00560056 	.word	0x00560056
 8002634:	00560056 	.word	0x00560056
 8002638:	00560056 	.word	0x00560056
 800263c:	00560056 	.word	0x00560056
 8002640:	00560056 	.word	0x00560056
 8002644:	00560056 	.word	0x00560056
 8002648:	00560056 	.word	0x00560056
 800264c:	00560056 	.word	0x00560056
 8002650:	00560056 	.word	0x00560056
 8002654:	00560056 	.word	0x00560056
 8002658:	00560056 	.word	0x00560056
 800265c:	00560056 	.word	0x00560056
 8002660:	00560056 	.word	0x00560056
 8002664:	00eb      	.short	0x00eb
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0b0      	beq.n	80025d0 <d_encoding+0x3c>
 800266e:	2b45      	cmp	r3, #69	; 0x45
 8002670:	d0ae      	beq.n	80025d0 <d_encoding+0x3c>
 8002672:	4629      	mov	r1, r5
 8002674:	780b      	ldrb	r3, [r1, #0]
 8002676:	2b20      	cmp	r3, #32
 8002678:	f200 8218 	bhi.w	8002aac <d_encoding+0x518>
 800267c:	2b1c      	cmp	r3, #28
 800267e:	f080 821e 	bcs.w	8002abe <d_encoding+0x52a>
 8002682:	2b04      	cmp	r3, #4
 8002684:	f040 8091 	bne.w	80027aa <d_encoding+0x216>
 8002688:	688a      	ldr	r2, [r1, #8]
 800268a:	b16a      	cbz	r2, 80026a8 <d_encoding+0x114>
 800268c:	7813      	ldrb	r3, [r2, #0]
 800268e:	2b08      	cmp	r3, #8
 8002690:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8002694:	f200 8086 	bhi.w	80027a4 <d_encoding+0x210>
 8002698:	2b07      	cmp	r3, #7
 800269a:	f080 8086 	bcs.w	80027aa <d_encoding+0x216>
 800269e:	2901      	cmp	r1, #1
 80026a0:	d802      	bhi.n	80026a8 <d_encoding+0x114>
 80026a2:	68d2      	ldr	r2, [r2, #12]
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d1f1      	bne.n	800268c <d_encoding+0xf8>
 80026a8:	2101      	movs	r1, #1
 80026aa:	e07f      	b.n	80027ac <d_encoding+0x218>
 80026ac:	60e7      	str	r7, [r4, #12]
 80026ae:	2500      	movs	r5, #0
 80026b0:	4628      	mov	r0, r5
 80026b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60e2      	str	r2, [r4, #12]
 80026ba:	785a      	ldrb	r2, [r3, #1]
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d0f6      	beq.n	80026ae <d_encoding+0x11a>
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	60e2      	str	r2, [r4, #12]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	3b43      	subs	r3, #67	; 0x43
 80026c8:	2b33      	cmp	r3, #51	; 0x33
 80026ca:	d8f0      	bhi.n	80026ae <d_encoding+0x11a>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <d_encoding+0x140>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002a29 	.word	0x08002a29
 80026d8:	080026af 	.word	0x080026af
 80026dc:	080026af 	.word	0x080026af
 80026e0:	08002a13 	.word	0x08002a13
 80026e4:	080026af 	.word	0x080026af
 80026e8:	080029fd 	.word	0x080029fd
 80026ec:	080029e7 	.word	0x080029e7
 80026f0:	080029d1 	.word	0x080029d1
 80026f4:	080026af 	.word	0x080026af
 80026f8:	080026af 	.word	0x080026af
 80026fc:	080026af 	.word	0x080026af
 8002700:	080026af 	.word	0x080026af
 8002704:	080026af 	.word	0x080026af
 8002708:	080026af 	.word	0x080026af
 800270c:	080026af 	.word	0x080026af
 8002710:	080026af 	.word	0x080026af
 8002714:	080029bb 	.word	0x080029bb
 8002718:	080029a1 	.word	0x080029a1
 800271c:	080026af 	.word	0x080026af
 8002720:	08002987 	.word	0x08002987
 8002724:	08002971 	.word	0x08002971
 8002728:	080026af 	.word	0x080026af
 800272c:	080026af 	.word	0x080026af
 8002730:	080026af 	.word	0x080026af
 8002734:	080026af 	.word	0x080026af
 8002738:	080026af 	.word	0x080026af
 800273c:	080026af 	.word	0x080026af
 8002740:	080026af 	.word	0x080026af
 8002744:	080026af 	.word	0x080026af
 8002748:	080026af 	.word	0x080026af
 800274c:	080026af 	.word	0x080026af
 8002750:	080026af 	.word	0x080026af
 8002754:	0800293d 	.word	0x0800293d
 8002758:	080026af 	.word	0x080026af
 800275c:	080026af 	.word	0x080026af
 8002760:	080026af 	.word	0x080026af
 8002764:	080026af 	.word	0x080026af
 8002768:	08002917 	.word	0x08002917
 800276c:	080026af 	.word	0x080026af
 8002770:	080026af 	.word	0x080026af
 8002774:	080026af 	.word	0x080026af
 8002778:	080026af 	.word	0x080026af
 800277c:	080026af 	.word	0x080026af
 8002780:	080026af 	.word	0x080026af
 8002784:	080026af 	.word	0x080026af
 8002788:	080026af 	.word	0x080026af
 800278c:	080026af 	.word	0x080026af
 8002790:	080026af 	.word	0x080026af
 8002794:	080026af 	.word	0x080026af
 8002798:	080026af 	.word	0x080026af
 800279c:	080026af 	.word	0x080026af
 80027a0:	080028f1 	.word	0x080028f1
 80027a4:	2b34      	cmp	r3, #52	; 0x34
 80027a6:	f47f af7f 	bne.w	80026a8 <d_encoding+0x114>
 80027aa:	2100      	movs	r1, #0
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fd15 	bl	80021dc <d_bare_function_type>
 80027b2:	462a      	mov	r2, r5
 80027b4:	4603      	mov	r3, r0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4620      	mov	r0, r4
 80027ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027be:	f7fd bd27 	b.w	8000210 <d_make_comp>
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fe fdf8 	bl	80013b8 <d_name>
 80027c8:	2300      	movs	r3, #0
 80027ca:	4602      	mov	r2, r0
 80027cc:	2113      	movs	r1, #19
 80027ce:	4620      	mov	r0, r4
 80027d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d4:	f7fd bd1c 	b.w	8000210 <d_make_comp>
 80027d8:	f104 000c 	add.w	r0, r4, #12
 80027dc:	f7fd fe12 	bl	8000404 <d_number.isra.1>
 80027e0:	2801      	cmp	r0, #1
 80027e2:	f77f af64 	ble.w	80026ae <d_encoding+0x11a>
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	2a00      	cmp	r2, #0
 80027ec:	f43f af5f 	beq.w	80026ae <d_encoding+0x11a>
 80027f0:	1c5f      	adds	r7, r3, #1
 80027f2:	60e7      	str	r7, [r4, #12]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b5f      	cmp	r3, #95	; 0x5f
 80027f8:	f47f af59 	bne.w	80026ae <d_encoding+0x11a>
 80027fc:	2200      	movs	r2, #0
 80027fe:	1e45      	subs	r5, r0, #1
 8002800:	4690      	mov	r8, r2
 8002802:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002806:	783b      	ldrb	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f43f af50 	beq.w	80026ae <d_encoding+0x11a>
 800280e:	2b24      	cmp	r3, #36	; 0x24
 8002810:	f040 812a 	bne.w	8002a68 <d_encoding+0x4d4>
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b53      	cmp	r3, #83	; 0x53
 8002818:	f000 8156 	beq.w	8002ac8 <d_encoding+0x534>
 800281c:	2b5f      	cmp	r3, #95	; 0x5f
 800281e:	f000 8155 	beq.w	8002acc <d_encoding+0x538>
 8002822:	2b24      	cmp	r3, #36	; 0x24
 8002824:	f47f af43 	bne.w	80026ae <d_encoding+0x11a>
 8002828:	4619      	mov	r1, r3
 800282a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800282e:	68e7      	ldr	r7, [r4, #12]
 8002830:	4298      	cmp	r0, r3
 8002832:	f107 0702 	add.w	r7, r7, #2
 8002836:	f6bf af39 	bge.w	80026ac <d_encoding+0x118>
 800283a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800283e:	0106      	lsls	r6, r0, #4
 8002840:	eb0c 0306 	add.w	r3, ip, r6
 8002844:	3001      	adds	r0, #1
 8002846:	f8c3 8004 	str.w	r8, [r3, #4]
 800284a:	3d02      	subs	r5, #2
 800284c:	6160      	str	r0, [r4, #20]
 800284e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002852:	6099      	str	r1, [r3, #8]
 8002854:	60e7      	str	r7, [r4, #12]
 8002856:	2a00      	cmp	r2, #0
 8002858:	f000 8126 	beq.w	8002aa8 <d_encoding+0x514>
 800285c:	213f      	movs	r1, #63	; 0x3f
 800285e:	4620      	mov	r0, r4
 8002860:	f7fd fcd6 	bl	8000210 <d_make_comp>
 8002864:	4602      	mov	r2, r0
 8002866:	2800      	cmp	r0, #0
 8002868:	f43f af21 	beq.w	80026ae <d_encoding+0x11a>
 800286c:	2d00      	cmp	r5, #0
 800286e:	dcca      	bgt.n	8002806 <d_encoding+0x272>
 8002870:	4620      	mov	r0, r4
 8002872:	2300      	movs	r3, #0
 8002874:	213e      	movs	r1, #62	; 0x3e
 8002876:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	f7fd bcc9 	b.w	8000210 <d_make_comp>
 800287e:	2100      	movs	r1, #0
 8002880:	4620      	mov	r0, r4
 8002882:	f7ff fe87 	bl	8002594 <d_encoding>
 8002886:	2300      	movs	r3, #0
 8002888:	4602      	mov	r2, r0
 800288a:	2117      	movs	r1, #23
 800288c:	4620      	mov	r0, r4
 800288e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002892:	f7fd bcbd 	b.w	8000210 <d_make_comp>
 8002896:	4620      	mov	r0, r4
 8002898:	f7fe fd8e 	bl	80013b8 <d_name>
 800289c:	4605      	mov	r5, r0
 800289e:	4620      	mov	r0, r4
 80028a0:	f7fd fddc 	bl	800045c <d_number_component>
 80028a4:	462a      	mov	r2, r5
 80028a6:	4603      	mov	r3, r0
 80028a8:	2116      	movs	r1, #22
 80028aa:	4620      	mov	r0, r4
 80028ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	f7fd bcae 	b.w	8000210 <d_make_comp>
 80028b4:	789a      	ldrb	r2, [r3, #2]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4620      	mov	r0, r4
 80028ba:	b12a      	cbz	r2, 80028c8 <d_encoding+0x334>
 80028bc:	1cda      	adds	r2, r3, #3
 80028be:	60e2      	str	r2, [r4, #12]
 80028c0:	789b      	ldrb	r3, [r3, #2]
 80028c2:	2b6e      	cmp	r3, #110	; 0x6e
 80028c4:	f000 8109 	beq.w	8002ada <d_encoding+0x546>
 80028c8:	f7ff fe64 	bl	8002594 <d_encoding>
 80028cc:	2300      	movs	r3, #0
 80028ce:	4602      	mov	r2, r0
 80028d0:	2148      	movs	r1, #72	; 0x48
 80028d2:	4620      	mov	r0, r4
 80028d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	f7fd bc9a 	b.w	8000210 <d_make_comp>
 80028dc:	68ea      	ldr	r2, [r5, #12]
 80028de:	e000      	b.n	80028e2 <d_encoding+0x34e>
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	7810      	ldrb	r0, [r2, #0]
 80028e4:	f7fd fd80 	bl	80003e8 <is_fnqual_component_type>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d1f9      	bne.n	80028e0 <d_encoding+0x34c>
 80028ec:	60ea      	str	r2, [r5, #12]
 80028ee:	e66f      	b.n	80025d0 <d_encoding+0x3c>
 80028f0:	2176      	movs	r1, #118	; 0x76
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7fe f80a 	bl	800090c <d_call_offset>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f43f aed8 	beq.w	80026ae <d_encoding+0x11a>
 80028fe:	2100      	movs	r1, #0
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff fe47 	bl	8002594 <d_encoding>
 8002906:	2300      	movs	r3, #0
 8002908:	4602      	mov	r2, r0
 800290a:	2110      	movs	r1, #16
 800290c:	4620      	mov	r0, r4
 800290e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002912:	f7fd bc7d 	b.w	8000210 <d_make_comp>
 8002916:	2168      	movs	r1, #104	; 0x68
 8002918:	4620      	mov	r0, r4
 800291a:	f7fd fff7 	bl	800090c <d_call_offset>
 800291e:	2800      	cmp	r0, #0
 8002920:	f43f aec5 	beq.w	80026ae <d_encoding+0x11a>
 8002924:	2100      	movs	r1, #0
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe34 	bl	8002594 <d_encoding>
 800292c:	2300      	movs	r3, #0
 800292e:	4602      	mov	r2, r0
 8002930:	210f      	movs	r1, #15
 8002932:	4620      	mov	r0, r4
 8002934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	f7fd bc6a 	b.w	8000210 <d_make_comp>
 800293c:	2100      	movs	r1, #0
 800293e:	4620      	mov	r0, r4
 8002940:	f7fd ffe4 	bl	800090c <d_call_offset>
 8002944:	2800      	cmp	r0, #0
 8002946:	f43f aeb2 	beq.w	80026ae <d_encoding+0x11a>
 800294a:	2100      	movs	r1, #0
 800294c:	4620      	mov	r0, r4
 800294e:	f7fd ffdd 	bl	800090c <d_call_offset>
 8002952:	2800      	cmp	r0, #0
 8002954:	f43f aeab 	beq.w	80026ae <d_encoding+0x11a>
 8002958:	2100      	movs	r1, #0
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fe1a 	bl	8002594 <d_encoding>
 8002960:	2300      	movs	r3, #0
 8002962:	4602      	mov	r2, r0
 8002964:	2111      	movs	r1, #17
 8002966:	4620      	mov	r0, r4
 8002968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800296c:	f7fd bc50 	b.w	8000210 <d_make_comp>
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe fd21 	bl	80013b8 <d_name>
 8002976:	2300      	movs	r3, #0
 8002978:	4602      	mov	r2, r0
 800297a:	2115      	movs	r1, #21
 800297c:	4620      	mov	r0, r4
 800297e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002982:	f7fd bc45 	b.w	8000210 <d_make_comp>
 8002986:	310f      	adds	r1, #15
 8002988:	6321      	str	r1, [r4, #48]	; 0x30
 800298a:	4620      	mov	r0, r4
 800298c:	f7fe fec0 	bl	8001710 <d_type>
 8002990:	2300      	movs	r3, #0
 8002992:	4602      	mov	r2, r0
 8002994:	2109      	movs	r1, #9
 8002996:	4620      	mov	r0, r4
 8002998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	f7fd bc38 	b.w	8000210 <d_make_comp>
 80029a0:	310a      	adds	r1, #10
 80029a2:	6321      	str	r1, [r4, #48]	; 0x30
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7fe feb3 	bl	8001710 <d_type>
 80029aa:	2300      	movs	r3, #0
 80029ac:	4602      	mov	r2, r0
 80029ae:	210a      	movs	r1, #10
 80029b0:	4620      	mov	r0, r4
 80029b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b6:	f7fd bc2b 	b.w	8000210 <d_make_comp>
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7fe fea8 	bl	8001710 <d_type>
 80029c0:	2300      	movs	r3, #0
 80029c2:	4602      	mov	r2, r0
 80029c4:	210d      	movs	r1, #13
 80029c6:	4620      	mov	r0, r4
 80029c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	f7fd bc20 	b.w	8000210 <d_make_comp>
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe fe9d 	bl	8001710 <d_type>
 80029d6:	2300      	movs	r3, #0
 80029d8:	4602      	mov	r2, r0
 80029da:	2112      	movs	r1, #18
 80029dc:	4620      	mov	r0, r4
 80029de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e2:	f7fd bc15 	b.w	8000210 <d_make_comp>
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe fe92 	bl	8001710 <d_type>
 80029ec:	2300      	movs	r3, #0
 80029ee:	4602      	mov	r2, r0
 80029f0:	210c      	movs	r1, #12
 80029f2:	4620      	mov	r0, r4
 80029f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f8:	f7fd bc0a 	b.w	8000210 <d_make_comp>
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fe fcdb 	bl	80013b8 <d_name>
 8002a02:	2300      	movs	r3, #0
 8002a04:	4602      	mov	r2, r0
 8002a06:	2114      	movs	r1, #20
 8002a08:	4620      	mov	r0, r4
 8002a0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0e:	f7fd bbff 	b.w	8000210 <d_make_comp>
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7fe fe7c 	bl	8001710 <d_type>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	210e      	movs	r1, #14
 8002a1e:	4620      	mov	r0, r4
 8002a20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	f7fd bbf4 	b.w	8000210 <d_make_comp>
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7fe fe71 	bl	8001710 <d_type>
 8002a2e:	4605      	mov	r5, r0
 8002a30:	f104 000c 	add.w	r0, r4, #12
 8002a34:	f7fd fce6 	bl	8000404 <d_number.isra.1>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f6ff ae38 	blt.w	80026ae <d_encoding+0x11a>
 8002a3e:	68e3      	ldr	r3, [r4, #12]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	2a5f      	cmp	r2, #95	; 0x5f
 8002a44:	f47f ae33 	bne.w	80026ae <d_encoding+0x11a>
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60e3      	str	r3, [r4, #12]
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe fe5f 	bl	8001710 <d_type>
 8002a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a54:	1d59      	adds	r1, r3, #5
 8002a56:	6321      	str	r1, [r4, #48]	; 0x30
 8002a58:	4602      	mov	r2, r0
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	210b      	movs	r1, #11
 8002a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	f7fd bbd4 	b.w	8000210 <d_make_comp>
 8002a68:	463e      	mov	r6, r7
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	e004      	b.n	8002a78 <d_encoding+0x4e4>
 8002a6e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a72:	b123      	cbz	r3, 8002a7e <d_encoding+0x4ea>
 8002a74:	2b24      	cmp	r3, #36	; 0x24
 8002a76:	d002      	beq.n	8002a7e <d_encoding+0x4ea>
 8002a78:	3101      	adds	r1, #1
 8002a7a:	42a9      	cmp	r1, r5
 8002a7c:	dbf7      	blt.n	8002a6e <d_encoding+0x4da>
 8002a7e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a82:	4283      	cmp	r3, r0
 8002a84:	da24      	bge.n	8002ad0 <d_encoding+0x53c>
 8002a86:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a8a:	0118      	lsls	r0, r3, #4
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6163      	str	r3, [r4, #20]
 8002a90:	1833      	adds	r3, r6, r0
 8002a92:	1a6d      	subs	r5, r5, r1
 8002a94:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a98:	f806 8000 	strb.w	r8, [r6, r0]
 8002a9c:	609f      	str	r7, [r3, #8]
 8002a9e:	eb0c 0701 	add.w	r7, ip, r1
 8002aa2:	60d9      	str	r1, [r3, #12]
 8002aa4:	60e7      	str	r7, [r4, #12]
 8002aa6:	e6d6      	b.n	8002856 <d_encoding+0x2c2>
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	e6df      	b.n	800286c <d_encoding+0x2d8>
 8002aac:	2b4c      	cmp	r3, #76	; 0x4c
 8002aae:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002ab2:	d004      	beq.n	8002abe <d_encoding+0x52a>
 8002ab4:	f4ff ae79 	bcc.w	80027aa <d_encoding+0x216>
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	f63f ae76 	bhi.w	80027aa <d_encoding+0x216>
 8002abe:	6889      	ldr	r1, [r1, #8]
 8002ac0:	2900      	cmp	r1, #0
 8002ac2:	f47f add7 	bne.w	8002674 <d_encoding+0xe0>
 8002ac6:	e671      	b.n	80027ac <d_encoding+0x218>
 8002ac8:	212f      	movs	r1, #47	; 0x2f
 8002aca:	e6ae      	b.n	800282a <d_encoding+0x296>
 8002acc:	212e      	movs	r1, #46	; 0x2e
 8002ace:	e6ac      	b.n	800282a <d_encoding+0x296>
 8002ad0:	68e3      	ldr	r3, [r4, #12]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	60e3      	str	r3, [r4, #12]
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	e57a      	b.n	80025d0 <d_encoding+0x3c>
 8002ada:	f7ff fd5b 	bl	8002594 <d_encoding>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	2149      	movs	r1, #73	; 0x49
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aea:	f7fd bb91 	b.w	8000210 <d_make_comp>
 8002aee:	bf00      	nop

08002af0 <d_expr_primary>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	68c2      	ldr	r2, [r0, #12]
 8002af4:	7813      	ldrb	r3, [r2, #0]
 8002af6:	2b4c      	cmp	r3, #76	; 0x4c
 8002af8:	d144      	bne.n	8002b84 <d_expr_primary+0x94>
 8002afa:	1c53      	adds	r3, r2, #1
 8002afc:	60c3      	str	r3, [r0, #12]
 8002afe:	7851      	ldrb	r1, [r2, #1]
 8002b00:	295f      	cmp	r1, #95	; 0x5f
 8002b02:	4604      	mov	r4, r0
 8002b04:	d040      	beq.n	8002b88 <d_expr_primary+0x98>
 8002b06:	295a      	cmp	r1, #90	; 0x5a
 8002b08:	d10c      	bne.n	8002b24 <d_expr_primary+0x34>
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60e3      	str	r3, [r4, #12]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fd3f 	bl	8002594 <d_encoding>
 8002b16:	68e3      	ldr	r3, [r4, #12]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	2a45      	cmp	r2, #69	; 0x45
 8002b1c:	d132      	bne.n	8002b84 <d_expr_primary+0x94>
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60e3      	str	r3, [r4, #12]
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b24:	f7fe fdf4 	bl	8001710 <d_type>
 8002b28:	b360      	cbz	r0, 8002b84 <d_expr_primary+0x94>
 8002b2a:	7803      	ldrb	r3, [r0, #0]
 8002b2c:	2b27      	cmp	r3, #39	; 0x27
 8002b2e:	d032      	beq.n	8002b96 <d_expr_primary+0xa6>
 8002b30:	68e6      	ldr	r6, [r4, #12]
 8002b32:	7833      	ldrb	r3, [r6, #0]
 8002b34:	2b6e      	cmp	r3, #110	; 0x6e
 8002b36:	d037      	beq.n	8002ba8 <d_expr_primary+0xb8>
 8002b38:	213c      	movs	r1, #60	; 0x3c
 8002b3a:	2b45      	cmp	r3, #69	; 0x45
 8002b3c:	d040      	beq.n	8002bc0 <d_expr_primary+0xd0>
 8002b3e:	b30b      	cbz	r3, 8002b84 <d_expr_primary+0x94>
 8002b40:	4633      	mov	r3, r6
 8002b42:	e000      	b.n	8002b46 <d_expr_primary+0x56>
 8002b44:	b1f5      	cbz	r5, 8002b84 <d_expr_primary+0x94>
 8002b46:	3301      	adds	r3, #1
 8002b48:	60e3      	str	r3, [r4, #12]
 8002b4a:	781d      	ldrb	r5, [r3, #0]
 8002b4c:	2d45      	cmp	r5, #69	; 0x45
 8002b4e:	d1f9      	bne.n	8002b44 <d_expr_primary+0x54>
 8002b50:	1b9d      	subs	r5, r3, r6
 8002b52:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	da0b      	bge.n	8002b72 <d_expr_primary+0x82>
 8002b5a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b5e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b62:	eb0e 030c 	add.w	r3, lr, ip
 8002b66:	3201      	adds	r2, #1
 8002b68:	2700      	movs	r7, #0
 8002b6a:	605f      	str	r7, [r3, #4]
 8002b6c:	6162      	str	r2, [r4, #20]
 8002b6e:	b106      	cbz	r6, 8002b72 <d_expr_primary+0x82>
 8002b70:	bb05      	cbnz	r5, 8002bb4 <d_expr_primary+0xc4>
 8002b72:	2300      	movs	r3, #0
 8002b74:	4602      	mov	r2, r0
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fd fb4a 	bl	8000210 <d_make_comp>
 8002b7c:	68e3      	ldr	r3, [r4, #12]
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	2a45      	cmp	r2, #69	; 0x45
 8002b82:	d0cc      	beq.n	8002b1e <d_expr_primary+0x2e>
 8002b84:	2000      	movs	r0, #0
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b88:	1c93      	adds	r3, r2, #2
 8002b8a:	60c3      	str	r3, [r0, #12]
 8002b8c:	7892      	ldrb	r2, [r2, #2]
 8002b8e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b90:	d0bb      	beq.n	8002b0a <d_expr_primary+0x1a>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7c1      	b.n	8002b1a <d_expr_primary+0x2a>
 8002b96:	6883      	ldr	r3, [r0, #8]
 8002b98:	7c1a      	ldrb	r2, [r3, #16]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d0c8      	beq.n	8002b30 <d_expr_primary+0x40>
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ba6:	e7c3      	b.n	8002b30 <d_expr_primary+0x40>
 8002ba8:	1c72      	adds	r2, r6, #1
 8002baa:	60e2      	str	r2, [r4, #12]
 8002bac:	7873      	ldrb	r3, [r6, #1]
 8002bae:	213d      	movs	r1, #61	; 0x3d
 8002bb0:	4616      	mov	r6, r2
 8002bb2:	e7c2      	b.n	8002b3a <d_expr_primary+0x4a>
 8002bb4:	605f      	str	r7, [r3, #4]
 8002bb6:	f80e 700c 	strb.w	r7, [lr, ip]
 8002bba:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002bbe:	e7d9      	b.n	8002b74 <d_expr_primary+0x84>
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	e7c6      	b.n	8002b52 <d_expr_primary+0x62>

08002bc4 <d_print_comp>:
 8002bc4:	b112      	cbz	r2, 8002bcc <d_print_comp+0x8>
 8002bc6:	6853      	ldr	r3, [r2, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	dd03      	ble.n	8002bd4 <d_print_comp+0x10>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002bd2:	4770      	bx	lr
 8002bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd8:	4615      	mov	r5, r2
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	606a      	str	r2, [r5, #4]
 8002bde:	b099      	sub	sp, #100	; 0x64
 8002be0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002be4:	9504      	str	r5, [sp, #16]
 8002be6:	460e      	mov	r6, r1
 8002be8:	ab04      	add	r3, sp, #16
 8002bea:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bee:	9105      	str	r1, [sp, #20]
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bf6:	2f00      	cmp	r7, #0
 8002bf8:	f040 80d7 	bne.w	8002daa <d_print_comp+0x1e6>
 8002bfc:	7828      	ldrb	r0, [r5, #0]
 8002bfe:	284f      	cmp	r0, #79	; 0x4f
 8002c00:	f201 82ef 	bhi.w	80041e2 <d_print_comp+0x161e>
 8002c04:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c08:	0ab80a87 	.word	0x0ab80a87
 8002c0c:	0a4f0ab8 	.word	0x0a4f0ab8
 8002c10:	079407c6 	.word	0x079407c6
 8002c14:	075e0767 	.word	0x075e0767
 8002c18:	070f0737 	.word	0x070f0737
 8002c1c:	06bf06e7 	.word	0x06bf06e7
 8002c20:	066f0697 	.word	0x066f0697
 8002c24:	061f0647 	.word	0x061f0647
 8002c28:	091f0947 	.word	0x091f0947
 8002c2c:	08cf08f7 	.word	0x08cf08f7
 8002c30:	087f08a7 	.word	0x087f08a7
 8002c34:	082f0857 	.word	0x082f0857
 8002c38:	09bf09d6 	.word	0x09bf09d6
 8002c3c:	09bf09bf 	.word	0x09bf09bf
 8002c40:	09990999 	.word	0x09990999
 8002c44:	09990999 	.word	0x09990999
 8002c48:	09990999 	.word	0x09990999
 8002c4c:	096f0999 	.word	0x096f0999
 8002c50:	0999096f 	.word	0x0999096f
 8002c54:	0a1d0999 	.word	0x0a1d0999
 8002c58:	06060a14 	.word	0x06060a14
 8002c5c:	05720592 	.word	0x05720592
 8002c60:	0572051b 	.word	0x0572051b
 8002c64:	04d304d3 	.word	0x04d304d3
 8002c68:	045c0488 	.word	0x045c0488
 8002c6c:	0aed0434 	.word	0x0aed0434
 8002c70:	0404040c 	.word	0x0404040c
 8002c74:	039c03b0 	.word	0x039c03b0
 8002c78:	038d0397 	.word	0x038d0397
 8002c7c:	03880388 	.word	0x03880388
 8002c80:	03330333 	.word	0x03330333
 8002c84:	02fe030b 	.word	0x02fe030b
 8002c88:	02aa02dc 	.word	0x02aa02dc
 8002c8c:	025a0282 	.word	0x025a0282
 8002c90:	01f80232 	.word	0x01f80232
 8002c94:	01d00aed 	.word	0x01d00aed
 8002c98:	015301a8 	.word	0x015301a8
 8002c9c:	017b0105 	.word	0x017b0105
 8002ca0:	00d80999 	.word	0x00d80999
 8002ca4:	09990999 	.word	0x09990999
 8002ca8:	68aa      	ldr	r2, [r5, #8]
 8002caa:	6893      	ldr	r3, [r2, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	7859      	ldrb	r1, [r3, #1]
 8002cb0:	2963      	cmp	r1, #99	; 0x63
 8002cb2:	d109      	bne.n	8002cc8 <d_print_comp+0x104>
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002cba:	2901      	cmp	r1, #1
 8002cbc:	f242 8319 	bls.w	80052f2 <d_print_comp+0x272e>
 8002cc0:	3b72      	subs	r3, #114	; 0x72
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f242 8315 	bls.w	80052f2 <d_print_comp+0x272e>
 8002cc8:	f105 030c 	add.w	r3, r5, #12
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f003 fcd2 	bl	8006678 <d_maybe_print_fold_expression.isra.20>
 8002cd4:	4680      	mov	r8, r0
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	f042 8400 	bne.w	80054dc <d_print_comp+0x2918>
 8002cdc:	68ab      	ldr	r3, [r5, #8]
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	2a31      	cmp	r2, #49	; 0x31
 8002ce2:	f002 8592 	beq.w	800580a <d_print_comp+0x2c46>
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	49d7      	ldr	r1, [pc, #860]	; (8003048 <d_print_comp+0x484>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f004 f850 	bl	8006d90 <strcmp>
 8002cf0:	68eb      	ldr	r3, [r5, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	b918      	cbnz	r0, 8002cfe <d_print_comp+0x13a>
 8002cf6:	7813      	ldrb	r3, [r2, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	f002 85d4 	beq.w	80058a6 <d_print_comp+0x2ce2>
 8002cfe:	4631      	mov	r1, r6
 8002d00:	4620      	mov	r0, r4
 8002d02:	f003 fc67 	bl	80065d4 <d_print_subexpr>
 8002d06:	68af      	ldr	r7, [r5, #8]
 8002d08:	49d0      	ldr	r1, [pc, #832]	; (800304c <d_print_comp+0x488>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f8d3 8000 	ldr.w	r8, [r3]
 8002d10:	4640      	mov	r0, r8
 8002d12:	f004 f83d 	bl	8006d90 <strcmp>
 8002d16:	4681      	mov	r9, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f042 83d0 	bne.w	80054be <d_print_comp+0x28fa>
 8002d1e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d22:	2fff      	cmp	r7, #255	; 0xff
 8002d24:	d110      	bne.n	8002d48 <d_print_comp+0x184>
 8002d26:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d34:	4620      	mov	r0, r4
 8002d36:	4798      	blx	r3
 8002d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d3c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d40:	3301      	adds	r3, #1
 8002d42:	464f      	mov	r7, r9
 8002d44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d48:	1c7a      	adds	r2, r7, #1
 8002d4a:	235b      	movs	r3, #91	; 0x5b
 8002d4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d50:	55e3      	strb	r3, [r4, r7]
 8002d52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d56:	68eb      	ldr	r3, [r5, #12]
 8002d58:	4631      	mov	r1, r6
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ff31 	bl	8002bc4 <d_print_comp>
 8002d62:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d66:	2fff      	cmp	r7, #255	; 0xff
 8002d68:	d111      	bne.n	8002d8e <d_print_comp+0x1ca>
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d72:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4798      	blx	r3
 8002d7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d82:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d86:	3301      	adds	r3, #1
 8002d88:	4637      	mov	r7, r6
 8002d8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d8e:	235d      	movs	r3, #93	; 0x5d
 8002d90:	1c7a      	adds	r2, r7, #1
 8002d92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d96:	55e3      	strb	r3, [r4, r7]
 8002d98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d9c:	68ab      	ldr	r3, [r5, #8]
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	2a31      	cmp	r2, #49	; 0x31
 8002da2:	f002 83ad 	beq.w	8005500 <d_print_comp+0x293c>
 8002da6:	9905      	ldr	r1, [sp, #20]
 8002da8:	686a      	ldr	r2, [r5, #4]
 8002daa:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002dae:	3a01      	subs	r2, #1
 8002db0:	606a      	str	r2, [r5, #4]
 8002db2:	b019      	add	sp, #100	; 0x64
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db8:	4fa5      	ldr	r7, [pc, #660]	; (8003050 <d_print_comp+0x48c>)
 8002dba:	68aa      	ldr	r2, [r5, #8]
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff00 	bl	8002bc4 <d_print_comp>
 8002dc4:	f107 0808 	add.w	r8, r7, #8
 8002dc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	e016      	b.n	8002e00 <d_print_comp+0x23c>
 8002dd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dde:	4798      	blx	r3
 8002de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002de4:	3301      	adds	r3, #1
 8002de6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dea:	2200      	movs	r2, #0
 8002dec:	2301      	movs	r3, #1
 8002dee:	45b8      	cmp	r8, r7
 8002df0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002df4:	f804 a002 	strb.w	sl, [r4, r2]
 8002df8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002dfc:	f001 82f9 	beq.w	80043f2 <d_print_comp+0x182e>
 8002e00:	2bff      	cmp	r3, #255	; 0xff
 8002e02:	4619      	mov	r1, r3
 8002e04:	4620      	mov	r0, r4
 8002e06:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002e0a:	d0e2      	beq.n	8002dd2 <d_print_comp+0x20e>
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	e7ed      	b.n	8002dee <d_print_comp+0x22a>
 8002e12:	68a9      	ldr	r1, [r5, #8]
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7fd fcef 	bl	80007f8 <d_find_pack>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	f002 81e1 	beq.w	80051e2 <d_print_comp+0x261e>
 8002e20:	2300      	movs	r3, #0
 8002e22:	7802      	ldrb	r2, [r0, #0]
 8002e24:	2a2f      	cmp	r2, #47	; 0x2f
 8002e26:	f041 85df 	bne.w	80049e8 <d_print_comp+0x1e24>
 8002e2a:	6882      	ldr	r2, [r0, #8]
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	f001 85db 	beq.w	80049e8 <d_print_comp+0x1e24>
 8002e32:	68c0      	ldr	r0, [r0, #12]
 8002e34:	3301      	adds	r3, #1
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d1f3      	bne.n	8002e22 <d_print_comp+0x25e>
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68ab      	ldr	r3, [r5, #8]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	1e4a      	subs	r2, r1, #1
 8002e42:	9202      	str	r2, [sp, #8]
 8002e44:	f04f 0a00 	mov.w	sl, #0
 8002e48:	4689      	mov	r9, r1
 8002e4a:	9503      	str	r5, [sp, #12]
 8002e4c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e50:	9a01      	ldr	r2, [sp, #4]
 8002e52:	4631      	mov	r1, r6
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7ff feb5 	bl	8002bc4 <d_print_comp>
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	429f      	cmp	r7, r3
 8002e5e:	f281 81c6 	bge.w	80041ee <d_print_comp+0x162a>
 8002e62:	4d7c      	ldr	r5, [pc, #496]	; (8003054 <d_print_comp+0x490>)
 8002e64:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e68:	f105 0802 	add.w	r8, r5, #2
 8002e6c:	e016      	b.n	8002e9c <d_print_comp+0x2d8>
 8002e6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e76:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e7a:	4798      	blx	r3
 8002e7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e80:	3301      	adds	r3, #1
 8002e82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e86:	2200      	movs	r2, #0
 8002e88:	2301      	movs	r3, #1
 8002e8a:	45a8      	cmp	r8, r5
 8002e8c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e90:	f804 b002 	strb.w	fp, [r4, r2]
 8002e94:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e98:	f001 81a9 	beq.w	80041ee <d_print_comp+0x162a>
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002ea6:	d0e2      	beq.n	8002e6e <d_print_comp+0x2aa>
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	e7ed      	b.n	8002e8a <d_print_comp+0x2c6>
 8002eae:	4f6a      	ldr	r7, [pc, #424]	; (8003058 <d_print_comp+0x494>)
 8002eb0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002eb4:	f107 081a 	add.w	r8, r7, #26
 8002eb8:	f04f 0900 	mov.w	r9, #0
 8002ebc:	e016      	b.n	8002eec <d_print_comp+0x328>
 8002ebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ec6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eca:	4798      	blx	r3
 8002ecc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	45b8      	cmp	r8, r7
 8002edc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ee0:	f804 a002 	strb.w	sl, [r4, r2]
 8002ee4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ee8:	f001 82f1 	beq.w	80044ce <d_print_comp+0x190a>
 8002eec:	2bff      	cmp	r3, #255	; 0xff
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002ef6:	d0e2      	beq.n	8002ebe <d_print_comp+0x2fa>
 8002ef8:	461a      	mov	r2, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	e7ed      	b.n	8002eda <d_print_comp+0x316>
 8002efe:	4f57      	ldr	r7, [pc, #348]	; (800305c <d_print_comp+0x498>)
 8002f00:	68aa      	ldr	r2, [r5, #8]
 8002f02:	4631      	mov	r1, r6
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff fe5d 	bl	8002bc4 <d_print_comp>
 8002f0a:	f107 0805 	add.w	r8, r7, #5
 8002f0e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f12:	f04f 0900 	mov.w	r9, #0
 8002f16:	e016      	b.n	8002f46 <d_print_comp+0x382>
 8002f18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f24:	4798      	blx	r3
 8002f26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f30:	2200      	movs	r2, #0
 8002f32:	2301      	movs	r3, #1
 8002f34:	45b8      	cmp	r8, r7
 8002f36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f3a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f3e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f42:	f001 827c 	beq.w	800443e <d_print_comp+0x187a>
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f50:	d0e2      	beq.n	8002f18 <d_print_comp+0x354>
 8002f52:	461a      	mov	r2, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	e7ed      	b.n	8002f34 <d_print_comp+0x370>
 8002f58:	4f41      	ldr	r7, [pc, #260]	; (8003060 <d_print_comp+0x49c>)
 8002f5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f5e:	f107 0816 	add.w	r8, r7, #22
 8002f62:	f04f 0900 	mov.w	r9, #0
 8002f66:	e016      	b.n	8002f96 <d_print_comp+0x3d2>
 8002f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f70:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f74:	4798      	blx	r3
 8002f76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f80:	2200      	movs	r2, #0
 8002f82:	2301      	movs	r3, #1
 8002f84:	45b8      	cmp	r8, r7
 8002f86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f8a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f8e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f92:	f001 81f4 	beq.w	800437e <d_print_comp+0x17ba>
 8002f96:	2bff      	cmp	r3, #255	; 0xff
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002fa0:	d0e2      	beq.n	8002f68 <d_print_comp+0x3a4>
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	e7ed      	b.n	8002f84 <d_print_comp+0x3c0>
 8002fa8:	4e2e      	ldr	r6, [pc, #184]	; (8003064 <d_print_comp+0x4a0>)
 8002faa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fae:	f106 070e 	add.w	r7, r6, #14
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	e016      	b.n	8002fe6 <d_print_comp+0x422>
 8002fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fc0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fc4:	4798      	blx	r3
 8002fc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	42b7      	cmp	r7, r6
 8002fd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fda:	f804 9002 	strb.w	r9, [r4, r2]
 8002fde:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fe2:	f001 81d5 	beq.w	8004390 <d_print_comp+0x17cc>
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4620      	mov	r0, r4
 8002fec:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002ff0:	d0e2      	beq.n	8002fb8 <d_print_comp+0x3f4>
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e7ed      	b.n	8002fd4 <d_print_comp+0x410>
 8002ff8:	4f1b      	ldr	r7, [pc, #108]	; (8003068 <d_print_comp+0x4a4>)
 8002ffa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ffe:	f107 0808 	add.w	r8, r7, #8
 8003002:	f04f 0900 	mov.w	r9, #0
 8003006:	e016      	b.n	8003036 <d_print_comp+0x472>
 8003008:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800300c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003014:	4798      	blx	r3
 8003016:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800301a:	3301      	adds	r3, #1
 800301c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003020:	2200      	movs	r2, #0
 8003022:	2301      	movs	r3, #1
 8003024:	45b8      	cmp	r8, r7
 8003026:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800302a:	f804 a002 	strb.w	sl, [r4, r2]
 800302e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003032:	f001 8114 	beq.w	800425e <d_print_comp+0x169a>
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	4619      	mov	r1, r3
 800303a:	4620      	mov	r0, r4
 800303c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003040:	d0e2      	beq.n	8003008 <d_print_comp+0x444>
 8003042:	461a      	mov	r2, r3
 8003044:	3301      	adds	r3, #1
 8003046:	e7ed      	b.n	8003024 <d_print_comp+0x460>
 8003048:	080b39d8 	.word	0x080b39d8
 800304c:	080b3bd8 	.word	0x080b3bd8
 8003050:	080b3c93 	.word	0x080b3c93
 8003054:	080b3bac 	.word	0x080b3bac
 8003058:	080b3b77 	.word	0x080b3b77
 800305c:	080b3a18 	.word	0x080b3a18
 8003060:	080b3b7b 	.word	0x080b3b7b
 8003064:	080b3c83 	.word	0x080b3c83
 8003068:	080b3c73 	.word	0x080b3c73
 800306c:	4fb9      	ldr	r7, [pc, #740]	; (8003354 <d_print_comp+0x790>)
 800306e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003072:	f107 081c 	add.w	r8, r7, #28
 8003076:	f04f 0900 	mov.w	r9, #0
 800307a:	e016      	b.n	80030aa <d_print_comp+0x4e6>
 800307c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003080:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003084:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003088:	4798      	blx	r3
 800308a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800308e:	3301      	adds	r3, #1
 8003090:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003094:	2200      	movs	r2, #0
 8003096:	2301      	movs	r3, #1
 8003098:	45b8      	cmp	r8, r7
 800309a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800309e:	f804 a002 	strb.w	sl, [r4, r2]
 80030a2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030a6:	f001 810f 	beq.w	80042c8 <d_print_comp+0x1704>
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	4619      	mov	r1, r3
 80030ae:	4620      	mov	r0, r4
 80030b0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030b4:	d0e2      	beq.n	800307c <d_print_comp+0x4b8>
 80030b6:	461a      	mov	r2, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	e7ed      	b.n	8003098 <d_print_comp+0x4d4>
 80030bc:	4fa6      	ldr	r7, [pc, #664]	; (8003358 <d_print_comp+0x794>)
 80030be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030c2:	f107 081d 	add.w	r8, r7, #29
 80030c6:	f04f 0900 	mov.w	r9, #0
 80030ca:	e016      	b.n	80030fa <d_print_comp+0x536>
 80030cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030d4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030d8:	4798      	blx	r3
 80030da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030de:	3301      	adds	r3, #1
 80030e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030e4:	2200      	movs	r2, #0
 80030e6:	2301      	movs	r3, #1
 80030e8:	4547      	cmp	r7, r8
 80030ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ee:	f804 a002 	strb.w	sl, [r4, r2]
 80030f2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030f6:	f001 8083 	beq.w	8004200 <d_print_comp+0x163c>
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	4619      	mov	r1, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003104:	d0e2      	beq.n	80030cc <d_print_comp+0x508>
 8003106:	461a      	mov	r2, r3
 8003108:	3301      	adds	r3, #1
 800310a:	e7ed      	b.n	80030e8 <d_print_comp+0x524>
 800310c:	4f93      	ldr	r7, [pc, #588]	; (800335c <d_print_comp+0x798>)
 800310e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003112:	f107 080a 	add.w	r8, r7, #10
 8003116:	f04f 0900 	mov.w	r9, #0
 800311a:	e016      	b.n	800314a <d_print_comp+0x586>
 800311c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003120:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003124:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003128:	4798      	blx	r3
 800312a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800312e:	3301      	adds	r3, #1
 8003130:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003134:	2200      	movs	r2, #0
 8003136:	2301      	movs	r3, #1
 8003138:	45b8      	cmp	r8, r7
 800313a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800313e:	f804 a002 	strb.w	sl, [r4, r2]
 8003142:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003146:	f001 8064 	beq.w	8004212 <d_print_comp+0x164e>
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	4619      	mov	r1, r3
 800314e:	4620      	mov	r0, r4
 8003150:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003154:	d0e2      	beq.n	800311c <d_print_comp+0x558>
 8003156:	461a      	mov	r2, r3
 8003158:	3301      	adds	r3, #1
 800315a:	e7ed      	b.n	8003138 <d_print_comp+0x574>
 800315c:	a808      	add	r0, sp, #32
 800315e:	68aa      	ldr	r2, [r5, #8]
 8003160:	497f      	ldr	r1, [pc, #508]	; (8003360 <d_print_comp+0x79c>)
 8003162:	f026 f923 	bl	80293ac <sprintf>
 8003166:	a808      	add	r0, sp, #32
 8003168:	f003 fe1c 	bl	8006da4 <strlen>
 800316c:	2800      	cmp	r0, #0
 800316e:	f001 81b7 	beq.w	80044e0 <d_print_comp+0x191c>
 8003172:	ae08      	add	r6, sp, #32
 8003174:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003178:	1837      	adds	r7, r6, r0
 800317a:	f04f 0800 	mov.w	r8, #0
 800317e:	e016      	b.n	80031ae <d_print_comp+0x5ea>
 8003180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003184:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003188:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800318c:	4798      	blx	r3
 800318e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003192:	3301      	adds	r3, #1
 8003194:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003198:	2200      	movs	r2, #0
 800319a:	2301      	movs	r3, #1
 800319c:	42be      	cmp	r6, r7
 800319e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031a2:	f804 9002 	strb.w	r9, [r4, r2]
 80031a6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80031aa:	f001 8199 	beq.w	80044e0 <d_print_comp+0x191c>
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	4619      	mov	r1, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f816 9b01 	ldrb.w	r9, [r6], #1
 80031b8:	d0e2      	beq.n	8003180 <d_print_comp+0x5bc>
 80031ba:	461a      	mov	r2, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	e7ed      	b.n	800319c <d_print_comp+0x5d8>
 80031c0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80031c4:	f895 8008 	ldrb.w	r8, [r5, #8]
 80031c8:	2fff      	cmp	r7, #255	; 0xff
 80031ca:	d111      	bne.n	80031f0 <d_print_comp+0x62c>
 80031cc:	2600      	movs	r6, #0
 80031ce:	4639      	mov	r1, r7
 80031d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031d4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031dc:	4620      	mov	r0, r4
 80031de:	4798      	blx	r3
 80031e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031e4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031e8:	3301      	adds	r3, #1
 80031ea:	4637      	mov	r7, r6
 80031ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031f0:	1c7b      	adds	r3, r7, #1
 80031f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031f6:	f804 8007 	strb.w	r8, [r4, r7]
 80031fa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031fe:	686a      	ldr	r2, [r5, #4]
 8003200:	9905      	ldr	r1, [sp, #20]
 8003202:	e5d2      	b.n	8002daa <d_print_comp+0x1e6>
 8003204:	68aa      	ldr	r2, [r5, #8]
 8003206:	4631      	mov	r1, r6
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fcdb 	bl	8002bc4 <d_print_comp>
 800320e:	4631      	mov	r1, r6
 8003210:	68ea      	ldr	r2, [r5, #12]
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff fcd6 	bl	8002bc4 <d_print_comp>
 8003218:	9905      	ldr	r1, [sp, #20]
 800321a:	686a      	ldr	r2, [r5, #4]
 800321c:	e5c5      	b.n	8002daa <d_print_comp+0x1e6>
 800321e:	4f51      	ldr	r7, [pc, #324]	; (8003364 <d_print_comp+0x7a0>)
 8003220:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003224:	f107 080e 	add.w	r8, r7, #14
 8003228:	f04f 0900 	mov.w	r9, #0
 800322c:	e016      	b.n	800325c <d_print_comp+0x698>
 800322e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003232:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003236:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800323a:	4798      	blx	r3
 800323c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003240:	3301      	adds	r3, #1
 8003242:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003246:	2200      	movs	r2, #0
 8003248:	2301      	movs	r3, #1
 800324a:	45b8      	cmp	r8, r7
 800324c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003250:	f804 a002 	strb.w	sl, [r4, r2]
 8003254:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003258:	f001 8146 	beq.w	80044e8 <d_print_comp+0x1924>
 800325c:	2bff      	cmp	r3, #255	; 0xff
 800325e:	4619      	mov	r1, r3
 8003260:	4620      	mov	r0, r4
 8003262:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003266:	d0e2      	beq.n	800322e <d_print_comp+0x66a>
 8003268:	461a      	mov	r2, r3
 800326a:	3301      	adds	r3, #1
 800326c:	e7ed      	b.n	800324a <d_print_comp+0x686>
 800326e:	68ab      	ldr	r3, [r5, #8]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	2a27      	cmp	r2, #39	; 0x27
 8003274:	f001 8572 	beq.w	8004d5c <d_print_comp+0x2198>
 8003278:	f04f 0800 	mov.w	r8, #0
 800327c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003280:	2fff      	cmp	r7, #255	; 0xff
 8003282:	d112      	bne.n	80032aa <d_print_comp+0x6e6>
 8003284:	f04f 0900 	mov.w	r9, #0
 8003288:	4639      	mov	r1, r7
 800328a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800328e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003292:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003296:	4620      	mov	r0, r4
 8003298:	4798      	blx	r3
 800329a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800329e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80032a2:	3301      	adds	r3, #1
 80032a4:	464f      	mov	r7, r9
 80032a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032aa:	2328      	movs	r3, #40	; 0x28
 80032ac:	1c7a      	adds	r2, r7, #1
 80032ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80032b2:	55e3      	strb	r3, [r4, r7]
 80032b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032b8:	68aa      	ldr	r2, [r5, #8]
 80032ba:	4631      	mov	r1, r6
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fc81 	bl	8002bc4 <d_print_comp>
 80032c2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	f041 85b8 	bne.w	8004e3c <d_print_comp+0x2278>
 80032cc:	2200      	movs	r2, #0
 80032ce:	4619      	mov	r1, r3
 80032d0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80032d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032dc:	4620      	mov	r0, r4
 80032de:	4798      	blx	r3
 80032e0:	2329      	movs	r3, #41	; 0x29
 80032e2:	7023      	strb	r3, [r4, #0]
 80032e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032e8:	782a      	ldrb	r2, [r5, #0]
 80032ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ee:	2101      	movs	r1, #1
 80032f0:	3301      	adds	r3, #1
 80032f2:	2a3d      	cmp	r2, #61	; 0x3d
 80032f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032fc:	f001 85bb 	beq.w	8004e76 <d_print_comp+0x22b2>
 8003300:	f1b8 0f08 	cmp.w	r8, #8
 8003304:	f001 8556 	beq.w	8004db4 <d_print_comp+0x21f0>
 8003308:	4631      	mov	r1, r6
 800330a:	68ea      	ldr	r2, [r5, #12]
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fc59 	bl	8002bc4 <d_print_comp>
 8003312:	9905      	ldr	r1, [sp, #20]
 8003314:	686a      	ldr	r2, [r5, #4]
 8003316:	e548      	b.n	8002daa <d_print_comp+0x1e6>
 8003318:	2301      	movs	r3, #1
 800331a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800331e:	686a      	ldr	r2, [r5, #4]
 8003320:	e543      	b.n	8002daa <d_print_comp+0x1e6>
 8003322:	68eb      	ldr	r3, [r5, #12]
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	2a3a      	cmp	r2, #58	; 0x3a
 8003328:	f001 8405 	beq.w	8004b36 <d_print_comp+0x1f72>
 800332c:	2301      	movs	r3, #1
 800332e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003332:	686a      	ldr	r2, [r5, #4]
 8003334:	e539      	b.n	8002daa <d_print_comp+0x1e6>
 8003336:	2301      	movs	r3, #1
 8003338:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800333c:	686a      	ldr	r2, [r5, #4]
 800333e:	e534      	b.n	8002daa <d_print_comp+0x1e6>
 8003340:	68eb      	ldr	r3, [r5, #12]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b38      	cmp	r3, #56	; 0x38
 8003346:	f43f acaf 	beq.w	8002ca8 <d_print_comp+0xe4>
 800334a:	2301      	movs	r3, #1
 800334c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003350:	686a      	ldr	r2, [r5, #4]
 8003352:	e52a      	b.n	8002daa <d_print_comp+0x1e6>
 8003354:	080b3c53 	.word	0x080b3c53
 8003358:	080b3c33 	.word	0x080b3c33
 800335c:	080b3c14 	.word	0x080b3c14
 8003360:	080b39d0 	.word	0x080b39d0
 8003364:	080b3c03 	.word	0x080b3c03
 8003368:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800336c:	f899 3000 	ldrb.w	r3, [r9]
 8003370:	2b31      	cmp	r3, #49	; 0x31
 8003372:	f001 843a 	beq.w	8004bea <d_print_comp+0x2026>
 8003376:	2b33      	cmp	r3, #51	; 0x33
 8003378:	f042 8192 	bne.w	80056a0 <d_print_comp+0x2adc>
 800337c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003380:	2fff      	cmp	r7, #255	; 0xff
 8003382:	d112      	bne.n	80033aa <d_print_comp+0x7e6>
 8003384:	f04f 0a00 	mov.w	sl, #0
 8003388:	4639      	mov	r1, r7
 800338a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800338e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003396:	4620      	mov	r0, r4
 8003398:	4798      	blx	r3
 800339a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800339e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80033a2:	3301      	adds	r3, #1
 80033a4:	4657      	mov	r7, sl
 80033a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033aa:	1c7a      	adds	r2, r7, #1
 80033ac:	2328      	movs	r3, #40	; 0x28
 80033ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033b2:	55e3      	strb	r3, [r4, r7]
 80033b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033b8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80033bc:	4631      	mov	r1, r6
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff fc00 	bl	8002bc4 <d_print_comp>
 80033c4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033c8:	2fff      	cmp	r7, #255	; 0xff
 80033ca:	d112      	bne.n	80033f2 <d_print_comp+0x82e>
 80033cc:	f04f 0900 	mov.w	r9, #0
 80033d0:	4639      	mov	r1, r7
 80033d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033de:	4620      	mov	r0, r4
 80033e0:	4798      	blx	r3
 80033e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033e6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033ea:	3301      	adds	r3, #1
 80033ec:	464f      	mov	r7, r9
 80033ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033f2:	2329      	movs	r3, #41	; 0x29
 80033f4:	1c7a      	adds	r2, r7, #1
 80033f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033fa:	55e3      	strb	r3, [r4, r7]
 80033fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003400:	4642      	mov	r2, r8
 8003402:	4631      	mov	r1, r6
 8003404:	4620      	mov	r0, r4
 8003406:	f003 f8e5 	bl	80065d4 <d_print_subexpr>
 800340a:	9905      	ldr	r1, [sp, #20]
 800340c:	686a      	ldr	r2, [r5, #4]
 800340e:	e4cc      	b.n	8002daa <d_print_comp+0x1e6>
 8003410:	4631      	mov	r1, r6
 8003412:	68aa      	ldr	r2, [r5, #8]
 8003414:	4620      	mov	r0, r4
 8003416:	f003 f89d 	bl	8006554 <d_print_expr_op>
 800341a:	9905      	ldr	r1, [sp, #20]
 800341c:	686a      	ldr	r2, [r5, #4]
 800341e:	e4c4      	b.n	8002daa <d_print_comp+0x1e6>
 8003420:	4fd2      	ldr	r7, [pc, #840]	; (800376c <d_print_comp+0xba8>)
 8003422:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003426:	f107 0809 	add.w	r8, r7, #9
 800342a:	f04f 0900 	mov.w	r9, #0
 800342e:	e016      	b.n	800345e <d_print_comp+0x89a>
 8003430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003434:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003438:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800343c:	4798      	blx	r3
 800343e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003442:	3301      	adds	r3, #1
 8003444:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003448:	2200      	movs	r2, #0
 800344a:	2301      	movs	r3, #1
 800344c:	45b8      	cmp	r8, r7
 800344e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003452:	f804 a002 	strb.w	sl, [r4, r2]
 8003456:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800345a:	f001 8057 	beq.w	800450c <d_print_comp+0x1948>
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	4619      	mov	r1, r3
 8003462:	4620      	mov	r0, r4
 8003464:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003468:	d0e2      	beq.n	8003430 <d_print_comp+0x86c>
 800346a:	461a      	mov	r2, r3
 800346c:	3301      	adds	r3, #1
 800346e:	e7ed      	b.n	800344c <d_print_comp+0x888>
 8003470:	4fbe      	ldr	r7, [pc, #760]	; (800376c <d_print_comp+0xba8>)
 8003472:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003476:	f107 0809 	add.w	r8, r7, #9
 800347a:	f04f 0900 	mov.w	r9, #0
 800347e:	e016      	b.n	80034ae <d_print_comp+0x8ea>
 8003480:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003488:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800348c:	4798      	blx	r3
 800348e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003492:	3301      	adds	r3, #1
 8003494:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003498:	2200      	movs	r2, #0
 800349a:	2301      	movs	r3, #1
 800349c:	45b8      	cmp	r8, r7
 800349e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034a2:	f804 a002 	strb.w	sl, [r4, r2]
 80034a6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80034aa:	f001 8026 	beq.w	80044fa <d_print_comp+0x1936>
 80034ae:	2bff      	cmp	r3, #255	; 0xff
 80034b0:	4619      	mov	r1, r3
 80034b2:	4620      	mov	r0, r4
 80034b4:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80034b8:	d0e2      	beq.n	8003480 <d_print_comp+0x8bc>
 80034ba:	461a      	mov	r2, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	e7ed      	b.n	800349c <d_print_comp+0x8d8>
 80034c0:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80034c4:	4eaa      	ldr	r6, [pc, #680]	; (8003770 <d_print_comp+0xbac>)
 80034c6:	f8da 7008 	ldr.w	r7, [sl, #8]
 80034ca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034ce:	f106 0808 	add.w	r8, r6, #8
 80034d2:	f04f 0900 	mov.w	r9, #0
 80034d6:	e016      	b.n	8003506 <d_print_comp+0x942>
 80034d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034e4:	4798      	blx	r3
 80034e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ea:	3301      	adds	r3, #1
 80034ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034f0:	2200      	movs	r2, #0
 80034f2:	2301      	movs	r3, #1
 80034f4:	4546      	cmp	r6, r8
 80034f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034fa:	f804 b002 	strb.w	fp, [r4, r2]
 80034fe:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8003502:	f001 8021 	beq.w	8004548 <d_print_comp+0x1984>
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	4619      	mov	r1, r3
 800350a:	4620      	mov	r0, r4
 800350c:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 8003510:	d0e2      	beq.n	80034d8 <d_print_comp+0x914>
 8003512:	461a      	mov	r2, r3
 8003514:	3301      	adds	r3, #1
 8003516:	e7ed      	b.n	80034f4 <d_print_comp+0x930>
 8003518:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 800351c:	b11a      	cbz	r2, 8003526 <d_print_comp+0x962>
 800351e:	4631      	mov	r1, r6
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff fb4f 	bl	8002bc4 <d_print_comp>
 8003526:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800352a:	2fff      	cmp	r7, #255	; 0xff
 800352c:	d112      	bne.n	8003554 <d_print_comp+0x990>
 800352e:	f04f 0900 	mov.w	r9, #0
 8003532:	4639      	mov	r1, r7
 8003534:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003538:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800353c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003540:	4620      	mov	r0, r4
 8003542:	4798      	blx	r3
 8003544:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003548:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800354c:	3301      	adds	r3, #1
 800354e:	464f      	mov	r7, r9
 8003550:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003554:	1c78      	adds	r0, r7, #1
 8003556:	237b      	movs	r3, #123	; 0x7b
 8003558:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800355c:	4642      	mov	r2, r8
 800355e:	55e3      	strb	r3, [r4, r7]
 8003560:	4631      	mov	r1, r6
 8003562:	4620      	mov	r0, r4
 8003564:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003568:	f7ff fb2c 	bl	8002bc4 <d_print_comp>
 800356c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003570:	2fff      	cmp	r7, #255	; 0xff
 8003572:	d111      	bne.n	8003598 <d_print_comp+0x9d4>
 8003574:	2600      	movs	r6, #0
 8003576:	4639      	mov	r1, r7
 8003578:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800357c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003580:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003584:	4620      	mov	r0, r4
 8003586:	4798      	blx	r3
 8003588:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800358c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003590:	3301      	adds	r3, #1
 8003592:	4637      	mov	r7, r6
 8003594:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003598:	1c7a      	adds	r2, r7, #1
 800359a:	237d      	movs	r3, #125	; 0x7d
 800359c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035a0:	55e3      	strb	r3, [r4, r7]
 80035a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80035a6:	686a      	ldr	r2, [r5, #4]
 80035a8:	9905      	ldr	r1, [sp, #20]
 80035aa:	f7ff bbfe 	b.w	8002daa <d_print_comp+0x1e6>
 80035ae:	68aa      	ldr	r2, [r5, #8]
 80035b0:	b11a      	cbz	r2, 80035ba <d_print_comp+0x9f6>
 80035b2:	4631      	mov	r1, r6
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff fb05 	bl	8002bc4 <d_print_comp>
 80035ba:	68eb      	ldr	r3, [r5, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f001 853d 	beq.w	800503c <d_print_comp+0x2478>
 80035c2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035c6:	2ffd      	cmp	r7, #253	; 0xfd
 80035c8:	d912      	bls.n	80035f0 <d_print_comp+0xa2c>
 80035ca:	f04f 0800 	mov.w	r8, #0
 80035ce:	f804 8007 	strb.w	r8, [r4, r7]
 80035d2:	4639      	mov	r1, r7
 80035d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035dc:	4620      	mov	r0, r4
 80035de:	4798      	blx	r3
 80035e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035e8:	3301      	adds	r3, #1
 80035ea:	4647      	mov	r7, r8
 80035ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035f0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800377c <d_print_comp+0xbb8>
 80035f4:	f04f 0a00 	mov.w	sl, #0
 80035f8:	f108 0b02 	add.w	fp, r8, #2
 80035fc:	e016      	b.n	800362c <d_print_comp+0xa68>
 80035fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003602:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003606:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800360a:	4798      	blx	r3
 800360c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003610:	3301      	adds	r3, #1
 8003612:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003616:	2701      	movs	r7, #1
 8003618:	2300      	movs	r3, #0
 800361a:	45c3      	cmp	fp, r8
 800361c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003620:	f804 9003 	strb.w	r9, [r4, r3]
 8003624:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003628:	f001 80cf 	beq.w	80047ca <d_print_comp+0x1c06>
 800362c:	2fff      	cmp	r7, #255	; 0xff
 800362e:	4639      	mov	r1, r7
 8003630:	4620      	mov	r0, r4
 8003632:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003636:	d0e2      	beq.n	80035fe <d_print_comp+0xa3a>
 8003638:	463b      	mov	r3, r7
 800363a:	3701      	adds	r7, #1
 800363c:	e7ed      	b.n	800361a <d_print_comp+0xa56>
 800363e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f041 84a0 	bne.w	8004f88 <d_print_comp+0x23c4>
 8003648:	68aa      	ldr	r2, [r5, #8]
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <d_print_comp+0xbb0>)
 800364c:	6891      	ldr	r1, [r2, #8]
 800364e:	4299      	cmp	r1, r3
 8003650:	d020      	beq.n	8003694 <d_print_comp+0xad0>
 8003652:	4631      	mov	r1, r6
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fab5 	bl	8002bc4 <d_print_comp>
 800365a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800365e:	2fff      	cmp	r7, #255	; 0xff
 8003660:	d111      	bne.n	8003686 <d_print_comp+0xac2>
 8003662:	2600      	movs	r6, #0
 8003664:	4639      	mov	r1, r7
 8003666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800366a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800366e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003672:	4620      	mov	r0, r4
 8003674:	4798      	blx	r3
 8003676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800367a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800367e:	3301      	adds	r3, #1
 8003680:	4637      	mov	r7, r6
 8003682:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003686:	2320      	movs	r3, #32
 8003688:	1c7a      	adds	r2, r7, #1
 800368a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800368e:	55e3      	strb	r3, [r4, r7]
 8003690:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003694:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003698:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800369c:	2a00      	cmp	r2, #0
 800369e:	f001 80a6 	beq.w	80047ee <d_print_comp+0x1c2a>
 80036a2:	4e35      	ldr	r6, [pc, #212]	; (8003778 <d_print_comp+0xbb4>)
 80036a4:	f04f 0800 	mov.w	r8, #0
 80036a8:	f106 0906 	add.w	r9, r6, #6
 80036ac:	e015      	b.n	80036da <d_print_comp+0xb16>
 80036ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80036ba:	4798      	blx	r3
 80036bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036c0:	3301      	adds	r3, #1
 80036c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036c6:	2200      	movs	r2, #0
 80036c8:	2301      	movs	r3, #1
 80036ca:	45b1      	cmp	r9, r6
 80036cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80036d0:	54a7      	strb	r7, [r4, r2]
 80036d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80036d6:	f001 8183 	beq.w	80049e0 <d_print_comp+0x1e1c>
 80036da:	2bff      	cmp	r3, #255	; 0xff
 80036dc:	4619      	mov	r1, r3
 80036de:	4620      	mov	r0, r4
 80036e0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036e4:	d0e3      	beq.n	80036ae <d_print_comp+0xaea>
 80036e6:	461a      	mov	r2, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	e7ee      	b.n	80036ca <d_print_comp+0xb06>
 80036ec:	ab18      	add	r3, sp, #96	; 0x60
 80036ee:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036f2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036f6:	2000      	movs	r0, #0
 80036f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036fc:	900a      	str	r0, [sp, #40]	; 0x28
 80036fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003702:	68ea      	ldr	r2, [r5, #12]
 8003704:	930b      	str	r3, [sp, #44]	; 0x2c
 8003706:	4631      	mov	r1, r6
 8003708:	4620      	mov	r0, r4
 800370a:	9509      	str	r5, [sp, #36]	; 0x24
 800370c:	f7ff fa5a 	bl	8002bc4 <d_print_comp>
 8003710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003712:	b923      	cbnz	r3, 800371e <d_print_comp+0xb5a>
 8003714:	4631      	mov	r1, r6
 8003716:	462a      	mov	r2, r5
 8003718:	4620      	mov	r0, r4
 800371a:	f002 f8e9 	bl	80058f0 <d_print_mod>
 800371e:	9b08      	ldr	r3, [sp, #32]
 8003720:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003724:	9905      	ldr	r1, [sp, #20]
 8003726:	686a      	ldr	r2, [r5, #4]
 8003728:	f7ff bb3f 	b.w	8002daa <d_print_comp+0x1e6>
 800372c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003730:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003734:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003738:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800373c:	f8cd c004 	str.w	ip, [sp, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	4667      	mov	r7, ip
 8003744:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003748:	9509      	str	r5, [sp, #36]	; 0x24
 800374a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800374e:	2f00      	cmp	r7, #0
 8003750:	f001 852f 	beq.w	80051b2 <d_print_comp+0x25ee>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	3b19      	subs	r3, #25
 800375a:	2b02      	cmp	r3, #2
 800375c:	f201 8529 	bhi.w	80051b2 <d_print_comp+0x25ee>
 8003760:	4623      	mov	r3, r4
 8003762:	f04f 0801 	mov.w	r8, #1
 8003766:	464c      	mov	r4, r9
 8003768:	469c      	mov	ip, r3
 800376a:	e00e      	b.n	800378a <d_print_comp+0xbc6>
 800376c:	080b3bbb 	.word	0x080b3bbb
 8003770:	080b3baf 	.word	0x080b3baf
 8003774:	080318ec 	.word	0x080318ec
 8003778:	080b3b9c 	.word	0x080b3b9c
 800377c:	080b3bac 	.word	0x080b3bac
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	3b19      	subs	r3, #25
 8003786:	2b02      	cmp	r3, #2
 8003788:	d81d      	bhi.n	80037c6 <d_print_comp+0xc02>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003790:	aa18      	add	r2, sp, #96	; 0x60
 8003792:	eb02 0b0e 	add.w	fp, r2, lr
 8003796:	b99b      	cbnz	r3, 80037c0 <d_print_comp+0xbfc>
 8003798:	f1b8 0f03 	cmp.w	r8, #3
 800379c:	f201 8517 	bhi.w	80051ce <d_print_comp+0x260a>
 80037a0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80037a4:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80037a8:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80037ac:	f84b 4c40 	str.w	r4, [fp, #-64]
 80037b0:	2301      	movs	r3, #1
 80037b2:	eb09 040e 	add.w	r4, r9, lr
 80037b6:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 80037ba:	f108 0801 	add.w	r8, r8, #1
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	683f      	ldr	r7, [r7, #0]
 80037c2:	2f00      	cmp	r7, #0
 80037c4:	d1dc      	bne.n	8003780 <d_print_comp+0xbbc>
 80037c6:	68ea      	ldr	r2, [r5, #12]
 80037c8:	4631      	mov	r1, r6
 80037ca:	4660      	mov	r0, ip
 80037cc:	4664      	mov	r4, ip
 80037ce:	f7ff f9f9 	bl	8002bc4 <d_print_comp>
 80037d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d4:	9a01      	ldr	r2, [sp, #4]
 80037d6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80037da:	b9bb      	cbnz	r3, 800380c <d_print_comp+0xc48>
 80037dc:	f1b8 0f01 	cmp.w	r8, #1
 80037e0:	d00c      	beq.n	80037fc <d_print_comp+0xc38>
 80037e2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037e6:	af0c      	add	r7, sp, #48	; 0x30
 80037e8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037ec:	4631      	mov	r1, r6
 80037ee:	f1a8 0810 	sub.w	r8, r8, #16
 80037f2:	4620      	mov	r0, r4
 80037f4:	f002 f87c 	bl	80058f0 <d_print_mod>
 80037f8:	4547      	cmp	r7, r8
 80037fa:	d1f5      	bne.n	80037e8 <d_print_comp+0xc24>
 80037fc:	4631      	mov	r1, r6
 80037fe:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003802:	f105 0208 	add.w	r2, r5, #8
 8003806:	4620      	mov	r0, r4
 8003808:	f002 fdca 	bl	80063a0 <d_print_array_type.isra.14>
 800380c:	9905      	ldr	r1, [sp, #20]
 800380e:	686a      	ldr	r2, [r5, #4]
 8003810:	f7ff bacb 	b.w	8002daa <d_print_comp+0x1e6>
 8003814:	06b2      	lsls	r2, r6, #26
 8003816:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 800381a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800381e:	f101 825a 	bmi.w	8004cd6 <d_print_comp+0x2112>
 8003822:	68aa      	ldr	r2, [r5, #8]
 8003824:	b11a      	cbz	r2, 800382e <d_print_comp+0xc6a>
 8003826:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800382a:	f001 85c3 	beq.w	80053b4 <d_print_comp+0x27f0>
 800382e:	4641      	mov	r1, r8
 8003830:	f105 020c 	add.w	r2, r5, #12
 8003834:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003838:	4620      	mov	r0, r4
 800383a:	f002 fb87 	bl	8005f4c <d_print_function_type.isra.15>
 800383e:	9905      	ldr	r1, [sp, #20]
 8003840:	686a      	ldr	r2, [r5, #4]
 8003842:	f7ff bab2 	b.w	8002daa <d_print_comp+0x1e6>
 8003846:	4fcb      	ldr	r7, [pc, #812]	; (8003b74 <d_print_comp+0xfb0>)
 8003848:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800384c:	f107 0815 	add.w	r8, r7, #21
 8003850:	f04f 0900 	mov.w	r9, #0
 8003854:	e016      	b.n	8003884 <d_print_comp+0xcc0>
 8003856:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800385a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800385e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003862:	4798      	blx	r3
 8003864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003868:	3301      	adds	r3, #1
 800386a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800386e:	2200      	movs	r2, #0
 8003870:	2301      	movs	r3, #1
 8003872:	45b8      	cmp	r8, r7
 8003874:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003878:	f804 a002 	strb.w	sl, [r4, r2]
 800387c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003880:	f000 8789 	beq.w	8004796 <d_print_comp+0x1bd2>
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	4619      	mov	r1, r3
 8003888:	4620      	mov	r0, r4
 800388a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800388e:	d0e2      	beq.n	8003856 <d_print_comp+0xc92>
 8003890:	461a      	mov	r2, r3
 8003892:	3301      	adds	r3, #1
 8003894:	e7ed      	b.n	8003872 <d_print_comp+0xcae>
 8003896:	4fb8      	ldr	r7, [pc, #736]	; (8003b78 <d_print_comp+0xfb4>)
 8003898:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800389c:	f107 0810 	add.w	r8, r7, #16
 80038a0:	f04f 0900 	mov.w	r9, #0
 80038a4:	e016      	b.n	80038d4 <d_print_comp+0xd10>
 80038a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038b2:	4798      	blx	r3
 80038b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038b8:	3301      	adds	r3, #1
 80038ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038be:	2200      	movs	r2, #0
 80038c0:	2301      	movs	r3, #1
 80038c2:	45b8      	cmp	r8, r7
 80038c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038c8:	f804 a002 	strb.w	sl, [r4, r2]
 80038cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038d0:	f000 876a 	beq.w	80047a8 <d_print_comp+0x1be4>
 80038d4:	2bff      	cmp	r3, #255	; 0xff
 80038d6:	4619      	mov	r1, r3
 80038d8:	4620      	mov	r0, r4
 80038da:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038de:	d0e2      	beq.n	80038a6 <d_print_comp+0xce2>
 80038e0:	461a      	mov	r2, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	e7ed      	b.n	80038c2 <d_print_comp+0xcfe>
 80038e6:	4fa5      	ldr	r7, [pc, #660]	; (8003b7c <d_print_comp+0xfb8>)
 80038e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038ec:	f107 0812 	add.w	r8, r7, #18
 80038f0:	f04f 0900 	mov.w	r9, #0
 80038f4:	e016      	b.n	8003924 <d_print_comp+0xd60>
 80038f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038fe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003902:	4798      	blx	r3
 8003904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003908:	3301      	adds	r3, #1
 800390a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800390e:	2200      	movs	r2, #0
 8003910:	2301      	movs	r3, #1
 8003912:	45b8      	cmp	r8, r7
 8003914:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003918:	f804 a002 	strb.w	sl, [r4, r2]
 800391c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003920:	f000 8727 	beq.w	8004772 <d_print_comp+0x1bae>
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	4619      	mov	r1, r3
 8003928:	4620      	mov	r0, r4
 800392a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800392e:	d0e2      	beq.n	80038f6 <d_print_comp+0xd32>
 8003930:	461a      	mov	r2, r3
 8003932:	3301      	adds	r3, #1
 8003934:	e7ed      	b.n	8003912 <d_print_comp+0xd4e>
 8003936:	4f92      	ldr	r7, [pc, #584]	; (8003b80 <d_print_comp+0xfbc>)
 8003938:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800393c:	f107 080d 	add.w	r8, r7, #13
 8003940:	f04f 0900 	mov.w	r9, #0
 8003944:	e016      	b.n	8003974 <d_print_comp+0xdb0>
 8003946:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800394e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003952:	4798      	blx	r3
 8003954:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003958:	3301      	adds	r3, #1
 800395a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800395e:	2200      	movs	r2, #0
 8003960:	2301      	movs	r3, #1
 8003962:	45b8      	cmp	r8, r7
 8003964:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003968:	f804 a002 	strb.w	sl, [r4, r2]
 800396c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003970:	f000 8708 	beq.w	8004784 <d_print_comp+0x1bc0>
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	4619      	mov	r1, r3
 8003978:	4620      	mov	r0, r4
 800397a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800397e:	d0e2      	beq.n	8003946 <d_print_comp+0xd82>
 8003980:	461a      	mov	r2, r3
 8003982:	3301      	adds	r3, #1
 8003984:	e7ed      	b.n	8003962 <d_print_comp+0xd9e>
 8003986:	4f7f      	ldr	r7, [pc, #508]	; (8003b84 <d_print_comp+0xfc0>)
 8003988:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800398c:	f107 0818 	add.w	r8, r7, #24
 8003990:	f04f 0900 	mov.w	r9, #0
 8003994:	e016      	b.n	80039c4 <d_print_comp+0xe00>
 8003996:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800399a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800399e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039a2:	4798      	blx	r3
 80039a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039a8:	3301      	adds	r3, #1
 80039aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039ae:	2200      	movs	r2, #0
 80039b0:	2301      	movs	r3, #1
 80039b2:	45b8      	cmp	r8, r7
 80039b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039b8:	f804 a002 	strb.w	sl, [r4, r2]
 80039bc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039c0:	f000 8699 	beq.w	80046f6 <d_print_comp+0x1b32>
 80039c4:	2bff      	cmp	r3, #255	; 0xff
 80039c6:	4619      	mov	r1, r3
 80039c8:	4620      	mov	r0, r4
 80039ca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039ce:	d0e2      	beq.n	8003996 <d_print_comp+0xdd2>
 80039d0:	461a      	mov	r2, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	e7ed      	b.n	80039b2 <d_print_comp+0xdee>
 80039d6:	4f6c      	ldr	r7, [pc, #432]	; (8003b88 <d_print_comp+0xfc4>)
 80039d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039dc:	f107 0808 	add.w	r8, r7, #8
 80039e0:	f04f 0900 	mov.w	r9, #0
 80039e4:	e016      	b.n	8003a14 <d_print_comp+0xe50>
 80039e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039f2:	4798      	blx	r3
 80039f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039f8:	3301      	adds	r3, #1
 80039fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039fe:	2200      	movs	r2, #0
 8003a00:	2301      	movs	r3, #1
 8003a02:	45b8      	cmp	r8, r7
 8003a04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a08:	f804 a002 	strb.w	sl, [r4, r2]
 8003a0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a10:	f000 86a6 	beq.w	8004760 <d_print_comp+0x1b9c>
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	4619      	mov	r1, r3
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003a1e:	d0e2      	beq.n	80039e6 <d_print_comp+0xe22>
 8003a20:	461a      	mov	r2, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	e7ed      	b.n	8003a02 <d_print_comp+0xe3e>
 8003a26:	4f59      	ldr	r7, [pc, #356]	; (8003b8c <d_print_comp+0xfc8>)
 8003a28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a2c:	f107 080b 	add.w	r8, r7, #11
 8003a30:	f04f 0900 	mov.w	r9, #0
 8003a34:	e016      	b.n	8003a64 <d_print_comp+0xea0>
 8003a36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a42:	4798      	blx	r3
 8003a44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2301      	movs	r3, #1
 8003a52:	45b8      	cmp	r8, r7
 8003a54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a58:	f804 a002 	strb.w	sl, [r4, r2]
 8003a5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a60:	f000 85cc 	beq.w	80045fc <d_print_comp+0x1a38>
 8003a64:	2bff      	cmp	r3, #255	; 0xff
 8003a66:	4619      	mov	r1, r3
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a6e:	d0e2      	beq.n	8003a36 <d_print_comp+0xe72>
 8003a70:	461a      	mov	r2, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	e7ed      	b.n	8003a52 <d_print_comp+0xe8e>
 8003a76:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a7a:	2fff      	cmp	r7, #255	; 0xff
 8003a7c:	d112      	bne.n	8003aa4 <d_print_comp+0xee0>
 8003a7e:	f04f 0800 	mov.w	r8, #0
 8003a82:	4639      	mov	r1, r7
 8003a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
 8003a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a98:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4647      	mov	r7, r8
 8003aa0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aa4:	237e      	movs	r3, #126	; 0x7e
 8003aa6:	1c7a      	adds	r2, r7, #1
 8003aa8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003aac:	55e3      	strb	r3, [r4, r7]
 8003aae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	68ea      	ldr	r2, [r5, #12]
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff f884 	bl	8002bc4 <d_print_comp>
 8003abc:	9905      	ldr	r1, [sp, #20]
 8003abe:	686a      	ldr	r2, [r5, #4]
 8003ac0:	f7ff b973 	b.w	8002daa <d_print_comp+0x1e6>
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	68ea      	ldr	r2, [r5, #12]
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff f87b 	bl	8002bc4 <d_print_comp>
 8003ace:	9905      	ldr	r1, [sp, #20]
 8003ad0:	686a      	ldr	r2, [r5, #4]
 8003ad2:	f7ff b96a 	b.w	8002daa <d_print_comp+0x1e6>
 8003ad6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003ada:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	f000 878b 	beq.w	80049fc <d_print_comp+0x1e38>
 8003ae6:	4e2a      	ldr	r6, [pc, #168]	; (8003b90 <d_print_comp+0xfcc>)
 8003ae8:	f04f 0900 	mov.w	r9, #0
 8003aec:	f106 0a06 	add.w	sl, r6, #6
 8003af0:	e015      	b.n	8003b1e <d_print_comp+0xf5a>
 8003af2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003af6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003afa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003afe:	4798      	blx	r3
 8003b00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b04:	3301      	adds	r3, #1
 8003b06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	45b2      	cmp	sl, r6
 8003b10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003b14:	54a7      	strb	r7, [r4, r2]
 8003b16:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b1a:	f000 868f 	beq.w	800483c <d_print_comp+0x1c78>
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	4619      	mov	r1, r3
 8003b22:	4620      	mov	r0, r4
 8003b24:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003b28:	d0e3      	beq.n	8003af2 <d_print_comp+0xf2e>
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	e7ee      	b.n	8003b0e <d_print_comp+0xf4a>
 8003b30:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 86d1 	bne.w	80048dc <d_print_comp+0x1d18>
 8003b3a:	f105 0108 	add.w	r1, r5, #8
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7fc fe4a 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8003b44:	4602      	mov	r2, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f001 8271 	beq.w	800502e <d_print_comp+0x246a>
 8003b4c:	7803      	ldrb	r3, [r0, #0]
 8003b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b50:	f001 8262 	beq.w	8005018 <d_print_comp+0x2454>
 8003b54:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff f82f 	bl	8002bc4 <d_print_comp>
 8003b66:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b6a:	9905      	ldr	r1, [sp, #20]
 8003b6c:	686a      	ldr	r2, [r5, #4]
 8003b6e:	f7ff b91c 	b.w	8002daa <d_print_comp+0x1e6>
 8003b72:	bf00      	nop
 8003b74:	080b3abf 	.word	0x080b3abf
 8003b78:	080b3aab 	.word	0x080b3aab
 8003b7c:	080b3a97 	.word	0x080b3a97
 8003b80:	080b3a88 	.word	0x080b3a88
 8003b84:	080b3a63 	.word	0x080b3a63
 8003b88:	080b3a57 	.word	0x080b3a57
 8003b8c:	080b3a4c 	.word	0x080b3a4c
 8003b90:	080b3c2c 	.word	0x080b3c2c
 8003b94:	2300      	movs	r3, #0
 8003b96:	0771      	lsls	r1, r6, #29
 8003b98:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b9c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003ba0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003ba4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003ba8:	68af      	ldr	r7, [r5, #8]
 8003baa:	d505      	bpl.n	8003bb8 <d_print_comp+0xff4>
 8003bac:	783b      	ldrb	r3, [r7, #0]
 8003bae:	b91b      	cbnz	r3, 8003bb8 <d_print_comp+0xff4>
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	2a06      	cmp	r2, #6
 8003bb4:	f001 8433 	beq.w	800541e <d_print_comp+0x285a>
 8003bb8:	463a      	mov	r2, r7
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff f801 	bl	8002bc4 <d_print_comp>
 8003bc2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8003bc8:	f001 8206 	beq.w	8004fd8 <d_print_comp+0x2414>
 8003bcc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003bd0:	2fff      	cmp	r7, #255	; 0xff
 8003bd2:	d112      	bne.n	8003bfa <d_print_comp+0x1036>
 8003bd4:	f04f 0a00 	mov.w	sl, #0
 8003bd8:	4639      	mov	r1, r7
 8003bda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bde:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003be6:	4620      	mov	r0, r4
 8003be8:	4798      	blx	r3
 8003bea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bee:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4657      	mov	r7, sl
 8003bf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bfa:	233c      	movs	r3, #60	; 0x3c
 8003bfc:	1c7a      	adds	r2, r7, #1
 8003bfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c02:	55e3      	strb	r3, [r4, r7]
 8003c04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c08:	4631      	mov	r1, r6
 8003c0a:	68ea      	ldr	r2, [r5, #12]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7fe ffd9 	bl	8002bc4 <d_print_comp>
 8003c12:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003c16:	2b3e      	cmp	r3, #62	; 0x3e
 8003c18:	f001 806f 	beq.w	8004cfa <d_print_comp+0x2136>
 8003c1c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c20:	2fff      	cmp	r7, #255	; 0xff
 8003c22:	d111      	bne.n	8003c48 <d_print_comp+0x1084>
 8003c24:	2600      	movs	r6, #0
 8003c26:	4639      	mov	r1, r7
 8003c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c2c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c34:	4620      	mov	r0, r4
 8003c36:	4798      	blx	r3
 8003c38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c3c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c40:	3301      	adds	r3, #1
 8003c42:	4637      	mov	r7, r6
 8003c44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c48:	233e      	movs	r3, #62	; 0x3e
 8003c4a:	1c7a      	adds	r2, r7, #1
 8003c4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c50:	55e3      	strb	r3, [r4, r7]
 8003c52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c56:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c5a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c5e:	9905      	ldr	r1, [sp, #20]
 8003c60:	686a      	ldr	r2, [r5, #4]
 8003c62:	f7ff b8a2 	b.w	8002daa <d_print_comp+0x1e6>
 8003c66:	4fda      	ldr	r7, [pc, #872]	; (8003fd0 <d_print_comp+0x140c>)
 8003c68:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c6c:	f107 0811 	add.w	r8, r7, #17
 8003c70:	f04f 0900 	mov.w	r9, #0
 8003c74:	e016      	b.n	8003ca4 <d_print_comp+0x10e0>
 8003c76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c7e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c82:	4798      	blx	r3
 8003c84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2301      	movs	r3, #1
 8003c92:	45b8      	cmp	r8, r7
 8003c94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c98:	f804 a002 	strb.w	sl, [r4, r2]
 8003c9c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ca0:	f000 84eb 	beq.w	800467a <d_print_comp+0x1ab6>
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cae:	d0e2      	beq.n	8003c76 <d_print_comp+0x10b2>
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	e7ed      	b.n	8003c92 <d_print_comp+0x10ce>
 8003cb6:	4fc7      	ldr	r7, [pc, #796]	; (8003fd4 <d_print_comp+0x1410>)
 8003cb8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cbc:	f107 0815 	add.w	r8, r7, #21
 8003cc0:	f04f 0900 	mov.w	r9, #0
 8003cc4:	e016      	b.n	8003cf4 <d_print_comp+0x1130>
 8003cc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cd2:	4798      	blx	r3
 8003cd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	45b8      	cmp	r8, r7
 8003ce4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ce8:	f804 a002 	strb.w	sl, [r4, r2]
 8003cec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cf0:	f000 84cc 	beq.w	800468c <d_print_comp+0x1ac8>
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cfe:	d0e2      	beq.n	8003cc6 <d_print_comp+0x1102>
 8003d00:	461a      	mov	r2, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	e7ed      	b.n	8003ce2 <d_print_comp+0x111e>
 8003d06:	4fb4      	ldr	r7, [pc, #720]	; (8003fd8 <d_print_comp+0x1414>)
 8003d08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d0c:	f107 0819 	add.w	r8, r7, #25
 8003d10:	f04f 0900 	mov.w	r9, #0
 8003d14:	e016      	b.n	8003d44 <d_print_comp+0x1180>
 8003d16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d22:	4798      	blx	r3
 8003d24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2301      	movs	r3, #1
 8003d32:	45b8      	cmp	r8, r7
 8003d34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d38:	f804 a002 	strb.w	sl, [r4, r2]
 8003d3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d40:	f000 8489 	beq.w	8004656 <d_print_comp+0x1a92>
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	4619      	mov	r1, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d4e:	d0e2      	beq.n	8003d16 <d_print_comp+0x1152>
 8003d50:	461a      	mov	r2, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	e7ed      	b.n	8003d32 <d_print_comp+0x116e>
 8003d56:	4fa1      	ldr	r7, [pc, #644]	; (8003fdc <d_print_comp+0x1418>)
 8003d58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d5c:	f107 0816 	add.w	r8, r7, #22
 8003d60:	f04f 0900 	mov.w	r9, #0
 8003d64:	e016      	b.n	8003d94 <d_print_comp+0x11d0>
 8003d66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d72:	4798      	blx	r3
 8003d74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2301      	movs	r3, #1
 8003d82:	45b8      	cmp	r8, r7
 8003d84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d88:	f804 a002 	strb.w	sl, [r4, r2]
 8003d8c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d90:	f000 846a 	beq.w	8004668 <d_print_comp+0x1aa4>
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	4619      	mov	r1, r3
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d9e:	d0e2      	beq.n	8003d66 <d_print_comp+0x11a2>
 8003da0:	461a      	mov	r2, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	e7ed      	b.n	8003d82 <d_print_comp+0x11be>
 8003da6:	4f8e      	ldr	r7, [pc, #568]	; (8003fe0 <d_print_comp+0x141c>)
 8003da8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dac:	f107 0813 	add.w	r8, r7, #19
 8003db0:	f04f 0900 	mov.w	r9, #0
 8003db4:	e016      	b.n	8003de4 <d_print_comp+0x1220>
 8003db6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dbe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dc2:	4798      	blx	r3
 8003dc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	45b8      	cmp	r8, r7
 8003dd4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003dd8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ddc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003de0:	f000 8427 	beq.w	8004632 <d_print_comp+0x1a6e>
 8003de4:	2bff      	cmp	r3, #255	; 0xff
 8003de6:	4619      	mov	r1, r3
 8003de8:	4620      	mov	r0, r4
 8003dea:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dee:	d0e2      	beq.n	8003db6 <d_print_comp+0x11f2>
 8003df0:	461a      	mov	r2, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	e7ed      	b.n	8003dd2 <d_print_comp+0x120e>
 8003df6:	4f7b      	ldr	r7, [pc, #492]	; (8003fe4 <d_print_comp+0x1420>)
 8003df8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dfc:	f107 080f 	add.w	r8, r7, #15
 8003e00:	f04f 0900 	mov.w	r9, #0
 8003e04:	e016      	b.n	8003e34 <d_print_comp+0x1270>
 8003e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e0e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e12:	4798      	blx	r3
 8003e14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2301      	movs	r3, #1
 8003e22:	45b8      	cmp	r8, r7
 8003e24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e28:	f804 a002 	strb.w	sl, [r4, r2]
 8003e2c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e30:	f000 8408 	beq.w	8004644 <d_print_comp+0x1a80>
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	4619      	mov	r1, r3
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e3e:	d0e2      	beq.n	8003e06 <d_print_comp+0x1242>
 8003e40:	461a      	mov	r2, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	e7ed      	b.n	8003e22 <d_print_comp+0x125e>
 8003e46:	4f68      	ldr	r7, [pc, #416]	; (8003fe8 <d_print_comp+0x1424>)
 8003e48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e4c:	f107 081a 	add.w	r8, r7, #26
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	e016      	b.n	8003e84 <d_print_comp+0x12c0>
 8003e56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e62:	4798      	blx	r3
 8003e64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2301      	movs	r3, #1
 8003e72:	45b8      	cmp	r8, r7
 8003e74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e78:	f804 a002 	strb.w	sl, [r4, r2]
 8003e7c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e80:	f000 83c5 	beq.w	800460e <d_print_comp+0x1a4a>
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	4619      	mov	r1, r3
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e8e:	d0e2      	beq.n	8003e56 <d_print_comp+0x1292>
 8003e90:	461a      	mov	r2, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	e7ed      	b.n	8003e72 <d_print_comp+0x12ae>
 8003e96:	4f55      	ldr	r7, [pc, #340]	; (8003fec <d_print_comp+0x1428>)
 8003e98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e9c:	f107 0811 	add.w	r8, r7, #17
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	e016      	b.n	8003ed4 <d_print_comp+0x1310>
 8003ea6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003eae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003eb2:	4798      	blx	r3
 8003eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	45b8      	cmp	r8, r7
 8003ec4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ec8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ecc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ed0:	f000 83a6 	beq.w	8004620 <d_print_comp+0x1a5c>
 8003ed4:	2bff      	cmp	r3, #255	; 0xff
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003ede:	d0e2      	beq.n	8003ea6 <d_print_comp+0x12e2>
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	e7ed      	b.n	8003ec2 <d_print_comp+0x12fe>
 8003ee6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eea:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	f040 85ae 	bne.w	8004a50 <d_print_comp+0x1e8c>
 8003ef4:	f899 2000 	ldrb.w	r2, [r9]
 8003ef8:	2a05      	cmp	r2, #5
 8003efa:	f001 8180 	beq.w	80051fe <d_print_comp+0x263a>
 8003efe:	f899 3000 	ldrb.w	r3, [r9]
 8003f02:	2b23      	cmp	r3, #35	; 0x23
 8003f04:	f000 85a0 	beq.w	8004a48 <d_print_comp+0x1e84>
 8003f08:	782a      	ldrb	r2, [r5, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	f000 859c 	beq.w	8004a48 <d_print_comp+0x1e84>
 8003f10:	2b24      	cmp	r3, #36	; 0x24
 8003f12:	f001 8162 	beq.w	80051da <d_print_comp+0x2616>
 8003f16:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f1a:	46a9      	mov	r9, r5
 8003f1c:	ab18      	add	r3, sp, #96	; 0x60
 8003f1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003f22:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003f26:	2100      	movs	r1, #0
 8003f28:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003f2c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f30:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f34:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f38:	e010      	b.n	8003f5c <d_print_comp+0x1398>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	ab18      	add	r3, sp, #96	; 0x60
 8003f3e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f42:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f46:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f4a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f56:	46a9      	mov	r9, r5
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d0eb      	beq.n	8003f34 <d_print_comp+0x1370>
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7fe fe30 	bl	8002bc4 <d_print_comp>
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	b923      	cbnz	r3, 8003f72 <d_print_comp+0x13ae>
 8003f68:	464a      	mov	r2, r9
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f001 fcbf 	bl	80058f0 <d_print_mod>
 8003f72:	9b08      	ldr	r3, [sp, #32]
 8003f74:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f78:	b10f      	cbz	r7, 8003f7e <d_print_comp+0x13ba>
 8003f7a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f7e:	9905      	ldr	r1, [sp, #20]
 8003f80:	686a      	ldr	r2, [r5, #4]
 8003f82:	f7fe bf12 	b.w	8002daa <d_print_comp+0x1e6>
 8003f86:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f8a:	4663      	mov	r3, ip
 8003f8c:	f1bc 0f00 	cmp.w	ip, #0
 8003f90:	d0c3      	beq.n	8003f1a <d_print_comp+0x1356>
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	b951      	cbnz	r1, 8003fac <d_print_comp+0x13e8>
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f9e:	f1be 0f02 	cmp.w	lr, #2
 8003fa2:	f201 80fc 	bhi.w	800519e <d_print_comp+0x25da>
 8003fa6:	4290      	cmp	r0, r2
 8003fa8:	f001 80f0 	beq.w	800518c <d_print_comp+0x25c8>
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ef      	bne.n	8003f92 <d_print_comp+0x13ce>
 8003fb2:	e7b2      	b.n	8003f1a <d_print_comp+0x1356>
 8003fb4:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	f43e aef6 	beq.w	8002daa <d_print_comp+0x1e6>
 8003fbe:	4437      	add	r7, r6
 8003fc0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003fc4:	3f01      	subs	r7, #1
 8003fc6:	3e01      	subs	r6, #1
 8003fc8:	f04f 0800 	mov.w	r8, #0
 8003fcc:	e027      	b.n	800401e <d_print_comp+0x145a>
 8003fce:	bf00      	nop
 8003fd0:	080b3b63 	.word	0x080b3b63
 8003fd4:	080b3b4b 	.word	0x080b3b4b
 8003fd8:	080b3b2f 	.word	0x080b3b2f
 8003fdc:	080b3b17 	.word	0x080b3b17
 8003fe0:	080b3b03 	.word	0x080b3b03
 8003fe4:	080b3af3 	.word	0x080b3af3
 8003fe8:	080b3ad7 	.word	0x080b3ad7
 8003fec:	080b3ac3 	.word	0x080b3ac3
 8003ff0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ff8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003ffc:	4798      	blx	r3
 8003ffe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004002:	3301      	adds	r3, #1
 8004004:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004008:	2200      	movs	r2, #0
 800400a:	2301      	movs	r3, #1
 800400c:	42b7      	cmp	r7, r6
 800400e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004012:	f804 9002 	strb.w	r9, [r4, r2]
 8004016:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800401a:	f000 83ce 	beq.w	80047ba <d_print_comp+0x1bf6>
 800401e:	2bff      	cmp	r3, #255	; 0xff
 8004020:	4619      	mov	r1, r3
 8004022:	4620      	mov	r0, r4
 8004024:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004028:	d0e2      	beq.n	8003ff0 <d_print_comp+0x142c>
 800402a:	461a      	mov	r2, r3
 800402c:	3301      	adds	r3, #1
 800402e:	e7ed      	b.n	800400c <d_print_comp+0x1448>
 8004030:	4631      	mov	r1, r6
 8004032:	68aa      	ldr	r2, [r5, #8]
 8004034:	4620      	mov	r0, r4
 8004036:	f7fe fdc5 	bl	8002bc4 <d_print_comp>
 800403a:	9905      	ldr	r1, [sp, #20]
 800403c:	686a      	ldr	r2, [r5, #4]
 800403e:	f7fe beb4 	b.w	8002daa <d_print_comp+0x1e6>
 8004042:	f016 0604 	ands.w	r6, r6, #4
 8004046:	68a8      	ldr	r0, [r5, #8]
 8004048:	f040 8505 	bne.w	8004a56 <d_print_comp+0x1e92>
 800404c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f43e aeaa 	beq.w	8002daa <d_print_comp+0x1e6>
 8004056:	eb07 0803 	add.w	r8, r7, r3
 800405a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800405e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004062:	3f01      	subs	r7, #1
 8004064:	46b1      	mov	r9, r6
 8004066:	e015      	b.n	8004094 <d_print_comp+0x14d0>
 8004068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800406c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004070:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004074:	4798      	blx	r3
 8004076:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800407a:	3301      	adds	r3, #1
 800407c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004080:	2200      	movs	r2, #0
 8004082:	2301      	movs	r3, #1
 8004084:	45b8      	cmp	r8, r7
 8004086:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800408a:	54a6      	strb	r6, [r4, r2]
 800408c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004090:	f000 8545 	beq.w	8004b1e <d_print_comp+0x1f5a>
 8004094:	2bff      	cmp	r3, #255	; 0xff
 8004096:	4619      	mov	r1, r3
 8004098:	4620      	mov	r0, r4
 800409a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800409e:	d0e3      	beq.n	8004068 <d_print_comp+0x14a4>
 80040a0:	461a      	mov	r2, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	e7ee      	b.n	8004084 <d_print_comp+0x14c0>
 80040a6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80040aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80040b6:	f1b8 0f00 	cmp.w	r8, #0
 80040ba:	d025      	beq.n	8004108 <d_print_comp+0x1544>
 80040bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	f10d 0920 	add.w	r9, sp, #32
 80040c6:	4623      	mov	r3, r4
 80040c8:	4617      	mov	r7, r2
 80040ca:	4644      	mov	r4, r8
 80040cc:	4692      	mov	sl, r2
 80040ce:	4649      	mov	r1, r9
 80040d0:	46ab      	mov	fp, r5
 80040d2:	4698      	mov	r8, r3
 80040d4:	7825      	ldrb	r5, [r4, #0]
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	600a      	str	r2, [r1, #0]
 80040da:	4628      	mov	r0, r5
 80040dc:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040e0:	60cb      	str	r3, [r1, #12]
 80040e2:	3701      	adds	r7, #1
 80040e4:	460a      	mov	r2, r1
 80040e6:	f7fc f97f 	bl	80003e8 <is_fnqual_component_type>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	f000 87c8 	beq.w	8005080 <d_print_comp+0x24bc>
 80040f0:	68a4      	ldr	r4, [r4, #8]
 80040f2:	2c00      	cmp	r4, #0
 80040f4:	f001 8057 	beq.w	80051a6 <d_print_comp+0x25e2>
 80040f8:	2f04      	cmp	r7, #4
 80040fa:	f101 0110 	add.w	r1, r1, #16
 80040fe:	d1e9      	bne.n	80040d4 <d_print_comp+0x1510>
 8004100:	4644      	mov	r4, r8
 8004102:	465d      	mov	r5, fp
 8004104:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 8004108:	2301      	movs	r3, #1
 800410a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800410e:	9905      	ldr	r1, [sp, #20]
 8004110:	686a      	ldr	r2, [r5, #4]
 8004112:	f7fe be4a 	b.w	8002daa <d_print_comp+0x1e6>
 8004116:	f016 0604 	ands.w	r6, r6, #4
 800411a:	68af      	ldr	r7, [r5, #8]
 800411c:	f040 8405 	bne.w	800492a <d_print_comp+0x1d66>
 8004120:	68eb      	ldr	r3, [r5, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f43e ae41 	beq.w	8002daa <d_print_comp+0x1e6>
 8004128:	eb07 0803 	add.w	r8, r7, r3
 800412c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004130:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004134:	3f01      	subs	r7, #1
 8004136:	46b1      	mov	r9, r6
 8004138:	e015      	b.n	8004166 <d_print_comp+0x15a2>
 800413a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800413e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004142:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004146:	4798      	blx	r3
 8004148:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800414c:	3301      	adds	r3, #1
 800414e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004152:	2200      	movs	r2, #0
 8004154:	2301      	movs	r3, #1
 8004156:	45b8      	cmp	r8, r7
 8004158:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800415c:	54a6      	strb	r6, [r4, r2]
 800415e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004162:	f000 84e0 	beq.w	8004b26 <d_print_comp+0x1f62>
 8004166:	2bff      	cmp	r3, #255	; 0xff
 8004168:	4619      	mov	r1, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004170:	d0e3      	beq.n	800413a <d_print_comp+0x1576>
 8004172:	461a      	mov	r2, r3
 8004174:	3301      	adds	r3, #1
 8004176:	e7ee      	b.n	8004156 <d_print_comp+0x1592>
 8004178:	68aa      	ldr	r2, [r5, #8]
 800417a:	4631      	mov	r1, r6
 800417c:	4620      	mov	r0, r4
 800417e:	f7fe fd21 	bl	8002bc4 <d_print_comp>
 8004182:	f016 0904 	ands.w	r9, r6, #4
 8004186:	f000 8681 	beq.w	8004e8c <d_print_comp+0x22c8>
 800418a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800418e:	2fff      	cmp	r7, #255	; 0xff
 8004190:	d112      	bne.n	80041b8 <d_print_comp+0x15f4>
 8004192:	f04f 0800 	mov.w	r8, #0
 8004196:	4639      	mov	r1, r7
 8004198:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800419c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80041a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041a4:	4620      	mov	r0, r4
 80041a6:	4798      	blx	r3
 80041a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80041b0:	3301      	adds	r3, #1
 80041b2:	4647      	mov	r7, r8
 80041b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041b8:	232e      	movs	r3, #46	; 0x2e
 80041ba:	1c7a      	adds	r2, r7, #1
 80041bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041c0:	55e3      	strb	r3, [r4, r7]
 80041c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041c6:	68ef      	ldr	r7, [r5, #12]
 80041c8:	783b      	ldrb	r3, [r7, #0]
 80041ca:	2b46      	cmp	r3, #70	; 0x46
 80041cc:	f000 873a 	beq.w	8005044 <d_print_comp+0x2480>
 80041d0:	463a      	mov	r2, r7
 80041d2:	4631      	mov	r1, r6
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fe fcf5 	bl	8002bc4 <d_print_comp>
 80041da:	9905      	ldr	r1, [sp, #20]
 80041dc:	686a      	ldr	r2, [r5, #4]
 80041de:	f7fe bde4 	b.w	8002daa <d_print_comp+0x1e6>
 80041e2:	2301      	movs	r3, #1
 80041e4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041e8:	686a      	ldr	r2, [r5, #4]
 80041ea:	f7fe bdde 	b.w	8002daa <d_print_comp+0x1e6>
 80041ee:	3701      	adds	r7, #1
 80041f0:	454f      	cmp	r7, r9
 80041f2:	f47e ae2b 	bne.w	8002e4c <d_print_comp+0x288>
 80041f6:	9d03      	ldr	r5, [sp, #12]
 80041f8:	9905      	ldr	r1, [sp, #20]
 80041fa:	686a      	ldr	r2, [r5, #4]
 80041fc:	f7fe bdd5 	b.w	8002daa <d_print_comp+0x1e6>
 8004200:	4631      	mov	r1, r6
 8004202:	68aa      	ldr	r2, [r5, #8]
 8004204:	4620      	mov	r0, r4
 8004206:	f7fe fcdd 	bl	8002bc4 <d_print_comp>
 800420a:	9905      	ldr	r1, [sp, #20]
 800420c:	686a      	ldr	r2, [r5, #4]
 800420e:	f7fe bdcc 	b.w	8002daa <d_print_comp+0x1e6>
 8004212:	4631      	mov	r1, r6
 8004214:	68aa      	ldr	r2, [r5, #8]
 8004216:	4620      	mov	r0, r4
 8004218:	f7fe fcd4 	bl	8002bc4 <d_print_comp>
 800421c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004220:	2fff      	cmp	r7, #255	; 0xff
 8004222:	d111      	bne.n	8004248 <d_print_comp+0x1684>
 8004224:	2600      	movs	r6, #0
 8004226:	4639      	mov	r1, r7
 8004228:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800422c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004230:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004234:	4620      	mov	r0, r4
 8004236:	4798      	blx	r3
 8004238:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800423c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004240:	3301      	adds	r3, #1
 8004242:	4637      	mov	r7, r6
 8004244:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004248:	1c7a      	adds	r2, r7, #1
 800424a:	2329      	movs	r3, #41	; 0x29
 800424c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004250:	55e3      	strb	r3, [r4, r7]
 8004252:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004256:	686a      	ldr	r2, [r5, #4]
 8004258:	9905      	ldr	r1, [sp, #20]
 800425a:	f7fe bda6 	b.w	8002daa <d_print_comp+0x1e6>
 800425e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004262:	68aa      	ldr	r2, [r5, #8]
 8004264:	4fd3      	ldr	r7, [pc, #844]	; (80045b4 <d_print_comp+0x19f0>)
 8004266:	3301      	adds	r3, #1
 8004268:	4631      	mov	r1, r6
 800426a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800426e:	4620      	mov	r0, r4
 8004270:	f7fe fca8 	bl	8002bc4 <d_print_comp>
 8004274:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004278:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800427c:	3a01      	subs	r2, #1
 800427e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004282:	1cbe      	adds	r6, r7, #2
 8004284:	f04f 0800 	mov.w	r8, #0
 8004288:	e015      	b.n	80042b6 <d_print_comp+0x16f2>
 800428a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800428e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004292:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004296:	4798      	blx	r3
 8004298:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800429c:	3301      	adds	r3, #1
 800429e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042a2:	2200      	movs	r2, #0
 80042a4:	2301      	movs	r3, #1
 80042a6:	42b7      	cmp	r7, r6
 80042a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042ac:	f804 9002 	strb.w	r9, [r4, r2]
 80042b0:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80042b4:	d011      	beq.n	80042da <d_print_comp+0x1716>
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	4619      	mov	r1, r3
 80042ba:	4620      	mov	r0, r4
 80042bc:	f817 9b01 	ldrb.w	r9, [r7], #1
 80042c0:	d0e3      	beq.n	800428a <d_print_comp+0x16c6>
 80042c2:	461a      	mov	r2, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	e7ee      	b.n	80042a6 <d_print_comp+0x16e2>
 80042c8:	4631      	mov	r1, r6
 80042ca:	68aa      	ldr	r2, [r5, #8]
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fe fc79 	bl	8002bc4 <d_print_comp>
 80042d2:	9905      	ldr	r1, [sp, #20]
 80042d4:	686a      	ldr	r2, [r5, #4]
 80042d6:	f7fe bd68 	b.w	8002daa <d_print_comp+0x1e6>
 80042da:	68ea      	ldr	r2, [r5, #12]
 80042dc:	49b6      	ldr	r1, [pc, #728]	; (80045b8 <d_print_comp+0x19f4>)
 80042de:	3201      	adds	r2, #1
 80042e0:	a808      	add	r0, sp, #32
 80042e2:	f025 f863 	bl	80293ac <sprintf>
 80042e6:	a808      	add	r0, sp, #32
 80042e8:	f002 fd5c 	bl	8006da4 <strlen>
 80042ec:	b328      	cbz	r0, 800433a <d_print_comp+0x1776>
 80042ee:	ae08      	add	r6, sp, #32
 80042f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042f4:	1837      	adds	r7, r6, r0
 80042f6:	f04f 0800 	mov.w	r8, #0
 80042fa:	e015      	b.n	8004328 <d_print_comp+0x1764>
 80042fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004304:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004308:	4798      	blx	r3
 800430a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800430e:	3301      	adds	r3, #1
 8004310:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004314:	2200      	movs	r2, #0
 8004316:	2301      	movs	r3, #1
 8004318:	42be      	cmp	r6, r7
 800431a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800431e:	f804 9002 	strb.w	r9, [r4, r2]
 8004322:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004326:	d00a      	beq.n	800433e <d_print_comp+0x177a>
 8004328:	2bff      	cmp	r3, #255	; 0xff
 800432a:	4619      	mov	r1, r3
 800432c:	4620      	mov	r0, r4
 800432e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004332:	d0e3      	beq.n	80042fc <d_print_comp+0x1738>
 8004334:	461a      	mov	r2, r3
 8004336:	3301      	adds	r3, #1
 8004338:	e7ee      	b.n	8004318 <d_print_comp+0x1754>
 800433a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800433e:	2bff      	cmp	r3, #255	; 0xff
 8004340:	d110      	bne.n	8004364 <d_print_comp+0x17a0>
 8004342:	2600      	movs	r6, #0
 8004344:	4619      	mov	r1, r3
 8004346:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800434a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800434e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004352:	4620      	mov	r0, r4
 8004354:	4798      	blx	r3
 8004356:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800435a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800435e:	3301      	adds	r3, #1
 8004360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004364:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004368:	9905      	ldr	r1, [sp, #20]
 800436a:	1c50      	adds	r0, r2, #1
 800436c:	237d      	movs	r3, #125	; 0x7d
 800436e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004372:	54a3      	strb	r3, [r4, r2]
 8004374:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004378:	686a      	ldr	r2, [r5, #4]
 800437a:	f7fe bd16 	b.w	8002daa <d_print_comp+0x1e6>
 800437e:	4631      	mov	r1, r6
 8004380:	68aa      	ldr	r2, [r5, #8]
 8004382:	4620      	mov	r0, r4
 8004384:	f7fe fc1e 	bl	8002bc4 <d_print_comp>
 8004388:	9905      	ldr	r1, [sp, #20]
 800438a:	686a      	ldr	r2, [r5, #4]
 800438c:	f7fe bd0d 	b.w	8002daa <d_print_comp+0x1e6>
 8004390:	68aa      	ldr	r2, [r5, #8]
 8004392:	4989      	ldr	r1, [pc, #548]	; (80045b8 <d_print_comp+0x19f4>)
 8004394:	3201      	adds	r2, #1
 8004396:	a808      	add	r0, sp, #32
 8004398:	f025 f808 	bl	80293ac <sprintf>
 800439c:	a808      	add	r0, sp, #32
 800439e:	f002 fd01 	bl	8006da4 <strlen>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d071      	beq.n	800448a <d_print_comp+0x18c6>
 80043a6:	ae08      	add	r6, sp, #32
 80043a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80043ac:	1837      	adds	r7, r6, r0
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	e015      	b.n	80043e0 <d_print_comp+0x181c>
 80043b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043c0:	4798      	blx	r3
 80043c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043c6:	3301      	adds	r3, #1
 80043c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043cc:	2200      	movs	r2, #0
 80043ce:	2301      	movs	r3, #1
 80043d0:	42b7      	cmp	r7, r6
 80043d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043d6:	f804 9002 	strb.w	r9, [r4, r2]
 80043da:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043de:	d056      	beq.n	800448e <d_print_comp+0x18ca>
 80043e0:	2bff      	cmp	r3, #255	; 0xff
 80043e2:	4619      	mov	r1, r3
 80043e4:	4620      	mov	r0, r4
 80043e6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043ea:	d0e3      	beq.n	80043b4 <d_print_comp+0x17f0>
 80043ec:	461a      	mov	r2, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	e7ee      	b.n	80043d0 <d_print_comp+0x180c>
 80043f2:	4631      	mov	r1, r6
 80043f4:	68ea      	ldr	r2, [r5, #12]
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fe fbe4 	bl	8002bc4 <d_print_comp>
 80043fc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004400:	2fff      	cmp	r7, #255	; 0xff
 8004402:	d111      	bne.n	8004428 <d_print_comp+0x1864>
 8004404:	2600      	movs	r6, #0
 8004406:	4639      	mov	r1, r7
 8004408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800440c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004414:	4620      	mov	r0, r4
 8004416:	4798      	blx	r3
 8004418:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800441c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004420:	3301      	adds	r3, #1
 8004422:	4637      	mov	r7, r6
 8004424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004428:	1c7a      	adds	r2, r7, #1
 800442a:	235d      	movs	r3, #93	; 0x5d
 800442c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004430:	55e3      	strb	r3, [r4, r7]
 8004432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004436:	686a      	ldr	r2, [r5, #4]
 8004438:	9905      	ldr	r1, [sp, #20]
 800443a:	f7fe bcb6 	b.w	8002daa <d_print_comp+0x1e6>
 800443e:	4631      	mov	r1, r6
 8004440:	68ea      	ldr	r2, [r5, #12]
 8004442:	4620      	mov	r0, r4
 8004444:	f7fe fbbe 	bl	8002bc4 <d_print_comp>
 8004448:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800444c:	2fff      	cmp	r7, #255	; 0xff
 800444e:	d111      	bne.n	8004474 <d_print_comp+0x18b0>
 8004450:	2600      	movs	r6, #0
 8004452:	4639      	mov	r1, r7
 8004454:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004458:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800445c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004460:	4620      	mov	r0, r4
 8004462:	4798      	blx	r3
 8004464:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004468:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800446c:	3301      	adds	r3, #1
 800446e:	4637      	mov	r7, r6
 8004470:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004474:	1c7a      	adds	r2, r7, #1
 8004476:	235d      	movs	r3, #93	; 0x5d
 8004478:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800447c:	55e3      	strb	r3, [r4, r7]
 800447e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004482:	686a      	ldr	r2, [r5, #4]
 8004484:	9905      	ldr	r1, [sp, #20]
 8004486:	f7fe bc90 	b.w	8002daa <d_print_comp+0x1e6>
 800448a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d110      	bne.n	80044b4 <d_print_comp+0x18f0>
 8004492:	2600      	movs	r6, #0
 8004494:	4619      	mov	r1, r3
 8004496:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800449a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800449e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044a2:	4620      	mov	r0, r4
 80044a4:	4798      	blx	r3
 80044a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044aa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80044ae:	3301      	adds	r3, #1
 80044b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044b4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80044b8:	9905      	ldr	r1, [sp, #20]
 80044ba:	1c50      	adds	r0, r2, #1
 80044bc:	237d      	movs	r3, #125	; 0x7d
 80044be:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80044c2:	54a3      	strb	r3, [r4, r2]
 80044c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044c8:	686a      	ldr	r2, [r5, #4]
 80044ca:	f7fe bc6e 	b.w	8002daa <d_print_comp+0x1e6>
 80044ce:	4631      	mov	r1, r6
 80044d0:	68aa      	ldr	r2, [r5, #8]
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7fe fb76 	bl	8002bc4 <d_print_comp>
 80044d8:	9905      	ldr	r1, [sp, #20]
 80044da:	686a      	ldr	r2, [r5, #4]
 80044dc:	f7fe bc65 	b.w	8002daa <d_print_comp+0x1e6>
 80044e0:	9905      	ldr	r1, [sp, #20]
 80044e2:	686a      	ldr	r2, [r5, #4]
 80044e4:	f7fe bc61 	b.w	8002daa <d_print_comp+0x1e6>
 80044e8:	4631      	mov	r1, r6
 80044ea:	68aa      	ldr	r2, [r5, #8]
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fe fb69 	bl	8002bc4 <d_print_comp>
 80044f2:	9905      	ldr	r1, [sp, #20]
 80044f4:	686a      	ldr	r2, [r5, #4]
 80044f6:	f7fe bc58 	b.w	8002daa <d_print_comp+0x1e6>
 80044fa:	4631      	mov	r1, r6
 80044fc:	68ea      	ldr	r2, [r5, #12]
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fe fb60 	bl	8002bc4 <d_print_comp>
 8004504:	9905      	ldr	r1, [sp, #20]
 8004506:	686a      	ldr	r2, [r5, #4]
 8004508:	f7fe bc4f 	b.w	8002daa <d_print_comp+0x1e6>
 800450c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004510:	b13a      	cbz	r2, 8004522 <d_print_comp+0x195e>
 8004512:	ab18      	add	r3, sp, #96	; 0x60
 8004514:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8004518:	f843 1d40 	str.w	r1, [r3, #-64]!
 800451c:	9209      	str	r2, [sp, #36]	; 0x24
 800451e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004522:	68aa      	ldr	r2, [r5, #8]
 8004524:	7813      	ldrb	r3, [r2, #0]
 8004526:	2b04      	cmp	r3, #4
 8004528:	f000 84d6 	beq.w	8004ed8 <d_print_comp+0x2314>
 800452c:	4631      	mov	r1, r6
 800452e:	4620      	mov	r0, r4
 8004530:	f7fe fb48 	bl	8002bc4 <d_print_comp>
 8004534:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004538:	b113      	cbz	r3, 8004540 <d_print_comp+0x197c>
 800453a:	9b08      	ldr	r3, [sp, #32]
 800453c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004540:	9905      	ldr	r1, [sp, #20]
 8004542:	686a      	ldr	r2, [r5, #4]
 8004544:	f7fe bc31 	b.w	8002daa <d_print_comp+0x1e6>
 8004548:	f8da 6004 	ldr.w	r6, [sl, #4]
 800454c:	7832      	ldrb	r2, [r6, #0]
 800454e:	3a61      	subs	r2, #97	; 0x61
 8004550:	2a19      	cmp	r2, #25
 8004552:	d81d      	bhi.n	8004590 <d_print_comp+0x19cc>
 8004554:	2bff      	cmp	r3, #255	; 0xff
 8004556:	d110      	bne.n	800457a <d_print_comp+0x19b6>
 8004558:	2600      	movs	r6, #0
 800455a:	4619      	mov	r1, r3
 800455c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004560:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004564:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004568:	4620      	mov	r0, r4
 800456a:	4798      	blx	r3
 800456c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004570:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004574:	3301      	adds	r3, #1
 8004576:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800457a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800457e:	2320      	movs	r3, #32
 8004580:	1c51      	adds	r1, r2, #1
 8004582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004586:	54a3      	strb	r3, [r4, r2]
 8004588:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800458c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004590:	19f3      	adds	r3, r6, r7
 8004592:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004596:	2b20      	cmp	r3, #32
 8004598:	bf08      	it	eq
 800459a:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 800459e:	2f00      	cmp	r7, #0
 80045a0:	f000 86fb 	beq.w	800539a <d_print_comp+0x27d6>
 80045a4:	3e01      	subs	r6, #1
 80045a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80045aa:	4437      	add	r7, r6
 80045ac:	f04f 0800 	mov.w	r8, #0
 80045b0:	e01b      	b.n	80045ea <d_print_comp+0x1a26>
 80045b2:	bf00      	nop
 80045b4:	080b3c80 	.word	0x080b3c80
 80045b8:	080b39d0 	.word	0x080b39d0
 80045bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045c8:	4798      	blx	r3
 80045ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045d4:	2200      	movs	r2, #0
 80045d6:	2301      	movs	r3, #1
 80045d8:	42be      	cmp	r6, r7
 80045da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80045de:	f804 9002 	strb.w	r9, [r4, r2]
 80045e2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045e6:	f000 80ec 	beq.w	80047c2 <d_print_comp+0x1bfe>
 80045ea:	2bff      	cmp	r3, #255	; 0xff
 80045ec:	4619      	mov	r1, r3
 80045ee:	4620      	mov	r0, r4
 80045f0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045f4:	d0e2      	beq.n	80045bc <d_print_comp+0x19f8>
 80045f6:	461a      	mov	r2, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	e7ed      	b.n	80045d8 <d_print_comp+0x1a14>
 80045fc:	4631      	mov	r1, r6
 80045fe:	68aa      	ldr	r2, [r5, #8]
 8004600:	4620      	mov	r0, r4
 8004602:	f7fe fadf 	bl	8002bc4 <d_print_comp>
 8004606:	9905      	ldr	r1, [sp, #20]
 8004608:	686a      	ldr	r2, [r5, #4]
 800460a:	f7fe bbce 	b.w	8002daa <d_print_comp+0x1e6>
 800460e:	4631      	mov	r1, r6
 8004610:	68aa      	ldr	r2, [r5, #8]
 8004612:	4620      	mov	r0, r4
 8004614:	f7fe fad6 	bl	8002bc4 <d_print_comp>
 8004618:	9905      	ldr	r1, [sp, #20]
 800461a:	686a      	ldr	r2, [r5, #4]
 800461c:	f7fe bbc5 	b.w	8002daa <d_print_comp+0x1e6>
 8004620:	4631      	mov	r1, r6
 8004622:	68aa      	ldr	r2, [r5, #8]
 8004624:	4620      	mov	r0, r4
 8004626:	f7fe facd 	bl	8002bc4 <d_print_comp>
 800462a:	9905      	ldr	r1, [sp, #20]
 800462c:	686a      	ldr	r2, [r5, #4]
 800462e:	f7fe bbbc 	b.w	8002daa <d_print_comp+0x1e6>
 8004632:	4631      	mov	r1, r6
 8004634:	68aa      	ldr	r2, [r5, #8]
 8004636:	4620      	mov	r0, r4
 8004638:	f7fe fac4 	bl	8002bc4 <d_print_comp>
 800463c:	9905      	ldr	r1, [sp, #20]
 800463e:	686a      	ldr	r2, [r5, #4]
 8004640:	f7fe bbb3 	b.w	8002daa <d_print_comp+0x1e6>
 8004644:	4631      	mov	r1, r6
 8004646:	68aa      	ldr	r2, [r5, #8]
 8004648:	4620      	mov	r0, r4
 800464a:	f7fe fabb 	bl	8002bc4 <d_print_comp>
 800464e:	9905      	ldr	r1, [sp, #20]
 8004650:	686a      	ldr	r2, [r5, #4]
 8004652:	f7fe bbaa 	b.w	8002daa <d_print_comp+0x1e6>
 8004656:	4631      	mov	r1, r6
 8004658:	68aa      	ldr	r2, [r5, #8]
 800465a:	4620      	mov	r0, r4
 800465c:	f7fe fab2 	bl	8002bc4 <d_print_comp>
 8004660:	9905      	ldr	r1, [sp, #20]
 8004662:	686a      	ldr	r2, [r5, #4]
 8004664:	f7fe bba1 	b.w	8002daa <d_print_comp+0x1e6>
 8004668:	4631      	mov	r1, r6
 800466a:	68aa      	ldr	r2, [r5, #8]
 800466c:	4620      	mov	r0, r4
 800466e:	f7fe faa9 	bl	8002bc4 <d_print_comp>
 8004672:	9905      	ldr	r1, [sp, #20]
 8004674:	686a      	ldr	r2, [r5, #4]
 8004676:	f7fe bb98 	b.w	8002daa <d_print_comp+0x1e6>
 800467a:	4631      	mov	r1, r6
 800467c:	68aa      	ldr	r2, [r5, #8]
 800467e:	4620      	mov	r0, r4
 8004680:	f7fe faa0 	bl	8002bc4 <d_print_comp>
 8004684:	9905      	ldr	r1, [sp, #20]
 8004686:	686a      	ldr	r2, [r5, #4]
 8004688:	f7fe bb8f 	b.w	8002daa <d_print_comp+0x1e6>
 800468c:	4fcf      	ldr	r7, [pc, #828]	; (80049cc <d_print_comp+0x1e08>)
 800468e:	68ea      	ldr	r2, [r5, #12]
 8004690:	4631      	mov	r1, r6
 8004692:	4620      	mov	r0, r4
 8004694:	f7fe fa96 	bl	8002bc4 <d_print_comp>
 8004698:	f107 0805 	add.w	r8, r7, #5
 800469c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046a0:	f04f 0900 	mov.w	r9, #0
 80046a4:	e015      	b.n	80046d2 <d_print_comp+0x1b0e>
 80046a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046b2:	4798      	blx	r3
 80046b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80046b8:	3301      	adds	r3, #1
 80046ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80046be:	2200      	movs	r2, #0
 80046c0:	2301      	movs	r3, #1
 80046c2:	4547      	cmp	r7, r8
 80046c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046c8:	f804 a002 	strb.w	sl, [r4, r2]
 80046cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046d0:	d008      	beq.n	80046e4 <d_print_comp+0x1b20>
 80046d2:	2bff      	cmp	r3, #255	; 0xff
 80046d4:	4619      	mov	r1, r3
 80046d6:	4620      	mov	r0, r4
 80046d8:	f817 ab01 	ldrb.w	sl, [r7], #1
 80046dc:	d0e3      	beq.n	80046a6 <d_print_comp+0x1ae2>
 80046de:	461a      	mov	r2, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	e7ee      	b.n	80046c2 <d_print_comp+0x1afe>
 80046e4:	4631      	mov	r1, r6
 80046e6:	68aa      	ldr	r2, [r5, #8]
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7fe fa6b 	bl	8002bc4 <d_print_comp>
 80046ee:	9905      	ldr	r1, [sp, #20]
 80046f0:	686a      	ldr	r2, [r5, #4]
 80046f2:	f7fe bb5a 	b.w	8002daa <d_print_comp+0x1e6>
 80046f6:	4fb6      	ldr	r7, [pc, #728]	; (80049d0 <d_print_comp+0x1e0c>)
 80046f8:	68aa      	ldr	r2, [r5, #8]
 80046fa:	4631      	mov	r1, r6
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7fe fa61 	bl	8002bc4 <d_print_comp>
 8004702:	f107 0804 	add.w	r8, r7, #4
 8004706:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800470a:	f04f 0900 	mov.w	r9, #0
 800470e:	e015      	b.n	800473c <d_print_comp+0x1b78>
 8004710:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004714:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004718:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800471c:	4798      	blx	r3
 800471e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004722:	3301      	adds	r3, #1
 8004724:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004728:	2200      	movs	r2, #0
 800472a:	2301      	movs	r3, #1
 800472c:	45b8      	cmp	r8, r7
 800472e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004732:	f804 a002 	strb.w	sl, [r4, r2]
 8004736:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800473a:	d008      	beq.n	800474e <d_print_comp+0x1b8a>
 800473c:	2bff      	cmp	r3, #255	; 0xff
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004746:	d0e3      	beq.n	8004710 <d_print_comp+0x1b4c>
 8004748:	461a      	mov	r2, r3
 800474a:	3301      	adds	r3, #1
 800474c:	e7ee      	b.n	800472c <d_print_comp+0x1b68>
 800474e:	4631      	mov	r1, r6
 8004750:	68ea      	ldr	r2, [r5, #12]
 8004752:	4620      	mov	r0, r4
 8004754:	f7fe fa36 	bl	8002bc4 <d_print_comp>
 8004758:	9905      	ldr	r1, [sp, #20]
 800475a:	686a      	ldr	r2, [r5, #4]
 800475c:	f7fe bb25 	b.w	8002daa <d_print_comp+0x1e6>
 8004760:	4631      	mov	r1, r6
 8004762:	68aa      	ldr	r2, [r5, #8]
 8004764:	4620      	mov	r0, r4
 8004766:	f7fe fa2d 	bl	8002bc4 <d_print_comp>
 800476a:	9905      	ldr	r1, [sp, #20]
 800476c:	686a      	ldr	r2, [r5, #4]
 800476e:	f7fe bb1c 	b.w	8002daa <d_print_comp+0x1e6>
 8004772:	4631      	mov	r1, r6
 8004774:	68aa      	ldr	r2, [r5, #8]
 8004776:	4620      	mov	r0, r4
 8004778:	f7fe fa24 	bl	8002bc4 <d_print_comp>
 800477c:	9905      	ldr	r1, [sp, #20]
 800477e:	686a      	ldr	r2, [r5, #4]
 8004780:	f7fe bb13 	b.w	8002daa <d_print_comp+0x1e6>
 8004784:	4631      	mov	r1, r6
 8004786:	68aa      	ldr	r2, [r5, #8]
 8004788:	4620      	mov	r0, r4
 800478a:	f7fe fa1b 	bl	8002bc4 <d_print_comp>
 800478e:	9905      	ldr	r1, [sp, #20]
 8004790:	686a      	ldr	r2, [r5, #4]
 8004792:	f7fe bb0a 	b.w	8002daa <d_print_comp+0x1e6>
 8004796:	4631      	mov	r1, r6
 8004798:	68aa      	ldr	r2, [r5, #8]
 800479a:	4620      	mov	r0, r4
 800479c:	f7fe fa12 	bl	8002bc4 <d_print_comp>
 80047a0:	9905      	ldr	r1, [sp, #20]
 80047a2:	686a      	ldr	r2, [r5, #4]
 80047a4:	f7fe bb01 	b.w	8002daa <d_print_comp+0x1e6>
 80047a8:	4631      	mov	r1, r6
 80047aa:	68aa      	ldr	r2, [r5, #8]
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7fe fa09 	bl	8002bc4 <d_print_comp>
 80047b2:	9905      	ldr	r1, [sp, #20]
 80047b4:	686a      	ldr	r2, [r5, #4]
 80047b6:	f7fe baf8 	b.w	8002daa <d_print_comp+0x1e6>
 80047ba:	9905      	ldr	r1, [sp, #20]
 80047bc:	686a      	ldr	r2, [r5, #4]
 80047be:	f7fe baf4 	b.w	8002daa <d_print_comp+0x1e6>
 80047c2:	9905      	ldr	r1, [sp, #20]
 80047c4:	686a      	ldr	r2, [r5, #4]
 80047c6:	f7fe baf0 	b.w	8002daa <d_print_comp+0x1e6>
 80047ca:	4631      	mov	r1, r6
 80047cc:	68ea      	ldr	r2, [r5, #12]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	4620      	mov	r0, r4
 80047d2:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 80047d6:	f7fe f9f5 	bl	8002bc4 <d_print_comp>
 80047da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	4296      	cmp	r6, r2
 80047e2:	f000 8441 	beq.w	8005068 <d_print_comp+0x24a4>
 80047e6:	9905      	ldr	r1, [sp, #20]
 80047e8:	686a      	ldr	r2, [r5, #4]
 80047ea:	f7fe bade 	b.w	8002daa <d_print_comp+0x1e6>
 80047ee:	4e79      	ldr	r6, [pc, #484]	; (80049d4 <d_print_comp+0x1e10>)
 80047f0:	4690      	mov	r8, r2
 80047f2:	f106 0906 	add.w	r9, r6, #6
 80047f6:	e014      	b.n	8004822 <d_print_comp+0x1c5e>
 80047f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004800:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004804:	4798      	blx	r3
 8004806:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800480a:	3301      	adds	r3, #1
 800480c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004810:	2200      	movs	r2, #0
 8004812:	2301      	movs	r3, #1
 8004814:	45b1      	cmp	r9, r6
 8004816:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800481a:	54a7      	strb	r7, [r4, r2]
 800481c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004820:	d008      	beq.n	8004834 <d_print_comp+0x1c70>
 8004822:	2bff      	cmp	r3, #255	; 0xff
 8004824:	4619      	mov	r1, r3
 8004826:	4620      	mov	r0, r4
 8004828:	f816 7b01 	ldrb.w	r7, [r6], #1
 800482c:	d0e4      	beq.n	80047f8 <d_print_comp+0x1c34>
 800482e:	461a      	mov	r2, r3
 8004830:	3301      	adds	r3, #1
 8004832:	e7ef      	b.n	8004814 <d_print_comp+0x1c50>
 8004834:	9905      	ldr	r1, [sp, #20]
 8004836:	686a      	ldr	r2, [r5, #4]
 8004838:	f7fe bab7 	b.w	8002daa <d_print_comp+0x1e6>
 800483c:	4642      	mov	r2, r8
 800483e:	a808      	add	r0, sp, #32
 8004840:	4965      	ldr	r1, [pc, #404]	; (80049d8 <d_print_comp+0x1e14>)
 8004842:	f024 fdb3 	bl	80293ac <sprintf>
 8004846:	a808      	add	r0, sp, #32
 8004848:	f002 faac 	bl	8006da4 <strlen>
 800484c:	b328      	cbz	r0, 800489a <d_print_comp+0x1cd6>
 800484e:	ae08      	add	r6, sp, #32
 8004850:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004854:	eb06 0900 	add.w	r9, r6, r0
 8004858:	f04f 0800 	mov.w	r8, #0
 800485c:	e014      	b.n	8004888 <d_print_comp+0x1cc4>
 800485e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004862:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004866:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800486a:	4798      	blx	r3
 800486c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004870:	3301      	adds	r3, #1
 8004872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004876:	2200      	movs	r2, #0
 8004878:	2301      	movs	r3, #1
 800487a:	45b1      	cmp	r9, r6
 800487c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004880:	54a7      	strb	r7, [r4, r2]
 8004882:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004886:	d008      	beq.n	800489a <d_print_comp+0x1cd6>
 8004888:	2bff      	cmp	r3, #255	; 0xff
 800488a:	4619      	mov	r1, r3
 800488c:	4620      	mov	r0, r4
 800488e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004892:	d0e4      	beq.n	800485e <d_print_comp+0x1c9a>
 8004894:	461a      	mov	r2, r3
 8004896:	3301      	adds	r3, #1
 8004898:	e7ef      	b.n	800487a <d_print_comp+0x1cb6>
 800489a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800489e:	2fff      	cmp	r7, #255	; 0xff
 80048a0:	d111      	bne.n	80048c6 <d_print_comp+0x1d02>
 80048a2:	2600      	movs	r6, #0
 80048a4:	4639      	mov	r1, r7
 80048a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048aa:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048b2:	4620      	mov	r0, r4
 80048b4:	4798      	blx	r3
 80048b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ba:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80048be:	3301      	adds	r3, #1
 80048c0:	4637      	mov	r7, r6
 80048c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048c6:	1c7a      	adds	r2, r7, #1
 80048c8:	237d      	movs	r3, #125	; 0x7d
 80048ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048ce:	55e3      	strb	r3, [r4, r7]
 80048d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048d4:	686a      	ldr	r2, [r5, #4]
 80048d6:	9905      	ldr	r1, [sp, #20]
 80048d8:	f7fe ba67 	b.w	8002daa <d_print_comp+0x1e6>
 80048dc:	4e3f      	ldr	r6, [pc, #252]	; (80049dc <d_print_comp+0x1e18>)
 80048de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048e2:	f106 0905 	add.w	r9, r6, #5
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	e015      	b.n	8004918 <d_print_comp+0x1d54>
 80048ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048f8:	4798      	blx	r3
 80048fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048fe:	3301      	adds	r3, #1
 8004900:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004904:	2200      	movs	r2, #0
 8004906:	2301      	movs	r3, #1
 8004908:	45b1      	cmp	r9, r6
 800490a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800490e:	54a7      	strb	r7, [r4, r2]
 8004910:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004914:	f000 80cf 	beq.w	8004ab6 <d_print_comp+0x1ef2>
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	4619      	mov	r1, r3
 800491c:	4620      	mov	r0, r4
 800491e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004922:	d0e3      	beq.n	80048ec <d_print_comp+0x1d28>
 8004924:	461a      	mov	r2, r3
 8004926:	3301      	adds	r3, #1
 8004928:	e7ee      	b.n	8004908 <d_print_comp+0x1d44>
 800492a:	68ee      	ldr	r6, [r5, #12]
 800492c:	443e      	add	r6, r7
 800492e:	42be      	cmp	r6, r7
 8004930:	f67e aa3b 	bls.w	8002daa <d_print_comp+0x1e6>
 8004934:	f04f 0800 	mov.w	r8, #0
 8004938:	e018      	b.n	800496c <d_print_comp+0x1da8>
 800493a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800493e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004942:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004946:	4620      	mov	r0, r4
 8004948:	4798      	blx	r3
 800494a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800494e:	3301      	adds	r3, #1
 8004950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004954:	2100      	movs	r1, #0
 8004956:	2301      	movs	r3, #1
 8004958:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800495c:	f804 9001 	strb.w	r9, [r4, r1]
 8004960:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004964:	3701      	adds	r7, #1
 8004966:	42be      	cmp	r6, r7
 8004968:	f240 80e1 	bls.w	8004b2e <d_print_comp+0x1f6a>
 800496c:	1bf3      	subs	r3, r6, r7
 800496e:	2b03      	cmp	r3, #3
 8004970:	f897 9000 	ldrb.w	r9, [r7]
 8004974:	dd02      	ble.n	800497c <d_print_comp+0x1db8>
 8004976:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800497a:	d005      	beq.n	8004988 <d_print_comp+0x1dc4>
 800497c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004980:	29ff      	cmp	r1, #255	; 0xff
 8004982:	d0da      	beq.n	800493a <d_print_comp+0x1d76>
 8004984:	1c4b      	adds	r3, r1, #1
 8004986:	e7e7      	b.n	8004958 <d_print_comp+0x1d94>
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b5f      	cmp	r3, #95	; 0x5f
 800498c:	d1f6      	bne.n	800497c <d_print_comp+0x1db8>
 800498e:	78bb      	ldrb	r3, [r7, #2]
 8004990:	2b55      	cmp	r3, #85	; 0x55
 8004992:	d1f3      	bne.n	800497c <d_print_comp+0x1db8>
 8004994:	1cf9      	adds	r1, r7, #3
 8004996:	2000      	movs	r0, #0
 8004998:	e002      	b.n	80049a0 <d_print_comp+0x1ddc>
 800499a:	4613      	mov	r3, r2
 800499c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80049a0:	428e      	cmp	r6, r1
 80049a2:	468a      	mov	sl, r1
 80049a4:	d9ea      	bls.n	800497c <d_print_comp+0x1db8>
 80049a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80049ae:	fa5f fe82 	uxtb.w	lr, r2
 80049b2:	f1be 0f09 	cmp.w	lr, #9
 80049b6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80049ba:	d9ee      	bls.n	800499a <d_print_comp+0x1dd6>
 80049bc:	f1bc 0f05 	cmp.w	ip, #5
 80049c0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049c4:	f200 85c7 	bhi.w	8005556 <d_print_comp+0x2992>
 80049c8:	3b37      	subs	r3, #55	; 0x37
 80049ca:	e7e7      	b.n	800499c <d_print_comp+0x1dd8>
 80049cc:	080b3b44 	.word	0x080b3b44
 80049d0:	080b3a80 	.word	0x080b3a80
 80049d4:	080b3ba4 	.word	0x080b3ba4
 80049d8:	080b39d0 	.word	0x080b39d0
 80049dc:	080b3a44 	.word	0x080b3a44
 80049e0:	9905      	ldr	r1, [sp, #20]
 80049e2:	686a      	ldr	r2, [r5, #4]
 80049e4:	f7fe b9e1 	b.w	8002daa <d_print_comp+0x1e6>
 80049e8:	68aa      	ldr	r2, [r5, #8]
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	4619      	mov	r1, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f47e aa26 	bne.w	8002e40 <d_print_comp+0x27c>
 80049f4:	9905      	ldr	r1, [sp, #20]
 80049f6:	686a      	ldr	r2, [r5, #4]
 80049f8:	f7fe b9d7 	b.w	8002daa <d_print_comp+0x1e6>
 80049fc:	4ece      	ldr	r6, [pc, #824]	; (8004d38 <d_print_comp+0x2174>)
 80049fe:	f106 0904 	add.w	r9, r6, #4
 8004a02:	e014      	b.n	8004a2e <d_print_comp+0x1e6a>
 8004a04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004a10:	4798      	blx	r3
 8004a12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a16:	3301      	adds	r3, #1
 8004a18:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2301      	movs	r3, #1
 8004a20:	45b1      	cmp	r9, r6
 8004a22:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a26:	54a7      	strb	r7, [r4, r2]
 8004a28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004a2c:	d008      	beq.n	8004a40 <d_print_comp+0x1e7c>
 8004a2e:	2bff      	cmp	r3, #255	; 0xff
 8004a30:	4619      	mov	r1, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a38:	d0e4      	beq.n	8004a04 <d_print_comp+0x1e40>
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e7ef      	b.n	8004a20 <d_print_comp+0x1e5c>
 8004a40:	9905      	ldr	r1, [sp, #20]
 8004a42:	686a      	ldr	r2, [r5, #4]
 8004a44:	f7fe b9b1 	b.w	8002daa <d_print_comp+0x1e6>
 8004a48:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a4c:	f7ff ba66 	b.w	8003f1c <d_print_comp+0x1358>
 8004a50:	2700      	movs	r7, #0
 8004a52:	f7ff ba54 	b.w	8003efe <d_print_comp+0x133a>
 8004a56:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	f43e a9a5 	beq.w	8002daa <d_print_comp+0x1e6>
 8004a60:	4437      	add	r7, r6
 8004a62:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a66:	3f01      	subs	r7, #1
 8004a68:	3e01      	subs	r6, #1
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	e015      	b.n	8004a9c <d_print_comp+0x1ed8>
 8004a70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a7c:	4798      	blx	r3
 8004a7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a82:	3301      	adds	r3, #1
 8004a84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	42b7      	cmp	r7, r6
 8004a8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a92:	f804 8002 	strb.w	r8, [r4, r2]
 8004a96:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a9a:	d008      	beq.n	8004aae <d_print_comp+0x1eea>
 8004a9c:	2bff      	cmp	r3, #255	; 0xff
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004aa6:	d0e3      	beq.n	8004a70 <d_print_comp+0x1eac>
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	e7ee      	b.n	8004a8c <d_print_comp+0x1ec8>
 8004aae:	9905      	ldr	r1, [sp, #20]
 8004ab0:	686a      	ldr	r2, [r5, #4]
 8004ab2:	f7fe b97a 	b.w	8002daa <d_print_comp+0x1e6>
 8004ab6:	68aa      	ldr	r2, [r5, #8]
 8004ab8:	49a0      	ldr	r1, [pc, #640]	; (8004d3c <d_print_comp+0x2178>)
 8004aba:	3201      	adds	r2, #1
 8004abc:	a808      	add	r0, sp, #32
 8004abe:	f024 fc75 	bl	80293ac <sprintf>
 8004ac2:	a808      	add	r0, sp, #32
 8004ac4:	f002 f96e 	bl	8006da4 <strlen>
 8004ac8:	b328      	cbz	r0, 8004b16 <d_print_comp+0x1f52>
 8004aca:	ae08      	add	r6, sp, #32
 8004acc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004ad0:	eb06 0900 	add.w	r9, r6, r0
 8004ad4:	f04f 0800 	mov.w	r8, #0
 8004ad8:	e014      	b.n	8004b04 <d_print_comp+0x1f40>
 8004ada:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ade:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ae2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ae6:	4798      	blx	r3
 8004ae8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aec:	3301      	adds	r3, #1
 8004aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004af2:	2200      	movs	r2, #0
 8004af4:	2301      	movs	r3, #1
 8004af6:	45b1      	cmp	r9, r6
 8004af8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004afc:	54a7      	strb	r7, [r4, r2]
 8004afe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004b02:	d008      	beq.n	8004b16 <d_print_comp+0x1f52>
 8004b04:	2bff      	cmp	r3, #255	; 0xff
 8004b06:	4619      	mov	r1, r3
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004b0e:	d0e4      	beq.n	8004ada <d_print_comp+0x1f16>
 8004b10:	461a      	mov	r2, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	e7ef      	b.n	8004af6 <d_print_comp+0x1f32>
 8004b16:	9905      	ldr	r1, [sp, #20]
 8004b18:	686a      	ldr	r2, [r5, #4]
 8004b1a:	f7fe b946 	b.w	8002daa <d_print_comp+0x1e6>
 8004b1e:	9905      	ldr	r1, [sp, #20]
 8004b20:	686a      	ldr	r2, [r5, #4]
 8004b22:	f7fe b942 	b.w	8002daa <d_print_comp+0x1e6>
 8004b26:	9905      	ldr	r1, [sp, #20]
 8004b28:	686a      	ldr	r2, [r5, #4]
 8004b2a:	f7fe b93e 	b.w	8002daa <d_print_comp+0x1e6>
 8004b2e:	9905      	ldr	r1, [sp, #20]
 8004b30:	686a      	ldr	r2, [r5, #4]
 8004b32:	f7fe b93a 	b.w	8002daa <d_print_comp+0x1e6>
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b3c:	f47e abf6 	bne.w	800332c <d_print_comp+0x768>
 8004b40:	f105 030c 	add.w	r3, r5, #12
 8004b44:	68aa      	ldr	r2, [r5, #8]
 8004b46:	4631      	mov	r1, r6
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 fd95 	bl	8006678 <d_maybe_print_fold_expression.isra.20>
 8004b4e:	4680      	mov	r8, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	f040 86a0 	bne.w	8005896 <d_print_comp+0x2cd2>
 8004b56:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68d3      	ldr	r3, [r2, #12]
 8004b5e:	6808      	ldr	r0, [r1, #0]
 8004b60:	4977      	ldr	r1, [pc, #476]	; (8004d40 <d_print_comp+0x217c>)
 8004b62:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b66:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b6a:	f002 f911 	bl	8006d90 <strcmp>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f000 8674 	beq.w	800585c <d_print_comp+0x2c98>
 8004b74:	2204      	movs	r2, #4
 8004b76:	4973      	ldr	r1, [pc, #460]	; (8004d44 <d_print_comp+0x2180>)
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7fb fbff 	bl	800037c <d_append_buffer>
 8004b7e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b82:	b303      	cbz	r3, 8004bc6 <d_print_comp+0x2002>
 8004b84:	465a      	mov	r2, fp
 8004b86:	4631      	mov	r1, r6
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f001 fd23 	bl	80065d4 <d_print_subexpr>
 8004b8e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b92:	2fff      	cmp	r7, #255	; 0xff
 8004b94:	d110      	bne.n	8004bb8 <d_print_comp+0x1ff4>
 8004b96:	4639      	mov	r1, r7
 8004b98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b9c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ba0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4798      	blx	r3
 8004ba8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	4647      	mov	r7, r8
 8004bb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004bb8:	2320      	movs	r3, #32
 8004bba:	1c7a      	adds	r2, r7, #1
 8004bbc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004bc0:	55e3      	strb	r3, [r4, r7]
 8004bc2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fd fffa 	bl	8002bc4 <d_print_comp>
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	f000 8663 	beq.w	800589e <d_print_comp+0x2cda>
 8004bd8:	464a      	mov	r2, r9
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 fcf9 	bl	80065d4 <d_print_subexpr>
 8004be2:	9905      	ldr	r1, [sp, #20]
 8004be4:	686a      	ldr	r2, [r5, #4]
 8004be6:	f7fe b8e0 	b.w	8002daa <d_print_comp+0x1e6>
 8004bea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bee:	4956      	ldr	r1, [pc, #344]	; (8004d48 <d_print_comp+0x2184>)
 8004bf0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	f002 f8cb 	bl	8006d90 <strcmp>
 8004bfa:	f898 3000 	ldrb.w	r3, [r8]
 8004bfe:	b910      	cbnz	r0, 8004c06 <d_print_comp+0x2042>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	f000 852b 	beq.w	800565c <d_print_comp+0x2a98>
 8004c06:	2b38      	cmp	r3, #56	; 0x38
 8004c08:	f000 850c 	beq.w	8005624 <d_print_comp+0x2a60>
 8004c0c:	494f      	ldr	r1, [pc, #316]	; (8004d4c <d_print_comp+0x2188>)
 8004c0e:	4650      	mov	r0, sl
 8004c10:	f002 f8be 	bl	8006d90 <strcmp>
 8004c14:	4607      	mov	r7, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f000 8513 	beq.w	8005642 <d_print_comp+0x2a7e>
 8004c1c:	494c      	ldr	r1, [pc, #304]	; (8004d50 <d_print_comp+0x218c>)
 8004c1e:	4650      	mov	r0, sl
 8004c20:	f002 f8b6 	bl	8006d90 <strcmp>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f000 8333 	beq.w	8005290 <d_print_comp+0x26cc>
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	464a      	mov	r2, r9
 8004c30:	f001 fc90 	bl	8006554 <d_print_expr_op>
 8004c34:	4947      	ldr	r1, [pc, #284]	; (8004d54 <d_print_comp+0x2190>)
 8004c36:	4650      	mov	r0, sl
 8004c38:	f002 f8aa 	bl	8006d90 <strcmp>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f000 83b0 	beq.w	80053a2 <d_print_comp+0x27de>
 8004c42:	4650      	mov	r0, sl
 8004c44:	4944      	ldr	r1, [pc, #272]	; (8004d58 <d_print_comp+0x2194>)
 8004c46:	f002 f8a3 	bl	8006d90 <strcmp>
 8004c4a:	4681      	mov	r9, r0
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47e abd7 	bne.w	8003400 <d_print_comp+0x83c>
 8004c52:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c56:	2fff      	cmp	r7, #255	; 0xff
 8004c58:	d110      	bne.n	8004c7c <d_print_comp+0x20b8>
 8004c5a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4798      	blx	r3
 8004c6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c70:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c74:	3301      	adds	r3, #1
 8004c76:	464f      	mov	r7, r9
 8004c78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c7c:	1c78      	adds	r0, r7, #1
 8004c7e:	2328      	movs	r3, #40	; 0x28
 8004c80:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c84:	4642      	mov	r2, r8
 8004c86:	55e3      	strb	r3, [r4, r7]
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c90:	f7fd ff98 	bl	8002bc4 <d_print_comp>
 8004c94:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c98:	2fff      	cmp	r7, #255	; 0xff
 8004c9a:	d111      	bne.n	8004cc0 <d_print_comp+0x20fc>
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ca4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cac:	4620      	mov	r0, r4
 8004cae:	4798      	blx	r3
 8004cb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cb4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cb8:	3301      	adds	r3, #1
 8004cba:	4637      	mov	r7, r6
 8004cbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cc0:	1c7a      	adds	r2, r7, #1
 8004cc2:	2329      	movs	r3, #41	; 0x29
 8004cc4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cc8:	55e3      	strb	r3, [r4, r7]
 8004cca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cce:	686a      	ldr	r2, [r5, #4]
 8004cd0:	9905      	ldr	r1, [sp, #20]
 8004cd2:	f7fe b86a 	b.w	8002daa <d_print_comp+0x1e6>
 8004cd6:	f105 020c 	add.w	r2, r5, #12
 8004cda:	4641      	mov	r1, r8
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f001 f935 	bl	8005f4c <d_print_function_type.isra.15>
 8004ce2:	68aa      	ldr	r2, [r5, #8]
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	f000 83fd 	beq.w	80054e4 <d_print_comp+0x2920>
 8004cea:	4641      	mov	r1, r8
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fd ff69 	bl	8002bc4 <d_print_comp>
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	686a      	ldr	r2, [r5, #4]
 8004cf6:	f7fe b858 	b.w	8002daa <d_print_comp+0x1e6>
 8004cfa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cfe:	2fff      	cmp	r7, #255	; 0xff
 8004d00:	d111      	bne.n	8004d26 <d_print_comp+0x2162>
 8004d02:	2600      	movs	r6, #0
 8004d04:	4639      	mov	r1, r7
 8004d06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004d0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d12:	4620      	mov	r0, r4
 8004d14:	4798      	blx	r3
 8004d16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4637      	mov	r7, r6
 8004d22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d26:	2320      	movs	r3, #32
 8004d28:	1c7a      	adds	r2, r7, #1
 8004d2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d2e:	55e3      	strb	r3, [r4, r7]
 8004d30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d34:	f7fe bf72 	b.w	8003c1c <d_print_comp+0x1058>
 8004d38:	080b3c24 	.word	0x080b3c24
 8004d3c:	080b39d0 	.word	0x080b39d0
 8004d40:	080b39e4 	.word	0x080b39e4
 8004d44:	080b3be0 	.word	0x080b3be0
 8004d48:	080b3bc8 	.word	0x080b3bc8
 8004d4c:	080b3bcc 	.word	0x080b3bcc
 8004d50:	080b39d4 	.word	0x080b39d4
 8004d54:	080b3bd0 	.word	0x080b3bd0
 8004d58:	080b3ef0 	.word	0x080b3ef0
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d62:	f1b8 0f00 	cmp.w	r8, #0
 8004d66:	f43e aa89 	beq.w	800327c <d_print_comp+0x6b8>
 8004d6a:	f1b8 0f06 	cmp.w	r8, #6
 8004d6e:	f240 843f 	bls.w	80055f0 <d_print_comp+0x2a2c>
 8004d72:	f1b8 0f07 	cmp.w	r8, #7
 8004d76:	f47e aa81 	bne.w	800327c <d_print_comp+0x6b8>
 8004d7a:	68eb      	ldr	r3, [r5, #12]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	f47e aa7c 	bne.w	800327c <d_print_comp+0x6b8>
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	2a01      	cmp	r2, #1
 8004d88:	f47e aa78 	bne.w	800327c <d_print_comp+0x6b8>
 8004d8c:	283c      	cmp	r0, #60	; 0x3c
 8004d8e:	f47e aa75 	bne.w	800327c <d_print_comp+0x6b8>
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	f000 84b6 	beq.w	8005708 <d_print_comp+0x2b44>
 8004d9c:	2b31      	cmp	r3, #49	; 0x31
 8004d9e:	f47e aa6d 	bne.w	800327c <d_print_comp+0x6b8>
 8004da2:	2204      	movs	r2, #4
 8004da4:	49c3      	ldr	r1, [pc, #780]	; (80050b4 <d_print_comp+0x24f0>)
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7fb fae8 	bl	800037c <d_append_buffer>
 8004dac:	9905      	ldr	r1, [sp, #20]
 8004dae:	686a      	ldr	r2, [r5, #4]
 8004db0:	f7fd bffb 	b.w	8002daa <d_print_comp+0x1e6>
 8004db4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004db8:	2fff      	cmp	r7, #255	; 0xff
 8004dba:	d112      	bne.n	8004de2 <d_print_comp+0x221e>
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dc6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004dca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4798      	blx	r3
 8004dd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dd6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4647      	mov	r7, r8
 8004dde:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004de2:	1c7a      	adds	r2, r7, #1
 8004de4:	235b      	movs	r3, #91	; 0x5b
 8004de6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dea:	55e3      	strb	r3, [r4, r7]
 8004dec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004df0:	4631      	mov	r1, r6
 8004df2:	68ea      	ldr	r2, [r5, #12]
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7fd fee5 	bl	8002bc4 <d_print_comp>
 8004dfa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dfe:	2fff      	cmp	r7, #255	; 0xff
 8004e00:	d111      	bne.n	8004e26 <d_print_comp+0x2262>
 8004e02:	2600      	movs	r6, #0
 8004e04:	4639      	mov	r1, r7
 8004e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e12:	4620      	mov	r0, r4
 8004e14:	4798      	blx	r3
 8004e16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004e1e:	3301      	adds	r3, #1
 8004e20:	4637      	mov	r7, r6
 8004e22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e26:	1c7a      	adds	r2, r7, #1
 8004e28:	235d      	movs	r3, #93	; 0x5d
 8004e2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e2e:	55e3      	strb	r3, [r4, r7]
 8004e30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e34:	686a      	ldr	r2, [r5, #4]
 8004e36:	9905      	ldr	r1, [sp, #20]
 8004e38:	f7fd bfb7 	b.w	8002daa <d_print_comp+0x1e6>
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	2229      	movs	r2, #41	; 0x29
 8004e40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e44:	54e2      	strb	r2, [r4, r3]
 8004e46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e4a:	782b      	ldrb	r3, [r5, #0]
 8004e4c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e4e:	f47e aa57 	bne.w	8003300 <d_print_comp+0x73c>
 8004e52:	29ff      	cmp	r1, #255	; 0xff
 8004e54:	d10f      	bne.n	8004e76 <d_print_comp+0x22b2>
 8004e56:	2700      	movs	r7, #0
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e64:	4620      	mov	r0, r4
 8004e66:	4798      	blx	r3
 8004e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e6c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e70:	3301      	adds	r3, #1
 8004e72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e76:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e7a:	232d      	movs	r3, #45	; 0x2d
 8004e7c:	1c51      	adds	r1, r2, #1
 8004e7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e82:	54a3      	strb	r3, [r4, r2]
 8004e84:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e88:	f7fe ba3a 	b.w	8003300 <d_print_comp+0x73c>
 8004e8c:	4f8a      	ldr	r7, [pc, #552]	; (80050b8 <d_print_comp+0x24f4>)
 8004e8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e92:	f107 0a02 	add.w	sl, r7, #2
 8004e96:	e016      	b.n	8004ec6 <d_print_comp+0x2302>
 8004e98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ea0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004ea4:	4798      	blx	r3
 8004ea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	45ba      	cmp	sl, r7
 8004eb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004eba:	f804 8002 	strb.w	r8, [r4, r2]
 8004ebe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ec2:	f43f a980 	beq.w	80041c6 <d_print_comp+0x1602>
 8004ec6:	2bff      	cmp	r3, #255	; 0xff
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004ed0:	d0e2      	beq.n	8004e98 <d_print_comp+0x22d4>
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	e7ed      	b.n	8004eb4 <d_print_comp+0x22f0>
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	4631      	mov	r1, r6
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7fd fe71 	bl	8002bc4 <d_print_comp>
 8004ee2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004ee6:	b113      	cbz	r3, 8004eee <d_print_comp+0x232a>
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004eee:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004ef2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ef4:	f000 82c4 	beq.w	8005480 <d_print_comp+0x28bc>
 8004ef8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004efc:	2fff      	cmp	r7, #255	; 0xff
 8004efe:	d112      	bne.n	8004f26 <d_print_comp+0x2362>
 8004f00:	f04f 0800 	mov.w	r8, #0
 8004f04:	4639      	mov	r1, r7
 8004f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f0a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f12:	4620      	mov	r0, r4
 8004f14:	4798      	blx	r3
 8004f16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f1a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4647      	mov	r7, r8
 8004f22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f26:	233c      	movs	r3, #60	; 0x3c
 8004f28:	1c7a      	adds	r2, r7, #1
 8004f2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f2e:	55e3      	strb	r3, [r4, r7]
 8004f30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f34:	68ab      	ldr	r3, [r5, #8]
 8004f36:	4631      	mov	r1, r6
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7fd fe42 	bl	8002bc4 <d_print_comp>
 8004f40:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f44:	2b3e      	cmp	r3, #62	; 0x3e
 8004f46:	f000 827d 	beq.w	8005444 <d_print_comp+0x2880>
 8004f4a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f4e:	2fff      	cmp	r7, #255	; 0xff
 8004f50:	d111      	bne.n	8004f76 <d_print_comp+0x23b2>
 8004f52:	2600      	movs	r6, #0
 8004f54:	4639      	mov	r1, r7
 8004f56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f5a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f62:	4620      	mov	r0, r4
 8004f64:	4798      	blx	r3
 8004f66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f6a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4637      	mov	r7, r6
 8004f72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f76:	233e      	movs	r3, #62	; 0x3e
 8004f78:	1c7a      	adds	r2, r7, #1
 8004f7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f7e:	55e3      	strb	r3, [r4, r7]
 8004f80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f84:	f7ff badc 	b.w	8004540 <d_print_comp+0x197c>
 8004f88:	4f4c      	ldr	r7, [pc, #304]	; (80050bc <d_print_comp+0x24f8>)
 8004f8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f8e:	f107 0905 	add.w	r9, r7, #5
 8004f92:	f04f 0a00 	mov.w	sl, #0
 8004f96:	e016      	b.n	8004fc6 <d_print_comp+0x2402>
 8004f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fa0:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fa4:	4798      	blx	r3
 8004fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004faa:	3301      	adds	r3, #1
 8004fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	45b9      	cmp	r9, r7
 8004fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004fba:	f804 8002 	strb.w	r8, [r4, r2]
 8004fbe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004fc2:	f43e ab41 	beq.w	8003648 <d_print_comp+0xa84>
 8004fc6:	2bff      	cmp	r3, #255	; 0xff
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004fd0:	d0e2      	beq.n	8004f98 <d_print_comp+0x23d4>
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	e7ed      	b.n	8004fb4 <d_print_comp+0x23f0>
 8004fd8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004fdc:	2fff      	cmp	r7, #255	; 0xff
 8004fde:	d112      	bne.n	8005006 <d_print_comp+0x2442>
 8004fe0:	f04f 0a00 	mov.w	sl, #0
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fea:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4798      	blx	r3
 8004ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ffa:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004ffe:	3301      	adds	r3, #1
 8005000:	4657      	mov	r7, sl
 8005002:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005006:	2320      	movs	r3, #32
 8005008:	1c7a      	adds	r2, r7, #1
 800500a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800500e:	55e3      	strb	r3, [r4, r7]
 8005010:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005014:	f7fe bdda 	b.w	8003bcc <d_print_comp+0x1008>
 8005018:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800501c:	2900      	cmp	r1, #0
 800501e:	f6fe ad99 	blt.w	8003b54 <d_print_comp+0xf90>
 8005022:	f7fb fbc3 	bl	80007ac <d_index_template_argument.part.9>
 8005026:	4602      	mov	r2, r0
 8005028:	2800      	cmp	r0, #0
 800502a:	f47e ad93 	bne.w	8003b54 <d_print_comp+0xf90>
 800502e:	2301      	movs	r3, #1
 8005030:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005034:	686a      	ldr	r2, [r5, #4]
 8005036:	9905      	ldr	r1, [sp, #20]
 8005038:	f7fd beb7 	b.w	8002daa <d_print_comp+0x1e6>
 800503c:	9905      	ldr	r1, [sp, #20]
 800503e:	686a      	ldr	r2, [r5, #4]
 8005040:	f7fd beb3 	b.w	8002daa <d_print_comp+0x1e6>
 8005044:	220d      	movs	r2, #13
 8005046:	491e      	ldr	r1, [pc, #120]	; (80050c0 <d_print_comp+0x24fc>)
 8005048:	4620      	mov	r0, r4
 800504a:	f7fb f997 	bl	800037c <d_append_buffer>
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	4620      	mov	r0, r4
 8005052:	3101      	adds	r1, #1
 8005054:	f7fb fc84 	bl	8000960 <d_append_num>
 8005058:	2203      	movs	r2, #3
 800505a:	491a      	ldr	r1, [pc, #104]	; (80050c4 <d_print_comp+0x2500>)
 800505c:	4620      	mov	r0, r4
 800505e:	f7fb f98d 	bl	800037c <d_append_buffer>
 8005062:	68bf      	ldr	r7, [r7, #8]
 8005064:	f7ff b8b4 	b.w	80041d0 <d_print_comp+0x160c>
 8005068:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800506c:	9905      	ldr	r1, [sp, #20]
 800506e:	686a      	ldr	r2, [r5, #4]
 8005070:	42b8      	cmp	r0, r7
 8005072:	f47d ae9a 	bne.w	8002daa <d_print_comp+0x1e6>
 8005076:	3b01      	subs	r3, #1
 8005078:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800507c:	f7fd be95 	b.w	8002daa <d_print_comp+0x1e6>
 8005080:	4642      	mov	r2, r8
 8005082:	465b      	mov	r3, fp
 8005084:	46ab      	mov	fp, r5
 8005086:	f1bb 0f04 	cmp.w	fp, #4
 800508a:	46a0      	mov	r8, r4
 800508c:	461d      	mov	r5, r3
 800508e:	4614      	mov	r4, r2
 8005090:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005094:	f000 82a3 	beq.w	80055de <d_print_comp+0x2a1a>
 8005098:	f1bb 0f02 	cmp.w	fp, #2
 800509c:	d137      	bne.n	800510e <d_print_comp+0x254a>
 800509e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80050a2:	f89a 3000 	ldrb.w	r3, [sl]
 80050a6:	2b46      	cmp	r3, #70	; 0x46
 80050a8:	f000 8327 	beq.w	80056fa <d_print_comp+0x2b36>
 80050ac:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 80050b0:	3a0c      	subs	r2, #12
 80050b2:	e020      	b.n	80050f6 <d_print_comp+0x2532>
 80050b4:	080b3bfc 	.word	0x080b3bfc
 80050b8:	080b3a20 	.word	0x080b3a20
 80050bc:	080b3b94 	.word	0x080b3b94
 80050c0:	080b3a24 	.word	0x080b3a24
 80050c4:	080b3a34 	.word	0x080b3a34
 80050c8:	2f04      	cmp	r7, #4
 80050ca:	f43f a81d 	beq.w	8004108 <d_print_comp+0x1544>
 80050ce:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80050d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80050d6:	2300      	movs	r3, #0
 80050d8:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80050dc:	f84e ac10 	str.w	sl, [lr, #-16]
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050e6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050ea:	3701      	adds	r7, #1
 80050ec:	f84e bc04 	str.w	fp, [lr, #-4]
 80050f0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050f4:	4672      	mov	r2, lr
 80050f6:	f89a 0000 	ldrb.w	r0, [sl]
 80050fa:	f7fb f975 	bl	80003e8 <is_fnqual_component_type>
 80050fe:	f1a2 0b04 	sub.w	fp, r2, #4
 8005102:	f102 0e10 	add.w	lr, r2, #16
 8005106:	f102 0c0c 	add.w	ip, r2, #12
 800510a:	2800      	cmp	r0, #0
 800510c:	d1dc      	bne.n	80050c8 <d_print_comp+0x2504>
 800510e:	68ea      	ldr	r2, [r5, #12]
 8005110:	4631      	mov	r1, r6
 8005112:	4620      	mov	r0, r4
 8005114:	f7fd fd56 	bl	8002bc4 <d_print_comp>
 8005118:	f898 3000 	ldrb.w	r3, [r8]
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf04      	itt	eq
 8005120:	9b06      	ldreq	r3, [sp, #24]
 8005122:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005126:	013f      	lsls	r7, r7, #4
 8005128:	f04f 0a20 	mov.w	sl, #32
 800512c:	46a8      	mov	r8, r5
 800512e:	eb09 0b07 	add.w	fp, r9, r7
 8005132:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005136:	bb0d      	cbnz	r5, 800517c <d_print_comp+0x25b8>
 8005138:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800513c:	2bff      	cmp	r3, #255	; 0xff
 800513e:	4620      	mov	r0, r4
 8005140:	4619      	mov	r1, r3
 8005142:	d10e      	bne.n	8005162 <d_print_comp+0x259e>
 8005144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005148:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800514c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005150:	4798      	blx	r3
 8005152:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005156:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005160:	462b      	mov	r3, r5
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005168:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800516c:	f804 a003 	strb.w	sl, [r4, r3]
 8005170:	4631      	mov	r1, r6
 8005172:	4620      	mov	r0, r4
 8005174:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005178:	f000 fbba 	bl	80058f0 <d_print_mod>
 800517c:	3f10      	subs	r7, #16
 800517e:	d1d6      	bne.n	800512e <d_print_comp+0x256a>
 8005180:	9b02      	ldr	r3, [sp, #8]
 8005182:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005186:	4645      	mov	r5, r8
 8005188:	f7fe bfc1 	b.w	800410e <d_print_comp+0x154a>
 800518c:	4631      	mov	r1, r6
 800518e:	68aa      	ldr	r2, [r5, #8]
 8005190:	4620      	mov	r0, r4
 8005192:	f7fd fd17 	bl	8002bc4 <d_print_comp>
 8005196:	9905      	ldr	r1, [sp, #20]
 8005198:	686a      	ldr	r2, [r5, #4]
 800519a:	f7fd be06 	b.w	8002daa <d_print_comp+0x1e6>
 800519e:	460f      	mov	r7, r1
 80051a0:	46a9      	mov	r9, r5
 80051a2:	f7fe bebb 	b.w	8003f1c <d_print_comp+0x1358>
 80051a6:	4644      	mov	r4, r8
 80051a8:	465d      	mov	r5, fp
 80051aa:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 80051ae:	f7fe bfab 	b.w	8004108 <d_print_comp+0x1544>
 80051b2:	68ea      	ldr	r2, [r5, #12]
 80051b4:	4631      	mov	r1, r6
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7fd fd04 	bl	8002bc4 <d_print_comp>
 80051bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051be:	9a01      	ldr	r2, [sp, #4]
 80051c0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f43e ab19 	beq.w	80037fc <d_print_comp+0xc38>
 80051ca:	f7fe bb1f 	b.w	800380c <d_print_comp+0xc48>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4664      	mov	r4, ip
 80051d2:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 80051d6:	f7fe bb19 	b.w	800380c <d_print_comp+0xc48>
 80051da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051de:	f7fe bead 	b.w	8003f3c <d_print_comp+0x1378>
 80051e2:	4631      	mov	r1, r6
 80051e4:	68aa      	ldr	r2, [r5, #8]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f001 f9f4 	bl	80065d4 <d_print_subexpr>
 80051ec:	2203      	movs	r2, #3
 80051ee:	49bf      	ldr	r1, [pc, #764]	; (80054ec <d_print_comp+0x2928>)
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fb f8c3 	bl	800037c <d_append_buffer>
 80051f6:	9905      	ldr	r1, [sp, #20]
 80051f8:	686a      	ldr	r2, [r5, #4]
 80051fa:	f7fd bdd6 	b.w	8002daa <d_print_comp+0x1e6>
 80051fe:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 8005202:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8005206:	f1be 0f00 	cmp.w	lr, #0
 800520a:	dd17      	ble.n	800523c <d_print_comp+0x2678>
 800520c:	6810      	ldr	r0, [r2, #0]
 800520e:	4581      	cmp	r9, r0
 8005210:	f000 81a7 	beq.w	8005562 <d_print_comp+0x299e>
 8005214:	f102 0b08 	add.w	fp, r2, #8
 8005218:	46bc      	mov	ip, r7
 800521a:	9101      	str	r1, [sp, #4]
 800521c:	4670      	mov	r0, lr
 800521e:	e004      	b.n	800522a <d_print_comp+0x2666>
 8005220:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 8005224:	4589      	cmp	r9, r1
 8005226:	f000 819d 	beq.w	8005564 <d_print_comp+0x29a0>
 800522a:	f10c 0c01 	add.w	ip, ip, #1
 800522e:	4560      	cmp	r0, ip
 8005230:	46da      	mov	sl, fp
 8005232:	f10b 0b08 	add.w	fp, fp, #8
 8005236:	d1f3      	bne.n	8005220 <d_print_comp+0x265c>
 8005238:	9901      	ldr	r1, [sp, #4]
 800523a:	4686      	mov	lr, r0
 800523c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005240:	459e      	cmp	lr, r3
 8005242:	f280 8344 	bge.w	80058ce <d_print_comp+0x2d0a>
 8005246:	f10e 0301 	add.w	r3, lr, #1
 800524a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800524e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005252:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005256:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800525a:	f10c 0c04 	add.w	ip, ip, #4
 800525e:	2800      	cmp	r0, #0
 8005260:	f000 825b 	beq.w	800571a <d_print_comp+0x2b56>
 8005264:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005268:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800526c:	429a      	cmp	r2, r3
 800526e:	f102 0e01 	add.w	lr, r2, #1
 8005272:	f280 832c 	bge.w	80058ce <d_print_comp+0x2d0a>
 8005276:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800527a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800527e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005282:	6842      	ldr	r2, [r0, #4]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	f8cc 3000 	str.w	r3, [ip]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	469c      	mov	ip, r3
 800528e:	e7e6      	b.n	800525e <d_print_comp+0x269a>
 8005290:	4606      	mov	r6, r0
 8005292:	4647      	mov	r7, r8
 8005294:	e001      	b.n	800529a <d_print_comp+0x26d6>
 8005296:	68ff      	ldr	r7, [r7, #12]
 8005298:	b31f      	cbz	r7, 80052e2 <d_print_comp+0x271e>
 800529a:	783b      	ldrb	r3, [r7, #0]
 800529c:	2b2f      	cmp	r3, #47	; 0x2f
 800529e:	d120      	bne.n	80052e2 <d_print_comp+0x271e>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	b1f3      	cbz	r3, 80052e2 <d_print_comp+0x271e>
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	2a4a      	cmp	r2, #74	; 0x4a
 80052a8:	bf18      	it	ne
 80052aa:	3601      	addne	r6, #1
 80052ac:	d1f3      	bne.n	8005296 <d_print_comp+0x26d2>
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7fb faa1 	bl	80007f8 <d_find_pack>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f000 81ef 	beq.w	800569a <d_print_comp+0x2ad6>
 80052bc:	7803      	ldrb	r3, [r0, #0]
 80052be:	2b2f      	cmp	r3, #47	; 0x2f
 80052c0:	f040 81eb 	bne.w	800569a <d_print_comp+0x2ad6>
 80052c4:	6883      	ldr	r3, [r0, #8]
 80052c6:	b153      	cbz	r3, 80052de <d_print_comp+0x271a>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e004      	b.n	80052d6 <d_print_comp+0x2712>
 80052cc:	7802      	ldrb	r2, [r0, #0]
 80052ce:	2a2f      	cmp	r2, #47	; 0x2f
 80052d0:	d105      	bne.n	80052de <d_print_comp+0x271a>
 80052d2:	6882      	ldr	r2, [r0, #8]
 80052d4:	b11a      	cbz	r2, 80052de <d_print_comp+0x271a>
 80052d6:	68c0      	ldr	r0, [r0, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	2800      	cmp	r0, #0
 80052dc:	d1f6      	bne.n	80052cc <d_print_comp+0x2708>
 80052de:	441e      	add	r6, r3
 80052e0:	e7d9      	b.n	8005296 <d_print_comp+0x26d2>
 80052e2:	4631      	mov	r1, r6
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fb fb3b 	bl	8000960 <d_append_num>
 80052ea:	9905      	ldr	r1, [sp, #20]
 80052ec:	686a      	ldr	r2, [r5, #4]
 80052ee:	f7fd bd5c 	b.w	8002daa <d_print_comp+0x1e6>
 80052f2:	4631      	mov	r1, r6
 80052f4:	4620      	mov	r0, r4
 80052f6:	f001 f92d 	bl	8006554 <d_print_expr_op>
 80052fa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052fe:	2fff      	cmp	r7, #255	; 0xff
 8005300:	d112      	bne.n	8005328 <d_print_comp+0x2764>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	4639      	mov	r1, r7
 8005308:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800530c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005314:	4620      	mov	r0, r4
 8005316:	4798      	blx	r3
 8005318:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800531c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005320:	3301      	adds	r3, #1
 8005322:	4647      	mov	r7, r8
 8005324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005328:	1c7a      	adds	r2, r7, #1
 800532a:	233c      	movs	r3, #60	; 0x3c
 800532c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005330:	55e3      	strb	r3, [r4, r7]
 8005332:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005336:	68eb      	ldr	r3, [r5, #12]
 8005338:	4631      	mov	r1, r6
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4620      	mov	r0, r4
 800533e:	f7fd fc41 	bl	8002bc4 <d_print_comp>
 8005342:	2202      	movs	r2, #2
 8005344:	496a      	ldr	r1, [pc, #424]	; (80054f0 <d_print_comp+0x292c>)
 8005346:	4620      	mov	r0, r4
 8005348:	f7fb f818 	bl	800037c <d_append_buffer>
 800534c:	68eb      	ldr	r3, [r5, #12]
 800534e:	4631      	mov	r1, r6
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	4620      	mov	r0, r4
 8005354:	f7fd fc36 	bl	8002bc4 <d_print_comp>
 8005358:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800535c:	2fff      	cmp	r7, #255	; 0xff
 800535e:	d111      	bne.n	8005384 <d_print_comp+0x27c0>
 8005360:	2600      	movs	r6, #0
 8005362:	4639      	mov	r1, r7
 8005364:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005368:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800536c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005370:	4620      	mov	r0, r4
 8005372:	4798      	blx	r3
 8005374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005378:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800537c:	3301      	adds	r3, #1
 800537e:	4637      	mov	r7, r6
 8005380:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005384:	1c7a      	adds	r2, r7, #1
 8005386:	2329      	movs	r3, #41	; 0x29
 8005388:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800538c:	55e3      	strb	r3, [r4, r7]
 800538e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005392:	686a      	ldr	r2, [r5, #4]
 8005394:	9905      	ldr	r1, [sp, #20]
 8005396:	f7fd bd08 	b.w	8002daa <d_print_comp+0x1e6>
 800539a:	9905      	ldr	r1, [sp, #20]
 800539c:	686a      	ldr	r2, [r5, #4]
 800539e:	f7fd bd04 	b.w	8002daa <d_print_comp+0x1e6>
 80053a2:	4642      	mov	r2, r8
 80053a4:	4631      	mov	r1, r6
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7fd fc0c 	bl	8002bc4 <d_print_comp>
 80053ac:	9905      	ldr	r1, [sp, #20]
 80053ae:	686a      	ldr	r2, [r5, #4]
 80053b0:	f7fd bcfb 	b.w	8002daa <d_print_comp+0x1e6>
 80053b4:	a918      	add	r1, sp, #96	; 0x60
 80053b6:	4620      	mov	r0, r4
 80053b8:	f841 3d40 	str.w	r3, [r1, #-64]!
 80053bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80053c0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80053c4:	4641      	mov	r1, r8
 80053c6:	960a      	str	r6, [sp, #40]	; 0x28
 80053c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ca:	9509      	str	r5, [sp, #36]	; 0x24
 80053cc:	f7fd fbfa 	bl	8002bc4 <d_print_comp>
 80053d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80053d8:	b9ee      	cbnz	r6, 8005416 <d_print_comp+0x2852>
 80053da:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80053de:	2fff      	cmp	r7, #255	; 0xff
 80053e0:	d110      	bne.n	8005404 <d_print_comp+0x2840>
 80053e2:	4639      	mov	r1, r7
 80053e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053f0:	4620      	mov	r0, r4
 80053f2:	4798      	blx	r3
 80053f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053f8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053fc:	3301      	adds	r3, #1
 80053fe:	4637      	mov	r7, r6
 8005400:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005404:	2320      	movs	r3, #32
 8005406:	1c7a      	adds	r2, r7, #1
 8005408:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800540c:	55e3      	strb	r3, [r4, r7]
 800540e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005412:	f7fe ba0c 	b.w	800382e <d_print_comp+0xc6a>
 8005416:	9905      	ldr	r1, [sp, #20]
 8005418:	686a      	ldr	r2, [r5, #4]
 800541a:	f7fd bcc6 	b.w	8002daa <d_print_comp+0x1e6>
 800541e:	4935      	ldr	r1, [pc, #212]	; (80054f4 <d_print_comp+0x2930>)
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f023 ffe3 	bl	80293ec <strncmp>
 8005426:	2800      	cmp	r0, #0
 8005428:	f47e abc6 	bne.w	8003bb8 <d_print_comp+0xff4>
 800542c:	4631      	mov	r1, r6
 800542e:	68ea      	ldr	r2, [r5, #12]
 8005430:	4620      	mov	r0, r4
 8005432:	f7fd fbc7 	bl	8002bc4 <d_print_comp>
 8005436:	2202      	movs	r2, #2
 8005438:	492f      	ldr	r1, [pc, #188]	; (80054f8 <d_print_comp+0x2934>)
 800543a:	4620      	mov	r0, r4
 800543c:	f7fa ff9e 	bl	800037c <d_append_buffer>
 8005440:	f7fe bc09 	b.w	8003c56 <d_print_comp+0x1092>
 8005444:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005448:	2fff      	cmp	r7, #255	; 0xff
 800544a:	d111      	bne.n	8005470 <d_print_comp+0x28ac>
 800544c:	2600      	movs	r6, #0
 800544e:	4639      	mov	r1, r7
 8005450:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005454:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005458:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800545c:	4620      	mov	r0, r4
 800545e:	4798      	blx	r3
 8005460:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005464:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005468:	3301      	adds	r3, #1
 800546a:	4637      	mov	r7, r6
 800546c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005470:	2320      	movs	r3, #32
 8005472:	1c7a      	adds	r2, r7, #1
 8005474:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005478:	55e3      	strb	r3, [r4, r7]
 800547a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800547e:	e564      	b.n	8004f4a <d_print_comp+0x2386>
 8005480:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005484:	2fff      	cmp	r7, #255	; 0xff
 8005486:	d112      	bne.n	80054ae <d_print_comp+0x28ea>
 8005488:	f04f 0800 	mov.w	r8, #0
 800548c:	4639      	mov	r1, r7
 800548e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005492:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005496:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800549a:	4620      	mov	r0, r4
 800549c:	4798      	blx	r3
 800549e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054a2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80054a6:	3301      	adds	r3, #1
 80054a8:	4647      	mov	r7, r8
 80054aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054ae:	2320      	movs	r3, #32
 80054b0:	1c7a      	adds	r2, r7, #1
 80054b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80054b6:	55e3      	strb	r3, [r4, r7]
 80054b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80054bc:	e51c      	b.n	8004ef8 <d_print_comp+0x2334>
 80054be:	4640      	mov	r0, r8
 80054c0:	490e      	ldr	r1, [pc, #56]	; (80054fc <d_print_comp+0x2938>)
 80054c2:	f001 fc65 	bl	8006d90 <strcmp>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f040 81fb 	bne.w	80058c2 <d_print_comp+0x2cfe>
 80054cc:	68eb      	ldr	r3, [r5, #12]
 80054ce:	4631      	mov	r1, r6
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	4620      	mov	r0, r4
 80054d4:	f001 f87e 	bl	80065d4 <d_print_subexpr>
 80054d8:	f7fd bc60 	b.w	8002d9c <d_print_comp+0x1d8>
 80054dc:	9905      	ldr	r1, [sp, #20]
 80054de:	686a      	ldr	r2, [r5, #4]
 80054e0:	f7fd bc63 	b.w	8002daa <d_print_comp+0x1e6>
 80054e4:	9905      	ldr	r1, [sp, #20]
 80054e6:	686a      	ldr	r2, [r5, #4]
 80054e8:	f7fd bc5f 	b.w	8002daa <d_print_comp+0x1e6>
 80054ec:	080b3c20 	.word	0x080b3c20
 80054f0:	080b3bd4 	.word	0x080b3bd4
 80054f4:	080b3a38 	.word	0x080b3a38
 80054f8:	080b3a40 	.word	0x080b3a40
 80054fc:	080b39d8 	.word	0x080b39d8
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	2a01      	cmp	r2, #1
 8005506:	f47d ac4e 	bne.w	8002da6 <d_print_comp+0x1e2>
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b3e      	cmp	r3, #62	; 0x3e
 8005510:	f47d ac49 	bne.w	8002da6 <d_print_comp+0x1e2>
 8005514:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005518:	2fff      	cmp	r7, #255	; 0xff
 800551a:	d111      	bne.n	8005540 <d_print_comp+0x297c>
 800551c:	2600      	movs	r6, #0
 800551e:	4639      	mov	r1, r7
 8005520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005524:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005528:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800552c:	4620      	mov	r0, r4
 800552e:	4798      	blx	r3
 8005530:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005534:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005538:	3301      	adds	r3, #1
 800553a:	4637      	mov	r7, r6
 800553c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005540:	1c7a      	adds	r2, r7, #1
 8005542:	2329      	movs	r3, #41	; 0x29
 8005544:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005548:	55e3      	strb	r3, [r4, r7]
 800554a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800554e:	686a      	ldr	r2, [r5, #4]
 8005550:	9905      	ldr	r1, [sp, #20]
 8005552:	f7fd bc2a 	b.w	8002daa <d_print_comp+0x1e6>
 8005556:	2a05      	cmp	r2, #5
 8005558:	f200 80a9 	bhi.w	80056ae <d_print_comp+0x2aea>
 800555c:	3b57      	subs	r3, #87	; 0x57
 800555e:	f7ff ba1d 	b.w	800499c <d_print_comp+0x1dd8>
 8005562:	4692      	mov	sl, r2
 8005564:	461a      	mov	r2, r3
 8005566:	e001      	b.n	800556c <d_print_comp+0x29a8>
 8005568:	6852      	ldr	r2, [r2, #4]
 800556a:	b342      	cbz	r2, 80055be <d_print_comp+0x29fa>
 800556c:	6811      	ldr	r1, [r2, #0]
 800556e:	4589      	cmp	r9, r1
 8005570:	d003      	beq.n	800557a <d_print_comp+0x29b6>
 8005572:	428d      	cmp	r5, r1
 8005574:	d1f8      	bne.n	8005568 <d_print_comp+0x29a4>
 8005576:	429a      	cmp	r2, r3
 8005578:	d0f6      	beq.n	8005568 <d_print_comp+0x29a4>
 800557a:	f109 0108 	add.w	r1, r9, #8
 800557e:	4620      	mov	r0, r4
 8005580:	f7fb f92a 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8005584:	4681      	mov	r9, r0
 8005586:	b198      	cbz	r0, 80055b0 <d_print_comp+0x29ec>
 8005588:	f899 3000 	ldrb.w	r3, [r9]
 800558c:	2b2f      	cmp	r3, #47	; 0x2f
 800558e:	f47e acb6 	bne.w	8003efe <d_print_comp+0x133a>
 8005592:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005596:	2900      	cmp	r1, #0
 8005598:	f6fe acb6 	blt.w	8003f08 <d_print_comp+0x1344>
 800559c:	4648      	mov	r0, r9
 800559e:	f7fb f905 	bl	80007ac <d_index_template_argument.part.9>
 80055a2:	4681      	mov	r9, r0
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f47e acaa 	bne.w	8003efe <d_print_comp+0x133a>
 80055aa:	b10f      	cbz	r7, 80055b0 <d_print_comp+0x29ec>
 80055ac:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 80055b0:	2301      	movs	r3, #1
 80055b2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80055b6:	686a      	ldr	r2, [r5, #4]
 80055b8:	9905      	ldr	r1, [sp, #20]
 80055ba:	f7fd bbf6 	b.w	8002daa <d_print_comp+0x1e6>
 80055be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055c2:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 80055c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ca:	f109 0108 	add.w	r1, r9, #8
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7fb f902 	bl	80007d8 <d_lookup_template_argument.isra.10>
 80055d4:	2701      	movs	r7, #1
 80055d6:	4681      	mov	r9, r0
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1d5      	bne.n	8005588 <d_print_comp+0x29c4>
 80055dc:	e7e6      	b.n	80055ac <d_print_comp+0x29e8>
 80055de:	ab18      	add	r3, sp, #96	; 0x60
 80055e0:	9a01      	ldr	r2, [sp, #4]
 80055e2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055e6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ee:	e58e      	b.n	800510e <d_print_comp+0x254a>
 80055f0:	68eb      	ldr	r3, [r5, #12]
 80055f2:	f893 9000 	ldrb.w	r9, [r3]
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	f47d ae3f 	bne.w	800327c <d_print_comp+0x6b8>
 80055fe:	283d      	cmp	r0, #61	; 0x3d
 8005600:	f000 80e6 	beq.w	80057d0 <d_print_comp+0x2c0c>
 8005604:	4631      	mov	r1, r6
 8005606:	68ea      	ldr	r2, [r5, #12]
 8005608:	4620      	mov	r0, r4
 800560a:	f1a8 0802 	sub.w	r8, r8, #2
 800560e:	f7fd fad9 	bl	8002bc4 <d_print_comp>
 8005612:	f1b8 0f04 	cmp.w	r8, #4
 8005616:	f200 80d7 	bhi.w	80057c8 <d_print_comp+0x2c04>
 800561a:	e8df f008 	tbb	[pc, r8]
 800561e:	93b4      	.short	0x93b4
 8005620:	818a      	.short	0x818a
 8005622:	35          	.byte	0x35
 8005623:	00          	.byte	0x00
 8005624:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005628:	4631      	mov	r1, r6
 800562a:	4620      	mov	r0, r4
 800562c:	f000 ffd2 	bl	80065d4 <d_print_subexpr>
 8005630:	464a      	mov	r2, r9
 8005632:	4631      	mov	r1, r6
 8005634:	4620      	mov	r0, r4
 8005636:	f000 ff8d 	bl	8006554 <d_print_expr_op>
 800563a:	9905      	ldr	r1, [sp, #20]
 800563c:	686a      	ldr	r2, [r5, #4]
 800563e:	f7fd bbb4 	b.w	8002daa <d_print_comp+0x1e6>
 8005642:	4641      	mov	r1, r8
 8005644:	4620      	mov	r0, r4
 8005646:	f7fb f8d7 	bl	80007f8 <d_find_pack>
 800564a:	b1a8      	cbz	r0, 8005678 <d_print_comp+0x2ab4>
 800564c:	7803      	ldrb	r3, [r0, #0]
 800564e:	2b2f      	cmp	r3, #47	; 0x2f
 8005650:	d112      	bne.n	8005678 <d_print_comp+0x2ab4>
 8005652:	6883      	ldr	r3, [r0, #8]
 8005654:	b183      	cbz	r3, 8005678 <d_print_comp+0x2ab4>
 8005656:	68c0      	ldr	r0, [r0, #12]
 8005658:	3701      	adds	r7, #1
 800565a:	e7f6      	b.n	800564a <d_print_comp+0x2a86>
 800565c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	2a01      	cmp	r2, #1
 8005664:	f47f aad2 	bne.w	8004c0c <d_print_comp+0x2048>
 8005668:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	2a29      	cmp	r2, #41	; 0x29
 8005670:	bf08      	it	eq
 8005672:	4698      	moveq	r8, r3
 8005674:	f7ff baca 	b.w	8004c0c <d_print_comp+0x2048>
 8005678:	4639      	mov	r1, r7
 800567a:	4620      	mov	r0, r4
 800567c:	f7fb f970 	bl	8000960 <d_append_num>
 8005680:	9905      	ldr	r1, [sp, #20]
 8005682:	686a      	ldr	r2, [r5, #4]
 8005684:	f7fd bb91 	b.w	8002daa <d_print_comp+0x1e6>
 8005688:	2203      	movs	r2, #3
 800568a:	4994      	ldr	r1, [pc, #592]	; (80058dc <d_print_comp+0x2d18>)
 800568c:	4620      	mov	r0, r4
 800568e:	f7fa fe75 	bl	800037c <d_append_buffer>
 8005692:	9905      	ldr	r1, [sp, #20]
 8005694:	686a      	ldr	r2, [r5, #4]
 8005696:	f7fd bb88 	b.w	8002daa <d_print_comp+0x1e6>
 800569a:	2300      	movs	r3, #0
 800569c:	441e      	add	r6, r3
 800569e:	e5fa      	b.n	8005296 <d_print_comp+0x26d2>
 80056a0:	464a      	mov	r2, r9
 80056a2:	4631      	mov	r1, r6
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 ff55 	bl	8006554 <d_print_expr_op>
 80056aa:	f7fd bea9 	b.w	8003400 <d_print_comp+0x83c>
 80056ae:	2b5f      	cmp	r3, #95	; 0x5f
 80056b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056b4:	f47f a964 	bne.w	8004980 <d_print_comp+0x1dbc>
 80056b8:	28ff      	cmp	r0, #255	; 0xff
 80056ba:	f63f a961 	bhi.w	8004980 <d_print_comp+0x1dbc>
 80056be:	29ff      	cmp	r1, #255	; 0xff
 80056c0:	fa5f f980 	uxtb.w	r9, r0
 80056c4:	d10f      	bne.n	80056e6 <d_print_comp+0x2b22>
 80056c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056d2:	4620      	mov	r0, r4
 80056d4:	4798      	blx	r3
 80056d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056da:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80056de:	3301      	adds	r3, #1
 80056e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056e4:	2100      	movs	r1, #0
 80056e6:	1c4b      	adds	r3, r1, #1
 80056e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056ec:	4657      	mov	r7, sl
 80056ee:	f804 9001 	strb.w	r9, [r4, r1]
 80056f2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056f6:	f7ff b935 	b.w	8004964 <d_print_comp+0x1da0>
 80056fa:	f8da a008 	ldr.w	sl, [sl, #8]
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	f43e ad01 	beq.w	8004108 <d_print_comp+0x1544>
 8005706:	e4d1      	b.n	80050ac <d_print_comp+0x24e8>
 8005708:	2205      	movs	r2, #5
 800570a:	4975      	ldr	r1, [pc, #468]	; (80058e0 <d_print_comp+0x2d1c>)
 800570c:	4620      	mov	r0, r4
 800570e:	f7fa fe35 	bl	800037c <d_append_buffer>
 8005712:	9905      	ldr	r1, [sp, #20]
 8005714:	686a      	ldr	r2, [r5, #4]
 8005716:	f7fd bb48 	b.w	8002daa <d_print_comp+0x1e6>
 800571a:	f8cc 0000 	str.w	r0, [ip]
 800571e:	e72c      	b.n	800557a <d_print_comp+0x29b6>
 8005720:	2202      	movs	r2, #2
 8005722:	4970      	ldr	r1, [pc, #448]	; (80058e4 <d_print_comp+0x2d20>)
 8005724:	4620      	mov	r0, r4
 8005726:	f7fa fe29 	bl	800037c <d_append_buffer>
 800572a:	9905      	ldr	r1, [sp, #20]
 800572c:	686a      	ldr	r2, [r5, #4]
 800572e:	f7fd bb3c 	b.w	8002daa <d_print_comp+0x1e6>
 8005732:	2202      	movs	r2, #2
 8005734:	496c      	ldr	r1, [pc, #432]	; (80058e8 <d_print_comp+0x2d24>)
 8005736:	4620      	mov	r0, r4
 8005738:	f7fa fe20 	bl	800037c <d_append_buffer>
 800573c:	9905      	ldr	r1, [sp, #20]
 800573e:	686a      	ldr	r2, [r5, #4]
 8005740:	f7fd bb33 	b.w	8002daa <d_print_comp+0x1e6>
 8005744:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005748:	2fff      	cmp	r7, #255	; 0xff
 800574a:	d111      	bne.n	8005770 <d_print_comp+0x2bac>
 800574c:	2600      	movs	r6, #0
 800574e:	4639      	mov	r1, r7
 8005750:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005754:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005758:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800575c:	4620      	mov	r0, r4
 800575e:	4798      	blx	r3
 8005760:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005764:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005768:	3301      	adds	r3, #1
 800576a:	4637      	mov	r7, r6
 800576c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005770:	1c7a      	adds	r2, r7, #1
 8005772:	236c      	movs	r3, #108	; 0x6c
 8005774:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005778:	55e3      	strb	r3, [r4, r7]
 800577a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800577e:	686a      	ldr	r2, [r5, #4]
 8005780:	9905      	ldr	r1, [sp, #20]
 8005782:	f7fd bb12 	b.w	8002daa <d_print_comp+0x1e6>
 8005786:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800578a:	2fff      	cmp	r7, #255	; 0xff
 800578c:	d111      	bne.n	80057b2 <d_print_comp+0x2bee>
 800578e:	2600      	movs	r6, #0
 8005790:	4639      	mov	r1, r7
 8005792:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005796:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800579a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800579e:	4620      	mov	r0, r4
 80057a0:	4798      	blx	r3
 80057a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057a6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80057aa:	3301      	adds	r3, #1
 80057ac:	4637      	mov	r7, r6
 80057ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057b2:	1c7a      	adds	r2, r7, #1
 80057b4:	2375      	movs	r3, #117	; 0x75
 80057b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057ba:	55e3      	strb	r3, [r4, r7]
 80057bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057c0:	686a      	ldr	r2, [r5, #4]
 80057c2:	9905      	ldr	r1, [sp, #20]
 80057c4:	f7fd baf1 	b.w	8002daa <d_print_comp+0x1e6>
 80057c8:	9905      	ldr	r1, [sp, #20]
 80057ca:	686a      	ldr	r2, [r5, #4]
 80057cc:	f7fd baed 	b.w	8002daa <d_print_comp+0x1e6>
 80057d0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057d4:	2fff      	cmp	r7, #255	; 0xff
 80057d6:	d110      	bne.n	80057fa <d_print_comp+0x2c36>
 80057d8:	4639      	mov	r1, r7
 80057da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057e6:	4620      	mov	r0, r4
 80057e8:	4798      	blx	r3
 80057ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057ee:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057f2:	3301      	adds	r3, #1
 80057f4:	464f      	mov	r7, r9
 80057f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	1c7a      	adds	r2, r7, #1
 80057fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005802:	55e3      	strb	r3, [r4, r7]
 8005804:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005808:	e6fc      	b.n	8005604 <d_print_comp+0x2a40>
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	6891      	ldr	r1, [r2, #8]
 800580e:	2901      	cmp	r1, #1
 8005810:	f47d aa69 	bne.w	8002ce6 <d_print_comp+0x122>
 8005814:	6852      	ldr	r2, [r2, #4]
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	2a3e      	cmp	r2, #62	; 0x3e
 800581a:	f47d aa64 	bne.w	8002ce6 <d_print_comp+0x122>
 800581e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005822:	2fff      	cmp	r7, #255	; 0xff
 8005824:	d110      	bne.n	8005848 <d_print_comp+0x2c84>
 8005826:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800582a:	4639      	mov	r1, r7
 800582c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005830:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005834:	4620      	mov	r0, r4
 8005836:	4798      	blx	r3
 8005838:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800583c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005840:	3301      	adds	r3, #1
 8005842:	4647      	mov	r7, r8
 8005844:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005848:	2328      	movs	r3, #40	; 0x28
 800584a:	1c7a      	adds	r2, r7, #1
 800584c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005850:	55e3      	strb	r3, [r4, r7]
 8005852:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005856:	68ab      	ldr	r3, [r5, #8]
 8005858:	f7fd ba45 	b.w	8002ce6 <d_print_comp+0x122>
 800585c:	465a      	mov	r2, fp
 800585e:	4631      	mov	r1, r6
 8005860:	4620      	mov	r0, r4
 8005862:	f000 feb7 	bl	80065d4 <d_print_subexpr>
 8005866:	463a      	mov	r2, r7
 8005868:	4631      	mov	r1, r6
 800586a:	4620      	mov	r0, r4
 800586c:	f000 fe72 	bl	8006554 <d_print_expr_op>
 8005870:	4652      	mov	r2, sl
 8005872:	4631      	mov	r1, r6
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fead 	bl	80065d4 <d_print_subexpr>
 800587a:	2203      	movs	r2, #3
 800587c:	491b      	ldr	r1, [pc, #108]	; (80058ec <d_print_comp+0x2d28>)
 800587e:	4620      	mov	r0, r4
 8005880:	f7fa fd7c 	bl	800037c <d_append_buffer>
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fea3 	bl	80065d4 <d_print_subexpr>
 800588e:	9905      	ldr	r1, [sp, #20]
 8005890:	686a      	ldr	r2, [r5, #4]
 8005892:	f7fd ba8a 	b.w	8002daa <d_print_comp+0x1e6>
 8005896:	9905      	ldr	r1, [sp, #20]
 8005898:	686a      	ldr	r2, [r5, #4]
 800589a:	f7fd ba86 	b.w	8002daa <d_print_comp+0x1e6>
 800589e:	9905      	ldr	r1, [sp, #20]
 80058a0:	686a      	ldr	r2, [r5, #4]
 80058a2:	f7fd ba82 	b.w	8002daa <d_print_comp+0x1e6>
 80058a6:	68d3      	ldr	r3, [r2, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b29      	cmp	r3, #41	; 0x29
 80058ac:	bf1c      	itt	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	4631      	mov	r1, r6
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fe8b 	bl	80065d4 <d_print_subexpr>
 80058be:	f7fd ba22 	b.w	8002d06 <d_print_comp+0x142>
 80058c2:	463a      	mov	r2, r7
 80058c4:	4631      	mov	r1, r6
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 fe44 	bl	8006554 <d_print_expr_op>
 80058cc:	e5fe      	b.n	80054cc <d_print_comp+0x2908>
 80058ce:	2301      	movs	r3, #1
 80058d0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80058d4:	686a      	ldr	r2, [r5, #4]
 80058d6:	f7fd ba68 	b.w	8002daa <d_print_comp+0x1e6>
 80058da:	bf00      	nop
 80058dc:	080b3bf0 	.word	0x080b3bf0
 80058e0:	080b3bf4 	.word	0x080b3bf4
 80058e4:	080b3bec 	.word	0x080b3bec
 80058e8:	080b3be8 	.word	0x080b3be8
 80058ec:	080b3bdc 	.word	0x080b3bdc

080058f0 <d_print_mod>:
 80058f0:	7813      	ldrb	r3, [r2, #0]
 80058f2:	3b03      	subs	r3, #3
 80058f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	4615      	mov	r5, r2
 80058fa:	4604      	mov	r4, r0
 80058fc:	460e      	mov	r6, r1
 80058fe:	2b4c      	cmp	r3, #76	; 0x4c
 8005900:	f200 82c8 	bhi.w	8005e94 <d_print_mod+0x5a4>
 8005904:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005908:	02c60075 	.word	0x02c60075
 800590c:	02c602c6 	.word	0x02c602c6
 8005910:	02c602c6 	.word	0x02c602c6
 8005914:	02c602c6 	.word	0x02c602c6
 8005918:	02c602c6 	.word	0x02c602c6
 800591c:	02c602c6 	.word	0x02c602c6
 8005920:	02c602c6 	.word	0x02c602c6
 8005924:	02c602c6 	.word	0x02c602c6
 8005928:	02c602c6 	.word	0x02c602c6
 800592c:	02c602c6 	.word	0x02c602c6
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	00a1007a 	.word	0x00a1007a
 8005938:	007a00c8 	.word	0x007a00c8
 800593c:	00c800a1 	.word	0x00c800a1
 8005940:	010a00ee 	.word	0x010a00ee
 8005944:	01480126 	.word	0x01480126
 8005948:	02790166 	.word	0x02790166
 800594c:	029f0252 	.word	0x029f0252
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c60184 	.word	0x02c60184
 800595c:	02c601cc 	.word	0x02c601cc
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	02c602c6 	.word	0x02c602c6
 8005968:	02c602c6 	.word	0x02c602c6
 800596c:	02c602c6 	.word	0x02c602c6
 8005970:	02c602c6 	.word	0x02c602c6
 8005974:	02c602c6 	.word	0x02c602c6
 8005978:	02c602c6 	.word	0x02c602c6
 800597c:	02c602c6 	.word	0x02c602c6
 8005980:	02c602c6 	.word	0x02c602c6
 8005984:	02c602c6 	.word	0x02c602c6
 8005988:	02c602c6 	.word	0x02c602c6
 800598c:	02c602c6 	.word	0x02c602c6
 8005990:	02c602c6 	.word	0x02c602c6
 8005994:	02c602c6 	.word	0x02c602c6
 8005998:	01f402c6 	.word	0x01f402c6
 800599c:	022a02c6 	.word	0x022a02c6
 80059a0:	004d      	.short	0x004d
 80059a2:	4fd7      	ldr	r7, [pc, #860]	; (8005d00 <d_print_mod+0x410>)
 80059a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059a8:	f107 0806 	add.w	r8, r7, #6
 80059ac:	f04f 0900 	mov.w	r9, #0
 80059b0:	e016      	b.n	80059e0 <d_print_mod+0xf0>
 80059b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80059be:	4798      	blx	r3
 80059c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059ca:	2200      	movs	r2, #0
 80059cc:	2301      	movs	r3, #1
 80059ce:	4547      	cmp	r7, r8
 80059d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059d4:	f804 a002 	strb.w	sl, [r4, r2]
 80059d8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80059dc:	f000 825f 	beq.w	8005e9e <d_print_mod+0x5ae>
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	4619      	mov	r1, r3
 80059e4:	4620      	mov	r0, r4
 80059e6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059ea:	d0e2      	beq.n	80059b2 <d_print_mod+0xc2>
 80059ec:	461a      	mov	r2, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	e7ed      	b.n	80059ce <d_print_mod+0xde>
 80059f2:	68aa      	ldr	r2, [r5, #8]
 80059f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	f7fd b8e4 	b.w	8002bc4 <d_print_comp>
 80059fc:	4dc1      	ldr	r5, [pc, #772]	; (8005d04 <d_print_mod+0x414>)
 80059fe:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a02:	f105 0609 	add.w	r6, r5, #9
 8005a06:	2700      	movs	r7, #0
 8005a08:	e016      	b.n	8005a38 <d_print_mod+0x148>
 8005a0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a12:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a16:	4798      	blx	r3
 8005a18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a22:	2200      	movs	r2, #0
 8005a24:	2301      	movs	r3, #1
 8005a26:	42ae      	cmp	r6, r5
 8005a28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a2c:	f804 8002 	strb.w	r8, [r4, r2]
 8005a30:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a34:	f000 80ea 	beq.w	8005c0c <d_print_mod+0x31c>
 8005a38:	2bff      	cmp	r3, #255	; 0xff
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a42:	d0e2      	beq.n	8005a0a <d_print_mod+0x11a>
 8005a44:	461a      	mov	r2, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	e7ed      	b.n	8005a26 <d_print_mod+0x136>
 8005a4a:	4daf      	ldr	r5, [pc, #700]	; (8005d08 <d_print_mod+0x418>)
 8005a4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a50:	f105 0609 	add.w	r6, r5, #9
 8005a54:	2700      	movs	r7, #0
 8005a56:	e016      	b.n	8005a86 <d_print_mod+0x196>
 8005a58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a60:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a64:	4798      	blx	r3
 8005a66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a70:	2200      	movs	r2, #0
 8005a72:	2301      	movs	r3, #1
 8005a74:	42ae      	cmp	r6, r5
 8005a76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a7a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a7e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a82:	f000 80c3 	beq.w	8005c0c <d_print_mod+0x31c>
 8005a86:	2bff      	cmp	r3, #255	; 0xff
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a90:	d0e2      	beq.n	8005a58 <d_print_mod+0x168>
 8005a92:	461a      	mov	r2, r3
 8005a94:	3301      	adds	r3, #1
 8005a96:	e7ed      	b.n	8005a74 <d_print_mod+0x184>
 8005a98:	4d9c      	ldr	r5, [pc, #624]	; (8005d0c <d_print_mod+0x41c>)
 8005a9a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a9e:	1dae      	adds	r6, r5, #6
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	e016      	b.n	8005ad2 <d_print_mod+0x1e2>
 8005aa4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005aa8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005aac:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005ab0:	4798      	blx	r3
 8005ab2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005abc:	2200      	movs	r2, #0
 8005abe:	2301      	movs	r3, #1
 8005ac0:	42b5      	cmp	r5, r6
 8005ac2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ac6:	f804 8002 	strb.w	r8, [r4, r2]
 8005aca:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005ace:	f000 809d 	beq.w	8005c0c <d_print_mod+0x31c>
 8005ad2:	2bff      	cmp	r3, #255	; 0xff
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005adc:	d0e2      	beq.n	8005aa4 <d_print_mod+0x1b4>
 8005ade:	461a      	mov	r2, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	e7ed      	b.n	8005ac0 <d_print_mod+0x1d0>
 8005ae4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ae8:	29ff      	cmp	r1, #255	; 0xff
 8005aea:	d10f      	bne.n	8005b0c <d_print_mod+0x21c>
 8005aec:	2500      	movs	r5, #0
 8005aee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005af2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005af6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005afa:	4798      	blx	r3
 8005afc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b00:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b04:	3301      	adds	r3, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	1c4b      	adds	r3, r1, #1
 8005b10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b14:	5462      	strb	r2, [r4, r1]
 8005b16:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b1a:	e05d      	b.n	8005bd8 <d_print_mod+0x2e8>
 8005b1c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b20:	29ff      	cmp	r1, #255	; 0xff
 8005b22:	d10f      	bne.n	8005b44 <d_print_mod+0x254>
 8005b24:	2500      	movs	r5, #0
 8005b26:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b2a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b2e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b32:	4798      	blx	r3
 8005b34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b38:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b44:	2220      	movs	r2, #32
 8005b46:	1c4b      	adds	r3, r1, #1
 8005b48:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b4c:	5462      	strb	r2, [r4, r1]
 8005b4e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b52:	e154      	b.n	8005dfe <d_print_mod+0x50e>
 8005b54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b58:	29ff      	cmp	r1, #255	; 0xff
 8005b5a:	d10f      	bne.n	8005b7c <d_print_mod+0x28c>
 8005b5c:	2700      	movs	r7, #0
 8005b5e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b62:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b66:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b6a:	4798      	blx	r3
 8005b6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b70:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b74:	3301      	adds	r3, #1
 8005b76:	4639      	mov	r1, r7
 8005b78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b7c:	1c4a      	adds	r2, r1, #1
 8005b7e:	2320      	movs	r3, #32
 8005b80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b84:	5463      	strb	r3, [r4, r1]
 8005b86:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	68ea      	ldr	r2, [r5, #12]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	f7fd b816 	b.w	8002bc4 <d_print_comp>
 8005b98:	f011 0604 	ands.w	r6, r1, #4
 8005b9c:	d136      	bne.n	8005c0c <d_print_mod+0x31c>
 8005b9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ba2:	29ff      	cmp	r1, #255	; 0xff
 8005ba4:	d10e      	bne.n	8005bc4 <d_print_mod+0x2d4>
 8005ba6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005baa:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005bae:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005bb2:	4798      	blx	r3
 8005bb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bb8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005bc4:	232a      	movs	r3, #42	; 0x2a
 8005bc6:	1c4a      	adds	r2, r1, #1
 8005bc8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bcc:	5463      	strb	r3, [r4, r1]
 8005bce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005bd2:	e01b      	b.n	8005c0c <d_print_mod+0x31c>
 8005bd4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005bd8:	2bff      	cmp	r3, #255	; 0xff
 8005bda:	f040 81a9 	bne.w	8005f30 <d_print_mod+0x640>
 8005bde:	2500      	movs	r5, #0
 8005be0:	4619      	mov	r1, r3
 8005be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005be6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4798      	blx	r3
 8005bf2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2226      	movs	r2, #38	; 0x26
 8005c02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005c06:	54e2      	strb	r2, [r4, r3]
 8005c08:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005c14:	2b28      	cmp	r3, #40	; 0x28
 8005c16:	d019      	beq.n	8005c4c <d_print_mod+0x35c>
 8005c18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c1c:	29ff      	cmp	r1, #255	; 0xff
 8005c1e:	f040 818b 	bne.w	8005f38 <d_print_mod+0x648>
 8005c22:	2700      	movs	r7, #0
 8005c24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005c28:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005c2c:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c30:	4798      	blx	r3
 8005c32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c36:	3301      	adds	r3, #1
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2320      	movs	r3, #32
 8005c42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c46:	5463      	strb	r3, [r4, r1]
 8005c48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c4c:	68aa      	ldr	r2, [r5, #8]
 8005c4e:	4d30      	ldr	r5, [pc, #192]	; (8005d10 <d_print_mod+0x420>)
 8005c50:	4631      	mov	r1, r6
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7fc ffb6 	bl	8002bc4 <d_print_comp>
 8005c58:	1cee      	adds	r6, r5, #3
 8005c5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c5e:	2700      	movs	r7, #0
 8005c60:	e015      	b.n	8005c8e <d_print_mod+0x39e>
 8005c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c6a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c6e:	4798      	blx	r3
 8005c70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c74:	3301      	adds	r3, #1
 8005c76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	42ae      	cmp	r6, r5
 8005c80:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c84:	f804 8002 	strb.w	r8, [r4, r2]
 8005c88:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c8c:	d0be      	beq.n	8005c0c <d_print_mod+0x31c>
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	4619      	mov	r1, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c98:	d0e3      	beq.n	8005c62 <d_print_mod+0x372>
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	e7ee      	b.n	8005c7e <d_print_mod+0x38e>
 8005ca0:	4f1c      	ldr	r7, [pc, #112]	; (8005d14 <d_print_mod+0x424>)
 8005ca2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005ca6:	f107 080a 	add.w	r8, r7, #10
 8005caa:	f04f 0900 	mov.w	r9, #0
 8005cae:	e016      	b.n	8005cde <d_print_mod+0x3ee>
 8005cb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005cb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005cb8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005cbc:	4798      	blx	r3
 8005cbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2301      	movs	r3, #1
 8005ccc:	45b8      	cmp	r8, r7
 8005cce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cd2:	f804 a002 	strb.w	sl, [r4, r2]
 8005cd6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005cda:	f000 811e 	beq.w	8005f1a <d_print_mod+0x62a>
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005ce8:	d0e2      	beq.n	8005cb0 <d_print_mod+0x3c0>
 8005cea:	461a      	mov	r2, r3
 8005cec:	3301      	adds	r3, #1
 8005cee:	e7ed      	b.n	8005ccc <d_print_mod+0x3dc>
 8005cf0:	4d09      	ldr	r5, [pc, #36]	; (8005d18 <d_print_mod+0x428>)
 8005cf2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cf6:	f105 0611 	add.w	r6, r5, #17
 8005cfa:	2700      	movs	r7, #0
 8005cfc:	e025      	b.n	8005d4a <d_print_mod+0x45a>
 8005cfe:	bf00      	nop
 8005d00:	080b3ce0 	.word	0x080b3ce0
 8005d04:	080b3c9f 	.word	0x080b3c9f
 8005d08:	080b3cab 	.word	0x080b3cab
 8005d0c:	080b3cb8 	.word	0x080b3cb8
 8005d10:	080b3d04 	.word	0x080b3d04
 8005d14:	080b3d08 	.word	0x080b3d08
 8005d18:	080b3cbf 	.word	0x080b3cbf
 8005d1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d24:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d28:	4798      	blx	r3
 8005d2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d2e:	3301      	adds	r3, #1
 8005d30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d34:	2200      	movs	r2, #0
 8005d36:	2301      	movs	r3, #1
 8005d38:	42ae      	cmp	r6, r5
 8005d3a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d3e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d46:	f43f af61 	beq.w	8005c0c <d_print_mod+0x31c>
 8005d4a:	2bff      	cmp	r3, #255	; 0xff
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d54:	d0e2      	beq.n	8005d1c <d_print_mod+0x42c>
 8005d56:	461a      	mov	r2, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	e7ed      	b.n	8005d38 <d_print_mod+0x448>
 8005d5c:	4f77      	ldr	r7, [pc, #476]	; (8005f3c <d_print_mod+0x64c>)
 8005d5e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d62:	f107 0809 	add.w	r8, r7, #9
 8005d66:	f04f 0900 	mov.w	r9, #0
 8005d6a:	e016      	b.n	8005d9a <d_print_mod+0x4aa>
 8005d6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d78:	4798      	blx	r3
 8005d7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d84:	2200      	movs	r2, #0
 8005d86:	2301      	movs	r3, #1
 8005d88:	4547      	cmp	r7, r8
 8005d8a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d8e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d92:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d96:	f000 8082 	beq.w	8005e9e <d_print_mod+0x5ae>
 8005d9a:	2bff      	cmp	r3, #255	; 0xff
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005da4:	d0e2      	beq.n	8005d6c <d_print_mod+0x47c>
 8005da6:	461a      	mov	r2, r3
 8005da8:	3301      	adds	r3, #1
 8005daa:	e7ed      	b.n	8005d88 <d_print_mod+0x498>
 8005dac:	4d64      	ldr	r5, [pc, #400]	; (8005f40 <d_print_mod+0x650>)
 8005dae:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005db2:	f105 0608 	add.w	r6, r5, #8
 8005db6:	2700      	movs	r7, #0
 8005db8:	e016      	b.n	8005de8 <d_print_mod+0x4f8>
 8005dba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dc2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005dc6:	4798      	blx	r3
 8005dc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	42ae      	cmp	r6, r5
 8005dd8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ddc:	f804 8002 	strb.w	r8, [r4, r2]
 8005de0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005de4:	f43f af12 	beq.w	8005c0c <d_print_mod+0x31c>
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	4619      	mov	r1, r3
 8005dec:	4620      	mov	r0, r4
 8005dee:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005df2:	d0e2      	beq.n	8005dba <d_print_mod+0x4ca>
 8005df4:	461a      	mov	r2, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	e7ed      	b.n	8005dd6 <d_print_mod+0x4e6>
 8005dfa:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dfe:	4d51      	ldr	r5, [pc, #324]	; (8005f44 <d_print_mod+0x654>)
 8005e00:	2700      	movs	r7, #0
 8005e02:	1cae      	adds	r6, r5, #2
 8005e04:	e016      	b.n	8005e34 <d_print_mod+0x544>
 8005e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e0e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e12:	4798      	blx	r3
 8005e14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2301      	movs	r3, #1
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e28:	f804 8002 	strb.w	r8, [r4, r2]
 8005e2c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e30:	f43f aeec 	beq.w	8005c0c <d_print_mod+0x31c>
 8005e34:	2bff      	cmp	r3, #255	; 0xff
 8005e36:	4619      	mov	r1, r3
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e3e:	d0e2      	beq.n	8005e06 <d_print_mod+0x516>
 8005e40:	461a      	mov	r2, r3
 8005e42:	3301      	adds	r3, #1
 8005e44:	e7ed      	b.n	8005e22 <d_print_mod+0x532>
 8005e46:	4d40      	ldr	r5, [pc, #256]	; (8005f48 <d_print_mod+0x658>)
 8005e48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e4c:	f105 060a 	add.w	r6, r5, #10
 8005e50:	2700      	movs	r7, #0
 8005e52:	e016      	b.n	8005e82 <d_print_mod+0x592>
 8005e54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e5c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e60:	4798      	blx	r3
 8005e62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2301      	movs	r3, #1
 8005e70:	42b5      	cmp	r5, r6
 8005e72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e76:	f804 8002 	strb.w	r8, [r4, r2]
 8005e7a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e7e:	f43f aec5 	beq.w	8005c0c <d_print_mod+0x31c>
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	4619      	mov	r1, r3
 8005e86:	4620      	mov	r0, r4
 8005e88:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e8c:	d0e2      	beq.n	8005e54 <d_print_mod+0x564>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	e7ed      	b.n	8005e70 <d_print_mod+0x580>
 8005e94:	462a      	mov	r2, r5
 8005e96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9a:	f7fc be93 	b.w	8002bc4 <d_print_comp>
 8005e9e:	68ea      	ldr	r2, [r5, #12]
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	f43f aeb3 	beq.w	8005c0c <d_print_mod+0x31c>
 8005ea6:	2bff      	cmp	r3, #255	; 0xff
 8005ea8:	d144      	bne.n	8005f34 <d_print_mod+0x644>
 8005eaa:	2700      	movs	r7, #0
 8005eac:	4619      	mov	r1, r3
 8005eae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005eb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eb6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4798      	blx	r3
 8005ebe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ec2:	68ea      	ldr	r2, [r5, #12]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005eca:	463b      	mov	r3, r7
 8005ecc:	2101      	movs	r1, #1
 8005ece:	2528      	movs	r5, #40	; 0x28
 8005ed0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	54e5      	strb	r5, [r4, r3]
 8005eda:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005ede:	f7fc fe71 	bl	8002bc4 <d_print_comp>
 8005ee2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ee6:	29ff      	cmp	r1, #255	; 0xff
 8005ee8:	d120      	bne.n	8005f2c <d_print_mod+0x63c>
 8005eea:	2500      	movs	r5, #0
 8005eec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ef4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4798      	blx	r3
 8005efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f00:	3301      	adds	r3, #1
 8005f02:	4629      	mov	r1, r5
 8005f04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2329      	movs	r3, #41	; 0x29
 8005f0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f10:	5463      	strb	r3, [r4, r1]
 8005f12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	68aa      	ldr	r2, [r5, #8]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fc fe50 	bl	8002bc4 <d_print_comp>
 8005f24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f28:	29ff      	cmp	r1, #255	; 0xff
 8005f2a:	d0de      	beq.n	8005eea <d_print_mod+0x5fa>
 8005f2c:	1c4a      	adds	r2, r1, #1
 8005f2e:	e7ec      	b.n	8005f0a <d_print_mod+0x61a>
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	e665      	b.n	8005c00 <d_print_mod+0x310>
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	e7ca      	b.n	8005ece <d_print_mod+0x5de>
 8005f38:	1c4a      	adds	r2, r1, #1
 8005f3a:	e681      	b.n	8005c40 <d_print_mod+0x350>
 8005f3c:	080b3cd3 	.word	0x080b3cd3
 8005f40:	080b3ceb 	.word	0x080b3ceb
 8005f44:	080b3ce8 	.word	0x080b3ce8
 8005f48:	080b3cf8 	.word	0x080b3cf8

08005f4c <d_print_function_type.isra.15>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	460e      	mov	r6, r1
 8005f54:	4617      	mov	r7, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	b1d3      	cbz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	b9c3      	cbnz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f5e:	462a      	mov	r2, r5
 8005f60:	2001      	movs	r0, #1
 8005f62:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800612c <d_print_function_type.isra.15+0x1e0>
 8005f66:	e001      	b.n	8005f6c <d_print_function_type.isra.15+0x20>
 8005f68:	6893      	ldr	r3, [r2, #8]
 8005f6a:	b98b      	cbnz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f6c:	6853      	ldr	r3, [r2, #4]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3b19      	subs	r3, #25
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b12      	cmp	r3, #18
 8005f76:	fa00 f103 	lsl.w	r1, r0, r3
 8005f7a:	d806      	bhi.n	8005f8a <d_print_function_type.isra.15+0x3e>
 8005f7c:	ea11 0f0c 	tst.w	r1, ip
 8005f80:	f040 80c7 	bne.w	8006112 <d_print_function_type.isra.15+0x1c6>
 8005f84:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f88:	d154      	bne.n	8006034 <d_print_function_type.isra.15+0xe8>
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d1eb      	bne.n	8005f68 <d_print_function_type.isra.15+0x1c>
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f8c6 	bl	8006130 <d_print_mod_list>
 8005fa4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fa8:	29ff      	cmp	r1, #255	; 0xff
 8005faa:	f040 80a4 	bne.w	80060f6 <d_print_function_type.isra.15+0x1aa>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005fb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4798      	blx	r3
 8005fc0:	2328      	movs	r3, #40	; 0x28
 8005fc2:	7023      	strb	r3, [r4, #0]
 8005fc4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	f000 8097 	beq.w	800610e <d_print_function_type.isra.15+0x1c2>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7fc fdee 	bl	8002bc4 <d_print_comp>
 8005fe8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fec:	2bff      	cmp	r3, #255	; 0xff
 8005fee:	f040 808e 	bne.w	800610e <d_print_function_type.isra.15+0x1c2>
 8005ff2:	2700      	movs	r7, #0
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ffa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ffe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006002:	4620      	mov	r0, r4
 8006004:	4798      	blx	r3
 8006006:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006010:	463b      	mov	r3, r7
 8006012:	2201      	movs	r2, #1
 8006014:	2029      	movs	r0, #41	; 0x29
 8006016:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800601a:	4631      	mov	r1, r6
 800601c:	54e0      	strb	r0, [r4, r3]
 800601e:	462a      	mov	r2, r5
 8006020:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006024:	2301      	movs	r3, #1
 8006026:	4620      	mov	r0, r4
 8006028:	f000 f882 	bl	8006130 <d_print_mod_list>
 800602c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006034:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006038:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800603c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006040:	2a28      	cmp	r2, #40	; 0x28
 8006042:	d01e      	beq.n	8006082 <d_print_function_type.isra.15+0x136>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d01c      	beq.n	8006082 <d_print_function_type.isra.15+0x136>
 8006048:	29ff      	cmp	r1, #255	; 0xff
 800604a:	d112      	bne.n	8006072 <d_print_function_type.isra.15+0x126>
 800604c:	2300      	movs	r3, #0
 800604e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006052:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800605a:	4620      	mov	r0, r4
 800605c:	4798      	blx	r3
 800605e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006062:	2220      	movs	r2, #32
 8006064:	3301      	adds	r3, #1
 8006066:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800606a:	7022      	strb	r2, [r4, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	1c4a      	adds	r2, r1, #1
 8006070:	e01a      	b.n	80060a8 <d_print_function_type.isra.15+0x15c>
 8006072:	1c4b      	adds	r3, r1, #1
 8006074:	2220      	movs	r2, #32
 8006076:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800607a:	5462      	strb	r2, [r4, r1]
 800607c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006080:	4619      	mov	r1, r3
 8006082:	29ff      	cmp	r1, #255	; 0xff
 8006084:	d1f3      	bne.n	800606e <d_print_function_type.isra.15+0x122>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800608e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006092:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006096:	4620      	mov	r0, r4
 8006098:	4798      	blx	r3
 800609a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800609e:	3301      	adds	r3, #1
 80060a0:	4641      	mov	r1, r8
 80060a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a6:	2201      	movs	r2, #1
 80060a8:	2328      	movs	r3, #40	; 0x28
 80060aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80060ae:	5463      	strb	r3, [r4, r1]
 80060b0:	f04f 0900 	mov.w	r9, #0
 80060b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80060b8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 80060bc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80060c0:	464b      	mov	r3, r9
 80060c2:	462a      	mov	r2, r5
 80060c4:	4631      	mov	r1, r6
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f832 	bl	8006130 <d_print_mod_list>
 80060cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80060d0:	2bff      	cmp	r3, #255	; 0xff
 80060d2:	d123      	bne.n	800611c <d_print_function_type.isra.15+0x1d0>
 80060d4:	4619      	mov	r1, r3
 80060d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060e2:	4620      	mov	r0, r4
 80060e4:	4798      	blx	r3
 80060e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ea:	2229      	movs	r2, #41	; 0x29
 80060ec:	3301      	adds	r3, #1
 80060ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060f2:	7022      	strb	r2, [r4, #0]
 80060f4:	2101      	movs	r1, #1
 80060f6:	2228      	movs	r2, #40	; 0x28
 80060f8:	1c4b      	adds	r3, r1, #1
 80060fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060fe:	5462      	strb	r2, [r4, r1]
 8006100:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	2a00      	cmp	r2, #0
 8006108:	f43f af70 	beq.w	8005fec <d_print_function_type.isra.15+0xa0>
 800610c:	e768      	b.n	8005fe0 <d_print_function_type.isra.15+0x94>
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	e780      	b.n	8006014 <d_print_function_type.isra.15+0xc8>
 8006112:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800611a:	e793      	b.n	8006044 <d_print_function_type.isra.15+0xf8>
 800611c:	2229      	movs	r2, #41	; 0x29
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006124:	54e2      	strb	r2, [r4, r3]
 8006126:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800612a:	e73d      	b.n	8005fa8 <d_print_function_type.isra.15+0x5c>
 800612c:	00043107 	.word	0x00043107

08006130 <d_print_mod_list>:
 8006130:	2a00      	cmp	r2, #0
 8006132:	f000 80ac 	beq.w	800628e <d_print_mod_list+0x15e>
 8006136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	461f      	mov	r7, r3
 800613c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006140:	b089      	sub	sp, #36	; 0x24
 8006142:	4605      	mov	r5, r0
 8006144:	bb4b      	cbnz	r3, 800619a <d_print_mod_list+0x6a>
 8006146:	4688      	mov	r8, r1
 8006148:	4614      	mov	r4, r2
 800614a:	f04f 0901 	mov.w	r9, #1
 800614e:	e002      	b.n	8006156 <d_print_mod_list+0x26>
 8006150:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006154:	bb0b      	cbnz	r3, 800619a <d_print_mod_list+0x6a>
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	b9e3      	cbnz	r3, 8006194 <d_print_mod_list+0x64>
 800615a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800615e:	f89a 6000 	ldrb.w	r6, [sl]
 8006162:	4630      	mov	r0, r6
 8006164:	b917      	cbnz	r7, 800616c <d_print_mod_list+0x3c>
 8006166:	f7fa f93f 	bl	80003e8 <is_fnqual_component_type>
 800616a:	b998      	cbnz	r0, 8006194 <d_print_mod_list+0x64>
 800616c:	68e3      	ldr	r3, [r4, #12]
 800616e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006172:	2e29      	cmp	r6, #41	; 0x29
 8006174:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006178:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800617c:	4652      	mov	r2, sl
 800617e:	4641      	mov	r1, r8
 8006180:	4628      	mov	r0, r5
 8006182:	d00d      	beq.n	80061a0 <d_print_mod_list+0x70>
 8006184:	2e2a      	cmp	r6, #42	; 0x2a
 8006186:	d015      	beq.n	80061b4 <d_print_mod_list+0x84>
 8006188:	2e02      	cmp	r6, #2
 800618a:	d01d      	beq.n	80061c8 <d_print_mod_list+0x98>
 800618c:	f7ff fbb0 	bl	80058f0 <d_print_mod>
 8006190:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006194:	6824      	ldr	r4, [r4, #0]
 8006196:	2c00      	cmp	r4, #0
 8006198:	d1da      	bne.n	8006150 <d_print_mod_list+0x20>
 800619a:	b009      	add	sp, #36	; 0x24
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	f10a 020c 	add.w	r2, sl, #12
 80061a6:	f7ff fed1 	bl	8005f4c <d_print_function_type.isra.15>
 80061aa:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061ae:	b009      	add	sp, #36	; 0x24
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	f10a 0208 	add.w	r2, sl, #8
 80061ba:	f000 f8f1 	bl	80063a0 <d_print_array_type.isra.14>
 80061be:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061c2:	b009      	add	sp, #36	; 0x24
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	2600      	movs	r6, #0
 80061ca:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 80061ce:	f8da 2008 	ldr.w	r2, [sl, #8]
 80061d2:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80061d6:	f7fc fcf5 	bl	8002bc4 <d_print_comp>
 80061da:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 80061de:	f018 0704 	ands.w	r7, r8, #4
 80061e2:	d02f      	beq.n	8006244 <d_print_mod_list+0x114>
 80061e4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061e8:	29ff      	cmp	r1, #255	; 0xff
 80061ea:	f040 80cf 	bne.w	800638c <d_print_mod_list+0x25c>
 80061ee:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061f2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061f6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061fa:	4628      	mov	r0, r5
 80061fc:	4798      	blx	r3
 80061fe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006202:	3301      	adds	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 800620a:	2201      	movs	r2, #1
 800620c:	232e      	movs	r3, #46	; 0x2e
 800620e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8006212:	546b      	strb	r3, [r5, r1]
 8006214:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	68dc      	ldr	r4, [r3, #12]
 800621c:	7820      	ldrb	r0, [r4, #0]
 800621e:	2846      	cmp	r0, #70	; 0x46
 8006220:	d102      	bne.n	8006228 <d_print_mod_list+0xf8>
 8006222:	e035      	b.n	8006290 <d_print_mod_list+0x160>
 8006224:	68a4      	ldr	r4, [r4, #8]
 8006226:	7820      	ldrb	r0, [r4, #0]
 8006228:	f7fa f8de 	bl	80003e8 <is_fnqual_component_type>
 800622c:	2800      	cmp	r0, #0
 800622e:	d1f9      	bne.n	8006224 <d_print_mod_list+0xf4>
 8006230:	4622      	mov	r2, r4
 8006232:	4641      	mov	r1, r8
 8006234:	4628      	mov	r0, r5
 8006236:	f7fc fcc5 	bl	8002bc4 <d_print_comp>
 800623a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800623e:	b009      	add	sp, #36	; 0x24
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	4e52      	ldr	r6, [pc, #328]	; (8006390 <d_print_mod_list+0x260>)
 8006246:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800624a:	f106 0902 	add.w	r9, r6, #2
 800624e:	e015      	b.n	800627c <d_print_mod_list+0x14c>
 8006250:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006254:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006258:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800625c:	4798      	blx	r3
 800625e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006262:	3301      	adds	r3, #1
 8006264:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006268:	2200      	movs	r2, #0
 800626a:	2301      	movs	r3, #1
 800626c:	45b1      	cmp	r9, r6
 800626e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006272:	f805 a002 	strb.w	sl, [r5, r2]
 8006276:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800627a:	d0cd      	beq.n	8006218 <d_print_mod_list+0xe8>
 800627c:	2bff      	cmp	r3, #255	; 0xff
 800627e:	4619      	mov	r1, r3
 8006280:	4628      	mov	r0, r5
 8006282:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006286:	d0e3      	beq.n	8006250 <d_print_mod_list+0x120>
 8006288:	461a      	mov	r2, r3
 800628a:	3301      	adds	r3, #1
 800628c:	e7ee      	b.n	800626c <d_print_mod_list+0x13c>
 800628e:	4770      	bx	lr
 8006290:	4e40      	ldr	r6, [pc, #256]	; (8006394 <d_print_mod_list+0x264>)
 8006292:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006296:	f106 070d 	add.w	r7, r6, #13
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	e015      	b.n	80062cc <d_print_mod_list+0x19c>
 80062a0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062a4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062a8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062ac:	4798      	blx	r3
 80062ae:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062b8:	2200      	movs	r2, #0
 80062ba:	2301      	movs	r3, #1
 80062bc:	42b7      	cmp	r7, r6
 80062be:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062c2:	f805 a002 	strb.w	sl, [r5, r2]
 80062c6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062ca:	d008      	beq.n	80062de <d_print_mod_list+0x1ae>
 80062cc:	2bff      	cmp	r3, #255	; 0xff
 80062ce:	4619      	mov	r1, r3
 80062d0:	4628      	mov	r0, r5
 80062d2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062d6:	d0e3      	beq.n	80062a0 <d_print_mod_list+0x170>
 80062d8:	461a      	mov	r2, r3
 80062da:	3301      	adds	r3, #1
 80062dc:	e7ee      	b.n	80062bc <d_print_mod_list+0x18c>
 80062de:	68e2      	ldr	r2, [r4, #12]
 80062e0:	492d      	ldr	r1, [pc, #180]	; (8006398 <d_print_mod_list+0x268>)
 80062e2:	3201      	adds	r2, #1
 80062e4:	a801      	add	r0, sp, #4
 80062e6:	f023 f861 	bl	80293ac <sprintf>
 80062ea:	a801      	add	r0, sp, #4
 80062ec:	f000 fd5a 	bl	8006da4 <strlen>
 80062f0:	b328      	cbz	r0, 800633e <d_print_mod_list+0x20e>
 80062f2:	ae01      	add	r6, sp, #4
 80062f4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062f8:	1837      	adds	r7, r6, r0
 80062fa:	f04f 0900 	mov.w	r9, #0
 80062fe:	e015      	b.n	800632c <d_print_mod_list+0x1fc>
 8006300:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006304:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006308:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800630c:	4798      	blx	r3
 800630e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006312:	3301      	adds	r3, #1
 8006314:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006318:	2200      	movs	r2, #0
 800631a:	2301      	movs	r3, #1
 800631c:	42be      	cmp	r6, r7
 800631e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006322:	f805 a002 	strb.w	sl, [r5, r2]
 8006326:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800632a:	d00a      	beq.n	8006342 <d_print_mod_list+0x212>
 800632c:	2bff      	cmp	r3, #255	; 0xff
 800632e:	4619      	mov	r1, r3
 8006330:	4628      	mov	r0, r5
 8006332:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006336:	d0e3      	beq.n	8006300 <d_print_mod_list+0x1d0>
 8006338:	461a      	mov	r2, r3
 800633a:	3301      	adds	r3, #1
 800633c:	e7ee      	b.n	800631c <d_print_mod_list+0x1ec>
 800633e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006342:	4e16      	ldr	r6, [pc, #88]	; (800639c <d_print_mod_list+0x26c>)
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	1cf7      	adds	r7, r6, #3
 800634a:	e016      	b.n	800637a <d_print_mod_list+0x24a>
 800634c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006350:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006354:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006358:	4798      	blx	r3
 800635a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800635e:	3301      	adds	r3, #1
 8006360:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006364:	2200      	movs	r2, #0
 8006366:	2301      	movs	r3, #1
 8006368:	42b7      	cmp	r7, r6
 800636a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800636e:	f805 a002 	strb.w	sl, [r5, r2]
 8006372:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006376:	f43f af55 	beq.w	8006224 <d_print_mod_list+0xf4>
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	4619      	mov	r1, r3
 800637e:	4628      	mov	r0, r5
 8006380:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006384:	d0e2      	beq.n	800634c <d_print_mod_list+0x21c>
 8006386:	461a      	mov	r2, r3
 8006388:	3301      	adds	r3, #1
 800638a:	e7ed      	b.n	8006368 <d_print_mod_list+0x238>
 800638c:	1c4a      	adds	r2, r1, #1
 800638e:	e73d      	b.n	800620c <d_print_mod_list+0xdc>
 8006390:	080b3a20 	.word	0x080b3a20
 8006394:	080b3a24 	.word	0x080b3a24
 8006398:	080b39d0 	.word	0x080b39d0
 800639c:	080b3a34 	.word	0x080b3a34

080063a0 <d_print_array_type.isra.14>:
 80063a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	4690      	mov	r8, r2
 80063aa:	b15b      	cbz	r3, 80063c4 <d_print_array_type.isra.14+0x24>
 80063ac:	461e      	mov	r6, r3
 80063ae:	689d      	ldr	r5, [r3, #8]
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d042      	beq.n	800643a <d_print_array_type.isra.14+0x9a>
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f9      	bne.n	80063ae <d_print_array_type.isra.14+0xe>
 80063ba:	4632      	mov	r2, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff feb6 	bl	8006130 <d_print_mod_list>
 80063c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063c8:	29ff      	cmp	r1, #255	; 0xff
 80063ca:	f040 80b1 	bne.w	8006530 <d_print_array_type.isra.14+0x190>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063dc:	4620      	mov	r0, r4
 80063de:	4798      	blx	r3
 80063e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063e4:	2220      	movs	r2, #32
 80063e6:	3301      	adds	r3, #1
 80063e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063ec:	7022      	strb	r2, [r4, #0]
 80063ee:	2301      	movs	r3, #1
 80063f0:	225b      	movs	r2, #91	; 0x5b
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063f8:	54e2      	strb	r2, [r4, r3]
 80063fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063fe:	f8d8 2000 	ldr.w	r2, [r8]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d140      	bne.n	8006488 <d_print_array_type.isra.14+0xe8>
 8006406:	29ff      	cmp	r1, #255	; 0xff
 8006408:	d145      	bne.n	8006496 <d_print_array_type.isra.14+0xf6>
 800640a:	2500      	movs	r5, #0
 800640c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006414:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006418:	4620      	mov	r0, r4
 800641a:	4798      	blx	r3
 800641c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006420:	3301      	adds	r3, #1
 8006422:	4629      	mov	r1, r5
 8006424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006428:	2201      	movs	r2, #1
 800642a:	235d      	movs	r3, #93	; 0x5d
 800642c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006430:	5463      	strb	r3, [r4, r1]
 8006432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b2a      	cmp	r3, #42	; 0x2a
 8006440:	d12b      	bne.n	800649a <d_print_array_type.isra.14+0xfa>
 8006442:	462b      	mov	r3, r5
 8006444:	4632      	mov	r2, r6
 8006446:	4639      	mov	r1, r7
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fe71 	bl	8006130 <d_print_mod_list>
 800644e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d1cc      	bne.n	80063f0 <d_print_array_type.isra.14+0x50>
 8006456:	2200      	movs	r2, #0
 8006458:	4619      	mov	r1, r3
 800645a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800645e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006462:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006466:	4620      	mov	r0, r4
 8006468:	4798      	blx	r3
 800646a:	235b      	movs	r3, #91	; 0x5b
 800646c:	7023      	strb	r3, [r4, #0]
 800646e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006472:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006476:	f8d8 2000 	ldr.w	r2, [r8]
 800647a:	3301      	adds	r3, #1
 800647c:	2101      	movs	r1, #1
 800647e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006482:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006486:	b132      	cbz	r2, 8006496 <d_print_array_type.isra.14+0xf6>
 8006488:	4639      	mov	r1, r7
 800648a:	4620      	mov	r0, r4
 800648c:	f7fc fb9a 	bl	8002bc4 <d_print_comp>
 8006490:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006494:	e7b7      	b.n	8006406 <d_print_array_type.isra.14+0x66>
 8006496:	1c4a      	adds	r2, r1, #1
 8006498:	e7c7      	b.n	800642a <d_print_array_type.isra.14+0x8a>
 800649a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006550 <d_print_array_type.isra.14+0x1b0>
 800649e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064a2:	f109 0a02 	add.w	sl, r9, #2
 80064a6:	e016      	b.n	80064d6 <d_print_array_type.isra.14+0x136>
 80064a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80064b4:	4798      	blx	r3
 80064b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064ba:	2200      	movs	r2, #0
 80064bc:	3301      	adds	r3, #1
 80064be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064c2:	45ca      	cmp	sl, r9
 80064c4:	f04f 0301 	mov.w	r3, #1
 80064c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064cc:	f804 b002 	strb.w	fp, [r4, r2]
 80064d0:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064d4:	d010      	beq.n	80064f8 <d_print_array_type.isra.14+0x158>
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	4619      	mov	r1, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064e0:	d0e2      	beq.n	80064a8 <d_print_array_type.isra.14+0x108>
 80064e2:	461a      	mov	r2, r3
 80064e4:	45ca      	cmp	sl, r9
 80064e6:	f103 0301 	add.w	r3, r3, #1
 80064ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ee:	f804 b002 	strb.w	fp, [r4, r2]
 80064f2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064f6:	d1ee      	bne.n	80064d6 <d_print_array_type.isra.14+0x136>
 80064f8:	2300      	movs	r3, #0
 80064fa:	4632      	mov	r2, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	4620      	mov	r0, r4
 8006500:	f7ff fe16 	bl	8006130 <d_print_mod_list>
 8006504:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006508:	2bff      	cmp	r3, #255	; 0xff
 800650a:	d119      	bne.n	8006540 <d_print_array_type.isra.14+0x1a0>
 800650c:	2200      	movs	r2, #0
 800650e:	4619      	mov	r1, r3
 8006510:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8006514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006518:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800651c:	4620      	mov	r0, r4
 800651e:	4798      	blx	r3
 8006520:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006524:	2229      	movs	r2, #41	; 0x29
 8006526:	3301      	adds	r3, #1
 8006528:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800652c:	7022      	strb	r2, [r4, #0]
 800652e:	2101      	movs	r1, #1
 8006530:	2220      	movs	r2, #32
 8006532:	1c4b      	adds	r3, r1, #1
 8006534:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006538:	5462      	strb	r2, [r4, r1]
 800653a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800653e:	e788      	b.n	8006452 <d_print_array_type.isra.14+0xb2>
 8006540:	2229      	movs	r2, #41	; 0x29
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006548:	54e2      	strb	r2, [r4, r3]
 800654a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800654e:	e73b      	b.n	80063c8 <d_print_array_type.isra.14+0x28>
 8006550:	080b3c1c 	.word	0x080b3c1c

08006554 <d_print_expr_op>:
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	7815      	ldrb	r5, [r2, #0]
 800655a:	2d31      	cmp	r5, #49	; 0x31
 800655c:	d003      	beq.n	8006566 <d_print_expr_op+0x12>
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f7fc bb2f 	b.w	8002bc4 <d_print_comp>
 8006566:	6893      	ldr	r3, [r2, #8]
 8006568:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800656c:	b37e      	cbz	r6, 80065ce <d_print_expr_op+0x7a>
 800656e:	442e      	add	r6, r5
 8006570:	4604      	mov	r4, r0
 8006572:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006576:	3e01      	subs	r6, #1
 8006578:	3d01      	subs	r5, #1
 800657a:	2700      	movs	r7, #0
 800657c:	e016      	b.n	80065ac <d_print_expr_op+0x58>
 800657e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006582:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006586:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800658a:	4798      	blx	r3
 800658c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006590:	2200      	movs	r2, #0
 8006592:	3301      	adds	r3, #1
 8006594:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006598:	42b5      	cmp	r5, r6
 800659a:	f04f 0301 	mov.w	r3, #1
 800659e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065a2:	f804 8002 	strb.w	r8, [r4, r2]
 80065a6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065aa:	d010      	beq.n	80065ce <d_print_expr_op+0x7a>
 80065ac:	2bff      	cmp	r3, #255	; 0xff
 80065ae:	4619      	mov	r1, r3
 80065b0:	4620      	mov	r0, r4
 80065b2:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80065b6:	d0e2      	beq.n	800657e <d_print_expr_op+0x2a>
 80065b8:	461a      	mov	r2, r3
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	f103 0301 	add.w	r3, r3, #1
 80065c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065c4:	f804 8002 	strb.w	r8, [r4, r2]
 80065c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065cc:	d1ee      	bne.n	80065ac <d_print_expr_op+0x58>
 80065ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d2:	bf00      	nop

080065d4 <d_print_subexpr>:
 80065d4:	7813      	ldrb	r3, [r2, #0]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	d941      	bls.n	8006664 <d_print_subexpr+0x90>
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d03f      	beq.n	8006664 <d_print_subexpr+0x90>
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d03d      	beq.n	8006664 <d_print_subexpr+0x90>
 80065e8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065ec:	2fff      	cmp	r7, #255	; 0xff
 80065ee:	460e      	mov	r6, r1
 80065f0:	4615      	mov	r5, r2
 80065f2:	d13e      	bne.n	8006672 <d_print_subexpr+0x9e>
 80065f4:	f04f 0800 	mov.w	r8, #0
 80065f8:	4639      	mov	r1, r7
 80065fa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065fe:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006602:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8006606:	4798      	blx	r3
 8006608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800660c:	3301      	adds	r3, #1
 800660e:	4647      	mov	r7, r8
 8006610:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006614:	2201      	movs	r2, #1
 8006616:	2328      	movs	r3, #40	; 0x28
 8006618:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800661c:	4631      	mov	r1, r6
 800661e:	55e3      	strb	r3, [r4, r7]
 8006620:	462a      	mov	r2, r5
 8006622:	4620      	mov	r0, r4
 8006624:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006628:	f7fc facc 	bl	8002bc4 <d_print_comp>
 800662c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006630:	29ff      	cmp	r1, #255	; 0xff
 8006632:	d11c      	bne.n	800666e <d_print_subexpr+0x9a>
 8006634:	2500      	movs	r5, #0
 8006636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800663a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800663e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006642:	4620      	mov	r0, r4
 8006644:	4798      	blx	r3
 8006646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800664a:	3301      	adds	r3, #1
 800664c:	4629      	mov	r1, r5
 800664e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006652:	2201      	movs	r2, #1
 8006654:	2329      	movs	r3, #41	; 0x29
 8006656:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800665a:	5463      	strb	r3, [r4, r1]
 800665c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	f7fc baab 	b.w	8002bc4 <d_print_comp>
 800666e:	1c4a      	adds	r2, r1, #1
 8006670:	e7f0      	b.n	8006654 <d_print_subexpr+0x80>
 8006672:	1c7a      	adds	r2, r7, #1
 8006674:	e7cf      	b.n	8006616 <d_print_subexpr+0x42>
 8006676:	bf00      	nop

08006678 <d_maybe_print_fold_expression.isra.20>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	6892      	ldr	r2, [r2, #8]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	7816      	ldrb	r6, [r2, #0]
 8006682:	2e66      	cmp	r6, #102	; 0x66
 8006684:	b083      	sub	sp, #12
 8006686:	d003      	beq.n	8006690 <d_maybe_print_fold_expression.isra.20+0x18>
 8006688:	2000      	movs	r0, #0
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006696:	f899 3000 	ldrb.w	r3, [r9]
 800669a:	2b3b      	cmp	r3, #59	; 0x3b
 800669c:	f000 8110 	beq.w	80068c0 <d_maybe_print_fold_expression.isra.20+0x248>
 80066a0:	2300      	movs	r3, #0
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a8:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 80066ac:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80066b0:	7853      	ldrb	r3, [r2, #1]
 80066b2:	3b4c      	subs	r3, #76	; 0x4c
 80066b4:	460d      	mov	r5, r1
 80066b6:	4604      	mov	r4, r0
 80066b8:	2b26      	cmp	r3, #38	; 0x26
 80066ba:	d83a      	bhi.n	8006732 <d_maybe_print_fold_expression.isra.20+0xba>
 80066bc:	e8df f003 	tbb	[pc, r3]
 80066c0:	393939b0 	.word	0x393939b0
 80066c4:	39b03939 	.word	0x39b03939
 80066c8:	39393939 	.word	0x39393939
 80066cc:	39393939 	.word	0x39393939
 80066d0:	39393939 	.word	0x39393939
 80066d4:	39393939 	.word	0x39393939
 80066d8:	39393939 	.word	0x39393939
 80066dc:	39393939 	.word	0x39393939
 80066e0:	39393989 	.word	0x39393989
 80066e4:	3939      	.short	0x3939
 80066e6:	3f          	.byte	0x3f
 80066e7:	00          	.byte	0x00
 80066e8:	4642      	mov	r2, r8
 80066ea:	4629      	mov	r1, r5
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ff31 	bl	8006554 <d_print_expr_op>
 80066f2:	9a01      	ldr	r2, [sp, #4]
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff ff6c 	bl	80065d4 <d_print_subexpr>
 80066fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006700:	29ff      	cmp	r1, #255	; 0xff
 8006702:	f040 80ea 	bne.w	80068da <d_maybe_print_fold_expression.isra.20+0x262>
 8006706:	2500      	movs	r5, #0
 8006708:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800670c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006710:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006714:	4620      	mov	r0, r4
 8006716:	4798      	blx	r3
 8006718:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800671c:	3301      	adds	r3, #1
 800671e:	4629      	mov	r1, r5
 8006720:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006724:	2201      	movs	r2, #1
 8006726:	2329      	movs	r3, #41	; 0x29
 8006728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800672c:	5463      	strb	r3, [r4, r1]
 800672e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006732:	2001      	movs	r0, #1
 8006734:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006738:	b003      	add	sp, #12
 800673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006742:	29ff      	cmp	r1, #255	; 0xff
 8006744:	f040 80cb 	bne.w	80068de <d_maybe_print_fold_expression.isra.20+0x266>
 8006748:	2600      	movs	r6, #0
 800674a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800674e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006752:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006756:	4798      	blx	r3
 8006758:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800675c:	3301      	adds	r3, #1
 800675e:	4631      	mov	r1, r6
 8006760:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006764:	2201      	movs	r2, #1
 8006766:	2328      	movs	r3, #40	; 0x28
 8006768:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800676c:	4620      	mov	r0, r4
 800676e:	5463      	strb	r3, [r4, r1]
 8006770:	464a      	mov	r2, r9
 8006772:	4629      	mov	r1, r5
 8006774:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006778:	f7ff ff2c 	bl	80065d4 <d_print_subexpr>
 800677c:	4629      	mov	r1, r5
 800677e:	4d59      	ldr	r5, [pc, #356]	; (80068e4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006780:	4642      	mov	r2, r8
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fee6 	bl	8006554 <d_print_expr_op>
 8006788:	1d2e      	adds	r6, r5, #4
 800678a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800678e:	f04f 0800 	mov.w	r8, #0
 8006792:	e015      	b.n	80067c0 <d_maybe_print_fold_expression.isra.20+0x148>
 8006794:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006798:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800679c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80067a0:	4798      	blx	r3
 80067a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067a6:	3301      	adds	r3, #1
 80067a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067ac:	2200      	movs	r2, #0
 80067ae:	2301      	movs	r3, #1
 80067b0:	42ae      	cmp	r6, r5
 80067b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067b6:	f804 9002 	strb.w	r9, [r4, r2]
 80067ba:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80067be:	d0b8      	beq.n	8006732 <d_maybe_print_fold_expression.isra.20+0xba>
 80067c0:	2bff      	cmp	r3, #255	; 0xff
 80067c2:	4619      	mov	r1, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	f815 9b01 	ldrb.w	r9, [r5], #1
 80067ca:	d0e3      	beq.n	8006794 <d_maybe_print_fold_expression.isra.20+0x11c>
 80067cc:	461a      	mov	r2, r3
 80067ce:	3301      	adds	r3, #1
 80067d0:	e7ee      	b.n	80067b0 <d_maybe_print_fold_expression.isra.20+0x138>
 80067d2:	4e45      	ldr	r6, [pc, #276]	; (80068e8 <d_maybe_print_fold_expression.isra.20+0x270>)
 80067d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067d8:	f106 0a04 	add.w	sl, r6, #4
 80067dc:	e017      	b.n	800680e <d_maybe_print_fold_expression.isra.20+0x196>
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067ee:	4798      	blx	r3
 80067f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067fa:	2200      	movs	r2, #0
 80067fc:	2301      	movs	r3, #1
 80067fe:	45b2      	cmp	sl, r6
 8006800:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006804:	f804 b002 	strb.w	fp, [r4, r2]
 8006808:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800680c:	d05e      	beq.n	80068cc <d_maybe_print_fold_expression.isra.20+0x254>
 800680e:	2bff      	cmp	r3, #255	; 0xff
 8006810:	4619      	mov	r1, r3
 8006812:	4620      	mov	r0, r4
 8006814:	f816 bb01 	ldrb.w	fp, [r6], #1
 8006818:	d0e1      	beq.n	80067de <d_maybe_print_fold_expression.isra.20+0x166>
 800681a:	461a      	mov	r2, r3
 800681c:	3301      	adds	r3, #1
 800681e:	e7ee      	b.n	80067fe <d_maybe_print_fold_expression.isra.20+0x186>
 8006820:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006824:	2bff      	cmp	r3, #255	; 0xff
 8006826:	d110      	bne.n	800684a <d_maybe_print_fold_expression.isra.20+0x1d2>
 8006828:	2600      	movs	r6, #0
 800682a:	4619      	mov	r1, r3
 800682c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006830:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006834:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006838:	4798      	blx	r3
 800683a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800683e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006848:	4633      	mov	r3, r6
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006850:	464a      	mov	r2, r9
 8006852:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006856:	4620      	mov	r0, r4
 8006858:	f804 c003 	strb.w	ip, [r4, r3]
 800685c:	4629      	mov	r1, r5
 800685e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006862:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068ec <d_maybe_print_fold_expression.isra.20+0x274>
 8006866:	f7ff feb5 	bl	80065d4 <d_print_subexpr>
 800686a:	4642      	mov	r2, r8
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fe70 	bl	8006554 <d_print_expr_op>
 8006874:	f109 0a03 	add.w	sl, r9, #3
 8006878:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800687c:	2600      	movs	r6, #0
 800687e:	e016      	b.n	80068ae <d_maybe_print_fold_expression.isra.20+0x236>
 8006880:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006884:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006888:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800688c:	4798      	blx	r3
 800688e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006892:	3301      	adds	r3, #1
 8006894:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006898:	2200      	movs	r2, #0
 800689a:	2301      	movs	r3, #1
 800689c:	45d1      	cmp	r9, sl
 800689e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80068a2:	f804 b002 	strb.w	fp, [r4, r2]
 80068a6:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80068aa:	f43f af1d 	beq.w	80066e8 <d_maybe_print_fold_expression.isra.20+0x70>
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	4619      	mov	r1, r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	f819 bb01 	ldrb.w	fp, [r9], #1
 80068b8:	d0e2      	beq.n	8006880 <d_maybe_print_fold_expression.isra.20+0x208>
 80068ba:	461a      	mov	r2, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	e7ed      	b.n	800689c <d_maybe_print_fold_expression.isra.20+0x224>
 80068c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80068ca:	e6eb      	b.n	80066a4 <d_maybe_print_fold_expression.isra.20+0x2c>
 80068cc:	4642      	mov	r2, r8
 80068ce:	4629      	mov	r1, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff fe3f 	bl	8006554 <d_print_expr_op>
 80068d6:	464a      	mov	r2, r9
 80068d8:	e70c      	b.n	80066f4 <d_maybe_print_fold_expression.isra.20+0x7c>
 80068da:	1c4a      	adds	r2, r1, #1
 80068dc:	e723      	b.n	8006726 <d_maybe_print_fold_expression.isra.20+0xae>
 80068de:	1c4a      	adds	r2, r1, #1
 80068e0:	e741      	b.n	8006766 <d_maybe_print_fold_expression.isra.20+0xee>
 80068e2:	bf00      	nop
 80068e4:	080b3d1c 	.word	0x080b3d1c
 80068e8:	080b3d14 	.word	0x080b3d14
 80068ec:	080b3c20 	.word	0x080b3c20

080068f0 <d_demangle_callback.constprop.22>:
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	b0e5      	sub	sp, #404	; 0x194
 80068f6:	f890 a000 	ldrb.w	sl, [r0]
 80068fa:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4605      	mov	r5, r0
 8006902:	4688      	mov	r8, r1
 8006904:	4616      	mov	r6, r2
 8006906:	f000 80f3 	beq.w	8006af0 <d_demangle_callback.constprop.22+0x200>
 800690a:	2208      	movs	r2, #8
 800690c:	49bb      	ldr	r1, [pc, #748]	; (8006bfc <d_demangle_callback.constprop.22+0x30c>)
 800690e:	4628      	mov	r0, r5
 8006910:	f022 fd6c 	bl	80293ec <strncmp>
 8006914:	b948      	cbnz	r0, 800692a <d_demangle_callback.constprop.22+0x3a>
 8006916:	7a2b      	ldrb	r3, [r5, #8]
 8006918:	2b2e      	cmp	r3, #46	; 0x2e
 800691a:	f000 80d8 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 800691e:	2b5f      	cmp	r3, #95	; 0x5f
 8006920:	f000 80d5 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 8006924:	2b24      	cmp	r3, #36	; 0x24
 8006926:	f000 80d2 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fa38 	bl	8006da4 <strlen>
 8006934:	0142      	lsls	r2, r0, #5
 8006936:	0083      	lsls	r3, r0, #2
 8006938:	3208      	adds	r2, #8
 800693a:	330a      	adds	r3, #10
 800693c:	ebad 0d02 	sub.w	sp, sp, r2
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	2400      	movs	r4, #0
 8006946:	46eb      	mov	fp, sp
 8006948:	1829      	adds	r1, r5, r0
 800694a:	ebad 0d03 	sub.w	sp, sp, r3
 800694e:	2211      	movs	r2, #17
 8006950:	0043      	lsls	r3, r0, #1
 8006952:	f1b9 0f01 	cmp.w	r9, #1
 8006956:	f8c7 b01c 	str.w	fp, [r7, #28]
 800695a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800695e:	60fd      	str	r5, [r7, #12]
 8006960:	61bd      	str	r5, [r7, #24]
 8006962:	6338      	str	r0, [r7, #48]	; 0x30
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	617a      	str	r2, [r7, #20]
 800696a:	623c      	str	r4, [r7, #32]
 800696c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800696e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006972:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006976:	647c      	str	r4, [r7, #68]	; 0x44
 8006978:	f000 80a0 	beq.w	8006abc <d_demangle_callback.constprop.22+0x1cc>
 800697c:	f0c0 80bf 	bcc.w	8006afe <d_demangle_callback.constprop.22+0x20e>
 8006980:	7aea      	ldrb	r2, [r5, #11]
 8006982:	f1b9 0f02 	cmp.w	r9, #2
 8006986:	f105 0a0b 	add.w	sl, r5, #11
 800698a:	bf14      	ite	ne
 800698c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006990:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006994:	2a5f      	cmp	r2, #95	; 0x5f
 8006996:	f8c7 a018 	str.w	sl, [r7, #24]
 800699a:	f000 80b9 	beq.w	8006b10 <d_demangle_callback.constprop.22+0x220>
 800699e:	4650      	mov	r0, sl
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	f000 f9ff 	bl	8006da4 <strlen>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f340 8123 	ble.w	8006bf4 <d_demangle_callback.constprop.22+0x304>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2201      	movs	r2, #1
 80069b2:	f8cb 3004 	str.w	r3, [fp, #4]
 80069b6:	623a      	str	r2, [r7, #32]
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f000 811b 	beq.w	8006bf4 <d_demangle_callback.constprop.22+0x304>
 80069be:	e9cb a002 	strd	sl, r0, [fp, #8]
 80069c2:	f88b 3000 	strb.w	r3, [fp]
 80069c6:	4649      	mov	r1, r9
 80069c8:	2300      	movs	r3, #0
 80069ca:	465a      	mov	r2, fp
 80069cc:	f107 000c 	add.w	r0, r7, #12
 80069d0:	f7f9 fc1e 	bl	8000210 <d_make_comp>
 80069d4:	69bc      	ldr	r4, [r7, #24]
 80069d6:	4605      	mov	r5, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f9e3 	bl	8006da4 <strlen>
 80069de:	1823      	adds	r3, r4, r0
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069e6:	f1b9 0f00 	cmp.w	r9, #0
 80069ea:	d16a      	bne.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d068      	beq.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 80069f0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069f4:	462a      	mov	r2, r5
 80069f6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069fa:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069fe:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8006a02:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8006a06:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8006a0a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8006a0e:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 8006a12:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006a16:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006a1a:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 8006a1e:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006a22:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006a26:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006a2a:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006a2e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a32:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a36:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a3a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a3e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a42:	f7f9 fc49 	bl	80002d8 <d_count_templates_scopes>
 8006a46:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a4a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a4e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	fb06 f603 	mul.w	r6, r6, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	bfb8      	it	lt
 8006a5c:	2201      	movlt	r2, #1
 8006a5e:	00d2      	lsls	r2, r2, #3
 8006a60:	2e01      	cmp	r6, #1
 8006a62:	4633      	mov	r3, r6
 8006a64:	f102 0208 	add.w	r2, r2, #8
 8006a68:	bfb8      	it	lt
 8006a6a:	2301      	movlt	r3, #1
 8006a6c:	46e8      	mov	r8, sp
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	ebad 0d02 	sub.w	sp, sp, r2
 8006a74:	3308      	adds	r3, #8
 8006a76:	4669      	mov	r1, sp
 8006a78:	462a      	mov	r2, r5
 8006a7a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a84:	2111      	movs	r1, #17
 8006a86:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a8a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a8e:	f7fc f899 	bl	8002bc4 <d_print_comp>
 8006a92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a9a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	46c5      	mov	sp, r8
 8006aa2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006aa6:	4798      	blx	r3
 8006aa8:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006aac:	fab0 f080 	clz	r0, r0
 8006ab0:	0940      	lsrs	r0, r0, #5
 8006ab2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006ac0:	d033      	beq.n	8006b2a <d_demangle_callback.constprop.22+0x23a>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	7a6b      	ldrb	r3, [r5, #9]
 8006ad0:	2b44      	cmp	r3, #68	; 0x44
 8006ad2:	d002      	beq.n	8006ada <d_demangle_callback.constprop.22+0x1ea>
 8006ad4:	2b49      	cmp	r3, #73	; 0x49
 8006ad6:	f47f af28 	bne.w	800692a <d_demangle_callback.constprop.22+0x3a>
 8006ada:	7aaa      	ldrb	r2, [r5, #10]
 8006adc:	2a5f      	cmp	r2, #95	; 0x5f
 8006ade:	f47f af24 	bne.w	800692a <d_demangle_callback.constprop.22+0x3a>
 8006ae2:	2b49      	cmp	r3, #73	; 0x49
 8006ae4:	bf14      	ite	ne
 8006ae6:	f04f 0903 	movne.w	r9, #3
 8006aea:	f04f 0902 	moveq.w	r9, #2
 8006aee:	e71e      	b.n	800692e <d_demangle_callback.constprop.22+0x3e>
 8006af0:	7843      	ldrb	r3, [r0, #1]
 8006af2:	2b5a      	cmp	r3, #90	; 0x5a
 8006af4:	f47f af09 	bne.w	800690a <d_demangle_callback.constprop.22+0x1a>
 8006af8:	f04f 0901 	mov.w	r9, #1
 8006afc:	e717      	b.n	800692e <d_demangle_callback.constprop.22+0x3e>
 8006afe:	f107 000c 	add.w	r0, r7, #12
 8006b02:	f7fa fe05 	bl	8001710 <d_type>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f893 9000 	ldrb.w	r9, [r3]
 8006b0e:	e76a      	b.n	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006b10:	7b2a      	ldrb	r2, [r5, #12]
 8006b12:	2a5a      	cmp	r2, #90	; 0x5a
 8006b14:	f47f af43 	bne.w	800699e <d_demangle_callback.constprop.22+0xae>
 8006b18:	350d      	adds	r5, #13
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f107 000c 	add.w	r0, r7, #12
 8006b20:	61bd      	str	r5, [r7, #24]
 8006b22:	f7fb fd37 	bl	8002594 <d_encoding>
 8006b26:	4683      	mov	fp, r0
 8006b28:	e74d      	b.n	80069c6 <d_demangle_callback.constprop.22+0xd6>
 8006b2a:	786b      	ldrb	r3, [r5, #1]
 8006b2c:	2b5a      	cmp	r3, #90	; 0x5a
 8006b2e:	d1c8      	bne.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 8006b30:	3502      	adds	r5, #2
 8006b32:	4649      	mov	r1, r9
 8006b34:	f107 000c 	add.w	r0, r7, #12
 8006b38:	61bd      	str	r5, [r7, #24]
 8006b3a:	f7fb fd2b 	bl	8002594 <d_encoding>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	07db      	lsls	r3, r3, #31
 8006b42:	4605      	mov	r5, r0
 8006b44:	d552      	bpl.n	8006bec <d_demangle_callback.constprop.22+0x2fc>
 8006b46:	69b8      	ldr	r0, [r7, #24]
 8006b48:	f890 9000 	ldrb.w	r9, [r0]
 8006b4c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b50:	f47f af49 	bne.w	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006b54:	7843      	ldrb	r3, [r0, #1]
 8006b56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b5a:	2a19      	cmp	r2, #25
 8006b5c:	d93a      	bls.n	8006bd4 <d_demangle_callback.constprop.22+0x2e4>
 8006b5e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b60:	d038      	beq.n	8006bd4 <d_demangle_callback.constprop.22+0x2e4>
 8006b62:	3b30      	subs	r3, #48	; 0x30
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d841      	bhi.n	8006bec <d_demangle_callback.constprop.22+0x2fc>
 8006b68:	7803      	ldrb	r3, [r0, #0]
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6e:	d112      	bne.n	8006b96 <d_demangle_callback.constprop.22+0x2a6>
 8006b70:	7853      	ldrb	r3, [r2, #1]
 8006b72:	3b30      	subs	r3, #48	; 0x30
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d80e      	bhi.n	8006b96 <d_demangle_callback.constprop.22+0x2a6>
 8006b78:	7893      	ldrb	r3, [r2, #2]
 8006b7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b7e:	2909      	cmp	r1, #9
 8006b80:	f102 0202 	add.w	r2, r2, #2
 8006b84:	d8f2      	bhi.n	8006b6c <d_demangle_callback.constprop.22+0x27c>
 8006b86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b8e:	2909      	cmp	r1, #9
 8006b90:	d9f9      	bls.n	8006b86 <d_demangle_callback.constprop.22+0x296>
 8006b92:	2b2e      	cmp	r3, #46	; 0x2e
 8006b94:	d0ec      	beq.n	8006b70 <d_demangle_callback.constprop.22+0x280>
 8006b96:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	61ba      	str	r2, [r7, #24]
 8006b9e:	da17      	bge.n	8006bd0 <d_demangle_callback.constprop.22+0x2e0>
 8006ba0:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006ba4:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006ba8:	eb0e 030c 	add.w	r3, lr, ip
 8006bac:	3101      	adds	r1, #1
 8006bae:	1a12      	subs	r2, r2, r0
 8006bb0:	605c      	str	r4, [r3, #4]
 8006bb2:	6239      	str	r1, [r7, #32]
 8006bb4:	d00c      	beq.n	8006bd0 <d_demangle_callback.constprop.22+0x2e0>
 8006bb6:	605c      	str	r4, [r3, #4]
 8006bb8:	f80e 400c 	strb.w	r4, [lr, ip]
 8006bbc:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	214d      	movs	r1, #77	; 0x4d
 8006bc4:	f107 000c 	add.w	r0, r7, #12
 8006bc8:	f7f9 fb22 	bl	8000210 <d_make_comp>
 8006bcc:	4605      	mov	r5, r0
 8006bce:	e7ba      	b.n	8006b46 <d_demangle_callback.constprop.22+0x256>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7f5      	b.n	8006bc0 <d_demangle_callback.constprop.22+0x2d0>
 8006bd4:	1c81      	adds	r1, r0, #2
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bdc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006be0:	f1bc 0f19 	cmp.w	ip, #25
 8006be4:	d9f7      	bls.n	8006bd6 <d_demangle_callback.constprop.22+0x2e6>
 8006be6:	2b5f      	cmp	r3, #95	; 0x5f
 8006be8:	d0f5      	beq.n	8006bd6 <d_demangle_callback.constprop.22+0x2e6>
 8006bea:	e7bf      	b.n	8006b6c <d_demangle_callback.constprop.22+0x27c>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f893 9000 	ldrb.w	r9, [r3]
 8006bf2:	e6f8      	b.n	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006bf4:	f04f 0b00 	mov.w	fp, #0
 8006bf8:	e6e5      	b.n	80069c6 <d_demangle_callback.constprop.22+0xd6>
 8006bfa:	bf00      	nop
 8006bfc:	080b39ac 	.word	0x080b39ac

08006c00 <__cxa_demangle>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	b380      	cbz	r0, 8006c6a <__cxa_demangle+0x6a>
 8006c08:	b101      	cbz	r1, 8006c0c <__cxa_demangle+0xc>
 8006c0a:	b372      	cbz	r2, 8006c6a <__cxa_demangle+0x6a>
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	4617      	mov	r7, r2
 8006c10:	460e      	mov	r6, r1
 8006c12:	466a      	mov	r2, sp
 8006c14:	492b      	ldr	r1, [pc, #172]	; (8006cc4 <__cxa_demangle+0xc4>)
 8006c16:	461d      	mov	r5, r3
 8006c18:	e9cd 4400 	strd	r4, r4, [sp]
 8006c1c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c20:	f7ff fe66 	bl	80068f0 <d_demangle_callback.constprop.22>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d047      	beq.n	8006cb8 <__cxa_demangle+0xb8>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	9c00      	ldr	r4, [sp, #0]
 8006c2c:	b9ab      	cbnz	r3, 8006c5a <__cxa_demangle+0x5a>
 8006c2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c32:	b36c      	cbz	r4, 8006c90 <__cxa_demangle+0x90>
 8006c34:	b1b6      	cbz	r6, 8006c64 <__cxa_demangle+0x64>
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f8b4 	bl	8006da4 <strlen>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	d31c      	bcc.n	8006c7c <__cxa_demangle+0x7c>
 8006c42:	4630      	mov	r0, r6
 8006c44:	f021 fef2 	bl	8028a2c <free>
 8006c48:	f8c7 8000 	str.w	r8, [r7]
 8006c4c:	b195      	cbz	r5, 8006c74 <__cxa_demangle+0x74>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4620      	mov	r0, r4
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	b004      	add	sp, #16
 8006c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5a:	b334      	cbz	r4, 8006caa <__cxa_demangle+0xaa>
 8006c5c:	f04f 0801 	mov.w	r8, #1
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	d1e8      	bne.n	8006c36 <__cxa_demangle+0x36>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	d1ef      	bne.n	8006c48 <__cxa_demangle+0x48>
 8006c68:	e7f0      	b.n	8006c4c <__cxa_demangle+0x4c>
 8006c6a:	b113      	cbz	r3, 8006c72 <__cxa_demangle+0x72>
 8006c6c:	f06f 0202 	mvn.w	r2, #2
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	2400      	movs	r4, #0
 8006c74:	4620      	mov	r0, r4
 8006c76:	b004      	add	sp, #16
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	1c42      	adds	r2, r0, #1
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4630      	mov	r0, r6
 8006c82:	f022 f920 	bl	8028ec6 <memcpy>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f021 fed0 	bl	8028a2c <free>
 8006c8c:	4634      	mov	r4, r6
 8006c8e:	e7dd      	b.n	8006c4c <__cxa_demangle+0x4c>
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	d0ee      	beq.n	8006c72 <__cxa_demangle+0x72>
 8006c94:	f1b8 0f01 	cmp.w	r8, #1
 8006c98:	d009      	beq.n	8006cae <__cxa_demangle+0xae>
 8006c9a:	2400      	movs	r4, #0
 8006c9c:	f06f 0301 	mvn.w	r3, #1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	b004      	add	sp, #16
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	d0e1      	beq.n	8006c72 <__cxa_demangle+0x72>
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	e7dd      	b.n	8006c74 <__cxa_demangle+0x74>
 8006cb8:	9800      	ldr	r0, [sp, #0]
 8006cba:	f021 feb7 	bl	8028a2c <free>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	d1eb      	bne.n	8006c9a <__cxa_demangle+0x9a>
 8006cc2:	e7d6      	b.n	8006c72 <__cxa_demangle+0x72>
 8006cc4:	08000889 	.word	0x08000889

08006cc8 <__gcclibcxx_demangle_callback>:
 8006cc8:	b160      	cbz	r0, 8006ce4 <__gcclibcxx_demangle_callback+0x1c>
 8006cca:	b508      	push	{r3, lr}
 8006ccc:	b139      	cbz	r1, 8006cde <__gcclibcxx_demangle_callback+0x16>
 8006cce:	f7ff fe0f 	bl	80068f0 <d_demangle_callback.constprop.22>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	bf0c      	ite	eq
 8006cd6:	f06f 0001 	mvneq.w	r0, #1
 8006cda:	2000      	movne	r0, #0
 8006cdc:	bd08      	pop	{r3, pc}
 8006cde:	f06f 0002 	mvn.w	r0, #2
 8006ce2:	bd08      	pop	{r3, pc}
 8006ce4:	f06f 0002 	mvn.w	r0, #2
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	0000      	movs	r0, r0
	...

08006cf0 <memchr>:
 8006cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cf4:	2a10      	cmp	r2, #16
 8006cf6:	db2b      	blt.n	8006d50 <memchr+0x60>
 8006cf8:	f010 0f07 	tst.w	r0, #7
 8006cfc:	d008      	beq.n	8006d10 <memchr+0x20>
 8006cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d02:	3a01      	subs	r2, #1
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d02d      	beq.n	8006d64 <memchr+0x74>
 8006d08:	f010 0f07 	tst.w	r0, #7
 8006d0c:	b342      	cbz	r2, 8006d60 <memchr+0x70>
 8006d0e:	d1f6      	bne.n	8006cfe <memchr+0xe>
 8006d10:	b4f0      	push	{r4, r5, r6, r7}
 8006d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006d1a:	f022 0407 	bic.w	r4, r2, #7
 8006d1e:	f07f 0700 	mvns.w	r7, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006d28:	3c08      	subs	r4, #8
 8006d2a:	ea85 0501 	eor.w	r5, r5, r1
 8006d2e:	ea86 0601 	eor.w	r6, r6, r1
 8006d32:	fa85 f547 	uadd8	r5, r5, r7
 8006d36:	faa3 f587 	sel	r5, r3, r7
 8006d3a:	fa86 f647 	uadd8	r6, r6, r7
 8006d3e:	faa5 f687 	sel	r6, r5, r7
 8006d42:	b98e      	cbnz	r6, 8006d68 <memchr+0x78>
 8006d44:	d1ee      	bne.n	8006d24 <memchr+0x34>
 8006d46:	bcf0      	pop	{r4, r5, r6, r7}
 8006d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d4c:	f002 0207 	and.w	r2, r2, #7
 8006d50:	b132      	cbz	r2, 8006d60 <memchr+0x70>
 8006d52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d56:	3a01      	subs	r2, #1
 8006d58:	ea83 0301 	eor.w	r3, r3, r1
 8006d5c:	b113      	cbz	r3, 8006d64 <memchr+0x74>
 8006d5e:	d1f8      	bne.n	8006d52 <memchr+0x62>
 8006d60:	2000      	movs	r0, #0
 8006d62:	4770      	bx	lr
 8006d64:	3801      	subs	r0, #1
 8006d66:	4770      	bx	lr
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	bf06      	itte	eq
 8006d6c:	4635      	moveq	r5, r6
 8006d6e:	3803      	subeq	r0, #3
 8006d70:	3807      	subne	r0, #7
 8006d72:	f015 0f01 	tst.w	r5, #1
 8006d76:	d107      	bne.n	8006d88 <memchr+0x98>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d7e:	bf02      	ittt	eq
 8006d80:	3001      	addeq	r0, #1
 8006d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d86:	3001      	addeq	r0, #1
 8006d88:	bcf0      	pop	{r4, r5, r6, r7}
 8006d8a:	3801      	subs	r0, #1
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <strcmp>:
 8006d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	2a01      	cmp	r2, #1
 8006d9a:	bf28      	it	cs
 8006d9c:	429a      	cmpcs	r2, r3
 8006d9e:	d0f7      	beq.n	8006d90 <strcmp>
 8006da0:	1ad0      	subs	r0, r2, r3
 8006da2:	4770      	bx	lr

08006da4 <strlen>:
 8006da4:	4603      	mov	r3, r0
 8006da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d1fb      	bne.n	8006da6 <strlen+0x2>
 8006dae:	1a18      	subs	r0, r3, r0
 8006db0:	3801      	subs	r0, #1
 8006db2:	4770      	bx	lr

08006db4 <__aeabi_drsub>:
 8006db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006db8:	e002      	b.n	8006dc0 <__adddf3>
 8006dba:	bf00      	nop

08006dbc <__aeabi_dsub>:
 8006dbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006dc0 <__adddf3>:
 8006dc0:	b530      	push	{r4, r5, lr}
 8006dc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006dc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006dca:	ea94 0f05 	teq	r4, r5
 8006dce:	bf08      	it	eq
 8006dd0:	ea90 0f02 	teqeq	r0, r2
 8006dd4:	bf1f      	itttt	ne
 8006dd6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006dda:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006dde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006de2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006de6:	f000 80e2 	beq.w	8006fae <__adddf3+0x1ee>
 8006dea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006df2:	bfb8      	it	lt
 8006df4:	426d      	neglt	r5, r5
 8006df6:	dd0c      	ble.n	8006e12 <__adddf3+0x52>
 8006df8:	442c      	add	r4, r5
 8006dfa:	ea80 0202 	eor.w	r2, r0, r2
 8006dfe:	ea81 0303 	eor.w	r3, r1, r3
 8006e02:	ea82 0000 	eor.w	r0, r2, r0
 8006e06:	ea83 0101 	eor.w	r1, r3, r1
 8006e0a:	ea80 0202 	eor.w	r2, r0, r2
 8006e0e:	ea81 0303 	eor.w	r3, r1, r3
 8006e12:	2d36      	cmp	r5, #54	; 0x36
 8006e14:	bf88      	it	hi
 8006e16:	bd30      	pophi	{r4, r5, pc}
 8006e18:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006e1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006e20:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006e24:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006e28:	d002      	beq.n	8006e30 <__adddf3+0x70>
 8006e2a:	4240      	negs	r0, r0
 8006e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e30:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006e34:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006e38:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006e3c:	d002      	beq.n	8006e44 <__adddf3+0x84>
 8006e3e:	4252      	negs	r2, r2
 8006e40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e44:	ea94 0f05 	teq	r4, r5
 8006e48:	f000 80a7 	beq.w	8006f9a <__adddf3+0x1da>
 8006e4c:	f1a4 0401 	sub.w	r4, r4, #1
 8006e50:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e54:	db0d      	blt.n	8006e72 <__adddf3+0xb2>
 8006e56:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e5a:	fa22 f205 	lsr.w	r2, r2, r5
 8006e5e:	1880      	adds	r0, r0, r2
 8006e60:	f141 0100 	adc.w	r1, r1, #0
 8006e64:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e68:	1880      	adds	r0, r0, r2
 8006e6a:	fa43 f305 	asr.w	r3, r3, r5
 8006e6e:	4159      	adcs	r1, r3
 8006e70:	e00e      	b.n	8006e90 <__adddf3+0xd0>
 8006e72:	f1a5 0520 	sub.w	r5, r5, #32
 8006e76:	f10e 0e20 	add.w	lr, lr, #32
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e80:	bf28      	it	cs
 8006e82:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e86:	fa43 f305 	asr.w	r3, r3, r5
 8006e8a:	18c0      	adds	r0, r0, r3
 8006e8c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e94:	d507      	bpl.n	8006ea6 <__adddf3+0xe6>
 8006e96:	f04f 0e00 	mov.w	lr, #0
 8006e9a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e9e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006ea2:	eb6e 0101 	sbc.w	r1, lr, r1
 8006ea6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006eaa:	d31b      	bcc.n	8006ee4 <__adddf3+0x124>
 8006eac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006eb0:	d30c      	bcc.n	8006ecc <__adddf3+0x10c>
 8006eb2:	0849      	lsrs	r1, r1, #1
 8006eb4:	ea5f 0030 	movs.w	r0, r0, rrx
 8006eb8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006ebc:	f104 0401 	add.w	r4, r4, #1
 8006ec0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006ec4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006ec8:	f080 809a 	bcs.w	8007000 <__adddf3+0x240>
 8006ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006ed0:	bf08      	it	eq
 8006ed2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006ed6:	f150 0000 	adcs.w	r0, r0, #0
 8006eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006ede:	ea41 0105 	orr.w	r1, r1, r5
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ee8:	4140      	adcs	r0, r0
 8006eea:	eb41 0101 	adc.w	r1, r1, r1
 8006eee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ef2:	f1a4 0401 	sub.w	r4, r4, #1
 8006ef6:	d1e9      	bne.n	8006ecc <__adddf3+0x10c>
 8006ef8:	f091 0f00 	teq	r1, #0
 8006efc:	bf04      	itt	eq
 8006efe:	4601      	moveq	r1, r0
 8006f00:	2000      	moveq	r0, #0
 8006f02:	fab1 f381 	clz	r3, r1
 8006f06:	bf08      	it	eq
 8006f08:	3320      	addeq	r3, #32
 8006f0a:	f1a3 030b 	sub.w	r3, r3, #11
 8006f0e:	f1b3 0220 	subs.w	r2, r3, #32
 8006f12:	da0c      	bge.n	8006f2e <__adddf3+0x16e>
 8006f14:	320c      	adds	r2, #12
 8006f16:	dd08      	ble.n	8006f2a <__adddf3+0x16a>
 8006f18:	f102 0c14 	add.w	ip, r2, #20
 8006f1c:	f1c2 020c 	rsb	r2, r2, #12
 8006f20:	fa01 f00c 	lsl.w	r0, r1, ip
 8006f24:	fa21 f102 	lsr.w	r1, r1, r2
 8006f28:	e00c      	b.n	8006f44 <__adddf3+0x184>
 8006f2a:	f102 0214 	add.w	r2, r2, #20
 8006f2e:	bfd8      	it	le
 8006f30:	f1c2 0c20 	rsble	ip, r2, #32
 8006f34:	fa01 f102 	lsl.w	r1, r1, r2
 8006f38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006f3c:	bfdc      	itt	le
 8006f3e:	ea41 010c 	orrle.w	r1, r1, ip
 8006f42:	4090      	lslle	r0, r2
 8006f44:	1ae4      	subs	r4, r4, r3
 8006f46:	bfa2      	ittt	ge
 8006f48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f4c:	4329      	orrge	r1, r5
 8006f4e:	bd30      	popge	{r4, r5, pc}
 8006f50:	ea6f 0404 	mvn.w	r4, r4
 8006f54:	3c1f      	subs	r4, #31
 8006f56:	da1c      	bge.n	8006f92 <__adddf3+0x1d2>
 8006f58:	340c      	adds	r4, #12
 8006f5a:	dc0e      	bgt.n	8006f7a <__adddf3+0x1ba>
 8006f5c:	f104 0414 	add.w	r4, r4, #20
 8006f60:	f1c4 0220 	rsb	r2, r4, #32
 8006f64:	fa20 f004 	lsr.w	r0, r0, r4
 8006f68:	fa01 f302 	lsl.w	r3, r1, r2
 8006f6c:	ea40 0003 	orr.w	r0, r0, r3
 8006f70:	fa21 f304 	lsr.w	r3, r1, r4
 8006f74:	ea45 0103 	orr.w	r1, r5, r3
 8006f78:	bd30      	pop	{r4, r5, pc}
 8006f7a:	f1c4 040c 	rsb	r4, r4, #12
 8006f7e:	f1c4 0220 	rsb	r2, r4, #32
 8006f82:	fa20 f002 	lsr.w	r0, r0, r2
 8006f86:	fa01 f304 	lsl.w	r3, r1, r4
 8006f8a:	ea40 0003 	orr.w	r0, r0, r3
 8006f8e:	4629      	mov	r1, r5
 8006f90:	bd30      	pop	{r4, r5, pc}
 8006f92:	fa21 f004 	lsr.w	r0, r1, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	bd30      	pop	{r4, r5, pc}
 8006f9a:	f094 0f00 	teq	r4, #0
 8006f9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006fa2:	bf06      	itte	eq
 8006fa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006fa8:	3401      	addeq	r4, #1
 8006faa:	3d01      	subne	r5, #1
 8006fac:	e74e      	b.n	8006e4c <__adddf3+0x8c>
 8006fae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fb2:	bf18      	it	ne
 8006fb4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006fb8:	d029      	beq.n	800700e <__adddf3+0x24e>
 8006fba:	ea94 0f05 	teq	r4, r5
 8006fbe:	bf08      	it	eq
 8006fc0:	ea90 0f02 	teqeq	r0, r2
 8006fc4:	d005      	beq.n	8006fd2 <__adddf3+0x212>
 8006fc6:	ea54 0c00 	orrs.w	ip, r4, r0
 8006fca:	bf04      	itt	eq
 8006fcc:	4619      	moveq	r1, r3
 8006fce:	4610      	moveq	r0, r2
 8006fd0:	bd30      	pop	{r4, r5, pc}
 8006fd2:	ea91 0f03 	teq	r1, r3
 8006fd6:	bf1e      	ittt	ne
 8006fd8:	2100      	movne	r1, #0
 8006fda:	2000      	movne	r0, #0
 8006fdc:	bd30      	popne	{r4, r5, pc}
 8006fde:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fe2:	d105      	bne.n	8006ff0 <__adddf3+0x230>
 8006fe4:	0040      	lsls	r0, r0, #1
 8006fe6:	4149      	adcs	r1, r1
 8006fe8:	bf28      	it	cs
 8006fea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fee:	bd30      	pop	{r4, r5, pc}
 8006ff0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006ff4:	bf3c      	itt	cc
 8006ff6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006ffa:	bd30      	popcc	{r4, r5, pc}
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007004:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007008:	f04f 0000 	mov.w	r0, #0
 800700c:	bd30      	pop	{r4, r5, pc}
 800700e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007012:	bf1a      	itte	ne
 8007014:	4619      	movne	r1, r3
 8007016:	4610      	movne	r0, r2
 8007018:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800701c:	bf1c      	itt	ne
 800701e:	460b      	movne	r3, r1
 8007020:	4602      	movne	r2, r0
 8007022:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007026:	bf06      	itte	eq
 8007028:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800702c:	ea91 0f03 	teqeq	r1, r3
 8007030:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007034:	bd30      	pop	{r4, r5, pc}
 8007036:	bf00      	nop

08007038 <__aeabi_ui2d>:
 8007038:	f090 0f00 	teq	r0, #0
 800703c:	bf04      	itt	eq
 800703e:	2100      	moveq	r1, #0
 8007040:	4770      	bxeq	lr
 8007042:	b530      	push	{r4, r5, lr}
 8007044:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007048:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800704c:	f04f 0500 	mov.w	r5, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	e750      	b.n	8006ef8 <__adddf3+0x138>
 8007056:	bf00      	nop

08007058 <__aeabi_i2d>:
 8007058:	f090 0f00 	teq	r0, #0
 800705c:	bf04      	itt	eq
 800705e:	2100      	moveq	r1, #0
 8007060:	4770      	bxeq	lr
 8007062:	b530      	push	{r4, r5, lr}
 8007064:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007068:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800706c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007070:	bf48      	it	mi
 8007072:	4240      	negmi	r0, r0
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	e73e      	b.n	8006ef8 <__adddf3+0x138>
 800707a:	bf00      	nop

0800707c <__aeabi_f2d>:
 800707c:	0042      	lsls	r2, r0, #1
 800707e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007082:	ea4f 0131 	mov.w	r1, r1, rrx
 8007086:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800708a:	bf1f      	itttt	ne
 800708c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007090:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007094:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007098:	4770      	bxne	lr
 800709a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800709e:	bf08      	it	eq
 80070a0:	4770      	bxeq	lr
 80070a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80070a6:	bf04      	itt	eq
 80070a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80070ac:	4770      	bxeq	lr
 80070ae:	b530      	push	{r4, r5, lr}
 80070b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80070b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80070b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80070bc:	e71c      	b.n	8006ef8 <__adddf3+0x138>
 80070be:	bf00      	nop

080070c0 <__aeabi_ul2d>:
 80070c0:	ea50 0201 	orrs.w	r2, r0, r1
 80070c4:	bf08      	it	eq
 80070c6:	4770      	bxeq	lr
 80070c8:	b530      	push	{r4, r5, lr}
 80070ca:	f04f 0500 	mov.w	r5, #0
 80070ce:	e00a      	b.n	80070e6 <__aeabi_l2d+0x16>

080070d0 <__aeabi_l2d>:
 80070d0:	ea50 0201 	orrs.w	r2, r0, r1
 80070d4:	bf08      	it	eq
 80070d6:	4770      	bxeq	lr
 80070d8:	b530      	push	{r4, r5, lr}
 80070da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80070de:	d502      	bpl.n	80070e6 <__aeabi_l2d+0x16>
 80070e0:	4240      	negs	r0, r0
 80070e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070f2:	f43f aed8 	beq.w	8006ea6 <__adddf3+0xe6>
 80070f6:	f04f 0203 	mov.w	r2, #3
 80070fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070fe:	bf18      	it	ne
 8007100:	3203      	addne	r2, #3
 8007102:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007106:	bf18      	it	ne
 8007108:	3203      	addne	r2, #3
 800710a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800710e:	f1c2 0320 	rsb	r3, r2, #32
 8007112:	fa00 fc03 	lsl.w	ip, r0, r3
 8007116:	fa20 f002 	lsr.w	r0, r0, r2
 800711a:	fa01 fe03 	lsl.w	lr, r1, r3
 800711e:	ea40 000e 	orr.w	r0, r0, lr
 8007122:	fa21 f102 	lsr.w	r1, r1, r2
 8007126:	4414      	add	r4, r2
 8007128:	e6bd      	b.n	8006ea6 <__adddf3+0xe6>
 800712a:	bf00      	nop

0800712c <__aeabi_dmul>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800713a:	bf1d      	ittte	ne
 800713c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007140:	ea94 0f0c 	teqne	r4, ip
 8007144:	ea95 0f0c 	teqne	r5, ip
 8007148:	f000 f8de 	bleq	8007308 <__aeabi_dmul+0x1dc>
 800714c:	442c      	add	r4, r5
 800714e:	ea81 0603 	eor.w	r6, r1, r3
 8007152:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007156:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800715a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800715e:	bf18      	it	ne
 8007160:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716c:	d038      	beq.n	80071e0 <__aeabi_dmul+0xb4>
 800716e:	fba0 ce02 	umull	ip, lr, r0, r2
 8007172:	f04f 0500 	mov.w	r5, #0
 8007176:	fbe1 e502 	umlal	lr, r5, r1, r2
 800717a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800717e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007182:	f04f 0600 	mov.w	r6, #0
 8007186:	fbe1 5603 	umlal	r5, r6, r1, r3
 800718a:	f09c 0f00 	teq	ip, #0
 800718e:	bf18      	it	ne
 8007190:	f04e 0e01 	orrne.w	lr, lr, #1
 8007194:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007198:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800719c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80071a0:	d204      	bcs.n	80071ac <__aeabi_dmul+0x80>
 80071a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80071a6:	416d      	adcs	r5, r5
 80071a8:	eb46 0606 	adc.w	r6, r6, r6
 80071ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80071b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80071b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80071b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80071bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80071c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80071c4:	bf88      	it	hi
 80071c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80071ca:	d81e      	bhi.n	800720a <__aeabi_dmul+0xde>
 80071cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80071d0:	bf08      	it	eq
 80071d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80071d6:	f150 0000 	adcs.w	r0, r0, #0
 80071da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071e4:	ea46 0101 	orr.w	r1, r6, r1
 80071e8:	ea40 0002 	orr.w	r0, r0, r2
 80071ec:	ea81 0103 	eor.w	r1, r1, r3
 80071f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071f4:	bfc2      	ittt	gt
 80071f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071fe:	bd70      	popgt	{r4, r5, r6, pc}
 8007200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007204:	f04f 0e00 	mov.w	lr, #0
 8007208:	3c01      	subs	r4, #1
 800720a:	f300 80ab 	bgt.w	8007364 <__aeabi_dmul+0x238>
 800720e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007212:	bfde      	ittt	le
 8007214:	2000      	movle	r0, #0
 8007216:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800721a:	bd70      	pople	{r4, r5, r6, pc}
 800721c:	f1c4 0400 	rsb	r4, r4, #0
 8007220:	3c20      	subs	r4, #32
 8007222:	da35      	bge.n	8007290 <__aeabi_dmul+0x164>
 8007224:	340c      	adds	r4, #12
 8007226:	dc1b      	bgt.n	8007260 <__aeabi_dmul+0x134>
 8007228:	f104 0414 	add.w	r4, r4, #20
 800722c:	f1c4 0520 	rsb	r5, r4, #32
 8007230:	fa00 f305 	lsl.w	r3, r0, r5
 8007234:	fa20 f004 	lsr.w	r0, r0, r4
 8007238:	fa01 f205 	lsl.w	r2, r1, r5
 800723c:	ea40 0002 	orr.w	r0, r0, r2
 8007240:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800724c:	fa21 f604 	lsr.w	r6, r1, r4
 8007250:	eb42 0106 	adc.w	r1, r2, r6
 8007254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007258:	bf08      	it	eq
 800725a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f1c4 040c 	rsb	r4, r4, #12
 8007264:	f1c4 0520 	rsb	r5, r4, #32
 8007268:	fa00 f304 	lsl.w	r3, r0, r4
 800726c:	fa20 f005 	lsr.w	r0, r0, r5
 8007270:	fa01 f204 	lsl.w	r2, r1, r4
 8007274:	ea40 0002 	orr.w	r0, r0, r2
 8007278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800727c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007280:	f141 0100 	adc.w	r1, r1, #0
 8007284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007288:	bf08      	it	eq
 800728a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f1c4 0520 	rsb	r5, r4, #32
 8007294:	fa00 f205 	lsl.w	r2, r0, r5
 8007298:	ea4e 0e02 	orr.w	lr, lr, r2
 800729c:	fa20 f304 	lsr.w	r3, r0, r4
 80072a0:	fa01 f205 	lsl.w	r2, r1, r5
 80072a4:	ea43 0302 	orr.w	r3, r3, r2
 80072a8:	fa21 f004 	lsr.w	r0, r1, r4
 80072ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072b0:	fa21 f204 	lsr.w	r2, r1, r4
 80072b4:	ea20 0002 	bic.w	r0, r0, r2
 80072b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80072bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80072c0:	bf08      	it	eq
 80072c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	f094 0f00 	teq	r4, #0
 80072cc:	d10f      	bne.n	80072ee <__aeabi_dmul+0x1c2>
 80072ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80072d2:	0040      	lsls	r0, r0, #1
 80072d4:	eb41 0101 	adc.w	r1, r1, r1
 80072d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072dc:	bf08      	it	eq
 80072de:	3c01      	subeq	r4, #1
 80072e0:	d0f7      	beq.n	80072d2 <__aeabi_dmul+0x1a6>
 80072e2:	ea41 0106 	orr.w	r1, r1, r6
 80072e6:	f095 0f00 	teq	r5, #0
 80072ea:	bf18      	it	ne
 80072ec:	4770      	bxne	lr
 80072ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072f2:	0052      	lsls	r2, r2, #1
 80072f4:	eb43 0303 	adc.w	r3, r3, r3
 80072f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072fc:	bf08      	it	eq
 80072fe:	3d01      	subeq	r5, #1
 8007300:	d0f7      	beq.n	80072f2 <__aeabi_dmul+0x1c6>
 8007302:	ea43 0306 	orr.w	r3, r3, r6
 8007306:	4770      	bx	lr
 8007308:	ea94 0f0c 	teq	r4, ip
 800730c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007310:	bf18      	it	ne
 8007312:	ea95 0f0c 	teqne	r5, ip
 8007316:	d00c      	beq.n	8007332 <__aeabi_dmul+0x206>
 8007318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800731c:	bf18      	it	ne
 800731e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007322:	d1d1      	bne.n	80072c8 <__aeabi_dmul+0x19c>
 8007324:	ea81 0103 	eor.w	r1, r1, r3
 8007328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007336:	bf06      	itte	eq
 8007338:	4610      	moveq	r0, r2
 800733a:	4619      	moveq	r1, r3
 800733c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007340:	d019      	beq.n	8007376 <__aeabi_dmul+0x24a>
 8007342:	ea94 0f0c 	teq	r4, ip
 8007346:	d102      	bne.n	800734e <__aeabi_dmul+0x222>
 8007348:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800734c:	d113      	bne.n	8007376 <__aeabi_dmul+0x24a>
 800734e:	ea95 0f0c 	teq	r5, ip
 8007352:	d105      	bne.n	8007360 <__aeabi_dmul+0x234>
 8007354:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007358:	bf1c      	itt	ne
 800735a:	4610      	movne	r0, r2
 800735c:	4619      	movne	r1, r3
 800735e:	d10a      	bne.n	8007376 <__aeabi_dmul+0x24a>
 8007360:	ea81 0103 	eor.w	r1, r1, r3
 8007364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007368:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800736c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007370:	f04f 0000 	mov.w	r0, #0
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800737a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800737e:	bd70      	pop	{r4, r5, r6, pc}

08007380 <__aeabi_ddiv>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800738a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800738e:	bf1d      	ittte	ne
 8007390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007394:	ea94 0f0c 	teqne	r4, ip
 8007398:	ea95 0f0c 	teqne	r5, ip
 800739c:	f000 f8a7 	bleq	80074ee <__aeabi_ddiv+0x16e>
 80073a0:	eba4 0405 	sub.w	r4, r4, r5
 80073a4:	ea81 0e03 	eor.w	lr, r1, r3
 80073a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80073ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80073b0:	f000 8088 	beq.w	80074c4 <__aeabi_ddiv+0x144>
 80073b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80073b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80073bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80073c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80073c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80073c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80073cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80073d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80073d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80073d8:	429d      	cmp	r5, r3
 80073da:	bf08      	it	eq
 80073dc:	4296      	cmpeq	r6, r2
 80073de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073e6:	d202      	bcs.n	80073ee <__aeabi_ddiv+0x6e>
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ee:	1ab6      	subs	r6, r6, r2
 80073f0:	eb65 0503 	sbc.w	r5, r5, r3
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007402:	ebb6 0e02 	subs.w	lr, r6, r2
 8007406:	eb75 0e03 	sbcs.w	lr, r5, r3
 800740a:	bf22      	ittt	cs
 800740c:	1ab6      	subcs	r6, r6, r2
 800740e:	4675      	movcs	r5, lr
 8007410:	ea40 000c 	orrcs.w	r0, r0, ip
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	ea4f 0232 	mov.w	r2, r2, rrx
 800741a:	ebb6 0e02 	subs.w	lr, r6, r2
 800741e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007422:	bf22      	ittt	cs
 8007424:	1ab6      	subcs	r6, r6, r2
 8007426:	4675      	movcs	r5, lr
 8007428:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007432:	ebb6 0e02 	subs.w	lr, r6, r2
 8007436:	eb75 0e03 	sbcs.w	lr, r5, r3
 800743a:	bf22      	ittt	cs
 800743c:	1ab6      	subcs	r6, r6, r2
 800743e:	4675      	movcs	r5, lr
 8007440:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	ea4f 0232 	mov.w	r2, r2, rrx
 800744a:	ebb6 0e02 	subs.w	lr, r6, r2
 800744e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007452:	bf22      	ittt	cs
 8007454:	1ab6      	subcs	r6, r6, r2
 8007456:	4675      	movcs	r5, lr
 8007458:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800745c:	ea55 0e06 	orrs.w	lr, r5, r6
 8007460:	d018      	beq.n	8007494 <__aeabi_ddiv+0x114>
 8007462:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007466:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800746a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800746e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007472:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800747a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800747e:	d1c0      	bne.n	8007402 <__aeabi_ddiv+0x82>
 8007480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007484:	d10b      	bne.n	800749e <__aeabi_ddiv+0x11e>
 8007486:	ea41 0100 	orr.w	r1, r1, r0
 800748a:	f04f 0000 	mov.w	r0, #0
 800748e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007492:	e7b6      	b.n	8007402 <__aeabi_ddiv+0x82>
 8007494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007498:	bf04      	itt	eq
 800749a:	4301      	orreq	r1, r0
 800749c:	2000      	moveq	r0, #0
 800749e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80074a2:	bf88      	it	hi
 80074a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80074a8:	f63f aeaf 	bhi.w	800720a <__aeabi_dmul+0xde>
 80074ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80074b0:	bf04      	itt	eq
 80074b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80074b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80074ba:	f150 0000 	adcs.w	r0, r0, #0
 80074be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80074c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80074cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80074d0:	bfc2      	ittt	gt
 80074d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074da:	bd70      	popgt	{r4, r5, r6, pc}
 80074dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074e0:	f04f 0e00 	mov.w	lr, #0
 80074e4:	3c01      	subs	r4, #1
 80074e6:	e690      	b.n	800720a <__aeabi_dmul+0xde>
 80074e8:	ea45 0e06 	orr.w	lr, r5, r6
 80074ec:	e68d      	b.n	800720a <__aeabi_dmul+0xde>
 80074ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074f2:	ea94 0f0c 	teq	r4, ip
 80074f6:	bf08      	it	eq
 80074f8:	ea95 0f0c 	teqeq	r5, ip
 80074fc:	f43f af3b 	beq.w	8007376 <__aeabi_dmul+0x24a>
 8007500:	ea94 0f0c 	teq	r4, ip
 8007504:	d10a      	bne.n	800751c <__aeabi_ddiv+0x19c>
 8007506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800750a:	f47f af34 	bne.w	8007376 <__aeabi_dmul+0x24a>
 800750e:	ea95 0f0c 	teq	r5, ip
 8007512:	f47f af25 	bne.w	8007360 <__aeabi_dmul+0x234>
 8007516:	4610      	mov	r0, r2
 8007518:	4619      	mov	r1, r3
 800751a:	e72c      	b.n	8007376 <__aeabi_dmul+0x24a>
 800751c:	ea95 0f0c 	teq	r5, ip
 8007520:	d106      	bne.n	8007530 <__aeabi_ddiv+0x1b0>
 8007522:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007526:	f43f aefd 	beq.w	8007324 <__aeabi_dmul+0x1f8>
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	e722      	b.n	8007376 <__aeabi_dmul+0x24a>
 8007530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007534:	bf18      	it	ne
 8007536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800753a:	f47f aec5 	bne.w	80072c8 <__aeabi_dmul+0x19c>
 800753e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007542:	f47f af0d 	bne.w	8007360 <__aeabi_dmul+0x234>
 8007546:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800754a:	f47f aeeb 	bne.w	8007324 <__aeabi_dmul+0x1f8>
 800754e:	e712      	b.n	8007376 <__aeabi_dmul+0x24a>

08007550 <__gedf2>:
 8007550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007554:	e006      	b.n	8007564 <__cmpdf2+0x4>
 8007556:	bf00      	nop

08007558 <__ledf2>:
 8007558:	f04f 0c01 	mov.w	ip, #1
 800755c:	e002      	b.n	8007564 <__cmpdf2+0x4>
 800755e:	bf00      	nop

08007560 <__cmpdf2>:
 8007560:	f04f 0c01 	mov.w	ip, #1
 8007564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800756c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007574:	bf18      	it	ne
 8007576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800757a:	d01b      	beq.n	80075b4 <__cmpdf2+0x54>
 800757c:	b001      	add	sp, #4
 800757e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007582:	bf0c      	ite	eq
 8007584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007588:	ea91 0f03 	teqne	r1, r3
 800758c:	bf02      	ittt	eq
 800758e:	ea90 0f02 	teqeq	r0, r2
 8007592:	2000      	moveq	r0, #0
 8007594:	4770      	bxeq	lr
 8007596:	f110 0f00 	cmn.w	r0, #0
 800759a:	ea91 0f03 	teq	r1, r3
 800759e:	bf58      	it	pl
 80075a0:	4299      	cmppl	r1, r3
 80075a2:	bf08      	it	eq
 80075a4:	4290      	cmpeq	r0, r2
 80075a6:	bf2c      	ite	cs
 80075a8:	17d8      	asrcs	r0, r3, #31
 80075aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80075ae:	f040 0001 	orr.w	r0, r0, #1
 80075b2:	4770      	bx	lr
 80075b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80075b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075bc:	d102      	bne.n	80075c4 <__cmpdf2+0x64>
 80075be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80075c2:	d107      	bne.n	80075d4 <__cmpdf2+0x74>
 80075c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80075c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075cc:	d1d6      	bne.n	800757c <__cmpdf2+0x1c>
 80075ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80075d2:	d0d3      	beq.n	800757c <__cmpdf2+0x1c>
 80075d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <__aeabi_cdrcmple>:
 80075dc:	4684      	mov	ip, r0
 80075de:	4610      	mov	r0, r2
 80075e0:	4662      	mov	r2, ip
 80075e2:	468c      	mov	ip, r1
 80075e4:	4619      	mov	r1, r3
 80075e6:	4663      	mov	r3, ip
 80075e8:	e000      	b.n	80075ec <__aeabi_cdcmpeq>
 80075ea:	bf00      	nop

080075ec <__aeabi_cdcmpeq>:
 80075ec:	b501      	push	{r0, lr}
 80075ee:	f7ff ffb7 	bl	8007560 <__cmpdf2>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	bf48      	it	mi
 80075f6:	f110 0f00 	cmnmi.w	r0, #0
 80075fa:	bd01      	pop	{r0, pc}

080075fc <__aeabi_dcmpeq>:
 80075fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007600:	f7ff fff4 	bl	80075ec <__aeabi_cdcmpeq>
 8007604:	bf0c      	ite	eq
 8007606:	2001      	moveq	r0, #1
 8007608:	2000      	movne	r0, #0
 800760a:	f85d fb08 	ldr.w	pc, [sp], #8
 800760e:	bf00      	nop

08007610 <__aeabi_dcmplt>:
 8007610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007614:	f7ff ffea 	bl	80075ec <__aeabi_cdcmpeq>
 8007618:	bf34      	ite	cc
 800761a:	2001      	movcc	r0, #1
 800761c:	2000      	movcs	r0, #0
 800761e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007622:	bf00      	nop

08007624 <__aeabi_dcmple>:
 8007624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007628:	f7ff ffe0 	bl	80075ec <__aeabi_cdcmpeq>
 800762c:	bf94      	ite	ls
 800762e:	2001      	movls	r0, #1
 8007630:	2000      	movhi	r0, #0
 8007632:	f85d fb08 	ldr.w	pc, [sp], #8
 8007636:	bf00      	nop

08007638 <__aeabi_dcmpge>:
 8007638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800763c:	f7ff ffce 	bl	80075dc <__aeabi_cdrcmple>
 8007640:	bf94      	ite	ls
 8007642:	2001      	movls	r0, #1
 8007644:	2000      	movhi	r0, #0
 8007646:	f85d fb08 	ldr.w	pc, [sp], #8
 800764a:	bf00      	nop

0800764c <__aeabi_dcmpgt>:
 800764c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007650:	f7ff ffc4 	bl	80075dc <__aeabi_cdrcmple>
 8007654:	bf34      	ite	cc
 8007656:	2001      	movcc	r0, #1
 8007658:	2000      	movcs	r0, #0
 800765a:	f85d fb08 	ldr.w	pc, [sp], #8
 800765e:	bf00      	nop

08007660 <__aeabi_dcmpun>:
 8007660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007668:	d102      	bne.n	8007670 <__aeabi_dcmpun+0x10>
 800766a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800766e:	d10a      	bne.n	8007686 <__aeabi_dcmpun+0x26>
 8007670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007678:	d102      	bne.n	8007680 <__aeabi_dcmpun+0x20>
 800767a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800767e:	d102      	bne.n	8007686 <__aeabi_dcmpun+0x26>
 8007680:	f04f 0000 	mov.w	r0, #0
 8007684:	4770      	bx	lr
 8007686:	f04f 0001 	mov.w	r0, #1
 800768a:	4770      	bx	lr

0800768c <__aeabi_d2iz>:
 800768c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007690:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007694:	d215      	bcs.n	80076c2 <__aeabi_d2iz+0x36>
 8007696:	d511      	bpl.n	80076bc <__aeabi_d2iz+0x30>
 8007698:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800769c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80076a0:	d912      	bls.n	80076c8 <__aeabi_d2iz+0x3c>
 80076a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80076a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80076ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80076b2:	fa23 f002 	lsr.w	r0, r3, r2
 80076b6:	bf18      	it	ne
 80076b8:	4240      	negne	r0, r0
 80076ba:	4770      	bx	lr
 80076bc:	f04f 0000 	mov.w	r0, #0
 80076c0:	4770      	bx	lr
 80076c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80076c6:	d105      	bne.n	80076d4 <__aeabi_d2iz+0x48>
 80076c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80076cc:	bf08      	it	eq
 80076ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80076d2:	4770      	bx	lr
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <__aeabi_d2f>:
 80076dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80076e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80076e4:	bf24      	itt	cs
 80076e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80076ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80076ee:	d90d      	bls.n	800770c <__aeabi_d2f+0x30>
 80076f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80076f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80076f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80076fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007700:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007704:	bf08      	it	eq
 8007706:	f020 0001 	biceq.w	r0, r0, #1
 800770a:	4770      	bx	lr
 800770c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007710:	d121      	bne.n	8007756 <__aeabi_d2f+0x7a>
 8007712:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007716:	bfbc      	itt	lt
 8007718:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800771c:	4770      	bxlt	lr
 800771e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007722:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007726:	f1c2 0218 	rsb	r2, r2, #24
 800772a:	f1c2 0c20 	rsb	ip, r2, #32
 800772e:	fa10 f30c 	lsls.w	r3, r0, ip
 8007732:	fa20 f002 	lsr.w	r0, r0, r2
 8007736:	bf18      	it	ne
 8007738:	f040 0001 	orrne.w	r0, r0, #1
 800773c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007740:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007744:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007748:	ea40 000c 	orr.w	r0, r0, ip
 800774c:	fa23 f302 	lsr.w	r3, r3, r2
 8007750:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007754:	e7cc      	b.n	80076f0 <__aeabi_d2f+0x14>
 8007756:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800775a:	d107      	bne.n	800776c <__aeabi_d2f+0x90>
 800775c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007760:	bf1e      	ittt	ne
 8007762:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007766:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800776a:	4770      	bxne	lr
 800776c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007770:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007774:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <__aeabi_uldivmod>:
 800777c:	b953      	cbnz	r3, 8007794 <__aeabi_uldivmod+0x18>
 800777e:	b94a      	cbnz	r2, 8007794 <__aeabi_uldivmod+0x18>
 8007780:	2900      	cmp	r1, #0
 8007782:	bf08      	it	eq
 8007784:	2800      	cmpeq	r0, #0
 8007786:	bf1c      	itt	ne
 8007788:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800778c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007790:	f001 b8f8 	b.w	8008984 <__aeabi_idiv0>
 8007794:	f1ad 0c08 	sub.w	ip, sp, #8
 8007798:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800779c:	f000 f806 	bl	80077ac <__udivmoddi4>
 80077a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80077a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077a8:	b004      	add	sp, #16
 80077aa:	4770      	bx	lr

080077ac <__udivmoddi4>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	9e08      	ldr	r6, [sp, #32]
 80077b2:	4604      	mov	r4, r0
 80077b4:	4688      	mov	r8, r1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d14b      	bne.n	8007852 <__udivmoddi4+0xa6>
 80077ba:	428a      	cmp	r2, r1
 80077bc:	4615      	mov	r5, r2
 80077be:	d967      	bls.n	8007890 <__udivmoddi4+0xe4>
 80077c0:	fab2 f282 	clz	r2, r2
 80077c4:	b14a      	cbz	r2, 80077da <__udivmoddi4+0x2e>
 80077c6:	f1c2 0720 	rsb	r7, r2, #32
 80077ca:	fa01 f302 	lsl.w	r3, r1, r2
 80077ce:	fa20 f707 	lsr.w	r7, r0, r7
 80077d2:	4095      	lsls	r5, r2
 80077d4:	ea47 0803 	orr.w	r8, r7, r3
 80077d8:	4094      	lsls	r4, r2
 80077da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80077de:	0c23      	lsrs	r3, r4, #16
 80077e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80077e4:	fa1f fc85 	uxth.w	ip, r5
 80077e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80077ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80077f0:	fb07 f10c 	mul.w	r1, r7, ip
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d909      	bls.n	800780c <__udivmoddi4+0x60>
 80077f8:	18eb      	adds	r3, r5, r3
 80077fa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80077fe:	f080 811b 	bcs.w	8007a38 <__udivmoddi4+0x28c>
 8007802:	4299      	cmp	r1, r3
 8007804:	f240 8118 	bls.w	8007a38 <__udivmoddi4+0x28c>
 8007808:	3f02      	subs	r7, #2
 800780a:	442b      	add	r3, r5
 800780c:	1a5b      	subs	r3, r3, r1
 800780e:	b2a4      	uxth	r4, r4
 8007810:	fbb3 f0fe 	udiv	r0, r3, lr
 8007814:	fb0e 3310 	mls	r3, lr, r0, r3
 8007818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800781c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007820:	45a4      	cmp	ip, r4
 8007822:	d909      	bls.n	8007838 <__udivmoddi4+0x8c>
 8007824:	192c      	adds	r4, r5, r4
 8007826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800782a:	f080 8107 	bcs.w	8007a3c <__udivmoddi4+0x290>
 800782e:	45a4      	cmp	ip, r4
 8007830:	f240 8104 	bls.w	8007a3c <__udivmoddi4+0x290>
 8007834:	3802      	subs	r0, #2
 8007836:	442c      	add	r4, r5
 8007838:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800783c:	eba4 040c 	sub.w	r4, r4, ip
 8007840:	2700      	movs	r7, #0
 8007842:	b11e      	cbz	r6, 800784c <__udivmoddi4+0xa0>
 8007844:	40d4      	lsrs	r4, r2
 8007846:	2300      	movs	r3, #0
 8007848:	e9c6 4300 	strd	r4, r3, [r6]
 800784c:	4639      	mov	r1, r7
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	428b      	cmp	r3, r1
 8007854:	d909      	bls.n	800786a <__udivmoddi4+0xbe>
 8007856:	2e00      	cmp	r6, #0
 8007858:	f000 80eb 	beq.w	8007a32 <__udivmoddi4+0x286>
 800785c:	2700      	movs	r7, #0
 800785e:	e9c6 0100 	strd	r0, r1, [r6]
 8007862:	4638      	mov	r0, r7
 8007864:	4639      	mov	r1, r7
 8007866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786a:	fab3 f783 	clz	r7, r3
 800786e:	2f00      	cmp	r7, #0
 8007870:	d147      	bne.n	8007902 <__udivmoddi4+0x156>
 8007872:	428b      	cmp	r3, r1
 8007874:	d302      	bcc.n	800787c <__udivmoddi4+0xd0>
 8007876:	4282      	cmp	r2, r0
 8007878:	f200 80fa 	bhi.w	8007a70 <__udivmoddi4+0x2c4>
 800787c:	1a84      	subs	r4, r0, r2
 800787e:	eb61 0303 	sbc.w	r3, r1, r3
 8007882:	2001      	movs	r0, #1
 8007884:	4698      	mov	r8, r3
 8007886:	2e00      	cmp	r6, #0
 8007888:	d0e0      	beq.n	800784c <__udivmoddi4+0xa0>
 800788a:	e9c6 4800 	strd	r4, r8, [r6]
 800788e:	e7dd      	b.n	800784c <__udivmoddi4+0xa0>
 8007890:	b902      	cbnz	r2, 8007894 <__udivmoddi4+0xe8>
 8007892:	deff      	udf	#255	; 0xff
 8007894:	fab2 f282 	clz	r2, r2
 8007898:	2a00      	cmp	r2, #0
 800789a:	f040 808f 	bne.w	80079bc <__udivmoddi4+0x210>
 800789e:	1b49      	subs	r1, r1, r5
 80078a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80078a4:	fa1f f885 	uxth.w	r8, r5
 80078a8:	2701      	movs	r7, #1
 80078aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80078ae:	0c23      	lsrs	r3, r4, #16
 80078b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80078b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80078b8:	fb08 f10c 	mul.w	r1, r8, ip
 80078bc:	4299      	cmp	r1, r3
 80078be:	d907      	bls.n	80078d0 <__udivmoddi4+0x124>
 80078c0:	18eb      	adds	r3, r5, r3
 80078c2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80078c6:	d202      	bcs.n	80078ce <__udivmoddi4+0x122>
 80078c8:	4299      	cmp	r1, r3
 80078ca:	f200 80cd 	bhi.w	8007a68 <__udivmoddi4+0x2bc>
 80078ce:	4684      	mov	ip, r0
 80078d0:	1a59      	subs	r1, r3, r1
 80078d2:	b2a3      	uxth	r3, r4
 80078d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80078d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80078dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80078e0:	fb08 f800 	mul.w	r8, r8, r0
 80078e4:	45a0      	cmp	r8, r4
 80078e6:	d907      	bls.n	80078f8 <__udivmoddi4+0x14c>
 80078e8:	192c      	adds	r4, r5, r4
 80078ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078ee:	d202      	bcs.n	80078f6 <__udivmoddi4+0x14a>
 80078f0:	45a0      	cmp	r8, r4
 80078f2:	f200 80b6 	bhi.w	8007a62 <__udivmoddi4+0x2b6>
 80078f6:	4618      	mov	r0, r3
 80078f8:	eba4 0408 	sub.w	r4, r4, r8
 80078fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007900:	e79f      	b.n	8007842 <__udivmoddi4+0x96>
 8007902:	f1c7 0c20 	rsb	ip, r7, #32
 8007906:	40bb      	lsls	r3, r7
 8007908:	fa22 fe0c 	lsr.w	lr, r2, ip
 800790c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007910:	fa01 f407 	lsl.w	r4, r1, r7
 8007914:	fa20 f50c 	lsr.w	r5, r0, ip
 8007918:	fa21 f30c 	lsr.w	r3, r1, ip
 800791c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007920:	4325      	orrs	r5, r4
 8007922:	fbb3 f9f8 	udiv	r9, r3, r8
 8007926:	0c2c      	lsrs	r4, r5, #16
 8007928:	fb08 3319 	mls	r3, r8, r9, r3
 800792c:	fa1f fa8e 	uxth.w	sl, lr
 8007930:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007934:	fb09 f40a 	mul.w	r4, r9, sl
 8007938:	429c      	cmp	r4, r3
 800793a:	fa02 f207 	lsl.w	r2, r2, r7
 800793e:	fa00 f107 	lsl.w	r1, r0, r7
 8007942:	d90b      	bls.n	800795c <__udivmoddi4+0x1b0>
 8007944:	eb1e 0303 	adds.w	r3, lr, r3
 8007948:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800794c:	f080 8087 	bcs.w	8007a5e <__udivmoddi4+0x2b2>
 8007950:	429c      	cmp	r4, r3
 8007952:	f240 8084 	bls.w	8007a5e <__udivmoddi4+0x2b2>
 8007956:	f1a9 0902 	sub.w	r9, r9, #2
 800795a:	4473      	add	r3, lr
 800795c:	1b1b      	subs	r3, r3, r4
 800795e:	b2ad      	uxth	r5, r5
 8007960:	fbb3 f0f8 	udiv	r0, r3, r8
 8007964:	fb08 3310 	mls	r3, r8, r0, r3
 8007968:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800796c:	fb00 fa0a 	mul.w	sl, r0, sl
 8007970:	45a2      	cmp	sl, r4
 8007972:	d908      	bls.n	8007986 <__udivmoddi4+0x1da>
 8007974:	eb1e 0404 	adds.w	r4, lr, r4
 8007978:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800797c:	d26b      	bcs.n	8007a56 <__udivmoddi4+0x2aa>
 800797e:	45a2      	cmp	sl, r4
 8007980:	d969      	bls.n	8007a56 <__udivmoddi4+0x2aa>
 8007982:	3802      	subs	r0, #2
 8007984:	4474      	add	r4, lr
 8007986:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800798a:	fba0 8902 	umull	r8, r9, r0, r2
 800798e:	eba4 040a 	sub.w	r4, r4, sl
 8007992:	454c      	cmp	r4, r9
 8007994:	46c2      	mov	sl, r8
 8007996:	464b      	mov	r3, r9
 8007998:	d354      	bcc.n	8007a44 <__udivmoddi4+0x298>
 800799a:	d051      	beq.n	8007a40 <__udivmoddi4+0x294>
 800799c:	2e00      	cmp	r6, #0
 800799e:	d069      	beq.n	8007a74 <__udivmoddi4+0x2c8>
 80079a0:	ebb1 050a 	subs.w	r5, r1, sl
 80079a4:	eb64 0403 	sbc.w	r4, r4, r3
 80079a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80079ac:	40fd      	lsrs	r5, r7
 80079ae:	40fc      	lsrs	r4, r7
 80079b0:	ea4c 0505 	orr.w	r5, ip, r5
 80079b4:	e9c6 5400 	strd	r5, r4, [r6]
 80079b8:	2700      	movs	r7, #0
 80079ba:	e747      	b.n	800784c <__udivmoddi4+0xa0>
 80079bc:	f1c2 0320 	rsb	r3, r2, #32
 80079c0:	fa20 f703 	lsr.w	r7, r0, r3
 80079c4:	4095      	lsls	r5, r2
 80079c6:	fa01 f002 	lsl.w	r0, r1, r2
 80079ca:	fa21 f303 	lsr.w	r3, r1, r3
 80079ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80079d2:	4338      	orrs	r0, r7
 80079d4:	0c01      	lsrs	r1, r0, #16
 80079d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80079da:	fa1f f885 	uxth.w	r8, r5
 80079de:	fb0e 3317 	mls	r3, lr, r7, r3
 80079e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80079e6:	fb07 f308 	mul.w	r3, r7, r8
 80079ea:	428b      	cmp	r3, r1
 80079ec:	fa04 f402 	lsl.w	r4, r4, r2
 80079f0:	d907      	bls.n	8007a02 <__udivmoddi4+0x256>
 80079f2:	1869      	adds	r1, r5, r1
 80079f4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80079f8:	d22f      	bcs.n	8007a5a <__udivmoddi4+0x2ae>
 80079fa:	428b      	cmp	r3, r1
 80079fc:	d92d      	bls.n	8007a5a <__udivmoddi4+0x2ae>
 80079fe:	3f02      	subs	r7, #2
 8007a00:	4429      	add	r1, r5
 8007a02:	1acb      	subs	r3, r1, r3
 8007a04:	b281      	uxth	r1, r0
 8007a06:	fbb3 f0fe 	udiv	r0, r3, lr
 8007a0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8007a0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a12:	fb00 f308 	mul.w	r3, r0, r8
 8007a16:	428b      	cmp	r3, r1
 8007a18:	d907      	bls.n	8007a2a <__udivmoddi4+0x27e>
 8007a1a:	1869      	adds	r1, r5, r1
 8007a1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007a20:	d217      	bcs.n	8007a52 <__udivmoddi4+0x2a6>
 8007a22:	428b      	cmp	r3, r1
 8007a24:	d915      	bls.n	8007a52 <__udivmoddi4+0x2a6>
 8007a26:	3802      	subs	r0, #2
 8007a28:	4429      	add	r1, r5
 8007a2a:	1ac9      	subs	r1, r1, r3
 8007a2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007a30:	e73b      	b.n	80078aa <__udivmoddi4+0xfe>
 8007a32:	4637      	mov	r7, r6
 8007a34:	4630      	mov	r0, r6
 8007a36:	e709      	b.n	800784c <__udivmoddi4+0xa0>
 8007a38:	4607      	mov	r7, r0
 8007a3a:	e6e7      	b.n	800780c <__udivmoddi4+0x60>
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	e6fb      	b.n	8007838 <__udivmoddi4+0x8c>
 8007a40:	4541      	cmp	r1, r8
 8007a42:	d2ab      	bcs.n	800799c <__udivmoddi4+0x1f0>
 8007a44:	ebb8 0a02 	subs.w	sl, r8, r2
 8007a48:	eb69 020e 	sbc.w	r2, r9, lr
 8007a4c:	3801      	subs	r0, #1
 8007a4e:	4613      	mov	r3, r2
 8007a50:	e7a4      	b.n	800799c <__udivmoddi4+0x1f0>
 8007a52:	4660      	mov	r0, ip
 8007a54:	e7e9      	b.n	8007a2a <__udivmoddi4+0x27e>
 8007a56:	4618      	mov	r0, r3
 8007a58:	e795      	b.n	8007986 <__udivmoddi4+0x1da>
 8007a5a:	4667      	mov	r7, ip
 8007a5c:	e7d1      	b.n	8007a02 <__udivmoddi4+0x256>
 8007a5e:	4681      	mov	r9, r0
 8007a60:	e77c      	b.n	800795c <__udivmoddi4+0x1b0>
 8007a62:	3802      	subs	r0, #2
 8007a64:	442c      	add	r4, r5
 8007a66:	e747      	b.n	80078f8 <__udivmoddi4+0x14c>
 8007a68:	f1ac 0c02 	sub.w	ip, ip, #2
 8007a6c:	442b      	add	r3, r5
 8007a6e:	e72f      	b.n	80078d0 <__udivmoddi4+0x124>
 8007a70:	4638      	mov	r0, r7
 8007a72:	e708      	b.n	8007886 <__udivmoddi4+0xda>
 8007a74:	4637      	mov	r7, r6
 8007a76:	e6e9      	b.n	800784c <__udivmoddi4+0xa0>

08007a78 <selfrel_offset31>:
 8007a78:	6803      	ldr	r3, [r0, #0]
 8007a7a:	005a      	lsls	r2, r3, #1
 8007a7c:	bf4c      	ite	mi
 8007a7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007a82:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8007a86:	4418      	add	r0, r3
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <search_EIT_table>:
 8007a8c:	b361      	cbz	r1, 8007ae8 <search_EIT_table+0x5c>
 8007a8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a92:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8007a96:	4690      	mov	r8, r2
 8007a98:	4606      	mov	r6, r0
 8007a9a:	46d1      	mov	r9, sl
 8007a9c:	2700      	movs	r7, #0
 8007a9e:	eb07 0409 	add.w	r4, r7, r9
 8007aa2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007aa6:	1064      	asrs	r4, r4, #1
 8007aa8:	00e5      	lsls	r5, r4, #3
 8007aaa:	1971      	adds	r1, r6, r5
 8007aac:	4608      	mov	r0, r1
 8007aae:	f7ff ffe3 	bl	8007a78 <selfrel_offset31>
 8007ab2:	45a2      	cmp	sl, r4
 8007ab4:	4683      	mov	fp, r0
 8007ab6:	f105 0008 	add.w	r0, r5, #8
 8007aba:	4430      	add	r0, r6
 8007abc:	d009      	beq.n	8007ad2 <search_EIT_table+0x46>
 8007abe:	f7ff ffdb 	bl	8007a78 <selfrel_offset31>
 8007ac2:	45c3      	cmp	fp, r8
 8007ac4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007ac8:	d805      	bhi.n	8007ad6 <search_EIT_table+0x4a>
 8007aca:	4540      	cmp	r0, r8
 8007acc:	d209      	bcs.n	8007ae2 <search_EIT_table+0x56>
 8007ace:	1c67      	adds	r7, r4, #1
 8007ad0:	e7e5      	b.n	8007a9e <search_EIT_table+0x12>
 8007ad2:	45c3      	cmp	fp, r8
 8007ad4:	d905      	bls.n	8007ae2 <search_EIT_table+0x56>
 8007ad6:	42a7      	cmp	r7, r4
 8007ad8:	d002      	beq.n	8007ae0 <search_EIT_table+0x54>
 8007ada:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8007ade:	e7de      	b.n	8007a9e <search_EIT_table+0x12>
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4770      	bx	lr

08007aec <__gnu_unwind_get_pr_addr>:
 8007aec:	2801      	cmp	r0, #1
 8007aee:	d007      	beq.n	8007b00 <__gnu_unwind_get_pr_addr+0x14>
 8007af0:	2802      	cmp	r0, #2
 8007af2:	d007      	beq.n	8007b04 <__gnu_unwind_get_pr_addr+0x18>
 8007af4:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <__gnu_unwind_get_pr_addr+0x1c>)
 8007af6:	2800      	cmp	r0, #0
 8007af8:	bf0c      	ite	eq
 8007afa:	4618      	moveq	r0, r3
 8007afc:	2000      	movne	r0, #0
 8007afe:	4770      	bx	lr
 8007b00:	4802      	ldr	r0, [pc, #8]	; (8007b0c <__gnu_unwind_get_pr_addr+0x20>)
 8007b02:	4770      	bx	lr
 8007b04:	4802      	ldr	r0, [pc, #8]	; (8007b10 <__gnu_unwind_get_pr_addr+0x24>)
 8007b06:	4770      	bx	lr
 8007b08:	080081d9 	.word	0x080081d9
 8007b0c:	080081dd 	.word	0x080081dd
 8007b10:	080081e1 	.word	0x080081e1

08007b14 <get_eit_entry>:
 8007b14:	b530      	push	{r4, r5, lr}
 8007b16:	4b25      	ldr	r3, [pc, #148]	; (8007bac <get_eit_entry+0x98>)
 8007b18:	b083      	sub	sp, #12
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	1e8d      	subs	r5, r1, #2
 8007b1e:	b34b      	cbz	r3, 8007b74 <get_eit_entry+0x60>
 8007b20:	a901      	add	r1, sp, #4
 8007b22:	4628      	mov	r0, r5
 8007b24:	f3af 8000 	nop.w
 8007b28:	b1f0      	cbz	r0, 8007b68 <get_eit_entry+0x54>
 8007b2a:	9901      	ldr	r1, [sp, #4]
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	f7ff ffad 	bl	8007a8c <search_EIT_table>
 8007b32:	4601      	mov	r1, r0
 8007b34:	b1c0      	cbz	r0, 8007b68 <get_eit_entry+0x54>
 8007b36:	f7ff ff9f 	bl	8007a78 <selfrel_offset31>
 8007b3a:	684b      	ldr	r3, [r1, #4]
 8007b3c:	64a0      	str	r0, [r4, #72]	; 0x48
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d02e      	beq.n	8007ba0 <get_eit_entry+0x8c>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f101 0004 	add.w	r0, r1, #4
 8007b48:	db26      	blt.n	8007b98 <get_eit_entry+0x84>
 8007b4a:	f7ff ff95 	bl	8007a78 <selfrel_offset31>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007b54:	6803      	ldr	r3, [r0, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	db12      	blt.n	8007b80 <get_eit_entry+0x6c>
 8007b5a:	f7ff ff8d 	bl	8007a78 <selfrel_offset31>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6120      	str	r0, [r4, #16]
 8007b62:	4618      	mov	r0, r3
 8007b64:	b003      	add	sp, #12
 8007b66:	bd30      	pop	{r4, r5, pc}
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	2309      	movs	r3, #9
 8007b6e:	4618      	mov	r0, r3
 8007b70:	b003      	add	sp, #12
 8007b72:	bd30      	pop	{r4, r5, pc}
 8007b74:	490e      	ldr	r1, [pc, #56]	; (8007bb0 <get_eit_entry+0x9c>)
 8007b76:	480f      	ldr	r0, [pc, #60]	; (8007bb4 <get_eit_entry+0xa0>)
 8007b78:	1a09      	subs	r1, r1, r0
 8007b7a:	10c9      	asrs	r1, r1, #3
 8007b7c:	9101      	str	r1, [sp, #4]
 8007b7e:	e7d5      	b.n	8007b2c <get_eit_entry+0x18>
 8007b80:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007b84:	f7ff ffb2 	bl	8007aec <__gnu_unwind_get_pr_addr>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	bf14      	ite	ne
 8007b8c:	2300      	movne	r3, #0
 8007b8e:	2309      	moveq	r3, #9
 8007b90:	6120      	str	r0, [r4, #16]
 8007b92:	4618      	mov	r0, r3
 8007b94:	b003      	add	sp, #12
 8007b96:	bd30      	pop	{r4, r5, pc}
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007b9e:	e7d9      	b.n	8007b54 <get_eit_entry+0x40>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	2305      	movs	r3, #5
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	b003      	add	sp, #12
 8007baa:	bd30      	pop	{r4, r5, pc}
 8007bac:	00000000 	.word	0x00000000
 8007bb0:	080b4734 	.word	0x080b4734
 8007bb4:	080b45ac 	.word	0x080b45ac

08007bb8 <restore_non_core_regs>:
 8007bb8:	6803      	ldr	r3, [r0, #0]
 8007bba:	07da      	lsls	r2, r3, #31
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	d406      	bmi.n	8007bd0 <restore_non_core_regs+0x18>
 8007bc2:	079b      	lsls	r3, r3, #30
 8007bc4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007bc8:	d509      	bpl.n	8007bde <restore_non_core_regs+0x26>
 8007bca:	f000 fc5f 	bl	800848c <__gnu_Unwind_Restore_VFP_D>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	0759      	lsls	r1, r3, #29
 8007bd2:	d509      	bpl.n	8007be8 <restore_non_core_regs+0x30>
 8007bd4:	071a      	lsls	r2, r3, #28
 8007bd6:	d50e      	bpl.n	8007bf6 <restore_non_core_regs+0x3e>
 8007bd8:	06db      	lsls	r3, r3, #27
 8007bda:	d513      	bpl.n	8007c04 <restore_non_core_regs+0x4c>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f000 fc4d 	bl	800847c <__gnu_Unwind_Restore_VFP>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	0759      	lsls	r1, r3, #29
 8007be6:	d4f5      	bmi.n	8007bd4 <restore_non_core_regs+0x1c>
 8007be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007bec:	f000 fc56 	bl	800849c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	071a      	lsls	r2, r3, #28
 8007bf4:	d4f0      	bmi.n	8007bd8 <restore_non_core_regs+0x20>
 8007bf6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007bfa:	f000 fc57 	bl	80084ac <__gnu_Unwind_Restore_WMMXD>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	06db      	lsls	r3, r3, #27
 8007c02:	d4eb      	bmi.n	8007bdc <restore_non_core_regs+0x24>
 8007c04:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0c:	f000 bc92 	b.w	8008534 <__gnu_Unwind_Restore_WMMXC>

08007c10 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007c10:	6803      	ldr	r3, [r0, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007c14:	4403      	add	r3, r0
 8007c16:	4618      	mov	r0, r3
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop

08007c1c <__gnu_unwind_24bit.isra.1>:
 8007c1c:	2009      	movs	r0, #9
 8007c1e:	4770      	bx	lr

08007c20 <_Unwind_DebugHook>:
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop

08007c24 <unwind_phase2>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4604      	mov	r4, r0
 8007c28:	460d      	mov	r5, r1
 8007c2a:	e008      	b.n	8007c3e <unwind_phase2+0x1a>
 8007c2c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007c2e:	6163      	str	r3, [r4, #20]
 8007c30:	462a      	mov	r2, r5
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	4621      	mov	r1, r4
 8007c36:	2001      	movs	r0, #1
 8007c38:	4798      	blx	r3
 8007c3a:	2808      	cmp	r0, #8
 8007c3c:	d108      	bne.n	8007c50 <unwind_phase2+0x2c>
 8007c3e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7ff ff67 	bl	8007b14 <get_eit_entry>
 8007c46:	4606      	mov	r6, r0
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d0ef      	beq.n	8007c2c <unwind_phase2+0x8>
 8007c4c:	f020 fc9c 	bl	8028588 <abort>
 8007c50:	2807      	cmp	r0, #7
 8007c52:	d1fb      	bne.n	8007c4c <unwind_phase2+0x28>
 8007c54:	4630      	mov	r0, r6
 8007c56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007c58:	f7ff ffe2 	bl	8007c20 <_Unwind_DebugHook>
 8007c5c:	1d28      	adds	r0, r5, #4
 8007c5e:	f000 fc01 	bl	8008464 <__restore_core_regs>
 8007c62:	bf00      	nop

08007c64 <unwind_phase2_forced>:
 8007c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c68:	1d0c      	adds	r4, r1, #4
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	4617      	mov	r7, r2
 8007c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c70:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007c74:	ae03      	add	r6, sp, #12
 8007c76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007c80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007c84:	ac02      	add	r4, sp, #8
 8007c86:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007c8a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007c8e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007c92:	2300      	movs	r3, #0
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	e021      	b.n	8007cdc <unwind_phase2_forced+0x78>
 8007c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9a:	616b      	str	r3, [r5, #20]
 8007c9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	a87a      	add	r0, sp, #488	; 0x1e8
 8007ca4:	f021 f90f 	bl	8028ec6 <memcpy>
 8007ca8:	692b      	ldr	r3, [r5, #16]
 8007caa:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007cac:	4629      	mov	r1, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	4798      	blx	r3
 8007cb2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007cb4:	e9cd 4900 	strd	r4, r9, [sp]
 8007cb8:	4682      	mov	sl, r0
 8007cba:	6463      	str	r3, [r4, #68]	; 0x44
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	47c0      	blx	r8
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	b9f8      	cbnz	r0, 8007d0a <unwind_phase2_forced+0xa6>
 8007cca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007cce:	a97a      	add	r1, sp, #488	; 0x1e8
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f021 f8f8 	bl	8028ec6 <memcpy>
 8007cd6:	f1ba 0f08 	cmp.w	sl, #8
 8007cda:	d11c      	bne.n	8007d16 <unwind_phase2_forced+0xb2>
 8007cdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7ff ff18 	bl	8007b14 <get_eit_entry>
 8007ce4:	2f00      	cmp	r7, #0
 8007ce6:	bf08      	it	eq
 8007ce8:	2609      	moveq	r6, #9
 8007cea:	4607      	mov	r7, r0
 8007cec:	bf18      	it	ne
 8007cee:	260a      	movne	r6, #10
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d0d1      	beq.n	8007c98 <unwind_phase2_forced+0x34>
 8007cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cf6:	f046 0110 	orr.w	r1, r6, #16
 8007cfa:	e9cd 4900 	strd	r4, r9, [sp]
 8007cfe:	462a      	mov	r2, r5
 8007d00:	6463      	str	r3, [r4, #68]	; 0x44
 8007d02:	2001      	movs	r0, #1
 8007d04:	462b      	mov	r3, r5
 8007d06:	47c0      	blx	r8
 8007d08:	b100      	cbz	r0, 8007d0c <unwind_phase2_forced+0xa8>
 8007d0a:	2709      	movs	r7, #9
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d16:	f1ba 0f07 	cmp.w	sl, #7
 8007d1a:	d1f6      	bne.n	8007d0a <unwind_phase2_forced+0xa6>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d20:	f7ff ff7e 	bl	8007c20 <_Unwind_DebugHook>
 8007d24:	a803      	add	r0, sp, #12
 8007d26:	f000 fb9d 	bl	8008464 <__restore_core_regs>
 8007d2a:	bf00      	nop

08007d2c <_Unwind_GetCFA>:
 8007d2c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007d2e:	4770      	bx	lr

08007d30 <__gnu_Unwind_RaiseException>:
 8007d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007d34:	640b      	str	r3, [r1, #64]	; 0x40
 8007d36:	1d0d      	adds	r5, r1, #4
 8007d38:	460f      	mov	r7, r1
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d3e:	b0f9      	sub	sp, #484	; 0x1e4
 8007d40:	ac01      	add	r4, sp, #4
 8007d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007d50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007d58:	9500      	str	r5, [sp, #0]
 8007d5a:	e006      	b.n	8007d6a <__gnu_Unwind_RaiseException+0x3a>
 8007d5c:	6933      	ldr	r3, [r6, #16]
 8007d5e:	466a      	mov	r2, sp
 8007d60:	4631      	mov	r1, r6
 8007d62:	4798      	blx	r3
 8007d64:	2808      	cmp	r0, #8
 8007d66:	4604      	mov	r4, r0
 8007d68:	d108      	bne.n	8007d7c <__gnu_Unwind_RaiseException+0x4c>
 8007d6a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff fed1 	bl	8007b14 <get_eit_entry>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d0f2      	beq.n	8007d5c <__gnu_Unwind_RaiseException+0x2c>
 8007d76:	2009      	movs	r0, #9
 8007d78:	b079      	add	sp, #484	; 0x1e4
 8007d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7c:	4668      	mov	r0, sp
 8007d7e:	f7ff ff1b 	bl	8007bb8 <restore_non_core_regs>
 8007d82:	2c06      	cmp	r4, #6
 8007d84:	d1f7      	bne.n	8007d76 <__gnu_Unwind_RaiseException+0x46>
 8007d86:	4639      	mov	r1, r7
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ff4b 	bl	8007c24 <unwind_phase2>
 8007d8e:	bf00      	nop

08007d90 <__gnu_Unwind_ForcedUnwind>:
 8007d90:	b430      	push	{r4, r5}
 8007d92:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007d94:	60c1      	str	r1, [r0, #12]
 8007d96:	6182      	str	r2, [r0, #24]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	641d      	str	r5, [r3, #64]	; 0x40
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	bc30      	pop	{r4, r5}
 8007da0:	e760      	b.n	8007c64 <unwind_phase2_forced>
 8007da2:	bf00      	nop

08007da4 <__gnu_Unwind_Resume>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	68c6      	ldr	r6, [r0, #12]
 8007da8:	6943      	ldr	r3, [r0, #20]
 8007daa:	640b      	str	r3, [r1, #64]	; 0x40
 8007dac:	b9be      	cbnz	r6, 8007dde <__gnu_Unwind_Resume+0x3a>
 8007dae:	6903      	ldr	r3, [r0, #16]
 8007db0:	460a      	mov	r2, r1
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
 8007db6:	4601      	mov	r1, r0
 8007db8:	2002      	movs	r0, #2
 8007dba:	4798      	blx	r3
 8007dbc:	2807      	cmp	r0, #7
 8007dbe:	d007      	beq.n	8007dd0 <__gnu_Unwind_Resume+0x2c>
 8007dc0:	2808      	cmp	r0, #8
 8007dc2:	d103      	bne.n	8007dcc <__gnu_Unwind_Resume+0x28>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff ff2c 	bl	8007c24 <unwind_phase2>
 8007dcc:	f020 fbdc 	bl	8028588 <abort>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007dd4:	f7ff ff24 	bl	8007c20 <_Unwind_DebugHook>
 8007dd8:	1d28      	adds	r0, r5, #4
 8007dda:	f000 fb43 	bl	8008464 <__restore_core_regs>
 8007dde:	2201      	movs	r2, #1
 8007de0:	f7ff ff40 	bl	8007c64 <unwind_phase2_forced>
 8007de4:	f020 fbd0 	bl	8028588 <abort>

08007de8 <__gnu_Unwind_Resume_or_Rethrow>:
 8007de8:	68c2      	ldr	r2, [r0, #12]
 8007dea:	b11a      	cbz	r2, 8007df4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007dec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007dee:	640a      	str	r2, [r1, #64]	; 0x40
 8007df0:	2200      	movs	r2, #0
 8007df2:	e737      	b.n	8007c64 <unwind_phase2_forced>
 8007df4:	e79c      	b.n	8007d30 <__gnu_Unwind_RaiseException>
 8007df6:	bf00      	nop

08007df8 <_Unwind_Complete>:
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop

08007dfc <_Unwind_DeleteException>:
 8007dfc:	6883      	ldr	r3, [r0, #8]
 8007dfe:	b113      	cbz	r3, 8007e06 <_Unwind_DeleteException+0xa>
 8007e00:	4601      	mov	r1, r0
 8007e02:	2001      	movs	r0, #1
 8007e04:	4718      	bx	r3
 8007e06:	4770      	bx	lr

08007e08 <_Unwind_VRS_Get>:
 8007e08:	2904      	cmp	r1, #4
 8007e0a:	d807      	bhi.n	8007e1c <_Unwind_VRS_Get+0x14>
 8007e0c:	e8df f001 	tbb	[pc, r1]
 8007e10:	08060803 	.word	0x08060803
 8007e14:	08          	.byte	0x08
 8007e15:	00          	.byte	0x00
 8007e16:	b90b      	cbnz	r3, 8007e1c <_Unwind_VRS_Get+0x14>
 8007e18:	2a0f      	cmp	r2, #15
 8007e1a:	d903      	bls.n	8007e24 <_Unwind_VRS_Get+0x1c>
 8007e1c:	2002      	movs	r0, #2
 8007e1e:	4770      	bx	lr
 8007e20:	2001      	movs	r0, #1
 8007e22:	4770      	bx	lr
 8007e24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	6853      	ldr	r3, [r2, #4]
 8007e2c:	9a00      	ldr	r2, [sp, #0]
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <_Unwind_GetGR>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	2300      	movs	r3, #0
 8007e3a:	ac03      	add	r4, sp, #12
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	9400      	str	r4, [sp, #0]
 8007e40:	4619      	mov	r1, r3
 8007e42:	f7ff ffe1 	bl	8007e08 <_Unwind_VRS_Get>
 8007e46:	9803      	ldr	r0, [sp, #12]
 8007e48:	b004      	add	sp, #16
 8007e4a:	bd10      	pop	{r4, pc}

08007e4c <_Unwind_VRS_Set>:
 8007e4c:	2904      	cmp	r1, #4
 8007e4e:	d807      	bhi.n	8007e60 <_Unwind_VRS_Set+0x14>
 8007e50:	e8df f001 	tbb	[pc, r1]
 8007e54:	08060803 	.word	0x08060803
 8007e58:	08          	.byte	0x08
 8007e59:	00          	.byte	0x00
 8007e5a:	b90b      	cbnz	r3, 8007e60 <_Unwind_VRS_Set+0x14>
 8007e5c:	2a0f      	cmp	r2, #15
 8007e5e:	d903      	bls.n	8007e68 <_Unwind_VRS_Set+0x1c>
 8007e60:	2002      	movs	r0, #2
 8007e62:	4770      	bx	lr
 8007e64:	2001      	movs	r0, #1
 8007e66:	4770      	bx	lr
 8007e68:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007e6c:	9a00      	ldr	r2, [sp, #0]
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	6042      	str	r2, [r0, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <_Unwind_SetGR>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	ac04      	add	r4, sp, #16
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007e84:	460a      	mov	r2, r1
 8007e86:	9400      	str	r4, [sp, #0]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	f7ff ffdf 	bl	8007e4c <_Unwind_VRS_Set>
 8007e8e:	b004      	add	sp, #16
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	bf00      	nop

08007e94 <__gnu_Unwind_Backtrace>:
 8007e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e96:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007e98:	6413      	str	r3, [r2, #64]	; 0x40
 8007e9a:	1d15      	adds	r5, r2, #4
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	460e      	mov	r6, r1
 8007ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ea2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007ea6:	ac17      	add	r4, sp, #92	; 0x5c
 8007ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007eb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ebe:	9516      	str	r5, [sp, #88]	; 0x58
 8007ec0:	e010      	b.n	8007ee4 <__gnu_Unwind_Backtrace+0x50>
 8007ec2:	a816      	add	r0, sp, #88	; 0x58
 8007ec4:	f7ff ffd8 	bl	8007e78 <_Unwind_SetGR>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	a816      	add	r0, sp, #88	; 0x58
 8007ecc:	47b8      	blx	r7
 8007ece:	aa16      	add	r2, sp, #88	; 0x58
 8007ed0:	4669      	mov	r1, sp
 8007ed2:	b978      	cbnz	r0, 8007ef4 <__gnu_Unwind_Backtrace+0x60>
 8007ed4:	9b04      	ldr	r3, [sp, #16]
 8007ed6:	2008      	movs	r0, #8
 8007ed8:	4798      	blx	r3
 8007eda:	2805      	cmp	r0, #5
 8007edc:	4604      	mov	r4, r0
 8007ede:	d00a      	beq.n	8007ef6 <__gnu_Unwind_Backtrace+0x62>
 8007ee0:	2809      	cmp	r0, #9
 8007ee2:	d007      	beq.n	8007ef4 <__gnu_Unwind_Backtrace+0x60>
 8007ee4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007ee6:	4668      	mov	r0, sp
 8007ee8:	f7ff fe14 	bl	8007b14 <get_eit_entry>
 8007eec:	466a      	mov	r2, sp
 8007eee:	210c      	movs	r1, #12
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d0e6      	beq.n	8007ec2 <__gnu_Unwind_Backtrace+0x2e>
 8007ef4:	2409      	movs	r4, #9
 8007ef6:	a816      	add	r0, sp, #88	; 0x58
 8007ef8:	f7ff fe5e 	bl	8007bb8 <restore_non_core_regs>
 8007efc:	4620      	mov	r0, r4
 8007efe:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f04 <__gnu_unwind_pr_common>:
 8007f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	460d      	mov	r5, r1
 8007f0a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007f0c:	b089      	sub	sp, #36	; 0x24
 8007f0e:	1d0c      	adds	r4, r1, #4
 8007f10:	4616      	mov	r6, r2
 8007f12:	f000 0b03 	and.w	fp, r0, #3
 8007f16:	680a      	ldr	r2, [r1, #0]
 8007f18:	9406      	str	r4, [sp, #24]
 8007f1a:	461f      	mov	r7, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d068      	beq.n	8007ff2 <__gnu_unwind_pr_common+0xee>
 8007f20:	0c13      	lsrs	r3, r2, #16
 8007f22:	b2d9      	uxtb	r1, r3
 8007f24:	0412      	lsls	r2, r2, #16
 8007f26:	f88d 301d 	strb.w	r3, [sp, #29]
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007f30:	9205      	str	r2, [sp, #20]
 8007f32:	f88d 301c 	strb.w	r3, [sp, #28]
 8007f36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007f38:	f1bb 0f02 	cmp.w	fp, #2
 8007f3c:	bf08      	it	eq
 8007f3e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007f40:	f013 0301 	ands.w	r3, r3, #1
 8007f44:	d146      	bne.n	8007fd4 <__gnu_unwind_pr_common+0xd0>
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	f000 0308 	and.w	r3, r0, #8
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	f8d4 9000 	ldr.w	r9, [r4]
 8007f52:	f1b9 0f00 	cmp.w	r9, #0
 8007f56:	f000 80f3 	beq.w	8008140 <__gnu_unwind_pr_common+0x23c>
 8007f5a:	2f02      	cmp	r7, #2
 8007f5c:	d045      	beq.n	8007fea <__gnu_unwind_pr_common+0xe6>
 8007f5e:	f8b4 9000 	ldrh.w	r9, [r4]
 8007f62:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007f66:	3404      	adds	r4, #4
 8007f68:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007f6a:	f028 0a01 	bic.w	sl, r8, #1
 8007f6e:	210f      	movs	r1, #15
 8007f70:	4630      	mov	r0, r6
 8007f72:	449a      	add	sl, r3
 8007f74:	f7ff ff5e 	bl	8007e34 <_Unwind_GetGR>
 8007f78:	4582      	cmp	sl, r0
 8007f7a:	d834      	bhi.n	8007fe6 <__gnu_unwind_pr_common+0xe2>
 8007f7c:	f029 0301 	bic.w	r3, r9, #1
 8007f80:	4453      	add	r3, sl
 8007f82:	4283      	cmp	r3, r0
 8007f84:	bf94      	ite	ls
 8007f86:	2000      	movls	r0, #0
 8007f88:	2001      	movhi	r0, #1
 8007f8a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007f8e:	f008 0802 	and.w	r8, r8, #2
 8007f92:	f009 0901 	and.w	r9, r9, #1
 8007f96:	ea48 0809 	orr.w	r8, r8, r9
 8007f9a:	f1b8 0f01 	cmp.w	r8, #1
 8007f9e:	d03a      	beq.n	8008016 <__gnu_unwind_pr_common+0x112>
 8007fa0:	d331      	bcc.n	8008006 <__gnu_unwind_pr_common+0x102>
 8007fa2:	f1b8 0f02 	cmp.w	r8, #2
 8007fa6:	d11a      	bne.n	8007fde <__gnu_unwind_pr_common+0xda>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007fae:	f1bb 0f00 	cmp.w	fp, #0
 8007fb2:	d166      	bne.n	8008082 <__gnu_unwind_pr_common+0x17e>
 8007fb4:	b130      	cbz	r0, 8007fc4 <__gnu_unwind_pr_common+0xc0>
 8007fb6:	9a00      	ldr	r2, [sp, #0]
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	d06c      	beq.n	8008096 <__gnu_unwind_pr_common+0x192>
 8007fbc:	f1ba 0f00 	cmp.w	sl, #0
 8007fc0:	f000 8090 	beq.w	80080e4 <__gnu_unwind_pr_common+0x1e0>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da00      	bge.n	8007fca <__gnu_unwind_pr_common+0xc6>
 8007fc8:	3404      	adds	r4, #4
 8007fca:	f10a 0301 	add.w	r3, sl, #1
 8007fce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007fd2:	e7bc      	b.n	8007f4e <__gnu_unwind_pr_common+0x4a>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	a905      	add	r1, sp, #20
 8007fd8:	f000 fb46 	bl	8008668 <__gnu_unwind_execute>
 8007fdc:	b178      	cbz	r0, 8007ffe <__gnu_unwind_pr_common+0xfa>
 8007fde:	2009      	movs	r0, #9
 8007fe0:	b009      	add	sp, #36	; 0x24
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	e7cf      	b.n	8007f8a <__gnu_unwind_pr_common+0x86>
 8007fea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007fee:	3408      	adds	r4, #8
 8007ff0:	e7ba      	b.n	8007f68 <__gnu_unwind_pr_common+0x64>
 8007ff2:	0212      	lsls	r2, r2, #8
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	9205      	str	r2, [sp, #20]
 8007ff8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007ffc:	e79b      	b.n	8007f36 <__gnu_unwind_pr_common+0x32>
 8007ffe:	2008      	movs	r0, #8
 8008000:	b009      	add	sp, #36	; 0x24
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	f1bb 0f00 	cmp.w	fp, #0
 800800a:	d002      	beq.n	8008012 <__gnu_unwind_pr_common+0x10e>
 800800c:	2800      	cmp	r0, #0
 800800e:	f040 80b4 	bne.w	800817a <__gnu_unwind_pr_common+0x276>
 8008012:	3404      	adds	r4, #4
 8008014:	e79b      	b.n	8007f4e <__gnu_unwind_pr_common+0x4a>
 8008016:	f1bb 0f00 	cmp.w	fp, #0
 800801a:	d118      	bne.n	800804e <__gnu_unwind_pr_common+0x14a>
 800801c:	b1a8      	cbz	r0, 800804a <__gnu_unwind_pr_common+0x146>
 800801e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008022:	1c99      	adds	r1, r3, #2
 8008024:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8008028:	d0d9      	beq.n	8007fde <__gnu_unwind_pr_common+0xda>
 800802a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800802e:	3301      	adds	r3, #1
 8008030:	9104      	str	r1, [sp, #16]
 8008032:	f000 80b5 	beq.w	80081a0 <__gnu_unwind_pr_common+0x29c>
 8008036:	1d20      	adds	r0, r4, #4
 8008038:	f7ff fdea 	bl	8007c10 <_Unwind_decode_typeinfo_ptr.isra.0>
 800803c:	ab04      	add	r3, sp, #16
 800803e:	4601      	mov	r1, r0
 8008040:	4628      	mov	r0, r5
 8008042:	f01f f90f 	bl	8027264 <__cxa_type_match>
 8008046:	2800      	cmp	r0, #0
 8008048:	d167      	bne.n	800811a <__gnu_unwind_pr_common+0x216>
 800804a:	3408      	adds	r4, #8
 800804c:	e77f      	b.n	8007f4e <__gnu_unwind_pr_common+0x4a>
 800804e:	210d      	movs	r1, #13
 8008050:	4630      	mov	r0, r6
 8008052:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8008056:	f7ff feed 	bl	8007e34 <_Unwind_GetGR>
 800805a:	4580      	cmp	r8, r0
 800805c:	d1f5      	bne.n	800804a <__gnu_unwind_pr_common+0x146>
 800805e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008060:	429c      	cmp	r4, r3
 8008062:	d1f2      	bne.n	800804a <__gnu_unwind_pr_common+0x146>
 8008064:	4620      	mov	r0, r4
 8008066:	f7ff fd07 	bl	8007a78 <selfrel_offset31>
 800806a:	210f      	movs	r1, #15
 800806c:	4602      	mov	r2, r0
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff ff02 	bl	8007e78 <_Unwind_SetGR>
 8008074:	4630      	mov	r0, r6
 8008076:	462a      	mov	r2, r5
 8008078:	2100      	movs	r1, #0
 800807a:	f7ff fefd 	bl	8007e78 <_Unwind_SetGR>
 800807e:	2007      	movs	r0, #7
 8008080:	e7ae      	b.n	8007fe0 <__gnu_unwind_pr_common+0xdc>
 8008082:	210d      	movs	r1, #13
 8008084:	4630      	mov	r0, r6
 8008086:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800808a:	f7ff fed3 	bl	8007e34 <_Unwind_GetGR>
 800808e:	4580      	cmp	r8, r0
 8008090:	d032      	beq.n	80080f8 <__gnu_unwind_pr_common+0x1f4>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	e796      	b.n	8007fc4 <__gnu_unwind_pr_common+0xc0>
 8008096:	f1ba 0f00 	cmp.w	sl, #0
 800809a:	d023      	beq.n	80080e4 <__gnu_unwind_pr_common+0x1e0>
 800809c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80080a0:	f104 0804 	add.w	r8, r4, #4
 80080a4:	f8cd b008 	str.w	fp, [sp, #8]
 80080a8:	f8dd 9000 	ldr.w	r9, [sp]
 80080ac:	9703      	str	r7, [sp, #12]
 80080ae:	46a3      	mov	fp, r4
 80080b0:	461c      	mov	r4, r3
 80080b2:	e002      	b.n	80080ba <__gnu_unwind_pr_common+0x1b6>
 80080b4:	4557      	cmp	r7, sl
 80080b6:	46b9      	mov	r9, r7
 80080b8:	d040      	beq.n	800813c <__gnu_unwind_pr_common+0x238>
 80080ba:	4640      	mov	r0, r8
 80080bc:	9404      	str	r4, [sp, #16]
 80080be:	f7ff fda7 	bl	8007c10 <_Unwind_decode_typeinfo_ptr.isra.0>
 80080c2:	ab04      	add	r3, sp, #16
 80080c4:	4601      	mov	r1, r0
 80080c6:	2200      	movs	r2, #0
 80080c8:	4628      	mov	r0, r5
 80080ca:	f01f f8cb 	bl	8027264 <__cxa_type_match>
 80080ce:	f109 0701 	add.w	r7, r9, #1
 80080d2:	f108 0804 	add.w	r8, r8, #4
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d0ec      	beq.n	80080b4 <__gnu_unwind_pr_common+0x1b0>
 80080da:	45d1      	cmp	r9, sl
 80080dc:	465c      	mov	r4, fp
 80080de:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 80080e2:	d1d6      	bne.n	8008092 <__gnu_unwind_pr_common+0x18e>
 80080e4:	4630      	mov	r0, r6
 80080e6:	210d      	movs	r1, #13
 80080e8:	f7ff fea4 	bl	8007e34 <_Unwind_GetGR>
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	6228      	str	r0, [r5, #32]
 80080f0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 80080f4:	2006      	movs	r0, #6
 80080f6:	e773      	b.n	8007fe0 <__gnu_unwind_pr_common+0xdc>
 80080f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d1c9      	bne.n	8008092 <__gnu_unwind_pr_common+0x18e>
 80080fe:	2204      	movs	r2, #4
 8008100:	f04f 0800 	mov.w	r8, #0
 8008104:	18a3      	adds	r3, r4, r2
 8008106:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800810a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	4543      	cmp	r3, r8
 8008112:	db4d      	blt.n	80081b0 <__gnu_unwind_pr_common+0x2ac>
 8008114:	2301      	movs	r3, #1
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	e757      	b.n	8007fca <__gnu_unwind_pr_common+0xc6>
 800811a:	4680      	mov	r8, r0
 800811c:	210d      	movs	r1, #13
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff fe88 	bl	8007e34 <_Unwind_GetGR>
 8008124:	f1b8 0f02 	cmp.w	r8, #2
 8008128:	6228      	str	r0, [r5, #32]
 800812a:	d13e      	bne.n	80081aa <__gnu_unwind_pr_common+0x2a6>
 800812c:	462b      	mov	r3, r5
 800812e:	9a04      	ldr	r2, [sp, #16]
 8008130:	f843 2f2c 	str.w	r2, [r3, #44]!
 8008134:	626b      	str	r3, [r5, #36]	; 0x24
 8008136:	62ac      	str	r4, [r5, #40]	; 0x28
 8008138:	2006      	movs	r0, #6
 800813a:	e751      	b.n	8007fe0 <__gnu_unwind_pr_common+0xdc>
 800813c:	465c      	mov	r4, fp
 800813e:	e7d1      	b.n	80080e4 <__gnu_unwind_pr_common+0x1e0>
 8008140:	a905      	add	r1, sp, #20
 8008142:	4630      	mov	r0, r6
 8008144:	f000 fa90 	bl	8008668 <__gnu_unwind_execute>
 8008148:	2800      	cmp	r0, #0
 800814a:	f47f af48 	bne.w	8007fde <__gnu_unwind_pr_common+0xda>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f43f af54 	beq.w	8007ffe <__gnu_unwind_pr_common+0xfa>
 8008156:	210f      	movs	r1, #15
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff fe6b 	bl	8007e34 <_Unwind_GetGR>
 800815e:	210e      	movs	r1, #14
 8008160:	4602      	mov	r2, r0
 8008162:	4630      	mov	r0, r6
 8008164:	f7ff fe88 	bl	8007e78 <_Unwind_SetGR>
 8008168:	4630      	mov	r0, r6
 800816a:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <__gnu_unwind_pr_common+0x2d0>)
 800816c:	210f      	movs	r1, #15
 800816e:	f7ff fe83 	bl	8007e78 <_Unwind_SetGR>
 8008172:	2007      	movs	r0, #7
 8008174:	b009      	add	sp, #36	; 0x24
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	4620      	mov	r0, r4
 800817c:	f7ff fc7c 	bl	8007a78 <selfrel_offset31>
 8008180:	3404      	adds	r4, #4
 8008182:	4607      	mov	r7, r0
 8008184:	63ac      	str	r4, [r5, #56]	; 0x38
 8008186:	4628      	mov	r0, r5
 8008188:	f01f f8c4 	bl	8027314 <__cxa_begin_cleanup>
 800818c:	2800      	cmp	r0, #0
 800818e:	f43f af26 	beq.w	8007fde <__gnu_unwind_pr_common+0xda>
 8008192:	4630      	mov	r0, r6
 8008194:	463a      	mov	r2, r7
 8008196:	210f      	movs	r1, #15
 8008198:	f7ff fe6e 	bl	8007e78 <_Unwind_SetGR>
 800819c:	2007      	movs	r0, #7
 800819e:	e71f      	b.n	8007fe0 <__gnu_unwind_pr_common+0xdc>
 80081a0:	4630      	mov	r0, r6
 80081a2:	210d      	movs	r1, #13
 80081a4:	f7ff fe46 	bl	8007e34 <_Unwind_GetGR>
 80081a8:	6228      	str	r0, [r5, #32]
 80081aa:	9b04      	ldr	r3, [sp, #16]
 80081ac:	626b      	str	r3, [r5, #36]	; 0x24
 80081ae:	e7c2      	b.n	8008136 <__gnu_unwind_pr_common+0x232>
 80081b0:	f10a 0001 	add.w	r0, sl, #1
 80081b4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80081b8:	f7ff fc5e 	bl	8007a78 <selfrel_offset31>
 80081bc:	210f      	movs	r1, #15
 80081be:	4602      	mov	r2, r0
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff fe59 	bl	8007e78 <_Unwind_SetGR>
 80081c6:	4630      	mov	r0, r6
 80081c8:	462a      	mov	r2, r5
 80081ca:	4641      	mov	r1, r8
 80081cc:	f7ff fe54 	bl	8007e78 <_Unwind_SetGR>
 80081d0:	2007      	movs	r0, #7
 80081d2:	e705      	b.n	8007fe0 <__gnu_unwind_pr_common+0xdc>
 80081d4:	0802717d 	.word	0x0802717d

080081d8 <__aeabi_unwind_cpp_pr0>:
 80081d8:	2300      	movs	r3, #0
 80081da:	e693      	b.n	8007f04 <__gnu_unwind_pr_common>

080081dc <__aeabi_unwind_cpp_pr1>:
 80081dc:	2301      	movs	r3, #1
 80081de:	e691      	b.n	8007f04 <__gnu_unwind_pr_common>

080081e0 <__aeabi_unwind_cpp_pr2>:
 80081e0:	2302      	movs	r3, #2
 80081e2:	e68f      	b.n	8007f04 <__gnu_unwind_pr_common>

080081e4 <_Unwind_VRS_Pop>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	4605      	mov	r5, r0
 80081ea:	b0c4      	sub	sp, #272	; 0x110
 80081ec:	2904      	cmp	r1, #4
 80081ee:	d806      	bhi.n	80081fe <_Unwind_VRS_Pop+0x1a>
 80081f0:	e8df f001 	tbb	[pc, r1]
 80081f4:	03052b4d 	.word	0x03052b4d
 80081f8:	09          	.byte	0x09
 80081f9:	00          	.byte	0x00
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d05f      	beq.n	80082be <_Unwind_VRS_Pop+0xda>
 80081fe:	2002      	movs	r0, #2
 8008200:	b044      	add	sp, #272	; 0x110
 8008202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f9      	bne.n	80081fe <_Unwind_VRS_Pop+0x1a>
 800820a:	2a10      	cmp	r2, #16
 800820c:	d8f7      	bhi.n	80081fe <_Unwind_VRS_Pop+0x1a>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	06dc      	lsls	r4, r3, #27
 8008212:	f100 80f4 	bmi.w	80083fe <_Unwind_VRS_Pop+0x21a>
 8008216:	ac22      	add	r4, sp, #136	; 0x88
 8008218:	4620      	mov	r0, r4
 800821a:	9201      	str	r2, [sp, #4]
 800821c:	f000 f994 	bl	8008548 <__gnu_Unwind_Save_WMMXC>
 8008220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008222:	9a01      	ldr	r2, [sp, #4]
 8008224:	2300      	movs	r3, #0
 8008226:	2601      	movs	r6, #1
 8008228:	fa06 f103 	lsl.w	r1, r6, r3
 800822c:	4211      	tst	r1, r2
 800822e:	d003      	beq.n	8008238 <_Unwind_VRS_Pop+0x54>
 8008230:	6801      	ldr	r1, [r0, #0]
 8008232:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008236:	3004      	adds	r0, #4
 8008238:	3301      	adds	r3, #1
 800823a:	2b04      	cmp	r3, #4
 800823c:	d1f4      	bne.n	8008228 <_Unwind_VRS_Pop+0x44>
 800823e:	63a8      	str	r0, [r5, #56]	; 0x38
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f977 	bl	8008534 <__gnu_Unwind_Restore_WMMXC>
 8008246:	2000      	movs	r0, #0
 8008248:	e7da      	b.n	8008200 <_Unwind_VRS_Pop+0x1c>
 800824a:	2b01      	cmp	r3, #1
 800824c:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8008250:	b297      	uxth	r7, r2
 8008252:	d052      	beq.n	80082fa <_Unwind_VRS_Pop+0x116>
 8008254:	2b05      	cmp	r3, #5
 8008256:	d1d2      	bne.n	80081fe <_Unwind_VRS_Pop+0x1a>
 8008258:	eb06 0807 	add.w	r8, r6, r7
 800825c:	f1b8 0f20 	cmp.w	r8, #32
 8008260:	d8cd      	bhi.n	80081fe <_Unwind_VRS_Pop+0x1a>
 8008262:	2e0f      	cmp	r6, #15
 8008264:	f240 8099 	bls.w	800839a <_Unwind_VRS_Pop+0x1b6>
 8008268:	46b8      	mov	r8, r7
 800826a:	2f00      	cmp	r7, #0
 800826c:	f040 80db 	bne.w	8008426 <_Unwind_VRS_Pop+0x242>
 8008270:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008272:	63aa      	str	r2, [r5, #56]	; 0x38
 8008274:	2e0f      	cmp	r6, #15
 8008276:	f240 80be 	bls.w	80083f6 <_Unwind_VRS_Pop+0x212>
 800827a:	f1b8 0f00 	cmp.w	r8, #0
 800827e:	d002      	beq.n	8008286 <_Unwind_VRS_Pop+0xa2>
 8008280:	a802      	add	r0, sp, #8
 8008282:	f000 f90b 	bl	800849c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8008286:	2000      	movs	r0, #0
 8008288:	b044      	add	sp, #272	; 0x110
 800828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1b5      	bne.n	80081fe <_Unwind_VRS_Pop+0x1a>
 8008292:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8008294:	b297      	uxth	r7, r2
 8008296:	1d28      	adds	r0, r5, #4
 8008298:	2601      	movs	r6, #1
 800829a:	fa06 f103 	lsl.w	r1, r6, r3
 800829e:	4239      	tst	r1, r7
 80082a0:	f103 0301 	add.w	r3, r3, #1
 80082a4:	d002      	beq.n	80082ac <_Unwind_VRS_Pop+0xc8>
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	6001      	str	r1, [r0, #0]
 80082aa:	3404      	adds	r4, #4
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	f100 0004 	add.w	r0, r0, #4
 80082b2:	d1f2      	bne.n	800829a <_Unwind_VRS_Pop+0xb6>
 80082b4:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80082b8:	d1e5      	bne.n	8008286 <_Unwind_VRS_Pop+0xa2>
 80082ba:	63ac      	str	r4, [r5, #56]	; 0x38
 80082bc:	e7a0      	b.n	8008200 <_Unwind_VRS_Pop+0x1c>
 80082be:	0c16      	lsrs	r6, r2, #16
 80082c0:	b297      	uxth	r7, r2
 80082c2:	19f3      	adds	r3, r6, r7
 80082c4:	2b10      	cmp	r3, #16
 80082c6:	d89a      	bhi.n	80081fe <_Unwind_VRS_Pop+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	071a      	lsls	r2, r3, #28
 80082cc:	d45d      	bmi.n	800838a <_Unwind_VRS_Pop+0x1a6>
 80082ce:	ac22      	add	r4, sp, #136	; 0x88
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 f90d 	bl	80084f0 <__gnu_Unwind_Save_WMMXD>
 80082d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80082da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80082dc:	b13f      	cbz	r7, 80082ee <_Unwind_VRS_Pop+0x10a>
 80082de:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	f841 0b04 	str.w	r0, [r1], #4
 80082e8:	3304      	adds	r3, #4
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d1f9      	bne.n	80082e2 <_Unwind_VRS_Pop+0xfe>
 80082ee:	4620      	mov	r0, r4
 80082f0:	63ab      	str	r3, [r5, #56]	; 0x38
 80082f2:	f000 f8db 	bl	80084ac <__gnu_Unwind_Restore_WMMXD>
 80082f6:	2000      	movs	r0, #0
 80082f8:	e782      	b.n	8008200 <_Unwind_VRS_Pop+0x1c>
 80082fa:	19f2      	adds	r2, r6, r7
 80082fc:	2a10      	cmp	r2, #16
 80082fe:	f63f af7e 	bhi.w	80081fe <_Unwind_VRS_Pop+0x1a>
 8008302:	2e0f      	cmp	r6, #15
 8008304:	f63f af7b 	bhi.w	80081fe <_Unwind_VRS_Pop+0x1a>
 8008308:	682a      	ldr	r2, [r5, #0]
 800830a:	07d1      	lsls	r1, r2, #31
 800830c:	d508      	bpl.n	8008320 <_Unwind_VRS_Pop+0x13c>
 800830e:	4628      	mov	r0, r5
 8008310:	f022 0203 	bic.w	r2, r2, #3
 8008314:	f840 2b48 	str.w	r2, [r0], #72
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f000 f8b3 	bl	8008484 <__gnu_Unwind_Save_VFP>
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	ac22      	add	r4, sp, #136	; 0x88
 8008324:	4620      	mov	r0, r4
 8008326:	f000 f8ad 	bl	8008484 <__gnu_Unwind_Save_VFP>
 800832a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800832c:	9b01      	ldr	r3, [sp, #4]
 800832e:	2f00      	cmp	r7, #0
 8008330:	f000 8095 	beq.w	800845e <_Unwind_VRS_Pop+0x27a>
 8008334:	007f      	lsls	r7, r7, #1
 8008336:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800833a:	f04f 0800 	mov.w	r8, #0
 800833e:	3c04      	subs	r4, #4
 8008340:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8008344:	f851 0b04 	ldr.w	r0, [r1], #4
 8008348:	f844 0f04 	str.w	r0, [r4, #4]!
 800834c:	4291      	cmp	r1, r2
 800834e:	d1f9      	bne.n	8008344 <_Unwind_VRS_Pop+0x160>
 8008350:	f1b8 0f00 	cmp.w	r8, #0
 8008354:	d00f      	beq.n	8008376 <_Unwind_VRS_Pop+0x192>
 8008356:	ac02      	add	r4, sp, #8
 8008358:	2e10      	cmp	r6, #16
 800835a:	4631      	mov	r1, r6
 800835c:	bf38      	it	cc
 800835e:	2110      	movcc	r1, #16
 8008360:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008364:	3984      	subs	r1, #132	; 0x84
 8008366:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 800836a:	f852 0b04 	ldr.w	r0, [r2], #4
 800836e:	f841 0f04 	str.w	r0, [r1, #4]!
 8008372:	4294      	cmp	r4, r2
 8008374:	d1f9      	bne.n	800836a <_Unwind_VRS_Pop+0x186>
 8008376:	2b01      	cmp	r3, #1
 8008378:	f47f af7b 	bne.w	8008272 <_Unwind_VRS_Pop+0x8e>
 800837c:	ac22      	add	r4, sp, #136	; 0x88
 800837e:	3204      	adds	r2, #4
 8008380:	63aa      	str	r2, [r5, #56]	; 0x38
 8008382:	4620      	mov	r0, r4
 8008384:	f000 f87a 	bl	800847c <__gnu_Unwind_Restore_VFP>
 8008388:	e77d      	b.n	8008286 <_Unwind_VRS_Pop+0xa2>
 800838a:	f023 0308 	bic.w	r3, r3, #8
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8008394:	f000 f8ac 	bl	80084f0 <__gnu_Unwind_Save_WMMXD>
 8008398:	e799      	b.n	80082ce <_Unwind_VRS_Pop+0xea>
 800839a:	f1b8 0f10 	cmp.w	r8, #16
 800839e:	682a      	ldr	r2, [r5, #0]
 80083a0:	d943      	bls.n	800842a <_Unwind_VRS_Pop+0x246>
 80083a2:	07d0      	lsls	r0, r2, #31
 80083a4:	f1a8 0810 	sub.w	r8, r8, #16
 80083a8:	d50b      	bpl.n	80083c2 <_Unwind_VRS_Pop+0x1de>
 80083aa:	4628      	mov	r0, r5
 80083ac:	f022 0201 	bic.w	r2, r2, #1
 80083b0:	f042 0202 	orr.w	r2, r2, #2
 80083b4:	f840 2b48 	str.w	r2, [r0], #72
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	f000 f86b 	bl	8008494 <__gnu_Unwind_Save_VFP_D>
 80083be:	682a      	ldr	r2, [r5, #0]
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	0751      	lsls	r1, r2, #29
 80083c4:	d425      	bmi.n	8008412 <_Unwind_VRS_Pop+0x22e>
 80083c6:	2e0f      	cmp	r6, #15
 80083c8:	d804      	bhi.n	80083d4 <_Unwind_VRS_Pop+0x1f0>
 80083ca:	a822      	add	r0, sp, #136	; 0x88
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	f000 f861 	bl	8008494 <__gnu_Unwind_Save_VFP_D>
 80083d2:	9b01      	ldr	r3, [sp, #4]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	ac02      	add	r4, sp, #8
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f863 	bl	80084a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80083de:	f1c6 0110 	rsb	r1, r6, #16
 80083e2:	2900      	cmp	r1, #0
 80083e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	ddb6      	ble.n	8008358 <_Unwind_VRS_Pop+0x174>
 80083ea:	ac22      	add	r4, sp, #136	; 0x88
 80083ec:	004f      	lsls	r7, r1, #1
 80083ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80083f2:	4611      	mov	r1, r2
 80083f4:	e7a3      	b.n	800833e <_Unwind_VRS_Pop+0x15a>
 80083f6:	a822      	add	r0, sp, #136	; 0x88
 80083f8:	f000 f848 	bl	800848c <__gnu_Unwind_Restore_VFP_D>
 80083fc:	e73d      	b.n	800827a <_Unwind_VRS_Pop+0x96>
 80083fe:	f023 0310 	bic.w	r3, r3, #16
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008408:	9201      	str	r2, [sp, #4]
 800840a:	f000 f89d 	bl	8008548 <__gnu_Unwind_Save_WMMXC>
 800840e:	9a01      	ldr	r2, [sp, #4]
 8008410:	e701      	b.n	8008216 <_Unwind_VRS_Pop+0x32>
 8008412:	4628      	mov	r0, r5
 8008414:	f022 0204 	bic.w	r2, r2, #4
 8008418:	f840 2bd0 	str.w	r2, [r0], #208
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	f000 f841 	bl	80084a4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008422:	9b01      	ldr	r3, [sp, #4]
 8008424:	e7cf      	b.n	80083c6 <_Unwind_VRS_Pop+0x1e2>
 8008426:	682a      	ldr	r2, [r5, #0]
 8008428:	e7cb      	b.n	80083c2 <_Unwind_VRS_Pop+0x1de>
 800842a:	07d0      	lsls	r0, r2, #31
 800842c:	d50a      	bpl.n	8008444 <_Unwind_VRS_Pop+0x260>
 800842e:	4628      	mov	r0, r5
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	f042 0202 	orr.w	r2, r2, #2
 8008438:	f840 2b48 	str.w	r2, [r0], #72
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	f000 f829 	bl	8008494 <__gnu_Unwind_Save_VFP_D>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	ac22      	add	r4, sp, #136	; 0x88
 8008448:	4620      	mov	r0, r4
 800844a:	f000 f823 	bl	8008494 <__gnu_Unwind_Save_VFP_D>
 800844e:	46b8      	mov	r8, r7
 8008450:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8008452:	9b01      	ldr	r3, [sp, #4]
 8008454:	2f00      	cmp	r7, #0
 8008456:	f47f af6d 	bne.w	8008334 <_Unwind_VRS_Pop+0x150>
 800845a:	460a      	mov	r2, r1
 800845c:	e709      	b.n	8008272 <_Unwind_VRS_Pop+0x8e>
 800845e:	460a      	mov	r2, r1
 8008460:	e78d      	b.n	800837e <_Unwind_VRS_Pop+0x19a>
 8008462:	bf00      	nop

08008464 <__restore_core_regs>:
 8008464:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8008468:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800846c:	469c      	mov	ip, r3
 800846e:	46a6      	mov	lr, r4
 8008470:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8008474:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008478:	46e5      	mov	sp, ip
 800847a:	bd00      	pop	{pc}

0800847c <__gnu_Unwind_Restore_VFP>:
 800847c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop

08008484 <__gnu_Unwind_Save_VFP>:
 8008484:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop

0800848c <__gnu_Unwind_Restore_VFP_D>:
 800848c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop

08008494 <__gnu_Unwind_Save_VFP_D>:
 8008494:	ec80 0b20 	vstmia	r0, {d0-d15}
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop

0800849c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800849c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop

080084a4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80084a4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop

080084ac <__gnu_Unwind_Restore_WMMXD>:
 80084ac:	ecf0 0102 	ldfe	f0, [r0], #8
 80084b0:	ecf0 1102 	ldfe	f1, [r0], #8
 80084b4:	ecf0 2102 	ldfe	f2, [r0], #8
 80084b8:	ecf0 3102 	ldfe	f3, [r0], #8
 80084bc:	ecf0 4102 	ldfe	f4, [r0], #8
 80084c0:	ecf0 5102 	ldfe	f5, [r0], #8
 80084c4:	ecf0 6102 	ldfe	f6, [r0], #8
 80084c8:	ecf0 7102 	ldfe	f7, [r0], #8
 80084cc:	ecf0 8102 	ldfp	f0, [r0], #8
 80084d0:	ecf0 9102 	ldfp	f1, [r0], #8
 80084d4:	ecf0 a102 	ldfp	f2, [r0], #8
 80084d8:	ecf0 b102 	ldfp	f3, [r0], #8
 80084dc:	ecf0 c102 	ldfp	f4, [r0], #8
 80084e0:	ecf0 d102 	ldfp	f5, [r0], #8
 80084e4:	ecf0 e102 	ldfp	f6, [r0], #8
 80084e8:	ecf0 f102 	ldfp	f7, [r0], #8
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop

080084f0 <__gnu_Unwind_Save_WMMXD>:
 80084f0:	ece0 0102 	stfe	f0, [r0], #8
 80084f4:	ece0 1102 	stfe	f1, [r0], #8
 80084f8:	ece0 2102 	stfe	f2, [r0], #8
 80084fc:	ece0 3102 	stfe	f3, [r0], #8
 8008500:	ece0 4102 	stfe	f4, [r0], #8
 8008504:	ece0 5102 	stfe	f5, [r0], #8
 8008508:	ece0 6102 	stfe	f6, [r0], #8
 800850c:	ece0 7102 	stfe	f7, [r0], #8
 8008510:	ece0 8102 	stfp	f0, [r0], #8
 8008514:	ece0 9102 	stfp	f1, [r0], #8
 8008518:	ece0 a102 	stfp	f2, [r0], #8
 800851c:	ece0 b102 	stfp	f3, [r0], #8
 8008520:	ece0 c102 	stfp	f4, [r0], #8
 8008524:	ece0 d102 	stfp	f5, [r0], #8
 8008528:	ece0 e102 	stfp	f6, [r0], #8
 800852c:	ece0 f102 	stfp	f7, [r0], #8
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop

08008534 <__gnu_Unwind_Restore_WMMXC>:
 8008534:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008538:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800853c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8008540:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop

08008548 <__gnu_Unwind_Save_WMMXC>:
 8008548:	fca0 8101 	stc2	1, cr8, [r0], #4
 800854c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8008550:	fca0 a101 	stc2	1, cr10, [r0], #4
 8008554:	fca0 b101 	stc2	1, cr11, [r0], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop

0800855c <_Unwind_RaiseException>:
 800855c:	46ec      	mov	ip, sp
 800855e:	b500      	push	{lr}
 8008560:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008564:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008570:	a901      	add	r1, sp, #4
 8008572:	f7ff fbdd 	bl	8007d30 <__gnu_Unwind_RaiseException>
 8008576:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800857a:	b012      	add	sp, #72	; 0x48
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop

08008580 <_Unwind_Resume>:
 8008580:	46ec      	mov	ip, sp
 8008582:	b500      	push	{lr}
 8008584:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008588:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008594:	a901      	add	r1, sp, #4
 8008596:	f7ff fc05 	bl	8007da4 <__gnu_Unwind_Resume>
 800859a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800859e:	b012      	add	sp, #72	; 0x48
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <_Unwind_Resume_or_Rethrow>:
 80085a4:	46ec      	mov	ip, sp
 80085a6:	b500      	push	{lr}
 80085a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80085ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80085b8:	a901      	add	r1, sp, #4
 80085ba:	f7ff fc15 	bl	8007de8 <__gnu_Unwind_Resume_or_Rethrow>
 80085be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80085c2:	b012      	add	sp, #72	; 0x48
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop

080085c8 <_Unwind_ForcedUnwind>:
 80085c8:	46ec      	mov	ip, sp
 80085ca:	b500      	push	{lr}
 80085cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80085d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80085dc:	ab01      	add	r3, sp, #4
 80085de:	f7ff fbd7 	bl	8007d90 <__gnu_Unwind_ForcedUnwind>
 80085e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80085e6:	b012      	add	sp, #72	; 0x48
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop

080085ec <_Unwind_Backtrace>:
 80085ec:	46ec      	mov	ip, sp
 80085ee:	b500      	push	{lr}
 80085f0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80085f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008600:	aa01      	add	r2, sp, #4
 8008602:	f7ff fc47 	bl	8007e94 <__gnu_Unwind_Backtrace>
 8008606:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800860a:	b012      	add	sp, #72	; 0x48
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <next_unwind_byte>:
 8008610:	7a02      	ldrb	r2, [r0, #8]
 8008612:	b982      	cbnz	r2, 8008636 <next_unwind_byte+0x26>
 8008614:	7a43      	ldrb	r3, [r0, #9]
 8008616:	b1ab      	cbz	r3, 8008644 <next_unwind_byte+0x34>
 8008618:	6842      	ldr	r2, [r0, #4]
 800861a:	3b01      	subs	r3, #1
 800861c:	b410      	push	{r4}
 800861e:	7243      	strb	r3, [r0, #9]
 8008620:	6813      	ldr	r3, [r2, #0]
 8008622:	2103      	movs	r1, #3
 8008624:	1d14      	adds	r4, r2, #4
 8008626:	7201      	strb	r1, [r0, #8]
 8008628:	021a      	lsls	r2, r3, #8
 800862a:	6044      	str	r4, [r0, #4]
 800862c:	6002      	str	r2, [r0, #0]
 800862e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008632:	0e18      	lsrs	r0, r3, #24
 8008634:	4770      	bx	lr
 8008636:	6803      	ldr	r3, [r0, #0]
 8008638:	3a01      	subs	r2, #1
 800863a:	7202      	strb	r2, [r0, #8]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	6002      	str	r2, [r0, #0]
 8008640:	0e18      	lsrs	r0, r3, #24
 8008642:	4770      	bx	lr
 8008644:	20b0      	movs	r0, #176	; 0xb0
 8008646:	4770      	bx	lr

08008648 <_Unwind_GetGR.constprop.0>:
 8008648:	b500      	push	{lr}
 800864a:	b085      	sub	sp, #20
 800864c:	aa03      	add	r2, sp, #12
 800864e:	2300      	movs	r3, #0
 8008650:	9200      	str	r2, [sp, #0]
 8008652:	4619      	mov	r1, r3
 8008654:	220c      	movs	r2, #12
 8008656:	f7ff fbd7 	bl	8007e08 <_Unwind_VRS_Get>
 800865a:	9803      	ldr	r0, [sp, #12]
 800865c:	b005      	add	sp, #20
 800865e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008662:	bf00      	nop

08008664 <unwind_UCB_from_context>:
 8008664:	e7f0      	b.n	8008648 <_Unwind_GetGR.constprop.0>
 8008666:	bf00      	nop

08008668 <__gnu_unwind_execute>:
 8008668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800866c:	4605      	mov	r5, r0
 800866e:	b085      	sub	sp, #20
 8008670:	460e      	mov	r6, r1
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ffca 	bl	8008610 <next_unwind_byte>
 800867c:	28b0      	cmp	r0, #176	; 0xb0
 800867e:	4604      	mov	r4, r0
 8008680:	f000 80b1 	beq.w	80087e6 <__gnu_unwind_execute+0x17e>
 8008684:	0607      	lsls	r7, r0, #24
 8008686:	d520      	bpl.n	80086ca <__gnu_unwind_execute+0x62>
 8008688:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800868c:	2b80      	cmp	r3, #128	; 0x80
 800868e:	d065      	beq.n	800875c <__gnu_unwind_execute+0xf4>
 8008690:	2b90      	cmp	r3, #144	; 0x90
 8008692:	d036      	beq.n	8008702 <__gnu_unwind_execute+0x9a>
 8008694:	2ba0      	cmp	r3, #160	; 0xa0
 8008696:	d078      	beq.n	800878a <__gnu_unwind_execute+0x122>
 8008698:	2bb0      	cmp	r3, #176	; 0xb0
 800869a:	d047      	beq.n	800872c <__gnu_unwind_execute+0xc4>
 800869c:	2bc0      	cmp	r3, #192	; 0xc0
 800869e:	f000 808a 	beq.w	80087b6 <__gnu_unwind_execute+0x14e>
 80086a2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80086a6:	2bd0      	cmp	r3, #208	; 0xd0
 80086a8:	d10b      	bne.n	80086c2 <__gnu_unwind_execute+0x5a>
 80086aa:	f000 0207 	and.w	r2, r0, #7
 80086ae:	3201      	adds	r2, #1
 80086b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80086b4:	2305      	movs	r3, #5
 80086b6:	2101      	movs	r1, #1
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7ff fd93 	bl	80081e4 <_Unwind_VRS_Pop>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d0d9      	beq.n	8008676 <__gnu_unwind_execute+0xe>
 80086c2:	2009      	movs	r0, #9
 80086c4:	b005      	add	sp, #20
 80086c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ca:	f10d 090c 	add.w	r9, sp, #12
 80086ce:	2300      	movs	r3, #0
 80086d0:	4619      	mov	r1, r3
 80086d2:	0087      	lsls	r7, r0, #2
 80086d4:	f8cd 9000 	str.w	r9, [sp]
 80086d8:	220d      	movs	r2, #13
 80086da:	4628      	mov	r0, r5
 80086dc:	f7ff fb94 	bl	8007e08 <_Unwind_VRS_Get>
 80086e0:	b2ff      	uxtb	r7, r7
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	f8cd 9000 	str.w	r9, [sp]
 80086e8:	3704      	adds	r7, #4
 80086ea:	0660      	lsls	r0, r4, #25
 80086ec:	bf4c      	ite	mi
 80086ee:	1bdf      	submi	r7, r3, r7
 80086f0:	18ff      	addpl	r7, r7, r3
 80086f2:	2300      	movs	r3, #0
 80086f4:	4619      	mov	r1, r3
 80086f6:	220d      	movs	r2, #13
 80086f8:	4628      	mov	r0, r5
 80086fa:	9703      	str	r7, [sp, #12]
 80086fc:	f7ff fba6 	bl	8007e4c <_Unwind_VRS_Set>
 8008700:	e7b9      	b.n	8008676 <__gnu_unwind_execute+0xe>
 8008702:	f000 030d 	and.w	r3, r0, #13
 8008706:	2b0d      	cmp	r3, #13
 8008708:	d0db      	beq.n	80086c2 <__gnu_unwind_execute+0x5a>
 800870a:	af03      	add	r7, sp, #12
 800870c:	2300      	movs	r3, #0
 800870e:	f000 020f 	and.w	r2, r0, #15
 8008712:	4619      	mov	r1, r3
 8008714:	9700      	str	r7, [sp, #0]
 8008716:	4628      	mov	r0, r5
 8008718:	f7ff fb76 	bl	8007e08 <_Unwind_VRS_Get>
 800871c:	2300      	movs	r3, #0
 800871e:	9700      	str	r7, [sp, #0]
 8008720:	4619      	mov	r1, r3
 8008722:	220d      	movs	r2, #13
 8008724:	4628      	mov	r0, r5
 8008726:	f7ff fb91 	bl	8007e4c <_Unwind_VRS_Set>
 800872a:	e7a4      	b.n	8008676 <__gnu_unwind_execute+0xe>
 800872c:	28b1      	cmp	r0, #177	; 0xb1
 800872e:	d05f      	beq.n	80087f0 <__gnu_unwind_execute+0x188>
 8008730:	28b2      	cmp	r0, #178	; 0xb2
 8008732:	f000 80cc 	beq.w	80088ce <__gnu_unwind_execute+0x266>
 8008736:	28b3      	cmp	r0, #179	; 0xb3
 8008738:	d07e      	beq.n	8008838 <__gnu_unwind_execute+0x1d0>
 800873a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800873e:	2bb4      	cmp	r3, #180	; 0xb4
 8008740:	d0bf      	beq.n	80086c2 <__gnu_unwind_execute+0x5a>
 8008742:	f000 0207 	and.w	r2, r0, #7
 8008746:	3201      	adds	r2, #1
 8008748:	2301      	movs	r3, #1
 800874a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800874e:	4619      	mov	r1, r3
 8008750:	4628      	mov	r0, r5
 8008752:	f7ff fd47 	bl	80081e4 <_Unwind_VRS_Pop>
 8008756:	2800      	cmp	r0, #0
 8008758:	d08d      	beq.n	8008676 <__gnu_unwind_execute+0xe>
 800875a:	e7b2      	b.n	80086c2 <__gnu_unwind_execute+0x5a>
 800875c:	4630      	mov	r0, r6
 800875e:	f7ff ff57 	bl	8008610 <next_unwind_byte>
 8008762:	0224      	lsls	r4, r4, #8
 8008764:	4304      	orrs	r4, r0
 8008766:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800876a:	d0aa      	beq.n	80086c2 <__gnu_unwind_execute+0x5a>
 800876c:	0124      	lsls	r4, r4, #4
 800876e:	2300      	movs	r3, #0
 8008770:	b2a2      	uxth	r2, r4
 8008772:	4619      	mov	r1, r3
 8008774:	4628      	mov	r0, r5
 8008776:	f7ff fd35 	bl	80081e4 <_Unwind_VRS_Pop>
 800877a:	2800      	cmp	r0, #0
 800877c:	d1a1      	bne.n	80086c2 <__gnu_unwind_execute+0x5a>
 800877e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008782:	bf18      	it	ne
 8008784:	f04f 0801 	movne.w	r8, #1
 8008788:	e775      	b.n	8008676 <__gnu_unwind_execute+0xe>
 800878a:	43c2      	mvns	r2, r0
 800878c:	f002 0307 	and.w	r3, r2, #7
 8008790:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008794:	411a      	asrs	r2, r3
 8008796:	0701      	lsls	r1, r0, #28
 8008798:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	bf48      	it	mi
 80087a2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80087a6:	4619      	mov	r1, r3
 80087a8:	4628      	mov	r0, r5
 80087aa:	f7ff fd1b 	bl	80081e4 <_Unwind_VRS_Pop>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f af61 	beq.w	8008676 <__gnu_unwind_execute+0xe>
 80087b4:	e785      	b.n	80086c2 <__gnu_unwind_execute+0x5a>
 80087b6:	28c6      	cmp	r0, #198	; 0xc6
 80087b8:	d051      	beq.n	800885e <__gnu_unwind_execute+0x1f6>
 80087ba:	28c7      	cmp	r0, #199	; 0xc7
 80087bc:	d05a      	beq.n	8008874 <__gnu_unwind_execute+0x20c>
 80087be:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80087c2:	2bc0      	cmp	r3, #192	; 0xc0
 80087c4:	d069      	beq.n	800889a <__gnu_unwind_execute+0x232>
 80087c6:	28c8      	cmp	r0, #200	; 0xc8
 80087c8:	d075      	beq.n	80088b6 <__gnu_unwind_execute+0x24e>
 80087ca:	28c9      	cmp	r0, #201	; 0xc9
 80087cc:	f47f af79 	bne.w	80086c2 <__gnu_unwind_execute+0x5a>
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ff1d 	bl	8008610 <next_unwind_byte>
 80087d6:	0302      	lsls	r2, r0, #12
 80087d8:	f000 000f 	and.w	r0, r0, #15
 80087dc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80087e0:	3001      	adds	r0, #1
 80087e2:	4302      	orrs	r2, r0
 80087e4:	e766      	b.n	80086b4 <__gnu_unwind_execute+0x4c>
 80087e6:	f1b8 0f00 	cmp.w	r8, #0
 80087ea:	d014      	beq.n	8008816 <__gnu_unwind_execute+0x1ae>
 80087ec:	2000      	movs	r0, #0
 80087ee:	e769      	b.n	80086c4 <__gnu_unwind_execute+0x5c>
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff ff0d 	bl	8008610 <next_unwind_byte>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f af63 	beq.w	80086c2 <__gnu_unwind_execute+0x5a>
 80087fc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008800:	f47f af5f 	bne.w	80086c2 <__gnu_unwind_execute+0x5a>
 8008804:	4602      	mov	r2, r0
 8008806:	4619      	mov	r1, r3
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fceb 	bl	80081e4 <_Unwind_VRS_Pop>
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f af31 	beq.w	8008676 <__gnu_unwind_execute+0xe>
 8008814:	e755      	b.n	80086c2 <__gnu_unwind_execute+0x5a>
 8008816:	ac03      	add	r4, sp, #12
 8008818:	4643      	mov	r3, r8
 800881a:	220e      	movs	r2, #14
 800881c:	4641      	mov	r1, r8
 800881e:	9400      	str	r4, [sp, #0]
 8008820:	4628      	mov	r0, r5
 8008822:	f7ff faf1 	bl	8007e08 <_Unwind_VRS_Get>
 8008826:	9400      	str	r4, [sp, #0]
 8008828:	4628      	mov	r0, r5
 800882a:	4643      	mov	r3, r8
 800882c:	220f      	movs	r2, #15
 800882e:	4641      	mov	r1, r8
 8008830:	f7ff fb0c 	bl	8007e4c <_Unwind_VRS_Set>
 8008834:	4640      	mov	r0, r8
 8008836:	e745      	b.n	80086c4 <__gnu_unwind_execute+0x5c>
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff fee9 	bl	8008610 <next_unwind_byte>
 800883e:	0301      	lsls	r1, r0, #12
 8008840:	f000 000f 	and.w	r0, r0, #15
 8008844:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8008848:	1c42      	adds	r2, r0, #1
 800884a:	2301      	movs	r3, #1
 800884c:	430a      	orrs	r2, r1
 800884e:	4628      	mov	r0, r5
 8008850:	4619      	mov	r1, r3
 8008852:	f7ff fcc7 	bl	80081e4 <_Unwind_VRS_Pop>
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f af0d 	beq.w	8008676 <__gnu_unwind_execute+0xe>
 800885c:	e731      	b.n	80086c2 <__gnu_unwind_execute+0x5a>
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff fed6 	bl	8008610 <next_unwind_byte>
 8008864:	0301      	lsls	r1, r0, #12
 8008866:	f000 000f 	and.w	r0, r0, #15
 800886a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800886e:	1c42      	adds	r2, r0, #1
 8008870:	2303      	movs	r3, #3
 8008872:	e7eb      	b.n	800884c <__gnu_unwind_execute+0x1e4>
 8008874:	4630      	mov	r0, r6
 8008876:	f7ff fecb 	bl	8008610 <next_unwind_byte>
 800887a:	4602      	mov	r2, r0
 800887c:	2800      	cmp	r0, #0
 800887e:	f43f af20 	beq.w	80086c2 <__gnu_unwind_execute+0x5a>
 8008882:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008886:	f47f af1c 	bne.w	80086c2 <__gnu_unwind_execute+0x5a>
 800888a:	2104      	movs	r1, #4
 800888c:	4628      	mov	r0, r5
 800888e:	f7ff fca9 	bl	80081e4 <_Unwind_VRS_Pop>
 8008892:	2800      	cmp	r0, #0
 8008894:	f43f aeef 	beq.w	8008676 <__gnu_unwind_execute+0xe>
 8008898:	e713      	b.n	80086c2 <__gnu_unwind_execute+0x5a>
 800889a:	f000 020f 	and.w	r2, r0, #15
 800889e:	3201      	adds	r2, #1
 80088a0:	2303      	movs	r3, #3
 80088a2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80088a6:	4619      	mov	r1, r3
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7ff fc9b 	bl	80081e4 <_Unwind_VRS_Pop>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f43f aee1 	beq.w	8008676 <__gnu_unwind_execute+0xe>
 80088b4:	e705      	b.n	80086c2 <__gnu_unwind_execute+0x5a>
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff feaa 	bl	8008610 <next_unwind_byte>
 80088bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80088c0:	f000 030f 	and.w	r3, r0, #15
 80088c4:	3210      	adds	r2, #16
 80088c6:	3301      	adds	r3, #1
 80088c8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80088cc:	e6f2      	b.n	80086b4 <__gnu_unwind_execute+0x4c>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f10d 090c 	add.w	r9, sp, #12
 80088d4:	220d      	movs	r2, #13
 80088d6:	4619      	mov	r1, r3
 80088d8:	f8cd 9000 	str.w	r9, [sp]
 80088dc:	4628      	mov	r0, r5
 80088de:	f7ff fa93 	bl	8007e08 <_Unwind_VRS_Get>
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7ff fe94 	bl	8008610 <next_unwind_byte>
 80088e8:	0602      	lsls	r2, r0, #24
 80088ea:	f04f 0702 	mov.w	r7, #2
 80088ee:	d50c      	bpl.n	800890a <__gnu_unwind_execute+0x2a2>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80088f6:	40b8      	lsls	r0, r7
 80088f8:	4403      	add	r3, r0
 80088fa:	4630      	mov	r0, r6
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	f7ff fe87 	bl	8008610 <next_unwind_byte>
 8008902:	0603      	lsls	r3, r0, #24
 8008904:	f107 0707 	add.w	r7, r7, #7
 8008908:	d4f2      	bmi.n	80088f0 <__gnu_unwind_execute+0x288>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	f8cd 9000 	str.w	r9, [sp]
 8008910:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008914:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008918:	40bc      	lsls	r4, r7
 800891a:	2300      	movs	r3, #0
 800891c:	4414      	add	r4, r2
 800891e:	4619      	mov	r1, r3
 8008920:	220d      	movs	r2, #13
 8008922:	4628      	mov	r0, r5
 8008924:	9403      	str	r4, [sp, #12]
 8008926:	f7ff fa91 	bl	8007e4c <_Unwind_VRS_Set>
 800892a:	e6a4      	b.n	8008676 <__gnu_unwind_execute+0xe>

0800892c <__gnu_unwind_frame>:
 800892c:	b510      	push	{r4, lr}
 800892e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008930:	b084      	sub	sp, #16
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	2003      	movs	r0, #3
 8008936:	f88d 000c 	strb.w	r0, [sp, #12]
 800893a:	79dc      	ldrb	r4, [r3, #7]
 800893c:	f88d 400d 	strb.w	r4, [sp, #13]
 8008940:	0212      	lsls	r2, r2, #8
 8008942:	3308      	adds	r3, #8
 8008944:	4608      	mov	r0, r1
 8008946:	a901      	add	r1, sp, #4
 8008948:	9201      	str	r2, [sp, #4]
 800894a:	9302      	str	r3, [sp, #8]
 800894c:	f7ff fe8c 	bl	8008668 <__gnu_unwind_execute>
 8008950:	b004      	add	sp, #16
 8008952:	bd10      	pop	{r4, pc}

08008954 <_Unwind_GetRegionStart>:
 8008954:	b508      	push	{r3, lr}
 8008956:	f7ff fe85 	bl	8008664 <unwind_UCB_from_context>
 800895a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800895c:	bd08      	pop	{r3, pc}
 800895e:	bf00      	nop

08008960 <_Unwind_GetLanguageSpecificData>:
 8008960:	b508      	push	{r3, lr}
 8008962:	f7ff fe7f 	bl	8008664 <unwind_UCB_from_context>
 8008966:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008968:	79c3      	ldrb	r3, [r0, #7]
 800896a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800896e:	3008      	adds	r0, #8
 8008970:	bd08      	pop	{r3, pc}
 8008972:	bf00      	nop

08008974 <_Unwind_GetDataRelBase>:
 8008974:	b508      	push	{r3, lr}
 8008976:	f01f fe07 	bl	8028588 <abort>
 800897a:	bf00      	nop

0800897c <_Unwind_GetTextRelBase>:
 800897c:	b508      	push	{r3, lr}
 800897e:	f7ff fff9 	bl	8008974 <_Unwind_GetDataRelBase>
 8008982:	bf00      	nop

08008984 <__aeabi_idiv0>:
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008988:	4a25      	ldr	r2, [pc, #148]	; (8008a20 <BSP_PB_Init+0x98>)
{
 800898a:	460b      	mov	r3, r1
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800898c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800898e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8008992:	b530      	push	{r4, r5, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008994:	6311      	str	r1, [r2, #48]	; 0x30
{
 8008996:	b089      	sub	sp, #36	; 0x24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008998:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800899a:	4604      	mov	r4, r0
 800899c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80089a0:	bb28      	cbnz	r0, 80089ee <BSP_PB_Init+0x66>
 80089a2:	9200      	str	r2, [sp, #0]
 80089a4:	9a00      	ldr	r2, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80089a6:	b343      	cbz	r3, 80089fa <BSP_PB_Init+0x72>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d11e      	bne.n	80089ea <BSP_PB_Init+0x62>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
    gpio_init_structure.Pull = GPIO_NOPULL;
 80089ac:	2500      	movs	r5, #0
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    
    if(Button != BUTTON_WAKEUP)
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80089ae:	481d      	ldr	r0, [pc, #116]	; (8008a24 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80089b0:	491d      	ldr	r1, [pc, #116]	; (8008a28 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80089b2:	2202      	movs	r2, #2
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80089b4:	4b1d      	ldr	r3, [pc, #116]	; (8008a2c <BSP_PB_Init+0xa4>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80089b6:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80089ba:	42ac      	cmp	r4, r5
 80089bc:	bf18      	it	ne
 80089be:	4603      	movne	r3, r0
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80089c0:	481b      	ldr	r0, [pc, #108]	; (8008a30 <BSP_PB_Init+0xa8>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80089c2:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80089c4:	a903      	add	r1, sp, #12
 80089c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80089ca:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80089cc:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80089d0:	f000 ff78 	bl	80098c4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80089d4:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <BSP_PB_Init+0xac>)
 80089d6:	462a      	mov	r2, r5
 80089d8:	210f      	movs	r1, #15
 80089da:	f913 4014 	ldrsb.w	r4, [r3, r4, lsl #1]
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 fcc8 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fcfb 	bl	80093e0 <HAL_NVIC_EnableIRQ>
  }
}
 80089ea:	b009      	add	sp, #36	; 0x24
 80089ec:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80089ee:	2801      	cmp	r0, #1
 80089f0:	d013      	beq.n	8008a1a <BSP_PB_Init+0x92>
 80089f2:	9202      	str	r2, [sp, #8]
 80089f4:	9a02      	ldr	r2, [sp, #8]
  if(ButtonMode == BUTTON_MODE_GPIO)
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1d6      	bne.n	80089a8 <BSP_PB_Init+0x20>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80089fa:	4d0b      	ldr	r5, [pc, #44]	; (8008a28 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80089fc:	2202      	movs	r2, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80089fe:	480c      	ldr	r0, [pc, #48]	; (8008a30 <BSP_PB_Init+0xa8>)
 8008a00:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008a02:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008a06:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008a0a:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8008a0c:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8008a0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008a12:	f000 ff57 	bl	80098c4 <HAL_GPIO_Init>
}
 8008a16:	b009      	add	sp, #36	; 0x24
 8008a18:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008a1a:	9201      	str	r2, [sp, #4]
 8008a1c:	9a01      	ldr	r2, [sp, #4]
 8008a1e:	e7c2      	b.n	80089a6 <BSP_PB_Init+0x1e>
 8008a20:	40023800 	.word	0x40023800
 8008a24:	10210000 	.word	0x10210000
 8008a28:	08031f28 	.word	0x08031f28
 8008a2c:	10110000 	.word	0x10110000
 8008a30:	20000000 	.word	0x20000000
 8008a34:	08031f20 	.word	0x08031f20

08008a38 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008a38:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008a3a:	4a04      	ldr	r2, [pc, #16]	; (8008a4c <BSP_PB_GetState+0x14>)
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <BSP_PB_GetState+0x18>)
 8008a3e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8008a42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008a46:	f001 f85b 	bl	8009b00 <HAL_GPIO_ReadPin>
}
 8008a4a:	bd08      	pop	{r3, pc}
 8008a4c:	08031f28 	.word	0x08031f28
 8008a50:	20000000 	.word	0x20000000

08008a54 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <BSP_LCD_GetXSize+0x10>)
 8008a56:	2134      	movs	r1, #52	; 0x34
 8008a58:	4a03      	ldr	r2, [pc, #12]	; (8008a68 <BSP_LCD_GetXSize+0x14>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8008a60:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008a62:	4770      	bx	lr
 8008a64:	20008dfc 	.word	0x20008dfc
 8008a68:	20008e58 	.word	0x20008e58

08008a6c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008a6c:	4b03      	ldr	r3, [pc, #12]	; (8008a7c <BSP_LCD_GetYSize+0x10>)
 8008a6e:	2134      	movs	r1, #52	; 0x34
 8008a70:	4a03      	ldr	r2, [pc, #12]	; (8008a80 <BSP_LCD_GetYSize+0x14>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	fb01 2303 	mla	r3, r1, r3, r2
}
 8008a78:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008a7a:	4770      	bx	lr
 8008a7c:	20008dfc 	.word	0x20008dfc
 8008a80:	20008e58 	.word	0x20008e58

08008a84 <BSP_LCD_LayerRgb565Init>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008a84:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <BSP_LCD_LayerRgb565Init+0x70>)
  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8008a86:	f04f 0c02 	mov.w	ip, #2
{     
 8008a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	2634      	movs	r6, #52	; 0x34
 8008a90:	4d19      	ldr	r5, [pc, #100]	; (8008af8 <BSP_LCD_LayerRgb565Init+0x74>)
{     
 8008a92:	b08f      	sub	sp, #60	; 0x3c
 8008a94:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 8008a96:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008a98:	fb06 5202 	mla	r2, r6, r2, r5
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008a9c:	4628      	mov	r0, r5
  layer_cfg.FBStartAdress = FB_Address;
 8008a9e:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8008aa0:	27ff      	movs	r7, #255	; 0xff
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008aa2:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008aa6:	2507      	movs	r5, #7
  layer_cfg.WindowX0 = 0;
 8008aa8:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowY0 = 0;
 8008aaa:	9303      	str	r3, [sp, #12]
  layer_cfg.Alpha0 = 0;
 8008aac:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8008aae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8008ab2:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8008ab6:	f8cd c014 	str.w	ip, [sp, #20]
  layer_cfg.Alpha = 255;
 8008aba:	9706      	str	r7, [sp, #24]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008abc:	e9d2 1218 	ldrd	r1, r2, [r2, #96]	; 0x60
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008ac0:	e9cd 6508 	strd	r6, r5, [sp, #32]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8008ac4:	9204      	str	r2, [sp, #16]

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
  DrawProp[LayerIndex].pFont     = &Font24;
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008ac6:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8008aca:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008acc:	4622      	mov	r2, r4
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008ace:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8008ad2:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8008ad4:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008ad6:	a901      	add	r1, sp, #4
 8008ad8:	f001 fbf6 	bl	800a2c8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008adc:	4a07      	ldr	r2, [pc, #28]	; (8008afc <BSP_LCD_LayerRgb565Init+0x78>)
 8008ade:	00a4      	lsls	r4, r4, #2
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  DrawProp[LayerIndex].pFont     = &Font24;
 8008ae4:	4906      	ldr	r1, [pc, #24]	; (8008b00 <BSP_LCD_LayerRgb565Init+0x7c>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008ae6:	1913      	adds	r3, r2, r4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008ae8:	5115      	str	r5, [r2, r4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008aea:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8008aee:	b00f      	add	sp, #60	; 0x3c
 8008af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20008dfc 	.word	0x20008dfc
 8008af8:	20008e58 	.word	0x20008e58
 8008afc:	20008e00 	.word	0x20008e00
 8008b00:	2000841c 	.word	0x2000841c

08008b04 <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <BSP_LCD_SelectLayer+0x8>)
 8008b06:	6018      	str	r0, [r3, #0]
} 
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20008dfc 	.word	0x20008dfc

08008b10 <BSP_LCD_SetTransparency>:
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8008b10:	4602      	mov	r2, r0
 8008b12:	4801      	ldr	r0, [pc, #4]	; (8008b18 <BSP_LCD_SetTransparency+0x8>)
 8008b14:	f001 bca0 	b.w	800a458 <HAL_LTDC_SetAlpha>
 8008b18:	20008e58 	.word	0x20008e58

08008b1c <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8008b1c:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <BSP_LCD_SetTextColor+0x10>)
 8008b1e:	4a04      	ldr	r2, [pc, #16]	; (8008b30 <BSP_LCD_SetTextColor+0x14>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b26:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8008b2a:	4770      	bx	lr
 8008b2c:	20008dfc 	.word	0x20008dfc
 8008b30:	20008e00 	.word	0x20008e00

08008b34 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8008b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008b38:	4c1a      	ldr	r4, [pc, #104]	; (8008ba4 <BSP_LCD_Clear+0x70>)
 8008b3a:	2334      	movs	r3, #52	; 0x34
 8008b3c:	491a      	ldr	r1, [pc, #104]	; (8008ba8 <BSP_LCD_Clear+0x74>)
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008b3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008b42:	6825      	ldr	r5, [r4, #0]
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8008b44:	2600      	movs	r6, #0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008b46:	4c19      	ldr	r4, [pc, #100]	; (8008bac <BSP_LCD_Clear+0x78>)
{ 
 8008b48:	b083      	sub	sp, #12
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008b4a:	fb03 1305 	mla	r3, r3, r5, r1
  
  hDma2dHandler.Instance = DMA2D;
 8008b4e:	4918      	ldr	r1, [pc, #96]	; (8008bb0 <BSP_LCD_Clear+0x7c>)
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008b50:	6062      	str	r2, [r4, #4]
{ 
 8008b52:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8008b56:	4620      	mov	r0, r4
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8008b58:	60e6      	str	r6, [r4, #12]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008b5a:	2a02      	cmp	r2, #2
  hDma2dHandler.Instance = DMA2D;
 8008b5c:	6021      	str	r1, [r4, #0]
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008b5e:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8008b60:	bf18      	it	ne
 8008b62:	2200      	movne	r2, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008b64:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 8008b68:	60a2      	str	r2, [r4, #8]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8008b6a:	f000 fd3f 	bl	80095ec <HAL_DMA2D_Init>
 8008b6e:	b110      	cbz	r0, 8008b76 <BSP_LCD_Clear+0x42>
}
 8008b70:	b003      	add	sp, #12
 8008b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8008b76:	4629      	mov	r1, r5
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fe51 	bl	8009820 <HAL_DMA2D_ConfigLayer>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d1f6      	bne.n	8008b70 <BSP_LCD_Clear+0x3c>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8008b82:	f8cd 9000 	str.w	r9, [sp]
 8008b86:	4643      	mov	r3, r8
 8008b88:	4632      	mov	r2, r6
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 fd5b 	bl	8009648 <HAL_DMA2D_Start>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d1ec      	bne.n	8008b70 <BSP_LCD_Clear+0x3c>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8008b96:	4620      	mov	r0, r4
 8008b98:	210a      	movs	r1, #10
}
 8008b9a:	b003      	add	sp, #12
 8008b9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8008ba0:	f000 bda8 	b.w	80096f4 <HAL_DMA2D_PollForTransfer>
 8008ba4:	20008dfc 	.word	0x20008dfc
 8008ba8:	20008e58 	.word	0x20008e58
 8008bac:	20008e18 	.word	0x20008e18
 8008bb0:	4002b000 	.word	0x4002b000

08008bb4 <BSP_LCD_DisplayChar>:
{
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008bb8:	4c3b      	ldr	r4, [pc, #236]	; (8008ca8 <BSP_LCD_DisplayChar+0xf4>)
{
 8008bba:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008bbc:	4b3b      	ldr	r3, [pc, #236]	; (8008cac <BSP_LCD_DisplayChar+0xf8>)
{
 8008bbe:	4682      	mov	sl, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008bc0:	6825      	ldr	r5, [r4, #0]
 8008bc2:	3a20      	subs	r2, #32
{
 8008bc4:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008bc6:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8008bca:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8008bce:	f8de 3008 	ldr.w	r3, [lr, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008bd2:	8898      	ldrh	r0, [r3, #4]
 8008bd4:	88de      	ldrh	r6, [r3, #6]
 8008bd6:	1dc1      	adds	r1, r0, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008bd8:	681c      	ldr	r4, [r3, #0]
 8008bda:	fb06 f202 	mul.w	r2, r6, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008bde:	10c9      	asrs	r1, r1, #3
 8008be0:	9602      	str	r6, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 8008be2:	ebc0 03c1 	rsb	r3, r0, r1, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008be6:	9101      	str	r1, [sp, #4]
 8008be8:	fb01 f202 	mul.w	r2, r1, r2
  offset =  8 *((width + 7)/8) -  width ;
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	9304      	str	r3, [sp, #16]
  for(i = 0; i < height; i++)
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	d04c      	beq.n	8008c8e <BSP_LCD_DisplayChar+0xda>
 8008bf4:	4b2e      	ldr	r3, [pc, #184]	; (8008cb0 <BSP_LCD_DisplayChar+0xfc>)
 8008bf6:	2134      	movs	r1, #52	; 0x34
 8008bf8:	eb04 0b02 	add.w	fp, r4, r2
 8008bfc:	fb01 3505 	mla	r5, r1, r5, r3
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	1e43      	subs	r3, r0, #1
 8008c06:	9305      	str	r3, [sp, #20]
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	9a00      	ldr	r2, [sp, #0]
 8008c0c:	f89b 7000 	ldrb.w	r7, [fp]
 8008c10:	eb03 0c02 	add.w	ip, r3, r2
    switch(((width + 7)/8))
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	fa1f fc8c 	uxth.w	ip, ip
 8008c1c:	d005      	beq.n	8008c2a <BSP_LCD_DisplayChar+0x76>
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d138      	bne.n	8008c94 <BSP_LCD_DisplayChar+0xe0>
      line =  (pchar[0]<< 8) | pchar[1];      
 8008c22:	f8bb 7000 	ldrh.w	r7, [fp]
 8008c26:	ba7f      	rev16	r7, r7
 8008c28:	b2bf      	uxth	r7, r7
    for (j = 0; j < width; j++)
 8008c2a:	b340      	cbz	r0, 8008c7e <BSP_LCD_DisplayChar+0xca>
 8008c2c:	2100      	movs	r1, #0
      if(line & (1 << (width- j + offset- 1))) 
 8008c2e:	f04f 0801 	mov.w	r8, #1
 8008c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c36:	eb03 0902 	add.w	r9, r3, r2
 8008c3a:	e008      	b.n	8008c4e <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008c3c:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8008c3e:	f8de 2000 	ldr.w	r2, [lr]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008c42:	d016      	beq.n	8008c72 <BSP_LCD_DisplayChar+0xbe>
    for (j = 0; j < width; j++)
 8008c44:	3101      	adds	r1, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008c46:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (j = 0; j < width; j++)
 8008c4a:	4288      	cmp	r0, r1
 8008c4c:	d017      	beq.n	8008c7e <BSP_LCD_DisplayChar+0xca>
      if(line & (1 << (width- j + offset- 1))) 
 8008c4e:	eba9 0201 	sub.w	r2, r9, r1
 8008c52:	eb0a 0301 	add.w	r3, sl, r1
 8008c56:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8008c58:	fa08 f202 	lsl.w	r2, r8, r2
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	6cae      	ldr	r6, [r5, #72]	; 0x48
 8008c60:	423a      	tst	r2, r7
 8008c62:	fb04 330c 	mla	r3, r4, ip, r3
 8008c66:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8008c68:	d1e8      	bne.n	8008c3c <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008c6a:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8008c6c:	f8de 2004 	ldr.w	r2, [lr, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008c70:	d1e8      	bne.n	8008c44 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 8008c72:	3101      	adds	r1, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008c74:	b292      	uxth	r2, r2
    for (j = 0; j < width; j++)
 8008c76:	4288      	cmp	r0, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008c78:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (j = 0; j < width; j++)
 8008c7c:	d1e7      	bne.n	8008c4e <BSP_LCD_DisplayChar+0x9a>
  for(i = 0; i < height; i++)
 8008c7e:	9b00      	ldr	r3, [sp, #0]
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	4493      	add	fp, r2
 8008c86:	9a02      	ldr	r2, [sp, #8]
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d1bc      	bne.n	8008c08 <BSP_LCD_DisplayChar+0x54>
}
 8008c8e:	b007      	add	sp, #28
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8008c94:	043f      	lsls	r7, r7, #16
 8008c96:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008c9a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8008c9e:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8008ca2:	431f      	orrs	r7, r3
 8008ca4:	e7c1      	b.n	8008c2a <BSP_LCD_DisplayChar+0x76>
 8008ca6:	bf00      	nop
 8008ca8:	20008dfc 	.word	0x20008dfc
 8008cac:	20008e00 	.word	0x20008e00
 8008cb0:	20008e58 	.word	0x20008e58

08008cb4 <BSP_LCD_DisplayStringAt>:
{
 8008cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 8008cba:	7812      	ldrb	r2, [r2, #0]
{
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	d04b      	beq.n	8008d5c <BSP_LCD_DisplayStringAt+0xa8>
 8008cc4:	1c71      	adds	r1, r6, #1
 8008cc6:	1b8d      	subs	r5, r1, r6
 8008cc8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d1fa      	bne.n	8008cc6 <BSP_LCD_DisplayStringAt+0x12>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008cd0:	4f23      	ldr	r7, [pc, #140]	; (8008d60 <BSP_LCD_DisplayStringAt+0xac>)
 8008cd2:	2034      	movs	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008cd4:	4923      	ldr	r1, [pc, #140]	; (8008d64 <BSP_LCD_DisplayStringAt+0xb0>)
  switch (Mode)
 8008cd6:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008cd8:	f8d7 9000 	ldr.w	r9, [r7]
 8008cdc:	f8df c088 	ldr.w	ip, [pc, #136]	; 8008d68 <BSP_LCD_DisplayStringAt+0xb4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008ce0:	eb09 0749 	add.w	r7, r9, r9, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008ce4:	fb00 c009 	mla	r0, r0, r9, ip
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008ce8:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008cec:	6e00      	ldr	r0, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008cee:	688f      	ldr	r7, [r1, #8]
 8008cf0:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 8008cf4:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 8008cf8:	d029      	beq.n	8008d4e <BSP_LCD_DisplayStringAt+0x9a>
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d021      	beq.n	8008d42 <BSP_LCD_DisplayStringAt+0x8e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8008cfe:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d00:	b280      	uxth	r0, r0
    ref_column = 1;
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfd8      	it	le
 8008d06:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d08:	4586      	cmp	lr, r0
 8008d0a:	d818      	bhi.n	8008d3e <BSP_LCD_DisplayStringAt+0x8a>
 8008d0c:	b1ba      	cbz	r2, 8008d3e <BSP_LCD_DisplayStringAt+0x8a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008d0e:	2334      	movs	r3, #52	; 0x34
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d10:	4635      	mov	r5, r6
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008d12:	fb03 c909 	mla	r9, r3, r9, ip
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8008d16:	4620      	mov	r0, r4
 8008d18:	4641      	mov	r1, r8
 8008d1a:	f7ff ff4b 	bl	8008bb4 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d1e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008d22:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d24:	1bab      	subs	r3, r5, r6
 8008d26:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008d2a:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d2c:	b29b      	uxth	r3, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008d2e:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008d30:	fb00 1313 	mls	r3, r0, r3, r1
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4283      	cmp	r3, r0
 8008d38:	d301      	bcc.n	8008d3e <BSP_LCD_DisplayStringAt+0x8a>
 8008d3a:	2a00      	cmp	r2, #0
 8008d3c:	d1eb      	bne.n	8008d16 <BSP_LCD_DisplayStringAt+0x62>
}
 8008d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8008d42:	1b49      	subs	r1, r1, r5
 8008d44:	fb11 f10e 	smulbb	r1, r1, lr
 8008d48:	1b0c      	subs	r4, r1, r4
 8008d4a:	b2a4      	uxth	r4, r4
      break;
 8008d4c:	e7d7      	b.n	8008cfe <BSP_LCD_DisplayStringAt+0x4a>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008d4e:	1b49      	subs	r1, r1, r5
 8008d50:	fb0e f101 	mul.w	r1, lr, r1
 8008d54:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8008d58:	b2a4      	uxth	r4, r4
      break;
 8008d5a:	e7d0      	b.n	8008cfe <BSP_LCD_DisplayStringAt+0x4a>
  uint32_t size = 0, xsize = 0; 
 8008d5c:	4615      	mov	r5, r2
 8008d5e:	e7b7      	b.n	8008cd0 <BSP_LCD_DisplayStringAt+0x1c>
 8008d60:	20008dfc 	.word	0x20008dfc
 8008d64:	20008e00 	.word	0x20008e00
 8008d68:	20008e58 	.word	0x20008e58

08008d6c <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <BSP_LCD_DrawPixel+0x30>)
{
 8008d6e:	b430      	push	{r4, r5}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2534      	movs	r5, #52	; 0x34
 8008d74:	4c0a      	ldr	r4, [pc, #40]	; (8008da0 <BSP_LCD_DrawPixel+0x34>)
 8008d76:	fb05 4303 	mla	r3, r5, r3, r4
 8008d7a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8008d7c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8008d7e:	2d02      	cmp	r5, #2
 8008d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d82:	fb04 0101 	mla	r1, r4, r1, r0
 8008d86:	d003      	beq.n	8008d90 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008d88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8008d8c:	bc30      	pop	{r4, r5}
 8008d8e:	4770      	bx	lr
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008d90:	b292      	uxth	r2, r2
}
 8008d92:	bc30      	pop	{r4, r5}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008d94:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20008dfc 	.word	0x20008dfc
 8008da0:	20008e58 	.word	0x20008e58

08008da4 <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008da4:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008da6:	2201      	movs	r2, #1
 8008da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008dac:	4808      	ldr	r0, [pc, #32]	; (8008dd0 <BSP_LCD_DisplayOn+0x2c>)
{
 8008dae:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008db0:	681c      	ldr	r4, [r3, #0]
 8008db2:	69a3      	ldr	r3, [r4, #24]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008db8:	f000 fea8 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	2108      	movs	r1, #8
 8008dc0:	4804      	ldr	r0, [pc, #16]	; (8008dd4 <BSP_LCD_DisplayOn+0x30>)
}
 8008dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008dc6:	f000 bea1 	b.w	8009b0c <HAL_GPIO_WritePin>
 8008dca:	bf00      	nop
 8008dcc:	20008e58 	.word	0x20008e58
 8008dd0:	40022000 	.word	0x40022000
 8008dd4:	40022800 	.word	0x40022800

08008dd8 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008dd8:	4b4e      	ldr	r3, [pc, #312]	; (8008f14 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008dda:	f04f 0c10 	mov.w	ip, #16
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008dde:	484e      	ldr	r0, [pc, #312]	; (8008f18 <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008de2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8008de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008dea:	645a      	str	r2, [r3, #68]	; 0x44
{
 8008dec:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008df0:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008df2:	250e      	movs	r5, #14
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008df4:	2700      	movs	r7, #0
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008df6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008dfa:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008dfc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008e00:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8008f28 <BSP_LCD_MspInit+0x150>
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008e04:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008e06:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008e0a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e0e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008e12:	631a      	str	r2, [r3, #48]	; 0x30
 8008e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8008e1a:	9201      	str	r2, [sp, #4]
 8008e1c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e20:	ea42 020c 	orr.w	r2, r2, ip
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
 8008e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e28:	ea02 020c 	and.w	r2, r2, ip
 8008e2c:	9202      	str	r2, [sp, #8]
 8008e2e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
 8008e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e3a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008e3e:	9203      	str	r2, [sp, #12]
 8008e40:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e48:	631a      	str	r2, [r3, #48]	; 0x30
 8008e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008e50:	9204      	str	r2, [sp, #16]
 8008e52:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8008e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008e62:	9205      	str	r2, [sp, #20]
 8008e64:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e70:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8008e74:	9206      	str	r2, [sp, #24]
 8008e76:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8008e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e82:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008e86:	9207      	str	r2, [sp, #28]
 8008e88:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008e94:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008e9c:	970b      	str	r7, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e9e:	940a      	str	r4, [sp, #40]	; 0x28
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008ea4:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008ea6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008ea8:	f000 fd0c 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008eac:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008eae:	a909      	add	r1, sp, #36	; 0x24
 8008eb0:	481a      	ldr	r0, [pc, #104]	; (8008f1c <BSP_LCD_MspInit+0x144>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008eb2:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008eb4:	4f1a      	ldr	r7, [pc, #104]	; (8008f20 <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008eb6:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008eba:	f000 fd03 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8008ebe:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008ec2:	a909      	add	r1, sp, #36	; 0x24
 8008ec4:	4648      	mov	r0, r9
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008ec8:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008eca:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008ecc:	f000 fcfa 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8008ed0:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008ed4:	a909      	add	r1, sp, #36	; 0x24
 8008ed6:	4813      	ldr	r0, [pc, #76]	; (8008f24 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8008ed8:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008eda:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008edc:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008ede:	f000 fcf1 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008ee2:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008ee4:	a909      	add	r1, sp, #36	; 0x24
 8008ee6:	4638      	mov	r0, r7
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008ee8:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008eea:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008eec:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008eee:	f000 fce9 	bl	80098c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008ef2:	4648      	mov	r0, r9
 8008ef4:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008ef6:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008efa:	f000 fce3 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8008efe:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008f00:	a909      	add	r1, sp, #36	; 0x24
 8008f02:	4638      	mov	r0, r7
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8008f04:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008f08:	f000 fcdc 	bl	80098c4 <HAL_GPIO_Init>
}
 8008f0c:	b00f      	add	sp, #60	; 0x3c
 8008f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f12:	bf00      	nop
 8008f14:	40023800 	.word	0x40023800
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	40021800 	.word	0x40021800
 8008f20:	40022800 	.word	0x40022800
 8008f24:	40022400 	.word	0x40022400
 8008f28:	40022000 	.word	0x40022000

08008f2c <BSP_LCD_ClockConfig>:
{
 8008f2c:	b430      	push	{r4, r5}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <BSP_LCD_ClockConfig+0x20>)
 8008f30:	2508      	movs	r5, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008f32:	24c0      	movs	r4, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008f34:	2105      	movs	r1, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008f3a:	601d      	str	r5, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008f3c:	615c      	str	r4, [r3, #20]
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008f3e:	4618      	mov	r0, r3
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008f40:	61d9      	str	r1, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f44:	bc30      	pop	{r4, r5}
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008f46:	f001 be7d 	b.w	800ac44 <HAL_RCCEx_PeriphCLKConfig>
 8008f4a:	bf00      	nop
 8008f4c:	20008f00 	.word	0x20008f00

08008f50 <BSP_LCD_Init>:
{    
 8008f50:	b538      	push	{r3, r4, r5, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008f52:	2209      	movs	r2, #9
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008f54:	4c25      	ldr	r4, [pc, #148]	; (8008fec <BSP_LCD_Init+0x9c>)
 8008f56:	2528      	movs	r5, #40	; 0x28
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008f58:	2335      	movs	r3, #53	; 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008f5a:	200b      	movs	r0, #11
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008f5c:	f240 111b 	movw	r1, #283	; 0x11b
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008f60:	6165      	str	r5, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008f62:	f240 2515 	movw	r5, #533	; 0x215
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008f66:	61a2      	str	r2, [r4, #24]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8008f68:	f240 121d 	movw	r2, #285	; 0x11d
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008f6c:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8008f6e:	f240 2335 	movw	r3, #565	; 0x235
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008f72:	6220      	str	r0, [r4, #32]
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008f74:	4620      	mov	r0, r4
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008f76:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008f78:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008f7a:	6265      	str	r5, [r4, #36]	; 0x24
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8008f7c:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8008f80:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008f84:	f7ff ffd2 	bl	8008f2c <BSP_LCD_ClockConfig>
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8008f88:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8008f8a:	f44f 7188 	mov.w	r1, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8008f8e:	4a18      	ldr	r2, [pc, #96]	; (8008ff0 <BSP_LCD_Init+0xa0>)
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008f90:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8008f92:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Instance = LTDC;
 8008f94:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.Backcolor.Green = 0;
 8008f96:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8008f9a:	e9c4 5118 	strd	r5, r1, [r4, #96]	; 0x60
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8008f9e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008fa2:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008fa6:	f001 fb23 	bl	800a5f0 <HAL_LTDC_GetState>
 8008faa:	b918      	cbnz	r0, 8008fb4 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8008fac:	4601      	mov	r1, r0
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f7ff ff12 	bl	8008dd8 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8008fb4:	480d      	ldr	r0, [pc, #52]	; (8008fec <BSP_LCD_Init+0x9c>)
 8008fb6:	f001 f90f 	bl	800a1d8 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008fc0:	480c      	ldr	r0, [pc, #48]	; (8008ff4 <BSP_LCD_Init+0xa4>)
 8008fc2:	f000 fda3 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	2108      	movs	r1, #8
 8008fca:	480b      	ldr	r0, [pc, #44]	; (8008ff8 <BSP_LCD_Init+0xa8>)
 8008fcc:	f000 fd9e 	bl	8009b0c <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8008fd0:	f000 f8d4 	bl	800917c <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8008fd4:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <BSP_LCD_Init+0xac>)
 8008fd6:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <BSP_LCD_Init+0xb0>)
}
 8008fd8:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4909      	ldr	r1, [pc, #36]	; (8009004 <BSP_LCD_Init+0xb4>)
 8008fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008fe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fe6:	6099      	str	r1, [r3, #8]
}
 8008fe8:	bd38      	pop	{r3, r4, r5, pc}
 8008fea:	bf00      	nop
 8008fec:	20008e58 	.word	0x20008e58
 8008ff0:	40016800 	.word	0x40016800
 8008ff4:	40022000 	.word	0x40022000
 8008ff8:	40022800 	.word	0x40022800
 8008ffc:	20008dfc 	.word	0x20008dfc
 8009000:	20008e00 	.word	0x20008e00
 8009004:	2000841c 	.word	0x2000841c

08009008 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009008:	4b53      	ldr	r3, [pc, #332]	; (8009158 <BSP_SDRAM_MspInit+0x150>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800900a:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 800900c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900e:	f042 0201 	orr.w	r2, r2, #1
{  
 8009012:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8009014:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8009016:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 8009018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800901a:	2001      	movs	r0, #1
{  
 800901c:	b08e      	sub	sp, #56	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800901e:	2508      	movs	r5, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8009020:	4002      	ands	r2, r0
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8009022:	ac0e      	add	r4, sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8009024:	9201      	str	r2, [sp, #4]
 8009026:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8009028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800902a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
 8009030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009032:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8009036:	9202      	str	r2, [sp, #8]
 8009038:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800903a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800903c:	f042 0204 	orr.w	r2, r2, #4
 8009040:	631a      	str	r2, [r3, #48]	; 0x30
 8009042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009044:	f002 0204 	and.w	r2, r2, #4
 8009048:	9203      	str	r2, [sp, #12]
 800904a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800904c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800904e:	432a      	orrs	r2, r5
 8009050:	631a      	str	r2, [r3, #48]	; 0x30
 8009052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009054:	402a      	ands	r2, r5
 8009056:	9204      	str	r2, [sp, #16]
 8009058:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800905a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800905c:	f042 0210 	orr.w	r2, r2, #16
 8009060:	631a      	str	r2, [r3, #48]	; 0x30
 8009062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009064:	f002 0210 	and.w	r2, r2, #16
 8009068:	9205      	str	r2, [sp, #20]
 800906a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800906c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800906e:	f042 0220 	orr.w	r2, r2, #32
 8009072:	631a      	str	r2, [r3, #48]	; 0x30
 8009074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009076:	f002 0220 	and.w	r2, r2, #32
 800907a:	9206      	str	r2, [sp, #24]
 800907c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800907e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
 8009086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009088:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800908c:	9207      	str	r2, [sp, #28]
 800908e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009096:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8009098:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800909c:	f844 5d14 	str.w	r5, [r4, #-20]!
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80090a0:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80090a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80090a6:	910a      	str	r1, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80090a8:	910c      	str	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80090aa:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80090ac:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80090ae:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80090b0:	482a      	ldr	r0, [pc, #168]	; (800915c <BSP_SDRAM_MspInit+0x154>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80090b2:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80090b4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80090b6:	f000 fc05 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80090ba:	f24c 730b 	movw	r3, #50955	; 0xc70b
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80090be:	4621      	mov	r1, r4
 80090c0:	4827      	ldr	r0, [pc, #156]	; (8009160 <BSP_SDRAM_MspInit+0x158>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80090c2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80090c4:	f000 fbfe 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80090c8:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80090cc:	4621      	mov	r1, r4
 80090ce:	4825      	ldr	r0, [pc, #148]	; (8009164 <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80090d0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80090d2:	f000 fbf7 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80090d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80090da:	4621      	mov	r1, r4
 80090dc:	4822      	ldr	r0, [pc, #136]	; (8009168 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80090de:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80090e0:	f000 fbf0 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80090e4:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80090e8:	4621      	mov	r1, r4
 80090ea:	4820      	ldr	r0, [pc, #128]	; (800916c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80090ec:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80090ee:	f000 fbe9 	bl	80098c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80090f2:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80090f4:	4621      	mov	r1, r4
 80090f6:	481e      	ldr	r0, [pc, #120]	; (8009170 <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80090f8:	4c1e      	ldr	r4, [pc, #120]	; (8009174 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80090fa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80090fc:	f000 fbe2 	bl	80098c4 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8009100:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8009104:	2180      	movs	r1, #128	; 0x80
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8009106:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800910a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800910e:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8009110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8009114:	60a1      	str	r1, [r4, #8]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800911a:	6122      	str	r2, [r4, #16]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800911c:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800911e:	6223      	str	r3, [r4, #32]
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8009120:	4b15      	ldr	r3, [pc, #84]	; (8009178 <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8009122:	6325      	str	r5, [r4, #48]	; 0x30
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009124:	6160      	str	r0, [r4, #20]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8009126:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8009128:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800912a:	61a1      	str	r1, [r4, #24]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800912c:	62a2      	str	r2, [r4, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 800912e:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8009130:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8009132:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8009134:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8009136:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_DMA_DeInit(&dma_handle);
 800913a:	f000 fa13 	bl	8009564 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800913e:	4620      	mov	r0, r4
 8009140:	f000 f974 	bl	800942c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8009144:	462a      	mov	r2, r5
 8009146:	2105      	movs	r1, #5
 8009148:	2038      	movs	r0, #56	; 0x38
 800914a:	f000 f913 	bl	8009374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800914e:	2038      	movs	r0, #56	; 0x38
 8009150:	f000 f946 	bl	80093e0 <HAL_NVIC_EnableIRQ>
}
 8009154:	b00e      	add	sp, #56	; 0x38
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	40023800 	.word	0x40023800
 800915c:	40020800 	.word	0x40020800
 8009160:	40020c00 	.word	0x40020c00
 8009164:	40021000 	.word	0x40021000
 8009168:	40021400 	.word	0x40021400
 800916c:	40021800 	.word	0x40021800
 8009170:	40021c00 	.word	0x40021c00
 8009174:	20008fb0 	.word	0x20008fb0
 8009178:	40026410 	.word	0x40026410

0800917c <BSP_SDRAM_Init>:
{ 
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8009180:	483d      	ldr	r0, [pc, #244]	; (8009278 <BSP_SDRAM_Init+0xfc>)
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8009182:	2600      	movs	r6, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8009184:	4d3d      	ldr	r5, [pc, #244]	; (800927c <BSP_SDRAM_Init+0x100>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009186:	2140      	movs	r1, #64	; 0x40
  Timing.LoadToActiveDelay    = 2;
 8009188:	4c3d      	ldr	r4, [pc, #244]	; (8009280 <BSP_SDRAM_Init+0x104>)
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800918a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800918e:	f04f 0810 	mov.w	r8, #16
  Timing.LoadToActiveDelay    = 2;
 8009192:	f04f 0902 	mov.w	r9, #2
  Timing.ExitSelfRefreshDelay = 7;
 8009196:	2307      	movs	r3, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8009198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.SelfRefreshTime      = 4;
 800919c:	f04f 0a04 	mov.w	sl, #4
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80091a0:	f44f 7780 	mov.w	r7, #256	; 0x100
{ 
 80091a4:	b083      	sub	sp, #12
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80091a6:	6028      	str	r0, [r5, #0]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80091a8:	6169      	str	r1, [r5, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80091aa:	4628      	mov	r0, r5
 80091ac:	4631      	mov	r1, r6
  Timing.ExitSelfRefreshDelay = 7;
 80091ae:	6063      	str	r3, [r4, #4]
  Timing.RowCycleDelay        = 7;
 80091b0:	60e3      	str	r3, [r4, #12]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80091b2:	61af      	str	r7, [r5, #24]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80091b4:	2701      	movs	r7, #1
  Timing.SelfRefreshTime      = 4;
 80091b6:	f8c4 a008 	str.w	sl, [r4, #8]
  Timing.LoadToActiveDelay    = 2;
 80091ba:	f8c4 9000 	str.w	r9, [r4]
  Timing.RCDDelay             = 2;
 80091be:	f8c4 9018 	str.w	r9, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80091c2:	61ee      	str	r6, [r5, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80091c4:	62ae      	str	r6, [r5, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80091c6:	f8c5 a00c 	str.w	sl, [r5, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80091ca:	f8c5 8010 	str.w	r8, [r5, #16]
 80091ce:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009288 <BSP_SDRAM_Init+0x10c>
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80091d2:	e9c5 c208 	strd	ip, r2, [r5, #32]
  Timing.RPDelay              = 2;
 80091d6:	e9c4 9904 	strd	r9, r9, [r4, #16]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80091da:	e9c5 6601 	strd	r6, r6, [r5, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80091de:	f7ff ff13 	bl	8009008 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80091e6:	4c27      	ldr	r4, [pc, #156]	; (8009284 <BSP_SDRAM_Init+0x108>)
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80091e8:	f001 ffce 	bl	800b188 <HAL_SDRAM_Init>
 80091ec:	1b83      	subs	r3, r0, r6
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80091ee:	4621      	mov	r1, r4
 80091f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80091f4:	bf18      	it	ne
 80091f6:	2301      	movne	r3, #1
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80091f8:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 80091fa:	9601      	str	r6, [sp, #4]
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80091fc:	f88b 3000 	strb.w	r3, [fp]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009200:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8009204:	60e6      	str	r6, [r4, #12]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8009206:	6027      	str	r7, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8009208:	60a7      	str	r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800920a:	f001 ffdf 	bl	800b1cc <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800920e:	4638      	mov	r0, r7
 8009210:	f000 f88a 	bl	8009328 <HAL_Delay>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800921c:	e9c4 9800 	strd	r9, r8, [r4]
  Command.ModeRegisterDefinition = 0;
 8009220:	e9c4 7602 	strd	r7, r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8009224:	f001 ffd2 	bl	800b1cc <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009228:	f04f 0c03 	mov.w	ip, #3
  Command.AutoRefreshNumber      = 8;
 800922c:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800922e:	4621      	mov	r1, r4
 8009230:	4628      	mov	r0, r5
 8009232:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009236:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 800923a:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800923c:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8009240:	60e6      	str	r6, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009242:	f001 ffc3 	bl	800b1cc <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8009246:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800924a:	4621      	mov	r1, r4
 800924c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009250:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8009252:	9301      	str	r3, [sp, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8009254:	9b01      	ldr	r3, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009256:	e9c4 a800 	strd	sl, r8, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 800925a:	e9c4 7302 	strd	r7, r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800925e:	f001 ffb5 	bl	800b1cc <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8009262:	4628      	mov	r0, r5
 8009264:	f240 6103 	movw	r1, #1539	; 0x603
 8009268:	f001 ffca 	bl	800b200 <HAL_SDRAM_ProgramRefreshRate>
}
 800926c:	f89b 0000 	ldrb.w	r0, [fp]
 8009270:	b003      	add	sp, #12
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009276:	bf00      	nop
 8009278:	a0000140 	.word	0xa0000140
 800927c:	20009010 	.word	0x20009010
 8009280:	20008f94 	.word	0x20008f94
 8009284:	20008f84 	.word	0x20008f84
 8009288:	2000000c 	.word	0x2000000c

0800928c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop

08009290 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009290:	4a0e      	ldr	r2, [pc, #56]	; (80092cc <HAL_InitTick+0x3c>)
 8009292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009296:	490e      	ldr	r1, [pc, #56]	; (80092d0 <HAL_InitTick+0x40>)
 8009298:	7812      	ldrb	r2, [r2, #0]
 800929a:	fbb3 f3f2 	udiv	r3, r3, r2
{
 800929e:	b510      	push	{r4, lr}
 80092a0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092a2:	6808      	ldr	r0, [r1, #0]
 80092a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80092a8:	f000 f8a8 	bl	80093fc <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80092ac:	b908      	cbnz	r0, 80092b2 <HAL_InitTick+0x22>
 80092ae:	2c0f      	cmp	r4, #15
 80092b0:	d901      	bls.n	80092b6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80092b2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80092b4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80092b6:	2200      	movs	r2, #0
 80092b8:	4621      	mov	r1, r4
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092be:	f000 f859 	bl	8009374 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80092c2:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <HAL_InitTick+0x44>)
 80092c4:	2000      	movs	r0, #0
 80092c6:	601c      	str	r4, [r3, #0]
}
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	bf00      	nop
 80092cc:	2000000d 	.word	0x2000000d
 80092d0:	20000018 	.word	0x20000018
 80092d4:	20000010 	.word	0x20000010

080092d8 <HAL_Init>:
{
 80092d8:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092dc:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092e4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092ec:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092ee:	f000 f82d 	bl	800934c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80092f2:	2000      	movs	r0, #0
 80092f4:	f7ff ffcc 	bl	8009290 <HAL_InitTick>
  HAL_MspInit();
 80092f8:	f7ff ffc8 	bl	800928c <HAL_MspInit>
}
 80092fc:	2000      	movs	r0, #0
 80092fe:	bd08      	pop	{r3, pc}
 8009300:	40023c00 	.word	0x40023c00

08009304 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009304:	4a03      	ldr	r2, [pc, #12]	; (8009314 <HAL_IncTick+0x10>)
 8009306:	4b04      	ldr	r3, [pc, #16]	; (8009318 <HAL_IncTick+0x14>)
 8009308:	6811      	ldr	r1, [r2, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	440b      	add	r3, r1
 800930e:	6013      	str	r3, [r2, #0]
}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	2003cf84 	.word	0x2003cf84
 8009318:	2000000d 	.word	0x2000000d

0800931c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800931c:	4b01      	ldr	r3, [pc, #4]	; (8009324 <HAL_GetTick+0x8>)
 800931e:	6818      	ldr	r0, [r3, #0]
}
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	2003cf84 	.word	0x2003cf84

08009328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800932c:	f7ff fff6 	bl	800931c <HAL_GetTick>
 8009330:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009332:	1c63      	adds	r3, r4, #1
 8009334:	d002      	beq.n	800933c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8009336:	4b04      	ldr	r3, [pc, #16]	; (8009348 <HAL_Delay+0x20>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800933c:	f7ff ffee 	bl	800931c <HAL_GetTick>
 8009340:	1b40      	subs	r0, r0, r5
 8009342:	42a0      	cmp	r0, r4
 8009344:	d3fa      	bcc.n	800933c <HAL_Delay+0x14>
  {
  }
}
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	2000000d 	.word	0x2000000d

0800934c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800934c:	4907      	ldr	r1, [pc, #28]	; (800936c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800934e:	0200      	lsls	r0, r0, #8
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009352:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009354:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009358:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800935a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800935e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009364:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009366:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8009368:	60c8      	str	r0, [r1, #12]
 800936a:	4770      	bx	lr
 800936c:	e000ed00 	.word	0xe000ed00
 8009370:	05fa0000 	.word	0x05fa0000

08009374 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009374:	4b17      	ldr	r3, [pc, #92]	; (80093d4 <HAL_NVIC_SetPriority+0x60>)
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800937c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800937e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009382:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009384:	2d04      	cmp	r5, #4
 8009386:	bf28      	it	cs
 8009388:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800938a:	2c06      	cmp	r4, #6
 800938c:	d918      	bls.n	80093c0 <HAL_NVIC_SetPriority+0x4c>
 800938e:	3b03      	subs	r3, #3
 8009390:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009394:	409c      	lsls	r4, r3
 8009396:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800939a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800939e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093a0:	fa02 f205 	lsl.w	r2, r2, r5
 80093a4:	ea21 0102 	bic.w	r1, r1, r2
 80093a8:	fa01 f203 	lsl.w	r2, r1, r3
 80093ac:	ea42 0204 	orr.w	r2, r2, r4
 80093b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80093b4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80093b6:	db06      	blt.n	80093c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093b8:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <HAL_NVIC_SetPriority+0x64>)
 80093ba:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80093bc:	bc30      	pop	{r4, r5}
 80093be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093c0:	2400      	movs	r4, #0
 80093c2:	4623      	mov	r3, r4
 80093c4:	e7e9      	b.n	800939a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093c6:	f000 000f 	and.w	r0, r0, #15
 80093ca:	4b04      	ldr	r3, [pc, #16]	; (80093dc <HAL_NVIC_SetPriority+0x68>)
 80093cc:	541a      	strb	r2, [r3, r0]
 80093ce:	bc30      	pop	{r4, r5}
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	e000ed00 	.word	0xe000ed00
 80093d8:	e000e400 	.word	0xe000e400
 80093dc:	e000ed14 	.word	0xe000ed14

080093e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80093e0:	2800      	cmp	r0, #0
 80093e2:	db07      	blt.n	80093f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093e4:	2301      	movs	r3, #1
 80093e6:	f000 011f 	and.w	r1, r0, #31
 80093ea:	4a03      	ldr	r2, [pc, #12]	; (80093f8 <HAL_NVIC_EnableIRQ+0x18>)
 80093ec:	0940      	lsrs	r0, r0, #5
 80093ee:	408b      	lsls	r3, r1
 80093f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	e000e100 	.word	0xe000e100

080093fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093fc:	3801      	subs	r0, #1
 80093fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009402:	d20d      	bcs.n	8009420 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009404:	4b07      	ldr	r3, [pc, #28]	; (8009424 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009406:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009408:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800940a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800940c:	25f0      	movs	r5, #240	; 0xf0
 800940e:	4c06      	ldr	r4, [pc, #24]	; (8009428 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009410:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009412:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009414:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800941a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800941c:	bc30      	pop	{r4, r5}
 800941e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009420:	2001      	movs	r0, #1
 8009422:	4770      	bx	lr
 8009424:	e000e010 	.word	0xe000e010
 8009428:	e000ed00 	.word	0xe000ed00

0800942c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8009430:	f7ff ff74 	bl	800931c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009434:	2c00      	cmp	r4, #0
 8009436:	d053      	beq.n	80094e0 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009438:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800943a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800943c:	2100      	movs	r1, #0
 800943e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8009440:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8009444:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8009446:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800944a:	f022 0201 	bic.w	r2, r2, #1
 800944e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009450:	e005      	b.n	800945e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009452:	f7ff ff63 	bl	800931c <HAL_GetTick>
 8009456:	1b40      	subs	r0, r0, r5
 8009458:	2805      	cmp	r0, #5
 800945a:	d83a      	bhi.n	80094d2 <HAL_DMA_Init+0xa6>
 800945c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	07d1      	lsls	r1, r2, #31
 8009462:	d4f6      	bmi.n	8009452 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009464:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009468:	68e1      	ldr	r1, [r4, #12]
 800946a:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800946c:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800946e:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009472:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009474:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8009476:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009478:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800947c:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800947e:	4d35      	ldr	r5, [pc, #212]	; (8009554 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009480:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009482:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009484:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009486:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8009488:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800948a:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800948c:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009490:	d028      	beq.n	80094e4 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009494:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009496:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800949a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800949c:	b2da      	uxtb	r2, r3
 800949e:	4d2e      	ldr	r5, [pc, #184]	; (8009558 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80094a0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094a2:	3a10      	subs	r2, #16
 80094a4:	492d      	ldr	r1, [pc, #180]	; (800955c <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094a6:	482e      	ldr	r0, [pc, #184]	; (8009560 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094a8:	fba5 5202 	umull	r5, r2, r5, r2
 80094ac:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80094ae:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094b0:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094b2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094b4:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80094b6:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094b8:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094bc:	bf88      	it	hi
 80094be:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094c0:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094c2:	4083      	lsls	r3, r0
  return HAL_OK;
 80094c4:	4610      	mov	r0, r2
 80094c6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094c8:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094ca:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80094cc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80094d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80094d4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80094d6:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80094d8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80094da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80094de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80094e0:	2001      	movs	r0, #1
}
 80094e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80094e4:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80094e8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80094ea:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80094ee:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80094f2:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80094f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80094f6:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80094f8:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80094fc:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094fe:	2d00      	cmp	r5, #0
 8009500:	d0cc      	beq.n	800949c <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009502:	b17e      	cbz	r6, 8009524 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009504:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8009508:	d016      	beq.n	8009538 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800950a:	2f02      	cmp	r7, #2
 800950c:	d903      	bls.n	8009516 <HAL_DMA_Init+0xea>
 800950e:	2f03      	cmp	r7, #3
 8009510:	d1c4      	bne.n	800949c <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009512:	01ea      	lsls	r2, r5, #7
 8009514:	d5c2      	bpl.n	800949c <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8009516:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009518:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800951a:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800951c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800951e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8009524:	2f01      	cmp	r7, #1
 8009526:	d003      	beq.n	8009530 <HAL_DMA_Init+0x104>
 8009528:	d3f3      	bcc.n	8009512 <HAL_DMA_Init+0xe6>
 800952a:	2f02      	cmp	r7, #2
 800952c:	d1b6      	bne.n	800949c <HAL_DMA_Init+0x70>
 800952e:	e7f0      	b.n	8009512 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009530:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8009534:	d1b2      	bne.n	800949c <HAL_DMA_Init+0x70>
 8009536:	e7ee      	b.n	8009516 <HAL_DMA_Init+0xea>
    switch (tmp)
 8009538:	2f03      	cmp	r7, #3
 800953a:	d8af      	bhi.n	800949c <HAL_DMA_Init+0x70>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <HAL_DMA_Init+0x118>)
 800953e:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009517 	.word	0x08009517
 8009548:	08009513 	.word	0x08009513
 800954c:	08009517 	.word	0x08009517
 8009550:	08009531 	.word	0x08009531
 8009554:	f010803f 	.word	0xf010803f
 8009558:	aaaaaaab 	.word	0xaaaaaaab
 800955c:	fffffc00 	.word	0xfffffc00
 8009560:	08031f30 	.word	0x08031f30

08009564 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8009564:	2800      	cmp	r0, #0
 8009566:	d035      	beq.n	80095d4 <HAL_DMA_DeInit+0x70>
 8009568:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800956a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800956e:	b2c0      	uxtb	r0, r0
 8009570:	2802      	cmp	r0, #2
 8009572:	d031      	beq.n	80095d8 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8009574:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8009576:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009578:	b2d1      	uxtb	r1, r2
{
 800957a:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800957c:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800957e:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009580:	4d16      	ldr	r5, [pc, #88]	; (80095dc <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8009582:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8009584:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009588:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800958c:	4d14      	ldr	r5, [pc, #80]	; (80095e0 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800958e:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009590:	0909      	lsrs	r1, r1, #4
 8009592:	4c14      	ldr	r4, [pc, #80]	; (80095e4 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 8009594:	6010      	str	r0, [r2, #0]
 8009596:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009598:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 800959a:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800959c:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 80095a0:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80095a2:	bf88      	it	hi
 80095a4:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 80095a6:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80095a8:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 80095aa:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80095ac:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80095ae:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 80095b0:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80095b2:	65dd      	str	r5, [r3, #92]	; 0x5c
 80095b4:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 80095b6:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80095b8:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095ba:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80095bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80095c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80095c4:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80095c8:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80095cc:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 80095d0:	bc70      	pop	{r4, r5, r6}
 80095d2:	4770      	bx	lr
    return HAL_ERROR;
 80095d4:	2001      	movs	r0, #1
 80095d6:	4770      	bx	lr
}
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	aaaaaaab 	.word	0xaaaaaaab
 80095e0:	08031f30 	.word	0x08031f30
 80095e4:	fffffc00 	.word	0xfffffc00

080095e8 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop

080095ec <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 80095ec:	b340      	cbz	r0, 8009640 <HAL_DMA2D_Init+0x54>
{ 
 80095ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80095f0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80095f4:	4604      	mov	r4, r0
 80095f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80095fa:	b1e3      	cbz	r3, 8009636 <HAL_DMA2D_Init+0x4a>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80095fc:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80095fe:	68a7      	ldr	r7, [r4, #8]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009600:	2500      	movs	r5, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009602:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8009604:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  return HAL_OK;
 8009608:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800960a:	e9d4 3100 	ldrd	r3, r1, [r4]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009614:	430a      	orrs	r2, r1
 8009616:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009618:	6b59      	ldr	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800961a:	4a0a      	ldr	r2, [pc, #40]	; (8009644 <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800961c:	f021 0107 	bic.w	r1, r1, #7
 8009620:	4339      	orrs	r1, r7
 8009622:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8009624:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009626:	400a      	ands	r2, r1
 8009628:	68e1      	ldr	r1, [r4, #12]
 800962a:	430a      	orrs	r2, r1
 800962c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800962e:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009630:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 8009634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8009636:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800963a:	f7ff ffd5 	bl	80095e8 <HAL_DMA2D_MspInit>
 800963e:	e7dd      	b.n	80095fc <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 8009640:	2001      	movs	r0, #1
}
 8009642:	4770      	bx	lr
 8009644:	ffffc000 	.word	0xffffc000

08009648 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8009648:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800964a:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800964e:	2c01      	cmp	r4, #1
 8009650:	d036      	beq.n	80096c0 <HAL_DMA2D_Start+0x78>
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8009652:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009654:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8009656:	9e03      	ldr	r6, [sp, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009658:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800965c:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8009660:	6c65      	ldr	r5, [r4, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 8009662:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8009664:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  __HAL_LOCK(hdma2d);
 8009668:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800966c:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800966e:	432b      	orrs	r3, r5
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8009670:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8009674:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8009676:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8009678:	d007      	beq.n	800968a <HAL_DMA2D_Start+0x42>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800967a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800967c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800967e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	6023      	str	r3, [r4, #0]
}
 8009686:	bc70      	pop	{r4, r5, r6}
 8009688:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800968a:	6882      	ldr	r2, [r0, #8]
 800968c:	b1b2      	cbz	r2, 80096bc <HAL_DMA2D_Start+0x74>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800968e:	2a01      	cmp	r2, #1
 8009690:	d024      	beq.n	80096dc <HAL_DMA2D_Start+0x94>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8009692:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8009694:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8009698:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800969c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800969e:	d020      	beq.n	80096e2 <HAL_DMA2D_Start+0x9a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80096a0:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80096a2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80096a6:	d00e      	beq.n	80096c6 <HAL_DMA2D_Start+0x7e>
      tmp2 = (tmp2 >> 20);
 80096a8:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 80096aa:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80096ac:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 80096ae:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80096b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80096b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80096b8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80096bc:	63a1      	str	r1, [r4, #56]	; 0x38
 80096be:	e7dd      	b.n	800967c <HAL_DMA2D_Start+0x34>
  __HAL_LOCK(hdma2d);
 80096c0:	2002      	movs	r0, #2
}
 80096c2:	bc70      	pop	{r4, r5, r6}
 80096c4:	4770      	bx	lr
      tmp2 = (tmp2 >> 19);
 80096c6:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 80096c8:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80096ca:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 80096cc:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80096ce:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80096d2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80096d6:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80096da:	e7ef      	b.n	80096bc <HAL_DMA2D_Start+0x74>
      tmp = (tmp3 | tmp2 | tmp4);  
 80096dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80096e0:	e7ec      	b.n	80096bc <HAL_DMA2D_Start+0x74>
      tmp2 = (tmp2 >> 19);
 80096e2:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 80096e4:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80096e6:	02c9      	lsls	r1, r1, #11
 80096e8:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80096ec:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 80096f0:	e7e4      	b.n	80096bc <HAL_DMA2D_Start+0x74>
 80096f2:	bf00      	nop

080096f4 <HAL_DMA2D_PollForTransfer>:
{
 80096f4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 80096f6:	2200      	movs	r2, #0
{
 80096f8:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 80096fa:	6803      	ldr	r3, [r0, #0]
{
 80096fc:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0;  
 80096fe:	9201      	str	r2, [sp, #4]
{
 8009700:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	07d2      	lsls	r2, r2, #31
 8009706:	d420      	bmi.n	800974a <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8009708:	69da      	ldr	r2, [r3, #28]
 800970a:	0690      	lsls	r0, r2, #26
 800970c:	d402      	bmi.n	8009714 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800970e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8009710:	0691      	lsls	r1, r2, #26
 8009712:	d50f      	bpl.n	8009734 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 8009714:	f7ff fe02 	bl	800931c <HAL_GetTick>
 8009718:	4606      	mov	r6, r0
 800971a:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	d006      	beq.n	800972e <HAL_DMA2D_PollForTransfer+0x3a>
 8009720:	e032      	b.n	8009788 <HAL_DMA2D_PollForTransfer+0x94>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8009726:	9a01      	ldr	r2, [sp, #4]
 8009728:	f012 0f29 	tst.w	r2, #41	; 0x29
 800972c:	d147      	bne.n	80097be <HAL_DMA2D_PollForTransfer+0xca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	06d1      	lsls	r1, r2, #27
 8009732:	d5f6      	bpl.n	8009722 <HAL_DMA2D_PollForTransfer+0x2e>
  __HAL_UNLOCK(hdma2d);
 8009734:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8009736:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009738:	2101      	movs	r1, #1
  return HAL_OK;
 800973a:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800973c:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800973e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009742:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
}
 8009746:	b002      	add	sp, #8
 8009748:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800974a:	f7ff fde7 	bl	800931c <HAL_GetTick>
 800974e:	4606      	mov	r6, r0
 8009750:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	d153      	bne.n	80097fe <HAL_DMA2D_PollForTransfer+0x10a>
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	0791      	lsls	r1, r2, #30
 800975a:	d4d5      	bmi.n	8009708 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8009760:	9a01      	ldr	r2, [sp, #4]
 8009762:	f012 0f21 	tst.w	r2, #33	; 0x21
 8009766:	d0f6      	beq.n	8009756 <HAL_DMA2D_PollForTransfer+0x62>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8009768:	9a01      	ldr	r2, [sp, #4]
 800976a:	0696      	lsls	r6, r2, #26
 800976c:	d503      	bpl.n	8009776 <HAL_DMA2D_PollForTransfer+0x82>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800976e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009770:	f042 0202 	orr.w	r2, r2, #2
 8009774:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8009776:	9a01      	ldr	r2, [sp, #4]
 8009778:	07d5      	lsls	r5, r2, #31
 800977a:	d503      	bpl.n	8009784 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800977c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009784:	2521      	movs	r5, #33	; 0x21
 8009786:	e030      	b.n	80097ea <HAL_DMA2D_PollForTransfer+0xf6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	06d2      	lsls	r2, r2, #27
 800978c:	d4d2      	bmi.n	8009734 <HAL_DMA2D_PollForTransfer+0x40>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8009792:	9a01      	ldr	r2, [sp, #4]
 8009794:	f012 0f29 	tst.w	r2, #41	; 0x29
 8009798:	d111      	bne.n	80097be <HAL_DMA2D_PollForTransfer+0xca>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800979a:	b125      	cbz	r5, 80097a6 <HAL_DMA2D_PollForTransfer+0xb2>
 800979c:	f7ff fdbe 	bl	800931c <HAL_GetTick>
 80097a0:	1b80      	subs	r0, r0, r6
 80097a2:	42a8      	cmp	r0, r5
 80097a4:	d9b9      	bls.n	800971a <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80097a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80097a8:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80097aa:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80097ac:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80097b0:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80097b2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80097b6:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80097b8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 80097bc:	e7c3      	b.n	8009746 <HAL_DMA2D_PollForTransfer+0x52>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80097be:	9a01      	ldr	r2, [sp, #4]
 80097c0:	0712      	lsls	r2, r2, #28
 80097c2:	d503      	bpl.n	80097cc <HAL_DMA2D_PollForTransfer+0xd8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 80097c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80097c6:	f042 0204 	orr.w	r2, r2, #4
 80097ca:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 80097cc:	9a01      	ldr	r2, [sp, #4]
 80097ce:	0696      	lsls	r6, r2, #26
 80097d0:	d503      	bpl.n	80097da <HAL_DMA2D_PollForTransfer+0xe6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80097d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80097d4:	f042 0202 	orr.w	r2, r2, #2
 80097d8:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80097da:	9a01      	ldr	r2, [sp, #4]
 80097dc:	07d5      	lsls	r5, r2, #31
 80097de:	d503      	bpl.n	80097e8 <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80097e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80097e8:	2529      	movs	r5, #41	; 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80097ea:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 80097ec:	2200      	movs	r2, #0
        return HAL_ERROR;      
 80097ee:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80097f0:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80097f2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80097f6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 80097fa:	b002      	add	sp, #8
 80097fc:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	0792      	lsls	r2, r2, #30
 8009802:	d481      	bmi.n	8009708 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8009808:	9a01      	ldr	r2, [sp, #4]
 800980a:	f012 0f21 	tst.w	r2, #33	; 0x21
 800980e:	d1ab      	bne.n	8009768 <HAL_DMA2D_PollForTransfer+0x74>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8009810:	2d00      	cmp	r5, #0
 8009812:	d0c8      	beq.n	80097a6 <HAL_DMA2D_PollForTransfer+0xb2>
 8009814:	f7ff fd82 	bl	800931c <HAL_GetTick>
 8009818:	1b80      	subs	r0, r0, r6
 800981a:	42a8      	cmp	r0, r5
 800981c:	d998      	bls.n	8009750 <HAL_DMA2D_PollForTransfer+0x5c>
 800981e:	e7c2      	b.n	80097a6 <HAL_DMA2D_PollForTransfer+0xb2>

08009820 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8009820:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009824:	2a01      	cmp	r2, #1
 8009826:	d049      	beq.n	80098bc <HAL_DMA2D_ConfigLayer+0x9c>
 8009828:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800982a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
{ 
 800982e:	b4f0      	push	{r4, r5, r6, r7}
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009830:	e9d0 2507 	ldrd	r2, r5, [r0, #28]
  __HAL_LOCK(hdma2d);
 8009834:	2701      	movs	r7, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8009836:	2402      	movs	r4, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009838:	f1a2 0609 	sub.w	r6, r2, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800983c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  __HAL_LOCK(hdma2d);
 8009840:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009844:	42be      	cmp	r6, r7
 8009846:	6a45      	ldr	r5, [r0, #36]	; 0x24
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8009848:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
 800984c:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800984e:	d91a      	bls.n	8009886 <HAL_DMA2D_ConfigLayer+0x66>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009850:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == 0)
 8009854:	b179      	cbz	r1, 8009876 <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009856:	69e5      	ldr	r5, [r4, #28]
 8009858:	4919      	ldr	r1, [pc, #100]	; (80098c0 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800985a:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800985c:	4029      	ands	r1, r5
 800985e:	430a      	orrs	r2, r1
 8009860:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8009862:	6120      	str	r0, [r4, #16]
  __HAL_UNLOCK(hdma2d);  
 8009864:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009866:	2101      	movs	r1, #1
  return HAL_OK;
 8009868:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800986a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 800986e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8009872:	bcf0      	pop	{r4, r5, r6, r7}
 8009874:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009876:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009878:	4911      	ldr	r1, [pc, #68]	; (80098c0 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800987a:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800987c:	4029      	ands	r1, r5
 800987e:	430a      	orrs	r2, r1
 8009880:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009882:	61a0      	str	r0, [r4, #24]
 8009884:	e7ee      	b.n	8009864 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009886:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 800988a:	4332      	orrs	r2, r6
  if(LayerIdx == 0)
 800988c:	b151      	cbz	r1, 80098a4 <HAL_DMA2D_ConfigLayer+0x84>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800988e:	69e6      	ldr	r6, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8009890:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009894:	490a      	ldr	r1, [pc, #40]	; (80098c0 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8009896:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009898:	4031      	ands	r1, r6
 800989a:	430a      	orrs	r2, r1
 800989c:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800989e:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80098a0:	6225      	str	r5, [r4, #32]
 80098a2:	e7df      	b.n	8009864 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80098a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80098a6:	4906      	ldr	r1, [pc, #24]	; (80098c0 <HAL_DMA2D_ConfigLayer+0xa0>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80098a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80098aa:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80098ac:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80098ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80098b2:	430a      	orrs	r2, r1
 80098b4:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80098b6:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80098b8:	62a0      	str	r0, [r4, #40]	; 0x28
 80098ba:	e7d3      	b.n	8009864 <HAL_DMA2D_ConfigLayer+0x44>
  __HAL_LOCK(hdma2d);
 80098bc:	2002      	movs	r0, #2
}
 80098be:	4770      	bx	lr
 80098c0:	00fcfff0 	.word	0x00fcfff0

080098c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098c8:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8009af8 <HAL_GPIO_Init+0x234>
{
 80098cc:	b083      	sub	sp, #12
 80098ce:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 80098d0:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098d2:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8009afc <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098d6:	f8d1 8000 	ldr.w	r8, [r1]
 80098da:	e003      	b.n	80098e4 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 80098dc:	3501      	adds	r5, #1
 80098de:	2d10      	cmp	r5, #16
 80098e0:	f000 80b6 	beq.w	8009a50 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 80098e4:	2301      	movs	r3, #1
 80098e6:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098e8:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 80098ec:	428b      	cmp	r3, r1
 80098ee:	d1f5      	bne.n	80098dc <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80098f0:	f8de 4004 	ldr.w	r4, [lr, #4]
 80098f4:	f024 0710 	bic.w	r7, r4, #16
 80098f8:	2f02      	cmp	r7, #2
 80098fa:	f040 80ac 	bne.w	8009a56 <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 80098fe:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009900:	f005 0a07 	and.w	sl, r5, #7
 8009904:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009908:	f8de 2010 	ldr.w	r2, [lr, #16]
 800990c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009910:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8009914:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009916:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800991a:	fa02 f20a 	lsl.w	r2, r2, sl
 800991e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009922:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009926:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800992a:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800992c:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009930:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8009934:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009936:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 800993a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800993c:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009940:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009942:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8009944:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8009946:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009948:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800994c:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8009950:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009954:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8009956:	fa06 f60a 	lsl.w	r6, r6, sl
 800995a:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 800995e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8009960:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009962:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009966:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8009968:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800996a:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800996c:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800996e:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009972:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009976:	fa03 f30a 	lsl.w	r3, r3, sl
 800997a:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 800997e:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009980:	d5ac      	bpl.n	80098dc <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009982:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8009986:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800998a:	f005 0303 	and.w	r3, r5, #3
 800998e:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009990:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8009994:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009998:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800999a:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800999e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80099a2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80099a6:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099aa:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80099ae:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80099b0:	4e48      	ldr	r6, [pc, #288]	; (8009ad4 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099b2:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80099b4:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 80099b6:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80099b8:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80099bc:	d020      	beq.n	8009a00 <HAL_GPIO_Init+0x13c>
 80099be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80099c2:	42b0      	cmp	r0, r6
 80099c4:	d05e      	beq.n	8009a84 <HAL_GPIO_Init+0x1c0>
 80099c6:	4e44      	ldr	r6, [pc, #272]	; (8009ad8 <HAL_GPIO_Init+0x214>)
 80099c8:	42b0      	cmp	r0, r6
 80099ca:	d060      	beq.n	8009a8e <HAL_GPIO_Init+0x1ca>
 80099cc:	4e43      	ldr	r6, [pc, #268]	; (8009adc <HAL_GPIO_Init+0x218>)
 80099ce:	42b0      	cmp	r0, r6
 80099d0:	d062      	beq.n	8009a98 <HAL_GPIO_Init+0x1d4>
 80099d2:	4e43      	ldr	r6, [pc, #268]	; (8009ae0 <HAL_GPIO_Init+0x21c>)
 80099d4:	42b0      	cmp	r0, r6
 80099d6:	d064      	beq.n	8009aa2 <HAL_GPIO_Init+0x1de>
 80099d8:	4e42      	ldr	r6, [pc, #264]	; (8009ae4 <HAL_GPIO_Init+0x220>)
 80099da:	42b0      	cmp	r0, r6
 80099dc:	d06b      	beq.n	8009ab6 <HAL_GPIO_Init+0x1f2>
 80099de:	4e42      	ldr	r6, [pc, #264]	; (8009ae8 <HAL_GPIO_Init+0x224>)
 80099e0:	42b0      	cmp	r0, r6
 80099e2:	d06d      	beq.n	8009ac0 <HAL_GPIO_Init+0x1fc>
 80099e4:	4e41      	ldr	r6, [pc, #260]	; (8009aec <HAL_GPIO_Init+0x228>)
 80099e6:	42b0      	cmp	r0, r6
 80099e8:	d060      	beq.n	8009aac <HAL_GPIO_Init+0x1e8>
 80099ea:	4e41      	ldr	r6, [pc, #260]	; (8009af0 <HAL_GPIO_Init+0x22c>)
 80099ec:	42b0      	cmp	r0, r6
 80099ee:	d06c      	beq.n	8009aca <HAL_GPIO_Init+0x206>
 80099f0:	4e40      	ldr	r6, [pc, #256]	; (8009af4 <HAL_GPIO_Init+0x230>)
 80099f2:	42b0      	cmp	r0, r6
 80099f4:	bf0c      	ite	eq
 80099f6:	2609      	moveq	r6, #9
 80099f8:	260a      	movne	r6, #10
 80099fa:	fa06 f303 	lsl.w	r3, r6, r3
 80099fe:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8009a00:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a02:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8009a04:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8009a08:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8009a0c:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8009a10:	bf54      	ite	pl
 8009a12:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009a14:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a16:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8009a18:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8009a1c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8009a20:	bf54      	ite	pl
 8009a22:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009a24:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009a26:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8009a28:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8009a2c:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8009a30:	bf54      	ite	pl
 8009a32:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009a34:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009a36:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8009a38:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8009a3c:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8009a40:	bf54      	ite	pl
 8009a42:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8009a44:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8009a46:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8009a48:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009a4c:	f47f af4a 	bne.w	80098e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009a50:	b003      	add	sp, #12
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a5a:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8009a5c:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a60:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009a62:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a66:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a6a:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a6c:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009a70:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a74:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009a78:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8009a7c:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a7e:	f63f af74 	bhi.w	800996a <HAL_GPIO_Init+0xa6>
 8009a82:	e760      	b.n	8009946 <HAL_GPIO_Init+0x82>
 8009a84:	2601      	movs	r6, #1
 8009a86:	fa06 f303 	lsl.w	r3, r6, r3
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	e7b8      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009a8e:	2602      	movs	r6, #2
 8009a90:	fa06 f303 	lsl.w	r3, r6, r3
 8009a94:	431a      	orrs	r2, r3
 8009a96:	e7b3      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009a98:	2603      	movs	r6, #3
 8009a9a:	fa06 f303 	lsl.w	r3, r6, r3
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	e7ae      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009aa2:	2604      	movs	r6, #4
 8009aa4:	fa06 f303 	lsl.w	r3, r6, r3
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	e7a9      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009aac:	2607      	movs	r6, #7
 8009aae:	fa06 f303 	lsl.w	r3, r6, r3
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	e7a4      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009ab6:	2605      	movs	r6, #5
 8009ab8:	fa06 f303 	lsl.w	r3, r6, r3
 8009abc:	431a      	orrs	r2, r3
 8009abe:	e79f      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009ac0:	2606      	movs	r6, #6
 8009ac2:	fa06 f303 	lsl.w	r3, r6, r3
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	e79a      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009aca:	2608      	movs	r6, #8
 8009acc:	fa06 f303 	lsl.w	r3, r6, r3
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	e795      	b.n	8009a00 <HAL_GPIO_Init+0x13c>
 8009ad4:	40020000 	.word	0x40020000
 8009ad8:	40020800 	.word	0x40020800
 8009adc:	40020c00 	.word	0x40020c00
 8009ae0:	40021000 	.word	0x40021000
 8009ae4:	40021400 	.word	0x40021400
 8009ae8:	40021800 	.word	0x40021800
 8009aec:	40021c00 	.word	0x40021c00
 8009af0:	40022000 	.word	0x40022000
 8009af4:	40022400 	.word	0x40022400
 8009af8:	40013c00 	.word	0x40013c00
 8009afc:	40023800 	.word	0x40023800

08009b00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b00:	6903      	ldr	r3, [r0, #16]
 8009b02:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009b04:	bf14      	ite	ne
 8009b06:	2001      	movne	r0, #1
 8009b08:	2000      	moveq	r0, #0
 8009b0a:	4770      	bx	lr

08009b0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b0c:	b902      	cbnz	r2, 8009b10 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009b0e:	0409      	lsls	r1, r1, #16
 8009b10:	6181      	str	r1, [r0, #24]
  }
}
 8009b12:	4770      	bx	lr

08009b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	4604      	mov	r4, r0
 8009b18:	4616      	mov	r6, r2
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	b941      	cbnz	r1, 8009b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 8009b1e:	e03f      	b.n	8009ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	0697      	lsls	r7, r2, #26
 8009b24:	d453      	bmi.n	8009bce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
        return HAL_ERROR;
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b26:	f7ff fbf9 	bl	800931c <HAL_GetTick>
 8009b2a:	1b80      	subs	r0, r0, r6
 8009b2c:	4285      	cmp	r5, r0
 8009b2e:	d341      	bcc.n	8009bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	699a      	ldr	r2, [r3, #24]
 8009b34:	0751      	lsls	r1, r2, #29
 8009b36:	d448      	bmi.n	8009bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	06d2      	lsls	r2, r2, #27
 8009b3c:	d5f0      	bpl.n	8009b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
 8009b3e:	1c69      	adds	r1, r5, #1
 8009b40:	d122      	bne.n	8009b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	0692      	lsls	r2, r2, #26
 8009b46:	d5fc      	bpl.n	8009b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b48:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b4a:	2110      	movs	r1, #16
 8009b4c:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b4e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	0796      	lsls	r6, r2, #30
 8009b54:	d501      	bpl.n	8009b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    hi2c->Instance->TXDR = 0x00U;
 8009b56:	2200      	movs	r2, #0
 8009b58:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	07d5      	lsls	r5, r2, #31
 8009b5e:	d403      	bmi.n	8009b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	f042 0201 	orr.w	r2, r2, #1
 8009b66:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b68:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b6a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009b6c:	4f28      	ldr	r7, [pc, #160]	; (8009c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b6e:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8009b70:	2520      	movs	r5, #32
      return HAL_ERROR;
 8009b72:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009b74:	403a      	ands	r2, r7
 8009b76:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b78:	6466      	str	r6, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b7a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009b7e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b82:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	0697      	lsls	r7, r2, #26
 8009b8c:	d4dc      	bmi.n	8009b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	d033      	beq.n	8009bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8009b92:	f7ff fbc3 	bl	800931c <HAL_GetTick>
 8009b96:	1b80      	subs	r0, r0, r6
 8009b98:	4285      	cmp	r5, r0
 8009b9a:	d32e      	bcc.n	8009bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	e7ce      	b.n	8009b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ba0:	6803      	ldr	r3, [r0, #0]
 8009ba2:	699a      	ldr	r2, [r3, #24]
 8009ba4:	0752      	lsls	r2, r2, #29
 8009ba6:	d410      	bmi.n	8009bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	06d0      	lsls	r0, r2, #27
 8009bac:	d4c7      	bmi.n	8009b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	0690      	lsls	r0, r2, #26
 8009bb2:	d40c      	bmi.n	8009bce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009bb6:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 8009bb8:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 8009bba:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bbc:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8009bbe:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bc2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009bc4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 8009bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_OK;
 8009bca:	2000      	movs	r0, #0
}
 8009bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009bce:	699a      	ldr	r2, [r3, #24]
 8009bd0:	0751      	lsls	r1, r2, #29
 8009bd2:	d502      	bpl.n	8009bda <I2C_WaitOnRXNEFlagUntilTimeout+0xc6>
 8009bd4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d1f7      	bne.n	8009bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bda:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 8009bdc:	4e0c      	ldr	r6, [pc, #48]	; (8009c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bde:	2200      	movs	r2, #0
        return HAL_ERROR;
 8009be0:	2001      	movs	r0, #1
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009be2:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8009be4:	6859      	ldr	r1, [r3, #4]
 8009be6:	4031      	ands	r1, r6
 8009be8:	6059      	str	r1, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bea:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009bec:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8009bf0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bfa:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8009bfc:	2220      	movs	r2, #32
      return HAL_ERROR;
 8009bfe:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8009c00:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8009c04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	fe00e800 	.word	0xfe00e800

08009c14 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	4616      	mov	r6, r2
 8009c1c:	1c6f      	adds	r7, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	d12a      	bne.n	8009c78 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
 8009c22:	699a      	ldr	r2, [r3, #24]
 8009c24:	0790      	lsls	r0, r2, #30
 8009c26:	d425      	bmi.n	8009c74 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	06d1      	lsls	r1, r2, #27
 8009c2c:	d5f9      	bpl.n	8009c22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	0695      	lsls	r5, r2, #26
 8009c32:	d5fc      	bpl.n	8009c2e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c34:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c36:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c38:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c3a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	0791      	lsls	r1, r2, #30
 8009c40:	d501      	bpl.n	8009c46 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8009c42:	2200      	movs	r2, #0
 8009c44:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	07d2      	lsls	r2, r2, #31
 8009c4a:	d403      	bmi.n	8009c54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8009c54:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c56:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009c58:	4f1e      	ldr	r7, [pc, #120]	; (8009cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c5a:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8009c5c:	2520      	movs	r5, #32
      return HAL_ERROR;
 8009c5e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009c60:	403a      	ands	r2, r7
 8009c62:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c64:	6466      	str	r6, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8009c66:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009c6a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c6e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8009c74:	2000      	movs	r0, #0
}
 8009c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c78:	699a      	ldr	r2, [r3, #24]
 8009c7a:	0792      	lsls	r2, r2, #30
 8009c7c:	d4fa      	bmi.n	8009c74 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	06d7      	lsls	r7, r2, #27
 8009c82:	d419      	bmi.n	8009cb8 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c84:	b125      	cbz	r5, 8009c90 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8009c86:	f7ff fb49 	bl	800931c <HAL_GetTick>
 8009c8a:	1b80      	subs	r0, r0, r6
 8009c8c:	42a8      	cmp	r0, r5
 8009c8e:	d9c5      	bls.n	8009c1c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c92:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c94:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009c96:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c98:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009c9a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c9e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ca0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009caa:	b14d      	cbz	r5, 8009cc0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8009cac:	f7ff fb36 	bl	800931c <HAL_GetTick>
 8009cb0:	1b80      	subs	r0, r0, r6
 8009cb2:	4285      	cmp	r5, r0
 8009cb4:	d304      	bcc.n	8009cc0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8009cb6:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cb8:	699a      	ldr	r2, [r3, #24]
 8009cba:	0690      	lsls	r0, r2, #26
 8009cbc:	d5f5      	bpl.n	8009caa <I2C_WaitOnTXISFlagUntilTimeout+0x96>
 8009cbe:	e7b9      	b.n	8009c34 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc0:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8009cc2:	2220      	movs	r2, #32
      return HAL_ERROR;
 8009cc4:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8009cc6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8009cca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd4:	fe00e800 	.word	0xfe00e800

08009cd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4616      	mov	r6, r2
 8009cde:	460d      	mov	r5, r1
 8009ce0:	b929      	cbnz	r1, 8009cee <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8009ce2:	e03b      	b.n	8009d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ce4:	f7ff fb1a 	bl	800931c <HAL_GetTick>
 8009ce8:	1b80      	subs	r0, r0, r6
 8009cea:	4285      	cmp	r5, r0
 8009cec:	d33d      	bcc.n	8009d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	0692      	lsls	r2, r2, #26
 8009cf4:	d446      	bmi.n	8009d84 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	06d7      	lsls	r7, r2, #27
 8009cfa:	d5f3      	bpl.n	8009ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8009cfc:	1c69      	adds	r1, r5, #1
 8009cfe:	d122      	bne.n	8009d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	0692      	lsls	r2, r2, #26
 8009d04:	d5fc      	bpl.n	8009d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d06:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d08:	2110      	movs	r1, #16
 8009d0a:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d0c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009d0e:	699a      	ldr	r2, [r3, #24]
 8009d10:	0790      	lsls	r0, r2, #30
 8009d12:	d501      	bpl.n	8009d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    hi2c->Instance->TXDR = 0x00U;
 8009d14:	2200      	movs	r2, #0
 8009d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	07d1      	lsls	r1, r2, #31
 8009d1c:	d403      	bmi.n	8009d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	f042 0201 	orr.w	r2, r2, #1
 8009d24:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8009d26:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d28:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009d2a:	4f1c      	ldr	r7, [pc, #112]	; (8009d9c <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009d2c:	2604      	movs	r6, #4
    hi2c->State = HAL_I2C_STATE_READY;
 8009d2e:	2520      	movs	r5, #32
      return HAL_ERROR;
 8009d30:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009d32:	403a      	ands	r2, r7
 8009d34:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009d36:	6466      	str	r6, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8009d38:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009d3c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d46:	699a      	ldr	r2, [r3, #24]
 8009d48:	0697      	lsls	r7, r2, #26
 8009d4a:	d4dc      	bmi.n	8009d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d4c:	b1e5      	cbz	r5, 8009d88 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8009d4e:	f7ff fae5 	bl	800931c <HAL_GetTick>
 8009d52:	1b80      	subs	r0, r0, r6
 8009d54:	4285      	cmp	r5, r0
 8009d56:	d317      	bcc.n	8009d88 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	e7cf      	b.n	8009cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d5c:	6803      	ldr	r3, [r0, #0]
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	0692      	lsls	r2, r2, #26
 8009d62:	d40f      	bmi.n	8009d84 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d64:	699a      	ldr	r2, [r3, #24]
 8009d66:	06d0      	lsls	r0, r2, #27
 8009d68:	d4c8      	bmi.n	8009cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d6c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d6e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009d70:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d72:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009d74:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d78:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d7e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8009d84:	2000      	movs	r0, #0
}
 8009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d88:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8009d8a:	2220      	movs	r2, #32
      return HAL_ERROR;
 8009d8c:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8009d8e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8009d92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9c:	fe00e800 	.word	0xfe00e800

08009da0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d04d      	beq.n	8009e40 <HAL_I2C_Init+0xa0>
{
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009da6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009daa:	4604      	mov	r4, r0
 8009dac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d040      	beq.n	8009e36 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009db4:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009db6:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009db8:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dbc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dc0:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8009dc2:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009dc4:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8009dc8:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8009dca:	f020 0001 	bic.w	r0, r0, #1
 8009dce:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009dd0:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009dd2:	6899      	ldr	r1, [r3, #8]
 8009dd4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009dd8:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dda:	d028      	beq.n	8009e2e <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009ddc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009de0:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009de2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009de4:	d102      	bne.n	8009dec <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dea:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dec:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dee:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009df0:	4814      	ldr	r0, [pc, #80]	; (8009e44 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009df2:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009df4:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009df6:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009df8:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dfc:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009dfe:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e00:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e02:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e04:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e08:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e0a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e0e:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e10:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8009e12:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e14:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e16:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	f042 0201 	orr.w	r2, r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e20:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e22:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e26:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e32:	609a      	str	r2, [r3, #8]
 8009e34:	e7da      	b.n	8009dec <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8009e36:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009e3a:	f007 fe4b 	bl	8011ad4 <HAL_I2C_MspInit>
 8009e3e:	e7b9      	b.n	8009db4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8009e40:	2001      	movs	r0, #1
}
 8009e42:	4770      	bx	lr
 8009e44:	02008000 	.word	0x02008000

08009e48 <HAL_I2C_Master_Transmit>:
{
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e4c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8009e50:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e52:	2c20      	cmp	r4, #32
 8009e54:	d16a      	bne.n	8009f2c <HAL_I2C_Master_Transmit+0xe4>
    __HAL_LOCK(hi2c);
 8009e56:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8009e5a:	2c01      	cmp	r4, #1
 8009e5c:	d066      	beq.n	8009f2c <HAL_I2C_Master_Transmit+0xe4>
 8009e5e:	4698      	mov	r8, r3
 8009e60:	2301      	movs	r3, #1
 8009e62:	4691      	mov	r9, r2
 8009e64:	460f      	mov	r7, r1
 8009e66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009e6a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8009e6c:	f7ff fa56 	bl	800931c <HAL_GetTick>
 8009e70:	4605      	mov	r5, r0
 8009e72:	e004      	b.n	8009e7e <HAL_I2C_Master_Transmit+0x36>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e74:	f7ff fa52 	bl	800931c <HAL_GetTick>
 8009e78:	1b40      	subs	r0, r0, r5
 8009e7a:	2819      	cmp	r0, #25
 8009e7c:	d864      	bhi.n	8009f48 <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	6998      	ldr	r0, [r3, #24]
 8009e82:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8009e86:	d1f5      	bne.n	8009e74 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009e88:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e8a:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8009e8c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8009e90:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e94:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009e98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e9c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009e9e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ea4:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ea6:	2aff      	cmp	r2, #255	; 0xff
 8009ea8:	d972      	bls.n	8009f90 <HAL_I2C_Master_Transmit+0x148>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009eaa:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eac:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009eae:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009fdc <HAL_I2C_Master_Transmit+0x194>
 8009eb2:	4947      	ldr	r1, [pc, #284]	; (8009fd0 <HAL_I2C_Master_Transmit+0x188>)
 8009eb4:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eb8:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009eba:	4339      	orrs	r1, r7
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]
 8009ec0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8009fe0 <HAL_I2C_Master_Transmit+0x198>
 8009ec4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8009fe4 <HAL_I2C_Master_Transmit+0x19c>
 8009ec8:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8009ecc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d041      	beq.n	8009f5e <HAL_I2C_Master_Transmit+0x116>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009eda:	f7ff fe9b 	bl	8009c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d140      	bne.n	8009f64 <HAL_I2C_Master_Transmit+0x11c>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009ee2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009ee4:	6821      	ldr	r1, [r4, #0]
 8009ee6:	1c50      	adds	r0, r2, #1
      hi2c->XferSize--;
 8009ee8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009eea:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009eec:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009eee:	7812      	ldrb	r2, [r2, #0]
      hi2c->XferSize--;
 8009ef0:	b29b      	uxth	r3, r3
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009ef2:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8009ef4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009ef6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009ef8:	3a01      	subs	r2, #1
 8009efa:	b292      	uxth	r2, r2
 8009efc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e4      	bne.n	8009ecc <HAL_I2C_Master_Transmit+0x84>
 8009f02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0e0      	beq.n	8009ecc <HAL_I2C_Master_Transmit+0x84>
 8009f0a:	1c70      	adds	r0, r6, #1
 8009f0c:	d111      	bne.n	8009f32 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f0e:	698b      	ldr	r3, [r1, #24]
 8009f10:	061a      	lsls	r2, r3, #24
 8009f12:	d5fc      	bpl.n	8009f0e <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009f16:	2bff      	cmp	r3, #255	; 0xff
 8009f18:	d92b      	bls.n	8009f72 <HAL_I2C_Master_Transmit+0x12a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f1a:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f1c:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f1e:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f22:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f24:	ea43 0308 	orr.w	r3, r3, r8
 8009f28:	604b      	str	r3, [r1, #4]
 8009f2a:	e7cf      	b.n	8009ecc <HAL_I2C_Master_Transmit+0x84>
    return HAL_BUSY;
 8009f2c:	2002      	movs	r0, #2
}
 8009f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f32:	698b      	ldr	r3, [r1, #24]
 8009f34:	061b      	lsls	r3, r3, #24
 8009f36:	d4ed      	bmi.n	8009f14 <HAL_I2C_Master_Transmit+0xcc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f38:	b136      	cbz	r6, 8009f48 <HAL_I2C_Master_Transmit+0x100>
 8009f3a:	f7ff f9ef 	bl	800931c <HAL_GetTick>
 8009f3e:	1b40      	subs	r0, r0, r5
 8009f40:	4286      	cmp	r6, r0
 8009f42:	d301      	bcc.n	8009f48 <HAL_I2C_Master_Transmit+0x100>
 8009f44:	6821      	ldr	r1, [r4, #0]
 8009f46:	e7e0      	b.n	8009f0a <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f48:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8009f4a:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 8009f4c:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8009f4e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8009f52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8009f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f5e:	f7ff febb 	bl	8009cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f62:	b330      	cbz	r0, 8009fb2 <HAL_I2C_Master_Transmit+0x16a>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009f66:	2b04      	cmp	r3, #4
          return HAL_ERROR;
 8009f68:	bf0c      	ite	eq
 8009f6a:	2001      	moveq	r0, #1
          return HAL_TIMEOUT;
 8009f6c:	2003      	movne	r0, #3
}
 8009f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8009f72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f74:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8009f78:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8009f7a:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f7c:	ea00 0009 	and.w	r0, r0, r9
 8009f80:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 8009f84:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8009f8a:	4303      	orrs	r3, r0
 8009f8c:	604b      	str	r3, [r1, #4]
 8009f8e:	e79d      	b.n	8009ecc <HAL_I2C_Master_Transmit+0x84>
      hi2c->XferSize = hi2c->XferCount;
 8009f90:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f92:	4a10      	ldr	r2, [pc, #64]	; (8009fd4 <HAL_I2C_Master_Transmit+0x18c>)
      hi2c->XferSize = hi2c->XferCount;
 8009f94:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f96:	6858      	ldr	r0, [r3, #4]
 8009f98:	433a      	orrs	r2, r7
 8009f9a:	f8df e040 	ldr.w	lr, [pc, #64]	; 8009fdc <HAL_I2C_Master_Transmit+0x194>
 8009f9e:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8009fa2:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009fa4:	ea00 010e 	and.w	r1, r0, lr
 8009fa8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8009fac:	430a      	orrs	r2, r1
 8009fae:	605a      	str	r2, [r3, #4]
 8009fb0:	e786      	b.n	8009ec0 <HAL_I2C_Master_Transmit+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009fb6:	4d08      	ldr	r5, [pc, #32]	; (8009fd8 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fb8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	402a      	ands	r2, r5
 8009fbe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009fc0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009fc4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fc8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009fcc:	e7af      	b.n	8009f2e <HAL_I2C_Master_Transmit+0xe6>
 8009fce:	bf00      	nop
 8009fd0:	81ff2000 	.word	0x81ff2000
 8009fd4:	82002000 	.word	0x82002000
 8009fd8:	fe00e800 	.word	0xfe00e800
 8009fdc:	fc009800 	.word	0xfc009800
 8009fe0:	01ff0000 	.word	0x01ff0000
 8009fe4:	fc009c00 	.word	0xfc009c00

08009fe8 <HAL_I2C_Master_Receive>:
{
 8009fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fec:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8009ff0:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ff2:	2c20      	cmp	r4, #32
 8009ff4:	d16b      	bne.n	800a0ce <HAL_I2C_Master_Receive+0xe6>
    __HAL_LOCK(hi2c);
 8009ff6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8009ffa:	2c01      	cmp	r4, #1
 8009ffc:	d067      	beq.n	800a0ce <HAL_I2C_Master_Receive+0xe6>
 8009ffe:	4698      	mov	r8, r3
 800a000:	2301      	movs	r3, #1
 800a002:	4691      	mov	r9, r2
 800a004:	460f      	mov	r7, r1
 800a006:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a00a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800a00c:	f7ff f986 	bl	800931c <HAL_GetTick>
 800a010:	4605      	mov	r5, r0
 800a012:	e004      	b.n	800a01e <HAL_I2C_Master_Receive+0x36>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a014:	f7ff f982 	bl	800931c <HAL_GetTick>
 800a018:	1b40      	subs	r0, r0, r5
 800a01a:	2819      	cmp	r0, #25
 800a01c:	d863      	bhi.n	800a0e6 <HAL_I2C_Master_Receive+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	6998      	ldr	r0, [r3, #24]
 800a022:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800a026:	d1f5      	bne.n	800a014 <HAL_I2C_Master_Receive+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a028:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a02a:	2122      	movs	r1, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800a02c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800a030:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a034:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a038:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a03c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a03e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a042:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a044:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a046:	2aff      	cmp	r2, #255	; 0xff
 800a048:	d971      	bls.n	800a12e <HAL_I2C_Master_Receive+0x146>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a04a:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a04c:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a04e:	f8df c128 	ldr.w	ip, [pc, #296]	; 800a178 <HAL_I2C_Master_Receive+0x190>
 800a052:	4946      	ldr	r1, [pc, #280]	; (800a16c <HAL_I2C_Master_Receive+0x184>)
 800a054:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a058:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a05a:	4339      	orrs	r1, r7
 800a05c:	430a      	orrs	r2, r1
 800a05e:	605a      	str	r2, [r3, #4]
 800a060:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800a17c <HAL_I2C_Master_Receive+0x194>
 800a064:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800a180 <HAL_I2C_Master_Receive+0x198>
 800a068:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 800a06c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a06e:	462a      	mov	r2, r5
 800a070:	4631      	mov	r1, r6
 800a072:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d040      	beq.n	800a0fc <HAL_I2C_Master_Receive+0x114>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a07a:	f7ff fd4b 	bl	8009b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d13f      	bne.n	800a102 <HAL_I2C_Master_Receive+0x11a>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800a082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a084:	6822      	ldr	r2, [r4, #0]
 800a086:	1c59      	adds	r1, r3, #1
 800a088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a08a:	6261      	str	r1, [r4, #36]	; 0x24
 800a08c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800a08e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a090:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a092:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800a094:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800a096:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800a098:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800a09a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a09c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e4      	bne.n	800a06c <HAL_I2C_Master_Receive+0x84>
 800a0a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0e0      	beq.n	800a06c <HAL_I2C_Master_Receive+0x84>
 800a0aa:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	d111      	bne.n	800a0d4 <HAL_I2C_Master_Receive+0xec>
 800a0b0:	6993      	ldr	r3, [r2, #24]
 800a0b2:	0619      	lsls	r1, r3, #24
 800a0b4:	d5fc      	bpl.n	800a0b0 <HAL_I2C_Master_Receive+0xc8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a0b8:	2bff      	cmp	r3, #255	; 0xff
 800a0ba:	d929      	bls.n	800a110 <HAL_I2C_Master_Receive+0x128>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a0bc:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0be:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a0c0:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0c4:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a0c6:	ea43 0308 	orr.w	r3, r3, r8
 800a0ca:	6053      	str	r3, [r2, #4]
 800a0cc:	e7ce      	b.n	800a06c <HAL_I2C_Master_Receive+0x84>
    return HAL_BUSY;
 800a0ce:	2002      	movs	r0, #2
}
 800a0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0d4:	6993      	ldr	r3, [r2, #24]
 800a0d6:	061b      	lsls	r3, r3, #24
 800a0d8:	d4ed      	bmi.n	800a0b6 <HAL_I2C_Master_Receive+0xce>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a0da:	b126      	cbz	r6, 800a0e6 <HAL_I2C_Master_Receive+0xfe>
 800a0dc:	f7ff f91e 	bl	800931c <HAL_GetTick>
 800a0e0:	1b40      	subs	r0, r0, r5
 800a0e2:	4286      	cmp	r6, r0
 800a0e4:	d2e1      	bcs.n	800a0aa <HAL_I2C_Master_Receive+0xc2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800a0e8:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 800a0ea:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 800a0ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800a0f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800a0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0fc:	f7ff fdec 	bl	8009cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a100:	b330      	cbz	r0, 800a150 <HAL_I2C_Master_Receive+0x168>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a102:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a104:	2b04      	cmp	r3, #4
          return HAL_ERROR;
 800a106:	bf0c      	ite	eq
 800a108:	2001      	moveq	r0, #1
          return HAL_TIMEOUT;
 800a10a:	2003      	movne	r0, #3
}
 800a10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 800a110:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a112:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 800a116:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800a118:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a11a:	ea00 0009 	and.w	r0, r0, r9
 800a11e:	fa5f fc81 	uxtb.w	ip, r1
          hi2c->XferSize = hi2c->XferCount;
 800a122:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a124:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800a128:	4303      	orrs	r3, r0
 800a12a:	6053      	str	r3, [r2, #4]
 800a12c:	e79e      	b.n	800a06c <HAL_I2C_Master_Receive+0x84>
      hi2c->XferSize = hi2c->XferCount;
 800a12e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a130:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <HAL_I2C_Master_Receive+0x188>)
      hi2c->XferSize = hi2c->XferCount;
 800a132:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a134:	6858      	ldr	r0, [r3, #4]
 800a136:	433a      	orrs	r2, r7
 800a138:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800a178 <HAL_I2C_Master_Receive+0x190>
 800a13c:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 800a140:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a142:	ea00 010e 	and.w	r1, r0, lr
 800a146:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800a14a:	430a      	orrs	r2, r1
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	e787      	b.n	800a060 <HAL_I2C_Master_Receive+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800a154:	4d07      	ldr	r5, [pc, #28]	; (800a174 <HAL_I2C_Master_Receive+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a156:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	402a      	ands	r2, r5
 800a15c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a15e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a162:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a166:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a16a:	e7b1      	b.n	800a0d0 <HAL_I2C_Master_Receive+0xe8>
 800a16c:	81ff2400 	.word	0x81ff2400
 800a170:	82002400 	.word	0x82002400
 800a174:	fe00e800 	.word	0xfe00e800
 800a178:	fc009800 	.word	0xfc009800
 800a17c:	01ff0000 	.word	0x01ff0000
 800a180:	fc009c00 	.word	0xfc009c00

0800a184 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a184:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b20      	cmp	r3, #32
{
 800a18c:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a18e:	d11f      	bne.n	800a1d0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a190:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800a194:	2a01      	cmp	r2, #1
 800a196:	d01b      	beq.n	800a1d0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a198:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a19a:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a19c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a19e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800a1a2:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 800a1a4:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 800a1a6:	f025 0501 	bic.w	r5, r5, #1
 800a1aa:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a1ac:	6815      	ldr	r5, [r2, #0]
 800a1ae:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800a1b2:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800a1b4:	6815      	ldr	r5, [r2, #0]
 800a1b6:	4329      	orrs	r1, r5
 800a1b8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a1ba:	6811      	ldr	r1, [r2, #0]
 800a1bc:	f041 0101 	orr.w	r1, r1, #1
 800a1c0:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800a1c2:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a1c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	bc70      	pop	{r4, r5, r6}
 800a1ce:	4770      	bx	lr
    return HAL_BUSY;
 800a1d0:	2402      	movs	r4, #2
}
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	bc70      	pop	{r4, r5, r6}
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d071      	beq.n	800a2c0 <HAL_LTDC_Init+0xe8>
{
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800a1de:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d064      	beq.n	800a2b6 <HAL_LTDC_Init+0xde>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a1ec:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a1ee:	2502      	movs	r5, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a1f0:	68e6      	ldr	r6, [r4, #12]

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800a1f2:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a1f4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a1f8:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800a1fa:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a1fc:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a200:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a204:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a206:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a208:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a20a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a20e:	4e2d      	ldr	r6, [pc, #180]	; (800a2c4 <HAL_LTDC_Init+0xec>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a210:	6198      	str	r0, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a212:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a214:	6998      	ldr	r0, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a216:	2501      	movs	r5, #1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a218:	4302      	orrs	r2, r0
 800a21a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a21c:	689a      	ldr	r2, [r3, #8]
 800a21e:	4032      	ands	r2, r6
 800a220:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a222:	6898      	ldr	r0, [r3, #8]
 800a224:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800a228:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a22a:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a22e:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a232:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a234:	68d8      	ldr	r0, [r3, #12]
 800a236:	4030      	ands	r0, r6
 800a238:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800a240:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a242:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a246:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a24a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	4032      	ands	r2, r6
 800a250:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a252:	6918      	ldr	r0, [r3, #16]
 800a254:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16);
 800a258:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a25a:	ea40 000c 	orr.w	r0, r0, ip
 800a25e:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a260:	6958      	ldr	r0, [r3, #20]
 800a262:	4006      	ands	r6, r0
 800a264:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a266:	695a      	ldr	r2, [r3, #20]
 800a268:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a26a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a26e:	4302      	orrs	r2, r0
 800a270:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a272:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800a274:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a278:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800a27c:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a280:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a282:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a284:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800a288:	4302      	orrs	r2, r0

  return HAL_OK;
 800a28a:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a28c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800a290:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a294:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800a296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a298:	f042 0204 	orr.w	r2, r2, #4
 800a29c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800a29e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a0:	f042 0202 	orr.w	r2, r2, #2
 800a2a4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a2a6:	699a      	ldr	r2, [r3, #24]
 800a2a8:	432a      	orrs	r2, r5
 800a2aa:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800a2ac:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a2b0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800a2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800a2b6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a2ba:	f007 fd0d 	bl	8011cd8 <HAL_LTDC_MspInit>
 800a2be:	e795      	b.n	800a1ec <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800a2c0:	2001      	movs	r0, #1
}
 800a2c2:	4770      	bx	lr
 800a2c4:	f000f800 	.word	0xf000f800

0800a2c8 <HAL_LTDC_ConfigLayer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800a2c8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	f000 80b9 	beq.w	800a444 <HAL_LTDC_ConfigLayer+0x17c>
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a2d2:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a2d6:	2302      	movs	r3, #2
{   
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a2dc:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a2e0:	6806      	ldr	r6, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a2e2:	f04f 0834 	mov.w	r8, #52	; 0x34
 800a2e6:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a2e8:	eb06 040c 	add.w	r4, r6, ip
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a2ec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a2f0:	fb08 0202 	mla	r2, r8, r2, r0
 800a2f4:	4689      	mov	r9, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a2f6:	68f1      	ldr	r1, [r6, #12]
 800a2f8:	4607      	mov	r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a2fa:	6863      	ldr	r3, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a2fc:	f102 0838 	add.w	r8, r2, #56	; 0x38
  __HAL_LOCK(hltdc);
 800a300:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a304:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a308:	f403 4e70 	and.w	lr, r3, #61440	; 0xf000
  __HAL_LOCK(hltdc);
 800a30c:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a310:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a314:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800a318:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a31c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800a320:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a324:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800a328:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a32c:	4848      	ldr	r0, [pc, #288]	; (800a450 <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a32e:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a332:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a334:	f8c4 e004 	str.w	lr, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a338:	f8d5 e000 	ldr.w	lr, [r5]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a33c:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a33e:	68f1      	ldr	r1, [r6, #12]
 800a340:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a344:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a348:	f3c1 410b 	ubfx	r1, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a34c:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a34e:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a350:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a354:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a356:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800a35a:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a35e:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a360:	68f1      	ldr	r1, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a362:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a366:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a36a:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a36e:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a370:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a374:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a378:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800a37c:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800a380:	445a      	add	r2, fp
 800a382:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a386:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	f022 0207 	bic.w	r2, r2, #7
 800a38e:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a390:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a394:	69a2      	ldr	r2, [r4, #24]
 800a396:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800a398:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800a39c:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a3a0:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a3a2:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800a3a6:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800a3aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a3ae:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a3b0:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a3b4:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a3b6:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a3ba:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a3bc:	6962      	ldr	r2, [r4, #20]
 800a3be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a3c2:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a3c4:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a3c8:	69e2      	ldr	r2, [r4, #28]
 800a3ca:	4010      	ands	r0, r2
 800a3cc:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a3ce:	61e1      	str	r1, [r4, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a3d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a3d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a3d8:	62a2      	str	r2, [r4, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a3da:	f1b8 0f00 	cmp.w	r8, #0
 800a3de:	d00b      	beq.n	800a3f8 <HAL_LTDC_ConfigLayer+0x130>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a3e0:	f1b8 0f01 	cmp.w	r8, #1
 800a3e4:	d030      	beq.n	800a448 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a3e6:	f1a8 0202 	sub.w	r2, r8, #2
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a3ea:	2a02      	cmp	r2, #2
 800a3ec:	d902      	bls.n	800a3f4 <HAL_LTDC_ConfigLayer+0x12c>
 800a3ee:	f1b8 0f07 	cmp.w	r8, #7
 800a3f2:	d12b      	bne.n	800a44c <HAL_LTDC_ConfigLayer+0x184>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	e000      	b.n	800a3fa <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4;
 800a3f8:	2204      	movs	r2, #4
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a3fa:	eba3 030e 	sub.w	r3, r3, lr

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a3fe:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a402:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a406:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a408:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a40c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a40e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a410:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a418:	4a0e      	ldr	r2, [pc, #56]	; (800a454 <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a41a:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 800a41c:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a41e:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a420:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a422:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a424:	401a      	ands	r2, r3
 800a426:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a428:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a42c:	f856 300c 	ldr.w	r3, [r6, ip]
 800a430:	432b      	orrs	r3, r5
 800a432:	f846 300c 	str.w	r3, [r6, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a436:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a438:	f887 50a1 	strb.w	r5, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800a43c:	f887 10a0 	strb.w	r1, [r7, #160]	; 0xa0
}
 800a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 800a444:	2002      	movs	r0, #2
}
 800a446:	4770      	bx	lr
    tmp = 3;
 800a448:	2203      	movs	r2, #3
 800a44a:	e7d6      	b.n	800a3fa <HAL_LTDC_ConfigLayer+0x132>
    tmp = 1;
 800a44c:	2201      	movs	r2, #1
 800a44e:	e7d4      	b.n	800a3fa <HAL_LTDC_ConfigLayer+0x132>
 800a450:	fffff8f8 	.word	0xfffff8f8
 800a454:	fffff800 	.word	0xfffff800

0800a458 <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 800a458:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a45c:	2b01      	cmp	r3, #1
{
 800a45e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a462:	b083      	sub	sp, #12
  __HAL_LOCK(hltdc);
 800a464:	f000 80b4 	beq.w	800a5d0 <HAL_LTDC_SetAlpha+0x178>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a468:	01d7      	lsls	r7, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a46a:	6806      	ldr	r6, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a46c:	2302      	movs	r3, #2
  pLayerCfg->Alpha = Alpha;
 800a46e:	2434      	movs	r4, #52	; 0x34
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a470:	3784      	adds	r7, #132	; 0x84
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a472:	f04f 0800 	mov.w	r8, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a476:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a47a:	19f3      	adds	r3, r6, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a47c:	68f5      	ldr	r5, [r6, #12]
  pLayerCfg->Alpha = Alpha;
 800a47e:	fb04 0402 	mla	r4, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a482:	f8d3 9004 	ldr.w	r9, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a486:	f3c5 4c0b 	ubfx	ip, r5, #16, #12
 800a48a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a48c:	f409 4970 	and.w	r9, r9, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a490:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  pLayerCfg->Alpha = Alpha;
 800a494:	64e1      	str	r1, [r4, #76]	; 0x4c
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a496:	eb0c 0a05 	add.w	sl, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a49a:	f8c3 9004 	str.w	r9, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a49e:	f10e 0b01 	add.w	fp, lr, #1
 800a4a2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a4a6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a4aa:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a4ae:	9501      	str	r5, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a4b0:	6c25      	ldr	r5, [r4, #64]	; 0x40
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a4b2:	44dc      	add	ip, fp
 800a4b4:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a4b8:	f105 0a01 	add.w	sl, r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a4bc:	6d25      	ldr	r5, [r4, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a4be:	f8c3 c004 	str.w	ip, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a4c2:	f8d6 b00c 	ldr.w	fp, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a4c6:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a4ca:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a4ce:	f40c 4c70 	and.w	ip, ip, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a4d2:	44d9      	add	r9, fp
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a4d4:	f8c3 c008 	str.w	ip, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a4d8:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800a4dc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800a4e0:	44e2      	add	sl, ip
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a4e2:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a4e6:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800a4ea:	f894 a069 	ldrb.w	sl, [r4, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a4ee:	ea4c 6c05 	orr.w	ip, ip, r5, lsl #24
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a4f2:	f8c3 9008 	str.w	r9, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a4f6:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800a4fa:	f894 906a 	ldrb.w	r9, [r4, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a4fe:	f8d3 a010 	ldr.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a502:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a506:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a50a:	f02a 0a07 	bic.w	sl, sl, #7
 800a50e:	f8c3 a010 	str.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a512:	f8c3 9010 	str.w	r9, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a516:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800a51a:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a51e:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a522:	f8d3 c014 	ldr.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a526:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a5ec <HAL_LTDC_SetAlpha+0x194>
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a52a:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 800a52e:	f8c3 c014 	str.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a532:	6159      	str	r1, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a534:	69d9      	ldr	r1, [r3, #28]
 800a536:	ea01 0a0a 	and.w	sl, r1, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a53a:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	; 0x54
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a53e:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a540:	ea41 010c 	orr.w	r1, r1, ip
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a544:	f8c3 a01c 	str.w	sl, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a548:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a54a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a54c:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a550:	629c      	str	r4, [r3, #40]	; 0x28
  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a552:	f1b9 0f00 	cmp.w	r9, #0
 800a556:	d00c      	beq.n	800a572 <HAL_LTDC_SetAlpha+0x11a>
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a558:	f1b9 0f01 	cmp.w	r9, #1
 800a55c:	d03d      	beq.n	800a5da <HAL_LTDC_SetAlpha+0x182>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a55e:	f1a9 0102 	sub.w	r1, r9, #2
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a562:	2902      	cmp	r1, #2
 800a564:	d902      	bls.n	800a56c <HAL_LTDC_SetAlpha+0x114>
 800a566:	f1b9 0f07 	cmp.w	r9, #7
 800a56a:	d139      	bne.n	800a5e0 <HAL_LTDC_SetAlpha+0x188>
    tmp = 2;
 800a56c:	f04f 0c02 	mov.w	ip, #2
 800a570:	e001      	b.n	800a576 <HAL_LTDC_SetAlpha+0x11e>
    tmp = 4;
 800a572:	f04f 0c04 	mov.w	ip, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a576:	9901      	ldr	r1, [sp, #4]
 800a578:	2434      	movs	r4, #52	; 0x34
 800a57a:	eba1 050e 	sub.w	r5, r1, lr
 800a57e:	fb04 0202 	mla	r2, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a584:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800a586:	fb0c f505 	mul.w	r5, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a58a:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a58e:	f8d2 e064 	ldr.w	lr, [r2, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a592:	fb04 f40c 	mul.w	r4, r4, ip
 800a596:	3503      	adds	r5, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a598:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a59a:	f04f 0c01 	mov.w	ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a59e:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a5a2:	4911      	ldr	r1, [pc, #68]	; (800a5e8 <HAL_LTDC_SetAlpha+0x190>)
  __HAL_UNLOCK(hltdc);
 800a5a4:	2200      	movs	r2, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a5a6:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a5a8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  return HAL_OK;
 800a5aa:	4614      	mov	r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a5ac:	4029      	ands	r1, r5
 800a5ae:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a5b0:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a5b4:	59f3      	ldr	r3, [r6, r7]
 800a5b6:	ea43 030c 	orr.w	r3, r3, ip
 800a5ba:	51f3      	str	r3, [r6, r7]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a5bc:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800a5c0:	f880 c0a1 	strb.w	ip, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800a5c4:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	b003      	add	sp, #12
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 800a5d0:	2402      	movs	r4, #2
}
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	b003      	add	sp, #12
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3;
 800a5da:	f04f 0c03 	mov.w	ip, #3
 800a5de:	e7ca      	b.n	800a576 <HAL_LTDC_SetAlpha+0x11e>
    tmp = 1;
 800a5e0:	f04f 0c01 	mov.w	ip, #1
 800a5e4:	e7c7      	b.n	800a576 <HAL_LTDC_SetAlpha+0x11e>
 800a5e6:	bf00      	nop
 800a5e8:	fffff800 	.word	0xfffff800
 800a5ec:	fffff8f8 	.word	0xfffff8f8

0800a5f0 <HAL_LTDC_GetState>:
  return hltdc->State;
 800a5f0:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop

0800a5f8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800a5f8:	4a1b      	ldr	r2, [pc, #108]	; (800a668 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a5fa:	4b1c      	ldr	r3, [pc, #112]	; (800a66c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a5fe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800a602:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800a604:	6411      	str	r1, [r2, #64]	; 0x40
{
 800a606:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800a608:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a60a:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800a60c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a610:	9201      	str	r2, [sp, #4]
 800a612:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a61a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a61c:	f7fe fe7e 	bl	800931c <HAL_GetTick>
 800a620:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a622:	e005      	b.n	800a630 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a624:	f7fe fe7a 	bl	800931c <HAL_GetTick>
 800a628:	1b40      	subs	r0, r0, r5
 800a62a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a62e:	d817      	bhi.n	800a660 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	03da      	lsls	r2, r3, #15
 800a634:	d5f6      	bpl.n	800a624 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a636:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a638:	4d0c      	ldr	r5, [pc, #48]	; (800a66c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a63e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a640:	f7fe fe6c 	bl	800931c <HAL_GetTick>
 800a644:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a646:	e005      	b.n	800a654 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a648:	f7fe fe68 	bl	800931c <HAL_GetTick>
 800a64c:	1b00      	subs	r0, r0, r4
 800a64e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a652:	d805      	bhi.n	800a660 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a654:	686b      	ldr	r3, [r5, #4]
 800a656:	039b      	lsls	r3, r3, #14
 800a658:	d5f6      	bpl.n	800a648 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800a65a:	2000      	movs	r0, #0
}
 800a65c:	b003      	add	sp, #12
 800a65e:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800a660:	2003      	movs	r0, #3
}
 800a662:	b003      	add	sp, #12
 800a664:	bd30      	pop	{r4, r5, pc}
 800a666:	bf00      	nop
 800a668:	40023800 	.word	0x40023800
 800a66c:	40007000 	.word	0x40007000

0800a670 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a670:	2800      	cmp	r0, #0
 800a672:	f000 8134 	beq.w	800a8de <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a676:	6803      	ldr	r3, [r0, #0]
{
 800a678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a67c:	07dd      	lsls	r5, r3, #31
{
 800a67e:	b082      	sub	sp, #8
 800a680:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a682:	d535      	bpl.n	800a6f0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a684:	49ab      	ldr	r1, [pc, #684]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a686:	688a      	ldr	r2, [r1, #8]
 800a688:	f002 020c 	and.w	r2, r2, #12
 800a68c:	2a04      	cmp	r2, #4
 800a68e:	f000 80fe 	beq.w	800a88e <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a692:	688a      	ldr	r2, [r1, #8]
 800a694:	f002 020c 	and.w	r2, r2, #12
 800a698:	2a08      	cmp	r2, #8
 800a69a:	f000 80f4 	beq.w	800a886 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a69e:	6863      	ldr	r3, [r4, #4]
 800a6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a4:	d010      	beq.n	800a6c8 <HAL_RCC_OscConfig+0x58>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 811b 	beq.w	800a8e2 <HAL_RCC_OscConfig+0x272>
 800a6ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6b0:	4ba0      	ldr	r3, [pc, #640]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	f000 8162 	beq.w	800a97c <HAL_RCC_OscConfig+0x30c>
 800a6b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	e004      	b.n	800a6d2 <HAL_RCC_OscConfig+0x62>
 800a6c8:	4a9a      	ldr	r2, [pc, #616]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a6ca:	6813      	ldr	r3, [r2, #0]
 800a6cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d2:	f7fe fe23 	bl	800931c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6d6:	4d97      	ldr	r5, [pc, #604]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 800a6d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6da:	e005      	b.n	800a6e8 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a6dc:	f7fe fe1e 	bl	800931c <HAL_GetTick>
 800a6e0:	1b80      	subs	r0, r0, r6
 800a6e2:	2864      	cmp	r0, #100	; 0x64
 800a6e4:	f200 80ee 	bhi.w	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	039a      	lsls	r2, r3, #14
 800a6ec:	d5f6      	bpl.n	800a6dc <HAL_RCC_OscConfig+0x6c>
 800a6ee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6f0:	079f      	lsls	r7, r3, #30
 800a6f2:	d442      	bmi.n	800a77a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6f4:	071a      	lsls	r2, r3, #28
 800a6f6:	d517      	bpl.n	800a728 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6f8:	6963      	ldr	r3, [r4, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80b0 	beq.w	800a860 <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a700:	4b8c      	ldr	r3, [pc, #560]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a702:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a704:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800a706:	f042 0201 	orr.w	r2, r2, #1
 800a70a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a70c:	f7fe fe06 	bl	800931c <HAL_GetTick>
 800a710:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a712:	e005      	b.n	800a720 <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a714:	f7fe fe02 	bl	800931c <HAL_GetTick>
 800a718:	1b80      	subs	r0, r0, r6
 800a71a:	2802      	cmp	r0, #2
 800a71c:	f200 80d2 	bhi.w	800a8c4 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a720:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a722:	079b      	lsls	r3, r3, #30
 800a724:	d5f6      	bpl.n	800a714 <HAL_RCC_OscConfig+0xa4>
 800a726:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a728:	075d      	lsls	r5, r3, #29
 800a72a:	d56b      	bpl.n	800a804 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a72c:	4b81      	ldr	r3, [pc, #516]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a72e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a730:	00d0      	lsls	r0, r2, #3
 800a732:	f100 80ed 	bmi.w	800a910 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800a738:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a73a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a73e:	641a      	str	r2, [r3, #64]	; 0x40
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a74a:	4b7b      	ldr	r3, [pc, #492]	; (800a938 <HAL_RCC_OscConfig+0x2c8>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	05d1      	lsls	r1, r2, #23
 800a750:	f140 80a7 	bpl.w	800a8a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a754:	68a3      	ldr	r3, [r4, #8]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d039      	beq.n	800a7ce <HAL_RCC_OscConfig+0x15e>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 80da 	beq.w	800a914 <HAL_RCC_OscConfig+0x2a4>
 800a760:	2b05      	cmp	r3, #5
 800a762:	4b74      	ldr	r3, [pc, #464]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a766:	f000 8111 	beq.w	800a98c <HAL_RCC_OscConfig+0x31c>
 800a76a:	f022 0201 	bic.w	r2, r2, #1
 800a76e:	671a      	str	r2, [r3, #112]	; 0x70
 800a770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a772:	f022 0204 	bic.w	r2, r2, #4
 800a776:	671a      	str	r2, [r3, #112]	; 0x70
 800a778:	e02e      	b.n	800a7d8 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a77a:	4a6e      	ldr	r2, [pc, #440]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a77c:	6891      	ldr	r1, [r2, #8]
 800a77e:	f011 0f0c 	tst.w	r1, #12
 800a782:	d062      	beq.n	800a84a <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a784:	6891      	ldr	r1, [r2, #8]
 800a786:	f001 010c 	and.w	r1, r1, #12
 800a78a:	2908      	cmp	r1, #8
 800a78c:	d05a      	beq.n	800a844 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a78e:	68e3      	ldr	r3, [r4, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 80df 	beq.w	800a954 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 800a796:	4b67      	ldr	r3, [pc, #412]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a798:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a79a:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800a79c:	f042 0201 	orr.w	r2, r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a7a2:	f7fe fdbb 	bl	800931c <HAL_GetTick>
 800a7a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7a8:	e005      	b.n	800a7b6 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a7aa:	f7fe fdb7 	bl	800931c <HAL_GetTick>
 800a7ae:	1b80      	subs	r0, r0, r6
 800a7b0:	2802      	cmp	r0, #2
 800a7b2:	f200 8087 	bhi.w	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	0798      	lsls	r0, r3, #30
 800a7ba:	d5f6      	bpl.n	800a7aa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	6922      	ldr	r2, [r4, #16]
 800a7c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a7c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a7c8:	602b      	str	r3, [r5, #0]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	e792      	b.n	800a6f4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ce:	4a59      	ldr	r2, [pc, #356]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a7d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a7d2:	f043 0301 	orr.w	r3, r3, #1
 800a7d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d8:	f7fe fda0 	bl	800931c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7dc:	4e55      	ldr	r6, [pc, #340]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800a7de:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7e0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7e4:	e005      	b.n	800a7f2 <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7e6:	f7fe fd99 	bl	800931c <HAL_GetTick>
 800a7ea:	eba0 0008 	sub.w	r0, r0, r8
 800a7ee:	42b8      	cmp	r0, r7
 800a7f0:	d868      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7f2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a7f4:	079b      	lsls	r3, r3, #30
 800a7f6:	d5f6      	bpl.n	800a7e6 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7f8:	b125      	cbz	r5, 800a804 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7fa:	4a4e      	ldr	r2, [pc, #312]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a7fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a7fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a804:	69a3      	ldr	r3, [r4, #24]
 800a806:	b1cb      	cbz	r3, 800a83c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a808:	4a4a      	ldr	r2, [pc, #296]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a80a:	6891      	ldr	r1, [r2, #8]
 800a80c:	f001 010c 	and.w	r1, r1, #12
 800a810:	2908      	cmp	r1, #8
 800a812:	d021      	beq.n	800a858 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a814:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a816:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a818:	f000 80c0 	beq.w	800a99c <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a81c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a820:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 800a822:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a824:	f7fe fd7a 	bl	800931c <HAL_GetTick>
 800a828:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a82a:	e004      	b.n	800a836 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a82c:	f7fe fd76 	bl	800931c <HAL_GetTick>
 800a830:	1b40      	subs	r0, r0, r5
 800a832:	2802      	cmp	r0, #2
 800a834:	d846      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	019b      	lsls	r3, r3, #6
 800a83a:	d4f7      	bmi.n	800a82c <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800a83c:	2000      	movs	r0, #0
}
 800a83e:	b002      	add	sp, #8
 800a840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a844:	6852      	ldr	r2, [r2, #4]
 800a846:	0256      	lsls	r6, r2, #9
 800a848:	d4a1      	bmi.n	800a78e <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a84a:	4a3a      	ldr	r2, [pc, #232]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	0795      	lsls	r5, r2, #30
 800a850:	d53c      	bpl.n	800a8cc <HAL_RCC_OscConfig+0x25c>
 800a852:	68e2      	ldr	r2, [r4, #12]
 800a854:	2a01      	cmp	r2, #1
 800a856:	d039      	beq.n	800a8cc <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 800a858:	2001      	movs	r0, #1
}
 800a85a:	b002      	add	sp, #8
 800a85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800a860:	4b34      	ldr	r3, [pc, #208]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a862:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a864:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800a866:	f022 0201 	bic.w	r2, r2, #1
 800a86a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a86c:	f7fe fd56 	bl	800931c <HAL_GetTick>
 800a870:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a872:	e004      	b.n	800a87e <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a874:	f7fe fd52 	bl	800931c <HAL_GetTick>
 800a878:	1b80      	subs	r0, r0, r6
 800a87a:	2802      	cmp	r0, #2
 800a87c:	d822      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a87e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a880:	079f      	lsls	r7, r3, #30
 800a882:	d4f7      	bmi.n	800a874 <HAL_RCC_OscConfig+0x204>
 800a884:	e74f      	b.n	800a726 <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a886:	684a      	ldr	r2, [r1, #4]
 800a888:	0250      	lsls	r0, r2, #9
 800a88a:	f57f af08 	bpl.w	800a69e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a88e:	4a29      	ldr	r2, [pc, #164]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	0391      	lsls	r1, r2, #14
 800a894:	f57f af2c 	bpl.w	800a6f0 <HAL_RCC_OscConfig+0x80>
 800a898:	6862      	ldr	r2, [r4, #4]
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	f47f af28 	bne.w	800a6f0 <HAL_RCC_OscConfig+0x80>
 800a8a0:	e7da      	b.n	800a858 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 800a8a2:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8a4:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800a8a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a8ac:	f7fe fd36 	bl	800931c <HAL_GetTick>
 800a8b0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8b2:	6833      	ldr	r3, [r6, #0]
 800a8b4:	05da      	lsls	r2, r3, #23
 800a8b6:	f53f af4d 	bmi.w	800a754 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a8ba:	f7fe fd2f 	bl	800931c <HAL_GetTick>
 800a8be:	1bc0      	subs	r0, r0, r7
 800a8c0:	2864      	cmp	r0, #100	; 0x64
 800a8c2:	d9f6      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 800a8c4:	2003      	movs	r0, #3
}
 800a8c6:	b002      	add	sp, #8
 800a8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8cc:	4919      	ldr	r1, [pc, #100]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a8ce:	6920      	ldr	r0, [r4, #16]
 800a8d0:	680a      	ldr	r2, [r1, #0]
 800a8d2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800a8d6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800a8da:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8dc:	e70a      	b.n	800a6f4 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800a8de:	2001      	movs	r0, #1
}
 800a8e0:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8e6:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a8f6:	f7fe fd11 	bl	800931c <HAL_GetTick>
 800a8fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8fc:	e004      	b.n	800a908 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8fe:	f7fe fd0d 	bl	800931c <HAL_GetTick>
 800a902:	1b80      	subs	r0, r0, r6
 800a904:	2864      	cmp	r0, #100	; 0x64
 800a906:	d8dd      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	039b      	lsls	r3, r3, #14
 800a90c:	d4f7      	bmi.n	800a8fe <HAL_RCC_OscConfig+0x28e>
 800a90e:	e6ee      	b.n	800a6ee <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 800a910:	2500      	movs	r5, #0
 800a912:	e71a      	b.n	800a74a <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a916:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a91a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a91c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a91e:	f022 0201 	bic.w	r2, r2, #1
 800a922:	671a      	str	r2, [r3, #112]	; 0x70
 800a924:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a926:	f022 0204 	bic.w	r2, r2, #4
 800a92a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a92c:	f7fe fcf6 	bl	800931c <HAL_GetTick>
 800a930:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a932:	e008      	b.n	800a946 <HAL_RCC_OscConfig+0x2d6>
 800a934:	40023800 	.word	0x40023800
 800a938:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a93c:	f7fe fcee 	bl	800931c <HAL_GetTick>
 800a940:	1bc0      	subs	r0, r0, r7
 800a942:	4540      	cmp	r0, r8
 800a944:	d8be      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a946:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a948:	0798      	lsls	r0, r3, #30
 800a94a:	d4f7      	bmi.n	800a93c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 800a94c:	2d00      	cmp	r5, #0
 800a94e:	f43f af59 	beq.w	800a804 <HAL_RCC_OscConfig+0x194>
 800a952:	e752      	b.n	800a7fa <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 800a954:	4b2b      	ldr	r3, [pc, #172]	; (800aa04 <HAL_RCC_OscConfig+0x394>)
 800a956:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a958:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800a95a:	f022 0201 	bic.w	r2, r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a960:	f7fe fcdc 	bl	800931c <HAL_GetTick>
 800a964:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a966:	e004      	b.n	800a972 <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a968:	f7fe fcd8 	bl	800931c <HAL_GetTick>
 800a96c:	1b80      	subs	r0, r0, r6
 800a96e:	2802      	cmp	r0, #2
 800a970:	d8a8      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a972:	682b      	ldr	r3, [r5, #0]
 800a974:	0799      	lsls	r1, r3, #30
 800a976:	d4f7      	bmi.n	800a968 <HAL_RCC_OscConfig+0x2f8>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	e6bb      	b.n	800a6f4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a97c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	e6a2      	b.n	800a6d2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a98c:	f042 0204 	orr.w	r2, r2, #4
 800a990:	671a      	str	r2, [r3, #112]	; 0x70
 800a992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a994:	f042 0201 	orr.w	r2, r2, #1
 800a998:	671a      	str	r2, [r3, #112]	; 0x70
 800a99a:	e71d      	b.n	800a7d8 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 800a99c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9a0:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800a9a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a9a4:	f7fe fcba 	bl	800931c <HAL_GetTick>
 800a9a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9aa:	e004      	b.n	800a9b6 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9ac:	f7fe fcb6 	bl	800931c <HAL_GetTick>
 800a9b0:	1b80      	subs	r0, r0, r6
 800a9b2:	2802      	cmp	r0, #2
 800a9b4:	d886      	bhi.n	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	0199      	lsls	r1, r3, #6
 800a9ba:	d4f7      	bmi.n	800a9ac <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9bc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800a9c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800a9c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9cc:	4c0d      	ldr	r4, [pc, #52]	; (800aa04 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9ce:	0852      	lsrs	r2, r2, #1
 800a9d0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a9d4:	3a01      	subs	r2, #1
 800a9d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a9da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9de:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a9e8:	f7fe fc98 	bl	800931c <HAL_GetTick>
 800a9ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9ee:	e005      	b.n	800a9fc <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9f0:	f7fe fc94 	bl	800931c <HAL_GetTick>
 800a9f4:	1b40      	subs	r0, r0, r5
 800a9f6:	2802      	cmp	r0, #2
 800a9f8:	f63f af64 	bhi.w	800a8c4 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	019a      	lsls	r2, r3, #6
 800aa00:	d5f6      	bpl.n	800a9f0 <HAL_RCC_OscConfig+0x380>
 800aa02:	e71b      	b.n	800a83c <HAL_RCC_OscConfig+0x1cc>
 800aa04:	40023800 	.word	0x40023800

0800aa08 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa08:	b178      	cbz	r0, 800aa2a <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa0a:	4a5e      	ldr	r2, [pc, #376]	; (800ab84 <HAL_RCC_ClockConfig+0x17c>)
 800aa0c:	6813      	ldr	r3, [r2, #0]
 800aa0e:	f003 030f 	and.w	r3, r3, #15
 800aa12:	428b      	cmp	r3, r1
 800aa14:	d20b      	bcs.n	800aa2e <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa16:	6813      	ldr	r3, [r2, #0]
 800aa18:	f023 030f 	bic.w	r3, r3, #15
 800aa1c:	430b      	orrs	r3, r1
 800aa1e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa20:	6813      	ldr	r3, [r2, #0]
 800aa22:	f003 030f 	and.w	r3, r3, #15
 800aa26:	428b      	cmp	r3, r1
 800aa28:	d001      	beq.n	800aa2e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800aa2a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 800aa2c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa2e:	6803      	ldr	r3, [r0, #0]
{
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa34:	079d      	lsls	r5, r3, #30
 800aa36:	d514      	bpl.n	800aa62 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa38:	075c      	lsls	r4, r3, #29
 800aa3a:	d504      	bpl.n	800aa46 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa3c:	4c52      	ldr	r4, [pc, #328]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800aa3e:	68a2      	ldr	r2, [r4, #8]
 800aa40:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800aa44:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa46:	071a      	lsls	r2, r3, #28
 800aa48:	d504      	bpl.n	800aa54 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa4a:	4c4f      	ldr	r4, [pc, #316]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800aa4c:	68a2      	ldr	r2, [r4, #8]
 800aa4e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800aa52:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa54:	4c4c      	ldr	r4, [pc, #304]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800aa56:	6885      	ldr	r5, [r0, #8]
 800aa58:	68a2      	ldr	r2, [r4, #8]
 800aa5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800aa5e:	432a      	orrs	r2, r5
 800aa60:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa62:	07df      	lsls	r7, r3, #31
 800aa64:	4604      	mov	r4, r0
 800aa66:	460d      	mov	r5, r1
 800aa68:	d521      	bpl.n	800aaae <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa6a:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa6c:	4b46      	ldr	r3, [pc, #280]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa6e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa70:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa72:	d063      	beq.n	800ab3c <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa74:	2a02      	cmp	r2, #2
 800aa76:	d078      	beq.n	800ab6a <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa78:	0799      	lsls	r1, r3, #30
 800aa7a:	d528      	bpl.n	800aace <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa7c:	4942      	ldr	r1, [pc, #264]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa7e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa82:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa84:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800aa8e:	f7fe fc45 	bl	800931c <HAL_GetTick>
 800aa92:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa94:	e004      	b.n	800aaa0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa96:	f7fe fc41 	bl	800931c <HAL_GetTick>
 800aa9a:	1bc0      	subs	r0, r0, r7
 800aa9c:	4540      	cmp	r0, r8
 800aa9e:	d862      	bhi.n	800ab66 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaa0:	68b3      	ldr	r3, [r6, #8]
 800aaa2:	6862      	ldr	r2, [r4, #4]
 800aaa4:	f003 030c 	and.w	r3, r3, #12
 800aaa8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800aaac:	d1f3      	bne.n	800aa96 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aaae:	4a35      	ldr	r2, [pc, #212]	; (800ab84 <HAL_RCC_ClockConfig+0x17c>)
 800aab0:	6813      	ldr	r3, [r2, #0]
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	42ab      	cmp	r3, r5
 800aab8:	d90c      	bls.n	800aad4 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaba:	6813      	ldr	r3, [r2, #0]
 800aabc:	f023 030f 	bic.w	r3, r3, #15
 800aac0:	432b      	orrs	r3, r5
 800aac2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aac4:	6813      	ldr	r3, [r2, #0]
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	42ab      	cmp	r3, r5
 800aacc:	d002      	beq.n	800aad4 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 800aace:	2001      	movs	r0, #1
}
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	075a      	lsls	r2, r3, #29
 800aad8:	d506      	bpl.n	800aae8 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aada:	492b      	ldr	r1, [pc, #172]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800aadc:	68e0      	ldr	r0, [r4, #12]
 800aade:	688a      	ldr	r2, [r1, #8]
 800aae0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800aae4:	4302      	orrs	r2, r0
 800aae6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aae8:	071b      	lsls	r3, r3, #28
 800aaea:	d507      	bpl.n	800aafc <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aaec:	4a26      	ldr	r2, [pc, #152]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800aaee:	6921      	ldr	r1, [r4, #16]
 800aaf0:	6893      	ldr	r3, [r2, #8]
 800aaf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800aaf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aafa:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aafc:	4922      	ldr	r1, [pc, #136]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800aafe:	688b      	ldr	r3, [r1, #8]
 800ab00:	f003 030c 	and.w	r3, r3, #12
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d01c      	beq.n	800ab42 <HAL_RCC_ClockConfig+0x13a>
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d12a      	bne.n	800ab62 <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab0c:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ab0e:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab10:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab14:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ab16:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ab1a:	d129      	bne.n	800ab70 <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab1c:	481b      	ldr	r0, [pc, #108]	; (800ab8c <HAL_RCC_ClockConfig+0x184>)
 800ab1e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ab22:	fba1 0100 	umull	r0, r1, r1, r0
 800ab26:	f7fc fe29 	bl	800777c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800ab2a:	4b17      	ldr	r3, [pc, #92]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ab32:	3301      	adds	r3, #1
 800ab34:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800ab36:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab3a:	e003      	b.n	800ab44 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab3c:	039e      	lsls	r6, r3, #14
 800ab3e:	d49d      	bmi.n	800aa7c <HAL_RCC_ClockConfig+0x74>
 800ab40:	e7c5      	b.n	800aace <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 800ab42:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ab44:	4a10      	ldr	r2, [pc, #64]	; (800ab88 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 800ab46:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ab48:	4c12      	ldr	r4, [pc, #72]	; (800ab94 <HAL_RCC_ClockConfig+0x18c>)
 800ab4a:	6892      	ldr	r2, [r2, #8]
 800ab4c:	4912      	ldr	r1, [pc, #72]	; (800ab98 <HAL_RCC_ClockConfig+0x190>)
 800ab4e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ab52:	5ca2      	ldrb	r2, [r4, r2]
 800ab54:	40d3      	lsrs	r3, r2
 800ab56:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800ab58:	f7fe fb9a 	bl	8009290 <HAL_InitTick>
  return HAL_OK;
 800ab5c:	2000      	movs	r0, #0
}
 800ab5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 800ab62:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <HAL_RCC_ClockConfig+0x184>)
 800ab64:	e7ee      	b.n	800ab44 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 800ab66:	2003      	movs	r0, #3
 800ab68:	e7b2      	b.n	800aad0 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab6a:	0198      	lsls	r0, r3, #6
 800ab6c:	d486      	bmi.n	800aa7c <HAL_RCC_ClockConfig+0x74>
 800ab6e:	e7ae      	b.n	800aace <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab70:	4807      	ldr	r0, [pc, #28]	; (800ab90 <HAL_RCC_ClockConfig+0x188>)
 800ab72:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ab76:	2300      	movs	r3, #0
 800ab78:	fba1 0100 	umull	r0, r1, r1, r0
 800ab7c:	f7fc fdfe 	bl	800777c <__aeabi_uldivmod>
 800ab80:	e7d3      	b.n	800ab2a <HAL_RCC_ClockConfig+0x122>
 800ab82:	bf00      	nop
 800ab84:	40023c00 	.word	0x40023c00
 800ab88:	40023800 	.word	0x40023800
 800ab8c:	00f42400 	.word	0x00f42400
 800ab90:	017d7840 	.word	0x017d7840
 800ab94:	080324a8 	.word	0x080324a8
 800ab98:	20000018 	.word	0x20000018

0800ab9c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab9c:	4916      	ldr	r1, [pc, #88]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800ab9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aba0:	688b      	ldr	r3, [r1, #8]
 800aba2:	f003 030c 	and.w	r3, r3, #12
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d01b      	beq.n	800abe2 <HAL_RCC_GetSysClockFreq+0x46>
 800abaa:	2b08      	cmp	r3, #8
 800abac:	d117      	bne.n	800abde <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800abae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800abb0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800abb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abb6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800abb8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800abbc:	d113      	bne.n	800abe6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abbe:	480f      	ldr	r0, [pc, #60]	; (800abfc <HAL_RCC_GetSysClockFreq+0x60>)
 800abc0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800abc4:	fba1 0100 	umull	r0, r1, r1, r0
 800abc8:	f7fc fdd8 	bl	800777c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800abd4:	3301      	adds	r3, #1
 800abd6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800abd8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800abdc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800abde:	4807      	ldr	r0, [pc, #28]	; (800abfc <HAL_RCC_GetSysClockFreq+0x60>)
}
 800abe0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800abe2:	4807      	ldr	r0, [pc, #28]	; (800ac00 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800abe4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abe6:	4806      	ldr	r0, [pc, #24]	; (800ac00 <HAL_RCC_GetSysClockFreq+0x64>)
 800abe8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800abec:	2300      	movs	r3, #0
 800abee:	fba1 0100 	umull	r0, r1, r1, r0
 800abf2:	f7fc fdc3 	bl	800777c <__aeabi_uldivmod>
 800abf6:	e7e9      	b.n	800abcc <HAL_RCC_GetSysClockFreq+0x30>
 800abf8:	40023800 	.word	0x40023800
 800abfc:	00f42400 	.word	0x00f42400
 800ac00:	017d7840 	.word	0x017d7840

0800ac04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ac04:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <HAL_RCC_GetPCLK1Freq+0x14>)
 800ac06:	4a05      	ldr	r2, [pc, #20]	; (800ac1c <HAL_RCC_GetPCLK1Freq+0x18>)
 800ac08:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800ac0a:	4905      	ldr	r1, [pc, #20]	; (800ac20 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ac0c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800ac10:	6808      	ldr	r0, [r1, #0]
 800ac12:	5cd3      	ldrb	r3, [r2, r3]
}
 800ac14:	40d8      	lsrs	r0, r3
 800ac16:	4770      	bx	lr
 800ac18:	40023800 	.word	0x40023800
 800ac1c:	080324b8 	.word	0x080324b8
 800ac20:	20000018 	.word	0x20000018

0800ac24 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ac24:	4b04      	ldr	r3, [pc, #16]	; (800ac38 <HAL_RCC_GetPCLK2Freq+0x14>)
 800ac26:	4a05      	ldr	r2, [pc, #20]	; (800ac3c <HAL_RCC_GetPCLK2Freq+0x18>)
 800ac28:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800ac2a:	4905      	ldr	r1, [pc, #20]	; (800ac40 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ac2c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	5cd3      	ldrb	r3, [r2, r3]
}
 800ac34:	40d8      	lsrs	r0, r3
 800ac36:	4770      	bx	lr
 800ac38:	40023800 	.word	0x40023800
 800ac3c:	080324b8 	.word	0x080324b8
 800ac40:	20000018 	.word	0x20000018

0800ac44 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ac44:	6803      	ldr	r3, [r0, #0]
{
 800ac46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ac4a:	f013 0601 	ands.w	r6, r3, #1
{
 800ac4e:	b083      	sub	sp, #12
 800ac50:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ac52:	d00b      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac54:	4ab8      	ldr	r2, [pc, #736]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac56:	6891      	ldr	r1, [r2, #8]
 800ac58:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800ac5c:	6091      	str	r1, [r2, #8]
 800ac5e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800ac60:	6891      	ldr	r1, [r2, #8]
 800ac62:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ac64:	fab6 f686 	clz	r6, r6
 800ac68:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac6a:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ac6c:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800ac70:	d010      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac72:	49b1      	ldr	r1, [pc, #708]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac74:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ac76:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ac7a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac7e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ac82:	ea42 0205 	orr.w	r2, r2, r5
 800ac86:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ac8a:	f000 81b0 	beq.w	800afee <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ac8e:	fab5 f585 	clz	r5, r5
 800ac92:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ac94:	02d9      	lsls	r1, r3, #11
 800ac96:	d510      	bpl.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ac98:	48a7      	ldr	r0, [pc, #668]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac9c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aca0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aca4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800aca8:	ea42 0201 	orr.w	r2, r2, r1
 800acac:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800acb0:	f000 819b 	beq.w	800afea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800acb4:	2900      	cmp	r1, #0
 800acb6:	bf08      	it	eq
 800acb8:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800acba:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800acbe:	bf18      	it	ne
 800acc0:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800acc2:	069a      	lsls	r2, r3, #26
 800acc4:	f100 8149 	bmi.w	800af5a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800acc8:	06d9      	lsls	r1, r3, #27
 800acca:	d50c      	bpl.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800accc:	4a9a      	ldr	r2, [pc, #616]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acce:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800acd2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800acd6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800acda:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800acde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ace0:	4301      	orrs	r1, r0
 800ace2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ace6:	045a      	lsls	r2, r3, #17
 800ace8:	d508      	bpl.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800acea:	4993      	ldr	r1, [pc, #588]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800acee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acf2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800acf6:	4302      	orrs	r2, r0
 800acf8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800acfc:	041f      	lsls	r7, r3, #16
 800acfe:	d508      	bpl.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad00:	498d      	ldr	r1, [pc, #564]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad02:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800ad04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad08:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800ad0c:	4302      	orrs	r2, r0
 800ad0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad12:	03d8      	lsls	r0, r3, #15
 800ad14:	d508      	bpl.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad16:	4988      	ldr	r1, [pc, #544]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad18:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ad1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad1e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ad22:	4302      	orrs	r2, r0
 800ad24:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad28:	0399      	lsls	r1, r3, #14
 800ad2a:	d508      	bpl.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad2c:	4982      	ldr	r1, [pc, #520]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad2e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ad30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad34:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800ad38:	4302      	orrs	r2, r0
 800ad3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad3e:	065a      	lsls	r2, r3, #25
 800ad40:	d508      	bpl.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad42:	497d      	ldr	r1, [pc, #500]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad44:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ad46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad4a:	f022 0203 	bic.w	r2, r2, #3
 800ad4e:	4302      	orrs	r2, r0
 800ad50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad54:	061f      	lsls	r7, r3, #24
 800ad56:	d508      	bpl.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad58:	4977      	ldr	r1, [pc, #476]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ad5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad60:	f022 020c 	bic.w	r2, r2, #12
 800ad64:	4302      	orrs	r2, r0
 800ad66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad6a:	05d8      	lsls	r0, r3, #23
 800ad6c:	d508      	bpl.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad6e:	4972      	ldr	r1, [pc, #456]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ad72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad76:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800ad7a:	4302      	orrs	r2, r0
 800ad7c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad80:	0599      	lsls	r1, r3, #22
 800ad82:	d508      	bpl.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad84:	496c      	ldr	r1, [pc, #432]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad86:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ad88:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ad90:	4302      	orrs	r2, r0
 800ad92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad96:	055a      	lsls	r2, r3, #21
 800ad98:	d508      	bpl.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad9a:	4967      	ldr	r1, [pc, #412]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ada2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ada6:	4302      	orrs	r2, r0
 800ada8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800adac:	051f      	lsls	r7, r3, #20
 800adae:	d508      	bpl.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800adb0:	4961      	ldr	r1, [pc, #388]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800adb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800adbc:	4302      	orrs	r2, r0
 800adbe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800adc2:	04d8      	lsls	r0, r3, #19
 800adc4:	d508      	bpl.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800adc6:	495c      	ldr	r1, [pc, #368]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adc8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800adca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800adce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800add2:	4302      	orrs	r2, r0
 800add4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800add8:	0499      	lsls	r1, r3, #18
 800adda:	d508      	bpl.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800addc:	4956      	ldr	r1, [pc, #344]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adde:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ade0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ade4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ade8:	4302      	orrs	r2, r0
 800adea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adee:	025a      	lsls	r2, r3, #9
 800adf0:	d508      	bpl.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adf2:	4951      	ldr	r1, [pc, #324]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adf4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800adf6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800adfa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800adfe:	4302      	orrs	r2, r0
 800ae00:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ae04:	029f      	lsls	r7, r3, #10
 800ae06:	d50c      	bpl.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ae08:	494b      	ldr	r1, [pc, #300]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae0a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ae0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800ae10:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ae14:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800ae18:	bf08      	it	eq
 800ae1a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ae1c:	4302      	orrs	r2, r0
 800ae1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800ae22:	f013 0f08 	tst.w	r3, #8
 800ae26:	bf18      	it	ne
 800ae28:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae2a:	0358      	lsls	r0, r3, #13
 800ae2c:	d508      	bpl.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae2e:	4942      	ldr	r1, [pc, #264]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae30:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ae32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ae36:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ae3a:	4302      	orrs	r2, r0
 800ae3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ae40:	0219      	lsls	r1, r3, #8
 800ae42:	d40b      	bmi.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ae44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae48:	d016      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ae4a:	07f2      	lsls	r2, r6, #31
 800ae4c:	d414      	bmi.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ae4e:	2d01      	cmp	r5, #1
 800ae50:	f000 80d0 	beq.w	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800ae54:	2000      	movs	r0, #0
}
 800ae56:	b003      	add	sp, #12
 800ae58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae5c:	4936      	ldr	r1, [pc, #216]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ae5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae62:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ae66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ae6a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ae6e:	ea42 0200 	orr.w	r2, r2, r0
 800ae72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ae76:	d1e8      	bne.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 800ae78:	4b2f      	ldr	r3, [pc, #188]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ae7c:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800ae7e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ae82:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ae84:	f7fe fa4a 	bl	800931c <HAL_GetTick>
 800ae88:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ae8a:	e004      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ae8c:	f7fe fa46 	bl	800931c <HAL_GetTick>
 800ae90:	1bc0      	subs	r0, r0, r7
 800ae92:	2864      	cmp	r0, #100	; 0x64
 800ae94:	d85d      	bhi.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ae96:	6833      	ldr	r3, [r6, #0]
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	d4f7      	bmi.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	07df      	lsls	r7, r3, #31
 800aea0:	d512      	bpl.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800aea2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800aea4:	b982      	cbnz	r2, 800aec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aea6:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aeaa:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800aeae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800aeb2:	6860      	ldr	r0, [r4, #4]
 800aeb4:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 800aeb8:	68a1      	ldr	r1, [r4, #8]
 800aeba:	433a      	orrs	r2, r7
 800aebc:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800aec0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800aec4:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aec8:	031e      	lsls	r6, r3, #12
 800aeca:	f100 8111 	bmi.w	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800aece:	02d8      	lsls	r0, r3, #11
 800aed0:	d504      	bpl.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aed2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aed4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800aed8:	f000 810f 	beq.w	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aedc:	01d9      	lsls	r1, r3, #7
 800aede:	d511      	bpl.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aee0:	4e15      	ldr	r6, [pc, #84]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aee2:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aee4:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aee8:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aeec:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800aef0:	6921      	ldr	r1, [r4, #16]
 800aef2:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800aef6:	433a      	orrs	r2, r7
 800aef8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800aefc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800af00:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800af04:	019a      	lsls	r2, r3, #6
 800af06:	d50d      	bpl.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800af08:	6923      	ldr	r3, [r4, #16]
 800af0a:	6862      	ldr	r2, [r4, #4]
 800af0c:	041b      	lsls	r3, r3, #16
 800af0e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800af12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800af16:	4a08      	ldr	r2, [pc, #32]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af18:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800af1c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800af20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800af24:	4b04      	ldr	r3, [pc, #16]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af26:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af28:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800af2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800af2e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800af30:	f7fe f9f4 	bl	800931c <HAL_GetTick>
 800af34:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af36:	e006      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x302>
 800af38:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800af3c:	f7fe f9ee 	bl	800931c <HAL_GetTick>
 800af40:	1bc0      	subs	r0, r0, r7
 800af42:	2864      	cmp	r0, #100	; 0x64
 800af44:	d805      	bhi.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af46:	6833      	ldr	r3, [r6, #0]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	d5f7      	bpl.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 800af4c:	2d01      	cmp	r5, #1
 800af4e:	d181      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800af50:	e050      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 800af52:	2003      	movs	r0, #3
}
 800af54:	b003      	add	sp, #12
 800af56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800af5a:	4a87      	ldr	r2, [pc, #540]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 800af5c:	4b87      	ldr	r3, [pc, #540]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800af5e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800af60:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800af62:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800af66:	6411      	str	r1, [r2, #64]	; 0x40
 800af68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800af6a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800af6e:	9201      	str	r2, [sp, #4]
 800af70:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af78:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800af7a:	f7fe f9cf 	bl	800931c <HAL_GetTick>
 800af7e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800af80:	e005      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af82:	f7fe f9cb 	bl	800931c <HAL_GetTick>
 800af86:	eba0 0008 	sub.w	r0, r0, r8
 800af8a:	2864      	cmp	r0, #100	; 0x64
 800af8c:	d8e1      	bhi.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	05db      	lsls	r3, r3, #23
 800af92:	d5f6      	bpl.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af94:	4a78      	ldr	r2, [pc, #480]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800af96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af98:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800af9a:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af9e:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800afa2:	d011      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800afa4:	4281      	cmp	r1, r0
 800afa6:	d00f      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afa8:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800afaa:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afac:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800afb0:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800afb4:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afb6:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800afb8:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 800afbc:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800afbe:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800afc0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800afc2:	07cf      	lsls	r7, r1, #31
 800afc4:	f100 80c3 	bmi.w	800b14e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afc8:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800afcc:	f000 80b1 	beq.w	800b132 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800afd0:	4969      	ldr	r1, [pc, #420]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800afd2:	688a      	ldr	r2, [r1, #8]
 800afd4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800afd8:	608a      	str	r2, [r1, #8]
 800afda:	4a67      	ldr	r2, [pc, #412]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800afdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afe0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800afe2:	430b      	orrs	r3, r1
 800afe4:	6713      	str	r3, [r2, #112]	; 0x70
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	e66e      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 800afea:	2601      	movs	r6, #1
 800afec:	e665      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 800afee:	2500      	movs	r5, #0
      plli2sused = 1;
 800aff0:	2601      	movs	r6, #1
 800aff2:	e64f      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 800aff4:	4b60      	ldr	r3, [pc, #384]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800aff6:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aff8:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800affa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b000:	f7fe f98c 	bl	800931c <HAL_GetTick>
 800b004:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b006:	e004      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b008:	f7fe f988 	bl	800931c <HAL_GetTick>
 800b00c:	1b80      	subs	r0, r0, r6
 800b00e:	2864      	cmp	r0, #100	; 0x64
 800b010:	d89f      	bhi.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b012:	682b      	ldr	r3, [r5, #0]
 800b014:	009f      	lsls	r7, r3, #2
 800b016:	d4f7      	bmi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	031d      	lsls	r5, r3, #12
 800b01c:	f100 8092 	bmi.w	800b144 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800b020:	02d8      	lsls	r0, r3, #11
 800b022:	d51d      	bpl.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b024:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b026:	b9da      	cbnz	r2, 800b060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b028:	4953      	ldr	r1, [pc, #332]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b02a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b02c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b030:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b034:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800b038:	69a0      	ldr	r0, [r4, #24]
 800b03a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800b03e:	4332      	orrs	r2, r6
 800b040:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800b044:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800b048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b04c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800b050:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b052:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800b056:	3801      	subs	r0, #1
 800b058:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b05c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b060:	0299      	lsls	r1, r3, #10
 800b062:	d515      	bpl.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800b064:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b066:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800b06a:	d111      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b06c:	4942      	ldr	r1, [pc, #264]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b06e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b070:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b074:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b078:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800b07c:	6a20      	ldr	r0, [r4, #32]
 800b07e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800b082:	4332      	orrs	r2, r6
 800b084:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800b088:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b08c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b090:	071a      	lsls	r2, r3, #28
 800b092:	d519      	bpl.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b094:	4a38      	ldr	r2, [pc, #224]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b096:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b098:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b09c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b0a0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800b0a4:	69e0      	ldr	r0, [r4, #28]
 800b0a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800b0b0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800b0b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b0b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800b0bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b0c2:	430b      	orrs	r3, r1
 800b0c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800b0c8:	4b2b      	ldr	r3, [pc, #172]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0cc:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800b0ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b0d2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b0d4:	f7fe f922 	bl	800931c <HAL_GetTick>
 800b0d8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0da:	e005      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b0dc:	f7fe f91e 	bl	800931c <HAL_GetTick>
 800b0e0:	1b40      	subs	r0, r0, r5
 800b0e2:	2864      	cmp	r0, #100	; 0x64
 800b0e4:	f63f af35 	bhi.w	800af52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	d5f6      	bpl.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b0ee:	e6b1      	b.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b0f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b0f2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800b0f6:	f47f aeea 	bne.w	800aece <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b0fa:	4e1f      	ldr	r6, [pc, #124]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b0fc:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b0fe:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b102:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b106:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800b10a:	68e1      	ldr	r1, [r4, #12]
 800b10c:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800b110:	433a      	orrs	r2, r7
 800b112:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800b116:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b11a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b11e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800b122:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b124:	f021 011f 	bic.w	r1, r1, #31
 800b128:	3a01      	subs	r2, #1
 800b12a:	430a      	orrs	r2, r1
 800b12c:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 800b130:	e6d4      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b132:	4811      	ldr	r0, [pc, #68]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800b134:	4912      	ldr	r1, [pc, #72]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b136:	6882      	ldr	r2, [r0, #8]
 800b138:	4019      	ands	r1, r3
 800b13a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b13e:	430a      	orrs	r2, r1
 800b140:	6082      	str	r2, [r0, #8]
 800b142:	e74a      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b144:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b146:	2a00      	cmp	r2, #0
 800b148:	f43f af6e 	beq.w	800b028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b14c:	e768      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b14e:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b150:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800b154:	f7fe f8e2 	bl	800931c <HAL_GetTick>
 800b158:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b15a:	e006      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b15c:	f7fe f8de 	bl	800931c <HAL_GetTick>
 800b160:	eba0 0009 	sub.w	r0, r0, r9
 800b164:	4540      	cmp	r0, r8
 800b166:	f63f aef4 	bhi.w	800af52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b16a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b16c:	0798      	lsls	r0, r3, #30
 800b16e:	d5f5      	bpl.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b172:	f403 7040 	and.w	r0, r3, #768	; 0x300
 800b176:	e727      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800b178:	40023800 	.word	0x40023800
 800b17c:	40007000 	.word	0x40007000
 800b180:	0ffffcff 	.word	0x0ffffcff

0800b184 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop

0800b188 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 800b188:	b1e8      	cbz	r0, 800b1c6 <HAL_SDRAM_Init+0x3e>
{   
 800b18a:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b18c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b190:	4604      	mov	r4, r0
 800b192:	460d      	mov	r5, r1
 800b194:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b198:	b183      	cbz	r3, 800b1bc <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b19a:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b19c:	1d21      	adds	r1, r4, #4
 800b19e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b1a4:	f000 ff94 	bl	800c0d0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	e9d4 0200 	ldrd	r0, r2, [r4]
 800b1ae:	f000 ffcd 	bl	800c14c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b1b2:	2301      	movs	r3, #1
  return HAL_OK;
 800b1b4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b1b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800b1bc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800b1c0:	f7ff ffe0 	bl	800b184 <HAL_SDRAM_MspInit>
 800b1c4:	e7e9      	b.n	800b19a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800b1c6:	2001      	movs	r0, #1
}
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b1cc:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b1ce:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d010      	beq.n	800b1fa <HAL_SDRAM_SendCommand+0x2e>
 800b1d8:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1da:	2302      	movs	r3, #2
 800b1dc:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b1de:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b1e4:	f001 f804 	bl	800c1f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1e8:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800b1ea:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1ec:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b1f2:	2301      	movne	r3, #1
 800b1f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b1f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800b1fa:	4618      	mov	r0, r3
}
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop

0800b200 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b200:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d00c      	beq.n	800b224 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b20a:	2302      	movs	r3, #2
{
 800b20c:	b510      	push	{r4, lr}
 800b20e:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b210:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b212:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b216:	f001 f801 	bl	800c21c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b21a:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800b21c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b21e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b222:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b224:	4618      	mov	r0, r3
}
 800b226:	4770      	bx	lr

0800b228 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	4604      	mov	r4, r0
 800b22e:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b230:	f7fe f874 	bl	800931c <HAL_GetTick>
 800b234:	4606      	mov	r6, r0
 800b236:	1c69      	adds	r1, r5, #1
  while((hspi->Instance->SR & Fifo) != State)
 800b238:	6822      	ldr	r2, [r4, #0]
 800b23a:	d120      	bne.n	800b27e <SPI_EndRxTxTransaction+0x56>
 800b23c:	6893      	ldr	r3, [r2, #8]
 800b23e:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800b242:	d1fb      	bne.n	800b23c <SPI_EndRxTxTransaction+0x14>
  uint32_t tickstart = HAL_GetTick();
 800b244:	f7fe f86a 	bl	800931c <HAL_GetTick>
 800b248:	4606      	mov	r6, r0
 800b24a:	1c6b      	adds	r3, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	d143      	bne.n	800b2d8 <SPI_EndRxTxTransaction+0xb0>
 800b250:	6893      	ldr	r3, [r2, #8]
 800b252:	0618      	lsls	r0, r3, #24
 800b254:	d4fc      	bmi.n	800b250 <SPI_EndRxTxTransaction+0x28>
  uint32_t tickstart = HAL_GetTick();
 800b256:	f7fe f861 	bl	800931c <HAL_GetTick>
 800b25a:	4606      	mov	r6, r0
 800b25c:	1c6b      	adds	r3, r5, #1
  while((hspi->Instance->SR & Fifo) != State)
 800b25e:	6822      	ldr	r2, [r4, #0]
 800b260:	d006      	beq.n	800b270 <SPI_EndRxTxTransaction+0x48>
 800b262:	e044      	b.n	800b2ee <SPI_EndRxTxTransaction+0xc6>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800b264:	7b13      	ldrb	r3, [r2, #12]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b26c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  while((hspi->Instance->SR & Fifo) != State)
 800b270:	6893      	ldr	r3, [r2, #8]
 800b272:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800b276:	d1f5      	bne.n	800b264 <SPI_EndRxTxTransaction+0x3c>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  return HAL_OK;
 800b278:	2000      	movs	r0, #0
}
 800b27a:	b002      	add	sp, #8
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
  while((hspi->Instance->SR & Fifo) != State)
 800b27e:	6893      	ldr	r3, [r2, #8]
 800b280:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800b284:	d0de      	beq.n	800b244 <SPI_EndRxTxTransaction+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b286:	b12d      	cbz	r5, 800b294 <SPI_EndRxTxTransaction+0x6c>
 800b288:	f7fe f848 	bl	800931c <HAL_GetTick>
 800b28c:	1b80      	subs	r0, r0, r6
 800b28e:	4285      	cmp	r5, r0
 800b290:	d8d1      	bhi.n	800b236 <SPI_EndRxTxTransaction+0xe>
 800b292:	6822      	ldr	r2, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b294:	6853      	ldr	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b296:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b298:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b29c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2a0:	6053      	str	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2a2:	d036      	beq.n	800b312 <SPI_EndRxTxTransaction+0xea>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2aa:	d108      	bne.n	800b2be <SPI_EndRxTxTransaction+0x96>
          SPI_RESET_CRC(hspi);
 800b2ac:	6813      	ldr	r3, [r2, #0]
 800b2ae:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b2b2:	400b      	ands	r3, r1
 800b2b4:	6013      	str	r3, [r2, #0]
 800b2b6:	6813      	ldr	r3, [r2, #0]
 800b2b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b2bc:	6013      	str	r3, [r2, #0]
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b2be:	6e23      	ldr	r3, [r4, #96]	; 0x60
        hspi->State= HAL_SPI_STATE_READY;
 800b2c0:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800b2c2:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 800b2c4:	2003      	movs	r0, #3
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b2c6:	f043 0320 	orr.w	r3, r3, #32
        hspi->State= HAL_SPI_STATE_READY;
 800b2ca:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b2ce:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b2d2:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b2d4:	b002      	add	sp, #8
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
  while((hspi->Instance->SR & Flag) != State)
 800b2d8:	6893      	ldr	r3, [r2, #8]
 800b2da:	0619      	lsls	r1, r3, #24
 800b2dc:	d5bb      	bpl.n	800b256 <SPI_EndRxTxTransaction+0x2e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b2de:	2d00      	cmp	r5, #0
 800b2e0:	d0d8      	beq.n	800b294 <SPI_EndRxTxTransaction+0x6c>
 800b2e2:	f7fe f81b 	bl	800931c <HAL_GetTick>
 800b2e6:	1b80      	subs	r0, r0, r6
 800b2e8:	4285      	cmp	r5, r0
 800b2ea:	d8ae      	bhi.n	800b24a <SPI_EndRxTxTransaction+0x22>
 800b2ec:	e7d1      	b.n	800b292 <SPI_EndRxTxTransaction+0x6a>
  while((hspi->Instance->SR & Fifo) != State)
 800b2ee:	6893      	ldr	r3, [r2, #8]
 800b2f0:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800b2f4:	d0c0      	beq.n	800b278 <SPI_EndRxTxTransaction+0x50>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800b2f6:	7b13      	ldrb	r3, [r2, #12]
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b2fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b302:	2d00      	cmp	r5, #0
 800b304:	d0c6      	beq.n	800b294 <SPI_EndRxTxTransaction+0x6c>
 800b306:	f7fe f809 	bl	800931c <HAL_GetTick>
 800b30a:	1b80      	subs	r0, r0, r6
 800b30c:	4285      	cmp	r5, r0
 800b30e:	d8a5      	bhi.n	800b25c <SPI_EndRxTxTransaction+0x34>
 800b310:	e7bf      	b.n	800b292 <SPI_EndRxTxTransaction+0x6a>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b318:	d002      	beq.n	800b320 <SPI_EndRxTxTransaction+0xf8>
 800b31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b31e:	d1c1      	bne.n	800b2a4 <SPI_EndRxTxTransaction+0x7c>
          __HAL_SPI_DISABLE(hspi);
 800b320:	6813      	ldr	r3, [r2, #0]
 800b322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	e7bc      	b.n	800b2a4 <SPI_EndRxTxTransaction+0x7c>
 800b32a:	bf00      	nop

0800b32c <HAL_SPI_Init>:
  if(hspi == NULL)
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d060      	beq.n	800b3f2 <HAL_SPI_Init+0xc6>
{
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hspi->State == HAL_SPI_STATE_RESET)
 800b332:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800b336:	4604      	mov	r4, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d055      	beq.n	800b3e8 <HAL_SPI_Init+0xbc>
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b33c:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b33e:	2502      	movs	r5, #2
  __HAL_SPI_DISABLE(hspi);
 800b340:	6821      	ldr	r1, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b342:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b346:	f422 6000 	bic.w	r0, r2, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800b34a:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b34c:	bf94      	ite	ls
 800b34e:	f44f 5e80 	movls.w	lr, #4096	; 0x1000
 800b352:	f04f 0e00 	movhi.w	lr, #0
  __HAL_SPI_DISABLE(hspi);
 800b356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b35a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800b35e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b362:	600b      	str	r3, [r1, #0]
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b364:	d13c      	bne.n	800b3e0 <HAL_SPI_Init+0xb4>
 800b366:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b36a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b36c:	b920      	cbnz	r0, 800b378 <HAL_SPI_Init+0x4c>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b36e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b372:	d940      	bls.n	800b3f6 <HAL_SPI_Init+0xca>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b374:	2002      	movs	r0, #2
 800b376:	6320      	str	r0, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b378:	6927      	ldr	r7, [r4, #16]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b37a:	2802      	cmp	r0, #2
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b37c:	6a25      	ldr	r5, [r4, #32]
 800b37e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800b382:	ea43 0306 	orr.w	r3, r3, r6
 800b386:	69e6      	ldr	r6, [r4, #28]
 800b388:	ea43 0307 	orr.w	r3, r3, r7
 800b38c:	6967      	ldr	r7, [r4, #20]
 800b38e:	ea43 0307 	orr.w	r3, r3, r7
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b392:	69a7      	ldr	r7, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b394:	ea43 0306 	orr.w	r3, r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b398:	f407 7600 	and.w	r6, r7, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b39c:	ea43 0305 	orr.w	r3, r3, r5
 800b3a0:	ea43 0306 	orr.w	r3, r3, r6
 800b3a4:	ea43 030c 	orr.w	r3, r3, ip
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800b3a8:	600b      	str	r3, [r1, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b3aa:	d103      	bne.n	800b3b4 <HAL_SPI_Init+0x88>
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800b3ac:	680b      	ldr	r3, [r1, #0]
 800b3ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3b2:	600b      	str	r3, [r1, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b3b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3b6:	0c3f      	lsrs	r7, r7, #16
 800b3b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hspi->State= HAL_SPI_STATE_READY;
 800b3ba:	2601      	movs	r6, #1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b3bc:	4302      	orrs	r2, r0
 800b3be:	f007 0704 	and.w	r7, r7, #4
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800b3c2:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b3c6:	431a      	orrs	r2, r3
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b3ca:	433a      	orrs	r2, r7
  return HAL_OK;
 800b3cc:	4618      	mov	r0, r3
                         hspi->Init.DataSize ) | frxth;
 800b3ce:	ea4e 0502 	orr.w	r5, lr, r2
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b3d2:	604d      	str	r5, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800b3d4:	f8c1 c010 	str.w	ip, [r1, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3d8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 800b3da:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 800b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	469c      	mov	ip, r3
 800b3e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3e6:	e7c0      	b.n	800b36a <HAL_SPI_Init+0x3e>
    hspi->Lock = HAL_UNLOCKED;
 800b3e8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b3ec:	f006 fbb6 	bl	8011b5c <HAL_SPI_MspInit>
 800b3f0:	e7a4      	b.n	800b33c <HAL_SPI_Init+0x10>
    return HAL_ERROR;
 800b3f2:	2001      	movs	r0, #1
}
 800b3f4:	4770      	bx	lr
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800b3fc:	e7bc      	b.n	800b378 <HAL_SPI_Init+0x4c>
 800b3fe:	bf00      	nop

0800b400 <HAL_SPI_Transmit>:
{
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800b404:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800b408:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	f000 8108 	beq.w	800b620 <HAL_SPI_Transmit+0x220>
 800b410:	4604      	mov	r4, r0
 800b412:	2301      	movs	r3, #1
  if(hspi->State != HAL_SPI_STATE_READY)
 800b414:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b418:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if(hspi->State != HAL_SPI_STATE_READY)
 800b41c:	4298      	cmp	r0, r3
 800b41e:	d159      	bne.n	800b4d4 <HAL_SPI_Transmit+0xd4>
  if((pData == NULL ) || (Size == 0))
 800b420:	2900      	cmp	r1, #0
 800b422:	d05f      	beq.n	800b4e4 <HAL_SPI_Transmit+0xe4>
 800b424:	fab2 f382 	clz	r3, r2
 800b428:	095b      	lsrs	r3, r3, #5
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d15a      	bne.n	800b4e4 <HAL_SPI_Transmit+0xe4>
  hspi->pTxBuffPtr  = pData;
 800b42e:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b430:	2003      	movs	r0, #3
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b432:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b434:	6623      	str	r3, [r4, #96]	; 0x60
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b436:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800b43a:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b43c:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b43e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b442:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 800b446:	6823      	ldr	r3, [r4, #0]
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b448:	f000 8090 	beq.w	800b56c <HAL_SPI_Transmit+0x16c>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b44c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b44e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b452:	f000 8081 	beq.w	800b558 <HAL_SPI_Transmit+0x158>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b456:	6819      	ldr	r1, [r3, #0]
 800b458:	0648      	lsls	r0, r1, #25
 800b45a:	d574      	bpl.n	800b546 <HAL_SPI_Transmit+0x146>
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b45c:	68e3      	ldr	r3, [r4, #12]
 800b45e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b462:	d959      	bls.n	800b518 <HAL_SPI_Transmit+0x118>
  uint32_t tickstart = HAL_GetTick();
 800b464:	f7fd ff5a 	bl	800931c <HAL_GetTick>
 800b468:	4606      	mov	r6, r0
 800b46a:	1c69      	adds	r1, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	f040 80aa 	bne.w	800b5c6 <HAL_SPI_Transmit+0x1c6>
 800b472:	6882      	ldr	r2, [r0, #8]
 800b474:	0792      	lsls	r2, r2, #30
 800b476:	d5fc      	bpl.n	800b472 <HAL_SPI_Transmit+0x72>
      hspi->TxXferCount--;
 800b478:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b47a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800b47c:	3b01      	subs	r3, #1
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b47e:	f832 1b02 	ldrh.w	r1, [r2], #2
      hspi->TxXferCount--;
 800b482:	b29b      	uxth	r3, r3
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b484:	60c1      	str	r1, [r0, #12]
      hspi->TxXferCount--;
 800b486:	87e3      	strh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b488:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0)
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1ea      	bne.n	800b464 <HAL_SPI_Transmit+0x64>
 800b48e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b494:	d104      	bne.n	800b4a0 <HAL_SPI_Transmit+0xa0>
     hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	6813      	ldr	r3, [r2, #0]
 800b49a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b49e:	6013      	str	r3, [r2, #0]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff fec0 	bl	800b228 <SPI_EndRxTxTransaction>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	f040 80c8 	bne.w	800b63e <HAL_SPI_Transmit+0x23e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	b92b      	cbnz	r3, 800b4be <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	9201      	str	r2, [sp, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(hspi);
 800b4be:	2300      	movs	r3, #0
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4c0:	6e20      	ldr	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY; 
 800b4c2:	2201      	movs	r2, #1
  __HAL_LOCK(hspi);
 800b4c4:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 800b4c6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_READY; 
 800b4ca:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b4ce:	bf18      	it	ne
 800b4d0:	2001      	movne	r0, #1
 800b4d2:	e005      	b.n	800b4e0 <HAL_SPI_Transmit+0xe0>
   __HAL_UNLOCK(hspi);
 800b4d4:	2200      	movs	r2, #0
   return HAL_BUSY;
 800b4d6:	2002      	movs	r0, #2
    hspi->State = HAL_SPI_STATE_READY;
 800b4d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   __HAL_UNLOCK(hspi);
 800b4dc:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 800b4e0:	b002      	add	sp, #8
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
   __HAL_UNLOCK(hspi);
 800b4e4:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b4e6:	2001      	movs	r0, #1
   __HAL_UNLOCK(hspi);
 800b4e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b4ec:	b002      	add	sp, #8
 800b4ee:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart = HAL_GetTick();
 800b4f0:	f7fd ff14 	bl	800931c <HAL_GetTick>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	1c68      	adds	r0, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	d171      	bne.n	800b5e0 <HAL_SPI_Transmit+0x1e0>
 800b4fc:	689a      	ldr	r2, [r3, #8]
 800b4fe:	0791      	lsls	r1, r2, #30
 800b500:	d5fc      	bpl.n	800b4fc <HAL_SPI_Transmit+0xfc>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*hspi->pTxBuffPtr++);
 800b502:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b504:	1c51      	adds	r1, r2, #1
 800b506:	63a1      	str	r1, [r4, #56]	; 0x38
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;    
 800b50c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b50e:	3a01      	subs	r2, #1
 800b510:	b292      	uxth	r2, r2
 800b512:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0)
 800b514:	2a00      	cmp	r2, #0
 800b516:	d0ba      	beq.n	800b48e <HAL_SPI_Transmit+0x8e>
      if(hspi->TxXferCount != 0x1)
 800b518:	2a01      	cmp	r2, #1
 800b51a:	d0e9      	beq.n	800b4f0 <HAL_SPI_Transmit+0xf0>
  uint32_t tickstart = HAL_GetTick();
 800b51c:	f7fd fefe 	bl	800931c <HAL_GetTick>
 800b520:	4606      	mov	r6, r0
 800b522:	1c69      	adds	r1, r5, #1
  while((hspi->Instance->SR & Flag) != State)
 800b524:	6820      	ldr	r0, [r4, #0]
 800b526:	d126      	bne.n	800b576 <HAL_SPI_Transmit+0x176>
 800b528:	6882      	ldr	r2, [r0, #8]
 800b52a:	0792      	lsls	r2, r2, #30
 800b52c:	d5fc      	bpl.n	800b528 <HAL_SPI_Transmit+0x128>
        hspi->TxXferCount -= 2;
 800b52e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2;
 800b532:	3a02      	subs	r2, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b534:	f833 1b02 	ldrh.w	r1, [r3], #2
        hspi->TxXferCount -= 2;
 800b538:	b292      	uxth	r2, r2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b53a:	60c1      	str	r1, [r0, #12]
        hspi->TxXferCount -= 2;
 800b53c:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b53e:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0)
 800b540:	2a00      	cmp	r2, #0
 800b542:	d1e9      	bne.n	800b518 <HAL_SPI_Transmit+0x118>
 800b544:	e7a3      	b.n	800b48e <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 800b546:	6819      	ldr	r1, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b548:	68e0      	ldr	r0, [r4, #12]
    __HAL_SPI_ENABLE(hspi);
 800b54a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b54e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    __HAL_SPI_ENABLE(hspi);
 800b552:	6019      	str	r1, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b554:	d886      	bhi.n	800b464 <HAL_SPI_Transmit+0x64>
 800b556:	e7df      	b.n	800b518 <HAL_SPI_Transmit+0x118>
    SPI_RESET_CRC(hspi);
 800b558:	6819      	ldr	r1, [r3, #0]
 800b55a:	f64d 70ff 	movw	r0, #57343	; 0xdfff
 800b55e:	4001      	ands	r1, r0
 800b560:	6019      	str	r1, [r3, #0]
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b568:	6019      	str	r1, [r3, #0]
 800b56a:	e774      	b.n	800b456 <HAL_SPI_Transmit+0x56>
    SPI_1LINE_TX(hspi);
 800b56c:	6819      	ldr	r1, [r3, #0]
 800b56e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b572:	6019      	str	r1, [r3, #0]
 800b574:	e76a      	b.n	800b44c <HAL_SPI_Transmit+0x4c>
  while((hspi->Instance->SR & Flag) != State)
 800b576:	6883      	ldr	r3, [r0, #8]
 800b578:	079b      	lsls	r3, r3, #30
 800b57a:	d4d8      	bmi.n	800b52e <HAL_SPI_Transmit+0x12e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b57c:	b12d      	cbz	r5, 800b58a <HAL_SPI_Transmit+0x18a>
 800b57e:	f7fd fecd 	bl	800931c <HAL_GetTick>
 800b582:	1b80      	subs	r0, r0, r6
 800b584:	4285      	cmp	r5, r0
 800b586:	d8cc      	bhi.n	800b522 <HAL_SPI_Transmit+0x122>
 800b588:	6820      	ldr	r0, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b58a:	6843      	ldr	r3, [r0, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b58c:	6862      	ldr	r2, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b58e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b592:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b596:	6043      	str	r3, [r0, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b598:	d045      	beq.n	800b626 <HAL_SPI_Transmit+0x226>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b59a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b59c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5a0:	d108      	bne.n	800b5b4 <HAL_SPI_Transmit+0x1b4>
          SPI_RESET_CRC(hspi);
 800b5a2:	6803      	ldr	r3, [r0, #0]
 800b5a4:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	6003      	str	r3, [r0, #0]
 800b5ac:	6803      	ldr	r3, [r0, #0]
 800b5ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b5b2:	6003      	str	r3, [r0, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b5b4:	2201      	movs	r2, #1
       __HAL_UNLOCK(hspi);
 800b5b6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800b5b8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800b5ba:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
       __HAL_UNLOCK(hspi);
 800b5be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b5c2:	b002      	add	sp, #8
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
  while((hspi->Instance->SR & Flag) != State)
 800b5c6:	6883      	ldr	r3, [r0, #8]
 800b5c8:	079b      	lsls	r3, r3, #30
 800b5ca:	f53f af55 	bmi.w	800b478 <HAL_SPI_Transmit+0x78>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	d0db      	beq.n	800b58a <HAL_SPI_Transmit+0x18a>
 800b5d2:	f7fd fea3 	bl	800931c <HAL_GetTick>
 800b5d6:	1b80      	subs	r0, r0, r6
 800b5d8:	4285      	cmp	r5, r0
 800b5da:	f63f af46 	bhi.w	800b46a <HAL_SPI_Transmit+0x6a>
 800b5de:	e7d3      	b.n	800b588 <HAL_SPI_Transmit+0x188>
  while((hspi->Instance->SR & Flag) != State)
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	0792      	lsls	r2, r2, #30
 800b5e4:	d48d      	bmi.n	800b502 <HAL_SPI_Transmit+0x102>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b5e6:	b12d      	cbz	r5, 800b5f4 <HAL_SPI_Transmit+0x1f4>
 800b5e8:	f7fd fe98 	bl	800931c <HAL_GetTick>
 800b5ec:	1b80      	subs	r0, r0, r6
 800b5ee:	4285      	cmp	r5, r0
 800b5f0:	d881      	bhi.n	800b4f6 <HAL_SPI_Transmit+0xf6>
 800b5f2:	6823      	ldr	r3, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5f4:	685a      	ldr	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5f6:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b600:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b602:	d01e      	beq.n	800b642 <HAL_SPI_Transmit+0x242>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b604:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b606:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b60a:	d1d3      	bne.n	800b5b4 <HAL_SPI_Transmit+0x1b4>
          SPI_RESET_CRC(hspi);
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b612:	400a      	ands	r2, r1
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	e7c9      	b.n	800b5b4 <HAL_SPI_Transmit+0x1b4>
  __HAL_LOCK(hspi);
 800b620:	2002      	movs	r0, #2
}
 800b622:	b002      	add	sp, #8
 800b624:	bd70      	pop	{r4, r5, r6, pc}
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62c:	d002      	beq.n	800b634 <HAL_SPI_Transmit+0x234>
 800b62e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b632:	d1b2      	bne.n	800b59a <HAL_SPI_Transmit+0x19a>
          __HAL_SPI_DISABLE(hspi);
 800b634:	6803      	ldr	r3, [r0, #0]
 800b636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b63a:	6003      	str	r3, [r0, #0]
 800b63c:	e7ad      	b.n	800b59a <HAL_SPI_Transmit+0x19a>
    return HAL_TIMEOUT;
 800b63e:	2003      	movs	r0, #3
 800b640:	e74e      	b.n	800b4e0 <HAL_SPI_Transmit+0xe0>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b642:	68a2      	ldr	r2, [r4, #8]
 800b644:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b648:	d002      	beq.n	800b650 <HAL_SPI_Transmit+0x250>
 800b64a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b64e:	d1d9      	bne.n	800b604 <HAL_SPI_Transmit+0x204>
          __HAL_SPI_DISABLE(hspi);
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	e7d4      	b.n	800b604 <HAL_SPI_Transmit+0x204>
 800b65a:	bf00      	nop

0800b65c <HAL_SPI_TransmitReceive>:
{
 800b65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b660:	4604      	mov	r4, r0
 800b662:	b083      	sub	sp, #12
  __IO uint16_t tmpreg = 0;
 800b664:	2000      	movs	r0, #0
{
 800b666:	461d      	mov	r5, r3
 800b668:	4689      	mov	r9, r1
 800b66a:	4690      	mov	r8, r2
  __IO uint16_t tmpreg = 0;
 800b66c:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 800b670:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 800b672:	f7fd fe53 	bl	800931c <HAL_GetTick>
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b676:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10c      	bne.n	800b698 <HAL_SPI_TransmitReceive+0x3c>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800b67e:	2d00      	cmp	r5, #0
 800b680:	bf18      	it	ne
 800b682:	f1b8 0f00 	cmpne.w	r8, #0
 800b686:	d003      	beq.n	800b690 <HAL_SPI_TransmitReceive+0x34>
 800b688:	fab9 f289 	clz	r2, r9
 800b68c:	0952      	lsrs	r2, r2, #5
 800b68e:	b13a      	cbz	r2, 800b6a0 <HAL_SPI_TransmitReceive+0x44>
    return HAL_ERROR;
 800b690:	2001      	movs	r0, #1
}
 800b692:	b003      	add	sp, #12
 800b694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800b698:	2002      	movs	r0, #2
}
 800b69a:	b003      	add	sp, #12
 800b69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi); 
 800b6a0:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 800b6a4:	2901      	cmp	r1, #1
 800b6a6:	d0f7      	beq.n	800b698 <HAL_SPI_TransmitReceive+0x3c>
 800b6a8:	4607      	mov	r7, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b6ac:	2105      	movs	r1, #5
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6ae:	6622      	str	r2, [r4, #96]	; 0x60
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6b0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  __HAL_LOCK(hspi); 
 800b6b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hspi->pRxBuffPtr  = pRxData;
 800b6b8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b6bc:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b6c0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800b6c4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b6c8:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b6ca:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b6cc:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
 800b6d0:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6d2:	d108      	bne.n	800b6e6 <HAL_SPI_TransmitReceive+0x8a>
    SPI_RESET_CRC(hspi);
 800b6d4:	6813      	ldr	r3, [r2, #0]
 800b6d6:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b6da:	400b      	ands	r3, r1
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	6813      	ldr	r3, [r2, #0]
 800b6e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b6e4:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b6e6:	68e1      	ldr	r1, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6e8:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b6ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b6ee:	d801      	bhi.n	800b6f4 <HAL_SPI_TransmitReceive+0x98>
 800b6f0:	2d01      	cmp	r5, #1
 800b6f2:	d946      	bls.n	800b782 <HAL_SPI_TransmitReceive+0x126>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6f8:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6fa:	6813      	ldr	r3, [r2, #0]
 800b6fc:	0658      	lsls	r0, r3, #25
 800b6fe:	d403      	bmi.n	800b708 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 800b700:	6813      	ldr	r3, [r2, #0]
 800b702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b706:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b708:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b70c:	d93f      	bls.n	800b78e <HAL_SPI_TransmitReceive+0x132>
 800b70e:	4629      	mov	r1, r5
 800b710:	1c73      	adds	r3, r6, #1
 800b712:	f040 80b6 	bne.w	800b882 <HAL_SPI_TransmitReceive+0x226>
 800b716:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b718:	2d00      	cmp	r5, #0
 800b71a:	f000 808c 	beq.w	800b836 <HAL_SPI_TransmitReceive+0x1da>
 800b71e:	6822      	ldr	r2, [r4, #0]
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b720:	6893      	ldr	r3, [r2, #8]
        hspi->TxXferCount--;
 800b722:	3d01      	subs	r5, #1
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b724:	f013 0f02 	tst.w	r3, #2
        hspi->TxXferCount--;
 800b728:	b2ad      	uxth	r5, r5
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b72a:	d009      	beq.n	800b740 <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b72c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b72e:	f833 7b02 	ldrh.w	r7, [r3], #2
 800b732:	60d7      	str	r7, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b734:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b736:	87e5      	strh	r5, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b738:	b915      	cbnz	r5, 800b740 <HAL_SPI_TransmitReceive+0xe4>
 800b73a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b73e:	d075      	beq.n	800b82c <HAL_SPI_TransmitReceive+0x1d0>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b740:	2900      	cmp	r1, #0
 800b742:	d17b      	bne.n	800b83c <HAL_SPI_TransmitReceive+0x1e0>
 800b744:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b746:	2d00      	cmp	r5, #0
 800b748:	d1ea      	bne.n	800b720 <HAL_SPI_TransmitReceive+0xc4>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b74a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b74e:	f000 80da 	beq.w	800b906 <HAL_SPI_TransmitReceive+0x2aa>
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b752:	4631      	mov	r1, r6
 800b754:	4620      	mov	r0, r4
 800b756:	f7ff fd67 	bl	800b228 <SPI_EndRxTxTransaction>
 800b75a:	4601      	mov	r1, r0
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f040 80d0 	bne.w	800b902 <HAL_SPI_TransmitReceive+0x2a6>
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b762:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800b764:	2301      	movs	r3, #1
 800b766:	6e20      	ldr	r0, [r4, #96]	; 0x60
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b768:	68aa      	ldr	r2, [r5, #8]
  hspi->State = HAL_SPI_STATE_READY;
 800b76a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b76e:	f012 0210 	ands.w	r2, r2, #16
 800b772:	f040 80b1 	bne.w	800b8d8 <HAL_SPI_TransmitReceive+0x27c>
    return HAL_BUSY;
 800b776:	3000      	adds	r0, #0
  __HAL_UNLOCK(hspi);
 800b778:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800b77c:	bf18      	it	ne
 800b77e:	2001      	movne	r0, #1
 800b780:	e787      	b.n	800b692 <HAL_SPI_TransmitReceive+0x36>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b782:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b786:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b788:	6813      	ldr	r3, [r2, #0]
 800b78a:	065b      	lsls	r3, r3, #25
 800b78c:	d5b8      	bpl.n	800b700 <HAL_SPI_TransmitReceive+0xa4>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b78e:	bb0d      	cbnz	r5, 800b7d4 <HAL_SPI_TransmitReceive+0x178>
 800b790:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8085 	beq.w	800b8a4 <HAL_SPI_TransmitReceive+0x248>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b79a:	6821      	ldr	r1, [r4, #0]
 800b79c:	688a      	ldr	r2, [r1, #8]
 800b79e:	07d5      	lsls	r5, r2, #31
 800b7a0:	d513      	bpl.n	800b7ca <HAL_SPI_TransmitReceive+0x16e>
        if(hspi->RxXferCount > 1)
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b7a6:	d962      	bls.n	800b86e <HAL_SPI_TransmitReceive+0x212>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	68ca      	ldr	r2, [r1, #12]
 800b7ac:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->RxXferCount -= 2;
 800b7b0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7b4:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800b7b6:	1e93      	subs	r3, r2, #2
 800b7b8:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800b7ba:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800b7bc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800b7c0:	d803      	bhi.n	800b7ca <HAL_SPI_TransmitReceive+0x16e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7c2:	684b      	ldr	r3, [r1, #4]
 800b7c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7c8:	604b      	str	r3, [r1, #4]
      if(Timeout != HAL_MAX_DELAY)
 800b7ca:	1c70      	adds	r0, r6, #1
 800b7cc:	d120      	bne.n	800b810 <HAL_SPI_TransmitReceive+0x1b4>
 800b7ce:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b7d0:	2d00      	cmp	r5, #0
 800b7d2:	d0dd      	beq.n	800b790 <HAL_SPI_TransmitReceive+0x134>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	0792      	lsls	r2, r2, #30
 800b7da:	d513      	bpl.n	800b804 <HAL_SPI_TransmitReceive+0x1a8>
        if(hspi->TxXferCount > 1)
 800b7dc:	2d01      	cmp	r5, #1
 800b7de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b7e0:	d93c      	bls.n	800b85c <HAL_SPI_TransmitReceive+0x200>
          hspi->TxXferCount -= 2;
 800b7e2:	3d02      	subs	r5, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b7e4:	f832 1b02 	ldrh.w	r1, [r2], #2
          hspi->TxXferCount -= 2;
 800b7e8:	b2ad      	uxth	r5, r5
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b7ea:	60d9      	str	r1, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7ec:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800b7ee:	87e5      	strh	r5, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b7f0:	b945      	cbnz	r5, 800b804 <HAL_SPI_TransmitReceive+0x1a8>
 800b7f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b7f4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b7f8:	d104      	bne.n	800b804 <HAL_SPI_TransmitReceive+0x1a8>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	6813      	ldr	r3, [r2, #0]
 800b7fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b802:	6013      	str	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b804:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1c6      	bne.n	800b79a <HAL_SPI_TransmitReceive+0x13e>
      if(Timeout != HAL_MAX_DELAY)
 800b80c:	1c70      	adds	r0, r6, #1
 800b80e:	d0de      	beq.n	800b7ce <HAL_SPI_TransmitReceive+0x172>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b810:	b126      	cbz	r6, 800b81c <HAL_SPI_TransmitReceive+0x1c0>
 800b812:	f7fd fd83 	bl	800931c <HAL_GetTick>
 800b816:	1bc0      	subs	r0, r0, r7
 800b818:	42b0      	cmp	r0, r6
 800b81a:	d9d8      	bls.n	800b7ce <HAL_SPI_TransmitReceive+0x172>
          hspi->State = HAL_SPI_STATE_READY;
 800b81c:	2201      	movs	r2, #1
          __HAL_UNLOCK(hspi);
 800b81e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800b820:	2003      	movs	r0, #3
          hspi->State = HAL_SPI_STATE_READY;
 800b822:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800b826:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 800b82a:	e732      	b.n	800b692 <HAL_SPI_TransmitReceive+0x36>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b82c:	6813      	ldr	r3, [r2, #0]
 800b82e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	e784      	b.n	800b740 <HAL_SPI_TransmitReceive+0xe4>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b836:	2900      	cmp	r1, #0
 800b838:	d087      	beq.n	800b74a <HAL_SPI_TransmitReceive+0xee>
 800b83a:	6822      	ldr	r2, [r4, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b83c:	6893      	ldr	r3, [r2, #8]
 800b83e:	07dd      	lsls	r5, r3, #31
 800b840:	d50a      	bpl.n	800b858 <HAL_SPI_TransmitReceive+0x1fc>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b842:	68d2      	ldr	r2, [r2, #12]
 800b844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b846:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800b84a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b84e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b850:	3901      	subs	r1, #1
 800b852:	b289      	uxth	r1, r1
 800b854:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
 800b858:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 800b85a:	e75d      	b.n	800b718 <HAL_SPI_TransmitReceive+0xbc>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b85c:	1c51      	adds	r1, r2, #1
 800b85e:	63a1      	str	r1, [r4, #56]	; 0x38
 800b860:	7812      	ldrb	r2, [r2, #0]
 800b862:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800b864:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 800b866:	3d01      	subs	r5, #1
 800b868:	b2ad      	uxth	r5, r5
 800b86a:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800b86c:	e7c0      	b.n	800b7f0 <HAL_SPI_TransmitReceive+0x194>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800b86e:	1c53      	adds	r3, r2, #1
 800b870:	6423      	str	r3, [r4, #64]	; 0x40
 800b872:	7b0b      	ldrb	r3, [r1, #12]
 800b874:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 800b876:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b87a:	3b01      	subs	r3, #1
 800b87c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b880:	e7a3      	b.n	800b7ca <HAL_SPI_TransmitReceive+0x16e>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b882:	b98d      	cbnz	r5, 800b8a8 <HAL_SPI_TransmitReceive+0x24c>
 800b884:	b171      	cbz	r1, 800b8a4 <HAL_SPI_TransmitReceive+0x248>
 800b886:	6823      	ldr	r3, [r4, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b888:	689a      	ldr	r2, [r3, #8]
 800b88a:	07d2      	lsls	r2, r2, #31
 800b88c:	d42e      	bmi.n	800b8ec <HAL_SPI_TransmitReceive+0x290>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b88e:	2e00      	cmp	r6, #0
 800b890:	d0c4      	beq.n	800b81c <HAL_SPI_TransmitReceive+0x1c0>
 800b892:	f7fd fd43 	bl	800931c <HAL_GetTick>
 800b896:	1bc0      	subs	r0, r0, r7
 800b898:	42b0      	cmp	r0, r6
 800b89a:	d8bf      	bhi.n	800b81c <HAL_SPI_TransmitReceive+0x1c0>
 800b89c:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 800b89e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800b8a2:	e735      	b.n	800b710 <HAL_SPI_TransmitReceive+0xb4>
 800b8a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b8a6:	e750      	b.n	800b74a <HAL_SPI_TransmitReceive+0xee>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	689a      	ldr	r2, [r3, #8]
 800b8ac:	0790      	lsls	r0, r2, #30
 800b8ae:	d510      	bpl.n	800b8d2 <HAL_SPI_TransmitReceive+0x276>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b8b2:	3d01      	subs	r5, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8b4:	f832 0b02 	ldrh.w	r0, [r2], #2
        hspi->TxXferCount--;
 800b8b8:	b2ad      	uxth	r5, r5
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8ba:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8bc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b8be:	87e5      	strh	r5, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b8c0:	b93d      	cbnz	r5, 800b8d2 <HAL_SPI_TransmitReceive+0x276>
 800b8c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b8c4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b8c8:	d103      	bne.n	800b8d2 <HAL_SPI_TransmitReceive+0x276>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8d0:	601a      	str	r2, [r3, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	d0db      	beq.n	800b88e <HAL_SPI_TransmitReceive+0x232>
 800b8d6:	e7d7      	b.n	800b888 <HAL_SPI_TransmitReceive+0x22c>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b8d8:	f040 0202 	orr.w	r2, r0, #2
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b8dc:	f64f 76ef 	movw	r6, #65519	; 0xffef
    return HAL_ERROR;
 800b8e0:	4618      	mov	r0, r3
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b8e2:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b8e4:	60ae      	str	r6, [r5, #8]
    __HAL_UNLOCK(hspi);
 800b8e6:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800b8ea:	e6d2      	b.n	800b692 <HAL_SPI_TransmitReceive+0x36>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b8f0:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800b8f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8f8:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b900:	e7c5      	b.n	800b88e <HAL_SPI_TransmitReceive+0x232>
    return HAL_TIMEOUT;
 800b902:	2003      	movs	r0, #3
 800b904:	e6c5      	b.n	800b692 <HAL_SPI_TransmitReceive+0x36>
  uint32_t tickstart = HAL_GetTick();
 800b906:	f7fd fd09 	bl	800931c <HAL_GetTick>
 800b90a:	4605      	mov	r5, r0
 800b90c:	1c71      	adds	r1, r6, #1
  while((hspi->Instance->SR & Flag) != State)
 800b90e:	6822      	ldr	r2, [r4, #0]
 800b910:	d11e      	bne.n	800b950 <HAL_SPI_TransmitReceive+0x2f4>
 800b912:	6893      	ldr	r3, [r2, #8]
 800b914:	07db      	lsls	r3, r3, #31
 800b916:	d5fc      	bpl.n	800b912 <HAL_SPI_TransmitReceive+0x2b6>
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b918:	68e3      	ldr	r3, [r4, #12]
 800b91a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b91e:	d041      	beq.n	800b9a4 <HAL_SPI_TransmitReceive+0x348>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b920:	7b13      	ldrb	r3, [r2, #12]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b922:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b924:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b928:	2a02      	cmp	r2, #2
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b92a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b92e:	f47f af10 	bne.w	800b752 <HAL_SPI_TransmitReceive+0xf6>
  uint32_t tickstart = HAL_GetTick();
 800b932:	f7fd fcf3 	bl	800931c <HAL_GetTick>
 800b936:	4605      	mov	r5, r0
 800b938:	1c70      	adds	r0, r6, #1
  while((hspi->Instance->SR & Flag) != State)
 800b93a:	6822      	ldr	r2, [r4, #0]
 800b93c:	d139      	bne.n	800b9b2 <HAL_SPI_TransmitReceive+0x356>
 800b93e:	6893      	ldr	r3, [r2, #8]
 800b940:	07d9      	lsls	r1, r3, #31
 800b942:	d5fc      	bpl.n	800b93e <HAL_SPI_TransmitReceive+0x2e2>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b944:	7b13      	ldrb	r3, [r2, #12]
 800b946:	f8ad 3006 	strh.w	r3, [sp, #6]
        UNUSED(tmpreg); /* To avoid GCC warning */
 800b94a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b94e:	e700      	b.n	800b752 <HAL_SPI_TransmitReceive+0xf6>
  while((hspi->Instance->SR & Flag) != State)
 800b950:	6893      	ldr	r3, [r2, #8]
 800b952:	07df      	lsls	r7, r3, #31
 800b954:	d4e0      	bmi.n	800b918 <HAL_SPI_TransmitReceive+0x2bc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b956:	b12e      	cbz	r6, 800b964 <HAL_SPI_TransmitReceive+0x308>
 800b958:	f7fd fce0 	bl	800931c <HAL_GetTick>
 800b95c:	1b40      	subs	r0, r0, r5
 800b95e:	4286      	cmp	r6, r0
 800b960:	d8d4      	bhi.n	800b90c <HAL_SPI_TransmitReceive+0x2b0>
 800b962:	6822      	ldr	r2, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b964:	6853      	ldr	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b966:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b968:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b96c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b970:	6053      	str	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b972:	d048      	beq.n	800ba06 <HAL_SPI_TransmitReceive+0x3aa>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b97a:	d108      	bne.n	800b98e <HAL_SPI_TransmitReceive+0x332>
          SPI_RESET_CRC(hspi);
 800b97c:	6813      	ldr	r3, [r2, #0]
 800b97e:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b982:	400b      	ands	r3, r1
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	6813      	ldr	r3, [r2, #0]
 800b988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b98c:	6013      	str	r3, [r2, #0]
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b98e:	6e23      	ldr	r3, [r4, #96]	; 0x60
        hspi->State= HAL_SPI_STATE_READY;
 800b990:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800b992:	2100      	movs	r1, #0
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b994:	f043 0302 	orr.w	r3, r3, #2
        hspi->State= HAL_SPI_STATE_READY;
 800b998:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b99c:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b9a0:	6623      	str	r3, [r4, #96]	; 0x60
 800b9a2:	e7b9      	b.n	800b918 <HAL_SPI_TransmitReceive+0x2bc>
      tmpreg = hspi->Instance->DR;
 800b9a4:	68d3      	ldr	r3, [r2, #12]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b9ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b9b0:	e6cf      	b.n	800b752 <HAL_SPI_TransmitReceive+0xf6>
  while((hspi->Instance->SR & Flag) != State)
 800b9b2:	6893      	ldr	r3, [r2, #8]
 800b9b4:	07db      	lsls	r3, r3, #31
 800b9b6:	d4c5      	bmi.n	800b944 <HAL_SPI_TransmitReceive+0x2e8>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b9b8:	b12e      	cbz	r6, 800b9c6 <HAL_SPI_TransmitReceive+0x36a>
 800b9ba:	f7fd fcaf 	bl	800931c <HAL_GetTick>
 800b9be:	1b40      	subs	r0, r0, r5
 800b9c0:	4286      	cmp	r6, r0
 800b9c2:	d8b9      	bhi.n	800b938 <HAL_SPI_TransmitReceive+0x2dc>
 800b9c4:	6822      	ldr	r2, [r4, #0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9c6:	6853      	ldr	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9c8:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9ca:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9ce:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9d2:	6053      	str	r3, [r2, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9d4:	d023      	beq.n	800ba1e <HAL_SPI_TransmitReceive+0x3c2>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9dc:	d108      	bne.n	800b9f0 <HAL_SPI_TransmitReceive+0x394>
          SPI_RESET_CRC(hspi);
 800b9de:	6813      	ldr	r3, [r2, #0]
 800b9e0:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800b9e4:	400b      	ands	r3, r1
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	6813      	ldr	r3, [r2, #0]
 800b9ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b9ee:	6013      	str	r3, [r2, #0]
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b9f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
        hspi->State= HAL_SPI_STATE_READY;
 800b9f2:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800b9f4:	2100      	movs	r1, #0
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b9f6:	f043 0302 	orr.w	r3, r3, #2
        hspi->State= HAL_SPI_STATE_READY;
 800b9fa:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b9fe:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ba02:	6623      	str	r3, [r4, #96]	; 0x60
 800ba04:	e79e      	b.n	800b944 <HAL_SPI_TransmitReceive+0x2e8>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba0c:	d002      	beq.n	800ba14 <HAL_SPI_TransmitReceive+0x3b8>
 800ba0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba12:	d1af      	bne.n	800b974 <HAL_SPI_TransmitReceive+0x318>
          __HAL_SPI_DISABLE(hspi);
 800ba14:	6813      	ldr	r3, [r2, #0]
 800ba16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	e7aa      	b.n	800b974 <HAL_SPI_TransmitReceive+0x318>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba24:	d002      	beq.n	800ba2c <HAL_SPI_TransmitReceive+0x3d0>
 800ba26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba2a:	d1d4      	bne.n	800b9d6 <HAL_SPI_TransmitReceive+0x37a>
          __HAL_SPI_DISABLE(hspi);
 800ba2c:	6813      	ldr	r3, [r2, #0]
 800ba2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	e7cf      	b.n	800b9d6 <HAL_SPI_TransmitReceive+0x37a>
 800ba36:	bf00      	nop

0800ba38 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3c:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800ba3e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 800ba42:	b082      	sub	sp, #8
  if(huart->gState == HAL_UART_STATE_READY)
 800ba44:	2b20      	cmp	r3, #32
 800ba46:	d147      	bne.n	800bad8 <HAL_UART_Transmit+0xa0>
 800ba48:	4688      	mov	r8, r1
  {
    if((pData == NULL ) || (Size == 0U))
 800ba4a:	2900      	cmp	r1, #0
 800ba4c:	d048      	beq.n	800bae0 <HAL_UART_Transmit+0xa8>
 800ba4e:	fab2 f382 	clz	r3, r2
 800ba52:	9201      	str	r2, [sp, #4]
 800ba54:	095b      	lsrs	r3, r3, #5
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d142      	bne.n	800bae0 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba5a:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 800ba5e:	4605      	mov	r5, r0
 800ba60:	2901      	cmp	r1, #1
 800ba62:	d039      	beq.n	800bad8 <HAL_UART_Transmit+0xa0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba64:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 800ba66:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba68:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800ba6a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba6e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ba72:	f7fd fc53 	bl	800931c <HAL_GetTick>

    huart->TxXferSize = Size;
 800ba76:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800ba78:	4607      	mov	r7, r0
 800ba7a:	682c      	ldr	r4, [r5, #0]
    huart->TxXferSize = Size;
 800ba7c:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
    huart->TxXferCount = Size;
 800ba80:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800ba84:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	b1c3      	cbz	r3, 800babe <HAL_UART_Transmit+0x86>
    {
      huart->TxXferCount--;
 800ba8c:	f8b5 2052 	ldrh.w	r2, [r5, #82]	; 0x52
 800ba90:	3a01      	subs	r2, #1
 800ba92:	b292      	uxth	r2, r2
 800ba94:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
 800ba98:	1c72      	adds	r2, r6, #1
 800ba9a:	d125      	bne.n	800bae8 <HAL_UART_Transmit+0xb0>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba9c:	69e2      	ldr	r2, [r4, #28]
 800ba9e:	0613      	lsls	r3, r2, #24
 800baa0:	d5fc      	bpl.n	800ba9c <HAL_UART_Transmit+0x64>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa2:	68ab      	ldr	r3, [r5, #8]
 800baa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa8:	d03c      	beq.n	800bb24 <HAL_UART_Transmit+0xec>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800baaa:	f898 3000 	ldrb.w	r3, [r8]
 800baae:	f108 0801 	add.w	r8, r8, #1
 800bab2:	62a3      	str	r3, [r4, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800bab4:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800bab8:	b29b      	uxth	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e6      	bne.n	800ba8c <HAL_UART_Transmit+0x54>
 800babe:	1c71      	adds	r1, r6, #1
 800bac0:	d139      	bne.n	800bb36 <HAL_UART_Transmit+0xfe>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac2:	69e3      	ldr	r3, [r4, #28]
 800bac4:	065a      	lsls	r2, r3, #25
 800bac6:	d5fc      	bpl.n	800bac2 <HAL_UART_Transmit+0x8a>
    __HAL_UNLOCK(huart);
 800bac8:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 800baca:	2220      	movs	r2, #32
    return HAL_OK;
 800bacc:	4618      	mov	r0, r3
    huart->gState = HAL_UART_STATE_READY;
 800bace:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800bad2:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
    return HAL_OK;
 800bad6:	e000      	b.n	800bada <HAL_UART_Transmit+0xa2>
    return HAL_BUSY;
 800bad8:	2002      	movs	r0, #2
}
 800bada:	b002      	add	sp, #8
 800badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800bae0:	2001      	movs	r0, #1
}
 800bae2:	b002      	add	sp, #8
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bae8:	69e3      	ldr	r3, [r4, #28]
 800baea:	0618      	lsls	r0, r3, #24
 800baec:	d4d9      	bmi.n	800baa2 <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800baee:	b12e      	cbz	r6, 800bafc <HAL_UART_Transmit+0xc4>
 800baf0:	f7fd fc14 	bl	800931c <HAL_GetTick>
 800baf4:	1bc0      	subs	r0, r0, r7
 800baf6:	682c      	ldr	r4, [r5, #0]
 800baf8:	4286      	cmp	r6, r0
 800bafa:	d8cd      	bhi.n	800ba98 <HAL_UART_Transmit+0x60>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bafc:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 800bafe:	2220      	movs	r2, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb00:	2100      	movs	r1, #0
      return HAL_TIMEOUT;
 800bb02:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb08:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb0a:	68a3      	ldr	r3, [r4, #8]
 800bb0c:	f023 0301 	bic.w	r3, r3, #1
 800bb10:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 800bb12:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800bb16:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800bb1a:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
}
 800bb1e:	b002      	add	sp, #8
 800bb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb24:	692b      	ldr	r3, [r5, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1bf      	bne.n	800baaa <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800bb2a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800bb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb32:	62a3      	str	r3, [r4, #40]	; 0x28
        pData += 2;
 800bb34:	e7a6      	b.n	800ba84 <HAL_UART_Transmit+0x4c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb36:	69e3      	ldr	r3, [r4, #28]
 800bb38:	065b      	lsls	r3, r3, #25
 800bb3a:	d4c5      	bmi.n	800bac8 <HAL_UART_Transmit+0x90>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800bb3c:	2e00      	cmp	r6, #0
 800bb3e:	d0dd      	beq.n	800bafc <HAL_UART_Transmit+0xc4>
 800bb40:	f7fd fbec 	bl	800931c <HAL_GetTick>
 800bb44:	1bc0      	subs	r0, r0, r7
 800bb46:	682c      	ldr	r4, [r5, #0]
 800bb48:	4286      	cmp	r6, r0
 800bb4a:	d8b8      	bhi.n	800babe <HAL_UART_Transmit+0x86>
 800bb4c:	e7d6      	b.n	800bafc <HAL_UART_Transmit+0xc4>
 800bb4e:	bf00      	nop

0800bb50 <HAL_UART_Receive>:
{
 800bb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb54:	4699      	mov	r9, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800bb56:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 800bb5a:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY)
 800bb5c:	2b20      	cmp	r3, #32
 800bb5e:	d150      	bne.n	800bc02 <HAL_UART_Receive+0xb2>
 800bb60:	4688      	mov	r8, r1
    if((pData == NULL ) || (Size == 0U))
 800bb62:	2900      	cmp	r1, #0
 800bb64:	d051      	beq.n	800bc0a <HAL_UART_Receive+0xba>
 800bb66:	fab2 f382 	clz	r3, r2
 800bb6a:	9201      	str	r2, [sp, #4]
 800bb6c:	095b      	lsrs	r3, r3, #5
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d14b      	bne.n	800bc0a <HAL_UART_Receive+0xba>
    __HAL_LOCK(huart);
 800bb72:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 800bb76:	4605      	mov	r5, r0
 800bb78:	2901      	cmp	r1, #1
 800bb7a:	d042      	beq.n	800bc02 <HAL_UART_Receive+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb7c:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 800bb7e:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb80:	2322      	movs	r3, #34	; 0x22
    __HAL_LOCK(huart);
 800bb82:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb86:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 800bb8a:	f7fd fbc7 	bl	800931c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800bb8e:	68ab      	ldr	r3, [r5, #8]
    huart->RxXferSize = Size;
 800bb90:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800bb92:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 800bb94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800bb98:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
    huart->RxXferCount = Size;
 800bb9c:	f8a5 205a 	strh.w	r2, [r5, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800bba0:	d05f      	beq.n	800bc62 <HAL_UART_Receive+0x112>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d165      	bne.n	800bc72 <HAL_UART_Receive+0x122>
 800bba6:	692b      	ldr	r3, [r5, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d168      	bne.n	800bc7e <HAL_UART_Receive+0x12e>
 800bbac:	26ff      	movs	r6, #255	; 0xff
 800bbae:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800bbb2:	f8b5 005a 	ldrh.w	r0, [r5, #90]	; 0x5a
 800bbb6:	b280      	uxth	r0, r0
 800bbb8:	b1d8      	cbz	r0, 800bbf2 <HAL_UART_Receive+0xa2>
      huart->RxXferCount--;
 800bbba:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
 800bbbe:	3a01      	subs	r2, #1
 800bbc0:	b292      	uxth	r2, r2
 800bbc2:	f8a5 205a 	strh.w	r2, [r5, #90]	; 0x5a
 800bbc6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbca:	682c      	ldr	r4, [r5, #0]
 800bbcc:	d121      	bne.n	800bc12 <HAL_UART_Receive+0xc2>
 800bbce:	69e2      	ldr	r2, [r4, #28]
 800bbd0:	0692      	lsls	r2, r2, #26
 800bbd2:	d5fc      	bpl.n	800bbce <HAL_UART_Receive+0x7e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbd4:	68ab      	ldr	r3, [r5, #8]
 800bbd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbda:	d03a      	beq.n	800bc52 <HAL_UART_Receive+0x102>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bbdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbde:	f108 0801 	add.w	r8, r8, #1
 800bbe2:	4033      	ands	r3, r6
 800bbe4:	f808 3c01 	strb.w	r3, [r8, #-1]
    while(huart->RxXferCount > 0U)
 800bbe8:	f8b5 005a 	ldrh.w	r0, [r5, #90]	; 0x5a
 800bbec:	b280      	uxth	r0, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d1e3      	bne.n	800bbba <HAL_UART_Receive+0x6a>
    huart->RxState = HAL_UART_STATE_READY;
 800bbf2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800bbf4:	f885 0068 	strb.w	r0, [r5, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 800bbf8:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
}
 800bbfc:	b003      	add	sp, #12
 800bbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800bc02:	2002      	movs	r0, #2
}
 800bc04:	b003      	add	sp, #12
 800bc06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800bc0a:	2001      	movs	r0, #1
}
 800bc0c:	b003      	add	sp, #12
 800bc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc12:	69e3      	ldr	r3, [r4, #28]
 800bc14:	069b      	lsls	r3, r3, #26
 800bc16:	d4dd      	bmi.n	800bbd4 <HAL_UART_Receive+0x84>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	d005      	beq.n	800bc2a <HAL_UART_Receive+0xda>
 800bc1e:	f7fd fb7d 	bl	800931c <HAL_GetTick>
 800bc22:	1bc0      	subs	r0, r0, r7
 800bc24:	4581      	cmp	r9, r0
 800bc26:	d8ce      	bhi.n	800bbc6 <HAL_UART_Receive+0x76>
 800bc28:	682c      	ldr	r4, [r5, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc2a:	6823      	ldr	r3, [r4, #0]
        huart->gState = HAL_UART_STATE_READY;
 800bc2c:	2220      	movs	r2, #32
        __HAL_UNLOCK(huart);
 800bc2e:	2100      	movs	r1, #0
        return HAL_TIMEOUT;
 800bc30:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc36:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc38:	68a3      	ldr	r3, [r4, #8]
 800bc3a:	f023 0301 	bic.w	r3, r3, #1
 800bc3e:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 800bc40:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800bc44:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800bc48:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
}
 800bc4c:	b003      	add	sp, #12
 800bc4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc52:	692b      	ldr	r3, [r5, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1c1      	bne.n	800bbdc <HAL_UART_Receive+0x8c>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800bc58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc5a:	4033      	ands	r3, r6
 800bc5c:	f828 3b02 	strh.w	r3, [r8], #2
        pData +=2U;
 800bc60:	e7a7      	b.n	800bbb2 <HAL_UART_Receive+0x62>
    UART_MASK_COMPUTATION(huart);
 800bc62:	692b      	ldr	r3, [r5, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1a1      	bne.n	800bbac <HAL_UART_Receive+0x5c>
 800bc68:	f240 16ff 	movw	r6, #511	; 0x1ff
 800bc6c:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
 800bc70:	e79f      	b.n	800bbb2 <HAL_UART_Receive+0x62>
 800bc72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc76:	d006      	beq.n	800bc86 <HAL_UART_Receive+0x136>
 800bc78:	f8b5 605c 	ldrh.w	r6, [r5, #92]	; 0x5c
 800bc7c:	e799      	b.n	800bbb2 <HAL_UART_Receive+0x62>
 800bc7e:	267f      	movs	r6, #127	; 0x7f
 800bc80:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
 800bc84:	e795      	b.n	800bbb2 <HAL_UART_Receive+0x62>
 800bc86:	692b      	ldr	r3, [r5, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d0f8      	beq.n	800bc7e <HAL_UART_Receive+0x12e>
 800bc8c:	263f      	movs	r6, #63	; 0x3f
 800bc8e:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800bc92:	e78e      	b.n	800bbb2 <HAL_UART_Receive+0x62>

0800bc94 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bc96:	07da      	lsls	r2, r3, #31
{
 800bc98:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc9a:	d506      	bpl.n	800bcaa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc9c:	6801      	ldr	r1, [r0, #0]
 800bc9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bca0:	684a      	ldr	r2, [r1, #4]
 800bca2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bca6:	4322      	orrs	r2, r4
 800bca8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcaa:	079c      	lsls	r4, r3, #30
 800bcac:	d506      	bpl.n	800bcbc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcae:	6801      	ldr	r1, [r0, #0]
 800bcb0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800bcb2:	684a      	ldr	r2, [r1, #4]
 800bcb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bcb8:	4322      	orrs	r2, r4
 800bcba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcbc:	0759      	lsls	r1, r3, #29
 800bcbe:	d506      	bpl.n	800bcce <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcc0:	6801      	ldr	r1, [r0, #0]
 800bcc2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800bcc4:	684a      	ldr	r2, [r1, #4]
 800bcc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bcca:	4322      	orrs	r2, r4
 800bccc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcce:	071a      	lsls	r2, r3, #28
 800bcd0:	d506      	bpl.n	800bce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcd2:	6801      	ldr	r1, [r0, #0]
 800bcd4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bcd6:	684a      	ldr	r2, [r1, #4]
 800bcd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bcdc:	4322      	orrs	r2, r4
 800bcde:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bce0:	06dc      	lsls	r4, r3, #27
 800bce2:	d506      	bpl.n	800bcf2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bce4:	6801      	ldr	r1, [r0, #0]
 800bce6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800bce8:	688a      	ldr	r2, [r1, #8]
 800bcea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bcee:	4322      	orrs	r2, r4
 800bcf0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcf2:	0699      	lsls	r1, r3, #26
 800bcf4:	d506      	bpl.n	800bd04 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcf6:	6801      	ldr	r1, [r0, #0]
 800bcf8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800bcfa:	688a      	ldr	r2, [r1, #8]
 800bcfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd00:	4322      	orrs	r2, r4
 800bd02:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd04:	065a      	lsls	r2, r3, #25
 800bd06:	d50a      	bpl.n	800bd1e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd08:	6801      	ldr	r1, [r0, #0]
 800bd0a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800bd0c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd0e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd12:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800bd16:	ea42 0204 	orr.w	r2, r2, r4
 800bd1a:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd1c:	d00b      	beq.n	800bd36 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd1e:	061b      	lsls	r3, r3, #24
 800bd20:	d506      	bpl.n	800bd30 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd22:	6802      	ldr	r2, [r0, #0]
 800bd24:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bd26:	6853      	ldr	r3, [r2, #4]
 800bd28:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bd2c:	430b      	orrs	r3, r1
 800bd2e:	6053      	str	r3, [r2, #4]
  }
}
 800bd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd34:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd36:	684a      	ldr	r2, [r1, #4]
 800bd38:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800bd3a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800bd3e:	4322      	orrs	r2, r4
 800bd40:	604a      	str	r2, [r1, #4]
 800bd42:	e7ec      	b.n	800bd1e <UART_AdvFeatureConfig+0x8a>

0800bd44 <HAL_UART_Init>:
  if(huart == NULL)
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f000 8129 	beq.w	800bf9c <HAL_UART_Init+0x258>
{
 800bd4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 800bd4c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800bd50:	4604      	mov	r4, r0
 800bd52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d047      	beq.n	800bdea <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 800bd5a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bd5c:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd5e:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800bd60:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd64:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800bd66:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd68:	4302      	orrs	r2, r0
 800bd6a:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800bd6c:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bd70:	4dbb      	ldr	r5, [pc, #748]	; (800c060 <HAL_UART_Init+0x31c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd72:	4302      	orrs	r2, r0
 800bd74:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800bd76:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bd78:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd7a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd7c:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bd7e:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800bd80:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bd82:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800bd84:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800bd86:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800bd88:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd8c:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd8e:	4db5      	ldr	r5, [pc, #724]	; (800c064 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd90:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd94:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd96:	ea41 0106 	orr.w	r1, r1, r6
 800bd9a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800bd9c:	6899      	ldr	r1, [r3, #8]
 800bd9e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800bda2:	ea42 0201 	orr.w	r2, r2, r1
 800bda6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bda8:	d024      	beq.n	800bdf4 <HAL_UART_Init+0xb0>
 800bdaa:	4aaf      	ldr	r2, [pc, #700]	; (800c068 <HAL_UART_Init+0x324>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d043      	beq.n	800be38 <HAL_UART_Init+0xf4>
 800bdb0:	4aae      	ldr	r2, [pc, #696]	; (800c06c <HAL_UART_Init+0x328>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	f000 80a2 	beq.w	800befc <HAL_UART_Init+0x1b8>
 800bdb8:	4aad      	ldr	r2, [pc, #692]	; (800c070 <HAL_UART_Init+0x32c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d045      	beq.n	800be4a <HAL_UART_Init+0x106>
 800bdbe:	4aad      	ldr	r2, [pc, #692]	; (800c074 <HAL_UART_Init+0x330>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	f000 80b2 	beq.w	800bf2a <HAL_UART_Init+0x1e6>
 800bdc6:	4aac      	ldr	r2, [pc, #688]	; (800c078 <HAL_UART_Init+0x334>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	f000 8134 	beq.w	800c036 <HAL_UART_Init+0x2f2>
 800bdce:	4aab      	ldr	r2, [pc, #684]	; (800c07c <HAL_UART_Init+0x338>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	f000 8163 	beq.w	800c09c <HAL_UART_Init+0x358>
 800bdd6:	4aaa      	ldr	r2, [pc, #680]	; (800c080 <HAL_UART_Init+0x33c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	f000 8119 	beq.w	800c010 <HAL_UART_Init+0x2cc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bde2:	f000 8170 	beq.w	800c0c6 <HAL_UART_Init+0x382>
    return HAL_ERROR;
 800bde6:	2001      	movs	r0, #1
}
 800bde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800bdea:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800bdee:	f005 ff03 	bl	8011bf8 <HAL_UART_MspInit>
 800bdf2:	e7b2      	b.n	800bd5a <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdf4:	4aa3      	ldr	r2, [pc, #652]	; (800c084 <HAL_UART_Init+0x340>)
 800bdf6:	49a4      	ldr	r1, [pc, #656]	; (800c088 <HAL_UART_Init+0x344>)
 800bdf8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800bdfc:	f002 0203 	and.w	r2, r2, #3
 800be00:	5c8a      	ldrb	r2, [r1, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800be06:	d02f      	beq.n	800be68 <HAL_UART_Init+0x124>
    switch (clocksource)
 800be08:	2a08      	cmp	r2, #8
 800be0a:	d8ec      	bhi.n	800bde6 <HAL_UART_Init+0xa2>
 800be0c:	a101      	add	r1, pc, #4	; (adr r1, 800be14 <HAL_UART_Init+0xd0>)
 800be0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be12:	bf00      	nop
 800be14:	0800bef7 	.word	0x0800bef7
 800be18:	0800be91 	.word	0x0800be91
 800be1c:	0800bf19 	.word	0x0800bf19
 800be20:	0800bde7 	.word	0x0800bde7
 800be24:	0800bf43 	.word	0x0800bf43
 800be28:	0800bde7 	.word	0x0800bde7
 800be2c:	0800bde7 	.word	0x0800bde7
 800be30:	0800bde7 	.word	0x0800bde7
 800be34:	0800bf49 	.word	0x0800bf49
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be38:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800be3c:	4993      	ldr	r1, [pc, #588]	; (800c08c <HAL_UART_Init+0x348>)
 800be3e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800be42:	f002 020c 	and.w	r2, r2, #12
 800be46:	5c8a      	ldrb	r2, [r1, r2]
 800be48:	e7db      	b.n	800be02 <HAL_UART_Init+0xbe>
 800be4a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800be4e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800be52:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800be56:	2a40      	cmp	r2, #64	; 0x40
 800be58:	d070      	beq.n	800bf3c <HAL_UART_Init+0x1f8>
 800be5a:	d945      	bls.n	800bee8 <HAL_UART_Init+0x1a4>
 800be5c:	2a80      	cmp	r2, #128	; 0x80
 800be5e:	d058      	beq.n	800bf12 <HAL_UART_Init+0x1ce>
 800be60:	2ac0      	cmp	r2, #192	; 0xc0
 800be62:	f000 80a5 	beq.w	800bfb0 <HAL_UART_Init+0x26c>
 800be66:	e7ba      	b.n	800bdde <HAL_UART_Init+0x9a>
    switch (clocksource)
 800be68:	2a08      	cmp	r2, #8
 800be6a:	f200 812c 	bhi.w	800c0c6 <HAL_UART_Init+0x382>
 800be6e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800be72:	00cc      	.short	0x00cc
 800be74:	00c700b0 	.word	0x00c700b0
 800be78:	00c4012a 	.word	0x00c4012a
 800be7c:	012a012a 	.word	0x012a012a
 800be80:	00a2012a 	.word	0x00a2012a
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be84:	2a00      	cmp	r2, #0
 800be86:	d1aa      	bne.n	800bdde <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800be8c:	f000 80a1 	beq.w	800bfd2 <HAL_UART_Init+0x28e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800be90:	f7fe fec8 	bl	800ac24 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800be94:	e9d4 3100 	ldrd	r3, r1, [r4]
 800be98:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 800be9c:	fbb2 f2f1 	udiv	r2, r2, r1
 800bea0:	b292      	uxth	r2, r2
 800bea2:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bea4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	d157      	bne.n	800bf5a <HAL_UART_Init+0x216>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beaa:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beac:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800beb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800beb4:	689a      	ldr	r2, [r3, #8]
 800beb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800beba:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	f042 0201 	orr.w	r2, r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec4:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bec6:	f7fd fa29 	bl	800931c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800beca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800becc:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	0712      	lsls	r2, r2, #28
 800bed2:	d447      	bmi.n	800bf64 <HAL_UART_Init+0x220>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800bed4:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bed6:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 800bed8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 800bedc:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 800bede:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 800bee2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 800bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bee8:	2a00      	cmp	r2, #0
 800beea:	f47f af78 	bne.w	800bdde <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800beee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bef2:	f000 808a 	beq.w	800c00a <HAL_UART_Init+0x2c6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800bef6:	f7fe fe85 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 800befa:	e7cb      	b.n	800be94 <HAL_UART_Init+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800befc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800bf00:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800bf04:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800bf08:	2a10      	cmp	r2, #16
 800bf0a:	d017      	beq.n	800bf3c <HAL_UART_Init+0x1f8>
 800bf0c:	d9ec      	bls.n	800bee8 <HAL_UART_Init+0x1a4>
 800bf0e:	2a20      	cmp	r2, #32
 800bf10:	d170      	bne.n	800bff4 <HAL_UART_Init+0x2b0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf12:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bf16:	d073      	beq.n	800c000 <HAL_UART_Init+0x2bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bf18:	6861      	ldr	r1, [r4, #4]
 800bf1a:	4a5d      	ldr	r2, [pc, #372]	; (800c090 <HAL_UART_Init+0x34c>)
 800bf1c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800bf20:	fbb2 f2f1 	udiv	r2, r2, r1
 800bf24:	b292      	uxth	r2, r2
 800bf26:	60da      	str	r2, [r3, #12]
 800bf28:	e7bc      	b.n	800bea4 <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf2a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800bf2e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800bf32:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800bf36:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bf3a:	d131      	bne.n	800bfa0 <HAL_UART_Init+0x25c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bf40:	d05b      	beq.n	800bffa <HAL_UART_Init+0x2b6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bf42:	f7fe fe2b 	bl	800ab9c <HAL_RCC_GetSysClockFreq>
 800bf46:	e7a5      	b.n	800be94 <HAL_UART_Init+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bf48:	6861      	ldr	r1, [r4, #4]
 800bf4a:	084a      	lsrs	r2, r1, #1
 800bf4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800bf50:	fbb2 f2f1 	udiv	r2, r2, r1
 800bf54:	b292      	uxth	r2, r2
 800bf56:	60da      	str	r2, [r3, #12]
 800bf58:	e7a4      	b.n	800bea4 <HAL_UART_Init+0x160>
    UART_AdvFeatureConfig(huart);
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f7ff fe9a 	bl	800bc94 <UART_AdvFeatureConfig>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	e7a2      	b.n	800beaa <HAL_UART_Init+0x166>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800bf64:	4f4b      	ldr	r7, [pc, #300]	; (800c094 <HAL_UART_Init+0x350>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf66:	69dd      	ldr	r5, [r3, #28]
 800bf68:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800bf6c:	d1b2      	bne.n	800bed4 <HAL_UART_Init+0x190>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800bf6e:	f7fd f9d5 	bl	800931c <HAL_GetTick>
 800bf72:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf74:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800bf76:	42b8      	cmp	r0, r7
 800bf78:	d9f5      	bls.n	800bf66 <HAL_UART_Init+0x222>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf7a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800bf7c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 800bf7e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bf84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	f022 0201 	bic.w	r2, r2, #1
 800bf8c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800bf8e:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800bf92:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800bf96:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
}
 800bf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bf9c:	2001      	movs	r0, #1
}
 800bf9e:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfa0:	d9a2      	bls.n	800bee8 <HAL_UART_Init+0x1a4>
 800bfa2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bfa6:	d0b4      	beq.n	800bf12 <HAL_UART_Init+0x1ce>
 800bfa8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800bfac:	f47f af17 	bne.w	800bdde <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfb0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bfb4:	d1c8      	bne.n	800bf48 <HAL_UART_Init+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bfb6:	6861      	ldr	r1, [r4, #4]
 800bfb8:	084a      	lsrs	r2, r1, #1
 800bfba:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800bfbe:	fbb2 f2f1 	udiv	r2, r2, r1
    brrtemp = usartdiv & 0xFFF0U;
 800bfc2:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfc6:	f3c2 0242 	ubfx	r2, r2, #1, #3
    brrtemp = usartdiv & 0xFFF0U;
 800bfca:	b289      	uxth	r1, r1
    huart->Instance->BRR = brrtemp;
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	60da      	str	r2, [r3, #12]
 800bfd0:	e768      	b.n	800bea4 <HAL_UART_Init+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bfd2:	f7fe fe27 	bl	800ac24 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = brrtemp;
 800bfd6:	e9d4 3100 	ldrd	r3, r1, [r4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bfda:	084a      	lsrs	r2, r1, #1
 800bfdc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800bfe0:	fbb0 f0f1 	udiv	r0, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 800bfe4:	f020 020f 	bic.w	r2, r0, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfe8:	f3c0 0042 	ubfx	r0, r0, #1, #3
    brrtemp = usartdiv & 0xFFF0U;
 800bfec:	b292      	uxth	r2, r2
    huart->Instance->BRR = brrtemp;
 800bfee:	4310      	orrs	r0, r2
 800bff0:	60d8      	str	r0, [r3, #12]
 800bff2:	e757      	b.n	800bea4 <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bff4:	2a30      	cmp	r2, #48	; 0x30
 800bff6:	d0db      	beq.n	800bfb0 <HAL_UART_Init+0x26c>
 800bff8:	e6f1      	b.n	800bdde <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bffa:	f7fe fdcf 	bl	800ab9c <HAL_RCC_GetSysClockFreq>
 800bffe:	e7ea      	b.n	800bfd6 <HAL_UART_Init+0x292>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c000:	6861      	ldr	r1, [r4, #4]
 800c002:	4a25      	ldr	r2, [pc, #148]	; (800c098 <HAL_UART_Init+0x354>)
 800c004:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800c008:	e7d9      	b.n	800bfbe <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c00a:	f7fe fdfb 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 800c00e:	e7e2      	b.n	800bfd6 <HAL_UART_Init+0x292>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c010:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800c014:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800c018:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800c01c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800c020:	d08c      	beq.n	800bf3c <HAL_UART_Init+0x1f8>
 800c022:	f67f af61 	bls.w	800bee8 <HAL_UART_Init+0x1a4>
 800c026:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c02a:	f43f af72 	beq.w	800bf12 <HAL_UART_Init+0x1ce>
 800c02e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800c032:	d0bd      	beq.n	800bfb0 <HAL_UART_Init+0x26c>
 800c034:	e6d3      	b.n	800bdde <HAL_UART_Init+0x9a>
 800c036:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800c03a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800c03e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800c042:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c046:	f43f af79 	beq.w	800bf3c <HAL_UART_Init+0x1f8>
 800c04a:	f67f af1b 	bls.w	800be84 <HAL_UART_Init+0x140>
 800c04e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c052:	f43f af5e 	beq.w	800bf12 <HAL_UART_Init+0x1ce>
 800c056:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800c05a:	d0a9      	beq.n	800bfb0 <HAL_UART_Init+0x26c>
 800c05c:	e6bf      	b.n	800bdde <HAL_UART_Init+0x9a>
 800c05e:	bf00      	nop
 800c060:	efff69f3 	.word	0xefff69f3
 800c064:	40011000 	.word	0x40011000
 800c068:	40004400 	.word	0x40004400
 800c06c:	40004800 	.word	0x40004800
 800c070:	40004c00 	.word	0x40004c00
 800c074:	40005000 	.word	0x40005000
 800c078:	40011400 	.word	0x40011400
 800c07c:	40007800 	.word	0x40007800
 800c080:	40007c00 	.word	0x40007c00
 800c084:	40023800 	.word	0x40023800
 800c088:	08031f38 	.word	0x08031f38
 800c08c:	08031f3c 	.word	0x08031f3c
 800c090:	00f42400 	.word	0x00f42400
 800c094:	01fffffe 	.word	0x01fffffe
 800c098:	01e84800 	.word	0x01e84800
 800c09c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800c0a0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800c0a4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800c0a8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c0ac:	f43f af46 	beq.w	800bf3c <HAL_UART_Init+0x1f8>
 800c0b0:	f67f af1a 	bls.w	800bee8 <HAL_UART_Init+0x1a4>
 800c0b4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c0b8:	f43f af2b 	beq.w	800bf12 <HAL_UART_Init+0x1ce>
 800c0bc:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800c0c0:	f43f af76 	beq.w	800bfb0 <HAL_UART_Init+0x26c>
 800c0c4:	e68b      	b.n	800bdde <HAL_UART_Init+0x9a>
    huart->Instance->BRR = brrtemp;
 800c0c6:	2200      	movs	r2, #0
    return HAL_ERROR;
 800c0c8:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 800c0ca:	60da      	str	r2, [r3, #12]
}
 800c0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ce:	bf00      	nop

0800c0d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c0d4:	680f      	ldr	r7, [r1, #0]
 800c0d6:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800c0da:	2f01      	cmp	r7, #1
 800c0dc:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 800c0e0:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 800c0e4:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 800c0e8:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 800c0ec:	d012      	beq.n	800c114 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c0ee:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c0f0:	4f15      	ldr	r7, [pc, #84]	; (800c148 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c0f2:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c0f4:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c0f8:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c0fa:	4322      	orrs	r2, r4
 800c0fc:	ea42 0308 	orr.w	r3, r2, r8
 800c100:	ea43 030c 	orr.w	r3, r3, ip
 800c104:	4333      	orrs	r3, r6
 800c106:	432b      	orrs	r3, r5
 800c108:	430b      	orrs	r3, r1
 800c10a:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c10c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800c10e:	2000      	movs	r0, #0
 800c110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c114:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c118:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c11a:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c11c:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c120:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c124:	4c08      	ldr	r4, [pc, #32]	; (800c148 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c126:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c12a:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c12c:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c130:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c134:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c136:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c138:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c13a:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c13c:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c13e:	6043      	str	r3, [r0, #4]
}
 800c140:	2000      	movs	r0, #0
 800c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c146:	bf00      	nop
 800c148:	ffff8000 	.word	0xffff8000

0800c14c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c152:	2a01      	cmp	r2, #1
 800c154:	68cf      	ldr	r7, [r1, #12]
 800c156:	694e      	ldr	r6, [r1, #20]
 800c158:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c15c:	684d      	ldr	r5, [r1, #4]
 800c15e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800c162:	688c      	ldr	r4, [r1, #8]
 800c164:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800c168:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800c16c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800c170:	6809      	ldr	r1, [r1, #0]
 800c172:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c176:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c17a:	ea4f 3707 	mov.w	r7, r7, lsl #12
 800c17e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800c182:	ea4f 5606 	mov.w	r6, r6, lsl #20
 800c186:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c18a:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800c18e:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 800c192:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 800c196:	d012      	beq.n	800c1be <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c198:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c19c:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c19e:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c1a2:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c1a6:	ea42 0305 	orr.w	r3, r2, r5
 800c1aa:	430b      	orrs	r3, r1
 800c1ac:	ea43 030e 	orr.w	r3, r3, lr
 800c1b0:	ea43 030c 	orr.w	r3, r3, ip
 800c1b4:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c1b6:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c1be:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c1c0:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c1c4:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c1c6:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c1ca:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c1cc:	4e07      	ldr	r6, [pc, #28]	; (800c1ec <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c1ce:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c1d2:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c1d6:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c1d8:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c1dc:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c1de:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c1e0:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c1e2:	60c3      	str	r3, [r0, #12]
}
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ea:	bf00      	nop
 800c1ec:	ff0f0fff 	.word	0xff0f0fff

0800c1f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c1f0:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 800c1f2:	2200      	movs	r2, #0
{
 800c1f4:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c1f6:	684d      	ldr	r5, [r1, #4]
{
 800c1f8:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c1fa:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800c1fc:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 800c1fe:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c200:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c202:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c206:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c20a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c20c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c210:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800c212:	9b01      	ldr	r3, [sp, #4]
 800c214:	6123      	str	r3, [r4, #16]
}
 800c216:	b002      	add	sp, #8
 800c218:	bc30      	pop	{r4, r5}
 800c21a:	4770      	bx	lr

0800c21c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c21c:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 800c21e:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800c220:	6953      	ldr	r3, [r2, #20]
 800c222:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800c226:	6151      	str	r1, [r2, #20]
}
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop

0800c22c <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv>:
}

uint8_t JPEGDecoder::pjpeg_callback(uint8_t *pBuf, uint8_t buf_size,
                                    uint8_t *pBytes_actually_read,
                                    void *pCallback_data) {
  JPEGDecoder *thisPtr = JpegDec.thisPtr;
 800c22c:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x40>)
 800c22e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                                    void *pCallback_data) {
 800c230:	b470      	push	{r4, r5, r6}
uint8_t JPEGDecoder::pjpeg_need_bytes_callback(uint8_t *pBuf, uint8_t buf_size,
                                               uint8_t *pBytes_actually_read,
                                               void *pCallback_data) {
  uint n;

  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 800c232:	e9d3 460f 	ldrd	r4, r6, [r3, #60]	; 0x3c

  if (jpg_source == JPEG_ARRAY) {
 800c236:	f893 5059 	ldrb.w	r5, [r3, #89]	; 0x59
  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 800c23a:	1ba4      	subs	r4, r4, r6
 800c23c:	42a1      	cmp	r1, r4
 800c23e:	bf28      	it	cs
 800c240:	4621      	movcs	r1, r4
  if (jpg_source == JPEG_ARRAY) {
 800c242:	b95d      	cbnz	r5, 800c25c <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x30>
    for (int i = 0; i < n; i++) {
 800c244:	b151      	cbz	r1, 800c25c <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x30>
 800c246:	1846      	adds	r6, r0, r1
 800c248:	3801      	subs	r0, #1
 800c24a:	3e01      	subs	r6, #1
      pBuf[i] = *jpg_data++;
 800c24c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800c24e:	1c65      	adds	r5, r4, #1
 800c250:	65dd      	str	r5, [r3, #92]	; 0x5c
 800c252:	7824      	ldrb	r4, [r4, #0]
 800c254:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (int i = 0; i < n; i++) {
 800c258:	4286      	cmp	r6, r0
 800c25a:	d1f7      	bne.n	800c24c <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x20>
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    g_pInFileSd.read(pBuf, n);
#endif

  *pBytes_actually_read = (uint8_t)(n);
 800c25c:	7011      	strb	r1, [r2, #0]
}
 800c25e:	2000      	movs	r0, #0
  g_nInFileOfs += n;
 800c260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c262:	4411      	add	r1, r2
}
 800c264:	bc70      	pop	{r4, r5, r6}
  g_nInFileOfs += n;
 800c266:	6419      	str	r1, [r3, #64]	; 0x40
}
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	20009044 	.word	0x20009044

0800c270 <_ZN11JPEGDecoder4readEv>:
    }
  }
  return 1;
}

int JPEGDecoder::read(void) {
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800c276:	b095      	sub	sp, #84	; 0x54
  int y, x;
  uint16_t *pDst_row;

  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800c278:	6b03      	ldr	r3, [r0, #48]	; 0x30
int JPEGDecoder::read(void) {
 800c27a:	900a      	str	r0, [sp, #40]	; 0x28
 800c27c:	9106      	str	r1, [sp, #24]
  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f000 80f8 	beq.w	800c474 <_ZN11JPEGDecoder4readEv+0x204>
 800c284:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800c286:	6943      	ldr	r3, [r0, #20]
 800c288:	9212      	str	r2, [sp, #72]	; 0x48
 800c28a:	429a      	cmp	r2, r3
 800c28c:	f280 80f2 	bge.w	800c474 <_ZN11JPEGDecoder4readEv+0x204>
    abort();
    return 0;
  }

  pDst_row = pImage;
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800c290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c292:	6a13      	ldr	r3, [r2, #32]
 800c294:	4611      	mov	r1, r2
 800c296:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800c298:	2b00      	cmp	r3, #0
 800c29a:	9713      	str	r7, [sp, #76]	; 0x4c
 800c29c:	f340 80fa 	ble.w	800c494 <_ZN11JPEGDecoder4readEv+0x224>
 800c2a0:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800c2a2:	4616      	mov	r6, r2

    const int by_limit =
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));

    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800c2a4:	69cc      	ldr	r4, [r1, #28]
 800c2a6:	0105      	lsls	r5, r0, #4
 800c2a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2aa:	2c00      	cmp	r4, #0
 800c2ac:	950d      	str	r5, [sp, #52]	; 0x34
 800c2ae:	fb03 f202 	mul.w	r2, r3, r2
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 800c2b2:	688d      	ldr	r5, [r1, #8]
 800c2b4:	f340 80ee 	ble.w	800c494 <_ZN11JPEGDecoder4readEv+0x224>
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;

      const int bx_limit =
          jpg_min(8, image_info.m_width - (mcu_x * image_info.m_MCUWidth + x));
 800c2b8:	6849      	ldr	r1, [r1, #4]
 800c2ba:	1aad      	subs	r5, r5, r2
 800c2bc:	1e62      	subs	r2, r4, #1
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	fb04 1117 	mls	r1, r4, r7, r1
 800c2c4:	f1a5 0408 	sub.w	r4, r5, #8
 800c2c8:	f022 0207 	bic.w	r2, r2, #7
 800c2cc:	f023 0307 	bic.w	r3, r3, #7
 800c2d0:	9111      	str	r1, [sp, #68]	; 0x44
 800c2d2:	3908      	subs	r1, #8
 800c2d4:	1ae3      	subs	r3, r4, r3

          pSrcR += (8 - bx_limit);
          pSrcG += (8 - bx_limit);
          pSrcB += (8 - bx_limit);

          pDst_block += row_pitch;
 800c2d6:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800c2da:	1a8a      	subs	r2, r1, r2
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800c2dc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800c2de:	930c      	str	r3, [sp, #48]	; 0x30
 800c2e0:	9204      	str	r2, [sp, #16]
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800c2e2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800c2e4:	7e33      	ldrb	r3, [r6, #24]
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800c2e6:	920f      	str	r2, [sp, #60]	; 0x3c
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800c2e8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800c2ea:	9305      	str	r3, [sp, #20]
 800c2ec:	462b      	mov	r3, r5
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800c2ee:	9210      	str	r2, [sp, #64]	; 0x40
          pDst_block += row_pitch;
 800c2f0:	2200      	movs	r2, #0
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c2f2:	f8df b378 	ldr.w	fp, [pc, #888]	; 800c66c <_ZN11JPEGDecoder4readEv+0x3fc>
          pDst_block += row_pitch;
 800c2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	9502      	str	r5, [sp, #8]
 800c2fc:	940b      	str	r4, [sp, #44]	; 0x2c
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800c2fe:	900e      	str	r0, [sp, #56]	; 0x38
    const int by_limit =
 800c300:	2b08      	cmp	r3, #8
 800c302:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c304:	f04f 0900 	mov.w	r9, #0
 800c308:	bfa8      	it	ge
 800c30a:	2308      	movge	r3, #8
 800c30c:	4698      	mov	r8, r3
 800c30e:	9b06      	ldr	r3, [sp, #24]
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c314:	441a      	add	r2, r3
 800c316:	9203      	str	r2, [sp, #12]
 800c318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c31a:	441a      	add	r2, r3
 800c31c:	9207      	str	r2, [sp, #28]
 800c31e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c320:	18d3      	adds	r3, r2, r3
 800c322:	9308      	str	r3, [sp, #32]
 800c324:	9b03      	ldr	r3, [sp, #12]
      const int bx_limit =
 800c326:	2d08      	cmp	r5, #8
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800c328:	9e05      	ldr	r6, [sp, #20]
      const int bx_limit =
 800c32a:	46ac      	mov	ip, r5
      uint16_t *pDst_block = pDst_row + x;
 800c32c:	9a01      	ldr	r2, [sp, #4]
 800c32e:	444b      	add	r3, r9
      const int bx_limit =
 800c330:	bfa8      	it	ge
 800c332:	f04f 0c08 	movge.w	ip, #8
        for (by = 0; by < by_limit; by++) {
 800c336:	9902      	ldr	r1, [sp, #8]
      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800c338:	2e00      	cmp	r6, #0
 800c33a:	f040 80d4 	bne.w	800c4e6 <_ZN11JPEGDecoder4readEv+0x276>
        for (by = 0; by < by_limit; by++) {
 800c33e:	2900      	cmp	r1, #0
 800c340:	dd7c      	ble.n	800c43c <_ZN11JPEGDecoder4readEv+0x1cc>
 800c342:	f1cc 0c08 	rsb	ip, ip, #8
          for (bx = 0; bx < bx_limit; bx++) {
 800c346:	2d00      	cmp	r5, #0
 800c348:	dd73      	ble.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c34a:	7818      	ldrb	r0, [r3, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800c34c:	2d01      	cmp	r5, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c34e:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c352:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c356:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c35a:	ea41 0104 	orr.w	r1, r1, r4
 800c35e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c362:	8011      	strh	r1, [r2, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800c364:	f000 8157 	beq.w	800c616 <_ZN11JPEGDecoder4readEv+0x3a6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c368:	7858      	ldrb	r0, [r3, #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800c36a:	2d02      	cmp	r5, #2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c36c:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c370:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c374:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c378:	ea41 0104 	orr.w	r1, r1, r4
 800c37c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c380:	8051      	strh	r1, [r2, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800c382:	f000 814e 	beq.w	800c622 <_ZN11JPEGDecoder4readEv+0x3b2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c386:	7898      	ldrb	r0, [r3, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800c388:	2d03      	cmp	r5, #3
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c38a:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c38e:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c392:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c396:	ea41 0104 	orr.w	r1, r1, r4
 800c39a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c39e:	8091      	strh	r1, [r2, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3a0:	f000 8149 	beq.w	800c636 <_ZN11JPEGDecoder4readEv+0x3c6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3a4:	78d8      	ldrb	r0, [r3, #3]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3a6:	2d04      	cmp	r5, #4
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3a8:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c3ac:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c3b0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c3b4:	ea41 0104 	orr.w	r1, r1, r4
 800c3b8:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c3bc:	80d1      	strh	r1, [r2, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3be:	f000 8140 	beq.w	800c642 <_ZN11JPEGDecoder4readEv+0x3d2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3c2:	7918      	ldrb	r0, [r3, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3c4:	2d05      	cmp	r5, #5
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3c6:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c3ca:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c3ce:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c3d2:	ea41 0104 	orr.w	r1, r1, r4
 800c3d6:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c3da:	8111      	strh	r1, [r2, #8]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3dc:	f000 8133 	beq.w	800c646 <_ZN11JPEGDecoder4readEv+0x3d6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3e0:	7958      	ldrb	r0, [r3, #5]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3e2:	2d06      	cmp	r5, #6
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3e4:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c3e8:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c3ec:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c3f0:	ea41 0104 	orr.w	r1, r1, r4
 800c3f4:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c3f8:	8151      	strh	r1, [r2, #10]
          for (bx = 0; bx < bx_limit; bx++) {
 800c3fa:	f000 812a 	beq.w	800c652 <_ZN11JPEGDecoder4readEv+0x3e2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c3fe:	7998      	ldrb	r0, [r3, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800c400:	2d07      	cmp	r5, #7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c402:	ea4f 04c0 	mov.w	r4, r0, lsl #3
 800c406:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c40a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c40e:	ea41 0104 	orr.w	r1, r1, r4
 800c412:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c416:	8191      	strh	r1, [r2, #12]
          for (bx = 0; bx < bx_limit; bx++) {
 800c418:	f000 8121 	beq.w	800c65e <_ZN11JPEGDecoder4readEv+0x3ee>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c41c:	79d8      	ldrb	r0, [r3, #7]
            pSrcR++;
 800c41e:	3308      	adds	r3, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800c420:	00c4      	lsls	r4, r0, #3
 800c422:	ea0b 2100 	and.w	r1, fp, r0, lsl #8
 800c426:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c42a:	4321      	orrs	r1, r4
 800c42c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c430:	81d1      	strh	r1, [r2, #14]
        for (by = 0; by < by_limit; by++) {
 800c432:	3601      	adds	r6, #1
          pSrcR += (8 - bx_limit);
 800c434:	4463      	add	r3, ip
          pDst_block += row_pitch;
 800c436:	4452      	add	r2, sl
        for (by = 0; by < by_limit; by++) {
 800c438:	45b0      	cmp	r8, r6
 800c43a:	dc84      	bgt.n	800c346 <_ZN11JPEGDecoder4readEv+0xd6>
 800c43c:	9b01      	ldr	r3, [sp, #4]
 800c43e:	3d08      	subs	r5, #8
 800c440:	f109 0940 	add.w	r9, r9, #64	; 0x40
 800c444:	3310      	adds	r3, #16
 800c446:	9301      	str	r3, [sp, #4]
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800c448:	9b04      	ldr	r3, [sp, #16]
 800c44a:	429d      	cmp	r5, r3
 800c44c:	f47f af6a 	bne.w	800c324 <_ZN11JPEGDecoder4readEv+0xb4>
        }
      }
    }
    pDst_row += (row_pitch * 8);
 800c450:	9b06      	ldr	r3, [sp, #24]
 800c452:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c454:	4413      	add	r3, r2
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800c456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    pDst_row += (row_pitch * 8);
 800c458:	9306      	str	r3, [sp, #24]
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800c45a:	4611      	mov	r1, r2
 800c45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c45e:	3380      	adds	r3, #128	; 0x80
 800c460:	9309      	str	r3, [sp, #36]	; 0x24
 800c462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c464:	4299      	cmp	r1, r3
 800c466:	9302      	str	r3, [sp, #8]
 800c468:	d014      	beq.n	800c494 <_ZN11JPEGDecoder4readEv+0x224>
 800c46a:	3b08      	subs	r3, #8
 800c46c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c46e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	e745      	b.n	800c300 <_ZN11JPEGDecoder4readEv+0x90>
  return decode_mcu();
}

void JPEGDecoder::abort(void) {

  mcu_x = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  mcu_y = 0;
 800c478:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
  is_available = 0;
 800c47c:	6313      	str	r3, [r2, #48]	; 0x30
  if (pImage)
 800c47e:	9b06      	ldr	r3, [sp, #24]
 800c480:	b113      	cbz	r3, 800c488 <_ZN11JPEGDecoder4readEv+0x218>
    delete[] pImage;
 800c482:	4618      	mov	r0, r3
 800c484:	f01a fb34 	bl	8026af0 <_ZdaPv>
  pImage = NULL;
 800c488:	2000      	movs	r0, #0
 800c48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48c:	6618      	str	r0, [r3, #96]	; 0x60
}
 800c48e:	b015      	add	sp, #84	; 0x54
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (mcu_x == image_info.m_MCUSPerRow) {
 800c494:	990a      	ldr	r1, [sp, #40]	; 0x28
  mcu_x++;
 800c496:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  if (mcu_x == image_info.m_MCUSPerRow) {
 800c498:	690a      	ldr	r2, [r1, #16]
  mcu_x++;
 800c49a:	1c63      	adds	r3, r4, #1
  MCUy = mcu_y;
 800c49c:	9812      	ldr	r0, [sp, #72]	; 0x48
  MCUx = mcu_x;
 800c49e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  if (mcu_x == image_info.m_MCUSPerRow) {
 800c4a2:	4293      	cmp	r3, r2
  mcu_x++;
 800c4a4:	634b      	str	r3, [r1, #52]	; 0x34
  MCUy = mcu_y;
 800c4a6:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
  if (mcu_x == image_info.m_MCUSPerRow) {
 800c4aa:	d00f      	beq.n	800c4cc <_ZN11JPEGDecoder4readEv+0x25c>
  status = pjpeg_decode_mcu();
 800c4ac:	f003 fbbc 	bl	800fc28 <pjpeg_decode_mcu>
 800c4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4b2:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
  if (status) {
 800c4b6:	b128      	cbz	r0, 800c4c4 <_ZN11JPEGDecoder4readEv+0x254>
    is_available = 0;
 800c4b8:	2300      	movs	r3, #0
  return 1;
 800c4ba:	2001      	movs	r0, #1
    is_available = 0;
 800c4bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 800c4be:	b015      	add	sp, #84	; 0x54
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 1;
 800c4c4:	2001      	movs	r0, #1
}
 800c4c6:	b015      	add	sp, #84	; 0x54
 800c4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcu_y++;
 800c4cc:	4603      	mov	r3, r0
    mcu_x = 0;
 800c4ce:	2200      	movs	r2, #0
    mcu_y++;
 800c4d0:	3301      	adds	r3, #1
    mcu_x = 0;
 800c4d2:	e9c1 230d 	strd	r2, r3, [r1, #52]	; 0x34
  status = pjpeg_decode_mcu();
 800c4d6:	f003 fba7 	bl	800fc28 <pjpeg_decode_mcu>
 800c4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4dc:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
  if (status) {
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d1e9      	bne.n	800c4b8 <_ZN11JPEGDecoder4readEv+0x248>
 800c4e4:	e7ee      	b.n	800c4c4 <_ZN11JPEGDecoder4readEv+0x254>
        for (by = 0; by < by_limit; by++) {
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	dda8      	ble.n	800c43c <_ZN11JPEGDecoder4readEv+0x1cc>
 800c4ea:	9907      	ldr	r1, [sp, #28]
 800c4ec:	f1cc 0c08 	rsb	ip, ip, #8
 800c4f0:	f04f 0e00 	mov.w	lr, #0
 800c4f4:	eb01 0709 	add.w	r7, r1, r9
 800c4f8:	9908      	ldr	r1, [sp, #32]
 800c4fa:	eb01 0609 	add.w	r6, r1, r9
          for (bx = 0; bx < bx_limit; bx++) {
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	dd7f      	ble.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c502:	783c      	ldrb	r4, [r7, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800c504:	2d01      	cmp	r5, #1
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c506:	7819      	ldrb	r1, [r3, #0]
 800c508:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c50c:	7830      	ldrb	r0, [r6, #0]
 800c50e:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c512:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c516:	ea41 0104 	orr.w	r1, r1, r4
 800c51a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c51e:	8011      	strh	r1, [r2, #0]
          for (bx = 0; bx < bx_limit; bx++) {
 800c520:	d07b      	beq.n	800c61a <_ZN11JPEGDecoder4readEv+0x3aa>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c522:	787c      	ldrb	r4, [r7, #1]
          for (bx = 0; bx < bx_limit; bx++) {
 800c524:	2d02      	cmp	r5, #2
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c526:	7859      	ldrb	r1, [r3, #1]
 800c528:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c52c:	7870      	ldrb	r0, [r6, #1]
 800c52e:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c532:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c536:	ea41 0104 	orr.w	r1, r1, r4
 800c53a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c53e:	8051      	strh	r1, [r2, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800c540:	d071      	beq.n	800c626 <_ZN11JPEGDecoder4readEv+0x3b6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c542:	78bc      	ldrb	r4, [r7, #2]
          for (bx = 0; bx < bx_limit; bx++) {
 800c544:	2d03      	cmp	r5, #3
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c546:	7899      	ldrb	r1, [r3, #2]
 800c548:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c54c:	78b0      	ldrb	r0, [r6, #2]
 800c54e:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c552:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c556:	ea41 0104 	orr.w	r1, r1, r4
 800c55a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c55e:	8091      	strh	r1, [r2, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800c560:	d065      	beq.n	800c62e <_ZN11JPEGDecoder4readEv+0x3be>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c562:	78fc      	ldrb	r4, [r7, #3]
          for (bx = 0; bx < bx_limit; bx++) {
 800c564:	2d04      	cmp	r5, #4
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c566:	78d9      	ldrb	r1, [r3, #3]
 800c568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c56c:	78f0      	ldrb	r0, [r6, #3]
 800c56e:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c572:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c576:	ea41 0104 	orr.w	r1, r1, r4
 800c57a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c57e:	80d1      	strh	r1, [r2, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800c580:	d05b      	beq.n	800c63a <_ZN11JPEGDecoder4readEv+0x3ca>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c582:	793c      	ldrb	r4, [r7, #4]
          for (bx = 0; bx < bx_limit; bx++) {
 800c584:	2d05      	cmp	r5, #5
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c586:	7919      	ldrb	r1, [r3, #4]
 800c588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c58c:	7930      	ldrb	r0, [r6, #4]
 800c58e:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c592:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c596:	ea41 0104 	orr.w	r1, r1, r4
 800c59a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c59e:	8111      	strh	r1, [r2, #8]
          for (bx = 0; bx < bx_limit; bx++) {
 800c5a0:	d053      	beq.n	800c64a <_ZN11JPEGDecoder4readEv+0x3da>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5a2:	797c      	ldrb	r4, [r7, #5]
          for (bx = 0; bx < bx_limit; bx++) {
 800c5a4:	2d06      	cmp	r5, #6
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5a6:	7959      	ldrb	r1, [r3, #5]
 800c5a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c5ac:	7970      	ldrb	r0, [r6, #5]
 800c5ae:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c5b2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c5b6:	ea41 0104 	orr.w	r1, r1, r4
 800c5ba:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c5be:	8151      	strh	r1, [r2, #10]
          for (bx = 0; bx < bx_limit; bx++) {
 800c5c0:	d049      	beq.n	800c656 <_ZN11JPEGDecoder4readEv+0x3e6>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5c2:	79bc      	ldrb	r4, [r7, #6]
          for (bx = 0; bx < bx_limit; bx++) {
 800c5c4:	2d07      	cmp	r5, #7
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5c6:	7999      	ldrb	r1, [r3, #6]
 800c5c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800c5cc:	79b0      	ldrb	r0, [r6, #6]
 800c5ce:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800c5d2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c5d6:	ea41 0104 	orr.w	r1, r1, r4
 800c5da:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c5de:	8191      	strh	r1, [r2, #12]
          for (bx = 0; bx < bx_limit; bx++) {
 800c5e0:	d03f      	beq.n	800c662 <_ZN11JPEGDecoder4readEv+0x3f2>
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5e2:	79fc      	ldrb	r4, [r7, #7]
            pSrcR++;
 800c5e4:	3308      	adds	r3, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
            pSrcG++;
 800c5ea:	3708      	adds	r7, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5ec:	00e4      	lsls	r4, r4, #3
 800c5ee:	79f0      	ldrb	r0, [r6, #7]
 800c5f0:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
            pSrcB++;
 800c5f4:	3608      	adds	r6, #8
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800c5f6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c5fa:	4321      	orrs	r1, r4
 800c5fc:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c600:	81d1      	strh	r1, [r2, #14]
        for (by = 0; by < by_limit; by++) {
 800c602:	f10e 0e01 	add.w	lr, lr, #1
          pSrcR += (8 - bx_limit);
 800c606:	4463      	add	r3, ip
          pSrcG += (8 - bx_limit);
 800c608:	4467      	add	r7, ip
          pSrcB += (8 - bx_limit);
 800c60a:	4466      	add	r6, ip
        for (by = 0; by < by_limit; by++) {
 800c60c:	45f0      	cmp	r8, lr
          pDst_block += row_pitch;
 800c60e:	4452      	add	r2, sl
        for (by = 0; by < by_limit; by++) {
 800c610:	f73f af75 	bgt.w	800c4fe <_ZN11JPEGDecoder4readEv+0x28e>
 800c614:	e712      	b.n	800c43c <_ZN11JPEGDecoder4readEv+0x1cc>
            pSrcR++;
 800c616:	3301      	adds	r3, #1
 800c618:	e70b      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800c61a:	3301      	adds	r3, #1
            pSrcG++;
 800c61c:	3701      	adds	r7, #1
            pSrcB++;
 800c61e:	3601      	adds	r6, #1
 800c620:	e7ef      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800c622:	3302      	adds	r3, #2
 800c624:	e705      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800c626:	3302      	adds	r3, #2
            pSrcG++;
 800c628:	3702      	adds	r7, #2
            pSrcB++;
 800c62a:	3602      	adds	r6, #2
 800c62c:	e7e9      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800c62e:	3303      	adds	r3, #3
            pSrcG++;
 800c630:	3703      	adds	r7, #3
            pSrcB++;
 800c632:	3603      	adds	r6, #3
 800c634:	e7e5      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800c636:	3303      	adds	r3, #3
 800c638:	e6fb      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800c63a:	3304      	adds	r3, #4
            pSrcG++;
 800c63c:	3704      	adds	r7, #4
            pSrcB++;
 800c63e:	3604      	adds	r6, #4
 800c640:	e7df      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800c642:	3304      	adds	r3, #4
 800c644:	e6f5      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
 800c646:	3305      	adds	r3, #5
 800c648:	e6f3      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800c64a:	3305      	adds	r3, #5
            pSrcG++;
 800c64c:	3705      	adds	r7, #5
            pSrcB++;
 800c64e:	3605      	adds	r6, #5
 800c650:	e7d7      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800c652:	3306      	adds	r3, #6
 800c654:	e6ed      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800c656:	3306      	adds	r3, #6
            pSrcG++;
 800c658:	3706      	adds	r7, #6
            pSrcB++;
 800c65a:	3606      	adds	r6, #6
 800c65c:	e7d1      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
            pSrcR++;
 800c65e:	3307      	adds	r3, #7
 800c660:	e6e7      	b.n	800c432 <_ZN11JPEGDecoder4readEv+0x1c2>
            pSrcR++;
 800c662:	3307      	adds	r3, #7
            pSrcG++;
 800c664:	3707      	adds	r7, #7
            pSrcB++;
 800c666:	3607      	adds	r6, #7
 800c668:	e7cb      	b.n	800c602 <_ZN11JPEGDecoder4readEv+0x392>
 800c66a:	bf00      	nop
 800c66c:	fffff800 	.word	0xfffff800

0800c670 <_ZN11JPEGDecoder11decodeArrayEPKhm>:
int JPEGDecoder::decodeArray(const uint8_t array[], uint32_t array_size) {
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	4604      	mov	r4, r0
  jpg_source = JPEG_ARRAY;
 800c674:	2500      	movs	r5, #0
  jpg_data = (uint8_t *)array;
 800c676:	65c1      	str	r1, [r0, #92]	; 0x5c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800c678:	3004      	adds	r0, #4
  g_nInFileSize = array_size;
 800c67a:	6382      	str	r2, [r0, #56]	; 0x38
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800c67c:	462b      	mov	r3, r5
  jpg_source = JPEG_ARRAY;
 800c67e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800c682:	462a      	mov	r2, r5
  g_nInFileOfs = 0;
 800c684:	6425      	str	r5, [r4, #64]	; 0x40
  MCUSPerCol = 0;
 800c686:	67a5      	str	r5, [r4, #120]	; 0x78
  scanType = (pjpeg_scan_type_t)0;
 800c688:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800c68c:	4926      	ldr	r1, [pc, #152]	; (800c728 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xb8>)
  height = 0;
 800c68e:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
  MCUSPerRow = 0;
 800c692:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
  MCUHeight = 0;
 800c696:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800c69a:	f004 fe07 	bl	80112ac <pjpeg_decode_init>
 800c69e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
  if (status) {
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d13a      	bne.n	800c71c <_ZN11JPEGDecoder11decodeArrayEPKhm+0xac>
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800c6a6:	4a21      	ldr	r2, [pc, #132]	; (800c72c <_ZN11JPEGDecoder11decodeArrayEPKhm+0xbc>)
  decoded_width = image_info.m_width;
 800c6a8:	6865      	ldr	r5, [r4, #4]
  decoded_height = image_info.m_height;
 800c6aa:	68a1      	ldr	r1, [r4, #8]
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800c6ac:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
  decoded_height = image_info.m_height;
 800c6b0:	64e1      	str	r1, [r4, #76]	; 0x4c
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800c6b2:	fb00 f003 	mul.w	r0, r0, r3
 800c6b6:	4290      	cmp	r0, r2
  decoded_width = image_info.m_width;
 800c6b8:	e9c4 3511 	strd	r3, r5, [r4, #68]	; 0x44
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800c6bc:	bf94      	ite	ls
 800c6be:	0040      	lslls	r0, r0, #1
 800c6c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c6c4:	f01a fa16 	bl	8026af4 <_Znaj>
  memset(pImage, 0,
 800c6c8:	2100      	movs	r1, #0
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800c6ca:	6620      	str	r0, [r4, #96]	; 0x60
         image_info.m_MCUWidth * image_info.m_MCUHeight * sizeof(*pImage));
 800c6cc:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
 800c6d0:	fb05 f206 	mul.w	r2, r5, r6
  memset(pImage, 0,
 800c6d4:	0052      	lsls	r2, r2, #1
 800c6d6:	f01c fc1a 	bl	8028f0e <memset>
  is_available = 1;
 800c6da:	2301      	movs	r3, #1
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800c6dc:	10f1      	asrs	r1, r6, #3
  width = decoded_width;
 800c6de:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800c6e0:	10ea      	asrs	r2, r5, #3
  MCUWidth = image_info.m_MCUWidth;
 800c6e2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800c6e6:	6521      	str	r1, [r4, #80]	; 0x50
  height = decoded_height;
 800c6e8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
  MCUSPerRow = image_info.m_MCUSPerRow;
 800c6ea:	6920      	ldr	r0, [r4, #16]
  MCUSPerCol = image_info.m_MCUSPerCol;
 800c6ec:	6961      	ldr	r1, [r4, #20]
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800c6ee:	6562      	str	r2, [r4, #84]	; 0x54
  scanType = image_info.m_scanType;
 800c6f0:	7e22      	ldrb	r2, [r4, #24]
  MCUHeight = image_info.m_MCUHeight;
 800c6f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  is_available = 1;
 800c6f6:	6323      	str	r3, [r4, #48]	; 0x30
  comps = 1;
 800c6f8:	6723      	str	r3, [r4, #112]	; 0x70
  scanType = image_info.m_scanType;
 800c6fa:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
  height = decoded_height;
 800c6fe:	e9c4 761a 	strd	r7, r6, [r4, #104]	; 0x68
  MCUSPerCol = image_info.m_MCUSPerCol;
 800c702:	e9c4 011d 	strd	r0, r1, [r4, #116]	; 0x74
  status = pjpeg_decode_mcu();
 800c706:	f003 fa8f 	bl	800fc28 <pjpeg_decode_mcu>
 800c70a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
  if (status) {
 800c70e:	b118      	cbz	r0, 800c718 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xa8>
    is_available = 0;
 800c710:	2300      	movs	r3, #0
    if (status != PJPG_NO_MORE_BLOCKS) {
 800c712:	2801      	cmp	r0, #1
    is_available = 0;
 800c714:	6323      	str	r3, [r4, #48]	; 0x30
    if (status != PJPG_NO_MORE_BLOCKS) {
 800c716:	d103      	bne.n	800c720 <_ZN11JPEGDecoder11decodeArrayEPKhm+0xb0>
  return 1;
 800c718:	2001      	movs	r0, #1
}
 800c71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800c71c:	4628      	mov	r0, r5
}
 800c71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return -1;
 800c720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c726:	bf00      	nop
 800c728:	0800c22d 	.word	0x0800c22d
 800c72c:	3ffffffc 	.word	0x3ffffffc

0800c730 <_GLOBAL__sub_I_JpegDec>:
JPEGDecoder::JPEGDecoder() {
 800c730:	4b04      	ldr	r3, [pc, #16]	; (800c744 <_GLOBAL__sub_I_JpegDec+0x14>)
 800c732:	2200      	movs	r2, #0
  thisPtr = this;
 800c734:	665b      	str	r3, [r3, #100]	; 0x64
JPEGDecoder::JPEGDecoder() {
 800c736:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  is_available = 0;
 800c73a:	631a      	str	r2, [r3, #48]	; 0x30
  mcu_y = 0;
 800c73c:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	20009044 	.word	0x20009044

0800c748 <_GLOBAL__sub_D_JpegDec>:
  if (pImage)
 800c748:	4b02      	ldr	r3, [pc, #8]	; (800c754 <_GLOBAL__sub_D_JpegDec+0xc>)
 800c74a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c74c:	b108      	cbz	r0, 800c752 <_GLOBAL__sub_D_JpegDec+0xa>
    delete[] pImage;
 800c74e:	f01a b9cf 	b.w	8026af0 <_ZdaPv>
}
 800c752:	4770      	bx	lr
 800c754:	20009044 	.word	0x20009044

0800c758 <_Z10initCamerav>:

void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }

void set_format(byte fmt) { m_fmt = fmt; }

int initCamera() {
 800c758:	b538      	push	{r3, r4, r5, lr}
  int camrror = camSPISetup();
 800c75a:	f000 faaf 	bl	800ccbc <_Z11camSPISetupv>
 800c75e:	4604      	mov	r4, r0
  camrror += camI2CSetup();
 800c760:	f000 f9a8 	bl	800cab4 <_Z11camI2CSetupv>

  wrSensorReg8_8(0xff, 0x01);
 800c764:	2101      	movs	r1, #1
  camrror += camI2CSetup();
 800c766:	4404      	add	r4, r0
  wrSensorReg8_8(0xff, 0x01);
 800c768:	20ff      	movs	r0, #255	; 0xff
 800c76a:	f000 fa1b 	bl	800cba4 <_Z14wrSensorReg8_8hh>

  wrSensorReg8_8(0x12, 0x80);
 800c76e:	2180      	movs	r1, #128	; 0x80
 800c770:	2012      	movs	r0, #18
 800c772:	f000 fa17 	bl	800cba4 <_Z14wrSensorReg8_8hh>

  HAL_Delay(100);
 800c776:	2064      	movs	r0, #100	; 0x64
 800c778:	f7fc fdd6 	bl	8009328 <HAL_Delay>
  if (m_fmt == JPEG) {
 800c77c:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <_Z10initCamerav+0x74>)
 800c77e:	781d      	ldrb	r5, [r3, #0]
 800c780:	2d01      	cmp	r5, #1
 800c782:	d00a      	beq.n	800c79a <_Z10initCamerav+0x42>
    wrSensorReg8_8(0x15, 0x00);
    wrSensorRegs8_8(OV2640_320x240_JPEG);
    HAL_Delay(100);

  } else {
    wrSensorRegs8_8(OV2640_QVGA);
 800c784:	4812      	ldr	r0, [pc, #72]	; (800c7d0 <_Z10initCamerav+0x78>)
 800c786:	f000 fa25 	bl	800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>
}

void OV2640_set_JPEG_size(uint8_t size) {
  switch (size) {
  case OV2640_160x120:
    wrSensorRegs8_8(OV2640_160x120_JPEG);
 800c78a:	4812      	ldr	r0, [pc, #72]	; (800c7d4 <_Z10initCamerav+0x7c>)
 800c78c:	f000 fa22 	bl	800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>
  HAL_Delay(100);
 800c790:	2064      	movs	r0, #100	; 0x64
 800c792:	f7fc fdc9 	bl	8009328 <HAL_Delay>
}
 800c796:	4620      	mov	r0, r4
 800c798:	bd38      	pop	{r3, r4, r5, pc}
    wrSensorRegs8_8(OV2640_JPEG_INIT);
 800c79a:	480f      	ldr	r0, [pc, #60]	; (800c7d8 <_Z10initCamerav+0x80>)
 800c79c:	f000 fa1a 	bl	800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_YUV422);
 800c7a0:	480e      	ldr	r0, [pc, #56]	; (800c7dc <_Z10initCamerav+0x84>)
 800c7a2:	f000 fa17 	bl	800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_JPEG);
 800c7a6:	480e      	ldr	r0, [pc, #56]	; (800c7e0 <_Z10initCamerav+0x88>)
 800c7a8:	f000 fa14 	bl	800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorReg8_8(0xff, 0x01);
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	20ff      	movs	r0, #255	; 0xff
 800c7b0:	f000 f9f8 	bl	800cba4 <_Z14wrSensorReg8_8hh>
    wrSensorReg8_8(0x15, 0x00);
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	2015      	movs	r0, #21
 800c7b8:	f000 f9f4 	bl	800cba4 <_Z14wrSensorReg8_8hh>
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 800c7bc:	4809      	ldr	r0, [pc, #36]	; (800c7e4 <_Z10initCamerav+0x8c>)
 800c7be:	f000 fa09 	bl	800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>
    HAL_Delay(100);
 800c7c2:	2064      	movs	r0, #100	; 0x64
 800c7c4:	f7fc fdb0 	bl	8009328 <HAL_Delay>
 800c7c8:	e7df      	b.n	800c78a <_Z10initCamerav+0x32>
 800c7ca:	bf00      	nop
 800c7cc:	20000014 	.word	0x20000014
 800c7d0:	08031f60 	.word	0x08031f60
 800c7d4:	08032278 	.word	0x08032278
 800c7d8:	080320f8 	.word	0x080320f8
 800c7dc:	080320e4 	.word	0x080320e4
 800c7e0:	08031f4c 	.word	0x08031f4c
 800c7e4:	080322c8 	.word	0x080322c8

0800c7e8 <_Z22DecodeandProcessAndRGBiiPaPti>:
  }
}

int DecodeandProcessAndRGB(int image_width, int image_height,
                           int8_t *image_data, uint16_t *lcd_data,
                           int scale_factor) {
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  JpegDec.decodeArray(imgBuf, imgLength);
 800c7ec:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800c9cc <_Z22DecodeandProcessAndRGBiiPaPti+0x1e4>
                           int scale_factor) {
 800c7f0:	b08f      	sub	sp, #60	; 0x3c
  JpegDec.decodeArray(imgBuf, imgLength);
 800c7f2:	4d74      	ldr	r5, [pc, #464]	; (800c9c4 <_Z22DecodeandProcessAndRGBiiPaPti+0x1dc>)
                           int scale_factor) {
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7fa:	9203      	str	r2, [sp, #12]
  JpegDec.decodeArray(imgBuf, imgLength);
 800c7fc:	4650      	mov	r0, sl
 800c7fe:	4972      	ldr	r1, [pc, #456]	; (800c9c8 <_Z22DecodeandProcessAndRGBiiPaPti+0x1e0>)
 800c800:	682a      	ldr	r2, [r5, #0]
                           int scale_factor) {
 800c802:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800c806:	930d      	str	r3, [sp, #52]	; 0x34
  JpegDec.decodeArray(imgBuf, imgLength);
 800c808:	f7ff ff32 	bl	800c670 <_ZN11JPEGDecoder11decodeArrayEPKhm>

  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;

  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;
 800c80c:	f8da 1074 	ldr.w	r1, [sl, #116]	; 0x74
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800c810:	e9da 2320 	ldrd	r2, r3, [sl, #128]	; 0x80
  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 800c814:	fb96 f2f2 	sdiv	r2, r6, r2

  const int skip_start_x_mcus = skip_x_mcus / 2;
 800c818:	1a89      	subs	r1, r1, r2
 800c81a:	bf48      	it	mi
 800c81c:	3101      	addmi	r1, #1
 800c81e:	1049      	asrs	r1, r1, #1
 800c820:	4608      	mov	r0, r1
 800c822:	9109      	str	r1, [sp, #36]	; 0x24

  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;

  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
 800c824:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800c828:	4402      	add	r2, r0
  uint16_t *pImg;

  uint16_t color;

  for (int i = 0;
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c82a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800c82c:	fb94 f3f3 	sdiv	r3, r4, r3
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c830:	fb90 f0fb 	sdiv	r0, r0, fp
  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800c834:	920c      	str	r2, [sp, #48]	; 0x30
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c836:	1ac9      	subs	r1, r1, r3
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c838:	9004      	str	r0, [sp, #16]
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c83a:	bf48      	it	mi
 800c83c:	3101      	addmi	r1, #1
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c83e:	fb94 f2fb 	sdiv	r2, r4, fp
 800c842:	fb00 f202 	mul.w	r2, r0, r2
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c846:	1049      	asrs	r1, r1, #1
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c848:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800c84c:	440b      	add	r3, r1
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800c84e:	9105      	str	r1, [sp, #20]
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c850:	2a00      	cmp	r2, #0
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800c852:	930a      	str	r3, [sp, #40]	; 0x28
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800c854:	dd03      	ble.n	800c85e <_Z22DecodeandProcessAndRGBiiPaPti+0x76>
 800c856:	2180      	movs	r1, #128	; 0x80
 800c858:	9803      	ldr	r0, [sp, #12]
 800c85a:	f01c fb58 	bl	8028f0e <memset>
 800c85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        }
        if (scale_factor != 1 &&
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
          continue;

        if (image_width % scale_factor != 0)
 800c860:	9a04      	ldr	r2, [sp, #16]
 800c862:	0059      	lsls	r1, r3, #1
 800c864:	4610      	mov	r0, r2
 800c866:	9108      	str	r1, [sp, #32]
 800c868:	fb0b 3210 	mls	r2, fp, r0, r3
 800c86c:	18cb      	adds	r3, r1, r3
 800c86e:	9206      	str	r2, [sp, #24]
 800c870:	9307      	str	r3, [sp, #28]
  while (JpegDec.read()) {
 800c872:	4856      	ldr	r0, [pc, #344]	; (800c9cc <_Z22DecodeandProcessAndRGBiiPaPti+0x1e4>)
 800c874:	f7ff fcfc 	bl	800c270 <_ZN11JPEGDecoder4readEv>
 800c878:	2800      	cmp	r0, #0
 800c87a:	f000 8097 	beq.w	800c9ac <_Z22DecodeandProcessAndRGBiiPaPti+0x1c4>
    if (JpegDec.MCUy < skip_start_y_mcus) {
 800c87e:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 800c882:	9a05      	ldr	r2, [sp, #20]
 800c884:	4293      	cmp	r3, r2
 800c886:	dbf4      	blt.n	800c872 <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800c888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    if (JpegDec.MCUx < skip_start_x_mcus ||
 800c88a:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800c88e:	4293      	cmp	r3, r2
 800c890:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c892:	bfb4      	ite	lt
 800c894:	2200      	movlt	r2, #0
 800c896:	2201      	movge	r2, #1
 800c898:	4281      	cmp	r1, r0
 800c89a:	bfb8      	it	lt
 800c89c:	f042 0201 	orrlt.w	r2, r2, #1
 800c8a0:	2a00      	cmp	r2, #0
 800c8a2:	d1e6      	bne.n	800c872 <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
 800c8a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8a6:	4291      	cmp	r1, r2
 800c8a8:	bfb4      	ite	lt
 800c8aa:	2400      	movlt	r4, #0
 800c8ac:	2401      	movge	r4, #1
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	d1df      	bne.n	800c872 <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 800c8b2:	9a05      	ldr	r2, [sp, #20]
    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
 800c8b4:	1a09      	subs	r1, r1, r0
    pImg = JpegDec.pImage;
 800c8b6:	f8da e060 	ldr.w	lr, [sl, #96]	; 0x60
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 800c8ba:	1a9b      	subs	r3, r3, r2
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800c8bc:	e9da 2020 	ldrd	r2, r0, [sl, #128]	; 0x80
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800c8c0:	fb02 f101 	mul.w	r1, r2, r1
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800c8c4:	2800      	cmp	r0, #0
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800c8c6:	fb00 f703 	mul.w	r7, r0, r3
    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800c8ca:	9100      	str	r1, [sp, #0]
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800c8cc:	ddd1      	ble.n	800c872 <_Z22DecodeandProcessAndRGBiiPaPti+0x8a>
 800c8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d0:	9402      	str	r4, [sp, #8]
 800c8d2:	fb03 1307 	mla	r3, r3, r7, r1
 800c8d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c8d8:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800c8dc:	444b      	add	r3, r9
 800c8de:	4489      	add	r9, r1
 800c8e0:	9903      	ldr	r1, [sp, #12]
 800c8e2:	18cb      	adds	r3, r1, r3
 800c8e4:	9301      	str	r3, [sp, #4]
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800c8e6:	2a00      	cmp	r2, #0
 800c8e8:	dd4e      	ble.n	800c988 <_Z22DecodeandProcessAndRGBiiPaPti+0x1a0>
 800c8ea:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e013      	b.n	800c91a <_Z22DecodeandProcessAndRGBiiPaPti+0x132>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800c8f2:	fb97 f8fb 	sdiv	r8, r7, fp
 800c8f6:	fb0b 7418 	mls	r4, fp, r8, r7
        if (scale_factor != 1 &&
 800c8fa:	b93c      	cbnz	r4, 800c90c <_Z22DecodeandProcessAndRGBiiPaPti+0x124>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800c8fc:	fb96 f5fb 	sdiv	r5, r6, fp
 800c900:	fb0b 6615 	mls	r6, fp, r5, r6
 800c904:	b916      	cbnz	r6, 800c90c <_Z22DecodeandProcessAndRGBiiPaPti+0x124>
        if (image_width % scale_factor != 0)
 800c906:	9c06      	ldr	r4, [sp, #24]
 800c908:	2c00      	cmp	r4, #0
 800c90a:	d053      	beq.n	800c9b4 <_Z22DecodeandProcessAndRGBiiPaPti+0x1cc>
 800c90c:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800c910:	3301      	adds	r3, #1
 800c912:	f10c 0c03 	add.w	ip, ip, #3
 800c916:	4293      	cmp	r3, r2
 800c918:	da34      	bge.n	800c984 <_Z22DecodeandProcessAndRGBiiPaPti+0x19c>
        if (current_y >= 120)
 800c91a:	2f77      	cmp	r7, #119	; 0x77
        color = *pImg++;
 800c91c:	f10e 0e02 	add.w	lr, lr, #2
        if (current_y >= 120)
 800c920:	dcf6      	bgt.n	800c910 <_Z22DecodeandProcessAndRGBiiPaPti+0x128>
        color = *pImg++;
 800c922:	f83e 4c02 	ldrh.w	r4, [lr, #-2]
        if (scale_factor == 1) {
 800c926:	f1bb 0f01 	cmp.w	fp, #1
 800c92a:	9a00      	ldr	r2, [sp, #0]
        r = ((color & 0xF800) >> 11) * 8;
 800c92c:	ea4f 20d4 	mov.w	r0, r4, lsr #11
        b = ((color & 0x001F) >> 0) * 8;
 800c930:	f004 011f 	and.w	r1, r4, #31
 800c934:	eb03 0602 	add.w	r6, r3, r2
        g = ((color & 0x07E0) >> 5) * 4;
 800c938:	f3c4 1245 	ubfx	r2, r4, #5, #6
        lcd_data[index] = color;
 800c93c:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
        r = ((color & 0xF800) >> 11) * 8;
 800c940:	ea4f 00c0 	mov.w	r0, r0, lsl #3
        g = ((color & 0x07E0) >> 5) * 4;
 800c944:	ea4f 0282 	mov.w	r2, r2, lsl #2
        b = ((color & 0x001F) >> 0) * 8;
 800c948:	ea4f 01c1 	mov.w	r1, r1, lsl #3
        if (scale_factor == 1) {
 800c94c:	d1d1      	bne.n	800c8f2 <_Z22DecodeandProcessAndRGBiiPaPti+0x10a>
          image_data[index * 3] = r - 128;
 800c94e:	3880      	subs	r0, #128	; 0x80
          image_data[index * 3 + 1] = g - 128;
 800c950:	3a80      	subs	r2, #128	; 0x80
          image_data[index * 3 + 2] = b - 128;
 800c952:	3980      	subs	r1, #128	; 0x80
 800c954:	4635      	mov	r5, r6
          image_data[index * 3] = r - 128;
 800c956:	b240      	sxtb	r0, r0
 800c958:	46b8      	mov	r8, r7
          image_data[index * 3 + 1] = g - 128;
 800c95a:	b252      	sxtb	r2, r2
          image_data[index * 3 + 2] = b - 128;
 800c95c:	b249      	sxtb	r1, r1
          image_data[index * 3] = r - 128;
 800c95e:	f88c 0000 	strb.w	r0, [ip]
          image_data[index * 3 + 1] = g - 128;
 800c962:	f88c 2001 	strb.w	r2, [ip, #1]
          image_data[index * 3 + 2] = b - 128;
 800c966:	f88c 1002 	strb.w	r1, [ip, #2]
          lcd_data[index] = color;
 800c96a:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
          continue;
        int width = image_width;
        if (width > 120)
          width = 120;
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800c96e:	9c04      	ldr	r4, [sp, #16]
                     current_x / scale_factor;

        image_data[Iindex * 3] = r - 128;
        image_data[Iindex * 3 + 1] = g - 128;
 800c970:	9e03      	ldr	r6, [sp, #12]
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800c972:	fb04 5508 	mla	r5, r4, r8, r5
        image_data[Iindex * 3] = r - 128;
 800c976:	eb05 0545 	add.w	r5, r5, r5, lsl #1
        image_data[Iindex * 3 + 1] = g - 128;
 800c97a:	1974      	adds	r4, r6, r5
        image_data[Iindex * 3] = r - 128;
 800c97c:	5570      	strb	r0, [r6, r5]
        image_data[Iindex * 3 + 1] = g - 128;
 800c97e:	7062      	strb	r2, [r4, #1]
        image_data[Iindex * 3 + 2] = b - 128;
 800c980:	70a1      	strb	r1, [r4, #2]
 800c982:	e7c3      	b.n	800c90c <_Z22DecodeandProcessAndRGBiiPaPti+0x124>
 800c984:	f8da 0084 	ldr.w	r0, [sl, #132]	; 0x84
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800c988:	9b02      	ldr	r3, [sp, #8]
 800c98a:	3701      	adds	r7, #1
 800c98c:	9908      	ldr	r1, [sp, #32]
 800c98e:	3301      	adds	r3, #1
 800c990:	9c07      	ldr	r4, [sp, #28]
 800c992:	4489      	add	r9, r1
 800c994:	9901      	ldr	r1, [sp, #4]
 800c996:	4283      	cmp	r3, r0
 800c998:	9302      	str	r3, [sp, #8]
 800c99a:	4421      	add	r1, r4
 800c99c:	9101      	str	r1, [sp, #4]
 800c99e:	dba2      	blt.n	800c8e6 <_Z22DecodeandProcessAndRGBiiPaPti+0xfe>
  while (JpegDec.read()) {
 800c9a0:	480a      	ldr	r0, [pc, #40]	; (800c9cc <_Z22DecodeandProcessAndRGBiiPaPti+0x1e4>)
 800c9a2:	f7ff fc65 	bl	800c270 <_ZN11JPEGDecoder4readEv>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f47f af69 	bne.w	800c87e <_Z22DecodeandProcessAndRGBiiPaPti+0x96>
      }
    }
  }
}
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	b00f      	add	sp, #60	; 0x3c
 800c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b4:	3880      	subs	r0, #128	; 0x80
 800c9b6:	3a80      	subs	r2, #128	; 0x80
 800c9b8:	3980      	subs	r1, #128	; 0x80
 800c9ba:	b240      	sxtb	r0, r0
 800c9bc:	b252      	sxtb	r2, r2
 800c9be:	b249      	sxtb	r1, r1
 800c9c0:	e7d5      	b.n	800c96e <_Z22DecodeandProcessAndRGBiiPaPti+0x186>
 800c9c2:	bf00      	nop
 800c9c4:	2000a4d4 	.word	0x2000a4d4
 800c9c8:	200090d4 	.word	0x200090d4
 800c9cc:	20009044 	.word	0x20009044

0800c9d0 <_Z12StartCapturev>:
  read_fifo_burst();

  return 0;
}

int StartCapture() {
 800c9d0:	b508      	push	{r3, lr}
void flush_fifo(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	2004      	movs	r0, #4
 800c9d6:	f000 f9e3 	bl	800cda0 <_Z11camWriteReghh>

  flush_fifo();
  HAL_Delay(1);
 800c9da:	2001      	movs	r0, #1
 800c9dc:	f7fc fca4 	bl	8009328 <HAL_Delay>
void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	2004      	movs	r0, #4
 800c9e4:	f000 f9dc 	bl	800cda0 <_Z11camWriteReghh>
  clear_fifo_flag();
  HAL_Delay(1);
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	f7fc fc9d 	bl	8009328 <HAL_Delay>
void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }
 800c9ee:	2102      	movs	r1, #2
 800c9f0:	2004      	movs	r0, #4
 800c9f2:	f000 f9d5 	bl	800cda0 <_Z11camWriteReghh>

  start_capture();

  return 0;
}
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	bd08      	pop	{r3, pc}
 800c9fa:	bf00      	nop

0800c9fc <_Z15read_fifo_burstv>:
  read_fifo_burst();

  return 0;
}

uint8_t read_fifo_burst() {
 800c9fc:	b570      	push	{r4, r5, r6, lr}
  len1 = camReadReg(FIFO_SIZE1);
 800c9fe:	2042      	movs	r0, #66	; 0x42
uint8_t read_fifo_burst() {
 800ca00:	b082      	sub	sp, #8
  len1 = camReadReg(FIFO_SIZE1);
 800ca02:	f000 fa25 	bl	800ce50 <_Z10camReadRegh>
 800ca06:	4604      	mov	r4, r0
  len2 = camReadReg(FIFO_SIZE2);
 800ca08:	2043      	movs	r0, #67	; 0x43
 800ca0a:	f000 fa21 	bl	800ce50 <_Z10camReadRegh>
 800ca0e:	4605      	mov	r5, r0
  len3 = camReadReg(FIFO_SIZE3) & 0x7f;
 800ca10:	2044      	movs	r0, #68	; 0x44
 800ca12:	f000 fa1d 	bl	800ce50 <_Z10camReadRegh>
 800ca16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800ca1a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  uint32_t length = read_fifo_length();
  if (length >= MAX_FIFO_SIZE) {

    return 0;
  }
  if (length == 0) {
 800ca1e:	4b18      	ldr	r3, [pc, #96]	; (800ca80 <_Z15read_fifo_burstv+0x84>)
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800ca20:	ea44 4500 	orr.w	r5, r4, r0, lsl #16
  if (length == 0) {
 800ca24:	1e6c      	subs	r4, r5, #1
 800ca26:	429c      	cmp	r4, r3
 800ca28:	d902      	bls.n	800ca30 <_Z15read_fifo_burstv+0x34>

    return 0;
 800ca2a:	2000      	movs	r0, #0

  ARDUCAM_CS_HIGH;

  is_header = false;
  return 1;
}
 800ca2c:	b002      	add	sp, #8
 800ca2e:	bd70      	pop	{r4, r5, r6, pc}
  ARDUCAM_CS_LOW;
 800ca30:	2200      	movs	r2, #0
 800ca32:	2101      	movs	r1, #1
 800ca34:	4813      	ldr	r0, [pc, #76]	; (800ca84 <_Z15read_fifo_burstv+0x88>)
 800ca36:	f7fd f869 	bl	8009b0c <HAL_GPIO_WritePin>
  camTransfers(imgBuf, length);
 800ca3a:	4e13      	ldr	r6, [pc, #76]	; (800ca88 <_Z15read_fifo_burstv+0x8c>)
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800ca3c:	203c      	movs	r0, #60	; 0x3c
 800ca3e:	f000 f9d1 	bl	800cde4 <_Z11camTransferh>
 800ca42:	4603      	mov	r3, r0
  camTransfers(imgBuf, length);
 800ca44:	4629      	mov	r1, r5
 800ca46:	4630      	mov	r0, r6
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800ca48:	f88d 3007 	strb.w	r3, [sp, #7]
  camTransfers(imgBuf, length);
 800ca4c:	f000 f9e0 	bl	800ce10 <_Z12camTransfersPhm>
  for (index = length - 1; index >= 0; index--) {
 800ca50:	4623      	mov	r3, r4
 800ca52:	1930      	adds	r0, r6, r4
    if (imgBuf[index] != 0) {
 800ca54:	f810 2901 	ldrb.w	r2, [r0], #-1
 800ca58:	b982      	cbnz	r2, 800ca7c <_Z15read_fifo_burstv+0x80>
  for (index = length - 1; index >= 0; index--) {
 800ca5a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800ca5e:	d2f9      	bcs.n	800ca54 <_Z15read_fifo_burstv+0x58>
 800ca60:	4613      	mov	r3, r2
  ARDUCAM_CS_HIGH;
 800ca62:	2201      	movs	r2, #1
  imgLength = index + 1;
 800ca64:	4c09      	ldr	r4, [pc, #36]	; (800ca8c <_Z15read_fifo_burstv+0x90>)
  ARDUCAM_CS_HIGH;
 800ca66:	4807      	ldr	r0, [pc, #28]	; (800ca84 <_Z15read_fifo_burstv+0x88>)
 800ca68:	4611      	mov	r1, r2
  imgLength = index + 1;
 800ca6a:	6023      	str	r3, [r4, #0]
  ARDUCAM_CS_HIGH;
 800ca6c:	f7fd f84e 	bl	8009b0c <HAL_GPIO_WritePin>
  is_header = false;
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <_Z15read_fifo_burstv+0x94>)
 800ca72:	2200      	movs	r2, #0
  return 1;
 800ca74:	2001      	movs	r0, #1
  is_header = false;
 800ca76:	701a      	strb	r2, [r3, #0]
}
 800ca78:	b002      	add	sp, #8
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	e7f0      	b.n	800ca62 <_Z15read_fifo_burstv+0x66>
 800ca80:	0005fffd 	.word	0x0005fffd
 800ca84:	40022000 	.word	0x40022000
 800ca88:	200090d4 	.word	0x200090d4
 800ca8c:	2000a4d4 	.word	0x2000a4d4
 800ca90:	2000a4d8 	.word	0x2000a4d8

0800ca94 <_Z11ReadCapturev>:
int ReadCapture() {
 800ca94:	b508      	push	{r3, lr}
  while (!camReadRegBit(ARDUCHIP_TRIG, CAP_DONE_MASK)) {
 800ca96:	2108      	movs	r1, #8
 800ca98:	2041      	movs	r0, #65	; 0x41
 800ca9a:	f000 f9fb 	bl	800ce94 <_Z13camReadRegBithh>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d0f9      	beq.n	800ca96 <_Z11ReadCapturev+0x2>
void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800caa2:	2101      	movs	r1, #1
 800caa4:	2004      	movs	r0, #4
 800caa6:	f000 f97b 	bl	800cda0 <_Z11camWriteReghh>
  read_fifo_burst();
 800caaa:	f7ff ffa7 	bl	800c9fc <_Z15read_fifo_burstv>
}
 800caae:	2000      	movs	r0, #0
 800cab0:	bd08      	pop	{r3, pc}
 800cab2:	bf00      	nop

0800cab4 <_Z11camI2CSetupv>:
  while (cycleCount--)
    ;
}

static I2C_HandleTypeDef I2cHandle;
int camI2CSetup() {
 800cab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int error = 0;

  I2cHandle.Instance = I2Cx;
 800cab8:	4c37      	ldr	r4, [pc, #220]	; (800cb98 <_Z11camI2CSetupv+0xe4>)
  I2cHandle.Init.Timing = I2C_TIMING;
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800caba:	220f      	movs	r2, #15
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800cabc:	23ff      	movs	r3, #255	; 0xff
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cabe:	2600      	movs	r6, #0
  I2cHandle.Init.Timing = I2C_TIMING;
 800cac0:	4936      	ldr	r1, [pc, #216]	; (800cb9c <_Z11camI2CSetupv+0xe8>)
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cac2:	2701      	movs	r7, #1
  I2cHandle.Instance = I2Cx;
 800cac4:	4d36      	ldr	r5, [pc, #216]	; (800cba0 <_Z11camI2CSetupv+0xec>)
int camI2CSetup() {
 800cac6:	b084      	sub	sp, #16
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800cac8:	4620      	mov	r0, r4
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800caca:	60a2      	str	r2, [r4, #8]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800cacc:	6163      	str	r3, [r4, #20]
#define TEST
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
  uint8_t tx_buffer[2];
  tx_buffer[0] = regID & 0xFF;
  tx_buffer[1] = regDat & 0xFF;
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cace:	f04f 080a 	mov.w	r8, #10
  I2cHandle.Instance = I2Cx;
 800cad2:	6025      	str	r5, [r4, #0]
  tx_buffer[0] = regID & 0xFF;
 800cad4:	ad04      	add	r5, sp, #16
  I2cHandle.Init.Timing = I2C_TIMING;
 800cad6:	6061      	str	r1, [r4, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cad8:	e9c4 7603 	strd	r7, r6, [r4, #12]
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cadc:	e9c4 6607 	strd	r6, r6, [r4, #28]
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800cae0:	f7fd f95e 	bl	8009da0 <HAL_I2C_Init>
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800cae4:	4631      	mov	r1, r6
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800cae6:	1b86      	subs	r6, r0, r6
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800cae8:	4620      	mov	r0, r4
  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800caea:	bf18      	it	ne
 800caec:	2601      	movne	r6, #1
  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800caee:	f7fd fb49 	bl	800a184 <HAL_I2CEx_ConfigAnalogFilter>
  tx_buffer[0] = regID & 0xFF;
 800caf2:	f240 13ff 	movw	r3, #511	; 0x1ff
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800caf6:	2160      	movs	r1, #96	; 0x60
 800caf8:	f8cd 8000 	str.w	r8, [sp]
 800cafc:	4620      	mov	r0, r4
  tx_buffer[0] = regID & 0xFF;
 800cafe:	f825 3d04 	strh.w	r3, [r5, #-4]!
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cb02:	2302      	movs	r3, #2
 800cb04:	462a      	mov	r2, r5
 800cb06:	f7fd f99f 	bl	8009e48 <HAL_I2C_Master_Transmit>
                          sizeof(tx_buffer), SSCB_TIMEOUT);

  HAL_Delay(1);
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f7fc fc0c 	bl	8009328 <HAL_Delay>

  return 1;
}

int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 800cb10:	462a      	mov	r2, r5
 800cb12:	f8cd 8000 	str.w	r8, [sp]
 800cb16:	463b      	mov	r3, r7
 800cb18:	4620      	mov	r0, r4
 800cb1a:	2160      	movs	r1, #96	; 0x60
 800cb1c:	f88d 800c 	strb.w	r8, [sp, #12]
 800cb20:	f7fd f992 	bl	8009e48 <HAL_I2C_Master_Transmit>
 800cb24:	b1a0      	cbz	r0, 800cb50 <_Z11camI2CSetupv+0x9c>
 800cb26:	210b      	movs	r1, #11
 800cb28:	aa04      	add	r2, sp, #16
 800cb2a:	240a      	movs	r4, #10
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	f802 1d05 	strb.w	r1, [r2, #-5]!
 800cb32:	2160      	movs	r1, #96	; 0x60
 800cb34:	9400      	str	r4, [sp, #0]
 800cb36:	4818      	ldr	r0, [pc, #96]	; (800cb98 <_Z11camI2CSetupv+0xe4>)
 800cb38:	f7fd f986 	bl	8009e48 <HAL_I2C_Master_Transmit>
 800cb3c:	b1d0      	cbz	r0, 800cb74 <_Z11camI2CSetupv+0xc0>
  if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 800cb3e:	f89d 0009 	ldrb.w	r0, [sp, #9]
}
 800cb42:	2826      	cmp	r0, #38	; 0x26
 800cb44:	bf0c      	ite	eq
 800cb46:	4630      	moveq	r0, r6
 800cb48:	1c70      	addne	r0, r6, #1
 800cb4a:	b004      	add	sp, #16
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                              SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
 800cb50:	4638      	mov	r0, r7
 800cb52:	f7fc fbe9 	bl	8009328 <HAL_Delay>

  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800cb56:	f8cd 8000 	str.w	r8, [sp]
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	463b      	mov	r3, r7
 800cb5e:	f10d 0209 	add.w	r2, sp, #9
 800cb62:	2161      	movs	r1, #97	; 0x61
 800cb64:	f7fd fa40 	bl	8009fe8 <HAL_I2C_Master_Receive>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d1dc      	bne.n	800cb26 <_Z11camI2CSetupv+0x72>
                             SSCB_TIMEOUT) != HAL_OK)
    return false;

  HAL_Delay(1);
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	f7fc fbdb 	bl	8009328 <HAL_Delay>
 800cb72:	e7d8      	b.n	800cb26 <_Z11camI2CSetupv+0x72>
  HAL_Delay(1);
 800cb74:	2001      	movs	r0, #1
 800cb76:	f7fc fbd7 	bl	8009328 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800cb7a:	9400      	str	r4, [sp, #0]
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	eb0d 0204 	add.w	r2, sp, r4
 800cb82:	2161      	movs	r1, #97	; 0x61
 800cb84:	4804      	ldr	r0, [pc, #16]	; (800cb98 <_Z11camI2CSetupv+0xe4>)
 800cb86:	f7fd fa2f 	bl	8009fe8 <HAL_I2C_Master_Receive>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d1d7      	bne.n	800cb3e <_Z11camI2CSetupv+0x8a>
  HAL_Delay(1);
 800cb8e:	2001      	movs	r0, #1
 800cb90:	f7fc fbca 	bl	8009328 <HAL_Delay>
 800cb94:	e7d3      	b.n	800cb3e <_Z11camI2CSetupv+0x8a>
 800cb96:	bf00      	nop
 800cb98:	2000a4dc 	.word	0x2000a4dc
 800cb9c:	40912732 	.word	0x40912732
 800cba0:	40005400 	.word	0x40005400

0800cba4 <_Z14wrSensorReg8_8hh>:
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800cba4:	b500      	push	{lr}
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cba6:	220a      	movs	r2, #10
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800cba8:	b085      	sub	sp, #20
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cbaa:	2302      	movs	r3, #2
  tx_buffer[0] = regID & 0xFF;
 800cbac:	f88d 000c 	strb.w	r0, [sp, #12]
  tx_buffer[1] = regDat & 0xFF;
 800cbb0:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cbb4:	2160      	movs	r1, #96	; 0x60
 800cbb6:	9200      	str	r2, [sp, #0]
 800cbb8:	aa03      	add	r2, sp, #12
 800cbba:	4805      	ldr	r0, [pc, #20]	; (800cbd0 <_Z14wrSensorReg8_8hh+0x2c>)
 800cbbc:	f7fd f944 	bl	8009e48 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7fc fbb1 	bl	8009328 <HAL_Delay>
}
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	b005      	add	sp, #20
 800cbca:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbce:	bf00      	nop
 800cbd0:	2000a4dc 	.word	0x2000a4dc

0800cbd4 <_Z15wrSensorRegs8_8PK10sensor_reg>:
int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	1c84      	adds	r4, r0, #2
 800cbda:	b084      	sub	sp, #16
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cbdc:	f04f 080a 	mov.w	r8, #10
 800cbe0:	4f0e      	ldr	r7, [pc, #56]	; (800cc1c <_Z15wrSensorRegs8_8PK10sensor_reg+0x48>)
    reg_addr = next->reg;
 800cbe2:	f814 5c02 	ldrb.w	r5, [r4, #-2]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cbe6:	2302      	movs	r3, #2
    reg_val = next->val;
 800cbe8:	f814 6c01 	ldrb.w	r6, [r4, #-1]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cbec:	aa03      	add	r2, sp, #12
 800cbee:	2160      	movs	r1, #96	; 0x60
 800cbf0:	f8cd 8000 	str.w	r8, [sp]
 800cbf4:	4638      	mov	r0, r7
  tx_buffer[0] = regID & 0xFF;
 800cbf6:	f88d 500c 	strb.w	r5, [sp, #12]
  tx_buffer[1] = regDat & 0xFF;
 800cbfa:	f88d 600d 	strb.w	r6, [sp, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800cbfe:	f7fd f923 	bl	8009e48 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800cc02:	2001      	movs	r0, #1
 800cc04:	3402      	adds	r4, #2
 800cc06:	f7fc fb8f 	bl	8009328 <HAL_Delay>
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 800cc0a:	2dff      	cmp	r5, #255	; 0xff
 800cc0c:	d1e9      	bne.n	800cbe2 <_Z15wrSensorRegs8_8PK10sensor_reg+0xe>
 800cc0e:	2eff      	cmp	r6, #255	; 0xff
 800cc10:	d1e7      	bne.n	800cbe2 <_Z15wrSensorRegs8_8PK10sensor_reg+0xe>
}
 800cc12:	2001      	movs	r0, #1
 800cc14:	b004      	add	sp, #16
 800cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1a:	bf00      	nop
 800cc1c:	2000a4dc 	.word	0x2000a4dc

0800cc20 <_Z15camSPIErrorTestv>:
  camSPIReset();
  error += camSPIErrorTest();
  return error;
}

int camSPIErrorTest() {
 800cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t val = 0x55;
  volatile uint8_t rval;
  int error = 0;
 800cc22:	2700      	movs	r7, #0
int camSPIErrorTest() {
 800cc24:	b087      	sub	sp, #28
  uint8_t val = 0x55;
 800cc26:	2455      	movs	r4, #85	; 0x55
  HAL_Delay(100);
}

void camWriteReg(const uint8_t reg, const uint8_t val) {
  uint8_t buff[2] = {reg | 0x80, val};
  ARDUCAM_CS_LOW;
 800cc28:	4d22      	ldr	r5, [pc, #136]	; (800ccb4 <_Z15camSPIErrorTestv+0x94>)
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800cc2a:	4e23      	ldr	r6, [pc, #140]	; (800ccb8 <_Z15camSPIErrorTestv+0x98>)
    val++;
 800cc2c:	3401      	adds	r4, #1
  uint8_t buff[2] = {reg | 0x80, val};
 800cc2e:	2380      	movs	r3, #128	; 0x80
  ARDUCAM_CS_LOW;
 800cc30:	2200      	movs	r2, #0
 800cc32:	2101      	movs	r1, #1
    val++;
 800cc34:	b2e4      	uxtb	r4, r4
  ARDUCAM_CS_LOW;
 800cc36:	4628      	mov	r0, r5
  uint8_t buff[2] = {reg | 0x80, val};
 800cc38:	f88d 3014 	strb.w	r3, [sp, #20]
 800cc3c:	f88d 4015 	strb.w	r4, [sp, #21]
  ARDUCAM_CS_LOW;
 800cc40:	f7fc ff64 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800cc44:	2364      	movs	r3, #100	; 0x64
 800cc46:	2202      	movs	r2, #2
 800cc48:	a905      	add	r1, sp, #20
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7fe fbd8 	bl	800b400 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800cc50:	2201      	movs	r2, #1
 800cc52:	4628      	mov	r0, r5
 800cc54:	4611      	mov	r1, r2
 800cc56:	f7fc ff59 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800cc5a:	2001      	movs	r0, #1
 800cc5c:	f7fc fb64 	bl	8009328 <HAL_Delay>

  return ret;
}

uint8_t camReadReg(const uint8_t reg) {
  uint8_t buff[2] = {reg, 0x00};
 800cc60:	2300      	movs	r3, #0
  uint8_t rbuff[2];
  ARDUCAM_CS_LOW;
 800cc62:	2101      	movs	r1, #1
 800cc64:	4628      	mov	r0, r5
 800cc66:	461a      	mov	r2, r3
  uint8_t buff[2] = {reg, 0x00};
 800cc68:	f8ad 3010 	strh.w	r3, [sp, #16]
  ARDUCAM_CS_LOW;
 800cc6c:	f7fc ff4e 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800cc70:	2164      	movs	r1, #100	; 0x64
 800cc72:	2302      	movs	r3, #2
 800cc74:	aa05      	add	r2, sp, #20
 800cc76:	9100      	str	r1, [sp, #0]
 800cc78:	4630      	mov	r0, r6
 800cc7a:	a904      	add	r1, sp, #16
 800cc7c:	f7fe fcee 	bl	800b65c <HAL_SPI_TransmitReceive>
                          100);
  ARDUCAM_CS_HIGH;
 800cc80:	2201      	movs	r2, #1
 800cc82:	4628      	mov	r0, r5
 800cc84:	4611      	mov	r1, r2
 800cc86:	f7fc ff41 	bl	8009b0c <HAL_GPIO_WritePin>

  return rbuff[1];
 800cc8a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    rval = camReadReg(0x00);
 800cc8e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (rval != val)
 800cc92:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	d006      	beq.n	800cca8 <_Z15camSPIErrorTestv+0x88>
  for (int i = 0; i < 10; i++) {
 800cc9a:	2c5f      	cmp	r4, #95	; 0x5f
      error++;
 800cc9c:	f107 0701 	add.w	r7, r7, #1
  for (int i = 0; i < 10; i++) {
 800cca0:	d1c4      	bne.n	800cc2c <_Z15camSPIErrorTestv+0xc>
}
 800cca2:	4638      	mov	r0, r7
 800cca4:	b007      	add	sp, #28
 800cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (int i = 0; i < 10; i++) {
 800cca8:	2c5f      	cmp	r4, #95	; 0x5f
 800ccaa:	d1bf      	bne.n	800cc2c <_Z15camSPIErrorTestv+0xc>
}
 800ccac:	4638      	mov	r0, r7
 800ccae:	b007      	add	sp, #28
 800ccb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	40022000 	.word	0x40022000
 800ccb8:	2000a528 	.word	0x2000a528

0800ccbc <_Z11camSPISetupv>:
int camSPISetup() {
 800ccbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SpiHandle.Instance = SPIx;
 800ccc0:	4c34      	ldr	r4, [pc, #208]	; (800cd94 <_Z11camSPISetupv+0xd8>)
int camSPISetup() {
 800ccc2:	b086      	sub	sp, #24
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800ccc4:	f04f 0e10 	mov.w	lr, #16
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800ccc8:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800cccc:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ccce:	4f32      	ldr	r7, [pc, #200]	; (800cd98 <_Z11camSPISetupv+0xdc>)
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800ccd0:	f44f 7200 	mov.w	r2, #512	; 0x200
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800ccd4:	f44f 7382 	mov.w	r3, #260	; 0x104
  SpiHandle.Init.CRCPolynomial = 7;
 800ccd8:	2107      	movs	r1, #7
  SpiHandle.Instance = SPIx;
 800ccda:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800cd9c <_Z11camSPISetupv+0xe0>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ccde:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800cce0:	f04f 0902 	mov.w	r9, #2
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800cce4:	4620      	mov	r0, r4
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800cce6:	f8c4 e01c 	str.w	lr, [r4, #28]
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800ccea:	f8c4 c00c 	str.w	ip, [r4, #12]
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800ccee:	61a2      	str	r2, [r4, #24]
  SpiHandle.Instance = SPIx;
 800ccf0:	f8c4 8000 	str.w	r8, [r4]
  uint8_t buff[2] = {reg | 0x80, val};
 800ccf4:	f10d 0818 	add.w	r8, sp, #24
  SpiHandle.Init.CRCPolynomial = 7;
 800ccf8:	62e1      	str	r1, [r4, #44]	; 0x2c
  SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccfa:	62a6      	str	r6, [r4, #40]	; 0x28
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800ccfc:	e9c4 3601 	strd	r3, r6, [r4, #4]
  SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd00:	e9c4 6604 	strd	r6, r6, [r4, #16]
  SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800cd04:	e9c4 6608 	strd	r6, r6, [r4, #32]
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800cd08:	f7fe fb10 	bl	800b32c <HAL_SPI_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cd0c:	a901      	add	r1, sp, #4
  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800cd0e:	4682      	mov	sl, r0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cd10:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd12:	e9cd 5501 	strd	r5, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800cd16:	e9cd 5903 	strd	r5, r9, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cd1a:	f7fc fdd3 	bl	80098c4 <HAL_GPIO_Init>
  uint8_t buff[2] = {reg | 0x80, val};
 800cd1e:	f248 0387 	movw	r3, #32903	; 0x8087
  ARDUCAM_CS_LOW;
 800cd22:	4632      	mov	r2, r6
 800cd24:	4629      	mov	r1, r5
  uint8_t buff[2] = {reg | 0x80, val};
 800cd26:	f828 3d18 	strh.w	r3, [r8, #-24]!
  ARDUCAM_CS_LOW;
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	f7fc feee 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800cd30:	2364      	movs	r3, #100	; 0x64
 800cd32:	4641      	mov	r1, r8
 800cd34:	464a      	mov	r2, r9
 800cd36:	4620      	mov	r0, r4
 800cd38:	f7fe fb62 	bl	800b400 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800cd3c:	462a      	mov	r2, r5
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4638      	mov	r0, r7
 800cd42:	f7fc fee3 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800cd46:	4628      	mov	r0, r5
 800cd48:	f7fc faee 	bl	8009328 <HAL_Delay>
  HAL_Delay(100);
 800cd4c:	2064      	movs	r0, #100	; 0x64
 800cd4e:	f7fc faeb 	bl	8009328 <HAL_Delay>
  uint8_t buff[2] = {reg | 0x80, val};
 800cd52:	2387      	movs	r3, #135	; 0x87
  ARDUCAM_CS_LOW;
 800cd54:	4632      	mov	r2, r6
 800cd56:	4629      	mov	r1, r5
 800cd58:	4638      	mov	r0, r7
  uint8_t buff[2] = {reg | 0x80, val};
 800cd5a:	f8ad 3000 	strh.w	r3, [sp]
  ARDUCAM_CS_LOW;
 800cd5e:	f7fc fed5 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800cd62:	2364      	movs	r3, #100	; 0x64
 800cd64:	4641      	mov	r1, r8
 800cd66:	464a      	mov	r2, r9
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f7fe fb49 	bl	800b400 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800cd6e:	462a      	mov	r2, r5
 800cd70:	4629      	mov	r1, r5
 800cd72:	4638      	mov	r0, r7
 800cd74:	f7fc feca 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f7fc fad5 	bl	8009328 <HAL_Delay>
  HAL_Delay(100);
 800cd7e:	2064      	movs	r0, #100	; 0x64
 800cd80:	f7fc fad2 	bl	8009328 <HAL_Delay>
  error += camSPIErrorTest();
 800cd84:	f7ff ff4c 	bl	800cc20 <_Z15camSPIErrorTestv>
}
 800cd88:	45b2      	cmp	sl, r6
 800cd8a:	bf18      	it	ne
 800cd8c:	3001      	addne	r0, #1
 800cd8e:	b006      	add	sp, #24
 800cd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd94:	2000a528 	.word	0x2000a528
 800cd98:	40022000 	.word	0x40022000
 800cd9c:	40003800 	.word	0x40003800

0800cda0 <_Z11camWriteReghh>:
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800cda0:	b510      	push	{r4, lr}
  ARDUCAM_CS_LOW;
 800cda2:	4c0e      	ldr	r4, [pc, #56]	; (800cddc <_Z11camWriteReghh+0x3c>)
void camWriteReg(const uint8_t reg, const uint8_t val) {
 800cda4:	b082      	sub	sp, #8
  uint8_t buff[2] = {reg | 0x80, val};
 800cda6:	f060 037f 	orn	r3, r0, #127	; 0x7f
  ARDUCAM_CS_LOW;
 800cdaa:	2200      	movs	r2, #0
  uint8_t buff[2] = {reg | 0x80, val};
 800cdac:	f88d 1005 	strb.w	r1, [sp, #5]
  ARDUCAM_CS_LOW;
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg | 0x80, val};
 800cdb4:	f88d 3004 	strb.w	r3, [sp, #4]
  ARDUCAM_CS_LOW;
 800cdb8:	f7fc fea8 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800cdbc:	2364      	movs	r3, #100	; 0x64
 800cdbe:	a901      	add	r1, sp, #4
 800cdc0:	2202      	movs	r2, #2
 800cdc2:	4807      	ldr	r0, [pc, #28]	; (800cde0 <_Z11camWriteReghh+0x40>)
 800cdc4:	f7fe fb1c 	bl	800b400 <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800cdc8:	2201      	movs	r2, #1
 800cdca:	4620      	mov	r0, r4
 800cdcc:	4611      	mov	r1, r2
 800cdce:	f7fc fe9d 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	f7fc faa8 	bl	8009328 <HAL_Delay>
}
 800cdd8:	b002      	add	sp, #8
 800cdda:	bd10      	pop	{r4, pc}
 800cddc:	40022000 	.word	0x40022000
 800cde0:	2000a528 	.word	0x2000a528

0800cde4 <_Z11camTransferh>:
uint8_t camTransfer(const uint8_t val) {
 800cde4:	b500      	push	{lr}
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800cde6:	2164      	movs	r1, #100	; 0x64
uint8_t camTransfer(const uint8_t val) {
 800cde8:	b087      	sub	sp, #28
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800cdea:	2301      	movs	r3, #1
uint8_t camTransfer(const uint8_t val) {
 800cdec:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800cdf0:	f10d 0217 	add.w	r2, sp, #23
 800cdf4:	9100      	str	r1, [sp, #0]
 800cdf6:	f10d 010f 	add.w	r1, sp, #15
 800cdfa:	4804      	ldr	r0, [pc, #16]	; (800ce0c <_Z11camTransferh+0x28>)
 800cdfc:	f7fe fc2e 	bl	800b65c <HAL_SPI_TransmitReceive>
}
 800ce00:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800ce04:	b007      	add	sp, #28
 800ce06:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce0a:	bf00      	nop
 800ce0c:	2000a528 	.word	0x2000a528

0800ce10 <_Z12camTransfersPhm>:
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800ce10:	b570      	push	{r4, r5, r6, lr}
  if (!dummyinit) {
 800ce12:	4c0c      	ldr	r4, [pc, #48]	; (800ce44 <_Z12camTransfersPhm+0x34>)
uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800ce14:	460e      	mov	r6, r1
 800ce16:	b082      	sub	sp, #8
 800ce18:	4605      	mov	r5, r0
  if (!dummyinit) {
 800ce1a:	6821      	ldr	r1, [r4, #0]
 800ce1c:	b931      	cbnz	r1, 800ce2c <_Z12camTransfersPhm+0x1c>
 800ce1e:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
 800ce22:	4809      	ldr	r0, [pc, #36]	; (800ce48 <_Z12camTransfersPhm+0x38>)
 800ce24:	f01c f873 	bl	8028f0e <memset>
    dummyinit = 1;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	6023      	str	r3, [r4, #0]
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)dummy, (uint8_t *)buf, length,
 800ce2c:	2064      	movs	r0, #100	; 0x64
 800ce2e:	b2b3      	uxth	r3, r6
 800ce30:	462a      	mov	r2, r5
 800ce32:	4905      	ldr	r1, [pc, #20]	; (800ce48 <_Z12camTransfersPhm+0x38>)
 800ce34:	9000      	str	r0, [sp, #0]
 800ce36:	4805      	ldr	r0, [pc, #20]	; (800ce4c <_Z12camTransfersPhm+0x3c>)
 800ce38:	f7fe fc10 	bl	800b65c <HAL_SPI_TransmitReceive>
}
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	b002      	add	sp, #8
 800ce40:	bd70      	pop	{r4, r5, r6, pc}
 800ce42:	bf00      	nop
 800ce44:	2000a58c 	.word	0x2000a58c
 800ce48:	2000a590 	.word	0x2000a590
 800ce4c:	2000a528 	.word	0x2000a528

0800ce50 <_Z10camReadRegh>:
uint8_t camReadReg(const uint8_t reg) {
 800ce50:	b510      	push	{r4, lr}
  uint8_t buff[2] = {reg, 0x00};
 800ce52:	2200      	movs	r2, #0
uint8_t camReadReg(const uint8_t reg) {
 800ce54:	b084      	sub	sp, #16
  ARDUCAM_CS_LOW;
 800ce56:	4c0d      	ldr	r4, [pc, #52]	; (800ce8c <_Z10camReadRegh+0x3c>)
 800ce58:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg, 0x00};
 800ce5a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800ce5e:	f88d 0008 	strb.w	r0, [sp, #8]
  ARDUCAM_CS_LOW;
 800ce62:	4620      	mov	r0, r4
 800ce64:	f7fc fe52 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800ce68:	2164      	movs	r1, #100	; 0x64
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	aa03      	add	r2, sp, #12
 800ce6e:	9100      	str	r1, [sp, #0]
 800ce70:	a902      	add	r1, sp, #8
 800ce72:	4807      	ldr	r0, [pc, #28]	; (800ce90 <_Z10camReadRegh+0x40>)
 800ce74:	f7fe fbf2 	bl	800b65c <HAL_SPI_TransmitReceive>
  ARDUCAM_CS_HIGH;
 800ce78:	2201      	movs	r2, #1
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	f7fc fe45 	bl	8009b0c <HAL_GPIO_WritePin>
}
 800ce82:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800ce86:	b004      	add	sp, #16
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	bf00      	nop
 800ce8c:	40022000 	.word	0x40022000
 800ce90:	2000a528 	.word	0x2000a528

0800ce94 <_Z13camReadRegBithh>:

uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800ce94:	b530      	push	{r4, r5, lr}
  uint8_t buff[2] = {reg, 0x00};
 800ce96:	2200      	movs	r2, #0
uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800ce98:	b085      	sub	sp, #20
  ARDUCAM_CS_LOW;
 800ce9a:	4c0e      	ldr	r4, [pc, #56]	; (800ced4 <_Z13camReadRegBithh+0x40>)
uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800ce9c:	460d      	mov	r5, r1
  uint8_t buff[2] = {reg, 0x00};
 800ce9e:	f8ad 2008 	strh.w	r2, [sp, #8]
  ARDUCAM_CS_LOW;
 800cea2:	2101      	movs	r1, #1
  uint8_t buff[2] = {reg, 0x00};
 800cea4:	f88d 0008 	strb.w	r0, [sp, #8]
  ARDUCAM_CS_LOW;
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f7fc fe2f 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800ceae:	2164      	movs	r1, #100	; 0x64
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	aa03      	add	r2, sp, #12
 800ceb4:	9100      	str	r1, [sp, #0]
 800ceb6:	a902      	add	r1, sp, #8
 800ceb8:	4807      	ldr	r0, [pc, #28]	; (800ced8 <_Z13camReadRegBithh+0x44>)
 800ceba:	f7fe fbcf 	bl	800b65c <HAL_SPI_TransmitReceive>
  ARDUCAM_CS_HIGH;
 800cebe:	2201      	movs	r2, #1
 800cec0:	4620      	mov	r0, r4
 800cec2:	4611      	mov	r1, r2
 800cec4:	f7fc fe22 	bl	8009b0c <HAL_GPIO_WritePin>
  return rbuff[1];
 800cec8:	f89d 000d 	ldrb.w	r0, [sp, #13]
  uint8_t temp;
  temp = camReadReg(addr);
  temp = temp & bit;
  return temp;
}
 800cecc:	4028      	ands	r0, r5
 800cece:	b005      	add	sp, #20
 800ced0:	bd30      	pop	{r4, r5, pc}
 800ced2:	bf00      	nop
 800ced4:	40022000 	.word	0x40022000
 800ced8:	2000a528 	.word	0x2000a528

0800cedc <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 800cedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee0:	b08b      	sub	sp, #44	; 0x2c
 800cee2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800cee4:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
  for (int i = 0; i < height; i++) {
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d052      	beq.n	800cf92 <_Z13loadRGB565LCDmmmmPth+0xb6>
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	d050      	beq.n	800cf92 <_Z13loadRGB565LCDmmmmPth+0xb6>
 800cef0:	f1bb 0f00 	cmp.w	fp, #0
 800cef4:	d04d      	beq.n	800cf92 <_Z13loadRGB565LCDmmmmPth+0xb6>
 800cef6:	2500      	movs	r5, #0
 800cef8:	9309      	str	r3, [sp, #36]	; 0x24
 800cefa:	4613      	mov	r3, r2
 800cefc:	4602      	mov	r2, r0
 800cefe:	fa1f f08b 	uxth.w	r0, fp
 800cf02:	9504      	str	r5, [sp, #16]
 800cf04:	ebc3 75c3 	rsb	r5, r3, r3, lsl #31
 800cf08:	4402      	add	r2, r0
 800cf0a:	9002      	str	r0, [sp, #8]
 800cf0c:	ebc3 7083 	rsb	r0, r3, r3, lsl #30
 800cf10:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800cf14:	fa1f f981 	uxth.w	r9, r1
 800cf18:	9303      	str	r3, [sp, #12]
 800cf1a:	b293      	uxth	r3, r2
 800cf1c:	9307      	str	r3, [sp, #28]
 800cf1e:	006b      	lsls	r3, r5, #1
 800cf20:	9306      	str	r3, [sp, #24]
 800cf22:	0083      	lsls	r3, r0, #2
 800cf24:	9308      	str	r3, [sp, #32]
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	9a06      	ldr	r2, [sp, #24]
 800cf2a:	9d07      	ldr	r5, [sp, #28]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	9305      	str	r3, [sp, #20]
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	9b02      	ldr	r3, [sp, #8]
    for (int j = 0; j < width; j++) {

      uint16_t color = src[i * width + j];

      for (int ti = 0; ti < resize; ti++) {
 800cf34:	2700      	movs	r7, #0
 800cf36:	eba5 0803 	sub.w	r8, r5, r3
      uint16_t color = src[i * width + j];
 800cf3a:	9b01      	ldr	r3, [sp, #4]
 800cf3c:	fa1f f888 	uxth.w	r8, r8
 800cf40:	f833 6b02 	ldrh.w	r6, [r3], #2
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	eb09 0a07 	add.w	sl, r9, r7
      for (int ti = 0; ti < resize; ti++) {
 800cf4a:	4644      	mov	r4, r8
 800cf4c:	fa1f fa8a 	uxth.w	sl, sl
        for (int tj = 0; tj < resize; tj++) {
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800cf50:	4620      	mov	r0, r4
 800cf52:	3401      	adds	r4, #1
 800cf54:	4632      	mov	r2, r6
 800cf56:	4651      	mov	r1, sl
 800cf58:	b2a4      	uxth	r4, r4
 800cf5a:	f7fb ff07 	bl	8008d6c <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 800cf5e:	42a5      	cmp	r5, r4
 800cf60:	d1f6      	bne.n	800cf50 <_Z13loadRGB565LCDmmmmPth+0x74>
      for (int ti = 0; ti < resize; ti++) {
 800cf62:	3701      	adds	r7, #1
 800cf64:	455f      	cmp	r7, fp
 800cf66:	d1ee      	bne.n	800cf46 <_Z13loadRGB565LCDmmmmPth+0x6a>
 800cf68:	9b02      	ldr	r3, [sp, #8]
    for (int j = 0; j < width; j++) {
 800cf6a:	9a03      	ldr	r2, [sp, #12]
 800cf6c:	441d      	add	r5, r3
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	4293      	cmp	r3, r2
 800cf72:	b2ad      	uxth	r5, r5
 800cf74:	d1dd      	bne.n	800cf32 <_Z13loadRGB565LCDmmmmPth+0x56>
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	9a05      	ldr	r2, [sp, #20]
 800cf7a:	9908      	ldr	r1, [sp, #32]
 800cf7c:	4499      	add	r9, r3
  for (int i = 0; i < height; i++) {
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	1a52      	subs	r2, r2, r1
 800cf82:	fa1f f989 	uxth.w	r9, r9
 800cf86:	3301      	adds	r3, #1
 800cf88:	9203      	str	r2, [sp, #12]
 800cf8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf8c:	9304      	str	r3, [sp, #16]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d1c9      	bne.n	800cf26 <_Z13loadRGB565LCDmmmmPth+0x4a>
        }
      }
    }
  }
}
 800cf92:	b00b      	add	sp, #44	; 0x2c
 800cf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf98 <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 800cf98:	b430      	push	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800cf9a:	b295      	uxth	r5, r2
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	b28c      	uxth	r4, r1
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	4620      	mov	r0, r4
}
 800cfa6:	bc30      	pop	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800cfa8:	f7fb be84 	b.w	8008cb4 <BSP_LCD_DisplayStringAt>

0800cfac <_Z14detectResponseifiii>:
#define USENEW
int unper_cnt = 0;

#ifdef USENEW
void detectResponse(int person, float ms, int training_mode, int pred,
                    int label) {
 800cfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	461d      	mov	r5, r3
 800cfb4:	ed2d 8b02 	vpush	{d8}
 800cfb8:	eeb0 8a40 	vmov.f32	s16, s0
 800cfbc:	b088      	sub	sp, #32
  char buf[20];
  if (person) {
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d05b      	beq.n	800d07a <_Z14detectResponseifiii+0xce>
    unper_cnt = 0;
 800cfc2:	4bc0      	ldr	r3, [pc, #768]	; (800d2c4 <_Z14detectResponseifiii+0x318>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
    if (training_mode) {
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	f000 813d 	beq.w	800d248 <_Z14detectResponseifiii+0x29c>
  for (int i = x1 - 1; i < x2; i++)
 800cfce:	f240 180d 	movw	r8, #269	; 0x10d
 800cfd2:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800cfd6:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, green);
 800cfd8:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800cfda:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800cfdc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7fb fec3 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800cfe6:	2c64      	cmp	r4, #100	; 0x64
 800cfe8:	d1f6      	bne.n	800cfd8 <_Z14detectResponseifiii+0x2c>
  for (int i = x1 - 1; i < x2; i++)
 800cfea:	f108 0801 	add.w	r8, r8, #1
 800cfee:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800cff2:	d1ee      	bne.n	800cfd2 <_Z14detectResponseifiii+0x26>
 800cff4:	f240 180d 	movw	r8, #269	; 0x10d
 800cff8:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800cffc:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, green);
 800cffe:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d000:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800d002:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800d006:	4638      	mov	r0, r7
 800d008:	f7fb feb0 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d00c:	2cb4      	cmp	r4, #180	; 0xb4
 800d00e:	d1f6      	bne.n	800cffe <_Z14detectResponseifiii+0x52>
  for (int i = x1 - 1; i < x2; i++)
 800d010:	f108 0801 	add.w	r8, r8, #1
 800d014:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800d018:	d1ee      	bne.n	800cff8 <_Z14detectResponseifiii+0x4c>
 800d01a:	f240 180d 	movw	r8, #269	; 0x10d
 800d01e:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800d022:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, green);
 800d024:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d026:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800d028:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800d02c:	4638      	mov	r0, r7
 800d02e:	f7fb fe9d 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d032:	2cfa      	cmp	r4, #250	; 0xfa
 800d034:	d1f6      	bne.n	800d024 <_Z14detectResponseifiii+0x78>
  for (int i = x1 - 1; i < x2; i++)
 800d036:	f108 0801 	add.w	r8, r8, #1
 800d03a:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800d03e:	d1ee      	bne.n	800d01e <_Z14detectResponseifiii+0x72>
      drawGreenBackground(270, 480, 40, 100);
      drawGreenBackground(270, 480, 125, 180);
      drawGreenBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d040:	48a1      	ldr	r0, [pc, #644]	; (800d2c8 <_Z14detectResponseifiii+0x31c>)
      sprintf(buf, " Prediction:");
 800d042:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d044:	f7fb fd6a 	bl	8008b1c <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 800d048:	4ba0      	ldr	r3, [pc, #640]	; (800d2cc <_Z14detectResponseifiii+0x320>)
 800d04a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d04c:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800d04e:	aa03      	add	r2, sp, #12
      sprintf(buf, " Prediction:");
 800d050:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800d052:	2150      	movs	r1, #80	; 0x50
 800d054:	2303      	movs	r3, #3
 800d056:	f240 1011 	movw	r0, #273	; 0x111
 800d05a:	f7fb fe2b 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d  ", pred);
 800d05e:	4632      	mov	r2, r6
 800d060:	499b      	ldr	r1, [pc, #620]	; (800d2d0 <_Z14detectResponseifiii+0x324>)
 800d062:	a803      	add	r0, sp, #12
 800d064:	f01c f9a2 	bl	80293ac <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 800d068:	2303      	movs	r3, #3
 800d06a:	aa03      	add	r2, sp, #12
 800d06c:	2164      	movs	r1, #100	; 0x64
 800d06e:	f240 1011 	movw	r0, #273	; 0x111
 800d072:	f7fb fe1f 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground True:");
 800d076:	4b97      	ldr	r3, [pc, #604]	; (800d2d4 <_Z14detectResponseifiii+0x328>)
 800d078:	e057      	b.n	800d12a <_Z14detectResponseifiii+0x17e>
      drawBlueBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
    }
  } else {
    if (training_mode) {
 800d07a:	2900      	cmp	r1, #0
 800d07c:	f000 80a0 	beq.w	800d1c0 <_Z14detectResponseifiii+0x214>
  for (int i = x1 - 1; i < x2; i++)
 800d080:	f240 180d 	movw	r8, #269	; 0x10d
 800d084:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800d088:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, red);
 800d08a:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d08c:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800d08e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800d092:	4638      	mov	r0, r7
 800d094:	f7fb fe6a 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d098:	2c64      	cmp	r4, #100	; 0x64
 800d09a:	d1f6      	bne.n	800d08a <_Z14detectResponseifiii+0xde>
  for (int i = x1 - 1; i < x2; i++)
 800d09c:	f108 0801 	add.w	r8, r8, #1
 800d0a0:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800d0a4:	d1ee      	bne.n	800d084 <_Z14detectResponseifiii+0xd8>
 800d0a6:	f240 180d 	movw	r8, #269	; 0x10d
 800d0aa:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800d0ae:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, red);
 800d0b0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d0b2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800d0b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	f7fb fe57 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d0be:	2cb4      	cmp	r4, #180	; 0xb4
 800d0c0:	d1f6      	bne.n	800d0b0 <_Z14detectResponseifiii+0x104>
  for (int i = x1 - 1; i < x2; i++)
 800d0c2:	f108 0801 	add.w	r8, r8, #1
 800d0c6:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800d0ca:	d1ee      	bne.n	800d0aa <_Z14detectResponseifiii+0xfe>
 800d0cc:	f240 180d 	movw	r8, #269	; 0x10d
 800d0d0:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800d0d4:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, red);
 800d0d6:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d0d8:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800d0da:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f7fb fe44 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d0e4:	2cfa      	cmp	r4, #250	; 0xfa
 800d0e6:	d1f6      	bne.n	800d0d6 <_Z14detectResponseifiii+0x12a>
  for (int i = x1 - 1; i < x2; i++)
 800d0e8:	f108 0801 	add.w	r8, r8, #1
 800d0ec:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800d0f0:	d1ee      	bne.n	800d0d0 <_Z14detectResponseifiii+0x124>
      drawRedBackground(270, 480, 40, 100);
      drawRedBackground(270, 480, 125, 180);
      drawRedBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d0f2:	4875      	ldr	r0, [pc, #468]	; (800d2c8 <_Z14detectResponseifiii+0x31c>)
      sprintf(buf, " Prediction:");
 800d0f4:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d0f6:	f7fb fd11 	bl	8008b1c <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 800d0fa:	4b74      	ldr	r3, [pc, #464]	; (800d2cc <_Z14detectResponseifiii+0x320>)
 800d0fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0fe:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800d100:	aa03      	add	r2, sp, #12
      sprintf(buf, " Prediction:");
 800d102:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800d104:	2150      	movs	r1, #80	; 0x50
 800d106:	2303      	movs	r3, #3
 800d108:	f240 1011 	movw	r0, #273	; 0x111
 800d10c:	f7fb fdd2 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", pred);
 800d110:	4632      	mov	r2, r6
 800d112:	4971      	ldr	r1, [pc, #452]	; (800d2d8 <_Z14detectResponseifiii+0x32c>)
 800d114:	a803      	add	r0, sp, #12
 800d116:	f01c f949 	bl	80293ac <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 800d11a:	2303      	movs	r3, #3
 800d11c:	aa03      	add	r2, sp, #12
 800d11e:	2164      	movs	r1, #100	; 0x64
 800d120:	f240 1011 	movw	r0, #273	; 0x111
 800d124:	f7fb fdc6 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground-Truth");
 800d128:	4b6c      	ldr	r3, [pc, #432]	; (800d2dc <_Z14detectResponseifiii+0x330>)
 800d12a:	ae03      	add	r6, sp, #12
 800d12c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d12e:	c607      	stmia	r6!, {r0, r1, r2}
 800d130:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 800d132:	aa03      	add	r2, sp, #12
 800d134:	2303      	movs	r3, #3
 800d136:	2178      	movs	r1, #120	; 0x78
 800d138:	f240 1011 	movw	r0, #273	; 0x111
 800d13c:	f7fb fdba 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", label);
 800d140:	462a      	mov	r2, r5
 800d142:	4965      	ldr	r1, [pc, #404]	; (800d2d8 <_Z14detectResponseifiii+0x32c>)
 800d144:	a803      	add	r0, sp, #12
 800d146:	f01c f931 	bl	80293ac <sprintf>
      BSP_LCD_DisplayStringAt(273, 140, buf, LEFT_MODE);
 800d14a:	aa03      	add	r2, sp, #12
 800d14c:	2303      	movs	r3, #3
 800d14e:	218c      	movs	r1, #140	; 0x8c
 800d150:	f240 1011 	movw	r0, #273	; 0x111
 800d154:	f7fb fdae 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
    }
  }

  if (ms == 0)
 800d158:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d160:	d06d      	beq.n	800d23e <_Z14detectResponseifiii+0x292>
    return;
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d162:	485f      	ldr	r0, [pc, #380]	; (800d2e0 <_Z14detectResponseifiii+0x334>)
 800d164:	f7fb fcda 	bl	8008b1c <BSP_LCD_SetTextColor>
  volatile float rate = 1000 / ms;
 800d168:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d2e4 <_Z14detectResponseifiii+0x338>
  volatile int decimal = (int)rate;
  volatile int floating = (int)((rate - (float)decimal) * 1000);
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800d16c:	a803      	add	r0, sp, #12
 800d16e:	495e      	ldr	r1, [pc, #376]	; (800d2e8 <_Z14detectResponseifiii+0x33c>)
  volatile float rate = 1000 / ms;
 800d170:	eec6 7a88 	vdiv.f32	s15, s13, s16
 800d174:	edcd 7a00 	vstr	s15, [sp]
  volatile int decimal = (int)rate;
 800d178:	eddd 7a00 	vldr	s15, [sp]
 800d17c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d180:	edcd 7a01 	vstr	s15, [sp, #4]
  volatile int floating = (int)((rate - (float)decimal) * 1000);
 800d184:	ed9d 7a00 	vldr	s14, [sp]
 800d188:	eddd 7a01 	vldr	s15, [sp, #4]
 800d18c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d190:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d194:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d19c:	edcd 7a02 	vstr	s15, [sp, #8]
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800d1a0:	9a01      	ldr	r2, [sp, #4]
 800d1a2:	9b02      	ldr	r3, [sp, #8]
 800d1a4:	f01c f902 	bl	80293ac <sprintf>
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
 800d1a8:	aa03      	add	r2, sp, #12
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	21b4      	movs	r1, #180	; 0xb4
 800d1ae:	f240 1011 	movw	r0, #273	; 0x111
 800d1b2:	f7fb fd7f 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
}
 800d1b6:	b008      	add	sp, #32
 800d1b8:	ecbd 8b02 	vpop	{d8}
 800d1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = x1 - 1; i < x2; i++)
 800d1c0:	f240 160d 	movw	r6, #269	; 0x10d
 800d1c4:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800d1c6:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, black);
 800d1c8:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d1ca:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f7fb fdcc 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d1d4:	2c64      	cmp	r4, #100	; 0x64
 800d1d6:	d1f7      	bne.n	800d1c8 <_Z14detectResponseifiii+0x21c>
  for (int i = x1 - 1; i < x2; i++)
 800d1d8:	3601      	adds	r6, #1
 800d1da:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800d1de:	d1f1      	bne.n	800d1c4 <_Z14detectResponseifiii+0x218>
 800d1e0:	f240 160d 	movw	r6, #269	; 0x10d
 800d1e4:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800d1e6:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, black);
 800d1e8:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d1ea:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f7fb fdbc 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d1f4:	2cb4      	cmp	r4, #180	; 0xb4
 800d1f6:	d1f7      	bne.n	800d1e8 <_Z14detectResponseifiii+0x23c>
  for (int i = x1 - 1; i < x2; i++)
 800d1f8:	3601      	adds	r6, #1
 800d1fa:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800d1fe:	d1f1      	bne.n	800d1e4 <_Z14detectResponseifiii+0x238>
 800d200:	f240 160d 	movw	r6, #269	; 0x10d
 800d204:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800d206:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, black);
 800d208:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d20a:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 800d20c:	2200      	movs	r2, #0
 800d20e:	4628      	mov	r0, r5
 800d210:	f7fb fdac 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d214:	2cfa      	cmp	r4, #250	; 0xfa
 800d216:	d1f7      	bne.n	800d208 <_Z14detectResponseifiii+0x25c>
  for (int i = x1 - 1; i < x2; i++)
 800d218:	3601      	adds	r6, #1
 800d21a:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800d21e:	d1f1      	bne.n	800d204 <_Z14detectResponseifiii+0x258>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d220:	4829      	ldr	r0, [pc, #164]	; (800d2c8 <_Z14detectResponseifiii+0x31c>)
 800d222:	f7fb fc7b 	bl	8008b1c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
 800d226:	2303      	movs	r3, #3
 800d228:	4a30      	ldr	r2, [pc, #192]	; (800d2ec <_Z14detectResponseifiii+0x340>)
 800d22a:	2164      	movs	r1, #100	; 0x64
 800d22c:	f240 1011 	movw	r0, #273	; 0x111
 800d230:	f7fb fd40 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
  if (ms == 0)
 800d234:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23c:	d191      	bne.n	800d162 <_Z14detectResponseifiii+0x1b6>
}
 800d23e:	b008      	add	sp, #32
 800d240:	ecbd 8b02 	vpop	{d8}
 800d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = x1 - 1; i < x2; i++)
 800d248:	f240 160d 	movw	r6, #269	; 0x10d
 800d24c:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800d24e:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, blue);
 800d250:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d252:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800d254:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800d258:	4628      	mov	r0, r5
 800d25a:	f7fb fd87 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d25e:	2c64      	cmp	r4, #100	; 0x64
 800d260:	d1f6      	bne.n	800d250 <_Z14detectResponseifiii+0x2a4>
  for (int i = x1 - 1; i < x2; i++)
 800d262:	3601      	adds	r6, #1
 800d264:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800d268:	d1f0      	bne.n	800d24c <_Z14detectResponseifiii+0x2a0>
 800d26a:	f240 160d 	movw	r6, #269	; 0x10d
 800d26e:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800d270:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, blue);
 800d272:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d274:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800d276:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7fb fd76 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d280:	2cb4      	cmp	r4, #180	; 0xb4
 800d282:	d1f6      	bne.n	800d272 <_Z14detectResponseifiii+0x2c6>
  for (int i = x1 - 1; i < x2; i++)
 800d284:	3601      	adds	r6, #1
 800d286:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800d28a:	d1f0      	bne.n	800d26e <_Z14detectResponseifiii+0x2c2>
 800d28c:	f240 160d 	movw	r6, #269	; 0x10d
 800d290:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800d292:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, blue);
 800d294:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800d296:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800d298:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800d29c:	4628      	mov	r0, r5
 800d29e:	f7fb fd65 	bl	8008d6c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800d2a2:	2cfa      	cmp	r4, #250	; 0xfa
 800d2a4:	d1f6      	bne.n	800d294 <_Z14detectResponseifiii+0x2e8>
  for (int i = x1 - 1; i < x2; i++)
 800d2a6:	3601      	adds	r6, #1
 800d2a8:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800d2ac:	d1f0      	bne.n	800d290 <_Z14detectResponseifiii+0x2e4>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d2ae:	4806      	ldr	r0, [pc, #24]	; (800d2c8 <_Z14detectResponseifiii+0x31c>)
 800d2b0:	f7fb fc34 	bl	8008b1c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	4a0e      	ldr	r2, [pc, #56]	; (800d2f0 <_Z14detectResponseifiii+0x344>)
 800d2b8:	2164      	movs	r1, #100	; 0x64
 800d2ba:	f240 1011 	movw	r0, #273	; 0x111
 800d2be:	f7fb fcf9 	bl	8008cb4 <BSP_LCD_DisplayStringAt>
 800d2c2:	e7b7      	b.n	800d234 <_Z14detectResponseifiii+0x288>
 800d2c4:	2000c530 	.word	0x2000c530
 800d2c8:	ffff0000 	.word	0xffff0000
 800d2cc:	08032318 	.word	0x08032318
 800d2d0:	08032328 	.word	0x08032328
 800d2d4:	08032338 	.word	0x08032338
 800d2d8:	08032348 	.word	0x08032348
 800d2dc:	08032368 	.word	0x08032368
 800d2e0:	ff0000ff 	.word	0xff0000ff
 800d2e4:	447a0000 	.word	0x447a0000
 800d2e8:	08032388 	.word	0x08032388
 800d2ec:	08032378 	.word	0x08032378
 800d2f0:	08032358 	.word	0x08032358

0800d2f4 <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	b0a2      	sub	sp, #136	; 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800d2f8:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800d2fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d2fe:	21c0      	movs	r1, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800d300:	2408      	movs	r4, #8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800d302:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800d304:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800d306:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d308:	9106      	str	r1, [sp, #24]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800d30a:	9401      	str	r4, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800d30c:	f7fd fc9a 	bl	800ac44 <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 800d310:	f7fb fe1e 	bl	8008f50 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 800d314:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800d318:	2000      	movs	r0, #0
 800d31a:	f7fb fbb3 	bl	8008a84 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 800d31e:	f7fb fb99 	bl	8008a54 <BSP_LCD_GetXSize>
 800d322:	4604      	mov	r4, r0
 800d324:	f7fb fba2 	bl	8008a6c <BSP_LCD_GetYSize>
 800d328:	fb00 f104 	mul.w	r1, r0, r4
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 800d32c:	2001      	movs	r0, #1
 800d32e:	f101 5140 	add.w	r1, r1, #805306368	; 0x30000000
 800d332:	0089      	lsls	r1, r1, #2
 800d334:	f7fb fba6 	bl	8008a84 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 800d338:	f7fb fd34 	bl	8008da4 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 800d33c:	2000      	movs	r0, #0
 800d33e:	f7fb fbe1 	bl	8008b04 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800d342:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d346:	f7fb fbf5 	bl	8008b34 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 800d34a:	2001      	movs	r0, #1
 800d34c:	f7fb fbda 	bl	8008b04 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800d350:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d354:	f7fb fbee 	bl	8008b34 <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 800d358:	2100      	movs	r1, #0
 800d35a:	4608      	mov	r0, r1
 800d35c:	f7fb fbd8 	bl	8008b10 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 800d360:	2164      	movs	r1, #100	; 0x64
 800d362:	2001      	movs	r0, #1
 800d364:	f7fb fbd4 	bl	8008b10 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d368:	4802      	ldr	r0, [pc, #8]	; (800d374 <_Z8lcdsetupv+0x80>)
 800d36a:	f7fb fbd7 	bl	8008b1c <BSP_LCD_SetTextColor>
}
 800d36e:	b022      	add	sp, #136	; 0x88
 800d370:	bd10      	pop	{r4, pc}
 800d372:	bf00      	nop
 800d374:	ff0000ff 	.word	0xff0000ff

0800d378 <_Z27invoke_new_weights_givenimgPa>:
      labels[i] = 0.0f;
  }
  invoke(labels);
}

void invoke_new_weights_givenimg(signed char *out_int8) {
 800d378:	b510      	push	{r4, lr}
 800d37a:	4604      	mov	r4, r0
  invoke_inf();
 800d37c:	f00b f954 	bl	8018628 <invoke_inf>
  signed char *output = (signed char *)getOutput();
 800d380:	f008 f9a2 	bl	80156c8 <getOutput>
 800d384:	f100 0208 	add.w	r2, r0, #8
 800d388:	f104 0308 	add.w	r3, r4, #8
 800d38c:	4298      	cmp	r0, r3
 800d38e:	bf38      	it	cc
 800d390:	4294      	cmpcc	r4, r2
 800d392:	d30e      	bcc.n	800d3b2 <_Z27invoke_new_weights_givenimgPa+0x3a>
 800d394:	ea40 0304 	orr.w	r3, r0, r4
 800d398:	075b      	lsls	r3, r3, #29
 800d39a:	d10a      	bne.n	800d3b2 <_Z27invoke_new_weights_givenimgPa+0x3a>
  for (int i = 0; i < 10; i++)
    out_int8[i] = output[i];
 800d39c:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d3a0:	e9c4 2300 	strd	r2, r3, [r4]
 800d3a4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800d3a8:	7223      	strb	r3, [r4, #8]
 800d3aa:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800d3ae:	7263      	strb	r3, [r4, #9]
}
 800d3b0:	bd10      	pop	{r4, pc}
    out_int8[i] = output[i];
 800d3b2:	f990 3000 	ldrsb.w	r3, [r0]
 800d3b6:	7023      	strb	r3, [r4, #0]
 800d3b8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d3bc:	7063      	strb	r3, [r4, #1]
 800d3be:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800d3c2:	70a3      	strb	r3, [r4, #2]
 800d3c4:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800d3c8:	70e3      	strb	r3, [r4, #3]
 800d3ca:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800d3ce:	7123      	strb	r3, [r4, #4]
 800d3d0:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800d3d4:	7163      	strb	r3, [r4, #5]
 800d3d6:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800d3da:	71a3      	strb	r3, [r4, #6]
 800d3dc:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800d3e0:	71e3      	strb	r3, [r4, #7]
 800d3e2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800d3e6:	7223      	strb	r3, [r4, #8]
 800d3e8:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800d3ec:	7263      	strb	r3, [r4, #9]
}
 800d3ee:	bd10      	pop	{r4, pc}

0800d3f0 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800d3f0:	4b3c      	ldr	r3, [pc, #240]	; (800d4e4 <main+0xf4>)
#define RES_W 128
#define RES_H 120

uint16_t *RGBbuf;
#define ENABLE_TRAIN
int main(void) {
 800d3f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f6:	ed2d 8b02 	vpush	{d8}
 800d3fa:	695a      	ldr	r2, [r3, #20]
 800d3fc:	b0bf      	sub	sp, #252	; 0xfc
 800d3fe:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800d402:	d111      	bne.n	800d428 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d404:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d408:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800d40c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800d410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d414:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800d418:	695a      	ldr	r2, [r3, #20]
 800d41a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d41e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d424:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800d428:	4a2e      	ldr	r2, [pc, #184]	; (800d4e4 <main+0xf4>)
 800d42a:	6953      	ldr	r3, [r2, #20]
 800d42c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800d430:	d128      	bne.n	800d484 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d432:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d436:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800d43a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d43e:	f643 77e0 	movw	r7, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d442:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d446:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800d44a:	07ae      	lsls	r6, r5, #30
 800d44c:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d44e:	ea03 0c07 	and.w	ip, r3, r7
 800d452:	4630      	mov	r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d454:	4629      	mov	r1, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d456:	ea4c 0400 	orr.w	r4, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800d45a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d45c:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 800d460:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800d464:	1c4c      	adds	r4, r1, #1
 800d466:	d1f6      	bne.n	800d456 <main+0x66>
 800d468:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 800d46a:	f113 0f20 	cmn.w	r3, #32
 800d46e:	d1ee      	bne.n	800d44e <main+0x5e>
 800d470:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d474:	6953      	ldr	r3, [r2, #20]
 800d476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d47a:	6153      	str	r3, [r2, #20]
 800d47c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d480:	f3bf 8f6f 	isb	sy
  char buf[150];
  char showbuf[150];

  CPU_CACHE_Enable();
  HAL_Init();
 800d484:	f7fb ff28 	bl	80092d8 <HAL_Init>
void SystemClock_Config(void) {
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d488:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d48a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800d48e:	ac18      	add	r4, sp, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d490:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d492:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 800d496:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLN = 432;
 800d498:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800d49c:	4620      	mov	r0, r4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d49e:	961e      	str	r6, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d4a0:	9622      	str	r6, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLN = 432;
 800d4a2:	9221      	str	r2, [sp, #132]	; 0x84
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d4a4:	e9cd 7318 	strd	r7, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800d4a8:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 800d4aa:	e9cd 511f 	strd	r5, r1, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800d4ae:	9323      	str	r3, [sp, #140]	; 0x8c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800d4b0:	f7fd f8de 	bl	800a670 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 800d4b4:	b100      	cbz	r0, 800d4b8 <main+0xc8>
 800d4b6:	e7fe      	b.n	800d4b6 <main+0xc6>
    while (1) {
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 800d4b8:	f7fd f89e 	bl	800a5f8 <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 800d4bc:	b100      	cbz	r0, 800d4c0 <main+0xd0>
 800d4be:	e7fe      	b.n	800d4be <main+0xce>
    while (1) {
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800d4c0:	220f      	movs	r2, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d4c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d4c6:	f44f 5a80 	mov.w	sl, #4096	; 0x1000

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800d4ca:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800d4cc:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d4ce:	e9cd 6014 	strd	r6, r0, [sp, #80]	; 0x50
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800d4d2:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d4d4:	e9cd 3a16 	strd	r3, sl, [sp, #88]	; 0x58
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800d4d8:	f7fd fa96 	bl	800aa08 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 800d4dc:	4605      	mov	r5, r0
 800d4de:	b118      	cbz	r0, 800d4e8 <main+0xf8>
 800d4e0:	e7fe      	b.n	800d4e0 <main+0xf0>
 800d4e2:	bf00      	nop
 800d4e4:	e000ed00 	.word	0xe000ed00
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d4e8:	4bdb      	ldr	r3, [pc, #876]	; (800d858 <main+0x468>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800d4ea:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4ec:	6020      	str	r0, [r4, #0]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800d4ee:	463a      	mov	r2, r7
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4f0:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
                        ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d4f4:	f04f 090a 	mov.w	r9, #10

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d4f8:	f04f 0b05 	mov.w	fp, #5
      labels[i] = 0.0f;
 800d4fc:	ed9f 8ad7 	vldr	s16, [pc, #860]	; 800d85c <main+0x46c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d500:	e9c4 0001 	strd	r0, r0, [r4, #4]
 800d504:	e9c4 0003 	strd	r0, r0, [r4, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d508:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
  int t_mode = 0;
 800d50c:	9503      	str	r5, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d50e:	f04c 0c10 	orr.w	ip, ip, #16
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800d512:	48d3      	ldr	r0, [pc, #844]	; (800d860 <main+0x470>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d514:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d518:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d51c:	f00c 0c10 	and.w	ip, ip, #16
 800d520:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d524:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d528:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d52c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800d530:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d534:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d538:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 800d53c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d540:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d544:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d548:	f04c 0c02 	orr.w	ip, ip, #2
 800d54c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d550:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d554:	f00c 0c02 	and.w	ip, ip, #2
 800d558:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800d55c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d560:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d564:	f04c 0c08 	orr.w	ip, ip, #8
 800d568:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d56c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d570:	f00c 0c08 	and.w	ip, ip, #8
 800d574:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800d578:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d57c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d580:	f04c 0c04 	orr.w	ip, ip, #4
 800d584:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d588:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d58c:	f00c 0c04 	and.w	ip, ip, #4
 800d590:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800d594:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d598:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d59c:	f04c 0c01 	orr.w	ip, ip, #1
 800d5a0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d5a4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5a8:	f00c 0c01 	and.w	ip, ip, #1
 800d5ac:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800d5b0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d5b4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5b8:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 800d5bc:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d5c0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5c4:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 800d5c8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800d5cc:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800d5d0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5d4:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800d5d8:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d5dc:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5e0:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 800d5e4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800d5e8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800d5ec:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5f0:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 800d5f4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d5f8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d5fc:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800d600:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 800d604:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d608:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d60c:	ea4c 0c01 	orr.w	ip, ip, r1
 800d610:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d614:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d618:	ea0c 0c01 	and.w	ip, ip, r1
 800d61c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800d620:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d624:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800d628:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800d62c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d636:	9313      	str	r3, [sp, #76]	; 0x4c
 800d638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800d63a:	f7fc fa67 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800d63e:	462a      	mov	r2, r5
 800d640:	210c      	movs	r1, #12
 800d642:	4888      	ldr	r0, [pc, #544]	; (800d864 <main+0x474>)
 800d644:	f7fc fa62 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800d648:	463a      	mov	r2, r7
 800d64a:	2108      	movs	r1, #8
 800d64c:	4886      	ldr	r0, [pc, #536]	; (800d868 <main+0x478>)
 800d64e:	f7fc fa5d 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800d652:	463a      	mov	r2, r7
 800d654:	4651      	mov	r1, sl
 800d656:	4883      	ldr	r0, [pc, #524]	; (800d864 <main+0x474>)
 800d658:	f7fc fa58 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800d65c:	462a      	mov	r2, r5
 800d65e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d662:	4882      	ldr	r0, [pc, #520]	; (800d86c <main+0x47c>)
 800d664:	f7fc fa52 	bl	8009b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800d668:	462a      	mov	r2, r5
 800d66a:	21c8      	movs	r1, #200	; 0xc8
 800d66c:	4880      	ldr	r0, [pc, #512]	; (800d870 <main+0x480>)
 800d66e:	f7fc fa4d 	bl	8009b0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800d672:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d674:	4621      	mov	r1, r4
 800d676:	487f      	ldr	r0, [pc, #508]	; (800d874 <main+0x484>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800d678:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d67a:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d67e:	f7fc f921 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800d682:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d686:	4621      	mov	r1, r4
 800d688:	4879      	ldr	r0, [pc, #484]	; (800d870 <main+0x480>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800d68a:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d68c:	230b      	movs	r3, #11
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d68e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d692:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d694:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d698:	f7fc f914 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800d69c:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	4875      	ldr	r0, [pc, #468]	; (800d878 <main+0x488>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800d6a4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6a6:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d6aa:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ae:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6b2:	f7fc f907 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800d6b6:	2208      	movs	r2, #8
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800d6b8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	4868      	ldr	r0, [pc, #416]	; (800d860 <main+0x470>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800d6be:	921c      	str	r2, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800d6c0:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6c2:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c4:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800d6c8:	f7fc f8fc 	bl	80098c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	486b      	ldr	r0, [pc, #428]	; (800d87c <main+0x48c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6d0:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d6d2:	e9cd a518 	strd	sl, r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d6d6:	f7fc f8f5 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800d6da:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4860      	ldr	r0, [pc, #384]	; (800d860 <main+0x470>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800d6e0:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d6e2:	4b67      	ldr	r3, [pc, #412]	; (800d880 <main+0x490>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6e4:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d6e6:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800d6e8:	f7fc f8ec 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800d6ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	4864      	ldr	r0, [pc, #400]	; (800d884 <main+0x494>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800d6f4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6f6:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6fa:	e9cd 891b 	strd	r8, r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6fe:	f7fc f8e1 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800d702:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800d704:	4621      	mov	r1, r4
 800d706:	4856      	ldr	r0, [pc, #344]	; (800d860 <main+0x470>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d708:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800d70a:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d70c:	e9cd 7519 	strd	r7, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800d710:	f7fc f8d8 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800d714:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d718:	4621      	mov	r1, r4
 800d71a:	4852      	ldr	r0, [pc, #328]	; (800d864 <main+0x474>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800d71c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d71e:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d720:	e9cd 7519 	strd	r7, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d724:	f7fc f8ce 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800d728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d72c:	4621      	mov	r1, r4
 800d72e:	4856      	ldr	r0, [pc, #344]	; (800d888 <main+0x498>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800d730:	9218      	str	r2, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d732:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d736:	f7fc f8c5 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800d73a:	2208      	movs	r2, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800d73c:	4621      	mov	r1, r4
 800d73e:	484a      	ldr	r0, [pc, #296]	; (800d868 <main+0x478>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d740:	e9cd 2718 	strd	r2, r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d744:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800d748:	f7fc f8bc 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800d74c:	2210      	movs	r2, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d74e:	4621      	mov	r1, r4
 800d750:	4843      	ldr	r0, [pc, #268]	; (800d860 <main+0x470>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800d752:	9218      	str	r2, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d754:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d758:	f7fc f8b4 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800d75c:	f248 0304 	movw	r3, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d760:	4621      	mov	r1, r4
 800d762:	4842      	ldr	r0, [pc, #264]	; (800d86c <main+0x47c>)
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800d764:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d766:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d76a:	f7fc f8ab 	bl	80098c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800d76e:	4621      	mov	r1, r4
 800d770:	483c      	ldr	r0, [pc, #240]	; (800d864 <main+0x474>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d772:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d776:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d77a:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800d77e:	f7fc f8a1 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800d782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800d786:	4621      	mov	r1, r4
 800d788:	4838      	ldr	r0, [pc, #224]	; (800d86c <main+0x47c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d78a:	e9cd 2718 	strd	r2, r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d78e:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800d792:	f7fc f897 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d796:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d79a:	4621      	mov	r1, r4
 800d79c:	4831      	ldr	r0, [pc, #196]	; (800d864 <main+0x474>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d79e:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7a0:	e9cd 8519 	strd	r8, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d7a4:	f7fc f88e 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800d7a8:	4a35      	ldr	r2, [pc, #212]	; (800d880 <main+0x490>)
 800d7aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	482c      	ldr	r0, [pc, #176]	; (800d864 <main+0x474>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7b2:	951a      	str	r5, [sp, #104]	; 0x68
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800d7b4:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800d7b8:	f7fc f884 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800d7bc:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800d7be:	4621      	mov	r1, r4
 800d7c0:	482a      	ldr	r0, [pc, #168]	; (800d86c <main+0x47c>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800d7c2:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7c4:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d7c8:	e9cd 891b 	strd	r8, r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800d7cc:	f7fc f87a 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800d7d0:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	4826      	ldr	r0, [pc, #152]	; (800d870 <main+0x480>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800d7d6:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7d8:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7da:	e9cd 7519 	strd	r7, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d7de:	f7fc f871 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	4828      	ldr	r0, [pc, #160]	; (800d888 <main+0x498>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800d7e6:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7ea:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d7ee:	e9cd 891b 	strd	r8, r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7f2:	f7fc f867 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d7f6:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800d7f8:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	4822      	ldr	r0, [pc, #136]	; (800d888 <main+0x498>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d7fe:	921c      	str	r2, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800d800:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d802:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d806:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d80a:	f7fc f85b 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800d80e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800d810:	4621      	mov	r1, r4
 800d812:	4817      	ldr	r0, [pc, #92]	; (800d870 <main+0x480>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800d814:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d816:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800d81a:	f7fc f853 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d81e:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800d820:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d822:	4621      	mov	r1, r4
 800d824:	4817      	ldr	r0, [pc, #92]	; (800d884 <main+0x494>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800d826:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d828:	e9cd 821b 	strd	r8, r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d82c:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d830:	f7fc f848 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800d834:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d836:	4621      	mov	r1, r4
 800d838:	4812      	ldr	r0, [pc, #72]	; (800d884 <main+0x494>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800d83a:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d83c:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d840:	e9cd 891b 	strd	r8, r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d844:	f7fc f83e 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800d848:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d84c:	4621      	mov	r1, r4
 800d84e:	480a      	ldr	r0, [pc, #40]	; (800d878 <main+0x488>)
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800d850:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d852:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 800d856:	e019      	b.n	800d88c <main+0x49c>
 800d858:	40023800 	.word	0x40023800
 800d85c:	00000000 	.word	0x00000000
 800d860:	40020c00 	.word	0x40020c00
 800d864:	40022000 	.word	0x40022000
 800d868:	40022800 	.word	0x40022800
 800d86c:	40021c00 	.word	0x40021c00
 800d870:	40021800 	.word	0x40021800
 800d874:	40021000 	.word	0x40021000
 800d878:	40020400 	.word	0x40020400
 800d87c:	40022400 	.word	0x40022400
 800d880:	10120000 	.word	0x10120000
 800d884:	40020000 	.word	0x40020000
 800d888:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d88c:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d88e:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d892:	f7fc f817 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800d896:	4621      	mov	r1, r4
 800d898:	48ba      	ldr	r0, [pc, #744]	; (800db84 <main+0x794>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d89a:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d89c:	e9cd 7518 	strd	r7, r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800d8a0:	f7fc f810 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800d8a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	48b7      	ldr	r0, [pc, #732]	; (800db88 <main+0x798>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800d8ac:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8ae:	e9cd 5719 	strd	r5, r7, [sp, #100]	; 0x64
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800d8b2:	f7fc f807 	bl	80098c4 <HAL_GPIO_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	4db4      	ldr	r5, [pc, #720]	; (800db8c <main+0x79c>)
 800d8bc:	f7fb f864 	bl	8008988 <BSP_PB_Init>
 800d8c0:	4eb3      	ldr	r6, [pc, #716]	; (800db90 <main+0x7a0>)
  lcdsetup();
 800d8c2:	f7ff fd17 	bl	800d2f4 <_Z8lcdsetupv>
 800d8c6:	4fb3      	ldr	r7, [pc, #716]	; (800db94 <main+0x7a4>)
  int camErr = initCamera();
 800d8c8:	f7fe ff46 	bl	800c758 <_Z10initCamerav>
  StartCapture();
 800d8cc:	f7ff f880 	bl	800c9d0 <_Z12StartCapturev>
  signed char *input = getInput();
 800d8d0:	f007 fef6 	bl	80156c0 <getInput>
  RGBbuf = (uint16_t *)&input[128 * 128 * 4];
 800d8d4:	4ab0      	ldr	r2, [pc, #704]	; (800db98 <main+0x7a8>)
 800d8d6:	f500 3380 	add.w	r3, r0, #65536	; 0x10000
 800d8da:	f500 4134 	add.w	r1, r0, #46080	; 0xb400
 800d8de:	f500 4b40 	add.w	fp, r0, #49152	; 0xc000
  signed char *input = getInput();
 800d8e2:	9004      	str	r0, [sp, #16]
 800d8e4:	9106      	str	r1, [sp, #24]
  RGBbuf = (uint16_t *)&input[128 * 128 * 4];
 800d8e6:	6013      	str	r3, [r2, #0]
    starti = HAL_GetTick();
 800d8e8:	f7fb fd18 	bl	800931c <HAL_GetTick>
 800d8ec:	4680      	mov	r8, r0
    ReadCapture();
 800d8ee:	f7ff f8d1 	bl	800ca94 <_Z11ReadCapturev>
    StartCapture();
 800d8f2:	f7ff f86d 	bl	800c9d0 <_Z12StartCapturev>
    DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800d8f6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d8fa:	2001      	movs	r0, #1
 800d8fc:	4ba6      	ldr	r3, [pc, #664]	; (800db98 <main+0x7a8>)
 800d8fe:	464a      	mov	r2, r9
 800d900:	2178      	movs	r1, #120	; 0x78
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	9000      	str	r0, [sp, #0]
 800d906:	2080      	movs	r0, #128	; 0x80
 800d908:	f7fe ff6e 	bl	800c7e8 <_Z22DecodeandProcessAndRGBiiPaPti>
 800d90c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800d910:	2180      	movs	r1, #128	; 0x80
 800d912:	9806      	ldr	r0, [sp, #24]
 800d914:	f01b fafb 	bl	8028f0e <memset>
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d918:	4b9f      	ldr	r3, [pc, #636]	; (800db98 <main+0x7a8>)
 800d91a:	4648      	mov	r0, r9
 800d91c:	f8d3 e000 	ldr.w	lr, [r3]
 800d920:	f1ae 0a02 	sub.w	sl, lr, #2
 800d924:	f500 7cc0 	add.w	ip, r0, #384	; 0x180
  int t_mode = 0;
 800d928:	4651      	mov	r1, sl
        uint8_t red = (int32_t)input[(128 * i + j) * 3] + 128;
 800d92a:	7803      	ldrb	r3, [r0, #0]
 800d92c:	3003      	adds	r0, #3
        uint8_t green = (int32_t)input[(128 * i + j) * 3 + 1] + 128;
 800d92e:	f810 9c02 	ldrb.w	r9, [r0, #-2]
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d932:	f083 0380 	eor.w	r3, r3, #128	; 0x80
        uint8_t blue = (int32_t)input[(128 * i + j) * 3 + 2] + 128;
 800d936:	f810 2c01 	ldrb.w	r2, [r0, #-1]
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800d93a:	f089 0980 	eor.w	r9, r9, #128	; 0x80
      for (int j = 0; j < RES_W; j++) {
 800d93e:	4584      	cmp	ip, r0
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d940:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        uint16_t b = (blue >> 3) & 0x1f;
 800d944:	f082 0280 	eor.w	r2, r2, #128	; 0x80
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800d948:	ea4f 0999 	mov.w	r9, r9, lsr #2
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800d94c:	ea4f 23c3 	mov.w	r3, r3, lsl #11
        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800d950:	ea43 1349 	orr.w	r3, r3, r9, lsl #5
 800d954:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800d958:	f821 3f02 	strh.w	r3, [r1, #2]!
      for (int j = 0; j < RES_W; j++) {
 800d95c:	d1e5      	bne.n	800d92a <main+0x53a>
    for (int i = 0; i < RES_W; i++) {
 800d95e:	45e3      	cmp	fp, ip
 800d960:	f50a 7a80 	add.w	sl, sl, #256	; 0x100
 800d964:	d1de      	bne.n	800d924 <main+0x534>
    loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 2);
 800d966:	2380      	movs	r3, #128	; 0x80
 800d968:	210a      	movs	r1, #10
 800d96a:	f04f 0902 	mov.w	r9, #2
 800d96e:	461a      	mov	r2, r3
 800d970:	4608      	mov	r0, r1
 800d972:	e9cd e900 	strd	lr, r9, [sp]
 800d976:	f7ff fab1 	bl	800cedc <_Z13loadRGB565LCDmmmmPth>
    endi = HAL_GetTick();
 800d97a:	f7fb fccf 	bl	800931c <HAL_GetTick>
    uint8_t button0 = BSP_PB_GetState(BUTTON_KEY) == GPIO_PIN_SET;
 800d97e:	4648      	mov	r0, r9
 800d980:	f7fb f85a 	bl	8008a38 <BSP_PB_GetState>
    uint8_t button1 = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800d984:	2101      	movs	r1, #1
 800d986:	487f      	ldr	r0, [pc, #508]	; (800db84 <main+0x794>)
 800d988:	f7fc f8ba 	bl	8009b00 <HAL_GPIO_ReadPin>
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d98c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    uint8_t button1 = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800d990:	fab0 fa80 	clz	sl, r0
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d994:	487c      	ldr	r0, [pc, #496]	; (800db88 <main+0x798>)
 800d996:	f7fc f8b3 	bl	8009b00 <HAL_GPIO_ReadPin>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
}

void recieveChar(char *s) {
	static int is_initialized = 0;
	if (!is_initialized) {
 800d99a:	4b80      	ldr	r3, [pc, #512]	; (800db9c <main+0x7ac>)
    s[0] = 'c';
 800d99c:	2263      	movs	r2, #99	; 0x63
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d99e:	fab0 f980 	clz	r9, r0
 800d9a2:	681b      	ldr	r3, [r3, #0]
    uint8_t button1 = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800d9a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    s[0] = 'c';
 800d9a8:	f88d 2020 	strb.w	r2, [sp, #32]
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800d9ac:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 80d1 	beq.w	800db58 <main+0x768>
		if (HAL_UART_Init(&UART) != HAL_OK) {
			//Error handling
		}
		is_initialized = 1;
	}
	HAL_UART_Receive(&UART, (uint8_t*) s, 1, 10);
 800d9b6:	230a      	movs	r3, #10
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	a908      	add	r1, sp, #32
 800d9bc:	4873      	ldr	r0, [pc, #460]	; (800db8c <main+0x79c>)
 800d9be:	f7fe f8c7 	bl	800bb50 <HAL_UART_Receive>
	if (!is_initialized) {
 800d9c2:	4b77      	ldr	r3, [pc, #476]	; (800dba0 <main+0x7b0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 80b1 	beq.w	800db2e <main+0x73e>
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800d9cc:	a808      	add	r0, sp, #32
 800d9ce:	f7f9 f9e9 	bl	8006da4 <strlen>
 800d9d2:	230a      	movs	r3, #10
 800d9d4:	b282      	uxth	r2, r0
 800d9d6:	a908      	add	r1, sp, #32
 800d9d8:	486c      	ldr	r0, [pc, #432]	; (800db8c <main+0x79c>)
 800d9da:	f7fe f82d 	bl	800ba38 <HAL_UART_Transmit>
    if (s[0] == '3')
 800d9de:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d9e2:	2b33      	cmp	r3, #51	; 0x33
 800d9e4:	d058      	beq.n	800da98 <main+0x6a8>
    if (t_mode) {
 800d9e6:	2b34      	cmp	r3, #52	; 0x34
 800d9e8:	d00f      	beq.n	800da0a <main+0x61a>
 800d9ea:	9a03      	ldr	r2, [sp, #12]
 800d9ec:	b16a      	cbz	r2, 800da0a <main+0x61a>
      if ((button2 || button1 || s[0] == '1' || s[0] == '2')) {
 800d9ee:	f1ba 0f00 	cmp.w	sl, #0
 800d9f2:	d157      	bne.n	800daa4 <main+0x6b4>
 800d9f4:	f1b9 0f00 	cmp.w	r9, #0
 800d9f8:	d154      	bne.n	800daa4 <main+0x6b4>
 800d9fa:	2b31      	cmp	r3, #49	; 0x31
 800d9fc:	d058      	beq.n	800dab0 <main+0x6c0>
 800d9fe:	2b32      	cmp	r3, #50	; 0x32
 800da00:	f000 80d8 	beq.w	800dbb4 <main+0x7c4>
 800da04:	2301      	movs	r3, #1
 800da06:	9303      	str	r3, [sp, #12]
  }
 800da08:	e76e      	b.n	800d8e8 <main+0x4f8>
      start = HAL_GetTick();
 800da0a:	f7fb fc87 	bl	800931c <HAL_GetTick>
      detectResponse(person, end - starti, t_mode, 0, 0);
 800da0e:	2300      	movs	r3, #0
 800da10:	9303      	str	r3, [sp, #12]
  invoke_inf();
 800da12:	f00a fe09 	bl	8018628 <invoke_inf>
  signed char *output = (signed char *)getOutput();
 800da16:	f007 fe57 	bl	80156c8 <getOutput>
    out_int8[i] = output[i];
 800da1a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800da1e:	f990 a000 	ldrsb.w	sl, [r0]
 800da22:	f990 9001 	ldrsb.w	r9, [r0, #1]
 800da26:	70b3      	strb	r3, [r6, #2]
 800da28:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800da2c:	f886 a000 	strb.w	sl, [r6]
 800da30:	70f3      	strb	r3, [r6, #3]
 800da32:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800da36:	f886 9001 	strb.w	r9, [r6, #1]
 800da3a:	7133      	strb	r3, [r6, #4]
 800da3c:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800da40:	7173      	strb	r3, [r6, #5]
 800da42:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800da46:	71b3      	strb	r3, [r6, #6]
 800da48:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800da4c:	71f3      	strb	r3, [r6, #7]
 800da4e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800da52:	7233      	strb	r3, [r6, #8]
 800da54:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800da58:	7273      	strb	r3, [r6, #9]
      end = HAL_GetTick();
 800da5a:	f7fb fc5f 	bl	800931c <HAL_GetTick>
      sprintf(showbuf, " Inference ");
 800da5e:	4b51      	ldr	r3, [pc, #324]	; (800dba4 <main+0x7b4>)
      end = HAL_GetTick();
 800da60:	9005      	str	r0, [sp, #20]
      sprintf(showbuf, " Inference ");
 800da62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      displaystring(showbuf, 273, 10);
 800da6a:	4620      	mov	r0, r4
 800da6c:	220a      	movs	r2, #10
 800da6e:	f240 1111 	movw	r1, #273	; 0x111
 800da72:	f7ff fa91 	bl	800cf98 <_Z13displaystringPcii>
      detectResponse(person, end - starti, t_mode, 0, 0);
 800da76:	9b05      	ldr	r3, [sp, #20]
 800da78:	45ca      	cmp	sl, r9
 800da7a:	eba3 0308 	sub.w	r3, r3, r8
 800da7e:	bfd4      	ite	le
 800da80:	2000      	movle	r0, #0
 800da82:	2001      	movgt	r0, #1
 800da84:	ee00 3a10 	vmov	s0, r3
 800da88:	2300      	movs	r3, #0
 800da8a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800da8e:	461a      	mov	r2, r3
 800da90:	4619      	mov	r1, r3
 800da92:	f7ff fa8b 	bl	800cfac <_Z14detectResponseifiii>
 800da96:	e727      	b.n	800d8e8 <main+0x4f8>
      if ((button2 || button1 || s[0] == '1' || s[0] == '2')) {
 800da98:	f1ba 0f00 	cmp.w	sl, #0
 800da9c:	d102      	bne.n	800daa4 <main+0x6b4>
 800da9e:	f1b9 0f00 	cmp.w	r9, #0
 800daa2:	d0af      	beq.n	800da04 <main+0x614>
        if (button2 || s[0] == '1') {
 800daa4:	2b31      	cmp	r3, #49	; 0x31
 800daa6:	d003      	beq.n	800dab0 <main+0x6c0>
 800daa8:	f1b9 0f00 	cmp.w	r9, #0
 800daac:	f000 8082 	beq.w	800dbb4 <main+0x7c4>
          sprintf(showbuf, "Train cls 1");
 800dab0:	4b3d      	ldr	r3, [pc, #244]	; (800dba8 <main+0x7b8>)
        DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800dab2:	f04f 0901 	mov.w	r9, #1
          sprintf(showbuf, "Train cls 1");
 800dab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800daba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        start = HAL_GetTick();
 800dabe:	f7fb fc2d 	bl	800931c <HAL_GetTick>
        invoke_new_weights_givenimg(out_int);
 800dac2:	4833      	ldr	r0, [pc, #204]	; (800db90 <main+0x7a0>)
 800dac4:	f7ff fc58 	bl	800d378 <_Z27invoke_new_weights_givenimgPa>
        if (out_int[0] > out_int[1]) {
 800dac8:	f996 8001 	ldrsb.w	r8, [r6, #1]
 800dacc:	f996 3000 	ldrsb.w	r3, [r6]
      labels[i] = 1.0f;
 800dad0:	f8cd 9014 	str.w	r9, [sp, #20]
        if (out_int[0] > out_int[1]) {
 800dad4:	4598      	cmp	r8, r3
 800dad6:	bfb4      	ite	lt
 800dad8:	f04f 0800 	movlt.w	r8, #0
 800dadc:	f04f 0801 	movge.w	r8, #1
        end = HAL_GetTick();
 800dae0:	f7fb fc1c 	bl	800931c <HAL_GetTick>
        detectResponse(answer_right, 0, t_mode, p, label);
 800dae4:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800dbac <main+0x7bc>
 800dae8:	464b      	mov	r3, r9
 800daea:	4642      	mov	r2, r8
 800daec:	4649      	mov	r1, r9
 800daee:	4640      	mov	r0, r8
 800daf0:	f7ff fa5c 	bl	800cfac <_Z14detectResponseifiii>
      labels[i] = 1.0f;
 800daf4:	46c2      	mov	sl, r8
        ReadCapture();
 800daf6:	f7fe ffcd 	bl	800ca94 <_Z11ReadCapturev>
        StartCapture();
 800dafa:	f7fe ff69 	bl	800c9d0 <_Z12StartCapturev>
        DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800dafe:	4b26      	ldr	r3, [pc, #152]	; (800db98 <main+0x7a8>)
 800db00:	9a04      	ldr	r2, [sp, #16]
 800db02:	2178      	movs	r1, #120	; 0x78
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2080      	movs	r0, #128	; 0x80
 800db08:	f8cd 9000 	str.w	r9, [sp]
 800db0c:	f7fe fe6c 	bl	800c7e8 <_Z22DecodeandProcessAndRGBiiPaPti>
        displaystring(showbuf, 273, 10);
 800db10:	220a      	movs	r2, #10
 800db12:	f240 1111 	movw	r1, #273	; 0x111
 800db16:	4620      	mov	r0, r4
 800db18:	f7ff fa3e 	bl	800cf98 <_Z13displaystringPcii>
        start = HAL_GetTick();
 800db1c:	f7fb fbfe 	bl	800931c <HAL_GetTick>
      labels[i] = 1.0f;
 800db20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        start = HAL_GetTick();
 800db24:	4603      	mov	r3, r0
      labels[i] = 0.0f;
 800db26:	ed87 8a00 	vstr	s16, [r7]
      labels[i] = 1.0f;
 800db2a:	607a      	str	r2, [r7, #4]
 800db2c:	e07f      	b.n	800dc2e <main+0x83e>
		UART.Instance = USART1;
 800db2e:	4820      	ldr	r0, [pc, #128]	; (800dbb0 <main+0x7c0>)
		UART.Init.Mode = UART_MODE_TX_RX;
 800db30:	220c      	movs	r2, #12
		UART.Init.BaudRate = 115200;
 800db32:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
		UART.Init.Parity = UART_PARITY_NONE;
 800db36:	612b      	str	r3, [r5, #16]
		UART.Instance = USART1;
 800db38:	6028      	str	r0, [r5, #0]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800db3a:	4814      	ldr	r0, [pc, #80]	; (800db8c <main+0x79c>)
		UART.Init.Mode = UART_MODE_TX_RX;
 800db3c:	616a      	str	r2, [r5, #20]
		UART.Init.BaudRate = 115200;
 800db3e:	6069      	str	r1, [r5, #4]
		UART.Init.StopBits = UART_STOPBITS_1;
 800db40:	e9c5 3302 	strd	r3, r3, [r5, #8]
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800db44:	e9c5 3306 	strd	r3, r3, [r5, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db48:	e9c5 3308 	strd	r3, r3, [r5, #32]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800db4c:	f7fe f8fa 	bl	800bd44 <HAL_UART_Init>
		is_initialized = 1;
 800db50:	2301      	movs	r3, #1
 800db52:	4a13      	ldr	r2, [pc, #76]	; (800dba0 <main+0x7b0>)
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	e739      	b.n	800d9cc <main+0x5dc>
		UART.Instance = USART1;
 800db58:	4815      	ldr	r0, [pc, #84]	; (800dbb0 <main+0x7c0>)
		UART.Init.Mode = UART_MODE_TX_RX;
 800db5a:	220c      	movs	r2, #12
		UART.Init.BaudRate = 115200;
 800db5c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
		UART.Init.Parity = UART_PARITY_NONE;
 800db60:	612b      	str	r3, [r5, #16]
		UART.Instance = USART1;
 800db62:	6028      	str	r0, [r5, #0]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800db64:	4809      	ldr	r0, [pc, #36]	; (800db8c <main+0x79c>)
		UART.Init.Mode = UART_MODE_TX_RX;
 800db66:	616a      	str	r2, [r5, #20]
		UART.Init.BaudRate = 115200;
 800db68:	6069      	str	r1, [r5, #4]
		UART.Init.StopBits = UART_STOPBITS_1;
 800db6a:	e9c5 3302 	strd	r3, r3, [r5, #8]
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800db6e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db72:	e9c5 3308 	strd	r3, r3, [r5, #32]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800db76:	f7fe f8e5 	bl	800bd44 <HAL_UART_Init>
		is_initialized = 1;
 800db7a:	2301      	movs	r3, #1
 800db7c:	4a07      	ldr	r2, [pc, #28]	; (800db9c <main+0x7ac>)
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	e719      	b.n	800d9b6 <main+0x5c6>
 800db82:	bf00      	nop
 800db84:	40020000 	.word	0x40020000
 800db88:	40021400 	.word	0x40021400
 800db8c:	2000c538 	.word	0x2000c538
 800db90:	2000c5d8 	.word	0x2000c5d8
 800db94:	2000c5b0 	.word	0x2000c5b0
 800db98:	2000c534 	.word	0x2000c534
 800db9c:	2000c5a8 	.word	0x2000c5a8
 800dba0:	2000c5ac 	.word	0x2000c5ac
 800dba4:	080323b0 	.word	0x080323b0
 800dba8:	08032398 	.word	0x08032398
 800dbac:	00000000 	.word	0x00000000
 800dbb0:	40011000 	.word	0x40011000
          sprintf(showbuf, "Train cls 0");
 800dbb4:	4b37      	ldr	r3, [pc, #220]	; (800dc94 <main+0x8a4>)
 800dbb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dbba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        start = HAL_GetTick();
 800dbbe:	f7fb fbad 	bl	800931c <HAL_GetTick>
        invoke_new_weights_givenimg(out_int);
 800dbc2:	4835      	ldr	r0, [pc, #212]	; (800dc98 <main+0x8a8>)
 800dbc4:	f7ff fbd8 	bl	800d378 <_Z27invoke_new_weights_givenimgPa>
        if (out_int[0] > out_int[1]) {
 800dbc8:	f996 2001 	ldrsb.w	r2, [r6, #1]
 800dbcc:	f996 3000 	ldrsb.w	r3, [r6]
      labels[i] = 0.0f;
 800dbd0:	2100      	movs	r1, #0
          p = 1;
 800dbd2:	429a      	cmp	r2, r3
      labels[i] = 0.0f;
 800dbd4:	9105      	str	r1, [sp, #20]
          p = 1;
 800dbd6:	bfb3      	iteet	lt
 800dbd8:	468a      	movlt	sl, r1
 800dbda:	4688      	movge	r8, r1
 800dbdc:	f04f 0a01 	movge.w	sl, #1
 800dbe0:	f04f 0801 	movlt.w	r8, #1
        end = HAL_GetTick();
 800dbe4:	f7fb fb9a 	bl	800931c <HAL_GetTick>
        detectResponse(answer_right, 0, t_mode, p, label);
 800dbe8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dc9c <main+0x8ac>
 800dbec:	2300      	movs	r3, #0
 800dbee:	4652      	mov	r2, sl
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f7ff f9da 	bl	800cfac <_Z14detectResponseifiii>
        ReadCapture();
 800dbf8:	f7fe ff4c 	bl	800ca94 <_Z11ReadCapturev>
        StartCapture();
 800dbfc:	f7fe fee8 	bl	800c9d0 <_Z12StartCapturev>
        DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800dc00:	2001      	movs	r0, #1
 800dc02:	4b27      	ldr	r3, [pc, #156]	; (800dca0 <main+0x8b0>)
 800dc04:	2178      	movs	r1, #120	; 0x78
 800dc06:	9a04      	ldr	r2, [sp, #16]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	9000      	str	r0, [sp, #0]
 800dc0c:	2080      	movs	r0, #128	; 0x80
 800dc0e:	f7fe fdeb 	bl	800c7e8 <_Z22DecodeandProcessAndRGBiiPaPti>
        displaystring(showbuf, 273, 10);
 800dc12:	220a      	movs	r2, #10
 800dc14:	f240 1111 	movw	r1, #273	; 0x111
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f7ff f9bd 	bl	800cf98 <_Z13displaystringPcii>
        start = HAL_GetTick();
 800dc1e:	f7fb fb7d 	bl	800931c <HAL_GetTick>
      labels[i] = 1.0f;
 800dc22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        start = HAL_GetTick();
 800dc26:	4603      	mov	r3, r0
      labels[i] = 0.0f;
 800dc28:	ed87 8a01 	vstr	s16, [r7, #4]
      labels[i] = 1.0f;
 800dc2c:	603a      	str	r2, [r7, #0]
 800dc2e:	9307      	str	r3, [sp, #28]
        detectResponse(answer_right, end - start, t_mode, p, label);
 800dc30:	2301      	movs	r3, #1
  invoke(labels);
 800dc32:	481c      	ldr	r0, [pc, #112]	; (800dca4 <main+0x8b4>)
        detectResponse(answer_right, end - start, t_mode, p, label);
 800dc34:	9303      	str	r3, [sp, #12]
      labels[i] = 0.0f;
 800dc36:	ed87 8a02 	vstr	s16, [r7, #8]
 800dc3a:	ed87 8a03 	vstr	s16, [r7, #12]
 800dc3e:	ed87 8a04 	vstr	s16, [r7, #16]
 800dc42:	ed87 8a05 	vstr	s16, [r7, #20]
 800dc46:	ed87 8a06 	vstr	s16, [r7, #24]
 800dc4a:	ed87 8a07 	vstr	s16, [r7, #28]
 800dc4e:	ed87 8a08 	vstr	s16, [r7, #32]
 800dc52:	ed87 8a09 	vstr	s16, [r7, #36]	; 0x24
  invoke(labels);
 800dc56:	f007 fd3b 	bl	80156d0 <invoke>
        end = HAL_GetTick();
 800dc5a:	f7fb fb5f 	bl	800931c <HAL_GetTick>
        sprintf(showbuf, "Train done ");
 800dc5e:	4b12      	ldr	r3, [pc, #72]	; (800dca8 <main+0x8b8>)
        end = HAL_GetTick();
 800dc60:	4681      	mov	r9, r0
        sprintf(showbuf, "Train done ");
 800dc62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        displaystring(showbuf, 273, 10);
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	220a      	movs	r2, #10
 800dc6e:	f240 1111 	movw	r1, #273	; 0x111
 800dc72:	f7ff f991 	bl	800cf98 <_Z13displaystringPcii>
        detectResponse(answer_right, end - start, t_mode, p, label);
 800dc76:	9b07      	ldr	r3, [sp, #28]
 800dc78:	4652      	mov	r2, sl
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	eba9 0303 	sub.w	r3, r9, r3
 800dc80:	2101      	movs	r1, #1
 800dc82:	ee00 3a10 	vmov	s0, r3
 800dc86:	9b05      	ldr	r3, [sp, #20]
 800dc88:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800dc8c:	f7ff f98e 	bl	800cfac <_Z14detectResponseifiii>
 800dc90:	e62a      	b.n	800d8e8 <main+0x4f8>
 800dc92:	bf00      	nop
 800dc94:	080323a4 	.word	0x080323a4
 800dc98:	2000c5d8 	.word	0x2000c5d8
 800dc9c:	00000000 	.word	0x00000000
 800dca0:	2000c534 	.word	0x2000c534
 800dca4:	2000c5b0 	.word	0x2000c5b0
 800dca8:	080323bc 	.word	0x080323bc

0800dcac <upsampleCb>:
  return (uint8)b;
}
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800dcac:	4a75      	ldr	r2, [pc, #468]	; (800de84 <upsampleCb+0x1d8>)
 800dcae:	3102      	adds	r1, #2
 800dcb0:	4b75      	ldr	r3, [pc, #468]	; (800de88 <upsampleCb+0x1dc>)
 800dcb2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800dcb6:	eb03 0c01 	add.w	ip, r3, r1
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
 800dcba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcbe:	4f73      	ldr	r7, [pc, #460]	; (800de8c <upsampleCb+0x1e0>)
 800dcc0:	f100 0840 	add.w	r8, r0, #64	; 0x40
 800dcc4:	440f      	add	r7, r1
 800dcc6:	4686      	mov	lr, r0
 800dcc8:	f100 0608 	add.w	r6, r0, #8
 800dccc:	463d      	mov	r5, r7
 800dcce:	4664      	mov	r4, ip
  uint8 *pDstG = gMCUBufG + dstOfs;
  uint8 *pDstB = gMCUBufB + dstOfs;
  for (y = 0; y < 4; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
 800dcd0:	f930 3b02 	ldrsh.w	r3, [r0], #2
  b = a - b;
 800dcd4:	f814 9c02 	ldrb.w	r9, [r4, #-2]
      uint8 cb = (uint8)*pSrc++;
 800dcd8:	b2db      	uxtb	r3, r3
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800dcda:	b219      	sxth	r1, r3
 800dcdc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800dce0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800dce4:	0952      	lsrs	r2, r2, #5
 800dce6:	3a2c      	subs	r2, #44	; 0x2c
 800dce8:	b292      	uxth	r2, r2
  b = a - b;
 800dcea:	eba9 0902 	sub.w	r9, r9, r2
 800dcee:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800dcf2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800dcf6:	f240 80ad 	bls.w	800de54 <upsampleCb+0x1a8>
  b = a - b;
 800dcfa:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800dcfe:	f1ba 0f00 	cmp.w	sl, #0
 800dd02:	f2c0 80ad 	blt.w	800de60 <upsampleCb+0x1b4>
    else if (b > 255)
 800dd06:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800dd0a:	f340 80a3 	ble.w	800de54 <upsampleCb+0x1a8>
      return 255;
 800dd0e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  b = a - b;
 800dd12:	f814 9c01 	ldrb.w	r9, [r4, #-1]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800dd16:	f804 ac02 	strb.w	sl, [r4, #-2]
  b = a - b;
 800dd1a:	eba9 0902 	sub.w	r9, r9, r2
 800dd1e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800dd22:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800dd26:	f240 8092 	bls.w	800de4e <upsampleCb+0x1a2>
  b = a - b;
 800dd2a:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800dd2e:	f1ba 0f00 	cmp.w	sl, #0
 800dd32:	f2c0 8092 	blt.w	800de5a <upsampleCb+0x1ae>
    else if (b > 255)
 800dd36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800dd3a:	f340 8088 	ble.w	800de4e <upsampleCb+0x1a2>
      return 255;
 800dd3e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  b = a - b;
 800dd42:	f894 9006 	ldrb.w	r9, [r4, #6]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 800dd46:	f804 ac01 	strb.w	sl, [r4, #-1]
  b = a - b;
 800dd4a:	eba9 0902 	sub.w	r9, r9, r2
 800dd4e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800dd52:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800dd56:	d977      	bls.n	800de48 <upsampleCb+0x19c>
  b = a - b;
 800dd58:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800dd5c:	f1ba 0f00 	cmp.w	sl, #0
 800dd60:	f2c0 8084 	blt.w	800de6c <upsampleCb+0x1c0>
    else if (b > 255)
 800dd64:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800dd68:	dd6e      	ble.n	800de48 <upsampleCb+0x19c>
      return 255;
 800dd6a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  b = a - b;
 800dd6e:	f894 a007 	ldrb.w	sl, [r4, #7]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 800dd72:	f884 9006 	strb.w	r9, [r4, #6]
  b = a - b;
 800dd76:	ebaa 0202 	sub.w	r2, sl, r2
 800dd7a:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800dd7c:	2aff      	cmp	r2, #255	; 0xff
 800dd7e:	d960      	bls.n	800de42 <upsampleCb+0x196>
  b = a - b;
 800dd80:	fa0f f982 	sxth.w	r9, r2
    if (b < 0)
 800dd84:	f1b9 0f00 	cmp.w	r9, #0
 800dd88:	db6d      	blt.n	800de66 <upsampleCb+0x1ba>
    else if (b > 255)
 800dd8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800dd8e:	dd58      	ble.n	800de42 <upsampleCb+0x196>
      return 255;
 800dd90:	f04f 09ff 	mov.w	r9, #255	; 0xff
      pDstG[9] = subAndClamp(pDstG[9], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800dd94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dd98:	3be3      	subs	r3, #227	; 0xe3
  b = a + b;
 800dd9a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800dd9e:	eb01 1141 	add.w	r1, r1, r1, lsl #5
      pDstG[9] = subAndClamp(pDstG[9], cbG);
 800dda2:	f884 9007 	strb.w	r9, [r4, #7]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800dda6:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 800ddaa:	b28b      	uxth	r3, r1
  b = a + b;
 800ddac:	441a      	add	r2, r3
 800ddae:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800ddb0:	2aff      	cmp	r2, #255	; 0xff
 800ddb2:	d944      	bls.n	800de3e <upsampleCb+0x192>
  b = a + b;
 800ddb4:	b211      	sxth	r1, r2
    if (b < 0)
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	db5d      	blt.n	800de76 <upsampleCb+0x1ca>
    else if (b > 255)
 800ddba:	29ff      	cmp	r1, #255	; 0xff
 800ddbc:	dd3f      	ble.n	800de3e <upsampleCb+0x192>
      return 255;
 800ddbe:	21ff      	movs	r1, #255	; 0xff
  b = a + b;
 800ddc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800ddc4:	f805 1c02 	strb.w	r1, [r5, #-2]
  b = a + b;
 800ddc8:	441a      	add	r2, r3
 800ddca:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800ddcc:	2aff      	cmp	r2, #255	; 0xff
 800ddce:	d934      	bls.n	800de3a <upsampleCb+0x18e>
  b = a + b;
 800ddd0:	b211      	sxth	r1, r2
    if (b < 0)
 800ddd2:	2900      	cmp	r1, #0
 800ddd4:	db4d      	blt.n	800de72 <upsampleCb+0x1c6>
    else if (b > 255)
 800ddd6:	29ff      	cmp	r1, #255	; 0xff
 800ddd8:	dd2f      	ble.n	800de3a <upsampleCb+0x18e>
      return 255;
 800ddda:	21ff      	movs	r1, #255	; 0xff
  b = a + b;
 800dddc:	79aa      	ldrb	r2, [r5, #6]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 800ddde:	f805 1c01 	strb.w	r1, [r5, #-1]
  b = a + b;
 800dde2:	441a      	add	r2, r3
 800dde4:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800dde6:	2aff      	cmp	r2, #255	; 0xff
 800dde8:	d925      	bls.n	800de36 <upsampleCb+0x18a>
  b = a + b;
 800ddea:	b211      	sxth	r1, r2
    if (b < 0)
 800ddec:	2900      	cmp	r1, #0
 800ddee:	db46      	blt.n	800de7e <upsampleCb+0x1d2>
    else if (b > 255)
 800ddf0:	29ff      	cmp	r1, #255	; 0xff
 800ddf2:	dd20      	ble.n	800de36 <upsampleCb+0x18a>
      return 255;
 800ddf4:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800ddf6:	79e9      	ldrb	r1, [r5, #7]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800ddf8:	71aa      	strb	r2, [r5, #6]
  b = a + b;
 800ddfa:	440b      	add	r3, r1
 800ddfc:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800ddfe:	2bff      	cmp	r3, #255	; 0xff
 800de00:	d917      	bls.n	800de32 <upsampleCb+0x186>
  b = a + b;
 800de02:	b21a      	sxth	r2, r3
    if (b < 0)
 800de04:	2a00      	cmp	r2, #0
 800de06:	db38      	blt.n	800de7a <upsampleCb+0x1ce>
    else if (b > 255)
 800de08:	2aff      	cmp	r2, #255	; 0xff
 800de0a:	dd12      	ble.n	800de32 <upsampleCb+0x186>
      return 255;
 800de0c:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800de0e:	4286      	cmp	r6, r0
      pDstB[9] = addAndClamp(pDstB[9], cbB);
 800de10:	71eb      	strb	r3, [r5, #7]
 800de12:	f104 0402 	add.w	r4, r4, #2
 800de16:	f105 0502 	add.w	r5, r5, #2
    for (x = 0; x < 4; x++) {
 800de1a:	f47f af59 	bne.w	800dcd0 <upsampleCb+0x24>
 800de1e:	f10e 0010 	add.w	r0, lr, #16
 800de22:	f10c 0c10 	add.w	ip, ip, #16
 800de26:	3710      	adds	r7, #16
  for (y = 0; y < 4; y++) {
 800de28:	4580      	cmp	r8, r0
 800de2a:	f47f af4c 	bne.w	800dcc6 <upsampleCb+0x1a>

    pSrc = pSrc - 4 + 8;
    pDstG = pDstG - 8 + 16;
    pDstB = pDstB - 8 + 16;
  }
}
 800de2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint8)b;
 800de32:	b2db      	uxtb	r3, r3
 800de34:	e7eb      	b.n	800de0e <upsampleCb+0x162>
 800de36:	b2d2      	uxtb	r2, r2
 800de38:	e7dd      	b.n	800ddf6 <upsampleCb+0x14a>
 800de3a:	b2d1      	uxtb	r1, r2
 800de3c:	e7ce      	b.n	800dddc <upsampleCb+0x130>
 800de3e:	b2d1      	uxtb	r1, r2
 800de40:	e7be      	b.n	800ddc0 <upsampleCb+0x114>
  return (uint8)b;
 800de42:	fa5f f982 	uxtb.w	r9, r2
 800de46:	e7a5      	b.n	800dd94 <upsampleCb+0xe8>
 800de48:	fa5f f989 	uxtb.w	r9, r9
 800de4c:	e78f      	b.n	800dd6e <upsampleCb+0xc2>
 800de4e:	fa5f fa89 	uxtb.w	sl, r9
 800de52:	e776      	b.n	800dd42 <upsampleCb+0x96>
 800de54:	fa5f fa89 	uxtb.w	sl, r9
 800de58:	e75b      	b.n	800dd12 <upsampleCb+0x66>
      return 0;
 800de5a:	f04f 0a00 	mov.w	sl, #0
 800de5e:	e770      	b.n	800dd42 <upsampleCb+0x96>
 800de60:	f04f 0a00 	mov.w	sl, #0
 800de64:	e755      	b.n	800dd12 <upsampleCb+0x66>
 800de66:	f04f 0900 	mov.w	r9, #0
 800de6a:	e793      	b.n	800dd94 <upsampleCb+0xe8>
 800de6c:	f04f 0900 	mov.w	r9, #0
 800de70:	e77d      	b.n	800dd6e <upsampleCb+0xc2>
      return 0;
 800de72:	2100      	movs	r1, #0
 800de74:	e7b2      	b.n	800dddc <upsampleCb+0x130>
 800de76:	2100      	movs	r1, #0
 800de78:	e7a2      	b.n	800ddc0 <upsampleCb+0x114>
 800de7a:	2300      	movs	r3, #0
 800de7c:	e7c7      	b.n	800de0e <upsampleCb+0x162>
 800de7e:	2200      	movs	r2, #0
 800de80:	e7b9      	b.n	800ddf6 <upsampleCb+0x14a>
 800de82:	bf00      	nop
 800de84:	2000c5e0 	.word	0x2000c5e0
 800de88:	2000cbf0 	.word	0x2000cbf0
 800de8c:	2000caf0 	.word	0x2000caf0

0800de90 <upsampleCbH>:

static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800de90:	4b49      	ldr	r3, [pc, #292]	; (800dfb8 <upsampleCbH+0x128>)
 800de92:	3102      	adds	r1, #2
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 800de94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800de98:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800de9c:	4f47      	ldr	r7, [pc, #284]	; (800dfbc <upsampleCbH+0x12c>)
 800de9e:	4e48      	ldr	r6, [pc, #288]	; (800dfc0 <upsampleCbH+0x130>)
 800dea0:	440f      	add	r7, r1
 800dea2:	f100 0e80 	add.w	lr, r0, #128	; 0x80
 800dea6:	440e      	add	r6, r1
 800dea8:	4684      	mov	ip, r0
 800deaa:	f100 0508 	add.w	r5, r0, #8
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 800deae:	4634      	mov	r4, r6
 800deb0:	4639      	mov	r1, r7
  uint8 *pDstG = gMCUBufG + dstOfs;
  uint8 *pDstB = gMCUBufB + dstOfs;
  for (y = 0; y < 8; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cb = (uint8)*pSrc++;
 800deb2:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a - b;
 800deb6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
      uint8 cb = (uint8)*pSrc++;
 800deba:	b2d2      	uxtb	r2, r2
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 800debc:	b213      	sxth	r3, r2
 800debe:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 800dec2:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 800dec6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800deca:	f1a8 082c 	sub.w	r8, r8, #44	; 0x2c
 800dece:	fa1f f888 	uxth.w	r8, r8
  b = a - b;
 800ded2:	eba9 0908 	sub.w	r9, r9, r8
 800ded6:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800deda:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800dede:	d95d      	bls.n	800df9c <upsampleCbH+0x10c>
  b = a - b;
 800dee0:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800dee4:	f1ba 0f00 	cmp.w	sl, #0
 800dee8:	db5e      	blt.n	800dfa8 <upsampleCbH+0x118>
    else if (b > 255)
 800deea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800deee:	dd55      	ble.n	800df9c <upsampleCbH+0x10c>
      return 255;
 800def0:	f04f 09ff 	mov.w	r9, #255	; 0xff
  b = a - b;
 800def4:	f811 ac01 	ldrb.w	sl, [r1, #-1]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800def8:	f801 9c02 	strb.w	r9, [r1, #-2]
  b = a - b;
 800defc:	ebaa 0808 	sub.w	r8, sl, r8
 800df00:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800df04:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800df08:	d945      	bls.n	800df96 <upsampleCbH+0x106>
  b = a - b;
 800df0a:	fa0f f988 	sxth.w	r9, r8
    if (b < 0)
 800df0e:	f1b9 0f00 	cmp.w	r9, #0
 800df12:	db46      	blt.n	800dfa2 <upsampleCbH+0x112>
    else if (b > 255)
 800df14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800df18:	dd3d      	ble.n	800df96 <upsampleCbH+0x106>
      return 255;
 800df1a:	f04f 08ff 	mov.w	r8, #255	; 0xff
      pDstG[1] = subAndClamp(pDstG[1], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800df1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df22:	f1a2 09e3 	sub.w	r9, r2, #227	; 0xe3
  b = a + b;
 800df26:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800df2a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 800df2e:	f801 8c01 	strb.w	r8, [r1, #-1]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800df32:	eb09 13d3 	add.w	r3, r9, r3, lsr #7
 800df36:	b29b      	uxth	r3, r3
  b = a + b;
 800df38:	441a      	add	r2, r3
 800df3a:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800df3c:	2aff      	cmp	r2, #255	; 0xff
 800df3e:	d928      	bls.n	800df92 <upsampleCbH+0x102>
  b = a + b;
 800df40:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800df44:	f1b8 0f00 	cmp.w	r8, #0
 800df48:	db33      	blt.n	800dfb2 <upsampleCbH+0x122>
    else if (b > 255)
 800df4a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800df4e:	dd20      	ble.n	800df92 <upsampleCbH+0x102>
      return 255;
 800df50:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800df52:	f814 8c01 	ldrb.w	r8, [r4, #-1]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800df56:	f804 2c02 	strb.w	r2, [r4, #-2]
  b = a + b;
 800df5a:	4443      	add	r3, r8
 800df5c:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800df5e:	2bff      	cmp	r3, #255	; 0xff
 800df60:	d915      	bls.n	800df8e <upsampleCbH+0xfe>
  b = a + b;
 800df62:	b21a      	sxth	r2, r3
    if (b < 0)
 800df64:	2a00      	cmp	r2, #0
 800df66:	db22      	blt.n	800dfae <upsampleCbH+0x11e>
    else if (b > 255)
 800df68:	2aff      	cmp	r2, #255	; 0xff
 800df6a:	dd10      	ble.n	800df8e <upsampleCbH+0xfe>
      return 255;
 800df6c:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800df6e:	4285      	cmp	r5, r0
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 800df70:	f804 3c01 	strb.w	r3, [r4, #-1]
 800df74:	f101 0102 	add.w	r1, r1, #2
 800df78:	f104 0402 	add.w	r4, r4, #2
    for (x = 0; x < 4; x++) {
 800df7c:	d199      	bne.n	800deb2 <upsampleCbH+0x22>
 800df7e:	f10c 0010 	add.w	r0, ip, #16
 800df82:	3708      	adds	r7, #8
 800df84:	3608      	adds	r6, #8
  for (y = 0; y < 8; y++) {
 800df86:	4586      	cmp	lr, r0
 800df88:	d18e      	bne.n	800dea8 <upsampleCbH+0x18>
      pDstB += 2;
    }

    pSrc = pSrc - 4 + 8;
  }
}
 800df8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint8)b;
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	e7ed      	b.n	800df6e <upsampleCbH+0xde>
 800df92:	b2d2      	uxtb	r2, r2
 800df94:	e7dd      	b.n	800df52 <upsampleCbH+0xc2>
  return (uint8)b;
 800df96:	fa5f f888 	uxtb.w	r8, r8
 800df9a:	e7c0      	b.n	800df1e <upsampleCbH+0x8e>
 800df9c:	fa5f f989 	uxtb.w	r9, r9
 800dfa0:	e7a8      	b.n	800def4 <upsampleCbH+0x64>
      return 0;
 800dfa2:	f04f 0800 	mov.w	r8, #0
 800dfa6:	e7ba      	b.n	800df1e <upsampleCbH+0x8e>
 800dfa8:	f04f 0900 	mov.w	r9, #0
 800dfac:	e7a2      	b.n	800def4 <upsampleCbH+0x64>
      return 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e7dd      	b.n	800df6e <upsampleCbH+0xde>
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	e7cd      	b.n	800df52 <upsampleCbH+0xc2>
 800dfb6:	bf00      	nop
 800dfb8:	2000c5e0 	.word	0x2000c5e0
 800dfbc:	2000cbf0 	.word	0x2000cbf0
 800dfc0:	2000caf0 	.word	0x2000caf0

0800dfc4 <upsampleCbV>:

static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800dfc4:	4b4a      	ldr	r3, [pc, #296]	; (800e0f0 <upsampleCbV+0x12c>)
  uint8 *pDstG = gMCUBufG + dstOfs;
  uint8 *pDstB = gMCUBufB + dstOfs;
 800dfc6:	4a4b      	ldr	r2, [pc, #300]	; (800e0f4 <upsampleCbV+0x130>)
  int16 *pSrc = gCoeffBuf + srcOfs;
 800dfc8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dfcc:	4b4a      	ldr	r3, [pc, #296]	; (800e0f8 <upsampleCbV+0x134>)
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 800dfce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8 *pDstB = gMCUBufB + dstOfs;
 800dfd2:	eb02 0e01 	add.w	lr, r2, r1
 800dfd6:	f100 0840 	add.w	r8, r0, #64	; 0x40
 800dfda:	4419      	add	r1, r3
 800dfdc:	f101 0709 	add.w	r7, r1, #9
 800dfe0:	f10e 0608 	add.w	r6, lr, #8
 800dfe4:	f100 0c10 	add.w	ip, r0, #16
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 800dfe8:	4675      	mov	r5, lr
 800dfea:	460c      	mov	r4, r1
 800dfec:	e048      	b.n	800e080 <upsampleCbV+0xbc>
  b = a - b;
 800dfee:	fa0f fb8a 	sxth.w	fp, sl
    if (b < 0)
 800dff2:	f1bb 0f00 	cmp.w	fp, #0
 800dff6:	db70      	blt.n	800e0da <upsampleCbV+0x116>
    else if (b > 255)
 800dff8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800dffc:	dd57      	ble.n	800e0ae <upsampleCbV+0xea>
      return 255;
 800dffe:	f04f 0aff 	mov.w	sl, #255	; 0xff
    for (x = 0; x < 8; x++) {
      uint8 cb = (uint8)*pSrc++;
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 800e002:	f884 a000 	strb.w	sl, [r4]
  b = a - b;
 800e006:	f897 a000 	ldrb.w	sl, [r7]
 800e00a:	ebaa 0909 	sub.w	r9, sl, r9
 800e00e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800e012:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e016:	d95d      	bls.n	800e0d4 <upsampleCbV+0x110>
  b = a - b;
 800e018:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800e01c:	f1ba 0f00 	cmp.w	sl, #0
 800e020:	db62      	blt.n	800e0e8 <upsampleCbV+0x124>
    else if (b > 255)
 800e022:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e026:	dd55      	ble.n	800e0d4 <upsampleCbV+0x110>
      return 255;
 800e028:	f04f 09ff 	mov.w	r9, #255	; 0xff
      pDstG[8] = subAndClamp(pDstG[8], cbG);

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800e02c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e030:	f1a2 0ae3 	sub.w	sl, r2, #227	; 0xe3
  b = a + b;
 800e034:	782a      	ldrb	r2, [r5, #0]
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800e036:	eb03 1343 	add.w	r3, r3, r3, lsl #5
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 800e03a:	f807 9b01 	strb.w	r9, [r7], #1
      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 800e03e:	eb0a 13d3 	add.w	r3, sl, r3, lsr #7
 800e042:	b29b      	uxth	r3, r3
  b = a + b;
 800e044:	441a      	add	r2, r3
 800e046:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e048:	2aff      	cmp	r2, #255	; 0xff
 800e04a:	d941      	bls.n	800e0d0 <upsampleCbV+0x10c>
  b = a + b;
 800e04c:	fa0f f982 	sxth.w	r9, r2
    if (b < 0)
 800e050:	f1b9 0f00 	cmp.w	r9, #0
 800e054:	db46      	blt.n	800e0e4 <upsampleCbV+0x120>
    else if (b > 255)
 800e056:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e05a:	dd39      	ble.n	800e0d0 <upsampleCbV+0x10c>
      return 255;
 800e05c:	22ff      	movs	r2, #255	; 0xff
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 800e05e:	f805 2b01 	strb.w	r2, [r5], #1
  b = a + b;
 800e062:	7832      	ldrb	r2, [r6, #0]
 800e064:	4413      	add	r3, r2
 800e066:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800e068:	2bff      	cmp	r3, #255	; 0xff
 800e06a:	d923      	bls.n	800e0b4 <upsampleCbV+0xf0>
  b = a + b;
 800e06c:	b21a      	sxth	r2, r3
    if (b < 0)
 800e06e:	2a00      	cmp	r2, #0
 800e070:	db36      	blt.n	800e0e0 <upsampleCbV+0x11c>
    else if (b > 255)
 800e072:	2aff      	cmp	r2, #255	; 0xff
 800e074:	dd1e      	ble.n	800e0b4 <upsampleCbV+0xf0>
      return 255;
 800e076:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 8; x++) {
 800e078:	4584      	cmp	ip, r0
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800e07a:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800e07e:	d01e      	beq.n	800e0be <upsampleCbV+0xfa>
      uint8 cb = (uint8)*pSrc++;
 800e080:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a - b;
 800e084:	f814 af01 	ldrb.w	sl, [r4, #1]!
      uint8 cb = (uint8)*pSrc++;
 800e088:	b2d2      	uxtb	r2, r2
      cbG = ((cb * 88U) >> 8U) - 44U;
 800e08a:	b213      	sxth	r3, r2
 800e08c:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 800e090:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 800e094:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800e098:	f1a9 092c 	sub.w	r9, r9, #44	; 0x2c
 800e09c:	fa1f f989 	uxth.w	r9, r9
  b = a - b;
 800e0a0:	ebaa 0a09 	sub.w	sl, sl, r9
 800e0a4:	fa1f fa8a 	uxth.w	sl, sl
  if ((uint16)b > 255U) {
 800e0a8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e0ac:	d89f      	bhi.n	800dfee <upsampleCbV+0x2a>
  return (uint8)b;
 800e0ae:	fa5f fa8a 	uxtb.w	sl, sl
 800e0b2:	e7a6      	b.n	800e002 <upsampleCbV+0x3e>
  return (uint8)b;
 800e0b4:	b2db      	uxtb	r3, r3
    for (x = 0; x < 8; x++) {
 800e0b6:	4584      	cmp	ip, r0
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 800e0b8:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800e0bc:	d1e0      	bne.n	800e080 <upsampleCbV+0xbc>
  for (y = 0; y < 4; y++) {
 800e0be:	45c4      	cmp	ip, r8
 800e0c0:	f101 0110 	add.w	r1, r1, #16
      ++pDstG;
      ++pDstB;
    }

    pDstG = pDstG - 8 + 16;
    pDstB = pDstB - 8 + 16;
 800e0c4:	f10e 0e10 	add.w	lr, lr, #16
 800e0c8:	4660      	mov	r0, ip
  for (y = 0; y < 4; y++) {
 800e0ca:	d187      	bne.n	800dfdc <upsampleCbV+0x18>
  }
}
 800e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return (uint8)b;
 800e0d0:	b2d2      	uxtb	r2, r2
 800e0d2:	e7c4      	b.n	800e05e <upsampleCbV+0x9a>
  return (uint8)b;
 800e0d4:	fa5f f989 	uxtb.w	r9, r9
 800e0d8:	e7a8      	b.n	800e02c <upsampleCbV+0x68>
      return 0;
 800e0da:	f04f 0a00 	mov.w	sl, #0
 800e0de:	e790      	b.n	800e002 <upsampleCbV+0x3e>
      return 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e7c9      	b.n	800e078 <upsampleCbV+0xb4>
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	e7ba      	b.n	800e05e <upsampleCbV+0x9a>
      return 0;
 800e0e8:	f04f 0900 	mov.w	r9, #0
 800e0ec:	e79e      	b.n	800e02c <upsampleCbV+0x68>
 800e0ee:	bf00      	nop
 800e0f0:	2000c5e0 	.word	0x2000c5e0
 800e0f4:	2000caf0 	.word	0x2000caf0
 800e0f8:	2000cbef 	.word	0x2000cbef

0800e0fc <upsampleCr>:
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e0fc:	4b76      	ldr	r3, [pc, #472]	; (800e2d8 <upsampleCr+0x1dc>)
 800e0fe:	3102      	adds	r1, #2
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 800e100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e104:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e108:	4f74      	ldr	r7, [pc, #464]	; (800e2dc <upsampleCr+0x1e0>)
 800e10a:	4e75      	ldr	r6, [pc, #468]	; (800e2e0 <upsampleCr+0x1e4>)
 800e10c:	440f      	add	r7, r1
 800e10e:	f100 0e40 	add.w	lr, r0, #64	; 0x40
 800e112:	440e      	add	r6, r1
 800e114:	4684      	mov	ip, r0
 800e116:	f100 0508 	add.w	r5, r0, #8
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 800e11a:	4634      	mov	r4, r6
 800e11c:	4639      	mov	r1, r7
  uint8 *pDstR = gMCUBufR + dstOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
  for (y = 0; y < 4; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cr = (uint8)*pSrc++;
 800e11e:	f930 3b02 	ldrsh.w	r3, [r0], #2
  b = a + b;
 800e122:	f811 2c02 	ldrb.w	r2, [r1, #-2]
      uint8 cr = (uint8)*pSrc++;
 800e126:	b2db      	uxtb	r3, r3
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800e128:	fa0f f983 	sxth.w	r9, r3
 800e12c:	3bb3      	subs	r3, #179	; 0xb3
 800e12e:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800e132:	eb08 1808 	add.w	r8, r8, r8, lsl #4
 800e136:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800e13a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 800e13e:	b29b      	uxth	r3, r3
  b = a + b;
 800e140:	441a      	add	r2, r3
 800e142:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e144:	2aff      	cmp	r2, #255	; 0xff
 800e146:	f240 80af 	bls.w	800e2a8 <upsampleCr+0x1ac>
  b = a + b;
 800e14a:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800e14e:	f1b8 0f00 	cmp.w	r8, #0
 800e152:	f2c0 80af 	blt.w	800e2b4 <upsampleCr+0x1b8>
    else if (b > 255)
 800e156:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e15a:	f340 80a5 	ble.w	800e2a8 <upsampleCr+0x1ac>
      return 255;
 800e15e:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a + b;
 800e162:	f811 2c01 	ldrb.w	r2, [r1, #-1]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800e166:	f801 8c02 	strb.w	r8, [r1, #-2]
  b = a + b;
 800e16a:	441a      	add	r2, r3
 800e16c:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e16e:	2aff      	cmp	r2, #255	; 0xff
 800e170:	f240 8097 	bls.w	800e2a2 <upsampleCr+0x1a6>
  b = a + b;
 800e174:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800e178:	f1b8 0f00 	cmp.w	r8, #0
 800e17c:	f2c0 8097 	blt.w	800e2ae <upsampleCr+0x1b2>
    else if (b > 255)
 800e180:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e184:	f340 808d 	ble.w	800e2a2 <upsampleCr+0x1a6>
      return 255;
 800e188:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a + b;
 800e18c:	798a      	ldrb	r2, [r1, #6]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 800e18e:	f801 8c01 	strb.w	r8, [r1, #-1]
  b = a + b;
 800e192:	441a      	add	r2, r3
 800e194:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e196:	2aff      	cmp	r2, #255	; 0xff
 800e198:	f240 8081 	bls.w	800e29e <upsampleCr+0x1a2>
  b = a + b;
 800e19c:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800e1a0:	f1b8 0f00 	cmp.w	r8, #0
 800e1a4:	f2c0 808b 	blt.w	800e2be <upsampleCr+0x1c2>
    else if (b > 255)
 800e1a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e1ac:	dd77      	ble.n	800e29e <upsampleCr+0x1a2>
      return 255;
 800e1ae:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 800e1b0:	f891 8007 	ldrb.w	r8, [r1, #7]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 800e1b4:	718a      	strb	r2, [r1, #6]
  b = a + b;
 800e1b6:	eb03 0208 	add.w	r2, r3, r8
 800e1ba:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e1bc:	2aff      	cmp	r2, #255	; 0xff
 800e1be:	d96c      	bls.n	800e29a <upsampleCr+0x19e>
  b = a + b;
 800e1c0:	b213      	sxth	r3, r2
    if (b < 0)
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	db79      	blt.n	800e2ba <upsampleCr+0x1be>
    else if (b > 255)
 800e1c6:	2bff      	cmp	r3, #255	; 0xff
 800e1c8:	dd67      	ble.n	800e29a <upsampleCr+0x19e>
      return 255;
 800e1ca:	22ff      	movs	r2, #255	; 0xff
      pDstR[9] = addAndClamp(pDstR[9], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800e1cc:	ebc9 1309 	rsb	r3, r9, r9, lsl #4
  b = a - b;
 800e1d0:	f814 8c02 	ldrb.w	r8, [r4, #-2]
      pDstR[9] = addAndClamp(pDstR[9], crR);
 800e1d4:	71ca      	strb	r2, [r1, #7]
      crG = ((cr * 183U) >> 8U) - 91;
 800e1d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e1da:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800e1de:	0a1b      	lsrs	r3, r3, #8
 800e1e0:	3b5b      	subs	r3, #91	; 0x5b
 800e1e2:	b29b      	uxth	r3, r3
  b = a - b;
 800e1e4:	eba8 0803 	sub.w	r8, r8, r3
 800e1e8:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800e1ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e1f0:	d950      	bls.n	800e294 <upsampleCr+0x198>
  b = a - b;
 800e1f2:	fa0f f288 	sxth.w	r2, r8
    if (b < 0)
 800e1f6:	2a00      	cmp	r2, #0
 800e1f8:	db66      	blt.n	800e2c8 <upsampleCr+0x1cc>
    else if (b > 255)
 800e1fa:	2aff      	cmp	r2, #255	; 0xff
 800e1fc:	dd4a      	ble.n	800e294 <upsampleCr+0x198>
      return 255;
 800e1fe:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800e202:	f814 2c01 	ldrb.w	r2, [r4, #-1]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800e206:	f804 8c02 	strb.w	r8, [r4, #-2]
  b = a - b;
 800e20a:	1ad2      	subs	r2, r2, r3
 800e20c:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e20e:	2aff      	cmp	r2, #255	; 0xff
 800e210:	d93d      	bls.n	800e28e <upsampleCr+0x192>
  b = a - b;
 800e212:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800e216:	f1b8 0f00 	cmp.w	r8, #0
 800e21a:	db52      	blt.n	800e2c2 <upsampleCr+0x1c6>
    else if (b > 255)
 800e21c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e220:	dd35      	ble.n	800e28e <upsampleCr+0x192>
      return 255;
 800e222:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800e226:	79a2      	ldrb	r2, [r4, #6]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800e228:	f804 8c01 	strb.w	r8, [r4, #-1]
  b = a - b;
 800e22c:	1ad2      	subs	r2, r2, r3
 800e22e:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e230:	2aff      	cmp	r2, #255	; 0xff
 800e232:	d929      	bls.n	800e288 <upsampleCr+0x18c>
  b = a - b;
 800e234:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800e238:	f1b8 0f00 	cmp.w	r8, #0
 800e23c:	db49      	blt.n	800e2d2 <upsampleCr+0x1d6>
    else if (b > 255)
 800e23e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e242:	dd21      	ble.n	800e288 <upsampleCr+0x18c>
      return 255;
 800e244:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800e248:	79e2      	ldrb	r2, [r4, #7]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800e24a:	f884 8006 	strb.w	r8, [r4, #6]
  b = a - b;
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800e252:	2bff      	cmp	r3, #255	; 0xff
 800e254:	d916      	bls.n	800e284 <upsampleCr+0x188>
  b = a - b;
 800e256:	b21a      	sxth	r2, r3
    if (b < 0)
 800e258:	2a00      	cmp	r2, #0
 800e25a:	db38      	blt.n	800e2ce <upsampleCr+0x1d2>
    else if (b > 255)
 800e25c:	2aff      	cmp	r2, #255	; 0xff
 800e25e:	dd11      	ble.n	800e284 <upsampleCr+0x188>
      return 255;
 800e260:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800e262:	4285      	cmp	r5, r0
      pDstG[9] = subAndClamp(pDstG[9], crG);
 800e264:	71e3      	strb	r3, [r4, #7]
 800e266:	f101 0102 	add.w	r1, r1, #2
 800e26a:	f104 0402 	add.w	r4, r4, #2
    for (x = 0; x < 4; x++) {
 800e26e:	f47f af56 	bne.w	800e11e <upsampleCr+0x22>
 800e272:	f10c 0010 	add.w	r0, ip, #16
 800e276:	3710      	adds	r7, #16
 800e278:	3610      	adds	r6, #16
  for (y = 0; y < 4; y++) {
 800e27a:	4586      	cmp	lr, r0
 800e27c:	f47f af4a 	bne.w	800e114 <upsampleCr+0x18>

    pSrc = pSrc - 4 + 8;
    pDstR = pDstR - 8 + 16;
    pDstG = pDstG - 8 + 16;
  }
}
 800e280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (uint8)b;
 800e284:	b2db      	uxtb	r3, r3
 800e286:	e7ec      	b.n	800e262 <upsampleCr+0x166>
 800e288:	fa5f f882 	uxtb.w	r8, r2
 800e28c:	e7dc      	b.n	800e248 <upsampleCr+0x14c>
 800e28e:	fa5f f882 	uxtb.w	r8, r2
 800e292:	e7c8      	b.n	800e226 <upsampleCr+0x12a>
 800e294:	fa5f f888 	uxtb.w	r8, r8
 800e298:	e7b3      	b.n	800e202 <upsampleCr+0x106>
  return (uint8)b;
 800e29a:	b2d2      	uxtb	r2, r2
 800e29c:	e796      	b.n	800e1cc <upsampleCr+0xd0>
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	e786      	b.n	800e1b0 <upsampleCr+0xb4>
 800e2a2:	fa5f f882 	uxtb.w	r8, r2
 800e2a6:	e771      	b.n	800e18c <upsampleCr+0x90>
 800e2a8:	fa5f f882 	uxtb.w	r8, r2
 800e2ac:	e759      	b.n	800e162 <upsampleCr+0x66>
      return 0;
 800e2ae:	f04f 0800 	mov.w	r8, #0
 800e2b2:	e76b      	b.n	800e18c <upsampleCr+0x90>
 800e2b4:	f04f 0800 	mov.w	r8, #0
 800e2b8:	e753      	b.n	800e162 <upsampleCr+0x66>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	e786      	b.n	800e1cc <upsampleCr+0xd0>
 800e2be:	2200      	movs	r2, #0
 800e2c0:	e776      	b.n	800e1b0 <upsampleCr+0xb4>
      return 0;
 800e2c2:	f04f 0800 	mov.w	r8, #0
 800e2c6:	e7ae      	b.n	800e226 <upsampleCr+0x12a>
 800e2c8:	f04f 0800 	mov.w	r8, #0
 800e2cc:	e799      	b.n	800e202 <upsampleCr+0x106>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e7c7      	b.n	800e262 <upsampleCr+0x166>
 800e2d2:	f04f 0800 	mov.w	r8, #0
 800e2d6:	e7b7      	b.n	800e248 <upsampleCr+0x14c>
 800e2d8:	2000c5e0 	.word	0x2000c5e0
 800e2dc:	2000ccf0 	.word	0x2000ccf0
 800e2e0:	2000cbf0 	.word	0x2000cbf0

0800e2e4 <upsampleCrH>:

static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e2e4:	4b47      	ldr	r3, [pc, #284]	; (800e404 <upsampleCrH+0x120>)
 800e2e6:	3102      	adds	r1, #2
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 800e2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e2ec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e2f0:	4f45      	ldr	r7, [pc, #276]	; (800e408 <upsampleCrH+0x124>)
 800e2f2:	4e46      	ldr	r6, [pc, #280]	; (800e40c <upsampleCrH+0x128>)
 800e2f4:	440f      	add	r7, r1
 800e2f6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
 800e2fa:	440e      	add	r6, r1
 800e2fc:	4684      	mov	ip, r0
 800e2fe:	f100 0508 	add.w	r5, r0, #8
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 800e302:	4634      	mov	r4, r6
 800e304:	4639      	mov	r1, r7
  uint8 *pDstR = gMCUBufR + dstOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
  for (y = 0; y < 8; y++) {
    for (x = 0; x < 4; x++) {
      uint8 cr = (uint8)*pSrc++;
 800e306:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a + b;
 800e30a:	f811 8c02 	ldrb.w	r8, [r1, #-2]
      uint8 cr = (uint8)*pSrc++;
 800e30e:	b2d2      	uxtb	r2, r2
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800e310:	b213      	sxth	r3, r2
 800e312:	3ab3      	subs	r2, #179	; 0xb3
 800e314:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 800e318:	eb09 1909 	add.w	r9, r9, r9, lsl #4
 800e31c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 800e320:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 800e324:	b292      	uxth	r2, r2
  b = a + b;
 800e326:	4490      	add	r8, r2
 800e328:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800e32c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e330:	d95b      	bls.n	800e3ea <upsampleCrH+0x106>
  b = a + b;
 800e332:	fa0f f988 	sxth.w	r9, r8
    if (b < 0)
 800e336:	f1b9 0f00 	cmp.w	r9, #0
 800e33a:	db5b      	blt.n	800e3f4 <upsampleCrH+0x110>
    else if (b > 255)
 800e33c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e340:	dd53      	ble.n	800e3ea <upsampleCrH+0x106>
      return 255;
 800e342:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a + b;
 800e346:	f811 9c01 	ldrb.w	r9, [r1, #-1]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800e34a:	f801 8c02 	strb.w	r8, [r1, #-2]
  b = a + b;
 800e34e:	444a      	add	r2, r9
 800e350:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e352:	2aff      	cmp	r2, #255	; 0xff
 800e354:	d947      	bls.n	800e3e6 <upsampleCrH+0x102>
  b = a + b;
 800e356:	fa0f f882 	sxth.w	r8, r2
    if (b < 0)
 800e35a:	f1b8 0f00 	cmp.w	r8, #0
 800e35e:	db47      	blt.n	800e3f0 <upsampleCrH+0x10c>
    else if (b > 255)
 800e360:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e364:	dd3f      	ble.n	800e3e6 <upsampleCrH+0x102>
      return 255;
 800e366:	22ff      	movs	r2, #255	; 0xff
      pDstR[1] = addAndClamp(pDstR[1], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800e368:	ebc3 1903 	rsb	r9, r3, r3, lsl #4
  b = a - b;
 800e36c:	f814 8c02 	ldrb.w	r8, [r4, #-2]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 800e370:	f801 2c01 	strb.w	r2, [r1, #-1]
      crG = ((cr * 183U) >> 8U) - 91;
 800e374:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e378:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800e37c:	0a1b      	lsrs	r3, r3, #8
 800e37e:	3b5b      	subs	r3, #91	; 0x5b
 800e380:	b29b      	uxth	r3, r3
  b = a - b;
 800e382:	eba8 0803 	sub.w	r8, r8, r3
 800e386:	fa1f f888 	uxth.w	r8, r8
  if ((uint16)b > 255U) {
 800e38a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800e38e:	d927      	bls.n	800e3e0 <upsampleCrH+0xfc>
  b = a - b;
 800e390:	fa0f f288 	sxth.w	r2, r8
    if (b < 0)
 800e394:	2a00      	cmp	r2, #0
 800e396:	db32      	blt.n	800e3fe <upsampleCrH+0x11a>
    else if (b > 255)
 800e398:	2aff      	cmp	r2, #255	; 0xff
 800e39a:	dd21      	ble.n	800e3e0 <upsampleCrH+0xfc>
      return 255;
 800e39c:	f04f 08ff 	mov.w	r8, #255	; 0xff
  b = a - b;
 800e3a0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800e3a4:	f804 8c02 	strb.w	r8, [r4, #-2]
  b = a - b;
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800e3ac:	2bff      	cmp	r3, #255	; 0xff
 800e3ae:	d915      	bls.n	800e3dc <upsampleCrH+0xf8>
  b = a - b;
 800e3b0:	b21a      	sxth	r2, r3
    if (b < 0)
 800e3b2:	2a00      	cmp	r2, #0
 800e3b4:	db21      	blt.n	800e3fa <upsampleCrH+0x116>
    else if (b > 255)
 800e3b6:	2aff      	cmp	r2, #255	; 0xff
 800e3b8:	dd10      	ble.n	800e3dc <upsampleCrH+0xf8>
      return 255;
 800e3ba:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 4; x++) {
 800e3bc:	4285      	cmp	r5, r0
      pDstG[1] = subAndClamp(pDstG[1], crG);
 800e3be:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e3c2:	f101 0102 	add.w	r1, r1, #2
 800e3c6:	f104 0402 	add.w	r4, r4, #2
    for (x = 0; x < 4; x++) {
 800e3ca:	d19c      	bne.n	800e306 <upsampleCrH+0x22>
 800e3cc:	f10c 0010 	add.w	r0, ip, #16
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	3608      	adds	r6, #8
  for (y = 0; y < 8; y++) {
 800e3d4:	4586      	cmp	lr, r0
 800e3d6:	d191      	bne.n	800e2fc <upsampleCrH+0x18>
      pDstG += 2;
    }

    pSrc = pSrc - 4 + 8;
  }
}
 800e3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (uint8)b;
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	e7ed      	b.n	800e3bc <upsampleCrH+0xd8>
 800e3e0:	fa5f f888 	uxtb.w	r8, r8
 800e3e4:	e7dc      	b.n	800e3a0 <upsampleCrH+0xbc>
  return (uint8)b;
 800e3e6:	b2d2      	uxtb	r2, r2
 800e3e8:	e7be      	b.n	800e368 <upsampleCrH+0x84>
 800e3ea:	fa5f f888 	uxtb.w	r8, r8
 800e3ee:	e7aa      	b.n	800e346 <upsampleCrH+0x62>
      return 0;
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	e7b9      	b.n	800e368 <upsampleCrH+0x84>
 800e3f4:	f04f 0800 	mov.w	r8, #0
 800e3f8:	e7a5      	b.n	800e346 <upsampleCrH+0x62>
      return 0;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	e7de      	b.n	800e3bc <upsampleCrH+0xd8>
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	e7cd      	b.n	800e3a0 <upsampleCrH+0xbc>
 800e404:	2000c5e0 	.word	0x2000c5e0
 800e408:	2000ccf0 	.word	0x2000ccf0
 800e40c:	2000cbf0 	.word	0x2000cbf0

0800e410 <upsampleCrV>:

static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e410:	4b49      	ldr	r3, [pc, #292]	; (800e538 <upsampleCrV+0x128>)
  uint8 *pDstR = gMCUBufR + dstOfs;
  uint8 *pDstG = gMCUBufG + dstOfs;
 800e412:	4a4a      	ldr	r2, [pc, #296]	; (800e53c <upsampleCrV+0x12c>)
  int16 *pSrc = gCoeffBuf + srcOfs;
 800e414:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e418:	4b49      	ldr	r3, [pc, #292]	; (800e540 <upsampleCrV+0x130>)
static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 800e41a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8 *pDstG = gMCUBufG + dstOfs;
 800e41e:	eb02 0e01 	add.w	lr, r2, r1
 800e422:	f100 0840 	add.w	r8, r0, #64	; 0x40
 800e426:	4419      	add	r1, r3
 800e428:	f101 0709 	add.w	r7, r1, #9
 800e42c:	f10e 0608 	add.w	r6, lr, #8
 800e430:	f100 0c10 	add.w	ip, r0, #16
static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 800e434:	4675      	mov	r5, lr
 800e436:	460c      	mov	r4, r1
 800e438:	e047      	b.n	800e4ca <upsampleCrV+0xba>
  b = a + b;
 800e43a:	fa0f fa89 	sxth.w	sl, r9
    if (b < 0)
 800e43e:	f1ba 0f00 	cmp.w	sl, #0
 800e442:	db6e      	blt.n	800e522 <upsampleCrV+0x112>
    else if (b > 255)
 800e444:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e448:	dd55      	ble.n	800e4f6 <upsampleCrV+0xe6>
      return 255;
 800e44a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    for (x = 0; x < 8; x++) {
      uint8 cr = (uint8)*pSrc++;
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
      pDstR[0] = addAndClamp(pDstR[0], crR);
 800e44e:	f884 9000 	strb.w	r9, [r4]
  b = a + b;
 800e452:	f897 9000 	ldrb.w	r9, [r7]
 800e456:	444a      	add	r2, r9
 800e458:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 800e45a:	2aff      	cmp	r2, #255	; 0xff
 800e45c:	d95f      	bls.n	800e51e <upsampleCrV+0x10e>
  b = a + b;
 800e45e:	fa0f f982 	sxth.w	r9, r2
    if (b < 0)
 800e462:	f1b9 0f00 	cmp.w	r9, #0
 800e466:	db64      	blt.n	800e532 <upsampleCrV+0x122>
    else if (b > 255)
 800e468:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e46c:	dd57      	ble.n	800e51e <upsampleCrV+0x10e>
      return 255;
 800e46e:	22ff      	movs	r2, #255	; 0xff
      pDstR[8] = addAndClamp(pDstR[8], crR);

      crG = ((cr * 183U) >> 8U) - 91;
 800e470:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
  b = a - b;
 800e474:	f895 9000 	ldrb.w	r9, [r5]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 800e478:	f807 2b01 	strb.w	r2, [r7], #1
      crG = ((cr * 183U) >> 8U) - 91;
 800e47c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e480:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 800e484:	0a1b      	lsrs	r3, r3, #8
 800e486:	3b5b      	subs	r3, #91	; 0x5b
 800e488:	b29b      	uxth	r3, r3
  b = a - b;
 800e48a:	eba9 0903 	sub.w	r9, r9, r3
 800e48e:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800e492:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e496:	d93f      	bls.n	800e518 <upsampleCrV+0x108>
  b = a - b;
 800e498:	fa0f f289 	sxth.w	r2, r9
    if (b < 0)
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	db45      	blt.n	800e52c <upsampleCrV+0x11c>
    else if (b > 255)
 800e4a0:	2aff      	cmp	r2, #255	; 0xff
 800e4a2:	dd39      	ble.n	800e518 <upsampleCrV+0x108>
      return 255;
 800e4a4:	f04f 09ff 	mov.w	r9, #255	; 0xff
      pDstG[0] = subAndClamp(pDstG[0], crG);
 800e4a8:	f805 9b01 	strb.w	r9, [r5], #1
  b = a - b;
 800e4ac:	7832      	ldrb	r2, [r6, #0]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 800e4b2:	2bff      	cmp	r3, #255	; 0xff
 800e4b4:	d922      	bls.n	800e4fc <upsampleCrV+0xec>
  b = a - b;
 800e4b6:	b21a      	sxth	r2, r3
    if (b < 0)
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	db35      	blt.n	800e528 <upsampleCrV+0x118>
    else if (b > 255)
 800e4bc:	2aff      	cmp	r2, #255	; 0xff
 800e4be:	dd1d      	ble.n	800e4fc <upsampleCrV+0xec>
      return 255;
 800e4c0:	23ff      	movs	r3, #255	; 0xff
    for (x = 0; x < 8; x++) {
 800e4c2:	4584      	cmp	ip, r0
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800e4c4:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800e4c8:	d01d      	beq.n	800e506 <upsampleCrV+0xf6>
      uint8 cr = (uint8)*pSrc++;
 800e4ca:	f930 2b02 	ldrsh.w	r2, [r0], #2
  b = a + b;
 800e4ce:	f814 9f01 	ldrb.w	r9, [r4, #1]!
      uint8 cr = (uint8)*pSrc++;
 800e4d2:	b2d2      	uxtb	r2, r2
      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 800e4d4:	b213      	sxth	r3, r2
 800e4d6:	3ab3      	subs	r2, #179	; 0xb3
 800e4d8:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800e4dc:	eb0a 1a0a 	add.w	sl, sl, sl, lsl #4
 800e4e0:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 800e4e4:	eb02 221a 	add.w	r2, r2, sl, lsr #8
 800e4e8:	b292      	uxth	r2, r2
  b = a + b;
 800e4ea:	4491      	add	r9, r2
 800e4ec:	fa1f f989 	uxth.w	r9, r9
  if ((uint16)b > 255U) {
 800e4f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e4f4:	d8a1      	bhi.n	800e43a <upsampleCrV+0x2a>
  return (uint8)b;
 800e4f6:	fa5f f989 	uxtb.w	r9, r9
 800e4fa:	e7a8      	b.n	800e44e <upsampleCrV+0x3e>
  return (uint8)b;
 800e4fc:	b2db      	uxtb	r3, r3
    for (x = 0; x < 8; x++) {
 800e4fe:	4584      	cmp	ip, r0
      pDstG[8] = subAndClamp(pDstG[8], crG);
 800e500:	f806 3b01 	strb.w	r3, [r6], #1
    for (x = 0; x < 8; x++) {
 800e504:	d1e1      	bne.n	800e4ca <upsampleCrV+0xba>
  for (y = 0; y < 4; y++) {
 800e506:	45e0      	cmp	r8, ip
 800e508:	f101 0110 	add.w	r1, r1, #16
      ++pDstR;
      ++pDstG;
    }

    pDstR = pDstR - 8 + 16;
    pDstG = pDstG - 8 + 16;
 800e50c:	f10e 0e10 	add.w	lr, lr, #16
 800e510:	4660      	mov	r0, ip
  for (y = 0; y < 4; y++) {
 800e512:	d189      	bne.n	800e428 <upsampleCrV+0x18>
  }
}
 800e514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint8)b;
 800e518:	fa5f f989 	uxtb.w	r9, r9
 800e51c:	e7c4      	b.n	800e4a8 <upsampleCrV+0x98>
  return (uint8)b;
 800e51e:	b2d2      	uxtb	r2, r2
 800e520:	e7a6      	b.n	800e470 <upsampleCrV+0x60>
      return 0;
 800e522:	f04f 0900 	mov.w	r9, #0
 800e526:	e792      	b.n	800e44e <upsampleCrV+0x3e>
      return 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	e7ca      	b.n	800e4c2 <upsampleCrV+0xb2>
 800e52c:	f04f 0900 	mov.w	r9, #0
 800e530:	e7ba      	b.n	800e4a8 <upsampleCrV+0x98>
      return 0;
 800e532:	2200      	movs	r2, #0
 800e534:	e79c      	b.n	800e470 <upsampleCrV+0x60>
 800e536:	bf00      	nop
 800e538:	2000c5e0 	.word	0x2000c5e0
 800e53c:	2000cbf0 	.word	0x2000cbf0
 800e540:	2000ccef 	.word	0x2000ccef

0800e544 <huffDecode>:
                                    const uint8 *pHuffVal) {
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!gBitsLeft) {
 800e548:	4ab0      	ldr	r2, [pc, #704]	; (800e80c <huffDecode+0x2c8>)
                                    const uint8 *pHuffVal) {
 800e54a:	b087      	sub	sp, #28
  if (gBitBuf & 0x8000)
 800e54c:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 800e82c <huffDecode+0x2e8>
                                    const uint8 *pHuffVal) {
 800e550:	9003      	str	r0, [sp, #12]
  if (gBitBuf & 0x8000)
 800e552:	f8bb 3000 	ldrh.w	r3, [fp]
  if (!gBitsLeft) {
 800e556:	7810      	ldrb	r0, [r2, #0]
                                    const uint8 *pHuffVal) {
 800e558:	9105      	str	r1, [sp, #20]
  if (gBitBuf & 0x8000)
 800e55a:	0bdc      	lsrs	r4, r3, #15
  if (!gBitsLeft) {
 800e55c:	2800      	cmp	r0, #0
 800e55e:	f000 80ca 	beq.w	800e6f6 <huffDecode+0x1b2>
 800e562:	9a03      	ldr	r2, [sp, #12]
  gBitsLeft--;
 800e564:	3801      	subs	r0, #1
  gBitBuf <<= 1;
 800e566:	005b      	lsls	r3, r3, #1
  uint16 code = getBit();
 800e568:	2600      	movs	r6, #0
 800e56a:	f102 081e 	add.w	r8, r2, #30
  gBitsLeft--;
 800e56e:	b2c0      	uxtb	r0, r0
  gBitBuf <<= 1;
 800e570:	b29b      	uxth	r3, r3
  gBitsLeft--;
 800e572:	4aa6      	ldr	r2, [pc, #664]	; (800e80c <huffDecode+0x2c8>)
  uint16 code = getBit();
 800e574:	b2a4      	uxth	r4, r4
  if (!gInBufLeft) {
 800e576:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 800e828 <huffDecode+0x2e4>
  gBitsLeft--;
 800e57a:	7010      	strb	r0, [r2, #0]
  gBitBuf <<= 1;
 800e57c:	f8ab 3000 	strh.w	r3, [fp]
 800e580:	e00c      	b.n	800e59c <huffDecode+0x58>
  gBitsLeft--;
 800e582:	3801      	subs	r0, #1
  gBitBuf <<= 1;
 800e584:	005b      	lsls	r3, r3, #1
 800e586:	3601      	adds	r6, #1
  gBitsLeft--;
 800e588:	4aa0      	ldr	r2, [pc, #640]	; (800e80c <huffDecode+0x2c8>)
 800e58a:	b2c0      	uxtb	r0, r0
    code |= getBit();
 800e58c:	432c      	orrs	r4, r5
  gBitBuf <<= 1;
 800e58e:	b29b      	uxth	r3, r3
    if (i == 16)
 800e590:	2e10      	cmp	r6, #16
  gBitsLeft--;
 800e592:	7010      	strb	r0, [r2, #0]
  gBitBuf <<= 1;
 800e594:	f8ab 3000 	strh.w	r3, [fp]
    if (i == 16)
 800e598:	f000 80a9 	beq.w	800e6ee <huffDecode+0x1aa>
    maxCode = pHuffTable->mMaxCode[i];
 800e59c:	f838 2f02 	ldrh.w	r2, [r8, #2]!
    if ((code <= maxCode) && (maxCode != 0xFFFF))
 800e5a0:	42a2      	cmp	r2, r4
 800e5a2:	d303      	bcc.n	800e5ac <huffDecode+0x68>
 800e5a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e5a8:	428a      	cmp	r2, r1
 800e5aa:	d178      	bne.n	800e69e <huffDecode+0x15a>
    code <<= 1;
 800e5ac:	0064      	lsls	r4, r4, #1
  if (gBitBuf & 0x8000)
 800e5ae:	0bdd      	lsrs	r5, r3, #15
    code <<= 1;
 800e5b0:	b2a4      	uxth	r4, r4
  if (!gBitsLeft) {
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d1e5      	bne.n	800e582 <huffDecode+0x3e>
  if (!gInBufLeft) {
 800e5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d155      	bne.n	800e66a <huffDecode+0x126>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e5be:	4a94      	ldr	r2, [pc, #592]	; (800e810 <huffDecode+0x2cc>)
  gInBufOfs = 4;
 800e5c0:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e5c4:	4b93      	ldr	r3, [pc, #588]	; (800e814 <huffDecode+0x2d0>)
 800e5c6:	21fc      	movs	r1, #252	; 0xfc
 800e5c8:	4617      	mov	r7, r2
  gInBufLeft = 0;
 800e5ca:	f88a 0000 	strb.w	r0, [sl]
  gInBufOfs = 4;
 800e5ce:	f8df 9260 	ldr.w	r9, [pc, #608]	; 800e830 <huffDecode+0x2ec>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e5d2:	6838      	ldr	r0, [r7, #0]
 800e5d4:	9302      	str	r3, [sp, #8]
 800e5d6:	9201      	str	r2, [sp, #4]
 800e5d8:	4607      	mov	r7, r0
 800e5da:	4652      	mov	r2, sl
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	488e      	ldr	r0, [pc, #568]	; (800e818 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800e5e0:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e5e4:	47b8      	blx	r7
  if (status) {
 800e5e6:	b108      	cbz	r0, 800e5ec <huffDecode+0xa8>
    gCallbackStatus = status;
 800e5e8:	4b8c      	ldr	r3, [pc, #560]	; (800e81c <huffDecode+0x2d8>)
 800e5ea:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d13c      	bne.n	800e66e <huffDecode+0x12a>
      gTemFlag = ~gTemFlag;
 800e5f4:	4a8a      	ldr	r2, [pc, #552]	; (800e820 <huffDecode+0x2dc>)
 800e5f6:	7813      	ldrb	r3, [r2, #0]
 800e5f8:	43db      	mvns	r3, r3
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d05c      	beq.n	800e6bc <huffDecode+0x178>
 800e602:	4b88      	ldr	r3, [pc, #544]	; (800e824 <huffDecode+0x2e0>)
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	9b01      	ldr	r3, [sp, #4]
  gInBufLeft = 0;
 800e608:	2000      	movs	r0, #0
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e60a:	681f      	ldr	r7, [r3, #0]
 800e60c:	9b02      	ldr	r3, [sp, #8]
  gInBufOfs = 4;
 800e60e:	f04f 0c04 	mov.w	ip, #4
  gInBufLeft = 0;
 800e612:	f88a 0000 	strb.w	r0, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e616:	4652      	mov	r2, sl
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	21fc      	movs	r1, #252	; 0xfc
 800e61c:	487e      	ldr	r0, [pc, #504]	; (800e818 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800e61e:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e622:	47b8      	blx	r7
  if (status) {
 800e624:	2800      	cmp	r0, #0
 800e626:	d14b      	bne.n	800e6c0 <huffDecode+0x17c>
    if (!gInBufLeft) {
 800e628:	f89a 3000 	ldrb.w	r3, [sl]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d14d      	bne.n	800e6cc <huffDecode+0x188>
      gTemFlag = ~gTemFlag;
 800e630:	487b      	ldr	r0, [pc, #492]	; (800e820 <huffDecode+0x2dc>)
 800e632:	f899 2000 	ldrb.w	r2, [r9]
 800e636:	7801      	ldrb	r1, [r0, #0]
 800e638:	43c9      	mvns	r1, r1
 800e63a:	b2c9      	uxtb	r1, r1
 800e63c:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e63e:	2900      	cmp	r1, #0
 800e640:	f040 80c4 	bne.w	800e7cc <huffDecode+0x288>
 800e644:	20d9      	movs	r0, #217	; 0xd9
 800e646:	9f04      	ldr	r7, [sp, #16]
  gInBufOfs--;
 800e648:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
  gInBufLeft++;
 800e64c:	1c8b      	adds	r3, r1, #2
  gInBufOfs--;
 800e64e:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800e650:	fa5f f18c 	uxtb.w	r1, ip
  gInBufLeft++;
 800e654:	f88a 3000 	strb.w	r3, [sl]
  gInBufOfs--;
 800e658:	b2d2      	uxtb	r2, r2
  gInBufLeft++;
 800e65a:	23ff      	movs	r3, #255	; 0xff
  gInBuf[gInBufOfs] = i;
 800e65c:	5478      	strb	r0, [r7, r1]
 800e65e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  gInBufOfs--;
 800e662:	f889 2000 	strb.w	r2, [r9]
  gInBuf[gInBufOfs] = i;
 800e666:	54b9      	strb	r1, [r7, r2]
 800e668:	e011      	b.n	800e68e <huffDecode+0x14a>
 800e66a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800e830 <huffDecode+0x2ec>
  return gInBuf[gInBufOfs++];
 800e66e:	f899 2000 	ldrb.w	r2, [r9]
  gInBufLeft--;
 800e672:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 800e674:	486b      	ldr	r0, [pc, #428]	; (800e824 <huffDecode+0x2e0>)
 800e676:	1c51      	adds	r1, r2, #1
  gInBufLeft--;
 800e678:	b2db      	uxtb	r3, r3
  return gInBuf[gInBufOfs++];
 800e67a:	5c82      	ldrb	r2, [r0, r2]
 800e67c:	9004      	str	r0, [sp, #16]
  if ((FFCheck) && (c == 0xFF)) {
 800e67e:	2aff      	cmp	r2, #255	; 0xff
  gInBufLeft--;
 800e680:	f88a 3000 	strb.w	r3, [sl]
  return gInBuf[gInBufOfs++];
 800e684:	f889 1000 	strb.w	r1, [r9]
  if ((FFCheck) && (c == 0xFF)) {
 800e688:	f000 80d4 	beq.w	800e834 <huffDecode+0x2f0>
 800e68c:	b293      	uxth	r3, r2
    gBitsLeft += 8;
 800e68e:	4a5f      	ldr	r2, [pc, #380]	; (800e80c <huffDecode+0x2c8>)
 800e690:	7810      	ldrb	r0, [r2, #0]
    gBitBuf |= getOctet(1);
 800e692:	f8bb 2000 	ldrh.w	r2, [fp]
    gBitsLeft += 8;
 800e696:	3008      	adds	r0, #8
    gBitBuf |= getOctet(1);
 800e698:	4313      	orrs	r3, r2
    gBitsLeft += 8;
 800e69a:	b2c0      	uxtb	r0, r0
 800e69c:	e771      	b.n	800e582 <huffDecode+0x3e>
  j = pHuffTable->mValPtr[i];
 800e69e:	9b03      	ldr	r3, [sp, #12]
 800e6a0:	199a      	adds	r2, r3, r6
  j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
 800e6a2:	f813 3016 	ldrb.w	r3, [r3, r6, lsl #1]
 800e6a6:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
 800e6aa:	442c      	add	r4, r5
 800e6ac:	1ae4      	subs	r4, r4, r3
  return pHuffVal[j];
 800e6ae:	9b05      	ldr	r3, [sp, #20]
 800e6b0:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800e6b4:	5d18      	ldrb	r0, [r3, r4]
}
 800e6b6:	b007      	add	sp, #28
 800e6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return gTemFlag ? 0xFF : 0xD9;
 800e6bc:	23d9      	movs	r3, #217	; 0xd9
 800e6be:	e7e6      	b.n	800e68e <huffDecode+0x14a>
    gCallbackStatus = status;
 800e6c0:	4b56      	ldr	r3, [pc, #344]	; (800e81c <huffDecode+0x2d8>)
 800e6c2:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0b1      	beq.n	800e630 <huffDecode+0xec>
  return gInBuf[gInBufOfs++];
 800e6cc:	f899 0000 	ldrb.w	r0, [r9]
  gInBufLeft--;
 800e6d0:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 800e6d2:	1c42      	adds	r2, r0, #1
  gInBufLeft--;
 800e6d4:	b2d9      	uxtb	r1, r3
  return gInBuf[gInBufOfs++];
 800e6d6:	9b04      	ldr	r3, [sp, #16]
 800e6d8:	b2d2      	uxtb	r2, r2
  gInBufLeft--;
 800e6da:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800e6de:	5c18      	ldrb	r0, [r3, r0]
 800e6e0:	f889 2000 	strb.w	r2, [r9]
    if (n) {
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	f040 808c 	bne.w	800e802 <huffDecode+0x2be>
 800e6ea:	23ff      	movs	r3, #255	; 0xff
 800e6ec:	e7cf      	b.n	800e68e <huffDecode+0x14a>
      return 0;
 800e6ee:	2000      	movs	r0, #0
}
 800e6f0:	b007      	add	sp, #28
 800e6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800e6f6:	4e4c      	ldr	r6, [pc, #304]	; (800e828 <huffDecode+0x2e4>)
 800e6f8:	7833      	ldrb	r3, [r6, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d14f      	bne.n	800e79e <huffDecode+0x25a>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e6fe:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800e814 <huffDecode+0x2d0>
  gInBufOfs = 4;
 800e702:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e706:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800e810 <huffDecode+0x2cc>
 800e70a:	4632      	mov	r2, r6
  gInBufOfs = 4;
 800e70c:	f8df a120 	ldr.w	sl, [pc, #288]	; 800e830 <huffDecode+0x2ec>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e710:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e712:	7033      	strb	r3, [r6, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e714:	f8d8 5000 	ldr.w	r5, [r8]
 800e718:	f8d9 3000 	ldr.w	r3, [r9]
 800e71c:	483e      	ldr	r0, [pc, #248]	; (800e818 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800e71e:	f88a c000 	strb.w	ip, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e722:	47a8      	blx	r5
  if (status) {
 800e724:	b108      	cbz	r0, 800e72a <huffDecode+0x1e6>
    gCallbackStatus = status;
 800e726:	4b3d      	ldr	r3, [pc, #244]	; (800e81c <huffDecode+0x2d8>)
 800e728:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e72a:	7833      	ldrb	r3, [r6, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d138      	bne.n	800e7a2 <huffDecode+0x25e>
      gTemFlag = ~gTemFlag;
 800e730:	4a3b      	ldr	r2, [pc, #236]	; (800e820 <huffDecode+0x2dc>)
 800e732:	7813      	ldrb	r3, [r2, #0]
 800e734:	43db      	mvns	r3, r3
 800e736:	b2db      	uxtb	r3, r3
 800e738:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d04a      	beq.n	800e7d4 <huffDecode+0x290>
 800e73e:	4d39      	ldr	r5, [pc, #228]	; (800e824 <huffDecode+0x2e0>)
  gInBufLeft = 0;
 800e740:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800e742:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e746:	f8d8 8000 	ldr.w	r8, [r8]
 800e74a:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e74c:	7032      	strb	r2, [r6, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e74e:	f8d9 3000 	ldr.w	r3, [r9]
 800e752:	4a35      	ldr	r2, [pc, #212]	; (800e828 <huffDecode+0x2e4>)
 800e754:	4830      	ldr	r0, [pc, #192]	; (800e818 <huffDecode+0x2d4>)
  gInBufOfs = 4;
 800e756:	f88a c000 	strb.w	ip, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e75a:	47c0      	blx	r8
  if (status) {
 800e75c:	b108      	cbz	r0, 800e762 <huffDecode+0x21e>
    gCallbackStatus = status;
 800e75e:	4b2f      	ldr	r3, [pc, #188]	; (800e81c <huffDecode+0x2d8>)
 800e760:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e762:	7832      	ldrb	r2, [r6, #0]
 800e764:	2a00      	cmp	r2, #0
 800e766:	d137      	bne.n	800e7d8 <huffDecode+0x294>
      gTemFlag = ~gTemFlag;
 800e768:	492d      	ldr	r1, [pc, #180]	; (800e820 <huffDecode+0x2dc>)
 800e76a:	f89a 0000 	ldrb.w	r0, [sl]
 800e76e:	780b      	ldrb	r3, [r1, #0]
 800e770:	43db      	mvns	r3, r3
 800e772:	b2db      	uxtb	r3, r3
 800e774:	700b      	strb	r3, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e776:	2b00      	cmp	r3, #0
 800e778:	d045      	beq.n	800e806 <huffDecode+0x2c2>
 800e77a:	4613      	mov	r3, r2
 800e77c:	21ff      	movs	r1, #255	; 0xff
  gInBufOfs--;
 800e77e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800e782:	1e82      	subs	r2, r0, #2
  gInBufLeft++;
 800e784:	3302      	adds	r3, #2
  gInBuf[gInBufOfs] = i;
 800e786:	20ff      	movs	r0, #255	; 0xff
  gInBufOfs--;
 800e788:	b2d2      	uxtb	r2, r2
  gInBuf[gInBufOfs] = i;
 800e78a:	fa5f fc8c 	uxtb.w	ip, ip
  gInBufLeft++;
 800e78e:	7033      	strb	r3, [r6, #0]
  gInBufOfs--;
 800e790:	f88a 2000 	strb.w	r2, [sl]
  gInBufLeft++;
 800e794:	4603      	mov	r3, r0
  gInBuf[gInBufOfs] = i;
 800e796:	f805 100c 	strb.w	r1, [r5, ip]
 800e79a:	54a8      	strb	r0, [r5, r2]
 800e79c:	e00e      	b.n	800e7bc <huffDecode+0x278>
 800e79e:	f8df a090 	ldr.w	sl, [pc, #144]	; 800e830 <huffDecode+0x2ec>
  return gInBuf[gInBufOfs++];
 800e7a2:	f89a 1000 	ldrb.w	r1, [sl]
  gInBufLeft--;
 800e7a6:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 800e7a8:	4d1e      	ldr	r5, [pc, #120]	; (800e824 <huffDecode+0x2e0>)
  gInBufLeft--;
 800e7aa:	b2da      	uxtb	r2, r3
  return gInBuf[gInBufOfs++];
 800e7ac:	1c48      	adds	r0, r1, #1
 800e7ae:	5c6b      	ldrb	r3, [r5, r1]
  gInBufLeft--;
 800e7b0:	7032      	strb	r2, [r6, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800e7b2:	2bff      	cmp	r3, #255	; 0xff
  return gInBuf[gInBufOfs++];
 800e7b4:	f88a 0000 	strb.w	r0, [sl]
  if ((FFCheck) && (c == 0xFF)) {
 800e7b8:	d01c      	beq.n	800e7f4 <huffDecode+0x2b0>
 800e7ba:	b29b      	uxth	r3, r3
    gBitsLeft += 8;
 800e7bc:	4a13      	ldr	r2, [pc, #76]	; (800e80c <huffDecode+0x2c8>)
 800e7be:	7810      	ldrb	r0, [r2, #0]
    gBitBuf |= getOctet(1);
 800e7c0:	f8bb 2000 	ldrh.w	r2, [fp]
    gBitsLeft += 8;
 800e7c4:	3008      	adds	r0, #8
    gBitBuf |= getOctet(1);
 800e7c6:	4313      	orrs	r3, r2
    gBitsLeft += 8;
 800e7c8:	b2c0      	uxtb	r0, r0
 800e7ca:	e6ca      	b.n	800e562 <huffDecode+0x1e>
      return gTemFlag ? 0xFF : 0xD9;
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	20ff      	movs	r0, #255	; 0xff
 800e7d0:	9f04      	ldr	r7, [sp, #16]
 800e7d2:	e739      	b.n	800e648 <huffDecode+0x104>
 800e7d4:	23d9      	movs	r3, #217	; 0xd9
 800e7d6:	e7f1      	b.n	800e7bc <huffDecode+0x278>
  return gInBuf[gInBufOfs++];
 800e7d8:	f89a 1000 	ldrb.w	r1, [sl]
  gInBufLeft--;
 800e7dc:	3a01      	subs	r2, #1
  return gInBuf[gInBufOfs++];
 800e7de:	1c48      	adds	r0, r1, #1
  gInBufLeft--;
 800e7e0:	b2d3      	uxtb	r3, r2
  return gInBuf[gInBufOfs++];
 800e7e2:	5c69      	ldrb	r1, [r5, r1]
 800e7e4:	b2c0      	uxtb	r0, r0
  gInBufLeft--;
 800e7e6:	7033      	strb	r3, [r6, #0]
  return gInBuf[gInBufOfs++];
 800e7e8:	f88a 0000 	strb.w	r0, [sl]
    if (n) {
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	d1c6      	bne.n	800e77e <huffDecode+0x23a>
 800e7f0:	23ff      	movs	r3, #255	; 0xff
 800e7f2:	e7e3      	b.n	800e7bc <huffDecode+0x278>
  if (!gInBufLeft) {
 800e7f4:	2a00      	cmp	r2, #0
 800e7f6:	d1ef      	bne.n	800e7d8 <huffDecode+0x294>
 800e7f8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 800e814 <huffDecode+0x2d0>
 800e7fc:	f8df 8010 	ldr.w	r8, [pc, #16]	; 800e810 <huffDecode+0x2cc>
 800e800:	e79e      	b.n	800e740 <huffDecode+0x1fc>
 800e802:	461f      	mov	r7, r3
 800e804:	e720      	b.n	800e648 <huffDecode+0x104>
      return gTemFlag ? 0xFF : 0xD9;
 800e806:	21d9      	movs	r1, #217	; 0xd9
 800e808:	e7b9      	b.n	800e77e <huffDecode+0x23a>
 800e80a:	bf00      	nop
 800e80c:	2000c5dc 	.word	0x2000c5dc
 800e810:	2000cf14 	.word	0x2000cf14
 800e814:	2000cf10 	.word	0x2000cf10
 800e818:	2000c9e8 	.word	0x2000c9e8
 800e81c:	2000c5dd 	.word	0x2000c5dd
 800e820:	2000cf0b 	.word	0x2000cf0b
 800e824:	2000c9e4 	.word	0x2000c9e4
 800e828:	2000cae4 	.word	0x2000cae4
 800e82c:	2000c5da 	.word	0x2000c5da
 800e830:	2000cae5 	.word	0x2000cae5
  if (!gInBufLeft) {
 800e834:	2b00      	cmp	r3, #0
 800e836:	f47f af49 	bne.w	800e6cc <huffDecode+0x188>
 800e83a:	4b02      	ldr	r3, [pc, #8]	; (800e844 <huffDecode+0x300>)
 800e83c:	9302      	str	r3, [sp, #8]
 800e83e:	4b02      	ldr	r3, [pc, #8]	; (800e848 <huffDecode+0x304>)
 800e840:	9301      	str	r3, [sp, #4]
 800e842:	e6e1      	b.n	800e608 <huffDecode+0xc4>
 800e844:	2000cf10 	.word	0x2000cf10
 800e848:	2000cf14 	.word	0x2000cf14

0800e84c <getBits.constprop.6>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800e84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (numBits > 8) {
 800e850:	2808      	cmp	r0, #8
  uint16 ret = gBitBuf;
 800e852:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 800eb40 <getBits.constprop.6+0x2f4>
 800e856:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 800eb44 <getBits.constprop.6+0x2f8>
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800e85a:	b085      	sub	sp, #20
 800e85c:	4605      	mov	r5, r0
  uint16 ret = gBitBuf;
 800e85e:	f8b8 4000 	ldrh.w	r4, [r8]
 800e862:	f89a 1000 	ldrb.w	r1, [sl]
  if (numBits > 8) {
 800e866:	d812      	bhi.n	800e88e <getBits.constprop.6+0x42>
 800e868:	4623      	mov	r3, r4
 800e86a:	4606      	mov	r6, r0
  if (gBitsLeft < numBits) {
 800e86c:	428e      	cmp	r6, r1
 800e86e:	d86a      	bhi.n	800e946 <getBits.constprop.6+0xfa>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e870:	1b89      	subs	r1, r1, r6
    gBitBuf <<= numBits;
 800e872:	fa03 f606 	lsl.w	r6, r3, r6
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800e876:	f88a 1000 	strb.w	r1, [sl]
    gBitBuf <<= numBits;
 800e87a:	f8a8 6000 	strh.w	r6, [r8]
  return ret >> (16 - origBits);
 800e87e:	f1c5 0510 	rsb	r5, r5, #16
 800e882:	fa44 f505 	asr.w	r5, r4, r5
}
 800e886:	b2a8      	uxth	r0, r5
 800e888:	b005      	add	sp, #20
 800e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800e88e:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 800eb3c <getBits.constprop.6+0x2f0>
    numBits -= 8;
 800e892:	f1a0 0608 	sub.w	r6, r0, #8
    gBitBuf <<= gBitsLeft;
 800e896:	fa04 f301 	lsl.w	r3, r4, r1
  if (!gInBufLeft) {
 800e89a:	f899 0000 	ldrb.w	r0, [r9]
    numBits -= 8;
 800e89e:	b2f6      	uxtb	r6, r6
    gBitBuf <<= gBitsLeft;
 800e8a0:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	f040 80b2 	bne.w	800ea0e <getBits.constprop.6+0x1c2>
  gInBufOfs = 4;
 800e8aa:	4f9e      	ldr	r7, [pc, #632]	; (800eb24 <getBits.constprop.6+0x2d8>)
 800e8ac:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e8b0:	4b9d      	ldr	r3, [pc, #628]	; (800eb28 <getBits.constprop.6+0x2dc>)
 800e8b2:	464a      	mov	r2, r9
 800e8b4:	f8df b290 	ldr.w	fp, [pc, #656]	; 800eb48 <getBits.constprop.6+0x2fc>
 800e8b8:	21fc      	movs	r1, #252	; 0xfc
 800e8ba:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800e8bc:	9701      	str	r7, [sp, #4]
  gInBufLeft = 0;
 800e8be:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800e8c2:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4898      	ldr	r0, [pc, #608]	; (800eb2c <getBits.constprop.6+0x2e0>)
 800e8ca:	f8db 7000 	ldr.w	r7, [fp]
 800e8ce:	47b8      	blx	r7
  if (status) {
 800e8d0:	b108      	cbz	r0, 800e8d6 <getBits.constprop.6+0x8a>
    gCallbackStatus = status;
 800e8d2:	4b97      	ldr	r3, [pc, #604]	; (800eb30 <getBits.constprop.6+0x2e4>)
 800e8d4:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e8d6:	f899 0000 	ldrb.w	r0, [r9]
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	f040 8099 	bne.w	800ea12 <getBits.constprop.6+0x1c6>
      gTemFlag = ~gTemFlag;
 800e8e0:	4a94      	ldr	r2, [pc, #592]	; (800eb34 <getBits.constprop.6+0x2e8>)
 800e8e2:	7813      	ldrb	r3, [r2, #0]
 800e8e4:	43db      	mvns	r3, r3
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f000 80ce 	beq.w	800ea8c <getBits.constprop.6+0x240>
 800e8f0:	4b91      	ldr	r3, [pc, #580]	; (800eb38 <getBits.constprop.6+0x2ec>)
 800e8f2:	9303      	str	r3, [sp, #12]
 800e8f4:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
  gInBufLeft = 0;
 800e8f8:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800e8fa:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e8fe:	f8db b000 	ldr.w	fp, [fp]
 800e902:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e904:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a8c      	ldr	r2, [pc, #560]	; (800eb3c <getBits.constprop.6+0x2f0>)
 800e90c:	4887      	ldr	r0, [pc, #540]	; (800eb2c <getBits.constprop.6+0x2e0>)
  gInBufOfs = 4;
 800e90e:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e912:	47d8      	blx	fp
  if (status) {
 800e914:	b108      	cbz	r0, 800e91a <getBits.constprop.6+0xce>
    gCallbackStatus = status;
 800e916:	4b86      	ldr	r3, [pc, #536]	; (800eb30 <getBits.constprop.6+0x2e4>)
 800e918:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e91a:	f899 0000 	ldrb.w	r0, [r9]
 800e91e:	2800      	cmp	r0, #0
 800e920:	f000 80b6 	beq.w	800ea90 <getBits.constprop.6+0x244>
 800e924:	9b01      	ldr	r3, [sp, #4]
 800e926:	781b      	ldrb	r3, [r3, #0]
  gInBufLeft--;
 800e928:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800e92a:	1c5a      	adds	r2, r3, #1
 800e92c:	9903      	ldr	r1, [sp, #12]
 800e92e:	b2d2      	uxtb	r2, r2
 800e930:	5cc9      	ldrb	r1, [r1, r3]
  gInBufLeft--;
 800e932:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800e934:	9801      	ldr	r0, [sp, #4]
  gInBufLeft--;
 800e936:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800e93a:	7002      	strb	r2, [r0, #0]
    if (n) {
 800e93c:	2900      	cmp	r1, #0
 800e93e:	f040 80b3 	bne.w	800eaa8 <getBits.constprop.6+0x25c>
 800e942:	22ff      	movs	r2, #255	; 0xff
 800e944:	e074      	b.n	800ea30 <getBits.constprop.6+0x1e4>
  if (!gInBufLeft) {
 800e946:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800eb3c <getBits.constprop.6+0x2f0>
    gBitBuf <<= gBitsLeft;
 800e94a:	408b      	lsls	r3, r1
  if (!gInBufLeft) {
 800e94c:	f899 0000 	ldrb.w	r0, [r9]
    gBitBuf <<= gBitsLeft;
 800e950:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800e954:	2800      	cmp	r0, #0
 800e956:	d17a      	bne.n	800ea4e <getBits.constprop.6+0x202>
  gInBufOfs = 4;
 800e958:	4f72      	ldr	r7, [pc, #456]	; (800eb24 <getBits.constprop.6+0x2d8>)
 800e95a:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e95e:	4b72      	ldr	r3, [pc, #456]	; (800eb28 <getBits.constprop.6+0x2dc>)
 800e960:	464a      	mov	r2, r9
 800e962:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800eb48 <getBits.constprop.6+0x2fc>
 800e966:	21fc      	movs	r1, #252	; 0xfc
 800e968:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800e96a:	9701      	str	r7, [sp, #4]
  gInBufLeft = 0;
 800e96c:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800e970:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	486d      	ldr	r0, [pc, #436]	; (800eb2c <getBits.constprop.6+0x2e0>)
 800e978:	f8db 7000 	ldr.w	r7, [fp]
 800e97c:	47b8      	blx	r7
  if (status) {
 800e97e:	b108      	cbz	r0, 800e984 <getBits.constprop.6+0x138>
    gCallbackStatus = status;
 800e980:	4b6b      	ldr	r3, [pc, #428]	; (800eb30 <getBits.constprop.6+0x2e4>)
 800e982:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e984:	f899 0000 	ldrb.w	r0, [r9]
 800e988:	2800      	cmp	r0, #0
 800e98a:	d162      	bne.n	800ea52 <getBits.constprop.6+0x206>
      gTemFlag = ~gTemFlag;
 800e98c:	4a69      	ldr	r2, [pc, #420]	; (800eb34 <getBits.constprop.6+0x2e8>)
 800e98e:	7813      	ldrb	r3, [r2, #0]
 800e990:	43db      	mvns	r3, r3
 800e992:	b2db      	uxtb	r3, r3
 800e994:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e996:	2b00      	cmp	r3, #0
 800e998:	f000 809a 	beq.w	800ead0 <getBits.constprop.6+0x284>
 800e99c:	4b66      	ldr	r3, [pc, #408]	; (800eb38 <getBits.constprop.6+0x2ec>)
 800e99e:	9303      	str	r3, [sp, #12]
 800e9a0:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
  gInBufLeft = 0;
 800e9a4:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800e9a6:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e9aa:	f8db b000 	ldr.w	fp, [fp]
 800e9ae:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800e9b0:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a61      	ldr	r2, [pc, #388]	; (800eb3c <getBits.constprop.6+0x2f0>)
 800e9b8:	485c      	ldr	r0, [pc, #368]	; (800eb2c <getBits.constprop.6+0x2e0>)
  gInBufOfs = 4;
 800e9ba:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800e9be:	47d8      	blx	fp
  if (status) {
 800e9c0:	b108      	cbz	r0, 800e9c6 <getBits.constprop.6+0x17a>
    gCallbackStatus = status;
 800e9c2:	4b5b      	ldr	r3, [pc, #364]	; (800eb30 <getBits.constprop.6+0x2e4>)
 800e9c4:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800e9c6:	f899 0000 	ldrb.w	r0, [r9]
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	f040 8082 	bne.w	800ead4 <getBits.constprop.6+0x288>
      gTemFlag = ~gTemFlag;
 800e9d0:	4958      	ldr	r1, [pc, #352]	; (800eb34 <getBits.constprop.6+0x2e8>)
 800e9d2:	9b01      	ldr	r3, [sp, #4]
 800e9d4:	781a      	ldrb	r2, [r3, #0]
 800e9d6:	780b      	ldrb	r3, [r1, #0]
 800e9d8:	43db      	mvns	r3, r3
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	700b      	strb	r3, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f000 809d 	beq.w	800eb1e <getBits.constprop.6+0x2d2>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	21ff      	movs	r1, #255	; 0xff
  gInBufLeft++;
 800e9e8:	1c98      	adds	r0, r3, #2
  gInBufOfs--;
 800e9ea:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800e9ee:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800e9f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e9f4:	fa5f f38e 	uxtb.w	r3, lr
  gInBufLeft++;
 800e9f8:	f889 0000 	strb.w	r0, [r9]
  gInBuf[gInBufOfs] = i;
 800e9fc:	9803      	ldr	r0, [sp, #12]
  gInBufOfs--;
 800e9fe:	b2d2      	uxtb	r2, r2
  gInBuf[gInBufOfs] = i;
 800ea00:	54c1      	strb	r1, [r0, r3]
  gInBufLeft++;
 800ea02:	4663      	mov	r3, ip
  gInBufOfs--;
 800ea04:	9901      	ldr	r1, [sp, #4]
  gInBuf[gInBufOfs] = i;
 800ea06:	f800 c002 	strb.w	ip, [r0, r2]
  gInBufOfs--;
 800ea0a:	700a      	strb	r2, [r1, #0]
 800ea0c:	e030      	b.n	800ea70 <getBits.constprop.6+0x224>
 800ea0e:	4b45      	ldr	r3, [pc, #276]	; (800eb24 <getBits.constprop.6+0x2d8>)
 800ea10:	9301      	str	r3, [sp, #4]
  return gInBuf[gInBufOfs++];
 800ea12:	9f01      	ldr	r7, [sp, #4]
  gInBufLeft--;
 800ea14:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ea16:	4948      	ldr	r1, [pc, #288]	; (800eb38 <getBits.constprop.6+0x2ec>)
 800ea18:	783a      	ldrb	r2, [r7, #0]
  gInBufLeft--;
 800ea1a:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800ea1c:	9103      	str	r1, [sp, #12]
 800ea1e:	1c53      	adds	r3, r2, #1
 800ea20:	5c8a      	ldrb	r2, [r1, r2]
  gInBufLeft--;
 800ea22:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800ea26:	b2db      	uxtb	r3, r3
  if ((FFCheck) && (c == 0xFF)) {
 800ea28:	2aff      	cmp	r2, #255	; 0xff
  return gInBuf[gInBufOfs++];
 800ea2a:	703b      	strb	r3, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800ea2c:	d068      	beq.n	800eb00 <getBits.constprop.6+0x2b4>
 800ea2e:	b292      	uxth	r2, r2
    gBitBuf <<= (8 - gBitsLeft);
 800ea30:	f89a 1000 	ldrb.w	r1, [sl]
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800ea34:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    gBitBuf |= getOctet(FFCheck);
 800ea38:	f8b8 3000 	ldrh.w	r3, [r8]
    gBitBuf <<= (8 - gBitsLeft);
 800ea3c:	f1c1 0008 	rsb	r0, r1, #8
 800ea40:	4313      	orrs	r3, r2
 800ea42:	4083      	lsls	r3, r0
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800ea44:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	4304      	orrs	r4, r0
 800ea4c:	e70e      	b.n	800e86c <getBits.constprop.6+0x20>
 800ea4e:	4b35      	ldr	r3, [pc, #212]	; (800eb24 <getBits.constprop.6+0x2d8>)
 800ea50:	9301      	str	r3, [sp, #4]
  return gInBuf[gInBufOfs++];
 800ea52:	9f01      	ldr	r7, [sp, #4]
  gInBufLeft--;
 800ea54:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ea56:	4938      	ldr	r1, [pc, #224]	; (800eb38 <getBits.constprop.6+0x2ec>)
 800ea58:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800ea5a:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800ea5c:	9103      	str	r1, [sp, #12]
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	5ccb      	ldrb	r3, [r1, r3]
  gInBufLeft--;
 800ea62:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800ea66:	b2d2      	uxtb	r2, r2
  if ((FFCheck) && (c == 0xFF)) {
 800ea68:	2bff      	cmp	r3, #255	; 0xff
  return gInBuf[gInBufOfs++];
 800ea6a:	703a      	strb	r2, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800ea6c:	d050      	beq.n	800eb10 <getBits.constprop.6+0x2c4>
 800ea6e:	b29b      	uxth	r3, r3
    gBitBuf <<= (numBits - gBitsLeft);
 800ea70:	f89a 2000 	ldrb.w	r2, [sl]
    gBitBuf |= getOctet(FFCheck);
 800ea74:	f8b8 0000 	ldrh.w	r0, [r8]
    gBitBuf <<= (numBits - gBitsLeft);
 800ea78:	1ab1      	subs	r1, r6, r2
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800ea7a:	3208      	adds	r2, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800ea7c:	4303      	orrs	r3, r0
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800ea7e:	1b96      	subs	r6, r2, r6
    gBitBuf <<= (numBits - gBitsLeft);
 800ea80:	408b      	lsls	r3, r1
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800ea82:	f88a 6000 	strb.w	r6, [sl]
    gBitBuf <<= (numBits - gBitsLeft);
 800ea86:	f8a8 3000 	strh.w	r3, [r8]
 800ea8a:	e6f8      	b.n	800e87e <getBits.constprop.6+0x32>
      return gTemFlag ? 0xFF : 0xD9;
 800ea8c:	22d9      	movs	r2, #217	; 0xd9
 800ea8e:	e7cf      	b.n	800ea30 <getBits.constprop.6+0x1e4>
      gTemFlag = ~gTemFlag;
 800ea90:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800eb34 <getBits.constprop.6+0x2e8>
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	781a      	ldrb	r2, [r3, #0]
 800ea98:	f89c 3000 	ldrb.w	r3, [ip]
 800ea9c:	43d9      	mvns	r1, r3
 800ea9e:	b2cb      	uxtb	r3, r1
 800eaa0:	f88c 3000 	strb.w	r3, [ip]
      return gTemFlag ? 0xFF : 0xD9;
 800eaa4:	bb4b      	cbnz	r3, 800eafa <getBits.constprop.6+0x2ae>
 800eaa6:	21d9      	movs	r1, #217	; 0xd9
  gInBufLeft++;
 800eaa8:	1c98      	adds	r0, r3, #2
  gInBufOfs--;
 800eaaa:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800eaae:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800eab0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800eab4:	fa5f fe8e 	uxtb.w	lr, lr
  gInBufLeft++;
 800eab8:	f889 0000 	strb.w	r0, [r9]
  gInBuf[gInBufOfs] = i;
 800eabc:	9803      	ldr	r0, [sp, #12]
  gInBufOfs--;
 800eabe:	b2d3      	uxtb	r3, r2
  gInBufLeft++;
 800eac0:	4662      	mov	r2, ip
  gInBuf[gInBufOfs] = i;
 800eac2:	f800 100e 	strb.w	r1, [r0, lr]
  gInBufOfs--;
 800eac6:	9901      	ldr	r1, [sp, #4]
  gInBuf[gInBufOfs] = i;
 800eac8:	f800 c003 	strb.w	ip, [r0, r3]
  gInBufOfs--;
 800eacc:	700b      	strb	r3, [r1, #0]
 800eace:	e7af      	b.n	800ea30 <getBits.constprop.6+0x1e4>
      return gTemFlag ? 0xFF : 0xD9;
 800ead0:	23d9      	movs	r3, #217	; 0xd9
 800ead2:	e7cd      	b.n	800ea70 <getBits.constprop.6+0x224>
 800ead4:	9b01      	ldr	r3, [sp, #4]
 800ead6:	781a      	ldrb	r2, [r3, #0]
  gInBufLeft--;
 800ead8:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800eada:	9b03      	ldr	r3, [sp, #12]
 800eadc:	f102 0c01 	add.w	ip, r2, #1
 800eae0:	5c99      	ldrb	r1, [r3, r2]
  gInBufLeft--;
 800eae2:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800eae4:	fa5f f28c 	uxtb.w	r2, ip
 800eae8:	9801      	ldr	r0, [sp, #4]
  gInBufLeft--;
 800eaea:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800eaee:	7002      	strb	r2, [r0, #0]
    if (n) {
 800eaf0:	2900      	cmp	r1, #0
 800eaf2:	f47f af79 	bne.w	800e9e8 <getBits.constprop.6+0x19c>
 800eaf6:	23ff      	movs	r3, #255	; 0xff
 800eaf8:	e7ba      	b.n	800ea70 <getBits.constprop.6+0x224>
      return gTemFlag ? 0xFF : 0xD9;
 800eafa:	4603      	mov	r3, r0
 800eafc:	21ff      	movs	r1, #255	; 0xff
 800eafe:	e7d3      	b.n	800eaa8 <getBits.constprop.6+0x25c>
  if (!gInBufLeft) {
 800eb00:	2800      	cmp	r0, #0
 800eb02:	f47f af11 	bne.w	800e928 <getBits.constprop.6+0xdc>
 800eb06:	4b08      	ldr	r3, [pc, #32]	; (800eb28 <getBits.constprop.6+0x2dc>)
 800eb08:	f8df b03c 	ldr.w	fp, [pc, #60]	; 800eb48 <getBits.constprop.6+0x2fc>
 800eb0c:	9302      	str	r3, [sp, #8]
 800eb0e:	e6f3      	b.n	800e8f8 <getBits.constprop.6+0xac>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d1e1      	bne.n	800ead8 <getBits.constprop.6+0x28c>
 800eb14:	4b04      	ldr	r3, [pc, #16]	; (800eb28 <getBits.constprop.6+0x2dc>)
 800eb16:	f8df b030 	ldr.w	fp, [pc, #48]	; 800eb48 <getBits.constprop.6+0x2fc>
 800eb1a:	9302      	str	r3, [sp, #8]
 800eb1c:	e742      	b.n	800e9a4 <getBits.constprop.6+0x158>
      return gTemFlag ? 0xFF : 0xD9;
 800eb1e:	21d9      	movs	r1, #217	; 0xd9
 800eb20:	e762      	b.n	800e9e8 <getBits.constprop.6+0x19c>
 800eb22:	bf00      	nop
 800eb24:	2000cae5 	.word	0x2000cae5
 800eb28:	2000cf10 	.word	0x2000cf10
 800eb2c:	2000c9e8 	.word	0x2000c9e8
 800eb30:	2000c5dd 	.word	0x2000c5dd
 800eb34:	2000cf0b 	.word	0x2000cf0b
 800eb38:	2000c9e4 	.word	0x2000c9e4
 800eb3c:	2000cae4 	.word	0x2000cae4
 800eb40:	2000c5da 	.word	0x2000c5da
 800eb44:	2000c5dc 	.word	0x2000c5dc
 800eb48:	2000cf14 	.word	0x2000cf14

0800eb4c <getBits.constprop.4>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800eb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16 ret = gBitBuf;
 800eb50:	4d46      	ldr	r5, [pc, #280]	; (800ec6c <getBits.constprop.4+0x120>)
    gBitBuf <<= gBitsLeft;
 800eb52:	4e47      	ldr	r6, [pc, #284]	; (800ec70 <getBits.constprop.4+0x124>)
  uint16 ret = gBitBuf;
 800eb54:	f8b5 8000 	ldrh.w	r8, [r5]
    gBitBuf <<= gBitsLeft;
 800eb58:	7831      	ldrb	r1, [r6, #0]
  if (!gInBufLeft) {
 800eb5a:	4c46      	ldr	r4, [pc, #280]	; (800ec74 <getBits.constprop.4+0x128>)
    gBitBuf <<= gBitsLeft;
 800eb5c:	fa08 f301 	lsl.w	r3, r8, r1
  if (!gInBufLeft) {
 800eb60:	7820      	ldrb	r0, [r4, #0]
    gBitBuf <<= gBitsLeft;
 800eb62:	fa1f fc83 	uxth.w	ip, r3
 800eb66:	f8a5 c000 	strh.w	ip, [r5]
  if (!gInBufLeft) {
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d17c      	bne.n	800ec68 <getBits.constprop.4+0x11c>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eb6e:	4b42      	ldr	r3, [pc, #264]	; (800ec78 <getBits.constprop.4+0x12c>)
  gInBufOfs = 4;
 800eb70:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eb74:	f8df e114 	ldr.w	lr, [pc, #276]	; 800ec8c <getBits.constprop.4+0x140>
 800eb78:	4622      	mov	r2, r4
  gInBufOfs = 4;
 800eb7a:	4f40      	ldr	r7, [pc, #256]	; (800ec7c <getBits.constprop.4+0x130>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eb7c:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800eb7e:	7020      	strb	r0, [r4, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f8de 9000 	ldr.w	r9, [lr]
 800eb86:	483e      	ldr	r0, [pc, #248]	; (800ec80 <getBits.constprop.4+0x134>)
  gInBufOfs = 4;
 800eb88:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eb8c:	47c8      	blx	r9
  if (status) {
 800eb8e:	b108      	cbz	r0, 800eb94 <getBits.constprop.4+0x48>
    gCallbackStatus = status;
 800eb90:	4b3c      	ldr	r3, [pc, #240]	; (800ec84 <getBits.constprop.4+0x138>)
 800eb92:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800eb94:	7820      	ldrb	r0, [r4, #0]
 800eb96:	b308      	cbz	r0, 800ebdc <getBits.constprop.4+0x90>
 800eb98:	f8b5 c000 	ldrh.w	ip, [r5]
 800eb9c:	7831      	ldrb	r1, [r6, #0]
  return gInBuf[gInBufOfs++];
 800eb9e:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800eba0:	1e42      	subs	r2, r0, #1
  return gInBuf[gInBufOfs++];
 800eba2:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 800ec90 <getBits.constprop.4+0x144>
 800eba6:	1c58      	adds	r0, r3, #1
  gInBufLeft--;
 800eba8:	b2d2      	uxtb	r2, r2
 800ebaa:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800ebae:	7022      	strb	r2, [r4, #0]
  return gInBuf[gInBufOfs++];
 800ebb0:	7038      	strb	r0, [r7, #0]
    gBitBuf <<= (8 - gBitsLeft);
 800ebb2:	ea43 030c 	orr.w	r3, r3, ip
 800ebb6:	f1c1 0008 	rsb	r0, r1, #8
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800ebba:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
  if (gBitsLeft < numBits) {
 800ebbe:	2907      	cmp	r1, #7
    gBitBuf <<= (8 - gBitsLeft);
 800ebc0:	fa03 f300 	lsl.w	r3, r3, r0
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800ebc4:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800ebc8:	ea48 080c 	orr.w	r8, r8, ip
  if (gBitsLeft < numBits) {
 800ebcc:	d912      	bls.n	800ebf4 <getBits.constprop.4+0xa8>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800ebce:	3908      	subs	r1, #8
    gBitBuf <<= numBits;
 800ebd0:	021b      	lsls	r3, r3, #8
}
 800ebd2:	4640      	mov	r0, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800ebd4:	7031      	strb	r1, [r6, #0]
    gBitBuf <<= numBits;
 800ebd6:	802b      	strh	r3, [r5, #0]
}
 800ebd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      gTemFlag = ~gTemFlag;
 800ebdc:	4b2a      	ldr	r3, [pc, #168]	; (800ec88 <getBits.constprop.4+0x13c>)
 800ebde:	f8b5 c000 	ldrh.w	ip, [r5]
 800ebe2:	781a      	ldrb	r2, [r3, #0]
 800ebe4:	7831      	ldrb	r1, [r6, #0]
 800ebe6:	43d2      	mvns	r2, r2
 800ebe8:	b2d2      	uxtb	r2, r2
 800ebea:	701a      	strb	r2, [r3, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ebec:	b362      	cbz	r2, 800ec48 <getBits.constprop.4+0xfc>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	23ff      	movs	r3, #255	; 0xff
 800ebf2:	e7de      	b.n	800ebb2 <getBits.constprop.4+0x66>
    gBitBuf <<= gBitsLeft;
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	408b      	lsls	r3, r1
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	802b      	strh	r3, [r5, #0]
  if (!gInBufLeft) {
 800ebfc:	b9b2      	cbnz	r2, 800ec2c <getBits.constprop.4+0xe0>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ebfe:	4823      	ldr	r0, [pc, #140]	; (800ec8c <getBits.constprop.4+0x140>)
  gInBufOfs = 4;
 800ec00:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ec04:	4b1c      	ldr	r3, [pc, #112]	; (800ec78 <getBits.constprop.4+0x12c>)
 800ec06:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800ec08:	7022      	strb	r2, [r4, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ec0a:	f8d0 9000 	ldr.w	r9, [r0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a18      	ldr	r2, [pc, #96]	; (800ec74 <getBits.constprop.4+0x128>)
 800ec12:	481b      	ldr	r0, [pc, #108]	; (800ec80 <getBits.constprop.4+0x134>)
  gInBufOfs = 4;
 800ec14:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ec18:	47c8      	blx	r9
  if (status) {
 800ec1a:	b108      	cbz	r0, 800ec20 <getBits.constprop.4+0xd4>
    gCallbackStatus = status;
 800ec1c:	4b19      	ldr	r3, [pc, #100]	; (800ec84 <getBits.constprop.4+0x138>)
 800ec1e:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ec20:	7822      	ldrb	r2, [r4, #0]
 800ec22:	b19a      	cbz	r2, 800ec4c <getBits.constprop.4+0x100>
 800ec24:	7830      	ldrb	r0, [r6, #0]
 800ec26:	882b      	ldrh	r3, [r5, #0]
 800ec28:	f1c0 0008 	rsb	r0, r0, #8
  return gInBuf[gInBufOfs++];
 800ec2c:	7839      	ldrb	r1, [r7, #0]
  gInBufLeft--;
 800ec2e:	3a01      	subs	r2, #1
  return gInBuf[gInBufOfs++];
 800ec30:	4e17      	ldr	r6, [pc, #92]	; (800ec90 <getBits.constprop.4+0x144>)
  gInBufLeft--;
 800ec32:	7022      	strb	r2, [r4, #0]
  return gInBuf[gInBufOfs++];
 800ec34:	1c4c      	adds	r4, r1, #1
 800ec36:	5c72      	ldrb	r2, [r6, r1]
 800ec38:	703c      	strb	r4, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	fa03 f000 	lsl.w	r0, r3, r0
 800ec40:	8028      	strh	r0, [r5, #0]
}
 800ec42:	4640      	mov	r0, r8
 800ec44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return gTemFlag ? 0xFF : 0xD9;
 800ec48:	23d9      	movs	r3, #217	; 0xd9
 800ec4a:	e7b2      	b.n	800ebb2 <getBits.constprop.4+0x66>
      gTemFlag = ~gTemFlag;
 800ec4c:	490e      	ldr	r1, [pc, #56]	; (800ec88 <getBits.constprop.4+0x13c>)
 800ec4e:	7830      	ldrb	r0, [r6, #0]
 800ec50:	780a      	ldrb	r2, [r1, #0]
 800ec52:	f1c0 0008 	rsb	r0, r0, #8
 800ec56:	882b      	ldrh	r3, [r5, #0]
 800ec58:	43d2      	mvns	r2, r2
 800ec5a:	b2d2      	uxtb	r2, r2
      return gTemFlag ? 0xFF : 0xD9;
 800ec5c:	2a00      	cmp	r2, #0
      gTemFlag = ~gTemFlag;
 800ec5e:	700a      	strb	r2, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ec60:	bf0c      	ite	eq
 800ec62:	22d9      	moveq	r2, #217	; 0xd9
 800ec64:	22ff      	movne	r2, #255	; 0xff
 800ec66:	e7e8      	b.n	800ec3a <getBits.constprop.4+0xee>
 800ec68:	4f04      	ldr	r7, [pc, #16]	; (800ec7c <getBits.constprop.4+0x130>)
 800ec6a:	e798      	b.n	800eb9e <getBits.constprop.4+0x52>
 800ec6c:	2000c5da 	.word	0x2000c5da
 800ec70:	2000c5dc 	.word	0x2000c5dc
 800ec74:	2000cae4 	.word	0x2000cae4
 800ec78:	2000cf10 	.word	0x2000cf10
 800ec7c:	2000cae5 	.word	0x2000cae5
 800ec80:	2000c9e8 	.word	0x2000c9e8
 800ec84:	2000c5dd 	.word	0x2000c5dd
 800ec88:	2000cf0b 	.word	0x2000cf0b
 800ec8c:	2000cf14 	.word	0x2000cf14
 800ec90:	2000c9e4 	.word	0x2000c9e4

0800ec94 <getBits.constprop.5>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800ec94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (gBitsLeft < numBits) {
 800ec98:	4e55      	ldr	r6, [pc, #340]	; (800edf0 <getBits.constprop.5+0x15c>)
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800ec9a:	b083      	sub	sp, #12
  uint16 ret = gBitBuf;
 800ec9c:	4d55      	ldr	r5, [pc, #340]	; (800edf4 <getBits.constprop.5+0x160>)
  if (gBitsLeft < numBits) {
 800ec9e:	7833      	ldrb	r3, [r6, #0]
 800eca0:	882c      	ldrh	r4, [r5, #0]
 800eca2:	2b07      	cmp	r3, #7
 800eca4:	d907      	bls.n	800ecb6 <getBits.constprop.5+0x22>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800eca6:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800eca8:	0222      	lsls	r2, r4, #8
  return ret >> (16 - origBits);
 800ecaa:	0a20      	lsrs	r0, r4, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800ecac:	7033      	strb	r3, [r6, #0]
    gBitBuf <<= numBits;
 800ecae:	802a      	strh	r2, [r5, #0]
}
 800ecb0:	b003      	add	sp, #12
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800ecb6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800ee04 <getBits.constprop.5+0x170>
    gBitBuf <<= gBitsLeft;
 800ecba:	fa04 f303 	lsl.w	r3, r4, r3
 800ecbe:	9001      	str	r0, [sp, #4]
  if (!gInBufLeft) {
 800ecc0:	f898 0000 	ldrb.w	r0, [r8]
    gBitBuf <<= gBitsLeft;
 800ecc4:	802b      	strh	r3, [r5, #0]
  if (!gInBufLeft) {
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	f040 808d 	bne.w	800ede6 <getBits.constprop.5+0x152>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eccc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800ee0c <getBits.constprop.5+0x178>
  gInBufOfs = 4;
 800ecd0:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ecd4:	f8df b138 	ldr.w	fp, [pc, #312]	; 800ee10 <getBits.constprop.5+0x17c>
 800ecd8:	4642      	mov	r2, r8
  gInBufOfs = 4;
 800ecda:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800ee14 <getBits.constprop.5+0x180>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ecde:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800ece0:	f888 0000 	strb.w	r0, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ece4:	f8da 3000 	ldr.w	r3, [sl]
 800ece8:	f8db 7000 	ldr.w	r7, [fp]
 800ecec:	4842      	ldr	r0, [pc, #264]	; (800edf8 <getBits.constprop.5+0x164>)
  gInBufOfs = 4;
 800ecee:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ecf2:	47b8      	blx	r7
  if (status) {
 800ecf4:	b108      	cbz	r0, 800ecfa <getBits.constprop.5+0x66>
    gCallbackStatus = status;
 800ecf6:	4b41      	ldr	r3, [pc, #260]	; (800edfc <getBits.constprop.5+0x168>)
 800ecf8:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ecfa:	f898 0000 	ldrb.w	r0, [r8]
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d04b      	beq.n	800ed9a <getBits.constprop.5+0x106>
  return gInBuf[gInBufOfs++];
 800ed02:	f899 3000 	ldrb.w	r3, [r9]
  gInBufLeft--;
 800ed06:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800ed08:	4f3d      	ldr	r7, [pc, #244]	; (800ee00 <getBits.constprop.5+0x16c>)
 800ed0a:	1c5a      	adds	r2, r3, #1
  gInBufLeft--;
 800ed0c:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800ed0e:	5cfb      	ldrb	r3, [r7, r3]
 800ed10:	b2d2      	uxtb	r2, r2
  gInBufLeft--;
 800ed12:	f888 0000 	strb.w	r0, [r8]
  if ((FFCheck) && (c == 0xFF)) {
 800ed16:	2bff      	cmp	r3, #255	; 0xff
 800ed18:	b299      	uxth	r1, r3
  return gInBuf[gInBufOfs++];
 800ed1a:	f889 2000 	strb.w	r2, [r9]
  if ((FFCheck) && (c == 0xFF)) {
 800ed1e:	d143      	bne.n	800eda8 <getBits.constprop.5+0x114>
 800ed20:	9b01      	ldr	r3, [sp, #4]
 800ed22:	07db      	lsls	r3, r3, #31
 800ed24:	d540      	bpl.n	800eda8 <getBits.constprop.5+0x114>
  if (!gInBufLeft) {
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d14f      	bne.n	800edca <getBits.constprop.5+0x136>
 800ed2a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800ee0c <getBits.constprop.5+0x178>
 800ed2e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800ee10 <getBits.constprop.5+0x17c>
  gInBufLeft = 0;
 800ed32:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800ed34:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ed38:	f8db b000 	ldr.w	fp, [fp]
 800ed3c:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800ed3e:	f888 2000 	strb.w	r2, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ed42:	f8da 3000 	ldr.w	r3, [sl]
 800ed46:	4a2f      	ldr	r2, [pc, #188]	; (800ee04 <getBits.constprop.5+0x170>)
 800ed48:	482b      	ldr	r0, [pc, #172]	; (800edf8 <getBits.constprop.5+0x164>)
  gInBufOfs = 4;
 800ed4a:	f889 c000 	strb.w	ip, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ed4e:	47d8      	blx	fp
  if (status) {
 800ed50:	b108      	cbz	r0, 800ed56 <getBits.constprop.5+0xc2>
    gCallbackStatus = status;
 800ed52:	4b2a      	ldr	r3, [pc, #168]	; (800edfc <getBits.constprop.5+0x168>)
 800ed54:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ed56:	f898 0000 	ldrb.w	r0, [r8]
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d133      	bne.n	800edc6 <getBits.constprop.5+0x132>
      gTemFlag = ~gTemFlag;
 800ed5e:	492a      	ldr	r1, [pc, #168]	; (800ee08 <getBits.constprop.5+0x174>)
 800ed60:	f899 3000 	ldrb.w	r3, [r9]
 800ed64:	780a      	ldrb	r2, [r1, #0]
 800ed66:	43d2      	mvns	r2, r2
 800ed68:	b2d2      	uxtb	r2, r2
 800ed6a:	700a      	strb	r2, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ed6c:	2a00      	cmp	r2, #0
 800ed6e:	d03d      	beq.n	800edec <getBits.constprop.5+0x158>
 800ed70:	4602      	mov	r2, r0
 800ed72:	21ff      	movs	r1, #255	; 0xff
  gInBufOfs--;
 800ed74:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800ed78:	3b02      	subs	r3, #2
  gInBufLeft++;
 800ed7a:	1c90      	adds	r0, r2, #2
  gInBuf[gInBufOfs] = i;
 800ed7c:	f04f 0eff 	mov.w	lr, #255	; 0xff
  gInBufOfs--;
 800ed80:	b2da      	uxtb	r2, r3
  gInBuf[gInBufOfs] = i;
 800ed82:	fa5f fc8c 	uxtb.w	ip, ip
  gInBufLeft++;
 800ed86:	f888 0000 	strb.w	r0, [r8]
  gInBufOfs--;
 800ed8a:	f889 2000 	strb.w	r2, [r9]
  gInBuf[gInBufOfs] = i;
 800ed8e:	f807 100c 	strb.w	r1, [r7, ip]
  gInBufLeft++;
 800ed92:	4671      	mov	r1, lr
  gInBuf[gInBufOfs] = i;
 800ed94:	f807 e002 	strb.w	lr, [r7, r2]
 800ed98:	e006      	b.n	800eda8 <getBits.constprop.5+0x114>
      gTemFlag = ~gTemFlag;
 800ed9a:	4a1b      	ldr	r2, [pc, #108]	; (800ee08 <getBits.constprop.5+0x174>)
 800ed9c:	7813      	ldrb	r3, [r2, #0]
 800ed9e:	43db      	mvns	r3, r3
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800eda4:	b95b      	cbnz	r3, 800edbe <getBits.constprop.5+0x12a>
 800eda6:	21d9      	movs	r1, #217	; 0xd9
    gBitBuf |= getOctet(FFCheck);
 800eda8:	882b      	ldrh	r3, [r5, #0]
  return ret >> (16 - origBits);
 800edaa:	0a20      	lsrs	r0, r4, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800edac:	7832      	ldrb	r2, [r6, #0]
 800edae:	430b      	orrs	r3, r1
 800edb0:	f1c2 0208 	rsb	r2, r2, #8
 800edb4:	4093      	lsls	r3, r2
 800edb6:	802b      	strh	r3, [r5, #0]
}
 800edb8:	b003      	add	sp, #12
 800edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((FFCheck) && (c == 0xFF)) {
 800edbe:	9b01      	ldr	r3, [sp, #4]
 800edc0:	b97b      	cbnz	r3, 800ede2 <getBits.constprop.5+0x14e>
    if (n) {
 800edc2:	21ff      	movs	r1, #255	; 0xff
 800edc4:	e7f0      	b.n	800eda8 <getBits.constprop.5+0x114>
 800edc6:	f899 2000 	ldrb.w	r2, [r9]
  return gInBuf[gInBufOfs++];
 800edca:	1c53      	adds	r3, r2, #1
  gInBufLeft--;
 800edcc:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800edce:	5cb9      	ldrb	r1, [r7, r2]
 800edd0:	b2db      	uxtb	r3, r3
  gInBufLeft--;
 800edd2:	b2c2      	uxtb	r2, r0
  return gInBuf[gInBufOfs++];
 800edd4:	f889 3000 	strb.w	r3, [r9]
  gInBufLeft--;
 800edd8:	f888 2000 	strb.w	r2, [r8]
    if (n) {
 800eddc:	2900      	cmp	r1, #0
 800edde:	d0f0      	beq.n	800edc2 <getBits.constprop.5+0x12e>
 800ede0:	e7c8      	b.n	800ed74 <getBits.constprop.5+0xe0>
 800ede2:	4f07      	ldr	r7, [pc, #28]	; (800ee00 <getBits.constprop.5+0x16c>)
 800ede4:	e7a5      	b.n	800ed32 <getBits.constprop.5+0x9e>
 800ede6:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800ee14 <getBits.constprop.5+0x180>
 800edea:	e78a      	b.n	800ed02 <getBits.constprop.5+0x6e>
      return gTemFlag ? 0xFF : 0xD9;
 800edec:	21d9      	movs	r1, #217	; 0xd9
 800edee:	e7c1      	b.n	800ed74 <getBits.constprop.5+0xe0>
 800edf0:	2000c5dc 	.word	0x2000c5dc
 800edf4:	2000c5da 	.word	0x2000c5da
 800edf8:	2000c9e8 	.word	0x2000c9e8
 800edfc:	2000c5dd 	.word	0x2000c5dd
 800ee00:	2000c9e4 	.word	0x2000c9e4
 800ee04:	2000cae4 	.word	0x2000cae4
 800ee08:	2000cf0b 	.word	0x2000cf0b
 800ee0c:	2000cf10 	.word	0x2000cf10
 800ee10:	2000cf14 	.word	0x2000cf14
 800ee14:	2000cae5 	.word	0x2000cae5

0800ee18 <processMarkers>:
static uint8 processMarkers(uint8 *pMarker) {
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	f8df b34c 	ldr.w	fp, [pc, #844]	; 800f16c <processMarkers+0x354>
 800ee20:	b08b      	sub	sp, #44	; 0x2c
 800ee22:	f8df 934c 	ldr.w	r9, [pc, #844]	; 800f170 <processMarkers+0x358>
 800ee26:	f8bb 8000 	ldrh.w	r8, [fp]
 800ee2a:	f899 3000 	ldrb.w	r3, [r9]
  if (!gInBufLeft) {
 800ee2e:	f8df a344 	ldr.w	sl, [pc, #836]	; 800f174 <processMarkers+0x35c>
static uint8 processMarkers(uint8 *pMarker) {
 800ee32:	9005      	str	r0, [sp, #20]
  if (gBitsLeft < numBits) {
 800ee34:	2b07      	cmp	r3, #7
 800ee36:	4644      	mov	r4, r8
 800ee38:	d90d      	bls.n	800ee56 <processMarkers+0x3e>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800ee3a:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800ee3c:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800ee40:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800ee42:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800ee46:	f889 3000 	strb.w	r3, [r9]
  return ret >> (16 - origBits);
 800ee4a:	1224      	asrs	r4, r4, #8
    } while (c != 0xFF);
 800ee4c:	2cff      	cmp	r4, #255	; 0xff
 800ee4e:	d046      	beq.n	800eede <processMarkers+0xc6>
  if (gBitsLeft < numBits) {
 800ee50:	2b07      	cmp	r3, #7
 800ee52:	4644      	mov	r4, r8
 800ee54:	d8f1      	bhi.n	800ee3a <processMarkers+0x22>
    gBitBuf <<= gBitsLeft;
 800ee56:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800ee5a:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800ee5e:	fa1f f288 	uxth.w	r2, r8
 800ee62:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800ee66:	b9d1      	cbnz	r1, 800ee9e <processMarkers+0x86>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee68:	4bb6      	ldr	r3, [pc, #728]	; (800f144 <processMarkers+0x32c>)
  gInBufOfs = 4;
 800ee6a:	f04f 0c04 	mov.w	ip, #4
 800ee6e:	4fb6      	ldr	r7, [pc, #728]	; (800f148 <processMarkers+0x330>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee70:	4652      	mov	r2, sl
 800ee72:	681d      	ldr	r5, [r3, #0]
 800ee74:	4bb5      	ldr	r3, [pc, #724]	; (800f14c <processMarkers+0x334>)
  gInBufLeft = 0;
 800ee76:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee7a:	21fc      	movs	r1, #252	; 0xfc
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	48b4      	ldr	r0, [pc, #720]	; (800f150 <processMarkers+0x338>)
  gInBufOfs = 4;
 800ee80:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ee84:	47a8      	blx	r5
  if (status) {
 800ee86:	b108      	cbz	r0, 800ee8c <processMarkers+0x74>
    gCallbackStatus = status;
 800ee88:	4bb2      	ldr	r3, [pc, #712]	; (800f154 <processMarkers+0x33c>)
 800ee8a:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ee8c:	f89a 1000 	ldrb.w	r1, [sl]
 800ee90:	2900      	cmp	r1, #0
 800ee92:	f000 8089 	beq.w	800efa8 <processMarkers+0x190>
 800ee96:	f8bb 2000 	ldrh.w	r2, [fp]
 800ee9a:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800ee9e:	4faa      	ldr	r7, [pc, #680]	; (800f148 <processMarkers+0x330>)
  gInBufLeft--;
 800eea0:	3901      	subs	r1, #1
 800eea2:	4ead      	ldr	r6, [pc, #692]	; (800f158 <processMarkers+0x340>)
  return gInBuf[gInBufOfs++];
 800eea4:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800eea6:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800eeaa:	1c45      	adds	r5, r0, #1
 800eeac:	f816 8000 	ldrb.w	r8, [r6, r0]
 800eeb0:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800eeb2:	ea48 0802 	orr.w	r8, r8, r2
 800eeb6:	f1c3 0208 	rsb	r2, r3, #8
 800eeba:	fa08 f802 	lsl.w	r8, r8, r2
 800eebe:	fa1f f888 	uxth.w	r8, r8
 800eec2:	e7c2      	b.n	800ee4a <processMarkers+0x32>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800eec4:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800eec6:	ea4f 2808 	mov.w	r8, r8, lsl #8
  return ret >> (16 - origBits);
 800eeca:	1224      	asrs	r4, r4, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800eecc:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800eece:	fa1f f888 	uxth.w	r8, r8
    } while (c == 0xFF);
 800eed2:	2cff      	cmp	r4, #255	; 0xff
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800eed4:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800eed8:	f8ab 8000 	strh.w	r8, [fp]
    } while (c == 0xFF);
 800eedc:	d13b      	bne.n	800ef56 <processMarkers+0x13e>
  if (gBitsLeft < numBits) {
 800eede:	2b07      	cmp	r3, #7
 800eee0:	4644      	mov	r4, r8
 800eee2:	d8ef      	bhi.n	800eec4 <processMarkers+0xac>
    gBitBuf <<= gBitsLeft;
 800eee4:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800eee8:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800eeec:	fa1f f288 	uxth.w	r2, r8
 800eef0:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800eef4:	b9c1      	cbnz	r1, 800ef28 <processMarkers+0x110>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eef6:	4b93      	ldr	r3, [pc, #588]	; (800f144 <processMarkers+0x32c>)
  gInBufOfs = 4;
 800eef8:	f04f 0c04 	mov.w	ip, #4
 800eefc:	4f92      	ldr	r7, [pc, #584]	; (800f148 <processMarkers+0x330>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800eefe:	4652      	mov	r2, sl
 800ef00:	681d      	ldr	r5, [r3, #0]
 800ef02:	4b92      	ldr	r3, [pc, #584]	; (800f14c <processMarkers+0x334>)
  gInBufLeft = 0;
 800ef04:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ef08:	21fc      	movs	r1, #252	; 0xfc
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4890      	ldr	r0, [pc, #576]	; (800f150 <processMarkers+0x338>)
  gInBufOfs = 4;
 800ef0e:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800ef12:	47a8      	blx	r5
  if (status) {
 800ef14:	b108      	cbz	r0, 800ef1a <processMarkers+0x102>
    gCallbackStatus = status;
 800ef16:	4b8f      	ldr	r3, [pc, #572]	; (800f154 <processMarkers+0x33c>)
 800ef18:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800ef1a:	f89a 1000 	ldrb.w	r1, [sl]
 800ef1e:	b399      	cbz	r1, 800ef88 <processMarkers+0x170>
 800ef20:	f8bb 2000 	ldrh.w	r2, [fp]
 800ef24:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800ef28:	4f87      	ldr	r7, [pc, #540]	; (800f148 <processMarkers+0x330>)
  gInBufLeft--;
 800ef2a:	3901      	subs	r1, #1
 800ef2c:	4e8a      	ldr	r6, [pc, #552]	; (800f158 <processMarkers+0x340>)
  return gInBuf[gInBufOfs++];
 800ef2e:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800ef30:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800ef34:	1c45      	adds	r5, r0, #1
 800ef36:	f816 8000 	ldrb.w	r8, [r6, r0]
 800ef3a:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800ef3c:	ea48 0802 	orr.w	r8, r8, r2
 800ef40:	f1c3 0208 	rsb	r2, r3, #8
  return ret >> (16 - origBits);
 800ef44:	1224      	asrs	r4, r4, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800ef46:	fa08 f802 	lsl.w	r8, r8, r2
    } while (c == 0xFF);
 800ef4a:	2cff      	cmp	r4, #255	; 0xff
    gBitBuf <<= (numBits - gBitsLeft);
 800ef4c:	fa1f f888 	uxth.w	r8, r8
 800ef50:	f8ab 8000 	strh.w	r8, [fp]
    } while (c == 0xFF);
 800ef54:	d0c3      	beq.n	800eede <processMarkers+0xc6>
      c = (uint8)getBits1(8);
 800ef56:	b2e2      	uxtb	r2, r4
  } while (c == 0);
 800ef58:	2c00      	cmp	r4, #0
 800ef5a:	f43f af6b 	beq.w	800ee34 <processMarkers+0x1c>
    switch (c) {
 800ef5e:	2acb      	cmp	r2, #203	; 0xcb
 800ef60:	d932      	bls.n	800efc8 <processMarkers+0x1b0>
 800ef62:	2ad7      	cmp	r2, #215	; 0xd7
 800ef64:	d93c      	bls.n	800efe0 <processMarkers+0x1c8>
 800ef66:	2adb      	cmp	r2, #219	; 0xdb
 800ef68:	d042      	beq.n	800eff0 <processMarkers+0x1d8>
 800ef6a:	f0c0 8095 	bcc.w	800f098 <processMarkers+0x280>
 800ef6e:	2add      	cmp	r2, #221	; 0xdd
 800ef70:	f040 819b 	bne.w	800f2aa <processMarkers+0x492>
  return getBits(numBits, 0);
 800ef74:	f7ff fdea 	bl	800eb4c <getBits.constprop.4>
  if (getBits1(16) != 4)
 800ef78:	2804      	cmp	r0, #4
 800ef7a:	f000 84b0 	beq.w	800f8de <processMarkers+0xac6>
 800ef7e:	f8bb 8000 	ldrh.w	r8, [fp]
 800ef82:	f899 3000 	ldrb.w	r3, [r9]
 800ef86:	e755      	b.n	800ee34 <processMarkers+0x1c>
      gTemFlag = ~gTemFlag;
 800ef88:	4874      	ldr	r0, [pc, #464]	; (800f15c <processMarkers+0x344>)
 800ef8a:	f8bb 2000 	ldrh.w	r2, [fp]
 800ef8e:	7801      	ldrb	r1, [r0, #0]
 800ef90:	f899 3000 	ldrb.w	r3, [r9]
 800ef94:	43c9      	mvns	r1, r1
 800ef96:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800ef98:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800ef9a:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800ef9c:	bf14      	ite	ne
 800ef9e:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800efa2:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800efa6:	e7c9      	b.n	800ef3c <processMarkers+0x124>
      gTemFlag = ~gTemFlag;
 800efa8:	486c      	ldr	r0, [pc, #432]	; (800f15c <processMarkers+0x344>)
 800efaa:	f8bb 2000 	ldrh.w	r2, [fp]
 800efae:	7801      	ldrb	r1, [r0, #0]
 800efb0:	f899 3000 	ldrb.w	r3, [r9]
 800efb4:	43c9      	mvns	r1, r1
 800efb6:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800efb8:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800efba:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800efbc:	bf14      	ite	ne
 800efbe:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800efc2:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800efc6:	e774      	b.n	800eeb2 <processMarkers+0x9a>
    switch (c) {
 800efc8:	2ac9      	cmp	r2, #201	; 0xc9
 800efca:	d265      	bcs.n	800f098 <processMarkers+0x280>
 800efcc:	2ac4      	cmp	r2, #196	; 0xc4
 800efce:	f000 817e 	beq.w	800f2ce <processMarkers+0x4b6>
 800efd2:	d95a      	bls.n	800f08a <processMarkers+0x272>
 800efd4:	2ac7      	cmp	r2, #199	; 0xc7
 800efd6:	d95f      	bls.n	800f098 <processMarkers+0x280>
      return PJPG_UNEXPECTED_MARKER;
 800efd8:	2012      	movs	r0, #18
}
 800efda:	b00b      	add	sp, #44	; 0x2c
 800efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (c) {
 800efe0:	2ad0      	cmp	r2, #208	; 0xd0
 800efe2:	d2f9      	bcs.n	800efd8 <processMarkers+0x1c0>
 800efe4:	2acc      	cmp	r2, #204	; 0xcc
 800efe6:	d157      	bne.n	800f098 <processMarkers+0x280>
      return PJPG_NO_ARITHMITIC_SUPPORT;
 800efe8:	2011      	movs	r0, #17
}
 800efea:	b00b      	add	sp, #44	; 0x2c
 800efec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return getBits(numBits, 0);
 800eff0:	f7ff fdac 	bl	800eb4c <getBits.constprop.4>
  if (left < 2)
 800eff4:	2801      	cmp	r0, #1
 800eff6:	d9c2      	bls.n	800ef7e <processMarkers+0x166>
  left -= 2;
 800eff8:	3802      	subs	r0, #2
 800effa:	b283      	uxth	r3, r0
 800effc:	9303      	str	r3, [sp, #12]
  while (left) {
 800effe:	2b00      	cmp	r3, #0
 800f000:	d0bd      	beq.n	800ef7e <processMarkers+0x166>
 800f002:	f899 3000 	ldrb.w	r3, [r9]
 800f006:	f8bb 8000 	ldrh.w	r8, [fp]
  if (gBitsLeft < numBits) {
 800f00a:	2b07      	cmp	r3, #7
 800f00c:	4644      	mov	r4, r8
 800f00e:	f240 8118 	bls.w	800f242 <processMarkers+0x42a>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f012:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800f014:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f018:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800f01a:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f01e:	f889 3000 	strb.w	r3, [r9]
    uint8 n = (uint8)getBits1(8);
 800f022:	0a22      	lsrs	r2, r4, #8
    n &= 0x0F;
 800f024:	f002 070f 	and.w	r7, r2, #15
    uint8 prec = n >> 4;
 800f028:	0912      	lsrs	r2, r2, #4
    if (n > 1)
 800f02a:	2f01      	cmp	r7, #1
    uint8 prec = n >> 4;
 800f02c:	9201      	str	r2, [sp, #4]
    if (n > 1)
 800f02e:	f63f af01 	bhi.w	800ee34 <processMarkers+0x1c>
    gValidQuantTables |= (n ? 2 : 1);
 800f032:	2f00      	cmp	r7, #0
 800f034:	494a      	ldr	r1, [pc, #296]	; (800f160 <processMarkers+0x348>)
 800f036:	f04f 0600 	mov.w	r6, #0
 800f03a:	9702      	str	r7, [sp, #8]
 800f03c:	7808      	ldrb	r0, [r1, #0]
 800f03e:	bf0c      	ite	eq
 800f040:	2201      	moveq	r2, #1
 800f042:	2202      	movne	r2, #2
 800f044:	4302      	orrs	r2, r0
 800f046:	700a      	strb	r2, [r1, #0]
 800f048:	e009      	b.n	800f05e <processMarkers+0x246>
        gQuant1[i] = (int16)temp;
 800f04a:	4946      	ldr	r1, [pc, #280]	; (800f164 <processMarkers+0x34c>)
 800f04c:	f8bb 8000 	ldrh.w	r8, [fp]
        gQuant0[i] = (int16)temp;
 800f050:	538c      	strh	r4, [r1, r6]
 800f052:	3602      	adds	r6, #2
 800f054:	f899 3000 	ldrb.w	r3, [r9]
    for (i = 0; i < 64; i++) {
 800f058:	2e80      	cmp	r6, #128	; 0x80
 800f05a:	f000 80cf 	beq.w	800f1fc <processMarkers+0x3e4>
  if (gBitsLeft < numBits) {
 800f05e:	2b07      	cmp	r3, #7
 800f060:	d932      	bls.n	800f0c8 <processMarkers+0x2b0>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f062:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800f064:	ea4f 2408 	mov.w	r4, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f068:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800f06a:	b2a4      	uxth	r4, r4
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f06c:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800f070:	f8ab 4000 	strh.w	r4, [fp]
      if (prec)
 800f074:	9a01      	ldr	r2, [sp, #4]
  return ret >> (16 - origBits);
 800f076:	ea4f 2818 	mov.w	r8, r8, lsr #8
      if (prec)
 800f07a:	b99a      	cbnz	r2, 800f0a4 <processMarkers+0x28c>
      if (n)
 800f07c:	9b02      	ldr	r3, [sp, #8]
 800f07e:	fa0f f488 	sxth.w	r4, r8
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e1      	bne.n	800f04a <processMarkers+0x232>
        gQuant0[i] = (int16)temp;
 800f086:	4938      	ldr	r1, [pc, #224]	; (800f168 <processMarkers+0x350>)
 800f088:	e7e0      	b.n	800f04c <processMarkers+0x234>
    switch (c) {
 800f08a:	2a01      	cmp	r2, #1
 800f08c:	d0a4      	beq.n	800efd8 <processMarkers+0x1c0>
 800f08e:	f0c0 810c 	bcc.w	800f2aa <processMarkers+0x492>
 800f092:	2ac0      	cmp	r2, #192	; 0xc0
 800f094:	f0c0 8109 	bcc.w	800f2aa <processMarkers+0x492>
      *pMarker = c;
 800f098:	9b05      	ldr	r3, [sp, #20]
      return 0;
 800f09a:	2000      	movs	r0, #0
      *pMarker = c;
 800f09c:	701a      	strb	r2, [r3, #0]
}
 800f09e:	b00b      	add	sp, #44	; 0x2c
 800f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = (temp << 8) + getBits1(8);
 800f0a4:	ea4f 2808 	mov.w	r8, r8, lsl #8
  if (gBitsLeft < numBits) {
 800f0a8:	2b07      	cmp	r3, #7
        temp = (temp << 8) + getBits1(8);
 800f0aa:	fa1f f888 	uxth.w	r8, r8
  if (gBitsLeft < numBits) {
 800f0ae:	d963      	bls.n	800f178 <processMarkers+0x360>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f0b0:	f1a3 0208 	sub.w	r2, r3, #8
    gBitBuf <<= numBits;
 800f0b4:	0223      	lsls	r3, r4, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f0b6:	f889 2000 	strb.w	r2, [r9]
    gBitBuf <<= numBits;
 800f0ba:	f8ab 3000 	strh.w	r3, [fp]
        temp = (temp << 8) + getBits1(8);
 800f0be:	eb08 2814 	add.w	r8, r8, r4, lsr #8
 800f0c2:	fa1f f888 	uxth.w	r8, r8
 800f0c6:	e7d9      	b.n	800f07c <processMarkers+0x264>
    gBitBuf <<= gBitsLeft;
 800f0c8:	fa08 f203 	lsl.w	r2, r8, r3
  if (!gInBufLeft) {
 800f0cc:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800f0d6:	b9b1      	cbnz	r1, 800f106 <processMarkers+0x2ee>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f0d8:	4b1a      	ldr	r3, [pc, #104]	; (800f144 <processMarkers+0x32c>)
  gInBufOfs = 4;
 800f0da:	2504      	movs	r5, #4
 800f0dc:	4f1a      	ldr	r7, [pc, #104]	; (800f148 <processMarkers+0x330>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f0de:	4652      	mov	r2, sl
 800f0e0:	681c      	ldr	r4, [r3, #0]
 800f0e2:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <processMarkers+0x334>)
  gInBufLeft = 0;
 800f0e4:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f0e8:	21fc      	movs	r1, #252	; 0xfc
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4818      	ldr	r0, [pc, #96]	; (800f150 <processMarkers+0x338>)
  gInBufOfs = 4;
 800f0ee:	703d      	strb	r5, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f0f0:	47a0      	blx	r4
  if (status) {
 800f0f2:	b108      	cbz	r0, 800f0f8 <processMarkers+0x2e0>
    gCallbackStatus = status;
 800f0f4:	4b17      	ldr	r3, [pc, #92]	; (800f154 <processMarkers+0x33c>)
 800f0f6:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f0f8:	f89a 1000 	ldrb.w	r1, [sl]
 800f0fc:	b1a1      	cbz	r1, 800f128 <processMarkers+0x310>
 800f0fe:	f8bb 2000 	ldrh.w	r2, [fp]
 800f102:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f106:	4f10      	ldr	r7, [pc, #64]	; (800f148 <processMarkers+0x330>)
  gInBufLeft--;
 800f108:	3901      	subs	r1, #1
 800f10a:	4c13      	ldr	r4, [pc, #76]	; (800f158 <processMarkers+0x340>)
  return gInBuf[gInBufOfs++];
 800f10c:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800f10e:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800f112:	1c45      	adds	r5, r0, #1
 800f114:	5c24      	ldrb	r4, [r4, r0]
 800f116:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800f118:	4314      	orrs	r4, r2
 800f11a:	f1c3 0208 	rsb	r2, r3, #8
 800f11e:	4094      	lsls	r4, r2
 800f120:	b2a4      	uxth	r4, r4
 800f122:	f8ab 4000 	strh.w	r4, [fp]
 800f126:	e7a5      	b.n	800f074 <processMarkers+0x25c>
      gTemFlag = ~gTemFlag;
 800f128:	480c      	ldr	r0, [pc, #48]	; (800f15c <processMarkers+0x344>)
 800f12a:	f8bb 2000 	ldrh.w	r2, [fp]
 800f12e:	7801      	ldrb	r1, [r0, #0]
 800f130:	f899 3000 	ldrb.w	r3, [r9]
 800f134:	43c9      	mvns	r1, r1
 800f136:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800f138:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800f13a:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f13c:	bf14      	ite	ne
 800f13e:	24ff      	movne	r4, #255	; 0xff
 800f140:	24d9      	moveq	r4, #217	; 0xd9
 800f142:	e7e9      	b.n	800f118 <processMarkers+0x300>
 800f144:	2000cf14 	.word	0x2000cf14
 800f148:	2000cae5 	.word	0x2000cae5
 800f14c:	2000cf10 	.word	0x2000cf10
 800f150:	2000c9e8 	.word	0x2000c9e8
 800f154:	2000c5dd 	.word	0x2000c5dd
 800f158:	2000c9e4 	.word	0x2000c9e4
 800f15c:	2000cf0b 	.word	0x2000cf0b
 800f160:	2000cf0d 	.word	0x2000cf0d
 800f164:	2000ce84 	.word	0x2000ce84
 800f168:	2000ce04 	.word	0x2000ce04
 800f16c:	2000c5da 	.word	0x2000c5da
 800f170:	2000c5dc 	.word	0x2000c5dc
 800f174:	2000cae4 	.word	0x2000cae4
    gBitBuf <<= gBitsLeft;
 800f178:	fa04 f003 	lsl.w	r0, r4, r3
  if (!gInBufLeft) {
 800f17c:	f89a 2000 	ldrb.w	r2, [sl]
    gBitBuf <<= gBitsLeft;
 800f180:	b280      	uxth	r0, r0
 800f182:	f8ab 0000 	strh.w	r0, [fp]
  if (!gInBufLeft) {
 800f186:	b9c2      	cbnz	r2, 800f1ba <processMarkers+0x3a2>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f188:	4baa      	ldr	r3, [pc, #680]	; (800f434 <processMarkers+0x61c>)
  gInBufOfs = 4;
 800f18a:	f04f 0c04 	mov.w	ip, #4
 800f18e:	4faa      	ldr	r7, [pc, #680]	; (800f438 <processMarkers+0x620>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f190:	21fc      	movs	r1, #252	; 0xfc
 800f192:	681d      	ldr	r5, [r3, #0]
 800f194:	4ba9      	ldr	r3, [pc, #676]	; (800f43c <processMarkers+0x624>)
  gInBufLeft = 0;
 800f196:	f88a 2000 	strb.w	r2, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f19a:	4652      	mov	r2, sl
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	48a8      	ldr	r0, [pc, #672]	; (800f440 <processMarkers+0x628>)
  gInBufOfs = 4;
 800f1a0:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f1a4:	47a8      	blx	r5
  if (status) {
 800f1a6:	b108      	cbz	r0, 800f1ac <processMarkers+0x394>
    gCallbackStatus = status;
 800f1a8:	4ba6      	ldr	r3, [pc, #664]	; (800f444 <processMarkers+0x62c>)
 800f1aa:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f1ac:	f89a 2000 	ldrb.w	r2, [sl]
 800f1b0:	b1b2      	cbz	r2, 800f1e0 <processMarkers+0x3c8>
 800f1b2:	f8bb 0000 	ldrh.w	r0, [fp]
 800f1b6:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f1ba:	4f9f      	ldr	r7, [pc, #636]	; (800f438 <processMarkers+0x620>)
  gInBufLeft--;
 800f1bc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800f1c0:	4aa1      	ldr	r2, [pc, #644]	; (800f448 <processMarkers+0x630>)
  return gInBuf[gInBufOfs++];
 800f1c2:	7839      	ldrb	r1, [r7, #0]
  gInBufLeft--;
 800f1c4:	f88a c000 	strb.w	ip, [sl]
  return gInBuf[gInBufOfs++];
 800f1c8:	1c4d      	adds	r5, r1, #1
 800f1ca:	5c51      	ldrb	r1, [r2, r1]
 800f1cc:	703d      	strb	r5, [r7, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800f1ce:	ea41 0200 	orr.w	r2, r1, r0
 800f1d2:	f1c3 0308 	rsb	r3, r3, #8
 800f1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1da:	f8ab 3000 	strh.w	r3, [fp]
 800f1de:	e76e      	b.n	800f0be <processMarkers+0x2a6>
      gTemFlag = ~gTemFlag;
 800f1e0:	499a      	ldr	r1, [pc, #616]	; (800f44c <processMarkers+0x634>)
 800f1e2:	f8bb 0000 	ldrh.w	r0, [fp]
 800f1e6:	780a      	ldrb	r2, [r1, #0]
 800f1e8:	f899 3000 	ldrb.w	r3, [r9]
 800f1ec:	43d2      	mvns	r2, r2
 800f1ee:	b2d2      	uxtb	r2, r2
      return gTemFlag ? 0xFF : 0xD9;
 800f1f0:	2a00      	cmp	r2, #0
      gTemFlag = ~gTemFlag;
 800f1f2:	700a      	strb	r2, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f1f4:	bf14      	ite	ne
 800f1f6:	21ff      	movne	r1, #255	; 0xff
 800f1f8:	21d9      	moveq	r1, #217	; 0xd9
 800f1fa:	e7e8      	b.n	800f1ce <processMarkers+0x3b6>
 800f1fc:	4894      	ldr	r0, [pc, #592]	; (800f450 <processMarkers+0x638>)
 800f1fe:	3902      	subs	r1, #2
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800f200:	2504      	movs	r5, #4
 800f202:	f100 0440 	add.w	r4, r0, #64	; 0x40
 800f206:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800f20a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  for (i = 0; i < 64; i++) {
 800f20e:	4284      	cmp	r4, r0
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800f210:	fb12 5206 	smlabb	r2, r2, r6, r5
                                    PJPG_DCT_SCALE_BITS - 1))) >>
 800f214:	ea4f 02e2 	mov.w	r2, r2, asr #3
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 800f218:	800a      	strh	r2, [r1, #0]
  for (i = 0; i < 64; i++) {
 800f21a:	d1f4      	bne.n	800f206 <processMarkers+0x3ee>
    totalRead = 64 + 1;
 800f21c:	9a01      	ldr	r2, [sp, #4]
    if (left < totalRead)
 800f21e:	9903      	ldr	r1, [sp, #12]
    totalRead = 64 + 1;
 800f220:	2a00      	cmp	r2, #0
 800f222:	bf14      	ite	ne
 800f224:	2281      	movne	r2, #129	; 0x81
 800f226:	2241      	moveq	r2, #65	; 0x41
    if (left < totalRead)
 800f228:	4291      	cmp	r1, r2
 800f22a:	f4ff ae03 	bcc.w	800ee34 <processMarkers+0x1c>
    left = (uint16)(left - totalRead);
 800f22e:	1a8a      	subs	r2, r1, r2
 800f230:	b292      	uxth	r2, r2
 800f232:	9203      	str	r2, [sp, #12]
  while (left) {
 800f234:	2a00      	cmp	r2, #0
 800f236:	f43f adfd 	beq.w	800ee34 <processMarkers+0x1c>
  if (gBitsLeft < numBits) {
 800f23a:	2b07      	cmp	r3, #7
 800f23c:	4644      	mov	r4, r8
 800f23e:	f63f aee8 	bhi.w	800f012 <processMarkers+0x1fa>
    gBitBuf <<= gBitsLeft;
 800f242:	fa08 f203 	lsl.w	r2, r8, r3
  if (!gInBufLeft) {
 800f246:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800f24a:	b292      	uxth	r2, r2
 800f24c:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800f250:	b9c1      	cbnz	r1, 800f284 <processMarkers+0x46c>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f252:	4b78      	ldr	r3, [pc, #480]	; (800f434 <processMarkers+0x61c>)
  gInBufOfs = 4;
 800f254:	2604      	movs	r6, #4
 800f256:	4f78      	ldr	r7, [pc, #480]	; (800f438 <processMarkers+0x620>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f258:	4652      	mov	r2, sl
 800f25a:	681d      	ldr	r5, [r3, #0]
 800f25c:	4b77      	ldr	r3, [pc, #476]	; (800f43c <processMarkers+0x624>)
  gInBufLeft = 0;
 800f25e:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f262:	21fc      	movs	r1, #252	; 0xfc
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4876      	ldr	r0, [pc, #472]	; (800f440 <processMarkers+0x628>)
  gInBufOfs = 4;
 800f268:	703e      	strb	r6, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f26a:	47a8      	blx	r5
  if (status) {
 800f26c:	b108      	cbz	r0, 800f272 <processMarkers+0x45a>
    gCallbackStatus = status;
 800f26e:	4b75      	ldr	r3, [pc, #468]	; (800f444 <processMarkers+0x62c>)
 800f270:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f272:	f89a 1000 	ldrb.w	r1, [sl]
 800f276:	2900      	cmp	r1, #0
 800f278:	f000 8311 	beq.w	800f89e <processMarkers+0xa86>
 800f27c:	f8bb 2000 	ldrh.w	r2, [fp]
 800f280:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f284:	4e6c      	ldr	r6, [pc, #432]	; (800f438 <processMarkers+0x620>)
  gInBufLeft--;
 800f286:	3901      	subs	r1, #1
 800f288:	4f6f      	ldr	r7, [pc, #444]	; (800f448 <processMarkers+0x630>)
  return gInBuf[gInBufOfs++];
 800f28a:	7830      	ldrb	r0, [r6, #0]
  gInBufLeft--;
 800f28c:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800f290:	1c45      	adds	r5, r0, #1
 800f292:	f817 8000 	ldrb.w	r8, [r7, r0]
 800f296:	7035      	strb	r5, [r6, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800f298:	ea48 0802 	orr.w	r8, r8, r2
 800f29c:	f1c3 0208 	rsb	r2, r3, #8
 800f2a0:	fa08 f802 	lsl.w	r8, r8, r2
 800f2a4:	fa1f f888 	uxth.w	r8, r8
 800f2a8:	e6bb      	b.n	800f022 <processMarkers+0x20a>
  return getBits(numBits, 0);
 800f2aa:	f7ff fc4f 	bl	800eb4c <getBits.constprop.4>
  if (left < 2)
 800f2ae:	2801      	cmp	r0, #1
 800f2b0:	f67f ae65 	bls.w	800ef7e <processMarkers+0x166>
  left -= 2;
 800f2b4:	3802      	subs	r0, #2
 800f2b6:	b284      	uxth	r4, r0
  while (left) {
 800f2b8:	2c00      	cmp	r4, #0
 800f2ba:	f43f ae60 	beq.w	800ef7e <processMarkers+0x166>
    left--;
 800f2be:	3c01      	subs	r4, #1
  return getBits(numBits, 0);
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	f7ff fce7 	bl	800ec94 <getBits.constprop.5>
    left--;
 800f2c6:	b2a4      	uxth	r4, r4
  while (left) {
 800f2c8:	2c00      	cmp	r4, #0
 800f2ca:	d1f8      	bne.n	800f2be <processMarkers+0x4a6>
 800f2cc:	e657      	b.n	800ef7e <processMarkers+0x166>
  return getBits(numBits, 0);
 800f2ce:	f7ff fc3d 	bl	800eb4c <getBits.constprop.4>
  if (left < 2)
 800f2d2:	2801      	cmp	r0, #1
 800f2d4:	f67f ae53 	bls.w	800ef7e <processMarkers+0x166>
  left -= 2;
 800f2d8:	3802      	subs	r0, #2
 800f2da:	b283      	uxth	r3, r0
 800f2dc:	9302      	str	r3, [sp, #8]
  while (left) {
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f43f ae4d 	beq.w	800ef7e <processMarkers+0x166>
  if (gBitsLeft < numBits) {
 800f2e4:	f899 3000 	ldrb.w	r3, [r9]
 800f2e8:	f8bb 4000 	ldrh.w	r4, [fp]
 800f2ec:	2b07      	cmp	r3, #7
 800f2ee:	f240 8212 	bls.w	800f716 <processMarkers+0x8fe>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f2f2:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800f2f4:	ea4f 2804 	mov.w	r8, r4, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f2f8:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800f2fa:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f2fe:	f889 3000 	strb.w	r3, [r9]
  return ret >> (16 - origBits);
 800f302:	1224      	asrs	r4, r4, #8
    index = (uint8)getBits1(8);
 800f304:	b2e2      	uxtb	r2, r4
    if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
 800f306:	f002 010f 	and.w	r1, r2, #15
 800f30a:	2901      	cmp	r1, #1
 800f30c:	f63f ad92 	bhi.w	800ee34 <processMarkers+0x1c>
 800f310:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800f314:	2910      	cmp	r1, #16
 800f316:	f63f ad8d 	bhi.w	800ee34 <processMarkers+0x1c>
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800f31a:	08d2      	lsrs	r2, r2, #3
 800f31c:	f004 0401 	and.w	r4, r4, #1
    gValidHuffTables |= (1 << tableIndex);
 800f320:	2001      	movs	r0, #1
 800f322:	494c      	ldr	r1, [pc, #304]	; (800f454 <processMarkers+0x63c>)
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800f324:	f002 0702 	and.w	r7, r2, #2
 800f328:	4d4b      	ldr	r5, [pc, #300]	; (800f458 <processMarkers+0x640>)
    gValidHuffTables |= (1 << tableIndex);
 800f32a:	780a      	ldrb	r2, [r1, #0]
 800f32c:	f10d 0617 	add.w	r6, sp, #23
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800f330:	433c      	orrs	r4, r7
 800f332:	4627      	mov	r7, r4
 800f334:	4c49      	ldr	r4, [pc, #292]	; (800f45c <processMarkers+0x644>)
    gValidHuffTables |= (1 << tableIndex);
 800f336:	9703      	str	r7, [sp, #12]
 800f338:	fa00 f707 	lsl.w	r7, r0, r7
    tableIndex = ((index >> 3) & 2) + (index & 1);
 800f33c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    gValidHuffTables |= (1 << tableIndex);
 800f340:	433a      	orrs	r2, r7
 800f342:	f855 7020 	ldr.w	r7, [r5, r0, lsl #2]
    count = 0;
 800f346:	2500      	movs	r5, #0
 800f348:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    gValidHuffTables |= (1 << tableIndex);
 800f34c:	700a      	strb	r2, [r1, #0]
 800f34e:	9001      	str	r0, [sp, #4]
    count = 0;
 800f350:	9704      	str	r7, [sp, #16]
 800f352:	e012      	b.n	800f37a <processMarkers+0x562>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f354:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800f356:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f35a:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800f35c:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f360:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800f364:	f8ab 8000 	strh.w	r8, [fp]
  return ret >> (16 - origBits);
 800f368:	1224      	asrs	r4, r4, #8
    for (i = 0; i <= 15; i++) {
 800f36a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
      count = (uint16)(count + n);
 800f36e:	4425      	add	r5, r4
      uint8 n = (uint8)getBits1(8);
 800f370:	f806 4f01 	strb.w	r4, [r6, #1]!
    for (i = 0; i <= 15; i++) {
 800f374:	42b2      	cmp	r2, r6
      count = (uint16)(count + n);
 800f376:	b2ad      	uxth	r5, r5
    for (i = 0; i <= 15; i++) {
 800f378:	d04d      	beq.n	800f416 <processMarkers+0x5fe>
  if (gBitsLeft < numBits) {
 800f37a:	2b07      	cmp	r3, #7
 800f37c:	4644      	mov	r4, r8
 800f37e:	d8e9      	bhi.n	800f354 <processMarkers+0x53c>
    gBitBuf <<= gBitsLeft;
 800f380:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800f384:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800f388:	fa1f f288 	uxth.w	r2, r8
 800f38c:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800f390:	b9c9      	cbnz	r1, 800f3c6 <processMarkers+0x5ae>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f392:	4b28      	ldr	r3, [pc, #160]	; (800f434 <processMarkers+0x61c>)
  gInBufOfs = 4;
 800f394:	f04f 0c04 	mov.w	ip, #4
 800f398:	4f27      	ldr	r7, [pc, #156]	; (800f438 <processMarkers+0x620>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f39a:	4652      	mov	r2, sl
 800f39c:	f8d3 8000 	ldr.w	r8, [r3]
 800f3a0:	4b26      	ldr	r3, [pc, #152]	; (800f43c <processMarkers+0x624>)
  gInBufLeft = 0;
 800f3a2:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f3a6:	21fc      	movs	r1, #252	; 0xfc
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	4825      	ldr	r0, [pc, #148]	; (800f440 <processMarkers+0x628>)
  gInBufOfs = 4;
 800f3ac:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f3b0:	47c0      	blx	r8
  if (status) {
 800f3b2:	b108      	cbz	r0, 800f3b8 <processMarkers+0x5a0>
    gCallbackStatus = status;
 800f3b4:	4b23      	ldr	r3, [pc, #140]	; (800f444 <processMarkers+0x62c>)
 800f3b6:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f3b8:	f89a 1000 	ldrb.w	r1, [sl]
 800f3bc:	b1d9      	cbz	r1, 800f3f6 <processMarkers+0x5de>
 800f3be:	f8bb 2000 	ldrh.w	r2, [fp]
 800f3c2:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f3c6:	4f1c      	ldr	r7, [pc, #112]	; (800f438 <processMarkers+0x620>)
  gInBufLeft--;
 800f3c8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800f3cc:	491e      	ldr	r1, [pc, #120]	; (800f448 <processMarkers+0x630>)
  return gInBuf[gInBufOfs++];
 800f3ce:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800f3d0:	f88a e000 	strb.w	lr, [sl]
  return gInBuf[gInBufOfs++];
 800f3d4:	f100 0c01 	add.w	ip, r0, #1
 800f3d8:	f811 8000 	ldrb.w	r8, [r1, r0]
 800f3dc:	f887 c000 	strb.w	ip, [r7]
    gBitBuf <<= (numBits - gBitsLeft);
 800f3e0:	ea48 0802 	orr.w	r8, r8, r2
 800f3e4:	f1c3 0208 	rsb	r2, r3, #8
 800f3e8:	fa08 f802 	lsl.w	r8, r8, r2
 800f3ec:	fa1f f888 	uxth.w	r8, r8
 800f3f0:	f8ab 8000 	strh.w	r8, [fp]
 800f3f4:	e7b8      	b.n	800f368 <processMarkers+0x550>
      gTemFlag = ~gTemFlag;
 800f3f6:	4815      	ldr	r0, [pc, #84]	; (800f44c <processMarkers+0x634>)
 800f3f8:	f8bb 2000 	ldrh.w	r2, [fp]
 800f3fc:	7801      	ldrb	r1, [r0, #0]
 800f3fe:	f899 3000 	ldrb.w	r3, [r9]
 800f402:	43c9      	mvns	r1, r1
 800f404:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800f406:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800f408:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f40a:	bf14      	ite	ne
 800f40c:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800f410:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800f414:	e7e4      	b.n	800f3e0 <processMarkers+0x5c8>
static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
 800f416:	e9dd 2703 	ldrd	r2, r7, [sp, #12]
 800f41a:	2a01      	cmp	r2, #1
 800f41c:	bfcc      	ite	gt
 800f41e:	22ff      	movgt	r2, #255	; 0xff
 800f420:	220c      	movle	r2, #12
    if (count > getMaxHuffCodes(tableIndex))
 800f422:	4295      	cmp	r5, r2
 800f424:	f63f ad06 	bhi.w	800ee34 <processMarkers+0x1c>
    for (i = 0; i < count; i++)
 800f428:	2d00      	cmp	r5, #0
 800f42a:	d06b      	beq.n	800f504 <processMarkers+0x6ec>
 800f42c:	2600      	movs	r6, #0
 800f42e:	9703      	str	r7, [sp, #12]
 800f430:	e027      	b.n	800f482 <processMarkers+0x66a>
 800f432:	bf00      	nop
 800f434:	2000cf14 	.word	0x2000cf14
 800f438:	2000cae5 	.word	0x2000cae5
 800f43c:	2000cf10 	.word	0x2000cf10
 800f440:	2000c9e8 	.word	0x2000c9e8
 800f444:	2000c5dd 	.word	0x2000c5dd
 800f448:	2000c9e4 	.word	0x2000c9e4
 800f44c:	2000cf0b 	.word	0x2000cf0b
 800f450:	08032467 	.word	0x08032467
 800f454:	2000cf0c 	.word	0x2000cf0c
 800f458:	08032408 	.word	0x08032408
 800f45c:	08032418 	.word	0x08032418
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f460:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 800f462:	ea4f 2808 	mov.w	r8, r8, lsl #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f466:	b2db      	uxtb	r3, r3
    gBitBuf <<= numBits;
 800f468:	fa1f f888 	uxth.w	r8, r8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f46c:	f889 3000 	strb.w	r3, [r9]
    gBitBuf <<= numBits;
 800f470:	f8ab 8000 	strh.w	r8, [fp]
  return ret >> (16 - origBits);
 800f474:	1224      	asrs	r4, r4, #8
    for (i = 0; i < count; i++)
 800f476:	1c72      	adds	r2, r6, #1
      pHuffVal[i] = (uint8)getBits1(8);
 800f478:	9901      	ldr	r1, [sp, #4]
 800f47a:	558c      	strb	r4, [r1, r6]
    for (i = 0; i < count; i++)
 800f47c:	b2d6      	uxtb	r6, r2
 800f47e:	42b5      	cmp	r5, r6
 800f480:	d93f      	bls.n	800f502 <processMarkers+0x6ea>
  if (gBitsLeft < numBits) {
 800f482:	2b07      	cmp	r3, #7
 800f484:	4644      	mov	r4, r8
 800f486:	d8eb      	bhi.n	800f460 <processMarkers+0x648>
    gBitBuf <<= gBitsLeft;
 800f488:	fa08 f803 	lsl.w	r8, r8, r3
  if (!gInBufLeft) {
 800f48c:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800f490:	fa1f f288 	uxth.w	r2, r8
 800f494:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800f498:	b9d9      	cbnz	r1, 800f4d2 <processMarkers+0x6ba>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f49a:	4bb9      	ldr	r3, [pc, #740]	; (800f780 <processMarkers+0x968>)
  gInBufOfs = 4;
 800f49c:	f04f 0c04 	mov.w	ip, #4
 800f4a0:	4fb8      	ldr	r7, [pc, #736]	; (800f784 <processMarkers+0x96c>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f4a2:	4652      	mov	r2, sl
 800f4a4:	f8d3 8000 	ldr.w	r8, [r3]
 800f4a8:	4bb7      	ldr	r3, [pc, #732]	; (800f788 <processMarkers+0x970>)
  gInBufLeft = 0;
 800f4aa:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f4ae:	21fc      	movs	r1, #252	; 0xfc
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	48b6      	ldr	r0, [pc, #728]	; (800f78c <processMarkers+0x974>)
  gInBufOfs = 4;
 800f4b4:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f4b8:	47c0      	blx	r8
  if (status) {
 800f4ba:	b108      	cbz	r0, 800f4c0 <processMarkers+0x6a8>
    gCallbackStatus = status;
 800f4bc:	4bb4      	ldr	r3, [pc, #720]	; (800f790 <processMarkers+0x978>)
 800f4be:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f4c0:	f89a 1000 	ldrb.w	r1, [sl]
 800f4c4:	2900      	cmp	r1, #0
 800f4c6:	f000 8167 	beq.w	800f798 <processMarkers+0x980>
 800f4ca:	f8bb 2000 	ldrh.w	r2, [fp]
 800f4ce:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f4d2:	4fac      	ldr	r7, [pc, #688]	; (800f784 <processMarkers+0x96c>)
  gInBufLeft--;
 800f4d4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800f4d8:	49ae      	ldr	r1, [pc, #696]	; (800f794 <processMarkers+0x97c>)
  return gInBuf[gInBufOfs++];
 800f4da:	7838      	ldrb	r0, [r7, #0]
  gInBufLeft--;
 800f4dc:	f88a e000 	strb.w	lr, [sl]
  return gInBuf[gInBufOfs++];
 800f4e0:	f100 0c01 	add.w	ip, r0, #1
 800f4e4:	f811 8000 	ldrb.w	r8, [r1, r0]
 800f4e8:	f887 c000 	strb.w	ip, [r7]
    gBitBuf <<= (numBits - gBitsLeft);
 800f4ec:	ea48 0802 	orr.w	r8, r8, r2
 800f4f0:	f1c3 0208 	rsb	r2, r3, #8
 800f4f4:	fa08 f802 	lsl.w	r8, r8, r2
 800f4f8:	fa1f f888 	uxth.w	r8, r8
 800f4fc:	f8ab 8000 	strh.w	r8, [fp]
 800f500:	e7b8      	b.n	800f474 <processMarkers+0x65c>
 800f502:	9f03      	ldr	r7, [sp, #12]
    totalRead = 1 + 16 + count;
 800f504:	f105 0211 	add.w	r2, r5, #17
    if (left < totalRead)
 800f508:	9902      	ldr	r1, [sp, #8]
    totalRead = 1 + 16 + count;
 800f50a:	b292      	uxth	r2, r2
    if (left < totalRead)
 800f50c:	428a      	cmp	r2, r1
 800f50e:	f63f ac91 	bhi.w	800ee34 <processMarkers+0x1c>
    left = (uint16)(left - totalRead);
 800f512:	1a8b      	subs	r3, r1, r2
    uint8 num = pBits[i];
 800f514:	f89d 2018 	ldrb.w	r2, [sp, #24]
    left = (uint16)(left - totalRead);
 800f518:	b29b      	uxth	r3, r3
 800f51a:	9302      	str	r3, [sp, #8]
    if (!num) {
 800f51c:	2a00      	cmp	r2, #0
 800f51e:	f000 81b6 	beq.w	800f88e <processMarkers+0xa76>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f522:	b293      	uxth	r3, r2
      pHuffTable->mMinCode[i] = code;
 800f524:	2100      	movs	r1, #0
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f526:	1e58      	subs	r0, r3, #1
 800f528:	005b      	lsls	r3, r3, #1
      pHuffTable->mMinCode[i] = code;
 800f52a:	8039      	strh	r1, [r7, #0]
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f52c:	8438      	strh	r0, [r7, #32]
      pHuffTable->mValPtr[i] = j;
 800f52e:	f887 1040 	strb.w	r1, [r7, #64]	; 0x40
    uint8 num = pBits[i];
 800f532:	f89d 1019 	ldrb.w	r1, [sp, #25]
    if (!num) {
 800f536:	2900      	cmp	r1, #0
 800f538:	f000 81a2 	beq.w	800f880 <processMarkers+0xa68>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f53c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f53e:	807b      	strh	r3, [r7, #2]
      j = (uint8)(j + num);
 800f540:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f542:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f546:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f548:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f54a:	1e59      	subs	r1, r3, #1
 800f54c:	8479      	strh	r1, [r7, #34]	; 0x22
    code <<= 1;
 800f54e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f550:	f89d 101a 	ldrb.w	r1, [sp, #26]
    code <<= 1;
 800f554:	b29b      	uxth	r3, r3
    if (!num) {
 800f556:	2900      	cmp	r1, #0
 800f558:	f000 818b 	beq.w	800f872 <processMarkers+0xa5a>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f55c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f55e:	80bb      	strh	r3, [r7, #4]
      j = (uint8)(j + num);
 800f560:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f562:	f887 2042 	strb.w	r2, [r7, #66]	; 0x42
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f566:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f568:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f56a:	1e59      	subs	r1, r3, #1
 800f56c:	84b9      	strh	r1, [r7, #36]	; 0x24
    code <<= 1;
 800f56e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f570:	f89d 101b 	ldrb.w	r1, [sp, #27]
    code <<= 1;
 800f574:	b29b      	uxth	r3, r3
    if (!num) {
 800f576:	2900      	cmp	r1, #0
 800f578:	f000 8174 	beq.w	800f864 <processMarkers+0xa4c>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f57c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f57e:	80fb      	strh	r3, [r7, #6]
      j = (uint8)(j + num);
 800f580:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f582:	f887 2043 	strb.w	r2, [r7, #67]	; 0x43
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f586:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f588:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f58a:	1e59      	subs	r1, r3, #1
 800f58c:	84f9      	strh	r1, [r7, #38]	; 0x26
    code <<= 1;
 800f58e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f590:	f89d 101c 	ldrb.w	r1, [sp, #28]
    code <<= 1;
 800f594:	b29b      	uxth	r3, r3
    if (!num) {
 800f596:	2900      	cmp	r1, #0
 800f598:	f000 815d 	beq.w	800f856 <processMarkers+0xa3e>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f59c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f59e:	813b      	strh	r3, [r7, #8]
      j = (uint8)(j + num);
 800f5a0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f5a2:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5a6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f5a8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5aa:	1e59      	subs	r1, r3, #1
 800f5ac:	8539      	strh	r1, [r7, #40]	; 0x28
    code <<= 1;
 800f5ae:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f5b0:	f89d 101d 	ldrb.w	r1, [sp, #29]
    code <<= 1;
 800f5b4:	b29b      	uxth	r3, r3
    if (!num) {
 800f5b6:	2900      	cmp	r1, #0
 800f5b8:	f000 8146 	beq.w	800f848 <processMarkers+0xa30>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5bc:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f5be:	817b      	strh	r3, [r7, #10]
      j = (uint8)(j + num);
 800f5c0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f5c2:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5c6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f5c8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5ca:	1e59      	subs	r1, r3, #1
 800f5cc:	8579      	strh	r1, [r7, #42]	; 0x2a
    code <<= 1;
 800f5ce:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f5d0:	f89d 101e 	ldrb.w	r1, [sp, #30]
    code <<= 1;
 800f5d4:	b29b      	uxth	r3, r3
    if (!num) {
 800f5d6:	2900      	cmp	r1, #0
 800f5d8:	f000 812f 	beq.w	800f83a <processMarkers+0xa22>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5dc:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f5de:	81bb      	strh	r3, [r7, #12]
      j = (uint8)(j + num);
 800f5e0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f5e2:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5e6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f5e8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5ea:	1e59      	subs	r1, r3, #1
 800f5ec:	85b9      	strh	r1, [r7, #44]	; 0x2c
    code <<= 1;
 800f5ee:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f5f0:	f89d 101f 	ldrb.w	r1, [sp, #31]
    code <<= 1;
 800f5f4:	b29b      	uxth	r3, r3
    if (!num) {
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	f000 8118 	beq.w	800f82c <processMarkers+0xa14>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f5fc:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f5fe:	81fb      	strh	r3, [r7, #14]
      j = (uint8)(j + num);
 800f600:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f602:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f606:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f608:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f60a:	1e59      	subs	r1, r3, #1
 800f60c:	85f9      	strh	r1, [r7, #46]	; 0x2e
    code <<= 1;
 800f60e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f610:	f89d 1020 	ldrb.w	r1, [sp, #32]
    code <<= 1;
 800f614:	b29b      	uxth	r3, r3
    if (!num) {
 800f616:	2900      	cmp	r1, #0
 800f618:	f000 8101 	beq.w	800f81e <processMarkers+0xa06>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f61c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f61e:	823b      	strh	r3, [r7, #16]
      j = (uint8)(j + num);
 800f620:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f622:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f626:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f628:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f62a:	1e59      	subs	r1, r3, #1
 800f62c:	8639      	strh	r1, [r7, #48]	; 0x30
    code <<= 1;
 800f62e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f630:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    code <<= 1;
 800f634:	b29b      	uxth	r3, r3
    if (!num) {
 800f636:	2900      	cmp	r1, #0
 800f638:	f000 80ea 	beq.w	800f810 <processMarkers+0x9f8>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f63c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f63e:	827b      	strh	r3, [r7, #18]
      j = (uint8)(j + num);
 800f640:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f642:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f646:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f648:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f64a:	1e59      	subs	r1, r3, #1
 800f64c:	8679      	strh	r1, [r7, #50]	; 0x32
    code <<= 1;
 800f64e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f650:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    code <<= 1;
 800f654:	b29b      	uxth	r3, r3
    if (!num) {
 800f656:	2900      	cmp	r1, #0
 800f658:	f000 80d3 	beq.w	800f802 <processMarkers+0x9ea>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f65c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f65e:	82bb      	strh	r3, [r7, #20]
      j = (uint8)(j + num);
 800f660:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f662:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f666:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f668:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f66a:	1e59      	subs	r1, r3, #1
 800f66c:	86b9      	strh	r1, [r7, #52]	; 0x34
    code <<= 1;
 800f66e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f670:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
    code <<= 1;
 800f674:	b29b      	uxth	r3, r3
    if (!num) {
 800f676:	2900      	cmp	r1, #0
 800f678:	f000 80bc 	beq.w	800f7f4 <processMarkers+0x9dc>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f67c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f67e:	82fb      	strh	r3, [r7, #22]
      j = (uint8)(j + num);
 800f680:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f682:	f887 204b 	strb.w	r2, [r7, #75]	; 0x4b
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f686:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f688:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f68a:	1e59      	subs	r1, r3, #1
 800f68c:	86f9      	strh	r1, [r7, #54]	; 0x36
    code <<= 1;
 800f68e:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f690:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    code <<= 1;
 800f694:	b29b      	uxth	r3, r3
    if (!num) {
 800f696:	2900      	cmp	r1, #0
 800f698:	f000 80a5 	beq.w	800f7e6 <processMarkers+0x9ce>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f69c:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f69e:	833b      	strh	r3, [r7, #24]
      j = (uint8)(j + num);
 800f6a0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f6a2:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6a6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f6a8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6aa:	1e59      	subs	r1, r3, #1
 800f6ac:	8739      	strh	r1, [r7, #56]	; 0x38
    code <<= 1;
 800f6ae:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f6b0:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    code <<= 1;
 800f6b4:	b29b      	uxth	r3, r3
    if (!num) {
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	f000 808e 	beq.w	800f7d8 <processMarkers+0x9c0>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6bc:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f6be:	837b      	strh	r3, [r7, #26]
      j = (uint8)(j + num);
 800f6c0:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f6c2:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6c6:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f6c8:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6ca:	1e59      	subs	r1, r3, #1
 800f6cc:	8779      	strh	r1, [r7, #58]	; 0x3a
    code <<= 1;
 800f6ce:	005b      	lsls	r3, r3, #1
    uint8 num = pBits[i];
 800f6d0:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    code <<= 1;
 800f6d4:	b29b      	uxth	r3, r3
    if (!num) {
 800f6d6:	2900      	cmp	r1, #0
 800f6d8:	d077      	beq.n	800f7ca <processMarkers+0x9b2>
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6da:	1858      	adds	r0, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f6dc:	83bb      	strh	r3, [r7, #28]
      j = (uint8)(j + num);
 800f6de:	4411      	add	r1, r2
      pHuffTable->mValPtr[i] = j;
 800f6e0:	f887 204e 	strb.w	r2, [r7, #78]	; 0x4e
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6e4:	b283      	uxth	r3, r0
      j = (uint8)(j + num);
 800f6e6:	b2ca      	uxtb	r2, r1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f6e8:	1e59      	subs	r1, r3, #1
 800f6ea:	87b9      	strh	r1, [r7, #60]	; 0x3c
    uint8 num = pBits[i];
 800f6ec:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    if (!num) {
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	d161      	bne.n	800f7b8 <processMarkers+0x9a0>
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f6f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f6f8:	83f9      	strh	r1, [r7, #30]
      pHuffTable->mValPtr[i] = 0;
 800f6fa:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f6fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
  while (left) {
 800f700:	9b02      	ldr	r3, [sp, #8]
 800f702:	2b00      	cmp	r3, #0
 800f704:	f43f ac3b 	beq.w	800ef7e <processMarkers+0x166>
  if (gBitsLeft < numBits) {
 800f708:	f899 3000 	ldrb.w	r3, [r9]
 800f70c:	f8bb 4000 	ldrh.w	r4, [fp]
 800f710:	2b07      	cmp	r3, #7
 800f712:	f63f adee 	bhi.w	800f2f2 <processMarkers+0x4da>
    gBitBuf <<= gBitsLeft;
 800f716:	fa04 f203 	lsl.w	r2, r4, r3
  if (!gInBufLeft) {
 800f71a:	f89a 1000 	ldrb.w	r1, [sl]
    gBitBuf <<= gBitsLeft;
 800f71e:	b292      	uxth	r2, r2
 800f720:	f8ab 2000 	strh.w	r2, [fp]
  if (!gInBufLeft) {
 800f724:	b9c1      	cbnz	r1, 800f758 <processMarkers+0x940>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f726:	4b16      	ldr	r3, [pc, #88]	; (800f780 <processMarkers+0x968>)
  gInBufOfs = 4;
 800f728:	2604      	movs	r6, #4
 800f72a:	4f16      	ldr	r7, [pc, #88]	; (800f784 <processMarkers+0x96c>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f72c:	4652      	mov	r2, sl
 800f72e:	681d      	ldr	r5, [r3, #0]
 800f730:	4b15      	ldr	r3, [pc, #84]	; (800f788 <processMarkers+0x970>)
  gInBufLeft = 0;
 800f732:	f88a 1000 	strb.w	r1, [sl]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f736:	21fc      	movs	r1, #252	; 0xfc
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4814      	ldr	r0, [pc, #80]	; (800f78c <processMarkers+0x974>)
  gInBufOfs = 4;
 800f73c:	703e      	strb	r6, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f73e:	47a8      	blx	r5
  if (status) {
 800f740:	b108      	cbz	r0, 800f746 <processMarkers+0x92e>
    gCallbackStatus = status;
 800f742:	4b13      	ldr	r3, [pc, #76]	; (800f790 <processMarkers+0x978>)
 800f744:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f746:	f89a 1000 	ldrb.w	r1, [sl]
 800f74a:	2900      	cmp	r1, #0
 800f74c:	f000 80b7 	beq.w	800f8be <processMarkers+0xaa6>
 800f750:	f8bb 2000 	ldrh.w	r2, [fp]
 800f754:	f899 3000 	ldrb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800f758:	4e0a      	ldr	r6, [pc, #40]	; (800f784 <processMarkers+0x96c>)
  gInBufLeft--;
 800f75a:	3901      	subs	r1, #1
 800f75c:	4f0d      	ldr	r7, [pc, #52]	; (800f794 <processMarkers+0x97c>)
  return gInBuf[gInBufOfs++];
 800f75e:	7830      	ldrb	r0, [r6, #0]
  gInBufLeft--;
 800f760:	f88a 1000 	strb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 800f764:	1c45      	adds	r5, r0, #1
 800f766:	f817 8000 	ldrb.w	r8, [r7, r0]
 800f76a:	7035      	strb	r5, [r6, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 800f76c:	ea48 0802 	orr.w	r8, r8, r2
 800f770:	f1c3 0208 	rsb	r2, r3, #8
 800f774:	fa08 f802 	lsl.w	r8, r8, r2
 800f778:	fa1f f888 	uxth.w	r8, r8
 800f77c:	e5c1      	b.n	800f302 <processMarkers+0x4ea>
 800f77e:	bf00      	nop
 800f780:	2000cf14 	.word	0x2000cf14
 800f784:	2000cae5 	.word	0x2000cae5
 800f788:	2000cf10 	.word	0x2000cf10
 800f78c:	2000c9e8 	.word	0x2000c9e8
 800f790:	2000c5dd 	.word	0x2000c5dd
 800f794:	2000c9e4 	.word	0x2000c9e4
      gTemFlag = ~gTemFlag;
 800f798:	4856      	ldr	r0, [pc, #344]	; (800f8f4 <processMarkers+0xadc>)
 800f79a:	f8bb 2000 	ldrh.w	r2, [fp]
 800f79e:	7801      	ldrb	r1, [r0, #0]
 800f7a0:	f899 3000 	ldrb.w	r3, [r9]
 800f7a4:	43c9      	mvns	r1, r1
 800f7a6:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800f7a8:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800f7aa:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f7ac:	bf14      	ite	ne
 800f7ae:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800f7b2:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800f7b6:	e699      	b.n	800f4ec <processMarkers+0x6d4>
    code <<= 1;
 800f7b8:	005b      	lsls	r3, r3, #1
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f7ba:	3901      	subs	r1, #1
      pHuffTable->mValPtr[i] = j;
 800f7bc:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
    code <<= 1;
 800f7c0:	b29b      	uxth	r3, r3
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f7c2:	185a      	adds	r2, r3, r1
      pHuffTable->mMinCode[i] = code;
 800f7c4:	83fb      	strh	r3, [r7, #30]
      pHuffTable->mMaxCode[i] = code + num - 1;
 800f7c6:	87fa      	strh	r2, [r7, #62]	; 0x3e
 800f7c8:	e79a      	b.n	800f700 <processMarkers+0x8e8>
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f7ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f7ce:	83b9      	strh	r1, [r7, #28]
      pHuffTable->mValPtr[i] = 0;
 800f7d0:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f7d4:	87b8      	strh	r0, [r7, #60]	; 0x3c
 800f7d6:	e789      	b.n	800f6ec <processMarkers+0x8d4>
 800f7d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f7dc:	8379      	strh	r1, [r7, #26]
      pHuffTable->mValPtr[i] = 0;
 800f7de:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f7e2:	8778      	strh	r0, [r7, #58]	; 0x3a
 800f7e4:	e773      	b.n	800f6ce <processMarkers+0x8b6>
 800f7e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f7ea:	8339      	strh	r1, [r7, #24]
      pHuffTable->mValPtr[i] = 0;
 800f7ec:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f7f0:	8738      	strh	r0, [r7, #56]	; 0x38
 800f7f2:	e75c      	b.n	800f6ae <processMarkers+0x896>
 800f7f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f7f8:	82f9      	strh	r1, [r7, #22]
      pHuffTable->mValPtr[i] = 0;
 800f7fa:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f7fe:	86f8      	strh	r0, [r7, #54]	; 0x36
 800f800:	e745      	b.n	800f68e <processMarkers+0x876>
 800f802:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f806:	82b9      	strh	r1, [r7, #20]
      pHuffTable->mValPtr[i] = 0;
 800f808:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f80c:	86b8      	strh	r0, [r7, #52]	; 0x34
 800f80e:	e72e      	b.n	800f66e <processMarkers+0x856>
 800f810:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f814:	8279      	strh	r1, [r7, #18]
      pHuffTable->mValPtr[i] = 0;
 800f816:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f81a:	8678      	strh	r0, [r7, #50]	; 0x32
 800f81c:	e717      	b.n	800f64e <processMarkers+0x836>
 800f81e:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f822:	8239      	strh	r1, [r7, #16]
      pHuffTable->mValPtr[i] = 0;
 800f824:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f828:	8638      	strh	r0, [r7, #48]	; 0x30
 800f82a:	e700      	b.n	800f62e <processMarkers+0x816>
 800f82c:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f830:	81f9      	strh	r1, [r7, #14]
      pHuffTable->mValPtr[i] = 0;
 800f832:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f836:	85f8      	strh	r0, [r7, #46]	; 0x2e
 800f838:	e6e9      	b.n	800f60e <processMarkers+0x7f6>
 800f83a:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f83e:	81b9      	strh	r1, [r7, #12]
      pHuffTable->mValPtr[i] = 0;
 800f840:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f844:	85b8      	strh	r0, [r7, #44]	; 0x2c
 800f846:	e6d2      	b.n	800f5ee <processMarkers+0x7d6>
 800f848:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f84c:	8179      	strh	r1, [r7, #10]
      pHuffTable->mValPtr[i] = 0;
 800f84e:	f887 1045 	strb.w	r1, [r7, #69]	; 0x45
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f852:	8578      	strh	r0, [r7, #42]	; 0x2a
 800f854:	e6bb      	b.n	800f5ce <processMarkers+0x7b6>
 800f856:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f85a:	8139      	strh	r1, [r7, #8]
      pHuffTable->mValPtr[i] = 0;
 800f85c:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f860:	8538      	strh	r0, [r7, #40]	; 0x28
 800f862:	e6a4      	b.n	800f5ae <processMarkers+0x796>
 800f864:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f868:	80f9      	strh	r1, [r7, #6]
      pHuffTable->mValPtr[i] = 0;
 800f86a:	f887 1043 	strb.w	r1, [r7, #67]	; 0x43
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f86e:	84f8      	strh	r0, [r7, #38]	; 0x26
 800f870:	e68d      	b.n	800f58e <processMarkers+0x776>
 800f872:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f876:	80b9      	strh	r1, [r7, #4]
      pHuffTable->mValPtr[i] = 0;
 800f878:	f887 1042 	strb.w	r1, [r7, #66]	; 0x42
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f87c:	84b8      	strh	r0, [r7, #36]	; 0x24
 800f87e:	e676      	b.n	800f56e <processMarkers+0x756>
 800f880:	f64f 70ff 	movw	r0, #65535	; 0xffff
      pHuffTable->mMinCode[i] = 0x0000;
 800f884:	8079      	strh	r1, [r7, #2]
      pHuffTable->mValPtr[i] = 0;
 800f886:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f88a:	8478      	strh	r0, [r7, #34]	; 0x22
 800f88c:	e65f      	b.n	800f54e <processMarkers+0x736>
 800f88e:	f64f 71ff 	movw	r1, #65535	; 0xffff
      pHuffTable->mValPtr[i] = 0;
 800f892:	4613      	mov	r3, r2
      pHuffTable->mMinCode[i] = 0x0000;
 800f894:	803a      	strh	r2, [r7, #0]
      pHuffTable->mValPtr[i] = 0;
 800f896:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800f89a:	8439      	strh	r1, [r7, #32]
 800f89c:	e649      	b.n	800f532 <processMarkers+0x71a>
      gTemFlag = ~gTemFlag;
 800f89e:	4815      	ldr	r0, [pc, #84]	; (800f8f4 <processMarkers+0xadc>)
 800f8a0:	f8bb 2000 	ldrh.w	r2, [fp]
 800f8a4:	7801      	ldrb	r1, [r0, #0]
 800f8a6:	f899 3000 	ldrb.w	r3, [r9]
 800f8aa:	43c9      	mvns	r1, r1
 800f8ac:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800f8ae:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800f8b0:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f8b2:	bf0c      	ite	eq
 800f8b4:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800f8b8:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800f8bc:	e4ec      	b.n	800f298 <processMarkers+0x480>
      gTemFlag = ~gTemFlag;
 800f8be:	480d      	ldr	r0, [pc, #52]	; (800f8f4 <processMarkers+0xadc>)
 800f8c0:	f8bb 2000 	ldrh.w	r2, [fp]
 800f8c4:	7801      	ldrb	r1, [r0, #0]
 800f8c6:	f899 3000 	ldrb.w	r3, [r9]
 800f8ca:	43c9      	mvns	r1, r1
 800f8cc:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 800f8ce:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 800f8d0:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f8d2:	bf0c      	ite	eq
 800f8d4:	f04f 08d9 	moveq.w	r8, #217	; 0xd9
 800f8d8:	f04f 08ff 	movne.w	r8, #255	; 0xff
 800f8dc:	e746      	b.n	800f76c <processMarkers+0x954>
  return getBits(numBits, 0);
 800f8de:	f7ff f935 	bl	800eb4c <getBits.constprop.4>
  gRestartInterval = getBits1(16);
 800f8e2:	4b05      	ldr	r3, [pc, #20]	; (800f8f8 <processMarkers+0xae0>)
 800f8e4:	f8bb 8000 	ldrh.w	r8, [fp]
 800f8e8:	8018      	strh	r0, [r3, #0]
 800f8ea:	f899 3000 	ldrb.w	r3, [r9]
 800f8ee:	f7ff baa1 	b.w	800ee34 <processMarkers+0x1c>
 800f8f2:	bf00      	nop
 800f8f4:	2000cf0b 	.word	0x2000cf0b
 800f8f8:	2000cf06 	.word	0x2000cf06

0800f8fc <getBits>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800f8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (numBits > 8) {
 800f900:	2808      	cmp	r0, #8
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800f902:	b085      	sub	sp, #20
  uint16 ret = gBitBuf;
 800f904:	f8df 8314 	ldr.w	r8, [pc, #788]	; 800fc1c <getBits+0x320>
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800f908:	4604      	mov	r4, r0
 800f90a:	f8df a314 	ldr.w	sl, [pc, #788]	; 800fc20 <getBits+0x324>
 800f90e:	9101      	str	r1, [sp, #4]
  uint16 ret = gBitBuf;
 800f910:	f8b8 5000 	ldrh.w	r5, [r8]
 800f914:	f89a 2000 	ldrb.w	r2, [sl]
  if (numBits > 8) {
 800f918:	d812      	bhi.n	800f940 <getBits+0x44>
 800f91a:	4606      	mov	r6, r0
 800f91c:	462b      	mov	r3, r5
  if (gBitsLeft < numBits) {
 800f91e:	4296      	cmp	r6, r2
 800f920:	f200 808a 	bhi.w	800fa38 <getBits+0x13c>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f924:	1b92      	subs	r2, r2, r6
    gBitBuf <<= numBits;
 800f926:	fa03 f606 	lsl.w	r6, r3, r6
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f92a:	f88a 2000 	strb.w	r2, [sl]
    gBitBuf <<= numBits;
 800f92e:	f8a8 6000 	strh.w	r6, [r8]
  return ret >> (16 - origBits);
 800f932:	f1c4 0010 	rsb	r0, r4, #16
 800f936:	4105      	asrs	r5, r0
 800f938:	b2a8      	uxth	r0, r5
}
 800f93a:	b005      	add	sp, #20
 800f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!gInBufLeft) {
 800f940:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800fc14 <getBits+0x318>
    numBits -= 8;
 800f944:	f1a0 0608 	sub.w	r6, r0, #8
    gBitBuf <<= gBitsLeft;
 800f948:	fa05 f302 	lsl.w	r3, r5, r2
  if (!gInBufLeft) {
 800f94c:	f899 0000 	ldrb.w	r0, [r9]
    numBits -= 8;
 800f950:	b2f6      	uxtb	r6, r6
    gBitBuf <<= gBitsLeft;
 800f952:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800f956:	2800      	cmp	r0, #0
 800f958:	f040 814a 	bne.w	800fbf0 <getBits+0x2f4>
  gInBufOfs = 4;
 800f95c:	4fa8      	ldr	r7, [pc, #672]	; (800fc00 <getBits+0x304>)
 800f95e:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f962:	4ba8      	ldr	r3, [pc, #672]	; (800fc04 <getBits+0x308>)
 800f964:	464a      	mov	r2, r9
 800f966:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800fc24 <getBits+0x328>
 800f96a:	21fc      	movs	r1, #252	; 0xfc
 800f96c:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800f96e:	9700      	str	r7, [sp, #0]
  gInBufLeft = 0;
 800f970:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800f974:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	48a3      	ldr	r0, [pc, #652]	; (800fc08 <getBits+0x30c>)
 800f97c:	f8db 7000 	ldr.w	r7, [fp]
 800f980:	47b8      	blx	r7
  if (status) {
 800f982:	b108      	cbz	r0, 800f988 <getBits+0x8c>
    gCallbackStatus = status;
 800f984:	4ba1      	ldr	r3, [pc, #644]	; (800fc0c <getBits+0x310>)
 800f986:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f988:	f899 0000 	ldrb.w	r0, [r9]
 800f98c:	2800      	cmp	r0, #0
 800f98e:	f000 80c9 	beq.w	800fb24 <getBits+0x228>
  return gInBuf[gInBufOfs++];
 800f992:	9f00      	ldr	r7, [sp, #0]
  gInBufLeft--;
 800f994:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800f996:	499e      	ldr	r1, [pc, #632]	; (800fc10 <getBits+0x314>)
 800f998:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800f99a:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800f99c:	9103      	str	r1, [sp, #12]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	5ccb      	ldrb	r3, [r1, r3]
  gInBufLeft--;
 800f9a2:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800f9a6:	b2d2      	uxtb	r2, r2
  if ((FFCheck) && (c == 0xFF)) {
 800f9a8:	2bff      	cmp	r3, #255	; 0xff
 800f9aa:	b299      	uxth	r1, r3
  return gInBuf[gInBufOfs++];
 800f9ac:	703a      	strb	r2, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800f9ae:	d12f      	bne.n	800fa10 <getBits+0x114>
 800f9b0:	9b01      	ldr	r3, [sp, #4]
 800f9b2:	07db      	lsls	r3, r3, #31
 800f9b4:	d52c      	bpl.n	800fa10 <getBits+0x114>
  if (!gInBufLeft) {
 800f9b6:	b9d8      	cbnz	r0, 800f9f0 <getBits+0xf4>
 800f9b8:	4b92      	ldr	r3, [pc, #584]	; (800fc04 <getBits+0x308>)
 800f9ba:	f8df b268 	ldr.w	fp, [pc, #616]	; 800fc24 <getBits+0x328>
 800f9be:	9302      	str	r3, [sp, #8]
  gInBufLeft = 0;
 800f9c0:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800f9c2:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f9c6:	f8db b000 	ldr.w	fp, [fp]
 800f9ca:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800f9cc:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4a90      	ldr	r2, [pc, #576]	; (800fc14 <getBits+0x318>)
 800f9d4:	488c      	ldr	r0, [pc, #560]	; (800fc08 <getBits+0x30c>)
  gInBufOfs = 4;
 800f9d6:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f9da:	47d8      	blx	fp
  if (status) {
 800f9dc:	b108      	cbz	r0, 800f9e2 <getBits+0xe6>
    gCallbackStatus = status;
 800f9de:	4b8b      	ldr	r3, [pc, #556]	; (800fc0c <getBits+0x310>)
 800f9e0:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800f9e2:	f899 0000 	ldrb.w	r0, [r9]
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	f000 80c6 	beq.w	800fb78 <getBits+0x27c>
 800f9ec:	9b00      	ldr	r3, [sp, #0]
 800f9ee:	781a      	ldrb	r2, [r3, #0]
  gInBufLeft--;
 800f9f0:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800f9f2:	9b03      	ldr	r3, [sp, #12]
 800f9f4:	f102 0c01 	add.w	ip, r2, #1
 800f9f8:	5c99      	ldrb	r1, [r3, r2]
  gInBufLeft--;
 800f9fa:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800f9fc:	fa5f f28c 	uxtb.w	r2, ip
 800fa00:	9800      	ldr	r0, [sp, #0]
  gInBufLeft--;
 800fa02:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800fa06:	7002      	strb	r2, [r0, #0]
    if (n) {
 800fa08:	2900      	cmp	r1, #0
 800fa0a:	f040 80c2 	bne.w	800fb92 <getBits+0x296>
 800fa0e:	21ff      	movs	r1, #255	; 0xff
    gBitBuf <<= (8 - gBitsLeft);
 800fa10:	f89a 2000 	ldrb.w	r2, [sl]
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800fa14:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
    gBitBuf |= getOctet(FFCheck);
 800fa18:	f8b8 3000 	ldrh.w	r3, [r8]
    gBitBuf <<= (8 - gBitsLeft);
 800fa1c:	f1c2 0008 	rsb	r0, r2, #8
  if (gBitsLeft < numBits) {
 800fa20:	4296      	cmp	r6, r2
    gBitBuf <<= (8 - gBitsLeft);
 800fa22:	ea43 0301 	orr.w	r3, r3, r1
 800fa26:	fa03 f300 	lsl.w	r3, r3, r0
    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800fa2a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	ea45 0500 	orr.w	r5, r5, r0
  if (gBitsLeft < numBits) {
 800fa34:	f67f af76 	bls.w	800f924 <getBits+0x28>
  if (!gInBufLeft) {
 800fa38:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800fc14 <getBits+0x318>
    gBitBuf <<= gBitsLeft;
 800fa3c:	4093      	lsls	r3, r2
  if (!gInBufLeft) {
 800fa3e:	f899 0000 	ldrb.w	r0, [r9]
    gBitBuf <<= gBitsLeft;
 800fa42:	f8a8 3000 	strh.w	r3, [r8]
  if (!gInBufLeft) {
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f040 80d5 	bne.w	800fbf6 <getBits+0x2fa>
  gInBufOfs = 4;
 800fa4c:	4f6c      	ldr	r7, [pc, #432]	; (800fc00 <getBits+0x304>)
 800fa4e:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800fa52:	4b6c      	ldr	r3, [pc, #432]	; (800fc04 <getBits+0x308>)
 800fa54:	464a      	mov	r2, r9
 800fa56:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800fc24 <getBits+0x328>
 800fa5a:	21fc      	movs	r1, #252	; 0xfc
 800fa5c:	9302      	str	r3, [sp, #8]
  gInBufOfs = 4;
 800fa5e:	9700      	str	r7, [sp, #0]
  gInBufLeft = 0;
 800fa60:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs = 4;
 800fa64:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4867      	ldr	r0, [pc, #412]	; (800fc08 <getBits+0x30c>)
 800fa6c:	f8db 7000 	ldr.w	r7, [fp]
 800fa70:	47b8      	blx	r7
  if (status) {
 800fa72:	b108      	cbz	r0, 800fa78 <getBits+0x17c>
    gCallbackStatus = status;
 800fa74:	4b65      	ldr	r3, [pc, #404]	; (800fc0c <getBits+0x310>)
 800fa76:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800fa78:	f899 0000 	ldrb.w	r0, [r9]
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d059      	beq.n	800fb34 <getBits+0x238>
  return gInBuf[gInBufOfs++];
 800fa80:	9f00      	ldr	r7, [sp, #0]
  gInBufLeft--;
 800fa82:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800fa84:	4a62      	ldr	r2, [pc, #392]	; (800fc10 <getBits+0x314>)
 800fa86:	783b      	ldrb	r3, [r7, #0]
  gInBufLeft--;
 800fa88:	b2c0      	uxtb	r0, r0
  return gInBuf[gInBufOfs++];
 800fa8a:	9203      	str	r2, [sp, #12]
 800fa8c:	1c59      	adds	r1, r3, #1
 800fa8e:	5cd3      	ldrb	r3, [r2, r3]
  gInBufLeft--;
 800fa90:	f889 0000 	strb.w	r0, [r9]
  return gInBuf[gInBufOfs++];
 800fa94:	b2c9      	uxtb	r1, r1
  if ((FFCheck) && (c == 0xFF)) {
 800fa96:	2bff      	cmp	r3, #255	; 0xff
 800fa98:	fa1f fc83 	uxth.w	ip, r3
  return gInBuf[gInBufOfs++];
 800fa9c:	7039      	strb	r1, [r7, #0]
  if ((FFCheck) && (c == 0xFF)) {
 800fa9e:	d152      	bne.n	800fb46 <getBits+0x24a>
 800faa0:	9b01      	ldr	r3, [sp, #4]
 800faa2:	07db      	lsls	r3, r3, #31
 800faa4:	d54f      	bpl.n	800fb46 <getBits+0x24a>
  if (!gInBufLeft) {
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f040 808e 	bne.w	800fbc8 <getBits+0x2cc>
 800faac:	4b55      	ldr	r3, [pc, #340]	; (800fc04 <getBits+0x308>)
 800faae:	f8df b174 	ldr.w	fp, [pc, #372]	; 800fc24 <getBits+0x328>
 800fab2:	9302      	str	r3, [sp, #8]
  gInBufLeft = 0;
 800fab4:	2200      	movs	r2, #0
  gInBufOfs = 4;
 800fab6:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800faba:	f8db b000 	ldr.w	fp, [fp]
 800fabe:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 800fac0:	f889 2000 	strb.w	r2, [r9]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a53      	ldr	r2, [pc, #332]	; (800fc14 <getBits+0x318>)
 800fac8:	484f      	ldr	r0, [pc, #316]	; (800fc08 <getBits+0x30c>)
  gInBufOfs = 4;
 800faca:	f887 c000 	strb.w	ip, [r7]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800face:	47d8      	blx	fp
  if (status) {
 800fad0:	b108      	cbz	r0, 800fad6 <getBits+0x1da>
    gCallbackStatus = status;
 800fad2:	4b4e      	ldr	r3, [pc, #312]	; (800fc0c <getBits+0x310>)
 800fad4:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 800fad6:	f899 0000 	ldrb.w	r0, [r9]
 800fada:	2800      	cmp	r0, #0
 800fadc:	d172      	bne.n	800fbc4 <getBits+0x2c8>
      gTemFlag = ~gTemFlag;
 800fade:	f8df c138 	ldr.w	ip, [pc, #312]	; 800fc18 <getBits+0x31c>
 800fae2:	9b00      	ldr	r3, [sp, #0]
 800fae4:	781a      	ldrb	r2, [r3, #0]
 800fae6:	f89c 3000 	ldrb.w	r3, [ip]
 800faea:	43d9      	mvns	r1, r3
 800faec:	b2cb      	uxtb	r3, r1
 800faee:	f88c 3000 	strb.w	r3, [ip]
      return gTemFlag ? 0xFF : 0xD9;
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f000 8082 	beq.w	800fbfc <getBits+0x300>
 800faf8:	4603      	mov	r3, r0
 800fafa:	21ff      	movs	r1, #255	; 0xff
  gInBufOfs--;
 800fafc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800fb00:	3a02      	subs	r2, #2
  gInBufLeft++;
 800fb02:	1c98      	adds	r0, r3, #2
  gInBuf[gInBufOfs] = i;
 800fb04:	f04f 0eff 	mov.w	lr, #255	; 0xff
  gInBufOfs--;
 800fb08:	b2d3      	uxtb	r3, r2
  gInBuf[gInBufOfs] = i;
 800fb0a:	9a03      	ldr	r2, [sp, #12]
 800fb0c:	fa5f fc8c 	uxtb.w	ip, ip
  gInBufLeft++;
 800fb10:	f889 0000 	strb.w	r0, [r9]
  gInBuf[gInBufOfs] = i;
 800fb14:	f802 100c 	strb.w	r1, [r2, ip]
  gInBufLeft++;
 800fb18:	46f4      	mov	ip, lr
  gInBufOfs--;
 800fb1a:	9900      	ldr	r1, [sp, #0]
  gInBuf[gInBufOfs] = i;
 800fb1c:	f802 e003 	strb.w	lr, [r2, r3]
  gInBufOfs--;
 800fb20:	700b      	strb	r3, [r1, #0]
 800fb22:	e010      	b.n	800fb46 <getBits+0x24a>
      gTemFlag = ~gTemFlag;
 800fb24:	4a3c      	ldr	r2, [pc, #240]	; (800fc18 <getBits+0x31c>)
 800fb26:	7813      	ldrb	r3, [r2, #0]
 800fb28:	43db      	mvns	r3, r3
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800fb2e:	b9d3      	cbnz	r3, 800fb66 <getBits+0x26a>
 800fb30:	21d9      	movs	r1, #217	; 0xd9
 800fb32:	e76d      	b.n	800fa10 <getBits+0x114>
      gTemFlag = ~gTemFlag;
 800fb34:	4a38      	ldr	r2, [pc, #224]	; (800fc18 <getBits+0x31c>)
 800fb36:	7813      	ldrb	r3, [r2, #0]
 800fb38:	43db      	mvns	r3, r3
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	7013      	strb	r3, [r2, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d13b      	bne.n	800fbba <getBits+0x2be>
 800fb42:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
    gBitBuf <<= (numBits - gBitsLeft);
 800fb46:	f89a 3000 	ldrb.w	r3, [sl]
    gBitBuf |= getOctet(FFCheck);
 800fb4a:	f8b8 2000 	ldrh.w	r2, [r8]
    gBitBuf <<= (numBits - gBitsLeft);
 800fb4e:	1af1      	subs	r1, r6, r3
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800fb50:	3308      	adds	r3, #8
    gBitBuf <<= (numBits - gBitsLeft);
 800fb52:	ea4c 0202 	orr.w	r2, ip, r2
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800fb56:	1b9e      	subs	r6, r3, r6
    gBitBuf <<= (numBits - gBitsLeft);
 800fb58:	fa02 f301 	lsl.w	r3, r2, r1
    gBitsLeft = 8 - (numBits - gBitsLeft);
 800fb5c:	f88a 6000 	strb.w	r6, [sl]
    gBitBuf <<= (numBits - gBitsLeft);
 800fb60:	f8a8 3000 	strh.w	r3, [r8]
 800fb64:	e6e5      	b.n	800f932 <getBits+0x36>
  if ((FFCheck) && (c == 0xFF)) {
 800fb66:	9b01      	ldr	r3, [sp, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f43f af50 	beq.w	800fa0e <getBits+0x112>
 800fb6e:	4b28      	ldr	r3, [pc, #160]	; (800fc10 <getBits+0x314>)
 800fb70:	9f00      	ldr	r7, [sp, #0]
 800fb72:	9303      	str	r3, [sp, #12]
 800fb74:	9b02      	ldr	r3, [sp, #8]
 800fb76:	e723      	b.n	800f9c0 <getBits+0xc4>
      gTemFlag = ~gTemFlag;
 800fb78:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800fc18 <getBits+0x31c>
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	781a      	ldrb	r2, [r3, #0]
 800fb80:	f89c 3000 	ldrb.w	r3, [ip]
 800fb84:	43d9      	mvns	r1, r3
 800fb86:	b2cb      	uxtb	r3, r1
 800fb88:	f88c 3000 	strb.w	r3, [ip]
      return gTemFlag ? 0xFF : 0xD9;
 800fb8c:	b373      	cbz	r3, 800fbec <getBits+0x2f0>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	21ff      	movs	r1, #255	; 0xff
  gInBufLeft++;
 800fb92:	1c98      	adds	r0, r3, #2
  gInBufOfs--;
 800fb94:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800fb98:	3a02      	subs	r2, #2
  gInBuf[gInBufOfs] = i;
 800fb9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800fb9e:	fa5f fe8e 	uxtb.w	lr, lr
  gInBufLeft++;
 800fba2:	f889 0000 	strb.w	r0, [r9]
  gInBufOfs--;
 800fba6:	b2d3      	uxtb	r3, r2
 800fba8:	9800      	ldr	r0, [sp, #0]
  gInBuf[gInBufOfs] = i;
 800fbaa:	9a03      	ldr	r2, [sp, #12]
  gInBufOfs--;
 800fbac:	7003      	strb	r3, [r0, #0]
  gInBuf[gInBufOfs] = i;
 800fbae:	f802 100e 	strb.w	r1, [r2, lr]
  gInBufLeft++;
 800fbb2:	4661      	mov	r1, ip
  gInBuf[gInBufOfs] = i;
 800fbb4:	f802 c003 	strb.w	ip, [r2, r3]
 800fbb8:	e72a      	b.n	800fa10 <getBits+0x114>
  if ((FFCheck) && (c == 0xFF)) {
 800fbba:	9b01      	ldr	r3, [sp, #4]
 800fbbc:	b98b      	cbnz	r3, 800fbe2 <getBits+0x2e6>
    if (n) {
 800fbbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800fbc2:	e7c0      	b.n	800fb46 <getBits+0x24a>
 800fbc4:	9b00      	ldr	r3, [sp, #0]
 800fbc6:	7819      	ldrb	r1, [r3, #0]
  gInBufLeft--;
 800fbc8:	3801      	subs	r0, #1
  return gInBuf[gInBufOfs++];
 800fbca:	1c4a      	adds	r2, r1, #1
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	5c59      	ldrb	r1, [r3, r1]
  gInBufLeft--;
 800fbd2:	b2c3      	uxtb	r3, r0
  return gInBuf[gInBufOfs++];
 800fbd4:	9800      	ldr	r0, [sp, #0]
  gInBufLeft--;
 800fbd6:	f889 3000 	strb.w	r3, [r9]
  return gInBuf[gInBufOfs++];
 800fbda:	7002      	strb	r2, [r0, #0]
    if (n) {
 800fbdc:	2900      	cmp	r1, #0
 800fbde:	d0ee      	beq.n	800fbbe <getBits+0x2c2>
 800fbe0:	e78c      	b.n	800fafc <getBits+0x200>
 800fbe2:	4b0b      	ldr	r3, [pc, #44]	; (800fc10 <getBits+0x314>)
 800fbe4:	9f00      	ldr	r7, [sp, #0]
 800fbe6:	9303      	str	r3, [sp, #12]
 800fbe8:	9b02      	ldr	r3, [sp, #8]
 800fbea:	e763      	b.n	800fab4 <getBits+0x1b8>
      return gTemFlag ? 0xFF : 0xD9;
 800fbec:	21d9      	movs	r1, #217	; 0xd9
 800fbee:	e7d0      	b.n	800fb92 <getBits+0x296>
 800fbf0:	4b03      	ldr	r3, [pc, #12]	; (800fc00 <getBits+0x304>)
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	e6cd      	b.n	800f992 <getBits+0x96>
 800fbf6:	4b02      	ldr	r3, [pc, #8]	; (800fc00 <getBits+0x304>)
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	e741      	b.n	800fa80 <getBits+0x184>
 800fbfc:	21d9      	movs	r1, #217	; 0xd9
 800fbfe:	e77d      	b.n	800fafc <getBits+0x200>
 800fc00:	2000cae5 	.word	0x2000cae5
 800fc04:	2000cf10 	.word	0x2000cf10
 800fc08:	2000c9e8 	.word	0x2000c9e8
 800fc0c:	2000c5dd 	.word	0x2000c5dd
 800fc10:	2000c9e4 	.word	0x2000c9e4
 800fc14:	2000cae4 	.word	0x2000cae4
 800fc18:	2000cf0b 	.word	0x2000cf0b
 800fc1c:	2000c5da 	.word	0x2000c5da
 800fc20:	2000c5dc 	.word	0x2000c5dc
 800fc24:	2000cf14 	.word	0x2000cf14

0800fc28 <pjpeg_decode_mcu>:
}

unsigned char pjpeg_decode_mcu(void) {
  uint8 status;

  if (gCallbackStatus)
 800fc28:	4bb1      	ldr	r3, [pc, #708]	; (800fef0 <pjpeg_decode_mcu+0x2c8>)
 800fc2a:	7818      	ldrb	r0, [r3, #0]
 800fc2c:	b920      	cbnz	r0, 800fc38 <pjpeg_decode_mcu+0x10>
    return gCallbackStatus;

  if (!gNumMCUSRemaining)
 800fc2e:	4bb1      	ldr	r3, [pc, #708]	; (800fef4 <pjpeg_decode_mcu+0x2cc>)
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	b913      	cbnz	r3, 800fc3a <pjpeg_decode_mcu+0x12>
    return PJPG_NO_MORE_BLOCKS;
 800fc34:	2001      	movs	r0, #1
 800fc36:	4770      	bx	lr
    return gCallbackStatus ? gCallbackStatus : status;

  gNumMCUSRemaining--;

  return 0;
}
 800fc38:	4770      	bx	lr
  if (gRestartInterval) {
 800fc3a:	4aaf      	ldr	r2, [pc, #700]	; (800fef8 <pjpeg_decode_mcu+0x2d0>)
 800fc3c:	8812      	ldrh	r2, [r2, #0]
unsigned char pjpeg_decode_mcu(void) {
 800fc3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc42:	b085      	sub	sp, #20
  if (gRestartInterval) {
 800fc44:	2a00      	cmp	r2, #0
 800fc46:	f000 851c 	beq.w	8010682 <pjpeg_decode_mcu+0xa5a>
    if (gRestartsLeft == 0) {
 800fc4a:	4bac      	ldr	r3, [pc, #688]	; (800fefc <pjpeg_decode_mcu+0x2d4>)
 800fc4c:	881b      	ldrh	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f001 8141 	beq.w	8010ed6 <pjpeg_decode_mcu+0x12ae>
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800fc54:	4aaa      	ldr	r2, [pc, #680]	; (800ff00 <pjpeg_decode_mcu+0x2d8>)
    gRestartsLeft--;
 800fc56:	3b01      	subs	r3, #1
 800fc58:	49a8      	ldr	r1, [pc, #672]	; (800fefc <pjpeg_decode_mcu+0x2d4>)
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800fc5a:	9203      	str	r2, [sp, #12]
 800fc5c:	7812      	ldrb	r2, [r2, #0]
    gRestartsLeft--;
 800fc5e:	800b      	strh	r3, [r1, #0]
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 800fc60:	2a00      	cmp	r2, #0
 800fc62:	f000 84db 	beq.w	801061c <pjpeg_decode_mcu+0x9f4>
  if (!gInBufLeft) {
 800fc66:	2300      	movs	r3, #0
 800fc68:	9301      	str	r3, [sp, #4]
 800fc6a:	9a01      	ldr	r2, [sp, #4]
 800fc6c:	4ba5      	ldr	r3, [pc, #660]	; (800ff04 <pjpeg_decode_mcu+0x2dc>)
 800fc6e:	9302      	str	r3, [sp, #8]
    uint8 compQuant = gCompQuant[componentID];
 800fc70:	4ba5      	ldr	r3, [pc, #660]	; (800ff08 <pjpeg_decode_mcu+0x2e0>)
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800fc72:	48a6      	ldr	r0, [pc, #664]	; (800ff0c <pjpeg_decode_mcu+0x2e4>)
    uint8 compQuant = gCompQuant[componentID];
 800fc74:	5c9c      	ldrb	r4, [r3, r2]
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800fc76:	4ba6      	ldr	r3, [pc, #664]	; (800ff10 <pjpeg_decode_mcu+0x2e8>)
 800fc78:	4aa6      	ldr	r2, [pc, #664]	; (800ff14 <pjpeg_decode_mcu+0x2ec>)
 800fc7a:	5d1e      	ldrb	r6, [r3, r4]
    uint8 compDCTab = gCompDCTab[componentID];
 800fc7c:	4ba6      	ldr	r3, [pc, #664]	; (800ff18 <pjpeg_decode_mcu+0x2f0>)
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800fc7e:	2e00      	cmp	r6, #0
 800fc80:	bf18      	it	ne
 800fc82:	4602      	movne	r2, r0
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800fc84:	49a5      	ldr	r1, [pc, #660]	; (800ff1c <pjpeg_decode_mcu+0x2f4>)
    uint8 compDCTab = gCompDCTab[componentID];
 800fc86:	5d1b      	ldrb	r3, [r3, r4]
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 800fc88:	4616      	mov	r6, r2
    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 800fc8a:	4aa5      	ldr	r2, [pc, #660]	; (800ff20 <pjpeg_decode_mcu+0x2f8>)
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	4ba5      	ldr	r3, [pc, #660]	; (800ff24 <pjpeg_decode_mcu+0x2fc>)
 800fc90:	48a5      	ldr	r0, [pc, #660]	; (800ff28 <pjpeg_decode_mcu+0x300>)
 800fc92:	bf04      	itt	eq
 800fc94:	4611      	moveq	r1, r2
 800fc96:	4618      	moveq	r0, r3
 800fc98:	f7fe fc54 	bl	800e544 <huffDecode>
 800fc9c:	4605      	mov	r5, r0
    if (numExtraBits)
 800fc9e:	f010 000f 	ands.w	r0, r0, #15
 800fca2:	f040 84da 	bne.w	801065a <pjpeg_decode_mcu+0xa32>
 800fca6:	3d01      	subs	r5, #1
 800fca8:	b2ed      	uxtb	r5, r5
 800fcaa:	2d0e      	cmp	r5, #14
 800fcac:	f200 83f5 	bhi.w	801049a <pjpeg_decode_mcu+0x872>
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800fcb0:	4b9e      	ldr	r3, [pc, #632]	; (800ff2c <pjpeg_decode_mcu+0x304>)
 800fcb2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800fcb6:	4283      	cmp	r3, r0
 800fcb8:	f240 83ef 	bls.w	801049a <pjpeg_decode_mcu+0x872>
 800fcbc:	4b9c      	ldr	r3, [pc, #624]	; (800ff30 <pjpeg_decode_mcu+0x308>)
 800fcbe:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800fcc2:	4403      	add	r3, r0
 800fcc4:	b21b      	sxth	r3, r3
    dc = dc + gLastDC[componentID];
 800fcc6:	9d02      	ldr	r5, [sp, #8]
    gCoeffBuf[0] = dc * pQ[0];
 800fcc8:	8832      	ldrh	r2, [r6, #0]
    dc = dc + gLastDC[componentID];
 800fcca:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    if (gReduce) {
 800fcce:	4999      	ldr	r1, [pc, #612]	; (800ff34 <pjpeg_decode_mcu+0x30c>)
    dc = dc + gLastDC[componentID];
 800fcd0:	fa10 f383 	uxtah	r3, r0, r3
    compACTab = gCompACTab[componentID];
 800fcd4:	4898      	ldr	r0, [pc, #608]	; (800ff38 <pjpeg_decode_mcu+0x310>)
    if (gReduce) {
 800fcd6:	7809      	ldrb	r1, [r1, #0]
    dc = dc + gLastDC[componentID];
 800fcd8:	b29b      	uxth	r3, r3
    compACTab = gCompACTab[componentID];
 800fcda:	5d00      	ldrb	r0, [r0, r4]
    gCoeffBuf[0] = dc * pQ[0];
 800fcdc:	fb12 f203 	smulbb	r2, r2, r3
    gLastDC[componentID] = dc;
 800fce0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    gCoeffBuf[0] = dc * pQ[0];
 800fce4:	4b95      	ldr	r3, [pc, #596]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fce6:	801a      	strh	r2, [r3, #0]
    if (gReduce) {
 800fce8:	2900      	cmp	r1, #0
 800fcea:	d038      	beq.n	800fd5e <pjpeg_decode_mcu+0x136>
 800fcec:	2800      	cmp	r0, #0
 800fcee:	4b94      	ldr	r3, [pc, #592]	; (800ff40 <pjpeg_decode_mcu+0x318>)
 800fcf0:	4a94      	ldr	r2, [pc, #592]	; (800ff44 <pjpeg_decode_mcu+0x31c>)
      for (k = 1; k < 64; k++) {
 800fcf2:	f04f 0401 	mov.w	r4, #1
 800fcf6:	bf18      	it	ne
 800fcf8:	461f      	movne	r7, r3
 800fcfa:	4b93      	ldr	r3, [pc, #588]	; (800ff48 <pjpeg_decode_mcu+0x320>)
 800fcfc:	bf08      	it	eq
 800fcfe:	4617      	moveq	r7, r2
 800fd00:	4a92      	ldr	r2, [pc, #584]	; (800ff4c <pjpeg_decode_mcu+0x324>)
 800fd02:	bf14      	ite	ne
 800fd04:	461e      	movne	r6, r3
 800fd06:	4616      	moveq	r6, r2
 800fd08:	e00a      	b.n	800fd20 <pjpeg_decode_mcu+0xf8>
          if (r == 15) {
 800fd0a:	2b0f      	cmp	r3, #15
 800fd0c:	f040 83c7 	bne.w	801049e <pjpeg_decode_mcu+0x876>
            if ((k + 16) > 64)
 800fd10:	2c30      	cmp	r4, #48	; 0x30
            k += (16 - 1);
 800fd12:	b2d4      	uxtb	r4, r2
            if ((k + 16) > 64)
 800fd14:	d81a      	bhi.n	800fd4c <pjpeg_decode_mcu+0x124>
      for (k = 1; k < 64; k++) {
 800fd16:	3401      	adds	r4, #1
 800fd18:	b2e4      	uxtb	r4, r4
 800fd1a:	2c3f      	cmp	r4, #63	; 0x3f
 800fd1c:	f200 83bf 	bhi.w	801049e <pjpeg_decode_mcu+0x876>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800fd20:	4639      	mov	r1, r7
 800fd22:	4630      	mov	r0, r6
 800fd24:	f7fe fc0e 	bl	800e544 <huffDecode>
 800fd28:	4605      	mov	r5, r0
          if (r == 15) {
 800fd2a:	f3c0 1307 	ubfx	r3, r0, #4, #8
        if (numExtraBits)
 800fd2e:	f010 000f 	ands.w	r0, r0, #15
            k += (16 - 1);
 800fd32:	f104 020f 	add.w	r2, r4, #15
        if (numExtraBits)
 800fd36:	d0e8      	beq.n	800fd0a <pjpeg_decode_mcu+0xe2>
        r = s >> 4;
 800fd38:	f3c5 1507 	ubfx	r5, r5, #4, #8
  return getBits(numBits, 1);
 800fd3c:	f7fe fd86 	bl	800e84c <getBits.constprop.6>
            if ((k + r) > 63)
 800fd40:	1963      	adds	r3, r4, r5
          if (r) {
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	d0e7      	beq.n	800fd16 <pjpeg_decode_mcu+0xee>
            if ((k + r) > 63)
 800fd46:	2b3f      	cmp	r3, #63	; 0x3f
            k = (uint8)(k + r);
 800fd48:	b2dc      	uxtb	r4, r3
            if ((k + r) > 63)
 800fd4a:	dde4      	ble.n	800fd16 <pjpeg_decode_mcu+0xee>
  int16 *pSrc = gCoeffBuf;
 800fd4c:	201c      	movs	r0, #28
    return gCallbackStatus ? gCallbackStatus : status;
 800fd4e:	4b68      	ldr	r3, [pc, #416]	; (800fef0 <pjpeg_decode_mcu+0x2c8>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	bf18      	it	ne
 800fd56:	4618      	movne	r0, r3
}
 800fd58:	b005      	add	sp, #20
 800fd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	4b77      	ldr	r3, [pc, #476]	; (800ff40 <pjpeg_decode_mcu+0x318>)
 800fd62:	4a78      	ldr	r2, [pc, #480]	; (800ff44 <pjpeg_decode_mcu+0x31c>)
      for (k = 1; k < 64; k++) {
 800fd64:	f04f 0401 	mov.w	r4, #1
 800fd68:	bf18      	it	ne
 800fd6a:	4698      	movne	r8, r3
 800fd6c:	4b76      	ldr	r3, [pc, #472]	; (800ff48 <pjpeg_decode_mcu+0x320>)
 800fd6e:	bf08      	it	eq
 800fd70:	4690      	moveq	r8, r2
 800fd72:	4a76      	ldr	r2, [pc, #472]	; (800ff4c <pjpeg_decode_mcu+0x324>)
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800fd74:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800ff2c <pjpeg_decode_mcu+0x304>
 800fd78:	bf14      	ite	ne
 800fd7a:	461f      	movne	r7, r3
 800fd7c:	4617      	moveq	r7, r2
 800fd7e:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800ff30 <pjpeg_decode_mcu+0x308>
 800fd82:	9600      	str	r6, [sp, #0]
 800fd84:	e084      	b.n	800fe90 <pjpeg_decode_mcu+0x268>
          if (r == 15) {
 800fd86:	f3c0 1b07 	ubfx	fp, r0, #4, #8
 800fd8a:	f1bb 0f0f 	cmp.w	fp, #15
 800fd8e:	f040 847f 	bne.w	8010690 <pjpeg_decode_mcu+0xa68>
            if ((k + 16) > 64)
 800fd92:	2c30      	cmp	r4, #48	; 0x30
 800fd94:	d8da      	bhi.n	800fd4c <pjpeg_decode_mcu+0x124>
              gCoeffBuf[ZAG[k++]] = 0;
 800fd96:	496e      	ldr	r1, [pc, #440]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fd98:	1c62      	adds	r2, r4, #1
 800fd9a:	4e68      	ldr	r6, [pc, #416]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fd9c:	1ca3      	adds	r3, r4, #2
 800fd9e:	5709      	ldrsb	r1, [r1, r4]
 800fda0:	b2d2      	uxtb	r2, r2
 800fda2:	f104 0e03 	add.w	lr, r4, #3
 800fda6:	f104 0c04 	add.w	ip, r4, #4
 800fdaa:	f826 5011 	strh.w	r5, [r6, r1, lsl #1]
 800fdae:	1d60      	adds	r0, r4, #5
 800fdb0:	4967      	ldr	r1, [pc, #412]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	fa5f fe8e 	uxtb.w	lr, lr
 800fdb8:	f104 0b07 	add.w	fp, r4, #7
 800fdbc:	460e      	mov	r6, r1
 800fdbe:	568a      	ldrsb	r2, [r1, r2]
 800fdc0:	1da1      	adds	r1, r4, #6
 800fdc2:	fa5f fc8c 	uxtb.w	ip, ip
 800fdc6:	b2c0      	uxtb	r0, r0
 800fdc8:	56f3      	ldrsb	r3, [r6, r3]
 800fdca:	b2c9      	uxtb	r1, r1
 800fdcc:	f916 e00e 	ldrsb.w	lr, [r6, lr]
 800fdd0:	f916 c00c 	ldrsb.w	ip, [r6, ip]
 800fdd4:	fa5f fb8b 	uxtb.w	fp, fp
 800fdd8:	5630      	ldrsb	r0, [r6, r0]
 800fdda:	5671      	ldrsb	r1, [r6, r1]
 800fddc:	4e57      	ldr	r6, [pc, #348]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fdde:	f826 5012 	strh.w	r5, [r6, r2, lsl #1]
 800fde2:	f104 0208 	add.w	r2, r4, #8
 800fde6:	4e5a      	ldr	r6, [pc, #360]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fde8:	b2d2      	uxtb	r2, r2
 800fdea:	f916 b00b 	ldrsb.w	fp, [r6, fp]
 800fdee:	4e53      	ldr	r6, [pc, #332]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fdf0:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
 800fdf4:	f104 0309 	add.w	r3, r4, #9
 800fdf8:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800fdfc:	4e54      	ldr	r6, [pc, #336]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	f916 e002 	ldrsb.w	lr, [r6, r2]
 800fe04:	f104 020a 	add.w	r2, r4, #10
 800fe08:	4e4c      	ldr	r6, [pc, #304]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe0a:	b2d2      	uxtb	r2, r2
 800fe0c:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 800fe10:	4e4f      	ldr	r6, [pc, #316]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fe12:	f916 c003 	ldrsb.w	ip, [r6, r3]
 800fe16:	f104 030b 	add.w	r3, r4, #11
 800fe1a:	4e48      	ldr	r6, [pc, #288]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
 800fe22:	4e4b      	ldr	r6, [pc, #300]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fe24:	56b0      	ldrsb	r0, [r6, r2]
 800fe26:	f104 020c 	add.w	r2, r4, #12
 800fe2a:	4e44      	ldr	r6, [pc, #272]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe2c:	b2d2      	uxtb	r2, r2
 800fe2e:	f826 5011 	strh.w	r5, [r6, r1, lsl #1]
 800fe32:	4e47      	ldr	r6, [pc, #284]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fe34:	56f1      	ldrsb	r1, [r6, r3]
 800fe36:	f104 030d 	add.w	r3, r4, #13
 800fe3a:	4e40      	ldr	r6, [pc, #256]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe3c:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800fe40:	fa5f fb83 	uxtb.w	fp, r3
 800fe44:	4e42      	ldr	r6, [pc, #264]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fe46:	f104 030e 	add.w	r3, r4, #14
 800fe4a:	340f      	adds	r4, #15
 800fe4c:	56b2      	ldrsb	r2, [r6, r2]
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	4e3a      	ldr	r6, [pc, #232]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe52:	b2e4      	uxtb	r4, r4
 800fe54:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800fe58:	4e3d      	ldr	r6, [pc, #244]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fe5a:	f916 e00b 	ldrsb.w	lr, [r6, fp]
 800fe5e:	4e37      	ldr	r6, [pc, #220]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe60:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 800fe64:	4e3a      	ldr	r6, [pc, #232]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fe66:	f916 c003 	ldrsb.w	ip, [r6, r3]
 800fe6a:	4b34      	ldr	r3, [pc, #208]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fe6c:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
 800fe70:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
 800fe74:	4619      	mov	r1, r3
 800fe76:	f823 5012 	strh.w	r5, [r3, r2, lsl #1]
 800fe7a:	5733      	ldrsb	r3, [r6, r4]
      for (k = 1; k < 64; k++) {
 800fe7c:	3401      	adds	r4, #1
              gCoeffBuf[ZAG[k++]] = 0;
 800fe7e:	f821 501e 	strh.w	r5, [r1, lr, lsl #1]
      for (k = 1; k < 64; k++) {
 800fe82:	b2e4      	uxtb	r4, r4
              gCoeffBuf[ZAG[k++]] = 0;
 800fe84:	f821 501c 	strh.w	r5, [r1, ip, lsl #1]
 800fe88:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
      for (k = 1; k < 64; k++) {
 800fe8c:	2c3f      	cmp	r4, #63	; 0x3f
 800fe8e:	d828      	bhi.n	800fee2 <pjpeg_decode_mcu+0x2ba>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800fe90:	4641      	mov	r1, r8
 800fe92:	4638      	mov	r0, r7
 800fe94:	f7fe fb56 	bl	800e544 <huffDecode>
        if (numExtraBits)
 800fe98:	f010 050f 	ands.w	r5, r0, #15
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 800fe9c:	4683      	mov	fp, r0
        if (numExtraBits)
 800fe9e:	f43f af72 	beq.w	800fd86 <pjpeg_decode_mcu+0x15e>
  return getBits(numBits, 1);
 800fea2:	4628      	mov	r0, r5
 800fea4:	f7fe fcd2 	bl	800e84c <getBits.constprop.6>
        r = s >> 4;
 800fea8:	f3cb 1307 	ubfx	r3, fp, #4, #8
          if (r) {
 800feac:	2b00      	cmp	r3, #0
 800feae:	f040 82dc 	bne.w	801046a <pjpeg_decode_mcu+0x842>
 800feb2:	3d01      	subs	r5, #1
 800feb4:	b2ed      	uxtb	r5, r5
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800feb6:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 800feba:	4283      	cmp	r3, r0
 800febc:	bf84      	itt	hi
 800febe:	f83a 3015 	ldrhhi.w	r3, [sl, r5, lsl #1]
 800fec2:	18c0      	addhi	r0, r0, r3
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800fec4:	9b00      	ldr	r3, [sp, #0]
 800fec6:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800feca:	b200      	sxth	r0, r0
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800fecc:	4b20      	ldr	r3, [pc, #128]	; (800ff50 <pjpeg_decode_mcu+0x328>)
 800fece:	fb12 f000 	smulbb	r0, r2, r0
 800fed2:	4a1a      	ldr	r2, [pc, #104]	; (800ff3c <pjpeg_decode_mcu+0x314>)
 800fed4:	571b      	ldrsb	r3, [r3, r4]
      for (k = 1; k < 64; k++) {
 800fed6:	3401      	adds	r4, #1
 800fed8:	b2e4      	uxtb	r4, r4
          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 800feda:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
      for (k = 1; k < 64; k++) {
 800fede:	2c3f      	cmp	r4, #63	; 0x3f
 800fee0:	d9d6      	bls.n	800fe90 <pjpeg_decode_mcu+0x268>
 800fee2:	4e1c      	ldr	r6, [pc, #112]	; (800ff54 <pjpeg_decode_mcu+0x32c>)
  x += 128L;
 800fee4:	2780      	movs	r7, #128	; 0x80
  x += 128L;
 800fee6:	f44f 7eb5 	mov.w	lr, #362	; 0x16a
 800feea:	eb06 0c07 	add.w	ip, r6, r7
 800feee:	e045      	b.n	800ff7c <pjpeg_decode_mcu+0x354>
 800fef0:	2000c5dd 	.word	0x2000c5dd
 800fef4:	2000ce00 	.word	0x2000ce00
 800fef8:	2000cf06 	.word	0x2000cf06
 800fefc:	2000cf08 	.word	0x2000cf08
 800ff00:	2000cdf6 	.word	0x2000cdf6
 800ff04:	2000cae8 	.word	0x2000cae8
 800ff08:	2000cdf0 	.word	0x2000cdf0
 800ff0c:	2000ce84 	.word	0x2000ce84
 800ff10:	2000c674 	.word	0x2000c674
 800ff14:	2000ce04 	.word	0x2000ce04
 800ff18:	2000c664 	.word	0x2000c664
 800ff1c:	2000c7d0 	.word	0x2000c7d0
 800ff20:	2000c7c0 	.word	0x2000c7c0
 800ff24:	2000c680 	.word	0x2000c680
 800ff28:	2000c6d0 	.word	0x2000c6d0
 800ff2c:	080323c8 	.word	0x080323c8
 800ff30:	080323e8 	.word	0x080323e8
 800ff34:	2000cf04 	.word	0x2000cf04
 800ff38:	2000c660 	.word	0x2000c660
 800ff3c:	2000c5e0 	.word	0x2000c5e0
 800ff40:	2000c8e0 	.word	0x2000c8e0
 800ff44:	2000c7e0 	.word	0x2000c7e0
 800ff48:	2000c770 	.word	0x2000c770
 800ff4c:	2000c720 	.word	0x2000c720
 800ff50:	08032428 	.word	0x08032428
 800ff54:	2000c5f0 	.word	0x2000c5f0
      *(pSrc + 1) = src0;
 800ff58:	f826 5c0e 	strh.w	r5, [r6, #-14]
 800ff5c:	3610      	adds	r6, #16
      *(pSrc + 2) = src0;
 800ff5e:	f826 5c1c 	strh.w	r5, [r6, #-28]
      *(pSrc + 3) = src0;
 800ff62:	f826 5c1a 	strh.w	r5, [r6, #-26]
      *(pSrc + 4) = src0;
 800ff66:	f826 5c18 	strh.w	r5, [r6, #-24]
      *(pSrc + 5) = src0;
 800ff6a:	f826 5c16 	strh.w	r5, [r6, #-22]
      *(pSrc + 6) = src0;
 800ff6e:	f826 5c14 	strh.w	r5, [r6, #-20]
      *(pSrc + 7) = src0;
 800ff72:	f826 5c12 	strh.w	r5, [r6, #-18]
  for (i = 0; i < 8; i++) {
 800ff76:	45b4      	cmp	ip, r6
 800ff78:	f000 80b7 	beq.w	80100ea <pjpeg_decode_mcu+0x4c2>
    if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) ==
 800ff7c:	f936 9c0e 	ldrsh.w	r9, [r6, #-14]
 800ff80:	f936 8c0c 	ldrsh.w	r8, [r6, #-12]
 800ff84:	f936 2c0a 	ldrsh.w	r2, [r6, #-10]
 800ff88:	ea48 0309 	orr.w	r3, r8, r9
 800ff8c:	f936 0c08 	ldrsh.w	r0, [r6, #-8]
 800ff90:	f936 ac06 	ldrsh.w	sl, [r6, #-6]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	f936 1c04 	ldrsh.w	r1, [r6, #-4]
 800ff9a:	f936 4c02 	ldrsh.w	r4, [r6, #-2]
 800ff9e:	4303      	orrs	r3, r0
 800ffa0:	f936 5c10 	ldrsh.w	r5, [r6, #-16]
 800ffa4:	ea4a 0303 	orr.w	r3, sl, r3
 800ffa8:	430b      	orrs	r3, r1
 800ffaa:	4323      	orrs	r3, r4
 800ffac:	d0d4      	beq.n	800ff58 <pjpeg_decode_mcu+0x330>
      int16 x4 = src4 - src7;
 800ffae:	fa1f fa8a 	uxth.w	sl, sl
  x += 128L;
 800ffb2:	f04f 0bc4 	mov.w	fp, #196	; 0xc4
      int16 x5 = src5 + src6;
 800ffb6:	fa1f f989 	uxth.w	r9, r9
 800ffba:	3610      	adds	r6, #16
      int16 x4 = src4 - src7;
 800ffbc:	b293      	uxth	r3, r2
      int16 x5 = src5 + src6;
 800ffbe:	b2a4      	uxth	r4, r4
      int16 x4 = src4 - src7;
 800ffc0:	ebaa 0203 	sub.w	r2, sl, r3
      int16 x7 = src4 + src7;
 800ffc4:	4453      	add	r3, sl
      int16 x6 = src5 - src6;
 800ffc6:	eba9 0a04 	sub.w	sl, r9, r4
      int16 x5 = src5 + src6;
 800ffca:	444c      	add	r4, r9
      int16 x4 = src4 - src7;
 800ffcc:	b292      	uxth	r2, r2
      int16 x6 = src5 - src6;
 800ffce:	fa1f fa8a 	uxth.w	sl, sl
      int16 x5 = src5 + src6;
 800ffd2:	b2a4      	uxth	r4, r4
      int16 tmp1 = imul_b5(x4 - x6);
 800ffd4:	eba2 090a 	sub.w	r9, r2, sl
      int16 x6 = src5 - src6;
 800ffd8:	fa0f fa8a 	sxth.w	sl, sl
      int16 x4 = src4 - src7;
 800ffdc:	b212      	sxth	r2, r2
  x += 128L;
 800ffde:	fb19 790b 	smlabb	r9, r9, fp, r7
      int16 x7 = src4 + src7;
 800ffe2:	b29b      	uxth	r3, r3
      int16 x12 = src2 - src3;
 800ffe4:	fa1f f888 	uxth.w	r8, r8
  long r = (unsigned long)x >> 8U;
 800ffe8:	ea4f 2b19 	mov.w	fp, r9, lsr #8
  if (x < 0)
 800ffec:	f1b9 0f00 	cmp.w	r9, #0
  x += 128L;
 800fff0:	f240 1915 	movw	r9, #277	; 0x115
      int16 x12 = src2 - src3;
 800fff4:	b289      	uxth	r1, r1
    r |= ~(~(unsigned long)0U >> 8U);
 800fff6:	bfb8      	it	lt
 800fff8:	f04b 4b7f 	orrlt.w	fp, fp, #4278190080	; 0xff000000
      int16 x30 = src0 + src1;
 800fffc:	b2ad      	uxth	r5, r5
  x += 128L;
 800fffe:	fb1a 7a09 	smlabb	sl, sl, r9, r7
      int16 x30 = src0 + src1;
 8010002:	b280      	uxth	r0, r0
      int16 stg26 = imul_b4(x6) - tmp1;
 8010004:	fa1f fb8b 	uxth.w	fp, fp
  long r = (unsigned long)x >> 8U;
 8010008:	ea4f 291a 	mov.w	r9, sl, lsr #8
  if (x < 0)
 801000c:	f1ba 0f00 	cmp.w	sl, #0
  x += 128L;
 8010010:	f240 2a9d 	movw	sl, #669	; 0x29d
    r |= ~(~(unsigned long)0U >> 8U);
 8010014:	bfb8      	it	lt
 8010016:	f049 497f 	orrlt.w	r9, r9, #4278190080	; 0xff000000
  x += 128L;
 801001a:	fb12 720a 	smlabb	r2, r2, sl, r7
      int16 stg26 = imul_b4(x6) - tmp1;
 801001e:	eba9 090b 	sub.w	r9, r9, fp
  long r = (unsigned long)x >> 8U;
 8010022:	ea4f 2a12 	mov.w	sl, r2, lsr #8
  if (x < 0)
 8010026:	2a00      	cmp	r2, #0
      int16 x17 = x5 + x7;
 8010028:	eb04 0203 	add.w	r2, r4, r3
      int16 x15 = x5 - x7;
 801002c:	eba4 0303 	sub.w	r3, r4, r3
    r |= ~(~(unsigned long)0U >> 8U);
 8010030:	bfb8      	it	lt
 8010032:	f04a 4a7f 	orrlt.w	sl, sl, #4278190080	; 0xff000000
      int16 stg26 = imul_b4(x6) - tmp1;
 8010036:	fa1f f989 	uxth.w	r9, r9
  x += 128L;
 801003a:	fb13 730e 	smlabb	r3, r3, lr, r7
      int16 x24 = tmp1 - imul_b2(x4);
 801003e:	ebab 0b0a 	sub.w	fp, fp, sl
      int16 x17 = x5 + x7;
 8010042:	fa1f fa82 	uxth.w	sl, r2
  long r = (unsigned long)x >> 8U;
 8010046:	0a1c      	lsrs	r4, r3, #8
  if (x < 0)
 8010048:	2b00      	cmp	r3, #0
      int16 x12 = src2 - src3;
 801004a:	eba8 0301 	sub.w	r3, r8, r1
      int16 x24 = tmp1 - imul_b2(x4);
 801004e:	fa1f f28b 	uxth.w	r2, fp
      int16 tmp2 = stg26 - x17;
 8010052:	eba9 090a 	sub.w	r9, r9, sl
    r |= ~(~(unsigned long)0U >> 8U);
 8010056:	bfb8      	it	lt
 8010058:	f044 447f 	orrlt.w	r4, r4, #4278190080	; 0xff000000
  x += 128L;
 801005c:	fb13 7b0e 	smlabb	fp, r3, lr, r7
      int16 x13 = src2 + src3;
 8010060:	4441      	add	r1, r8
      int16 tmp2 = stg26 - x17;
 8010062:	fa1f f989 	uxth.w	r9, r9
      int16 x30 = src0 + src1;
 8010066:	eb00 0805 	add.w	r8, r0, r5
  long r = (unsigned long)x >> 8U;
 801006a:	ea4f 231b 	mov.w	r3, fp, lsr #8
  if (x < 0)
 801006e:	f1bb 0f00 	cmp.w	fp, #0
      int16 x13 = src2 + src3;
 8010072:	b289      	uxth	r1, r1
      int16 x31 = src0 - src1;
 8010074:	eba5 0000 	sub.w	r0, r5, r0
    r |= ~(~(unsigned long)0U >> 8U);
 8010078:	bfb8      	it	lt
 801007a:	f043 437f 	orrlt.w	r3, r3, #4278190080	; 0xff000000
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 801007e:	eba4 0409 	sub.w	r4, r4, r9
      int16 x30 = src0 + src1;
 8010082:	fa1f f888 	uxth.w	r8, r8
      int16 x32 = imul_b1_b3(x12) - x13;
 8010086:	1a5b      	subs	r3, r3, r1
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 8010088:	b2a4      	uxth	r4, r4
      int16 x31 = src0 - src1;
 801008a:	b280      	uxth	r0, r0
      int16 x40 = x30 + x13;
 801008c:	eb01 0508 	add.w	r5, r1, r8
      int16 x32 = imul_b1_b3(x12) - x13;
 8010090:	b29b      	uxth	r3, r3
      int16 x43 = x30 - x13;
 8010092:	eba8 0801 	sub.w	r8, r8, r1
      int16 x44 = tmp3 + x24;
 8010096:	4422      	add	r2, r4
      int16 x40 = x30 + x13;
 8010098:	b2ad      	uxth	r5, r5
      int16 x41 = x31 + x32;
 801009a:	1819      	adds	r1, r3, r0
      int16 x42 = x31 - x32;
 801009c:	1ac0      	subs	r0, r0, r3
      int16 x43 = x30 - x13;
 801009e:	fa1f f888 	uxth.w	r8, r8
      *(pSrc + 0) = x40 + x17;
 80100a2:	eb05 0b0a 	add.w	fp, r5, sl
      int16 x44 = tmp3 + x24;
 80100a6:	b292      	uxth	r2, r2
      *(pSrc + 7) = x40 - x17;
 80100a8:	eba5 050a 	sub.w	r5, r5, sl
      int16 x41 = x31 + x32;
 80100ac:	b289      	uxth	r1, r1
      *(pSrc + 0) = x40 + x17;
 80100ae:	f826 bc20 	strh.w	fp, [r6, #-32]
      int16 x42 = x31 - x32;
 80100b2:	b280      	uxth	r0, r0
      *(pSrc + 3) = x43 - x44;
 80100b4:	eba8 0302 	sub.w	r3, r8, r2
      *(pSrc + 1) = x41 + tmp2;
 80100b8:	eb01 0a09 	add.w	sl, r1, r9
      *(pSrc + 4) = x43 + x44;
 80100bc:	4442      	add	r2, r8
      *(pSrc + 6) = x41 - tmp2;
 80100be:	eba1 0109 	sub.w	r1, r1, r9
      *(pSrc + 2) = x42 + tmp3;
 80100c2:	eb00 0804 	add.w	r8, r0, r4
      *(pSrc + 5) = x42 - tmp3;
 80100c6:	1b00      	subs	r0, r0, r4
      *(pSrc + 1) = x41 + tmp2;
 80100c8:	f826 ac1e 	strh.w	sl, [r6, #-30]
      *(pSrc + 6) = x41 - tmp2;
 80100cc:	f826 1c14 	strh.w	r1, [r6, #-20]
      *(pSrc + 2) = x42 + tmp3;
 80100d0:	f826 8c1c 	strh.w	r8, [r6, #-28]
      *(pSrc + 5) = x42 - tmp3;
 80100d4:	f826 0c16 	strh.w	r0, [r6, #-22]
      *(pSrc + 7) = x40 - x17;
 80100d8:	f826 5c12 	strh.w	r5, [r6, #-18]
      *(pSrc + 3) = x43 - x44;
 80100dc:	f826 3c1a 	strh.w	r3, [r6, #-26]
      *(pSrc + 4) = x43 + x44;
 80100e0:	f826 2c18 	strh.w	r2, [r6, #-24]
  for (i = 0; i < 8; i++) {
 80100e4:	45b4      	cmp	ip, r6
 80100e6:	f47f af49 	bne.w	800ff7c <pjpeg_decode_mcu+0x354>
 80100ea:	4d03      	ldr	r5, [pc, #12]	; (80100f8 <pjpeg_decode_mcu+0x4d0>)
  x += 128L;
 80100ec:	2680      	movs	r6, #128	; 0x80
  x += 128L;
 80100ee:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
 80100f2:	f105 0710 	add.w	r7, r5, #16
 80100f6:	e029      	b.n	801014c <pjpeg_decode_mcu+0x524>
 80100f8:	2000c5de 	.word	0x2000c5de
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 80100fc:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 8010100:	fa1f fe8e 	uxth.w	lr, lr
  if (x < 0)
 8010104:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 8010108:	ea4f 12de 	mov.w	r2, lr, lsr #7
  if (x < 0)
 801010c:	d003      	beq.n	8010116 <pjpeg_decode_mcu+0x4ee>
    r |= replicateSignBit16(n);
 801010e:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8010112:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 8010116:	3280      	adds	r2, #128	; 0x80
 8010118:	b292      	uxth	r2, r2
  if ((uint16)s > 255U) {
 801011a:	2aff      	cmp	r2, #255	; 0xff
 801011c:	f240 829b 	bls.w	8010656 <pjpeg_decode_mcu+0xa2e>
      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 8010120:	b211      	sxth	r1, r2
    if (s < 0)
 8010122:	2900      	cmp	r1, #0
 8010124:	db03      	blt.n	801012e <pjpeg_decode_mcu+0x506>
    else if (s > 255)
 8010126:	29ff      	cmp	r1, #255	; 0xff
 8010128:	f340 8295 	ble.w	8010656 <pjpeg_decode_mcu+0xa2e>
 801012c:	23ff      	movs	r3, #255	; 0xff
  for (i = 0; i < 8; i++) {
 801012e:	42bd      	cmp	r5, r7
      *(pSrc + 0 * 8) = c;
 8010130:	802b      	strh	r3, [r5, #0]
      *(pSrc + 1 * 8) = c;
 8010132:	822b      	strh	r3, [r5, #16]
      *(pSrc + 2 * 8) = c;
 8010134:	842b      	strh	r3, [r5, #32]
      *(pSrc + 3 * 8) = c;
 8010136:	862b      	strh	r3, [r5, #48]	; 0x30
      *(pSrc + 4 * 8) = c;
 8010138:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
      *(pSrc + 5 * 8) = c;
 801013c:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
      *(pSrc + 6 * 8) = c;
 8010140:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
      *(pSrc + 7 * 8) = c;
 8010144:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
  for (i = 0; i < 8; i++) {
 8010148:	f000 8183 	beq.w	8010452 <pjpeg_decode_mcu+0x82a>
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 801014c:	f9b5 9012 	ldrsh.w	r9, [r5, #18]
 8010150:	f9b5 8022 	ldrsh.w	r8, [r5, #34]	; 0x22
 8010154:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8010158:	ea48 0309 	orr.w	r3, r8, r9
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 801015c:	f9b5 4042 	ldrsh.w	r4, [r5, #66]	; 0x42
 8010160:	f9b5 a052 	ldrsh.w	sl, [r5, #82]	; 0x52
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8010164:	4313      	orrs	r3, r2
 8010166:	f9b5 0062 	ldrsh.w	r0, [r5, #98]	; 0x62
 801016a:	f9b5 1072 	ldrsh.w	r1, [r5, #114]	; 0x72
 801016e:	4323      	orrs	r3, r4
 8010170:	f835 ef02 	ldrh.w	lr, [r5, #2]!
 8010174:	ea4a 0303 	orr.w	r3, sl, r3
 8010178:	4303      	orrs	r3, r0
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 801017a:	430b      	orrs	r3, r1
 801017c:	d0be      	beq.n	80100fc <pjpeg_decode_mcu+0x4d4>
      int16 x4 = src4 - src7;
 801017e:	fa1f fa8a 	uxth.w	sl, sl
      int16 x5 = src5 + src6;
 8010182:	fa1f f389 	uxth.w	r3, r9
 8010186:	fa1f fb81 	uxth.w	fp, r1
      int16 x4 = src4 - src7;
 801018a:	b292      	uxth	r2, r2
      int16 x6 = src5 - src6;
 801018c:	eba3 090b 	sub.w	r9, r3, fp
      int16 x5 = src5 + src6;
 8010190:	449b      	add	fp, r3
      int16 x4 = src4 - src7;
 8010192:	ebaa 0102 	sub.w	r1, sl, r2
      int16 x7 = src4 + src7;
 8010196:	4452      	add	r2, sl
      int16 x6 = src5 - src6;
 8010198:	fa1f f989 	uxth.w	r9, r9
  x += 128L;
 801019c:	f04f 0ac4 	mov.w	sl, #196	; 0xc4
      int16 x4 = src4 - src7;
 80101a0:	b289      	uxth	r1, r1
      int16 x5 = src5 + src6;
 80101a2:	fa1f fb8b 	uxth.w	fp, fp
      int16 tmp1 = imul_b5(x4 - x6);
 80101a6:	eba1 0309 	sub.w	r3, r1, r9
      int16 x6 = src5 - src6;
 80101aa:	fa0f f989 	sxth.w	r9, r9
      int16 x4 = src4 - src7;
 80101ae:	b209      	sxth	r1, r1
  x += 128L;
 80101b0:	fb13 630a 	smlabb	r3, r3, sl, r6
      int16 x7 = src4 + src7;
 80101b4:	b292      	uxth	r2, r2
      int16 x12 = src2 - src3;
 80101b6:	fa1f f888 	uxth.w	r8, r8
  long r = (unsigned long)x >> 8U;
 80101ba:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  if (x < 0)
 80101be:	2b00      	cmp	r3, #0
  x += 128L;
 80101c0:	f240 1315 	movw	r3, #277	; 0x115
      int16 x12 = src2 - src3;
 80101c4:	b280      	uxth	r0, r0
    r |= ~(~(unsigned long)0U >> 8U);
 80101c6:	bfb8      	it	lt
 80101c8:	f04a 4a7f 	orrlt.w	sl, sl, #4278190080	; 0xff000000
      int16 x30 = src0 + src1;
 80101cc:	b2a4      	uxth	r4, r4
  x += 128L;
 80101ce:	fb19 6903 	smlabb	r9, r9, r3, r6
      int16 stg26 = imul_b4(x6) - tmp1;
 80101d2:	fa1f fa8a 	uxth.w	sl, sl
  long r = (unsigned long)x >> 8U;
 80101d6:	ea4f 2319 	mov.w	r3, r9, lsr #8
  if (x < 0)
 80101da:	f1b9 0f00 	cmp.w	r9, #0
  x += 128L;
 80101de:	f240 299d 	movw	r9, #669	; 0x29d
    r |= ~(~(unsigned long)0U >> 8U);
 80101e2:	bfb8      	it	lt
 80101e4:	f043 437f 	orrlt.w	r3, r3, #4278190080	; 0xff000000
  x += 128L;
 80101e8:	fb11 6109 	smlabb	r1, r1, r9, r6
      int16 stg26 = imul_b4(x6) - tmp1;
 80101ec:	eba3 030a 	sub.w	r3, r3, sl
  long r = (unsigned long)x >> 8U;
 80101f0:	ea4f 2911 	mov.w	r9, r1, lsr #8
  if (x < 0)
 80101f4:	2900      	cmp	r1, #0
      int16 x17 = x5 + x7;
 80101f6:	eb0b 0102 	add.w	r1, fp, r2
      int16 x15 = x5 - x7;
 80101fa:	ebab 0202 	sub.w	r2, fp, r2
    r |= ~(~(unsigned long)0U >> 8U);
 80101fe:	bfb8      	it	lt
 8010200:	f049 497f 	orrlt.w	r9, r9, #4278190080	; 0xff000000
      int16 stg26 = imul_b4(x6) - tmp1;
 8010204:	b29b      	uxth	r3, r3
  x += 128L;
 8010206:	fb12 620c 	smlabb	r2, r2, ip, r6
      int16 x24 = tmp1 - imul_b2(x4);
 801020a:	ebaa 0a09 	sub.w	sl, sl, r9
      int16 x17 = x5 + x7;
 801020e:	fa1f f981 	uxth.w	r9, r1
  if (x < 0)
 8010212:	2a00      	cmp	r2, #0
  long r = (unsigned long)x >> 8U;
 8010214:	ea4f 2112 	mov.w	r1, r2, lsr #8
      int16 x12 = src2 - src3;
 8010218:	eba8 0200 	sub.w	r2, r8, r0
      int16 x13 = src2 + src3;
 801021c:	4440      	add	r0, r8
    r |= ~(~(unsigned long)0U >> 8U);
 801021e:	bfb8      	it	lt
 8010220:	f041 417f 	orrlt.w	r1, r1, #4278190080	; 0xff000000
      int16 tmp2 = stg26 - x17;
 8010224:	eba3 0309 	sub.w	r3, r3, r9
  x += 128L;
 8010228:	fb12 6b0c 	smlabb	fp, r2, ip, r6
      int16 x30 = src0 + src1;
 801022c:	eb04 020e 	add.w	r2, r4, lr
      int16 x13 = src2 + src3;
 8010230:	b280      	uxth	r0, r0
      int16 x31 = src0 - src1;
 8010232:	ebae 0404 	sub.w	r4, lr, r4
      int16 x30 = src0 + src1;
 8010236:	b292      	uxth	r2, r2
  if (x < 0)
 8010238:	f1bb 0f00 	cmp.w	fp, #0
  long r = (unsigned long)x >> 8U;
 801023c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8010240:	f109 0b40 	add.w	fp, r9, #64	; 0x40
      int16 x40 = x30 + x13;
 8010244:	eb00 0802 	add.w	r8, r0, r2
      int16 tmp2 = stg26 - x17;
 8010248:	b29b      	uxth	r3, r3
    r |= ~(~(unsigned long)0U >> 8U);
 801024a:	bfb8      	it	lt
 801024c:	f04e 4e7f 	orrlt.w	lr, lr, #4278190080	; 0xff000000
      int16 x31 = src0 - src1;
 8010250:	b2a4      	uxth	r4, r4
      int16 x40 = x30 + x13;
 8010252:	fa1f f888 	uxth.w	r8, r8
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 8010256:	1ac9      	subs	r1, r1, r3
      int16 x32 = imul_b1_b3(x12) - x13;
 8010258:	ebae 0e00 	sub.w	lr, lr, r0
      int16 x24 = tmp1 - imul_b2(x4);
 801025c:	fa1f fa8a 	uxth.w	sl, sl
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8010260:	44c3      	add	fp, r8
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 8010262:	b289      	uxth	r1, r1
      int16 x32 = imul_b1_b3(x12) - x13;
 8010264:	fa1f fe8e 	uxth.w	lr, lr
      int16 x43 = x30 - x13;
 8010268:	1a12      	subs	r2, r2, r0
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 801026a:	fa1f fb8b 	uxth.w	fp, fp
      int16 x44 = tmp3 + x24;
 801026e:	448a      	add	sl, r1
      int16 x41 = x31 + x32;
 8010270:	eb0e 0004 	add.w	r0, lr, r4
      int16 x42 = x31 - x32;
 8010274:	eba4 040e 	sub.w	r4, r4, lr
  if (x < 0)
 8010278:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
      int16 x44 = tmp3 + x24;
 801027c:	fa1f fa8a 	uxth.w	sl, sl
      int16 x41 = x31 + x32;
 8010280:	fa1f fe80 	uxth.w	lr, r0
      int16 x43 = x30 - x13;
 8010284:	b292      	uxth	r2, r2
  int16 r = (uint16)x >> (uint8)n;
 8010286:	ea4f 10db 	mov.w	r0, fp, lsr #7
      int16 x42 = x31 - x32;
 801028a:	b2a4      	uxth	r4, r4
  if (x < 0)
 801028c:	d003      	beq.n	8010296 <pjpeg_decode_mcu+0x66e>
    r |= replicateSignBit16(n);
 801028e:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 8010292:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 8010296:	3080      	adds	r0, #128	; 0x80
 8010298:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 801029a:	28ff      	cmp	r0, #255	; 0xff
 801029c:	f240 81d9 	bls.w	8010652 <pjpeg_decode_mcu+0xa2a>
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 80102a0:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 80102a4:	f1bb 0f00 	cmp.w	fp, #0
 80102a8:	f2c0 81e9 	blt.w	801067e <pjpeg_decode_mcu+0xa56>
    else if (s > 255)
 80102ac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80102b0:	f340 81cf 	ble.w	8010652 <pjpeg_decode_mcu+0xa2a>
 80102b4:	20ff      	movs	r0, #255	; 0xff
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80102b6:	f103 0b40 	add.w	fp, r3, #64	; 0x40
      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 80102ba:	8028      	strh	r0, [r5, #0]
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80102bc:	44f3      	add	fp, lr
 80102be:	fa1f fb8b 	uxth.w	fp, fp
  if (x < 0)
 80102c2:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 80102c6:	ea4f 10db 	mov.w	r0, fp, lsr #7
  if (x < 0)
 80102ca:	d003      	beq.n	80102d4 <pjpeg_decode_mcu+0x6ac>
    r |= replicateSignBit16(n);
 80102cc:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 80102d0:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80102d4:	3080      	adds	r0, #128	; 0x80
 80102d6:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 80102d8:	28ff      	cmp	r0, #255	; 0xff
 80102da:	f240 81b8 	bls.w	801064e <pjpeg_decode_mcu+0xa26>
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80102de:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 80102e2:	f1bb 0f00 	cmp.w	fp, #0
 80102e6:	f2c0 81c8 	blt.w	801067a <pjpeg_decode_mcu+0xa52>
    else if (s > 255)
 80102ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80102ee:	f340 81ae 	ble.w	801064e <pjpeg_decode_mcu+0xa26>
 80102f2:	20ff      	movs	r0, #255	; 0xff
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 80102f4:	f101 0b40 	add.w	fp, r1, #64	; 0x40
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80102f8:	8228      	strh	r0, [r5, #16]
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 80102fa:	44a3      	add	fp, r4
 80102fc:	fa1f fb8b 	uxth.w	fp, fp
  if (x < 0)
 8010300:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 8010304:	ea4f 10db 	mov.w	r0, fp, lsr #7
  if (x < 0)
 8010308:	d003      	beq.n	8010312 <pjpeg_decode_mcu+0x6ea>
    r |= replicateSignBit16(n);
 801030a:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 801030e:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 8010312:	3080      	adds	r0, #128	; 0x80
 8010314:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 8010316:	28ff      	cmp	r0, #255	; 0xff
 8010318:	f240 8197 	bls.w	801064a <pjpeg_decode_mcu+0xa22>
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 801031c:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 8010320:	f1bb 0f00 	cmp.w	fp, #0
 8010324:	f2c0 81a7 	blt.w	8010676 <pjpeg_decode_mcu+0xa4e>
    else if (s > 255)
 8010328:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801032c:	f340 818d 	ble.w	801064a <pjpeg_decode_mcu+0xa22>
 8010330:	20ff      	movs	r0, #255	; 0xff
 8010332:	3240      	adds	r2, #64	; 0x40
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 8010334:	8428      	strh	r0, [r5, #32]
 8010336:	b292      	uxth	r2, r2
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 8010338:	eba2 0b0a 	sub.w	fp, r2, sl
 801033c:	fa1f fb8b 	uxth.w	fp, fp
  if (x < 0)
 8010340:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 8010344:	ea4f 10db 	mov.w	r0, fp, lsr #7
  if (x < 0)
 8010348:	d003      	beq.n	8010352 <pjpeg_decode_mcu+0x72a>
    r |= replicateSignBit16(n);
 801034a:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
 801034e:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 8010352:	3080      	adds	r0, #128	; 0x80
 8010354:	b280      	uxth	r0, r0
  if ((uint16)s > 255U) {
 8010356:	28ff      	cmp	r0, #255	; 0xff
 8010358:	f240 8175 	bls.w	8010646 <pjpeg_decode_mcu+0xa1e>
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 801035c:	fa0f fb80 	sxth.w	fp, r0
    if (s < 0)
 8010360:	f1bb 0f00 	cmp.w	fp, #0
 8010364:	f2c0 8185 	blt.w	8010672 <pjpeg_decode_mcu+0xa4a>
    else if (s > 255)
 8010368:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801036c:	f340 816b 	ble.w	8010646 <pjpeg_decode_mcu+0xa1e>
 8010370:	20ff      	movs	r0, #255	; 0xff
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 8010372:	4492      	add	sl, r2
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 8010374:	8628      	strh	r0, [r5, #48]	; 0x30
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 8010376:	fa1f fa8a 	uxth.w	sl, sl
  if (x < 0)
 801037a:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
  int16 r = (uint16)x >> (uint8)n;
 801037e:	ea4f 12da 	mov.w	r2, sl, lsr #7
  if (x < 0)
 8010382:	d003      	beq.n	801038c <pjpeg_decode_mcu+0x764>
    r |= replicateSignBit16(n);
 8010384:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8010388:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 801038c:	3280      	adds	r2, #128	; 0x80
 801038e:	b292      	uxth	r2, r2
  if ((uint16)s > 255U) {
 8010390:	2aff      	cmp	r2, #255	; 0xff
 8010392:	f240 8156 	bls.w	8010642 <pjpeg_decode_mcu+0xa1a>
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 8010396:	b210      	sxth	r0, r2
    if (s < 0)
 8010398:	2800      	cmp	r0, #0
 801039a:	f2c0 8168 	blt.w	801066e <pjpeg_decode_mcu+0xa46>
    else if (s > 255)
 801039e:	28ff      	cmp	r0, #255	; 0xff
 80103a0:	f340 814f 	ble.w	8010642 <pjpeg_decode_mcu+0xa1a>
 80103a4:	22ff      	movs	r2, #255	; 0xff
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 80103a6:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 80103aa:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 80103ae:	440c      	add	r4, r1
 80103b0:	b2a4      	uxth	r4, r4
  if (x < 0)
 80103b2:	0420      	lsls	r0, r4, #16
  int16 r = (uint16)x >> (uint8)n;
 80103b4:	ea4f 12d4 	mov.w	r2, r4, lsr #7
  if (x < 0)
 80103b8:	d503      	bpl.n	80103c2 <pjpeg_decode_mcu+0x79a>
    r |= replicateSignBit16(n);
 80103ba:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 80103be:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 80103c2:	3280      	adds	r2, #128	; 0x80
 80103c4:	b292      	uxth	r2, r2
  if ((uint16)s > 255U) {
 80103c6:	2aff      	cmp	r2, #255	; 0xff
 80103c8:	f240 8139 	bls.w	801063e <pjpeg_decode_mcu+0xa16>
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 80103cc:	b211      	sxth	r1, r2
    if (s < 0)
 80103ce:	2900      	cmp	r1, #0
 80103d0:	f2c0 8149 	blt.w	8010666 <pjpeg_decode_mcu+0xa3e>
    else if (s > 255)
 80103d4:	29ff      	cmp	r1, #255	; 0xff
 80103d6:	f340 8132 	ble.w	801063e <pjpeg_decode_mcu+0xa16>
 80103da:	22ff      	movs	r2, #255	; 0xff
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 80103dc:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 80103e0:	f8a5 2050 	strh.w	r2, [r5, #80]	; 0x50
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 80103e4:	4470      	add	r0, lr
 80103e6:	b280      	uxth	r0, r0
  if (x < 0)
 80103e8:	0401      	lsls	r1, r0, #16
  int16 r = (uint16)x >> (uint8)n;
 80103ea:	ea4f 13d0 	mov.w	r3, r0, lsr #7
  if (x < 0)
 80103ee:	d503      	bpl.n	80103f8 <pjpeg_decode_mcu+0x7d0>
    r |= replicateSignBit16(n);
 80103f0:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 80103f4:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 80103f8:	3380      	adds	r3, #128	; 0x80
 80103fa:	b29b      	uxth	r3, r3
  if ((uint16)s > 255U) {
 80103fc:	2bff      	cmp	r3, #255	; 0xff
 80103fe:	f240 811a 	bls.w	8010636 <pjpeg_decode_mcu+0xa0e>
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 8010402:	b21a      	sxth	r2, r3
    if (s < 0)
 8010404:	2a00      	cmp	r2, #0
 8010406:	f2c0 812c 	blt.w	8010662 <pjpeg_decode_mcu+0xa3a>
    else if (s > 255)
 801040a:	2aff      	cmp	r2, #255	; 0xff
 801040c:	f340 8113 	ble.w	8010636 <pjpeg_decode_mcu+0xa0e>
 8010410:	23ff      	movs	r3, #255	; 0xff
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 8010412:	eba8 0809 	sub.w	r8, r8, r9
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 8010416:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 801041a:	f108 0240 	add.w	r2, r8, #64	; 0x40
 801041e:	b292      	uxth	r2, r2
  int16 r = (uint16)x >> (uint8)n;
 8010420:	09d3      	lsrs	r3, r2, #7
  if (x < 0)
 8010422:	0412      	lsls	r2, r2, #16
 8010424:	d503      	bpl.n	801042e <pjpeg_decode_mcu+0x806>
    r |= replicateSignBit16(n);
 8010426:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 801042a:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 801042e:	3380      	adds	r3, #128	; 0x80
 8010430:	b29b      	uxth	r3, r3
  if ((uint16)s > 255U) {
 8010432:	2bff      	cmp	r3, #255	; 0xff
 8010434:	f240 8101 	bls.w	801063a <pjpeg_decode_mcu+0xa12>
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 8010438:	b21a      	sxth	r2, r3
    if (s < 0)
 801043a:	2a00      	cmp	r2, #0
 801043c:	f2c0 8115 	blt.w	801066a <pjpeg_decode_mcu+0xa42>
    else if (s > 255)
 8010440:	2aff      	cmp	r2, #255	; 0xff
 8010442:	f340 80fa 	ble.w	801063a <pjpeg_decode_mcu+0xa12>
 8010446:	23ff      	movs	r3, #255	; 0xff
  for (i = 0; i < 8; i++) {
 8010448:	42bd      	cmp	r5, r7
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 801044a:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
  for (i = 0; i < 8; i++) {
 801044e:	f47f ae7d 	bne.w	801014c <pjpeg_decode_mcu+0x524>
  switch (gScanType) {
 8010452:	4ba9      	ldr	r3, [pc, #676]	; (80106f8 <pjpeg_decode_mcu+0xad0>)
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	2b04      	cmp	r3, #4
 8010458:	f200 80d7 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 801045c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010460:	013d012b 	.word	0x013d012b
 8010464:	019b01a5 	.word	0x019b01a5
 8010468:	01af      	.short	0x01af
            if ((k + r) > 63)
 801046a:	1919      	adds	r1, r3, r4
 801046c:	293f      	cmp	r1, #63	; 0x3f
 801046e:	f73f ac6d 	bgt.w	800fd4c <pjpeg_decode_mcu+0x124>
        r = s >> 4;
 8010472:	b29b      	uxth	r3, r3
              gCoeffBuf[ZAG[k++]] = 0;
 8010474:	f04f 0c00 	mov.w	ip, #0
 8010478:	9e00      	ldr	r6, [sp, #0]
 801047a:	468e      	mov	lr, r1
 801047c:	499f      	ldr	r1, [pc, #636]	; (80106fc <pjpeg_decode_mcu+0xad4>)
              r--;
 801047e:	3b01      	subs	r3, #1
              gCoeffBuf[ZAG[k++]] = 0;
 8010480:	1c62      	adds	r2, r4, #1
              r--;
 8010482:	b29b      	uxth	r3, r3
              gCoeffBuf[ZAG[k++]] = 0;
 8010484:	570c      	ldrsb	r4, [r1, r4]
 8010486:	499e      	ldr	r1, [pc, #632]	; (8010700 <pjpeg_decode_mcu+0xad8>)
 8010488:	f821 c014 	strh.w	ip, [r1, r4, lsl #1]
 801048c:	b2d4      	uxtb	r4, r2
            while (r) {
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1f4      	bne.n	801047c <pjpeg_decode_mcu+0x854>
 8010492:	9600      	str	r6, [sp, #0]
 8010494:	fa5f f48e 	uxtb.w	r4, lr
 8010498:	e50b      	b.n	800feb2 <pjpeg_decode_mcu+0x28a>
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 801049a:	b203      	sxth	r3, r0
 801049c:	e413      	b.n	800fcc6 <pjpeg_decode_mcu+0x9e>
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 801049e:	4b98      	ldr	r3, [pc, #608]	; (8010700 <pjpeg_decode_mcu+0xad8>)
 80104a0:	881a      	ldrh	r2, [r3, #0]
 80104a2:	3240      	adds	r2, #64	; 0x40
 80104a4:	b292      	uxth	r2, r2
  if (x < 0)
 80104a6:	0414      	lsls	r4, r2, #16
  int16 r = (uint16)x >> (uint8)n;
 80104a8:	ea4f 13d2 	mov.w	r3, r2, lsr #7
  if (x < 0)
 80104ac:	d503      	bpl.n	80104b6 <pjpeg_decode_mcu+0x88e>
    r |= replicateSignBit16(n);
 80104ae:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 80104b2:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 80104b6:	3380      	adds	r3, #128	; 0x80
 80104b8:	b29b      	uxth	r3, r3
  if ((uint16)s > 255U) {
 80104ba:	2bff      	cmp	r3, #255	; 0xff
 80104bc:	d906      	bls.n	80104cc <pjpeg_decode_mcu+0x8a4>
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 80104be:	b21a      	sxth	r2, r3
    if (s < 0)
 80104c0:	2a00      	cmp	r2, #0
 80104c2:	f2c0 8505 	blt.w	8010ed0 <pjpeg_decode_mcu+0x12a8>
    else if (s > 255)
 80104c6:	2aff      	cmp	r2, #255	; 0xff
 80104c8:	f300 81e9 	bgt.w	801089e <pjpeg_decode_mcu+0xc76>
  return (uint8)s;
 80104cc:	b2db      	uxtb	r3, r3
  switch (gScanType) {
 80104ce:	4a8a      	ldr	r2, [pc, #552]	; (80106f8 <pjpeg_decode_mcu+0xad0>)
 80104d0:	7812      	ldrb	r2, [r2, #0]
 80104d2:	2a04      	cmp	r2, #4
 80104d4:	f200 8099 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 80104d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80104dc:	01a401de 	.word	0x01a401de
 80104e0:	0190019a 	.word	0x0190019a
 80104e4:	017d      	.short	0x017d
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80104e6:	b21a      	sxth	r2, r3
 80104e8:	3bb3      	subs	r3, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80104ea:	4886      	ldr	r0, [pc, #536]	; (8010704 <pjpeg_decode_mcu+0xadc>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80104ec:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 80104f0:	7801      	ldrb	r1, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80104f2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80104f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80104fa:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80104fe:	b29b      	uxth	r3, r3
  b = a + b;
 8010500:	4419      	add	r1, r3
 8010502:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010504:	29ff      	cmp	r1, #255	; 0xff
 8010506:	d906      	bls.n	8010516 <pjpeg_decode_mcu+0x8ee>
  b = a + b;
 8010508:	b20c      	sxth	r4, r1
    if (b < 0)
 801050a:	2c00      	cmp	r4, #0
 801050c:	f2c0 86c1 	blt.w	8011292 <pjpeg_decode_mcu+0x166a>
    else if (b > 255)
 8010510:	2cff      	cmp	r4, #255	; 0xff
 8010512:	f300 866e 	bgt.w	80111f2 <pjpeg_decode_mcu+0x15ca>
  return (uint8)b;
 8010516:	b2c9      	uxtb	r1, r1
  b = a + b;
 8010518:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 801051c:	7001      	strb	r1, [r0, #0]
  b = a + b;
 801051e:	441c      	add	r4, r3
 8010520:	b2a4      	uxth	r4, r4
  if ((uint16)b > 255U) {
 8010522:	2cff      	cmp	r4, #255	; 0xff
 8010524:	d906      	bls.n	8010534 <pjpeg_decode_mcu+0x90c>
  b = a + b;
 8010526:	b221      	sxth	r1, r4
    if (b < 0)
 8010528:	2900      	cmp	r1, #0
 801052a:	f2c0 8683 	blt.w	8011234 <pjpeg_decode_mcu+0x160c>
    else if (b > 255)
 801052e:	29ff      	cmp	r1, #255	; 0xff
 8010530:	f300 8662 	bgt.w	80111f8 <pjpeg_decode_mcu+0x15d0>
  return (uint8)b;
 8010534:	b2e4      	uxtb	r4, r4
  b = a + b;
 8010536:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 801053a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  b = a + b;
 801053e:	4419      	add	r1, r3
 8010540:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010542:	29ff      	cmp	r1, #255	; 0xff
 8010544:	d906      	bls.n	8010554 <pjpeg_decode_mcu+0x92c>
  b = a + b;
 8010546:	b20c      	sxth	r4, r1
    if (b < 0)
 8010548:	2c00      	cmp	r4, #0
 801054a:	f2c0 8676 	blt.w	801123a <pjpeg_decode_mcu+0x1612>
    else if (b > 255)
 801054e:	2cff      	cmp	r4, #255	; 0xff
 8010550:	f300 8655 	bgt.w	80111fe <pjpeg_decode_mcu+0x15d6>
  return (uint8)b;
 8010554:	b2c9      	uxtb	r1, r1
  b = a + b;
 8010556:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 801055a:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
  b = a + b;
 801055e:	4423      	add	r3, r4
 8010560:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010562:	2bff      	cmp	r3, #255	; 0xff
 8010564:	d906      	bls.n	8010574 <pjpeg_decode_mcu+0x94c>
  b = a + b;
 8010566:	b219      	sxth	r1, r3
    if (b < 0)
 8010568:	2900      	cmp	r1, #0
 801056a:	f2c0 8669 	blt.w	8011240 <pjpeg_decode_mcu+0x1618>
    else if (b > 255)
 801056e:	29ff      	cmp	r1, #255	; 0xff
 8010570:	f300 8648 	bgt.w	8011204 <pjpeg_decode_mcu+0x15dc>
  return (uint8)b;
 8010574:	b2db      	uxtb	r3, r3
      crG = ((c * 183U) >> 8U) - 91;
 8010576:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
      gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
 801057a:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 801057e:	4c62      	ldr	r4, [pc, #392]	; (8010708 <pjpeg_decode_mcu+0xae0>)
      crG = ((c * 183U) >> 8U) - 91;
 8010580:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  b = a - b;
 8010584:	7821      	ldrb	r1, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8010586:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 801058a:	0a1b      	lsrs	r3, r3, #8
 801058c:	3b5b      	subs	r3, #91	; 0x5b
 801058e:	b29b      	uxth	r3, r3
  b = a - b;
 8010590:	1ac9      	subs	r1, r1, r3
 8010592:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010594:	29ff      	cmp	r1, #255	; 0xff
 8010596:	d906      	bls.n	80105a6 <pjpeg_decode_mcu+0x97e>
  b = a - b;
 8010598:	b20a      	sxth	r2, r1
    if (b < 0)
 801059a:	2a00      	cmp	r2, #0
 801059c:	f2c0 8653 	blt.w	8011246 <pjpeg_decode_mcu+0x161e>
    else if (b > 255)
 80105a0:	2aff      	cmp	r2, #255	; 0xff
 80105a2:	f300 8632 	bgt.w	801120a <pjpeg_decode_mcu+0x15e2>
  return (uint8)b;
 80105a6:	b2c9      	uxtb	r1, r1
  b = a - b;
 80105a8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 80105ac:	7021      	strb	r1, [r4, #0]
  b = a - b;
 80105ae:	1ad2      	subs	r2, r2, r3
 80105b0:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 80105b2:	2aff      	cmp	r2, #255	; 0xff
 80105b4:	d906      	bls.n	80105c4 <pjpeg_decode_mcu+0x99c>
  b = a - b;
 80105b6:	b211      	sxth	r1, r2
    if (b < 0)
 80105b8:	2900      	cmp	r1, #0
 80105ba:	f2c0 8635 	blt.w	8011228 <pjpeg_decode_mcu+0x1600>
    else if (b > 255)
 80105be:	29ff      	cmp	r1, #255	; 0xff
 80105c0:	f300 8626 	bgt.w	8011210 <pjpeg_decode_mcu+0x15e8>
  return (uint8)b;
 80105c4:	b2d2      	uxtb	r2, r2
  b = a - b;
 80105c6:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 80105ca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  b = a - b;
 80105ce:	1ac9      	subs	r1, r1, r3
 80105d0:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 80105d2:	29ff      	cmp	r1, #255	; 0xff
 80105d4:	d906      	bls.n	80105e4 <pjpeg_decode_mcu+0x9bc>
  b = a - b;
 80105d6:	b20a      	sxth	r2, r1
    if (b < 0)
 80105d8:	2a00      	cmp	r2, #0
 80105da:	f2c0 8628 	blt.w	801122e <pjpeg_decode_mcu+0x1606>
    else if (b > 255)
 80105de:	2aff      	cmp	r2, #255	; 0xff
 80105e0:	f300 8619 	bgt.w	8011216 <pjpeg_decode_mcu+0x15ee>
  return (uint8)b;
 80105e4:	b2c9      	uxtb	r1, r1
  b = a - b;
 80105e6:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 80105ea:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  b = a - b;
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 80105f2:	2bff      	cmp	r3, #255	; 0xff
 80105f4:	d906      	bls.n	8010604 <pjpeg_decode_mcu+0x9dc>
  b = a - b;
 80105f6:	b21a      	sxth	r2, r3
    if (b < 0)
 80105f8:	2a00      	cmp	r2, #0
 80105fa:	f2c0 8612 	blt.w	8011222 <pjpeg_decode_mcu+0x15fa>
    else if (b > 255)
 80105fe:	2aff      	cmp	r2, #255	; 0xff
 8010600:	f300 860c 	bgt.w	801121c <pjpeg_decode_mcu+0x15f4>
  return (uint8)b;
 8010604:	b2db      	uxtb	r3, r3
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
 8010606:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 801060a:	9a01      	ldr	r2, [sp, #4]
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	3201      	adds	r2, #1
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	b2d2      	uxtb	r2, r2
 8010614:	4293      	cmp	r3, r2
 8010616:	9201      	str	r2, [sp, #4]
 8010618:	f63f ab2a 	bhi.w	800fc70 <pjpeg_decode_mcu+0x48>
  if ((status) || (gCallbackStatus))
 801061c:	4b3b      	ldr	r3, [pc, #236]	; (801070c <pjpeg_decode_mcu+0xae4>)
 801061e:	7818      	ldrb	r0, [r3, #0]
 8010620:	2800      	cmp	r0, #0
 8010622:	f47f ab99 	bne.w	800fd58 <pjpeg_decode_mcu+0x130>
 8010626:	4b3a      	ldr	r3, [pc, #232]	; (8010710 <pjpeg_decode_mcu+0xae8>)
 8010628:	881b      	ldrh	r3, [r3, #0]
  gNumMCUSRemaining--;
 801062a:	3b01      	subs	r3, #1
 801062c:	4a38      	ldr	r2, [pc, #224]	; (8010710 <pjpeg_decode_mcu+0xae8>)
  return 0;
 801062e:	2000      	movs	r0, #0
  gNumMCUSRemaining--;
 8010630:	8013      	strh	r3, [r2, #0]
  return 0;
 8010632:	f7ff bb91 	b.w	800fd58 <pjpeg_decode_mcu+0x130>
 8010636:	b2db      	uxtb	r3, r3
 8010638:	e6eb      	b.n	8010412 <pjpeg_decode_mcu+0x7ea>
 801063a:	b2db      	uxtb	r3, r3
 801063c:	e704      	b.n	8010448 <pjpeg_decode_mcu+0x820>
 801063e:	b2d2      	uxtb	r2, r2
 8010640:	e6cc      	b.n	80103dc <pjpeg_decode_mcu+0x7b4>
 8010642:	b2d2      	uxtb	r2, r2
 8010644:	e6af      	b.n	80103a6 <pjpeg_decode_mcu+0x77e>
 8010646:	b2c0      	uxtb	r0, r0
 8010648:	e693      	b.n	8010372 <pjpeg_decode_mcu+0x74a>
 801064a:	b2c0      	uxtb	r0, r0
 801064c:	e671      	b.n	8010332 <pjpeg_decode_mcu+0x70a>
 801064e:	b2c0      	uxtb	r0, r0
 8010650:	e650      	b.n	80102f4 <pjpeg_decode_mcu+0x6cc>
 8010652:	b2c0      	uxtb	r0, r0
 8010654:	e62f      	b.n	80102b6 <pjpeg_decode_mcu+0x68e>
 8010656:	b2d3      	uxtb	r3, r2
 8010658:	e569      	b.n	801012e <pjpeg_decode_mcu+0x506>
  return getBits(numBits, 1);
 801065a:	f7fe f8f7 	bl	800e84c <getBits.constprop.6>
 801065e:	f7ff bb22 	b.w	800fca6 <pjpeg_decode_mcu+0x7e>
    if (s < 0)
 8010662:	2300      	movs	r3, #0
 8010664:	e6d5      	b.n	8010412 <pjpeg_decode_mcu+0x7ea>
 8010666:	2200      	movs	r2, #0
 8010668:	e6b8      	b.n	80103dc <pjpeg_decode_mcu+0x7b4>
 801066a:	2300      	movs	r3, #0
 801066c:	e6ec      	b.n	8010448 <pjpeg_decode_mcu+0x820>
 801066e:	2200      	movs	r2, #0
 8010670:	e699      	b.n	80103a6 <pjpeg_decode_mcu+0x77e>
 8010672:	2000      	movs	r0, #0
 8010674:	e67d      	b.n	8010372 <pjpeg_decode_mcu+0x74a>
 8010676:	2000      	movs	r0, #0
 8010678:	e65b      	b.n	8010332 <pjpeg_decode_mcu+0x70a>
 801067a:	2000      	movs	r0, #0
 801067c:	e63a      	b.n	80102f4 <pjpeg_decode_mcu+0x6cc>
 801067e:	2000      	movs	r0, #0
 8010680:	e619      	b.n	80102b6 <pjpeg_decode_mcu+0x68e>
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 8010682:	4a24      	ldr	r2, [pc, #144]	; (8010714 <pjpeg_decode_mcu+0xaec>)
 8010684:	9203      	str	r2, [sp, #12]
 8010686:	7812      	ldrb	r2, [r2, #0]
 8010688:	2a00      	cmp	r2, #0
 801068a:	f47f aaec 	bne.w	800fc66 <pjpeg_decode_mcu+0x3e>
 801068e:	e7cc      	b.n	801062a <pjpeg_decode_mcu+0xa02>
      while (k < 64)
 8010690:	2c3f      	cmp	r4, #63	; 0x3f
 8010692:	f63f ac26 	bhi.w	800fee2 <pjpeg_decode_mcu+0x2ba>
 8010696:	4b20      	ldr	r3, [pc, #128]	; (8010718 <pjpeg_decode_mcu+0xaf0>)
 8010698:	f1c4 023f 	rsb	r2, r4, #63	; 0x3f
 801069c:	4917      	ldr	r1, [pc, #92]	; (80106fc <pjpeg_decode_mcu+0xad4>)
 801069e:	4423      	add	r3, r4
 80106a0:	440c      	add	r4, r1
 80106a2:	fa53 f282 	uxtab	r2, r3, r2
        gCoeffBuf[ZAG[k++]] = 0;
 80106a6:	f914 3b01 	ldrsb.w	r3, [r4], #1
 80106aa:	4915      	ldr	r1, [pc, #84]	; (8010700 <pjpeg_decode_mcu+0xad8>)
      while (k < 64)
 80106ac:	42a2      	cmp	r2, r4
        gCoeffBuf[ZAG[k++]] = 0;
 80106ae:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
      while (k < 64)
 80106b2:	d1f8      	bne.n	80106a6 <pjpeg_decode_mcu+0xa7e>
 80106b4:	e415      	b.n	800fee2 <pjpeg_decode_mcu+0x2ba>
  int16 *pSrc = gCoeffBuf;
 80106b6:	4a12      	ldr	r2, [pc, #72]	; (8010700 <pjpeg_decode_mcu+0xad8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 80106b8:	4d18      	ldr	r5, [pc, #96]	; (801071c <pjpeg_decode_mcu+0xaf4>)
 80106ba:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 80106be:	4c12      	ldr	r4, [pc, #72]	; (8010708 <pjpeg_decode_mcu+0xae0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 80106c0:	4810      	ldr	r0, [pc, #64]	; (8010704 <pjpeg_decode_mcu+0xadc>)
    uint8 c = (uint8)*pSrc++;
 80106c2:	f832 3b02 	ldrh.w	r3, [r2], #2
 80106c6:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 80106c8:	428a      	cmp	r2, r1
    *pRDst++ = c;
 80106ca:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 80106ce:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 80106d2:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 80106d6:	d1f4      	bne.n	80106c2 <pjpeg_decode_mcu+0xa9a>
 80106d8:	e797      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
    switch (mcuBlock) {
 80106da:	9b01      	ldr	r3, [sp, #4]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	f000 84f4 	beq.w	80110ca <pjpeg_decode_mcu+0x14a2>
 80106e2:	f0c0 84df 	bcc.w	80110a4 <pjpeg_decode_mcu+0x147c>
 80106e6:	2b02      	cmp	r3, #2
 80106e8:	d18f      	bne.n	801060a <pjpeg_decode_mcu+0x9e2>
  uint8 *pDstG = gMCUBufG + dstOfs;
 80106ea:	4807      	ldr	r0, [pc, #28]	; (8010708 <pjpeg_decode_mcu+0xae0>)
 80106ec:	4c0c      	ldr	r4, [pc, #48]	; (8010720 <pjpeg_decode_mcu+0xaf8>)
 80106ee:	f100 0640 	add.w	r6, r0, #64	; 0x40
  int16 *pSrc = gCoeffBuf;
 80106f2:	4d03      	ldr	r5, [pc, #12]	; (8010700 <pjpeg_decode_mcu+0xad8>)
 80106f4:	e03a      	b.n	801076c <pjpeg_decode_mcu+0xb44>
 80106f6:	bf00      	nop
 80106f8:	2000cf0a 	.word	0x2000cf0a
 80106fc:	08032428 	.word	0x08032428
 8010700:	2000c5e0 	.word	0x2000c5e0
 8010704:	2000ccf0 	.word	0x2000ccf0
 8010708:	2000cbf0 	.word	0x2000cbf0
 801070c:	2000c5dd 	.word	0x2000c5dd
 8010710:	2000ce00 	.word	0x2000ce00
 8010714:	2000cdf6 	.word	0x2000cdf6
 8010718:	08032429 	.word	0x08032429
 801071c:	2000caf0 	.word	0x2000caf0
 8010720:	2000ccef 	.word	0x2000ccef
  b = a + b;
 8010724:	b211      	sxth	r1, r2
    if (b < 0)
 8010726:	2900      	cmp	r1, #0
 8010728:	f2c0 83ce 	blt.w	8010ec8 <pjpeg_decode_mcu+0x12a0>
    else if (b > 255)
 801072c:	29ff      	cmp	r1, #255	; 0xff
 801072e:	dd30      	ble.n	8010792 <pjpeg_decode_mcu+0xb6a>
      return 255;
 8010730:	22ff      	movs	r2, #255	; 0xff
    crG = ((cr * 183U) >> 8U) - 91;
 8010732:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    pDstR[0] = addAndClamp(pDstR[0], crR);
 8010736:	7022      	strb	r2, [r4, #0]
  b = a - b;
 8010738:	7802      	ldrb	r2, [r0, #0]
    crG = ((cr * 183U) >> 8U) - 91;
 801073a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801073e:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
 8010742:	0a1b      	lsrs	r3, r3, #8
  b = a - b;
 8010744:	f1c3 035b 	rsb	r3, r3, #91	; 0x5b
 8010748:	4413      	add	r3, r2
 801074a:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 801074c:	2bff      	cmp	r3, #255	; 0xff
 801074e:	f240 83b9 	bls.w	8010ec4 <pjpeg_decode_mcu+0x129c>
  b = a - b;
 8010752:	b21a      	sxth	r2, r3
    if (b < 0)
 8010754:	2a00      	cmp	r2, #0
 8010756:	f2c0 83b9 	blt.w	8010ecc <pjpeg_decode_mcu+0x12a4>
    else if (b > 255)
 801075a:	2aff      	cmp	r2, #255	; 0xff
 801075c:	f340 83b2 	ble.w	8010ec4 <pjpeg_decode_mcu+0x129c>
      return 255;
 8010760:	23ff      	movs	r3, #255	; 0xff
    pDstG[0] = subAndClamp(pDstG[0], crG);
 8010762:	f800 3b01 	strb.w	r3, [r0], #1
  for (i = 64; i > 0; i--) {
 8010766:	42b0      	cmp	r0, r6
 8010768:	f43f af4f 	beq.w	801060a <pjpeg_decode_mcu+0x9e2>
    uint8 cr = (uint8)*pSrc++;
 801076c:	f935 1b02 	ldrsh.w	r1, [r5], #2
  b = a + b;
 8010770:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    uint8 cr = (uint8)*pSrc++;
 8010774:	b2c9      	uxtb	r1, r1
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 8010776:	b20b      	sxth	r3, r1
  b = a + b;
 8010778:	440a      	add	r2, r1
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 801077a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  b = a + b;
 801077e:	3ab3      	subs	r2, #179	; 0xb3
    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 8010780:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8010784:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  b = a + b;
 8010788:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801078c:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 801078e:	2aff      	cmp	r2, #255	; 0xff
 8010790:	d8c8      	bhi.n	8010724 <pjpeg_decode_mcu+0xafc>
  return (uint8)b;
 8010792:	b2d2      	uxtb	r2, r2
 8010794:	e7cd      	b.n	8010732 <pjpeg_decode_mcu+0xb0a>
    switch (mcuBlock) {
 8010796:	9b01      	ldr	r3, [sp, #4]
 8010798:	2b03      	cmp	r3, #3
 801079a:	f63f af36 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 801079e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80107a2:	00ad      	.short	0x00ad
 80107a4:	01a8009b 	.word	0x01a8009b
 80107a8:	019f      	.short	0x019f
    switch (mcuBlock) {
 80107aa:	9b01      	ldr	r3, [sp, #4]
 80107ac:	2b03      	cmp	r3, #3
 80107ae:	f63f af2c 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 80107b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80107b6:	00c7      	.short	0x00c7
 80107b8:	00e200b5 	.word	0x00e200b5
 80107bc:	00d9      	.short	0x00d9
    switch (mcuBlock) {
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	2b05      	cmp	r3, #5
 80107c2:	f63f af22 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 80107c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80107ca:	0292      	.short	0x0292
 80107cc:	026e0280 	.word	0x026e0280
 80107d0:	02b5025c 	.word	0x02b5025c
 80107d4:	02a4      	.short	0x02a4
    switch (mcuBlock) {
 80107d6:	9a01      	ldr	r2, [sp, #4]
 80107d8:	2a05      	cmp	r2, #5
 80107da:	f63f af16 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 80107de:	a101      	add	r1, pc, #4	; (adr r1, 80107e4 <pjpeg_decode_mcu+0xbbc>)
 80107e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80107e4:	080108a3 	.word	0x080108a3
 80107e8:	080108b1 	.word	0x080108b1
 80107ec:	080108c5 	.word	0x080108c5
 80107f0:	08010d57 	.word	0x08010d57
 80107f4:	08010da1 	.word	0x08010da1
 80107f8:	080104e7 	.word	0x080104e7
    switch (mcuBlock) {
 80107fc:	9a01      	ldr	r2, [sp, #4]
 80107fe:	2a03      	cmp	r2, #3
 8010800:	f63f af03 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 8010804:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010808:	005e004d 	.word	0x005e004d
 801080c:	00c20118 	.word	0x00c20118
    switch (mcuBlock) {
 8010810:	9a01      	ldr	r2, [sp, #4]
 8010812:	2a03      	cmp	r2, #3
 8010814:	f63f aef9 	bhi.w	801060a <pjpeg_decode_mcu+0x9e2>
 8010818:	e8df f012 	tbh	[pc, r2, lsl #1]
 801081c:	004a0043 	.word	0x004a0043
 8010820:	018801df 	.word	0x018801df
    switch (mcuBlock) {
 8010824:	9a01      	ldr	r2, [sp, #4]
 8010826:	2a01      	cmp	r2, #1
 8010828:	f000 83ee 	beq.w	8011008 <pjpeg_decode_mcu+0x13e0>
 801082c:	d339      	bcc.n	80108a2 <pjpeg_decode_mcu+0xc7a>
 801082e:	2a02      	cmp	r2, #2
 8010830:	f47f aeeb 	bne.w	801060a <pjpeg_decode_mcu+0x9e2>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010834:	b21a      	sxth	r2, r3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8010836:	48b3      	ldr	r0, [pc, #716]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010838:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 801083c:	7801      	ldrb	r1, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 801083e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  b = a + b;
 8010842:	39b3      	subs	r1, #179	; 0xb3
 8010844:	440b      	add	r3, r1
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010846:	eb02 0144 	add.w	r1, r2, r4, lsl #1
  b = a + b;
 801084a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801084e:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010850:	2bff      	cmp	r3, #255	; 0xff
 8010852:	f240 8478 	bls.w	8011146 <pjpeg_decode_mcu+0x151e>
  b = a + b;
 8010856:	b219      	sxth	r1, r3
    if (b < 0)
 8010858:	2900      	cmp	r1, #0
 801085a:	f2c0 84bf 	blt.w	80111dc <pjpeg_decode_mcu+0x15b4>
    else if (b > 255)
 801085e:	29ff      	cmp	r1, #255	; 0xff
 8010860:	f340 8471 	ble.w	8011146 <pjpeg_decode_mcu+0x151e>
      return 255;
 8010864:	23ff      	movs	r3, #255	; 0xff
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010866:	4ca8      	ldr	r4, [pc, #672]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
      crG = ((c * 183U) >> 8U) - 91;
 8010868:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 801086c:	7003      	strb	r3, [r0, #0]
      crG = ((c * 183U) >> 8U) - 91;
 801086e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  b = a - b;
 8010872:	7823      	ldrb	r3, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8010874:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
  b = a - b;
 8010878:	335b      	adds	r3, #91	; 0x5b
 801087a:	eba3 2312 	sub.w	r3, r3, r2, lsr #8
 801087e:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010880:	2bff      	cmp	r3, #255	; 0xff
 8010882:	d906      	bls.n	8010892 <pjpeg_decode_mcu+0xc6a>
  b = a - b;
 8010884:	b21a      	sxth	r2, r3
    if (b < 0)
 8010886:	2a00      	cmp	r2, #0
 8010888:	f2c0 848a 	blt.w	80111a0 <pjpeg_decode_mcu+0x1578>
    else if (b > 255)
 801088c:	2aff      	cmp	r2, #255	; 0xff
 801088e:	f300 84e8 	bgt.w	8011262 <pjpeg_decode_mcu+0x163a>
  return (uint8)b;
 8010892:	b2db      	uxtb	r3, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010894:	7023      	strb	r3, [r4, #0]
 8010896:	e6b8      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
    gMCUBufR[0] = c;
 8010898:	4a9a      	ldr	r2, [pc, #616]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
 801089a:	7013      	strb	r3, [r2, #0]
 801089c:	e6b5      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      return 255;
 801089e:	23ff      	movs	r3, #255	; 0xff
 80108a0:	e615      	b.n	80104ce <pjpeg_decode_mcu+0x8a6>
      gMCUBufR[0] = c;
 80108a2:	4a98      	ldr	r2, [pc, #608]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
      gMCUBufG[0] = c;
 80108a4:	4998      	ldr	r1, [pc, #608]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
      gMCUBufR[0] = c;
 80108a6:	7013      	strb	r3, [r2, #0]
      gMCUBufB[0] = c;
 80108a8:	4a98      	ldr	r2, [pc, #608]	; (8010b0c <pjpeg_decode_mcu+0xee4>)
      gMCUBufG[0] = c;
 80108aa:	700b      	strb	r3, [r1, #0]
      gMCUBufB[0] = c;
 80108ac:	7013      	strb	r3, [r2, #0]
 80108ae:	e6ac      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      gMCUBufR[64] = c;
 80108b0:	4a94      	ldr	r2, [pc, #592]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
      gMCUBufG[64] = c;
 80108b2:	4995      	ldr	r1, [pc, #596]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
      gMCUBufR[64] = c;
 80108b4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      gMCUBufB[64] = c;
 80108b8:	4a94      	ldr	r2, [pc, #592]	; (8010b0c <pjpeg_decode_mcu+0xee4>)
      gMCUBufG[64] = c;
 80108ba:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
      gMCUBufB[64] = c;
 80108be:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 80108c2:	e6a2      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      gMCUBufR[128] = c;
 80108c4:	4a8f      	ldr	r2, [pc, #572]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
      gMCUBufG[128] = c;
 80108c6:	4990      	ldr	r1, [pc, #576]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
      gMCUBufR[128] = c;
 80108c8:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      gMCUBufB[128] = c;
 80108cc:	4a8f      	ldr	r2, [pc, #572]	; (8010b0c <pjpeg_decode_mcu+0xee4>)
      gMCUBufG[128] = c;
 80108ce:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
      gMCUBufB[128] = c;
 80108d2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
 80108d6:	e698      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 80108d8:	4a8d      	ldr	r2, [pc, #564]	; (8010b10 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 80108da:	4d8e      	ldr	r5, [pc, #568]	; (8010b14 <pjpeg_decode_mcu+0xeec>)
 80108dc:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 80108e0:	4c8d      	ldr	r4, [pc, #564]	; (8010b18 <pjpeg_decode_mcu+0xef0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 80108e2:	488e      	ldr	r0, [pc, #568]	; (8010b1c <pjpeg_decode_mcu+0xef4>)
    uint8 c = (uint8)*pSrc++;
 80108e4:	f832 3b02 	ldrh.w	r3, [r2], #2
 80108e8:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 80108ea:	428a      	cmp	r2, r1
    *pRDst++ = c;
 80108ec:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 80108f0:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 80108f4:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 80108f8:	d1f4      	bne.n	80108e4 <pjpeg_decode_mcu+0xcbc>
 80108fa:	e686      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 80108fc:	4a84      	ldr	r2, [pc, #528]	; (8010b10 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 80108fe:	4d83      	ldr	r5, [pc, #524]	; (8010b0c <pjpeg_decode_mcu+0xee4>)
 8010900:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010904:	4c80      	ldr	r4, [pc, #512]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010906:	487f      	ldr	r0, [pc, #508]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
    uint8 c = (uint8)*pSrc++;
 8010908:	f832 3b02 	ldrh.w	r3, [r2], #2
 801090c:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 801090e:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010910:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010914:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010918:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 801091c:	d1f4      	bne.n	8010908 <pjpeg_decode_mcu+0xce0>
 801091e:	e674      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010920:	4a7b      	ldr	r2, [pc, #492]	; (8010b10 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010922:	4d7f      	ldr	r5, [pc, #508]	; (8010b20 <pjpeg_decode_mcu+0xef8>)
 8010924:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010928:	4c7e      	ldr	r4, [pc, #504]	; (8010b24 <pjpeg_decode_mcu+0xefc>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 801092a:	487f      	ldr	r0, [pc, #508]	; (8010b28 <pjpeg_decode_mcu+0xf00>)
    uint8 c = (uint8)*pSrc++;
 801092c:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010930:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010932:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010934:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010938:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 801093c:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010940:	d1f4      	bne.n	801092c <pjpeg_decode_mcu+0xd04>
 8010942:	e662      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010944:	4a72      	ldr	r2, [pc, #456]	; (8010b10 <pjpeg_decode_mcu+0xee8>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010946:	4d71      	ldr	r5, [pc, #452]	; (8010b0c <pjpeg_decode_mcu+0xee4>)
 8010948:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 801094c:	4c6e      	ldr	r4, [pc, #440]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 801094e:	486d      	ldr	r0, [pc, #436]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
    uint8 c = (uint8)*pSrc++;
 8010950:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010954:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010956:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010958:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 801095c:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010960:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010964:	d1f4      	bne.n	8010950 <pjpeg_decode_mcu+0xd28>
 8010966:	e650      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      upsampleCrH(0, 0);
 8010968:	2100      	movs	r1, #0
 801096a:	4608      	mov	r0, r1
 801096c:	f7fd fcba 	bl	800e2e4 <upsampleCrH>
      upsampleCrH(4, 64);
 8010970:	2140      	movs	r1, #64	; 0x40
 8010972:	2004      	movs	r0, #4
 8010974:	f7fd fcb6 	bl	800e2e4 <upsampleCrH>
 8010978:	e647      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      upsampleCbH(0, 0);
 801097a:	2100      	movs	r1, #0
 801097c:	4608      	mov	r0, r1
 801097e:	f7fd fa87 	bl	800de90 <upsampleCbH>
      upsampleCbH(4, 64);
 8010982:	2140      	movs	r1, #64	; 0x40
 8010984:	2004      	movs	r0, #4
 8010986:	f7fd fa83 	bl	800de90 <upsampleCbH>
 801098a:	e63e      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 801098c:	b21a      	sxth	r2, r3
 801098e:	3bb3      	subs	r3, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8010990:	485c      	ldr	r0, [pc, #368]	; (8010b04 <pjpeg_decode_mcu+0xedc>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010992:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 8010996:	7801      	ldrb	r1, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010998:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801099c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80109a0:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80109a4:	b29b      	uxth	r3, r3
  b = a + b;
 80109a6:	4419      	add	r1, r3
 80109a8:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 80109aa:	29ff      	cmp	r1, #255	; 0xff
 80109ac:	f240 83ce 	bls.w	801114c <pjpeg_decode_mcu+0x1524>
  b = a + b;
 80109b0:	b20c      	sxth	r4, r1
    if (b < 0)
 80109b2:	2c00      	cmp	r4, #0
 80109b4:	f2c0 8400 	blt.w	80111b8 <pjpeg_decode_mcu+0x1590>
    else if (b > 255)
 80109b8:	2cff      	cmp	r4, #255	; 0xff
 80109ba:	f340 83c7 	ble.w	801114c <pjpeg_decode_mcu+0x1524>
      return 255;
 80109be:	21ff      	movs	r1, #255	; 0xff
  b = a + b;
 80109c0:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80109c4:	7001      	strb	r1, [r0, #0]
  b = a + b;
 80109c6:	4423      	add	r3, r4
 80109c8:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 80109ca:	2bff      	cmp	r3, #255	; 0xff
 80109cc:	f240 83c0 	bls.w	8011150 <pjpeg_decode_mcu+0x1528>
  b = a + b;
 80109d0:	b219      	sxth	r1, r3
    if (b < 0)
 80109d2:	2900      	cmp	r1, #0
 80109d4:	f2c0 83d8 	blt.w	8011188 <pjpeg_decode_mcu+0x1560>
    else if (b > 255)
 80109d8:	29ff      	cmp	r1, #255	; 0xff
 80109da:	f340 83b9 	ble.w	8011150 <pjpeg_decode_mcu+0x1528>
      return 255;
 80109de:	23ff      	movs	r3, #255	; 0xff
      crG = ((c * 183U) >> 8U) - 91;
 80109e0:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 80109e4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 80109e8:	4c47      	ldr	r4, [pc, #284]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
      crG = ((c * 183U) >> 8U) - 91;
 80109ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  b = a - b;
 80109ee:	7821      	ldrb	r1, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 80109f0:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
 80109f4:	0a13      	lsrs	r3, r2, #8
 80109f6:	3b5b      	subs	r3, #91	; 0x5b
 80109f8:	b29b      	uxth	r3, r3
  b = a - b;
 80109fa:	1ac9      	subs	r1, r1, r3
 80109fc:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 80109fe:	29ff      	cmp	r1, #255	; 0xff
 8010a00:	f240 83b0 	bls.w	8011164 <pjpeg_decode_mcu+0x153c>
  b = a - b;
 8010a04:	b20a      	sxth	r2, r1
    if (b < 0)
 8010a06:	2a00      	cmp	r2, #0
 8010a08:	f2c0 83d4 	blt.w	80111b4 <pjpeg_decode_mcu+0x158c>
    else if (b > 255)
 8010a0c:	2aff      	cmp	r2, #255	; 0xff
 8010a0e:	f340 83a9 	ble.w	8011164 <pjpeg_decode_mcu+0x153c>
      return 255;
 8010a12:	21ff      	movs	r1, #255	; 0xff
  b = a - b;
 8010a14:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010a18:	7021      	strb	r1, [r4, #0]
  b = a - b;
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010a1e:	2bff      	cmp	r3, #255	; 0xff
 8010a20:	d906      	bls.n	8010a30 <pjpeg_decode_mcu+0xe08>
  b = a - b;
 8010a22:	b21a      	sxth	r2, r3
    if (b < 0)
 8010a24:	2a00      	cmp	r2, #0
 8010a26:	f2c0 83c9 	blt.w	80111bc <pjpeg_decode_mcu+0x1594>
    else if (b > 255)
 8010a2a:	2aff      	cmp	r2, #255	; 0xff
 8010a2c:	f300 840e 	bgt.w	801124c <pjpeg_decode_mcu+0x1624>
  return (uint8)b;
 8010a30:	b2db      	uxtb	r3, r3
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 8010a32:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8010a36:	e5e8      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      cbG = ((c * 88U) >> 8U) - 44U;
 8010a38:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010a3a:	4c33      	ldr	r4, [pc, #204]	; (8010b08 <pjpeg_decode_mcu+0xee0>)
      cbG = ((c * 88U) >> 8U) - 44U;
 8010a3c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 8010a40:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 8010a42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010a46:	0949      	lsrs	r1, r1, #5
 8010a48:	392c      	subs	r1, #44	; 0x2c
 8010a4a:	b28d      	uxth	r5, r1
  b = a - b;
 8010a4c:	1b40      	subs	r0, r0, r5
 8010a4e:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 8010a50:	28ff      	cmp	r0, #255	; 0xff
 8010a52:	f240 8385 	bls.w	8011160 <pjpeg_decode_mcu+0x1538>
  b = a - b;
 8010a56:	b201      	sxth	r1, r0
    if (b < 0)
 8010a58:	2900      	cmp	r1, #0
 8010a5a:	f2c0 83bb 	blt.w	80111d4 <pjpeg_decode_mcu+0x15ac>
    else if (b > 255)
 8010a5e:	29ff      	cmp	r1, #255	; 0xff
 8010a60:	f340 837e 	ble.w	8011160 <pjpeg_decode_mcu+0x1538>
      return 255;
 8010a64:	20ff      	movs	r0, #255	; 0xff
  b = a - b;
 8010a66:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010a6a:	7020      	strb	r0, [r4, #0]
  b = a - b;
 8010a6c:	1b49      	subs	r1, r1, r5
 8010a6e:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010a70:	29ff      	cmp	r1, #255	; 0xff
 8010a72:	f240 8373 	bls.w	801115c <pjpeg_decode_mcu+0x1534>
  b = a - b;
 8010a76:	b208      	sxth	r0, r1
    if (b < 0)
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	f2c0 83a9 	blt.w	80111d0 <pjpeg_decode_mcu+0x15a8>
    else if (b > 255)
 8010a7e:	28ff      	cmp	r0, #255	; 0xff
 8010a80:	f340 836c 	ble.w	801115c <pjpeg_decode_mcu+0x1534>
      return 255;
 8010a84:	21ff      	movs	r1, #255	; 0xff
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010a86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010a8a:	f1a3 00e3 	sub.w	r0, r3, #227	; 0xe3
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 8010a8e:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010a92:	eb02 1242 	add.w	r2, r2, r2, lsl #5
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010a96:	491d      	ldr	r1, [pc, #116]	; (8010b0c <pjpeg_decode_mcu+0xee4>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010a98:	f3c2 13d7 	ubfx	r3, r2, #7, #24
  b = a + b;
 8010a9c:	780a      	ldrb	r2, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010a9e:	4403      	add	r3, r0
 8010aa0:	b29b      	uxth	r3, r3
  b = a + b;
 8010aa2:	441a      	add	r2, r3
 8010aa4:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 8010aa6:	2aff      	cmp	r2, #255	; 0xff
 8010aa8:	f240 8354 	bls.w	8011154 <pjpeg_decode_mcu+0x152c>
  b = a + b;
 8010aac:	b210      	sxth	r0, r2
    if (b < 0)
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	f2c0 8372 	blt.w	8011198 <pjpeg_decode_mcu+0x1570>
    else if (b > 255)
 8010ab4:	28ff      	cmp	r0, #255	; 0xff
 8010ab6:	f340 834d 	ble.w	8011154 <pjpeg_decode_mcu+0x152c>
      return 255;
 8010aba:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 8010abc:	f891 0080 	ldrb.w	r0, [r1, #128]	; 0x80
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010ac0:	700a      	strb	r2, [r1, #0]
  b = a + b;
 8010ac2:	4403      	add	r3, r0
 8010ac4:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010ac6:	2bff      	cmp	r3, #255	; 0xff
 8010ac8:	d906      	bls.n	8010ad8 <pjpeg_decode_mcu+0xeb0>
  b = a + b;
 8010aca:	b21a      	sxth	r2, r3
    if (b < 0)
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	f2c0 8359 	blt.w	8011184 <pjpeg_decode_mcu+0x155c>
    else if (b > 255)
 8010ad2:	2aff      	cmp	r2, #255	; 0xff
 8010ad4:	f300 83c9 	bgt.w	801126a <pjpeg_decode_mcu+0x1642>
  return (uint8)b;
 8010ad8:	b2db      	uxtb	r3, r3
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 8010ada:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
 8010ade:	e594      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      upsampleCrV(0, 0);
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	4608      	mov	r0, r1
 8010ae4:	f7fd fc94 	bl	800e410 <upsampleCrV>
      upsampleCrV(4 * 8, 128);
 8010ae8:	2180      	movs	r1, #128	; 0x80
 8010aea:	2020      	movs	r0, #32
 8010aec:	f7fd fc90 	bl	800e410 <upsampleCrV>
 8010af0:	e58b      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      upsampleCbV(0, 0);
 8010af2:	2100      	movs	r1, #0
 8010af4:	4608      	mov	r0, r1
 8010af6:	f7fd fa65 	bl	800dfc4 <upsampleCbV>
      upsampleCbV(4 * 8, 128);
 8010afa:	2180      	movs	r1, #128	; 0x80
 8010afc:	2020      	movs	r0, #32
 8010afe:	f7fd fa61 	bl	800dfc4 <upsampleCbV>
 8010b02:	e582      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
 8010b04:	2000ccf0 	.word	0x2000ccf0
 8010b08:	2000cbf0 	.word	0x2000cbf0
 8010b0c:	2000caf0 	.word	0x2000caf0
 8010b10:	2000c5e0 	.word	0x2000c5e0
 8010b14:	2000cb70 	.word	0x2000cb70
 8010b18:	2000cc70 	.word	0x2000cc70
 8010b1c:	2000cd70 	.word	0x2000cd70
 8010b20:	2000cb30 	.word	0x2000cb30
 8010b24:	2000cc30 	.word	0x2000cc30
 8010b28:	2000cd30 	.word	0x2000cd30
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010b2c:	b21a      	sxth	r2, r3
 8010b2e:	f1a3 01b3 	sub.w	r1, r3, #179	; 0xb3
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8010b32:	488e      	ldr	r0, [pc, #568]	; (8010d6c <pjpeg_decode_mcu+0x1144>)
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010b34:	eb02 0442 	add.w	r4, r2, r2, lsl #1
  b = a + b;
 8010b38:	7803      	ldrb	r3, [r0, #0]
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8010b3a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8010b3e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8010b42:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8010b46:	b289      	uxth	r1, r1
  b = a + b;
 8010b48:	440b      	add	r3, r1
 8010b4a:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010b4c:	2bff      	cmp	r3, #255	; 0xff
 8010b4e:	f240 830f 	bls.w	8011170 <pjpeg_decode_mcu+0x1548>
  b = a + b;
 8010b52:	b21c      	sxth	r4, r3
    if (b < 0)
 8010b54:	2c00      	cmp	r4, #0
 8010b56:	f2c0 8335 	blt.w	80111c4 <pjpeg_decode_mcu+0x159c>
    else if (b > 255)
 8010b5a:	2cff      	cmp	r4, #255	; 0xff
 8010b5c:	f340 8308 	ble.w	8011170 <pjpeg_decode_mcu+0x1548>
      return 255;
 8010b60:	23ff      	movs	r3, #255	; 0xff
  b = a + b;
 8010b62:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8010b66:	7003      	strb	r3, [r0, #0]
  b = a + b;
 8010b68:	4421      	add	r1, r4
 8010b6a:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010b6c:	29ff      	cmp	r1, #255	; 0xff
 8010b6e:	f240 8301 	bls.w	8011174 <pjpeg_decode_mcu+0x154c>
  b = a + b;
 8010b72:	b20b      	sxth	r3, r1
    if (b < 0)
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f2c0 8327 	blt.w	80111c8 <pjpeg_decode_mcu+0x15a0>
    else if (b > 255)
 8010b7a:	2bff      	cmp	r3, #255	; 0xff
 8010b7c:	f340 82fa 	ble.w	8011174 <pjpeg_decode_mcu+0x154c>
      return 255;
 8010b80:	21ff      	movs	r1, #255	; 0xff
      crG = ((c * 183U) >> 8U) - 91;
 8010b82:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010b86:	4c7a      	ldr	r4, [pc, #488]	; (8010d70 <pjpeg_decode_mcu+0x1148>)
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 8010b88:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
      crG = ((c * 183U) >> 8U) - 91;
 8010b8c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  b = a - b;
 8010b90:	7821      	ldrb	r1, [r4, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8010b92:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
 8010b96:	0a13      	lsrs	r3, r2, #8
 8010b98:	3b5b      	subs	r3, #91	; 0x5b
 8010b9a:	b29b      	uxth	r3, r3
  b = a - b;
 8010b9c:	1ac9      	subs	r1, r1, r3
 8010b9e:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010ba0:	29ff      	cmp	r1, #255	; 0xff
 8010ba2:	f240 82e9 	bls.w	8011178 <pjpeg_decode_mcu+0x1550>
  b = a - b;
 8010ba6:	b20a      	sxth	r2, r1
    if (b < 0)
 8010ba8:	2a00      	cmp	r2, #0
 8010baa:	f2c0 82e9 	blt.w	8011180 <pjpeg_decode_mcu+0x1558>
    else if (b > 255)
 8010bae:	2aff      	cmp	r2, #255	; 0xff
 8010bb0:	f340 82e2 	ble.w	8011178 <pjpeg_decode_mcu+0x1550>
      return 255;
 8010bb4:	21ff      	movs	r1, #255	; 0xff
  b = a - b;
 8010bb6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8010bba:	7021      	strb	r1, [r4, #0]
  b = a - b;
 8010bbc:	1ad3      	subs	r3, r2, r3
 8010bbe:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010bc0:	2bff      	cmp	r3, #255	; 0xff
 8010bc2:	d906      	bls.n	8010bd2 <pjpeg_decode_mcu+0xfaa>
  b = a - b;
 8010bc4:	b21a      	sxth	r2, r3
    if (b < 0)
 8010bc6:	2a00      	cmp	r2, #0
 8010bc8:	f2c0 82ee 	blt.w	80111a8 <pjpeg_decode_mcu+0x1580>
    else if (b > 255)
 8010bcc:	2aff      	cmp	r2, #255	; 0xff
 8010bce:	f300 8350 	bgt.w	8011272 <pjpeg_decode_mcu+0x164a>
  return (uint8)b;
 8010bd2:	b2db      	uxtb	r3, r3
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 8010bd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010bd8:	e517      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      cbG = ((c * 88U) >> 8U) - 44U;
 8010bda:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010bdc:	4c64      	ldr	r4, [pc, #400]	; (8010d70 <pjpeg_decode_mcu+0x1148>)
      cbG = ((c * 88U) >> 8U) - 44U;
 8010bde:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 8010be2:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 8010be4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010be8:	0949      	lsrs	r1, r1, #5
 8010bea:	392c      	subs	r1, #44	; 0x2c
 8010bec:	b28d      	uxth	r5, r1
  b = a - b;
 8010bee:	1b40      	subs	r0, r0, r5
 8010bf0:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 8010bf2:	28ff      	cmp	r0, #255	; 0xff
 8010bf4:	f240 82ba 	bls.w	801116c <pjpeg_decode_mcu+0x1544>
  b = a - b;
 8010bf8:	b201      	sxth	r1, r0
    if (b < 0)
 8010bfa:	2900      	cmp	r1, #0
 8010bfc:	f2c0 82be 	blt.w	801117c <pjpeg_decode_mcu+0x1554>
    else if (b > 255)
 8010c00:	29ff      	cmp	r1, #255	; 0xff
 8010c02:	f340 82b3 	ble.w	801116c <pjpeg_decode_mcu+0x1544>
      return 255;
 8010c06:	20ff      	movs	r0, #255	; 0xff
  b = a - b;
 8010c08:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010c0c:	7020      	strb	r0, [r4, #0]
  b = a - b;
 8010c0e:	1b49      	subs	r1, r1, r5
 8010c10:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010c12:	29ff      	cmp	r1, #255	; 0xff
 8010c14:	f240 82a8 	bls.w	8011168 <pjpeg_decode_mcu+0x1540>
  b = a - b;
 8010c18:	b208      	sxth	r0, r1
    if (b < 0)
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	f2c0 82b6 	blt.w	801118c <pjpeg_decode_mcu+0x1564>
    else if (b > 255)
 8010c20:	28ff      	cmp	r0, #255	; 0xff
 8010c22:	f340 82a1 	ble.w	8011168 <pjpeg_decode_mcu+0x1540>
      return 255;
 8010c26:	21ff      	movs	r1, #255	; 0xff
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010c28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010c2c:	f1a3 00e3 	sub.w	r0, r3, #227	; 0xe3
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 8010c30:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010c34:	eb02 1242 	add.w	r2, r2, r2, lsl #5
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010c38:	494e      	ldr	r1, [pc, #312]	; (8010d74 <pjpeg_decode_mcu+0x114c>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010c3a:	f3c2 13d7 	ubfx	r3, r2, #7, #24
  b = a + b;
 8010c3e:	780a      	ldrb	r2, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010c40:	4403      	add	r3, r0
 8010c42:	b29b      	uxth	r3, r3
  b = a + b;
 8010c44:	441a      	add	r2, r3
 8010c46:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 8010c48:	2aff      	cmp	r2, #255	; 0xff
 8010c4a:	f240 8285 	bls.w	8011158 <pjpeg_decode_mcu+0x1530>
  b = a + b;
 8010c4e:	b210      	sxth	r0, r2
    if (b < 0)
 8010c50:	2800      	cmp	r0, #0
 8010c52:	f2c0 82a3 	blt.w	801119c <pjpeg_decode_mcu+0x1574>
    else if (b > 255)
 8010c56:	28ff      	cmp	r0, #255	; 0xff
 8010c58:	f340 827e 	ble.w	8011158 <pjpeg_decode_mcu+0x1530>
      return 255;
 8010c5c:	22ff      	movs	r2, #255	; 0xff
  b = a + b;
 8010c5e:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010c62:	700a      	strb	r2, [r1, #0]
  b = a + b;
 8010c64:	4403      	add	r3, r0
 8010c66:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010c68:	2bff      	cmp	r3, #255	; 0xff
 8010c6a:	d906      	bls.n	8010c7a <pjpeg_decode_mcu+0x1052>
  b = a + b;
 8010c6c:	b21a      	sxth	r2, r3
    if (b < 0)
 8010c6e:	2a00      	cmp	r2, #0
 8010c70:	f2c0 82ac 	blt.w	80111cc <pjpeg_decode_mcu+0x15a4>
    else if (b > 255)
 8010c74:	2aff      	cmp	r2, #255	; 0xff
 8010c76:	f300 8302 	bgt.w	801127e <pjpeg_decode_mcu+0x1656>
  return (uint8)b;
 8010c7a:	b2db      	uxtb	r3, r3
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 8010c7c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
 8010c80:	e4c3      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010c82:	4a3d      	ldr	r2, [pc, #244]	; (8010d78 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010c84:	4d3d      	ldr	r5, [pc, #244]	; (8010d7c <pjpeg_decode_mcu+0x1154>)
 8010c86:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010c8a:	4c3d      	ldr	r4, [pc, #244]	; (8010d80 <pjpeg_decode_mcu+0x1158>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010c8c:	483d      	ldr	r0, [pc, #244]	; (8010d84 <pjpeg_decode_mcu+0x115c>)
    uint8 c = (uint8)*pSrc++;
 8010c8e:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010c92:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010c94:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010c96:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010c9a:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010c9e:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010ca2:	d1f4      	bne.n	8010c8e <pjpeg_decode_mcu+0x1066>
 8010ca4:	e4b1      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010ca6:	4a34      	ldr	r2, [pc, #208]	; (8010d78 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010ca8:	4d37      	ldr	r5, [pc, #220]	; (8010d88 <pjpeg_decode_mcu+0x1160>)
 8010caa:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010cae:	4c37      	ldr	r4, [pc, #220]	; (8010d8c <pjpeg_decode_mcu+0x1164>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010cb0:	4837      	ldr	r0, [pc, #220]	; (8010d90 <pjpeg_decode_mcu+0x1168>)
    uint8 c = (uint8)*pSrc++;
 8010cb2:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010cb6:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010cb8:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010cba:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010cbe:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010cc2:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010cc6:	d1f4      	bne.n	8010cb2 <pjpeg_decode_mcu+0x108a>
 8010cc8:	e49f      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010cca:	4a2b      	ldr	r2, [pc, #172]	; (8010d78 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010ccc:	4d31      	ldr	r5, [pc, #196]	; (8010d94 <pjpeg_decode_mcu+0x116c>)
 8010cce:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010cd2:	4c31      	ldr	r4, [pc, #196]	; (8010d98 <pjpeg_decode_mcu+0x1170>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010cd4:	4831      	ldr	r0, [pc, #196]	; (8010d9c <pjpeg_decode_mcu+0x1174>)
    uint8 c = (uint8)*pSrc++;
 8010cd6:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010cda:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010cdc:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010cde:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010ce2:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010ce6:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010cea:	d1f4      	bne.n	8010cd6 <pjpeg_decode_mcu+0x10ae>
 8010cec:	e48d      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
  int16 *pSrc = gCoeffBuf;
 8010cee:	4a22      	ldr	r2, [pc, #136]	; (8010d78 <pjpeg_decode_mcu+0x1150>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 8010cf0:	4d20      	ldr	r5, [pc, #128]	; (8010d74 <pjpeg_decode_mcu+0x114c>)
 8010cf2:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 8010cf6:	4c1e      	ldr	r4, [pc, #120]	; (8010d70 <pjpeg_decode_mcu+0x1148>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 8010cf8:	481c      	ldr	r0, [pc, #112]	; (8010d6c <pjpeg_decode_mcu+0x1144>)
    uint8 c = (uint8)*pSrc++;
 8010cfa:	f832 3b02 	ldrh.w	r3, [r2], #2
 8010cfe:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 8010d00:	428a      	cmp	r2, r1
    *pRDst++ = c;
 8010d02:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 8010d06:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 8010d0a:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 8010d0e:	d1f4      	bne.n	8010cfa <pjpeg_decode_mcu+0x10d2>
 8010d10:	e47b      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      upsampleCr(0, 0);
 8010d12:	2100      	movs	r1, #0
 8010d14:	4608      	mov	r0, r1
 8010d16:	f7fd f9f1 	bl	800e0fc <upsampleCr>
      upsampleCr(4, 64);
 8010d1a:	2140      	movs	r1, #64	; 0x40
 8010d1c:	2004      	movs	r0, #4
 8010d1e:	f7fd f9ed 	bl	800e0fc <upsampleCr>
      upsampleCr(4 * 8, 128);
 8010d22:	2180      	movs	r1, #128	; 0x80
 8010d24:	2020      	movs	r0, #32
 8010d26:	f7fd f9e9 	bl	800e0fc <upsampleCr>
      upsampleCr(4 + 4 * 8, 192);
 8010d2a:	21c0      	movs	r1, #192	; 0xc0
 8010d2c:	2024      	movs	r0, #36	; 0x24
 8010d2e:	f7fd f9e5 	bl	800e0fc <upsampleCr>
 8010d32:	e46a      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      upsampleCb(0, 0);
 8010d34:	2100      	movs	r1, #0
 8010d36:	4608      	mov	r0, r1
 8010d38:	f7fc ffb8 	bl	800dcac <upsampleCb>
      upsampleCb(4, 64);
 8010d3c:	2140      	movs	r1, #64	; 0x40
 8010d3e:	2004      	movs	r0, #4
 8010d40:	f7fc ffb4 	bl	800dcac <upsampleCb>
      upsampleCb(4 * 8, 128);
 8010d44:	2180      	movs	r1, #128	; 0x80
 8010d46:	2020      	movs	r0, #32
 8010d48:	f7fc ffb0 	bl	800dcac <upsampleCb>
      upsampleCb(4 + 4 * 8, 192);
 8010d4c:	21c0      	movs	r1, #192	; 0xc0
 8010d4e:	2024      	movs	r0, #36	; 0x24
 8010d50:	f7fc ffac 	bl	800dcac <upsampleCb>
 8010d54:	e459      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
      gMCUBufR[192] = c;
 8010d56:	4a05      	ldr	r2, [pc, #20]	; (8010d6c <pjpeg_decode_mcu+0x1144>)
      gMCUBufG[192] = c;
 8010d58:	4905      	ldr	r1, [pc, #20]	; (8010d70 <pjpeg_decode_mcu+0x1148>)
      gMCUBufR[192] = c;
 8010d5a:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      gMCUBufB[192] = c;
 8010d5e:	4a05      	ldr	r2, [pc, #20]	; (8010d74 <pjpeg_decode_mcu+0x114c>)
      gMCUBufG[192] = c;
 8010d60:	f881 30c0 	strb.w	r3, [r1, #192]	; 0xc0
      gMCUBufB[192] = c;
 8010d64:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 8010d68:	e44f      	b.n	801060a <pjpeg_decode_mcu+0x9e2>
 8010d6a:	bf00      	nop
 8010d6c:	2000ccf0 	.word	0x2000ccf0
 8010d70:	2000cbf0 	.word	0x2000cbf0
 8010d74:	2000caf0 	.word	0x2000caf0
 8010d78:	2000c5e0 	.word	0x2000c5e0
 8010d7c:	2000cbb0 	.word	0x2000cbb0
 8010d80:	2000ccb0 	.word	0x2000ccb0
 8010d84:	2000cdb0 	.word	0x2000cdb0
 8010d88:	2000cb70 	.word	0x2000cb70
 8010d8c:	2000cc70 	.word	0x2000cc70
 8010d90:	2000cd70 	.word	0x2000cd70
 8010d94:	2000cb30 	.word	0x2000cb30
 8010d98:	2000cc30 	.word	0x2000cc30
 8010d9c:	2000cd30 	.word	0x2000cd30
      cbG = ((c * 88U) >> 8U) - 44U;
 8010da0:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010da2:	4cb1      	ldr	r4, [pc, #708]	; (8011068 <pjpeg_decode_mcu+0x1440>)
      cbG = ((c * 88U) >> 8U) - 44U;
 8010da4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 8010da8:	7825      	ldrb	r5, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 8010daa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010dae:	0949      	lsrs	r1, r1, #5
 8010db0:	392c      	subs	r1, #44	; 0x2c
 8010db2:	b289      	uxth	r1, r1
  b = a - b;
 8010db4:	1a6d      	subs	r5, r5, r1
 8010db6:	b2ad      	uxth	r5, r5
  if ((uint16)b > 255U) {
 8010db8:	2dff      	cmp	r5, #255	; 0xff
 8010dba:	d906      	bls.n	8010dca <pjpeg_decode_mcu+0x11a2>
  b = a - b;
 8010dbc:	b228      	sxth	r0, r5
    if (b < 0)
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f2c0 8255 	blt.w	801126e <pjpeg_decode_mcu+0x1646>
    else if (b > 255)
 8010dc4:	28ff      	cmp	r0, #255	; 0xff
 8010dc6:	f300 81e3 	bgt.w	8011190 <pjpeg_decode_mcu+0x1568>
  return (uint8)b;
 8010dca:	b2ed      	uxtb	r5, r5
  b = a - b;
 8010dcc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8010dd0:	7025      	strb	r5, [r4, #0]
  b = a - b;
 8010dd2:	1a40      	subs	r0, r0, r1
 8010dd4:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 8010dd6:	28ff      	cmp	r0, #255	; 0xff
 8010dd8:	d906      	bls.n	8010de8 <pjpeg_decode_mcu+0x11c0>
  b = a - b;
 8010dda:	b205      	sxth	r5, r0
    if (b < 0)
 8010ddc:	2d00      	cmp	r5, #0
 8010dde:	f2c0 823e 	blt.w	801125e <pjpeg_decode_mcu+0x1636>
    else if (b > 255)
 8010de2:	2dff      	cmp	r5, #255	; 0xff
 8010de4:	f300 81d6 	bgt.w	8011194 <pjpeg_decode_mcu+0x156c>
  return (uint8)b;
 8010de8:	b2c0      	uxtb	r0, r0
  b = a - b;
 8010dea:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 8010dee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  b = a - b;
 8010df2:	1a6d      	subs	r5, r5, r1
 8010df4:	b2ad      	uxth	r5, r5
  if ((uint16)b > 255U) {
 8010df6:	2dff      	cmp	r5, #255	; 0xff
 8010df8:	d906      	bls.n	8010e08 <pjpeg_decode_mcu+0x11e0>
  b = a - b;
 8010dfa:	b228      	sxth	r0, r5
    if (b < 0)
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	f2c0 8240 	blt.w	8011282 <pjpeg_decode_mcu+0x165a>
    else if (b > 255)
 8010e02:	28ff      	cmp	r0, #255	; 0xff
 8010e04:	f300 81ed 	bgt.w	80111e2 <pjpeg_decode_mcu+0x15ba>
  return (uint8)b;
 8010e08:	b2ed      	uxtb	r5, r5
  b = a - b;
 8010e0a:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 8010e0e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  b = a - b;
 8010e12:	1a41      	subs	r1, r0, r1
 8010e14:	b289      	uxth	r1, r1
  if ((uint16)b > 255U) {
 8010e16:	29ff      	cmp	r1, #255	; 0xff
 8010e18:	d906      	bls.n	8010e28 <pjpeg_decode_mcu+0x1200>
  b = a - b;
 8010e1a:	b208      	sxth	r0, r1
    if (b < 0)
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	f2c0 8232 	blt.w	8011286 <pjpeg_decode_mcu+0x165e>
    else if (b > 255)
 8010e22:	28ff      	cmp	r0, #255	; 0xff
 8010e24:	f300 81df 	bgt.w	80111e6 <pjpeg_decode_mcu+0x15be>
  return (uint8)b;
 8010e28:	b2c9      	uxtb	r1, r1
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010e2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010e2e:	f1a3 00e3 	sub.w	r0, r3, #227	; 0xe3
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
 8010e32:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010e36:	eb02 1242 	add.w	r2, r2, r2, lsl #5
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010e3a:	498c      	ldr	r1, [pc, #560]	; (801106c <pjpeg_decode_mcu+0x1444>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010e3c:	f3c2 13d7 	ubfx	r3, r2, #7, #24
  b = a + b;
 8010e40:	780a      	ldrb	r2, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8010e42:	4403      	add	r3, r0
 8010e44:	b29b      	uxth	r3, r3
  b = a + b;
 8010e46:	441a      	add	r2, r3
 8010e48:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 8010e4a:	2aff      	cmp	r2, #255	; 0xff
 8010e4c:	d906      	bls.n	8010e5c <pjpeg_decode_mcu+0x1234>
  b = a + b;
 8010e4e:	b210      	sxth	r0, r2
    if (b < 0)
 8010e50:	2800      	cmp	r0, #0
 8010e52:	f2c0 821a 	blt.w	801128a <pjpeg_decode_mcu+0x1662>
    else if (b > 255)
 8010e56:	28ff      	cmp	r0, #255	; 0xff
 8010e58:	f300 81c7 	bgt.w	80111ea <pjpeg_decode_mcu+0x15c2>
  return (uint8)b;
 8010e5c:	b2d2      	uxtb	r2, r2
  b = a + b;
 8010e5e:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8010e62:	700a      	strb	r2, [r1, #0]
  b = a + b;
 8010e64:	4418      	add	r0, r3
 8010e66:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 8010e68:	28ff      	cmp	r0, #255	; 0xff
 8010e6a:	d906      	bls.n	8010e7a <pjpeg_decode_mcu+0x1252>
  b = a + b;
 8010e6c:	b202      	sxth	r2, r0
    if (b < 0)
 8010e6e:	2a00      	cmp	r2, #0
 8010e70:	f2c0 820d 	blt.w	801128e <pjpeg_decode_mcu+0x1666>
    else if (b > 255)
 8010e74:	2aff      	cmp	r2, #255	; 0xff
 8010e76:	f300 81ba 	bgt.w	80111ee <pjpeg_decode_mcu+0x15c6>
  return (uint8)b;
 8010e7a:	b2c0      	uxtb	r0, r0
  b = a + b;
 8010e7c:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 8010e80:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
  b = a + b;
 8010e84:	441a      	add	r2, r3
 8010e86:	b292      	uxth	r2, r2
  if ((uint16)b > 255U) {
 8010e88:	2aff      	cmp	r2, #255	; 0xff
 8010e8a:	d906      	bls.n	8010e9a <pjpeg_decode_mcu+0x1272>
  b = a + b;
 8010e8c:	b210      	sxth	r0, r2
    if (b < 0)
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	f2c0 81df 	blt.w	8011252 <pjpeg_decode_mcu+0x162a>
    else if (b > 255)
 8010e94:	28ff      	cmp	r0, #255	; 0xff
 8010e96:	f300 8193 	bgt.w	80111c0 <pjpeg_decode_mcu+0x1598>
  return (uint8)b;
 8010e9a:	b2d2      	uxtb	r2, r2
  b = a + b;
 8010e9c:	f891 00c0 	ldrb.w	r0, [r1, #192]	; 0xc0
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 8010ea0:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
  b = a + b;
 8010ea4:	4403      	add	r3, r0
 8010ea6:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 8010ea8:	2bff      	cmp	r3, #255	; 0xff
 8010eaa:	d906      	bls.n	8010eba <pjpeg_decode_mcu+0x1292>
  b = a + b;
 8010eac:	b21a      	sxth	r2, r3
    if (b < 0)
 8010eae:	2a00      	cmp	r2, #0
 8010eb0:	f2c0 81d3 	blt.w	801125a <pjpeg_decode_mcu+0x1632>
    else if (b > 255)
 8010eb4:	2aff      	cmp	r2, #255	; 0xff
 8010eb6:	f300 81ce 	bgt.w	8011256 <pjpeg_decode_mcu+0x162e>
  return (uint8)b;
 8010eba:	b2db      	uxtb	r3, r3
      gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
 8010ebc:	f881 30c0 	strb.w	r3, [r1, #192]	; 0xc0
 8010ec0:	f7ff bba3 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
  return (uint8)b;
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	e44c      	b.n	8010762 <pjpeg_decode_mcu+0xb3a>
      return 0;
 8010ec8:	2200      	movs	r2, #0
 8010eca:	e432      	b.n	8010732 <pjpeg_decode_mcu+0xb0a>
      return 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	e448      	b.n	8010762 <pjpeg_decode_mcu+0xb3a>
      return 0;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f7ff bafc 	b.w	80104ce <pjpeg_decode_mcu+0x8a6>
 8010ed6:	4d66      	ldr	r5, [pc, #408]	; (8011070 <pjpeg_decode_mcu+0x1448>)
    if (gRestartsLeft == 0) {
 8010ed8:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8010edc:	4e65      	ldr	r6, [pc, #404]	; (8011074 <pjpeg_decode_mcu+0x144c>)
 8010ede:	782b      	ldrb	r3, [r5, #0]
  if (!gInBufLeft) {
 8010ee0:	46a0      	mov	r8, r4
 8010ee2:	bb3b      	cbnz	r3, 8010f34 <pjpeg_decode_mcu+0x130c>
 8010ee4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 801109c <pjpeg_decode_mcu+0x1474>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010ee8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8011070 <pjpeg_decode_mcu+0x1448>
 8010eec:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80110a0 <pjpeg_decode_mcu+0x1478>
  gInBufLeft = 0;
 8010ef0:	2300      	movs	r3, #0
  gInBufOfs = 4;
 8010ef2:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010ef6:	464a      	mov	r2, r9
 8010ef8:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 8010efa:	702b      	strb	r3, [r5, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010efc:	4658      	mov	r0, fp
 8010efe:	4b5e      	ldr	r3, [pc, #376]	; (8011078 <pjpeg_decode_mcu+0x1450>)
 8010f00:	f8da 7000 	ldr.w	r7, [sl]
 8010f04:	681b      	ldr	r3, [r3, #0]
  gInBufOfs = 4;
 8010f06:	f886 c000 	strb.w	ip, [r6]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010f0a:	47b8      	blx	r7
  if (status) {
 8010f0c:	b108      	cbz	r0, 8010f12 <pjpeg_decode_mcu+0x12ea>
    gCallbackStatus = status;
 8010f0e:	4b5b      	ldr	r3, [pc, #364]	; (801107c <pjpeg_decode_mcu+0x1454>)
 8010f10:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 8010f12:	782b      	ldrb	r3, [r5, #0]
 8010f14:	b95b      	cbnz	r3, 8010f2e <pjpeg_decode_mcu+0x1306>
      gTemFlag = ~gTemFlag;
 8010f16:	485a      	ldr	r0, [pc, #360]	; (8011080 <pjpeg_decode_mcu+0x1458>)
 8010f18:	1e61      	subs	r1, r4, #1
 8010f1a:	7802      	ldrb	r2, [r0, #0]
 8010f1c:	b28c      	uxth	r4, r1
 8010f1e:	43d2      	mvns	r2, r2
 8010f20:	b2d2      	uxtb	r2, r2
 8010f22:	7002      	strb	r2, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8010f24:	b9c2      	cbnz	r2, 8010f58 <pjpeg_decode_mcu+0x1330>
 8010f26:	46a0      	mov	r8, r4
  for (i = 1536; i > 0; i--)
 8010f28:	2c00      	cmp	r4, #0
 8010f2a:	d1e1      	bne.n	8010ef0 <pjpeg_decode_mcu+0x12c8>
 8010f2c:	e011      	b.n	8010f52 <pjpeg_decode_mcu+0x132a>
 8010f2e:	4642      	mov	r2, r8
 8010f30:	46a0      	mov	r8, r4
 8010f32:	4614      	mov	r4, r2
  return gInBuf[gInBufOfs++];
 8010f34:	7832      	ldrb	r2, [r6, #0]
  gInBufLeft--;
 8010f36:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 8010f38:	4852      	ldr	r0, [pc, #328]	; (8011084 <pjpeg_decode_mcu+0x145c>)
 8010f3a:	1c51      	adds	r1, r2, #1
  gInBufLeft--;
 8010f3c:	b2db      	uxtb	r3, r3
    if (getChar() == 0xFF)
 8010f3e:	5c82      	ldrb	r2, [r0, r2]
  gInBufLeft--;
 8010f40:	702b      	strb	r3, [r5, #0]
    if (getChar() == 0xFF)
 8010f42:	2aff      	cmp	r2, #255	; 0xff
  return gInBuf[gInBufOfs++];
 8010f44:	7031      	strb	r1, [r6, #0]
    if (getChar() == 0xFF)
 8010f46:	d008      	beq.n	8010f5a <pjpeg_decode_mcu+0x1332>
 8010f48:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8010f4c:	b2a4      	uxth	r4, r4
  for (i = 1536; i > 0; i--)
 8010f4e:	2c00      	cmp	r4, #0
 8010f50:	d1c6      	bne.n	8010ee0 <pjpeg_decode_mcu+0x12b8>
    return PJPG_BAD_RESTART_MARKER;
 8010f52:	201d      	movs	r0, #29
 8010f54:	f7fe befb 	b.w	800fd4e <pjpeg_decode_mcu+0x126>
 8010f58:	4644      	mov	r4, r8
 8010f5a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8011078 <pjpeg_decode_mcu+0x1450>
  if (!gInBufLeft) {
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d140      	bne.n	8010fe4 <pjpeg_decode_mcu+0x13bc>
 8010f62:	f8df a138 	ldr.w	sl, [pc, #312]	; 801109c <pjpeg_decode_mcu+0x1474>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010f66:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011070 <pjpeg_decode_mcu+0x1448>
 8010f6a:	f8df b134 	ldr.w	fp, [pc, #308]	; 80110a0 <pjpeg_decode_mcu+0x1478>
  gInBufLeft = 0;
 8010f6e:	2300      	movs	r3, #0
  gInBufOfs = 4;
 8010f70:	f04f 0c04 	mov.w	ip, #4
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010f74:	464a      	mov	r2, r9
 8010f76:	21fc      	movs	r1, #252	; 0xfc
  gInBufLeft = 0;
 8010f78:	702b      	strb	r3, [r5, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010f7a:	4658      	mov	r0, fp
 8010f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f80:	f8da 7000 	ldr.w	r7, [sl]
  gInBufOfs = 4;
 8010f84:	f886 c000 	strb.w	ip, [r6]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8010f88:	47b8      	blx	r7
  if (status) {
 8010f8a:	b108      	cbz	r0, 8010f90 <pjpeg_decode_mcu+0x1368>
    gCallbackStatus = status;
 8010f8c:	4b3b      	ldr	r3, [pc, #236]	; (801107c <pjpeg_decode_mcu+0x1454>)
 8010f8e:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 8010f90:	782b      	ldrb	r3, [r5, #0]
 8010f92:	bb3b      	cbnz	r3, 8010fe4 <pjpeg_decode_mcu+0x13bc>
      gTemFlag = ~gTemFlag;
 8010f94:	493a      	ldr	r1, [pc, #232]	; (8011080 <pjpeg_decode_mcu+0x1458>)
  for (; i > 0; i--)
 8010f96:	1e62      	subs	r2, r4, #1
      gTemFlag = ~gTemFlag;
 8010f98:	780b      	ldrb	r3, [r1, #0]
  for (; i > 0; i--)
 8010f9a:	b294      	uxth	r4, r2
      gTemFlag = ~gTemFlag;
 8010f9c:	43db      	mvns	r3, r3
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	700b      	strb	r3, [r1, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d12d      	bne.n	8011002 <pjpeg_decode_mcu+0x13da>
 8010fa6:	22d9      	movs	r2, #217	; 0xd9
  if (c != (gNextRestartNum + M_RST0))
 8010fa8:	4937      	ldr	r1, [pc, #220]	; (8011088 <pjpeg_decode_mcu+0x1460>)
 8010faa:	880b      	ldrh	r3, [r1, #0]
 8010fac:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8010fb0:	4290      	cmp	r0, r2
 8010fb2:	d1ce      	bne.n	8010f52 <pjpeg_decode_mcu+0x132a>
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8010fb4:	3301      	adds	r3, #1
  gRestartsLeft = gRestartInterval;
 8010fb6:	4a35      	ldr	r2, [pc, #212]	; (801108c <pjpeg_decode_mcu+0x1464>)
  gLastDC[0] = 0;
 8010fb8:	4d35      	ldr	r5, [pc, #212]	; (8011090 <pjpeg_decode_mcu+0x1468>)
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8010fba:	f003 0307 	and.w	r3, r3, #7
  gRestartsLeft = gRestartInterval;
 8010fbe:	8810      	ldrh	r0, [r2, #0]
 8010fc0:	4e34      	ldr	r6, [pc, #208]	; (8011094 <pjpeg_decode_mcu+0x146c>)
  gLastDC[0] = 0;
 8010fc2:	2200      	movs	r2, #0
  gNextRestartNum = (gNextRestartNum + 1) & 7;
 8010fc4:	800b      	strh	r3, [r1, #0]
  gBitsLeft = 8;
 8010fc6:	2308      	movs	r3, #8
 8010fc8:	4c33      	ldr	r4, [pc, #204]	; (8011098 <pjpeg_decode_mcu+0x1470>)
  gRestartsLeft = gRestartInterval;
 8010fca:	8030      	strh	r0, [r6, #0]
  return getBits(numBits, 1);
 8010fcc:	2001      	movs	r0, #1
  gLastDC[0] = 0;
 8010fce:	602a      	str	r2, [r5, #0]
  gBitsLeft = 8;
 8010fd0:	7023      	strb	r3, [r4, #0]
  gLastDC[2] = 0;
 8010fd2:	80aa      	strh	r2, [r5, #4]
  return getBits(numBits, 1);
 8010fd4:	f7fd fe5e 	bl	800ec94 <getBits.constprop.5>
 8010fd8:	2001      	movs	r0, #1
 8010fda:	f7fd fe5b 	bl	800ec94 <getBits.constprop.5>
 8010fde:	8833      	ldrh	r3, [r6, #0]
 8010fe0:	f7fe be38 	b.w	800fc54 <pjpeg_decode_mcu+0x2c>
  return gInBuf[gInBufOfs++];
 8010fe4:	7832      	ldrb	r2, [r6, #0]
  gInBufLeft--;
 8010fe6:	3b01      	subs	r3, #1
  return gInBuf[gInBufOfs++];
 8010fe8:	4826      	ldr	r0, [pc, #152]	; (8011084 <pjpeg_decode_mcu+0x145c>)
 8010fea:	1c51      	adds	r1, r2, #1
  gInBufLeft--;
 8010fec:	b2db      	uxtb	r3, r3
  return gInBuf[gInBufOfs++];
 8010fee:	5c82      	ldrb	r2, [r0, r2]
  gInBufLeft--;
 8010ff0:	702b      	strb	r3, [r5, #0]
    if ((c = getChar()) != 0xFF)
 8010ff2:	2aff      	cmp	r2, #255	; 0xff
  return gInBuf[gInBufOfs++];
 8010ff4:	7031      	strb	r1, [r6, #0]
    if ((c = getChar()) != 0xFF)
 8010ff6:	d1d7      	bne.n	8010fa8 <pjpeg_decode_mcu+0x1380>
  for (; i > 0; i--)
 8010ff8:	3c01      	subs	r4, #1
 8010ffa:	b2a4      	uxth	r4, r4
 8010ffc:	2c00      	cmp	r4, #0
 8010ffe:	d1ae      	bne.n	8010f5e <pjpeg_decode_mcu+0x1336>
 8011000:	e7a7      	b.n	8010f52 <pjpeg_decode_mcu+0x132a>
 8011002:	2c00      	cmp	r4, #0
 8011004:	d1b3      	bne.n	8010f6e <pjpeg_decode_mcu+0x1346>
 8011006:	e7a4      	b.n	8010f52 <pjpeg_decode_mcu+0x132a>
      cbG = ((c * 88U) >> 8U) - 44U;
 8011008:	b21a      	sxth	r2, r3
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 801100a:	4c17      	ldr	r4, [pc, #92]	; (8011068 <pjpeg_decode_mcu+0x1440>)
      cbG = ((c * 88U) >> 8U) - 44U;
 801100c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  b = a - b;
 8011010:	7820      	ldrb	r0, [r4, #0]
      cbG = ((c * 88U) >> 8U) - 44U;
 8011012:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  b = a - b;
 8011016:	302c      	adds	r0, #44	; 0x2c
 8011018:	eba0 1051 	sub.w	r0, r0, r1, lsr #5
 801101c:	b280      	uxth	r0, r0
  if ((uint16)b > 255U) {
 801101e:	28ff      	cmp	r0, #255	; 0xff
 8011020:	f240 808f 	bls.w	8011142 <pjpeg_decode_mcu+0x151a>
  b = a - b;
 8011024:	b201      	sxth	r1, r0
    if (b < 0)
 8011026:	2900      	cmp	r1, #0
 8011028:	f2c0 80d6 	blt.w	80111d8 <pjpeg_decode_mcu+0x15b0>
    else if (b > 255)
 801102c:	29ff      	cmp	r1, #255	; 0xff
 801102e:	f340 8088 	ble.w	8011142 <pjpeg_decode_mcu+0x151a>
      return 255;
 8011032:	20ff      	movs	r0, #255	; 0xff
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8011034:	490d      	ldr	r1, [pc, #52]	; (801106c <pjpeg_decode_mcu+0x1444>)
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8011036:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 801103a:	7020      	strb	r0, [r4, #0]
  b = a + b;
 801103c:	7808      	ldrb	r0, [r1, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 801103e:	eb02 1242 	add.w	r2, r2, r2, lsl #5
  b = a + b;
 8011042:	38e3      	subs	r0, #227	; 0xe3
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8011044:	f3c2 12d7 	ubfx	r2, r2, #7, #24
  b = a + b;
 8011048:	4403      	add	r3, r0
 801104a:	4413      	add	r3, r2
 801104c:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 801104e:	2bff      	cmp	r3, #255	; 0xff
 8011050:	d906      	bls.n	8011060 <pjpeg_decode_mcu+0x1438>
  b = a + b;
 8011052:	b21a      	sxth	r2, r3
    if (b < 0)
 8011054:	2a00      	cmp	r2, #0
 8011056:	f2c0 80a9 	blt.w	80111ac <pjpeg_decode_mcu+0x1584>
    else if (b > 255)
 801105a:	2aff      	cmp	r2, #255	; 0xff
 801105c:	f300 810b 	bgt.w	8011276 <pjpeg_decode_mcu+0x164e>
  return (uint8)b;
 8011060:	b2db      	uxtb	r3, r3
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8011062:	700b      	strb	r3, [r1, #0]
 8011064:	f7ff bad1 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
 8011068:	2000cbf0 	.word	0x2000cbf0
 801106c:	2000caf0 	.word	0x2000caf0
 8011070:	2000cae4 	.word	0x2000cae4
 8011074:	2000cae5 	.word	0x2000cae5
 8011078:	2000cf10 	.word	0x2000cf10
 801107c:	2000c5dd 	.word	0x2000c5dd
 8011080:	2000cf0b 	.word	0x2000cf0b
 8011084:	2000c9e4 	.word	0x2000c9e4
 8011088:	2000cdfe 	.word	0x2000cdfe
 801108c:	2000cf06 	.word	0x2000cf06
 8011090:	2000cae8 	.word	0x2000cae8
 8011094:	2000cf08 	.word	0x2000cf08
 8011098:	2000c5dc 	.word	0x2000c5dc
 801109c:	2000cf14 	.word	0x2000cf14
 80110a0:	2000c9e8 	.word	0x2000c9e8
  int16 *pSrc = gCoeffBuf;
 80110a4:	4a7c      	ldr	r2, [pc, #496]	; (8011298 <pjpeg_decode_mcu+0x1670>)
  uint8 *pBDst = gMCUBufB + dstOfs;
 80110a6:	4d7d      	ldr	r5, [pc, #500]	; (801129c <pjpeg_decode_mcu+0x1674>)
 80110a8:	f102 0180 	add.w	r1, r2, #128	; 0x80
  uint8 *pGDst = gMCUBufG + dstOfs;
 80110ac:	4c7c      	ldr	r4, [pc, #496]	; (80112a0 <pjpeg_decode_mcu+0x1678>)
  uint8 *pRDst = gMCUBufR + dstOfs;
 80110ae:	487d      	ldr	r0, [pc, #500]	; (80112a4 <pjpeg_decode_mcu+0x167c>)
    uint8 c = (uint8)*pSrc++;
 80110b0:	f832 3b02 	ldrh.w	r3, [r2], #2
 80110b4:	b2db      	uxtb	r3, r3
  for (i = 64; i > 0; i--) {
 80110b6:	428a      	cmp	r2, r1
    *pRDst++ = c;
 80110b8:	f800 3b01 	strb.w	r3, [r0], #1
    *pGDst++ = c;
 80110bc:	f804 3b01 	strb.w	r3, [r4], #1
    *pBDst++ = c;
 80110c0:	f805 3b01 	strb.w	r3, [r5], #1
  for (i = 64; i > 0; i--) {
 80110c4:	d1f4      	bne.n	80110b0 <pjpeg_decode_mcu+0x1488>
 80110c6:	f7ff baa0 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
  uint8 *pDstB = gMCUBufB + dstOfs;
 80110ca:	4974      	ldr	r1, [pc, #464]	; (801129c <pjpeg_decode_mcu+0x1674>)
 80110cc:	4876      	ldr	r0, [pc, #472]	; (80112a8 <pjpeg_decode_mcu+0x1680>)
 80110ce:	f101 0540 	add.w	r5, r1, #64	; 0x40
  int16 *pSrc = gCoeffBuf;
 80110d2:	4c71      	ldr	r4, [pc, #452]	; (8011298 <pjpeg_decode_mcu+0x1670>)
 80110d4:	e01d      	b.n	8011112 <pjpeg_decode_mcu+0x14ea>
  b = a - b;
 80110d6:	b21f      	sxth	r7, r3
    if (b < 0)
 80110d8:	2f00      	cmp	r7, #0
 80110da:	db30      	blt.n	801113e <pjpeg_decode_mcu+0x1516>
    else if (b > 255)
 80110dc:	2fff      	cmp	r7, #255	; 0xff
 80110de:	dd28      	ble.n	8011132 <pjpeg_decode_mcu+0x150a>
      return 255;
 80110e0:	23ff      	movs	r3, #255	; 0xff
    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80110e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  b = a + b;
 80110e6:	3ee3      	subs	r6, #227	; 0xe3
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 80110e8:	7003      	strb	r3, [r0, #0]
    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80110ea:	eb02 1242 	add.w	r2, r2, r2, lsl #5
  b = a + b;
 80110ee:	780b      	ldrb	r3, [r1, #0]
 80110f0:	eb06 12d2 	add.w	r2, r6, r2, lsr #7
 80110f4:	4413      	add	r3, r2
 80110f6:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 80110f8:	2bff      	cmp	r3, #255	; 0xff
 80110fa:	d91c      	bls.n	8011136 <pjpeg_decode_mcu+0x150e>
  b = a + b;
 80110fc:	b21a      	sxth	r2, r3
    if (b < 0)
 80110fe:	2a00      	cmp	r2, #0
 8011100:	db1b      	blt.n	801113a <pjpeg_decode_mcu+0x1512>
    else if (b > 255)
 8011102:	2aff      	cmp	r2, #255	; 0xff
 8011104:	dd17      	ble.n	8011136 <pjpeg_decode_mcu+0x150e>
      return 255;
 8011106:	23ff      	movs	r3, #255	; 0xff
    pDstB[0] = addAndClamp(pDstB[0], cbB);
 8011108:	f801 3b01 	strb.w	r3, [r1], #1
  for (i = 64; i > 0; i--) {
 801110c:	42a9      	cmp	r1, r5
 801110e:	f43f aa7c 	beq.w	801060a <pjpeg_decode_mcu+0x9e2>
    uint8 cb = (uint8)*pSrc++;
 8011112:	f934 6b02 	ldrsh.w	r6, [r4], #2
  b = a - b;
 8011116:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    uint8 cb = (uint8)*pSrc++;
 801111a:	b2f6      	uxtb	r6, r6
  b = a - b;
 801111c:	332c      	adds	r3, #44	; 0x2c
    cbG = ((cb * 88U) >> 8U) - 44U;
 801111e:	b232      	sxth	r2, r6
 8011120:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8011124:	eb02 0747 	add.w	r7, r2, r7, lsl #1
  b = a - b;
 8011128:	eba3 1357 	sub.w	r3, r3, r7, lsr #5
 801112c:	b29b      	uxth	r3, r3
  if ((uint16)b > 255U) {
 801112e:	2bff      	cmp	r3, #255	; 0xff
 8011130:	d8d1      	bhi.n	80110d6 <pjpeg_decode_mcu+0x14ae>
  return (uint8)b;
 8011132:	b2db      	uxtb	r3, r3
 8011134:	e7d5      	b.n	80110e2 <pjpeg_decode_mcu+0x14ba>
  return (uint8)b;
 8011136:	b2db      	uxtb	r3, r3
 8011138:	e7e6      	b.n	8011108 <pjpeg_decode_mcu+0x14e0>
      return 0;
 801113a:	2300      	movs	r3, #0
 801113c:	e7e4      	b.n	8011108 <pjpeg_decode_mcu+0x14e0>
      return 0;
 801113e:	2300      	movs	r3, #0
 8011140:	e7cf      	b.n	80110e2 <pjpeg_decode_mcu+0x14ba>
  return (uint8)b;
 8011142:	b2c0      	uxtb	r0, r0
 8011144:	e776      	b.n	8011034 <pjpeg_decode_mcu+0x140c>
  return (uint8)b;
 8011146:	b2db      	uxtb	r3, r3
 8011148:	f7ff bb8d 	b.w	8010866 <pjpeg_decode_mcu+0xc3e>
 801114c:	b2c9      	uxtb	r1, r1
 801114e:	e437      	b.n	80109c0 <pjpeg_decode_mcu+0xd98>
 8011150:	b2db      	uxtb	r3, r3
 8011152:	e445      	b.n	80109e0 <pjpeg_decode_mcu+0xdb8>
 8011154:	b2d2      	uxtb	r2, r2
 8011156:	e4b1      	b.n	8010abc <pjpeg_decode_mcu+0xe94>
 8011158:	b2d2      	uxtb	r2, r2
 801115a:	e580      	b.n	8010c5e <pjpeg_decode_mcu+0x1036>
  return (uint8)b;
 801115c:	b2c9      	uxtb	r1, r1
 801115e:	e492      	b.n	8010a86 <pjpeg_decode_mcu+0xe5e>
 8011160:	b2c0      	uxtb	r0, r0
 8011162:	e480      	b.n	8010a66 <pjpeg_decode_mcu+0xe3e>
 8011164:	b2c9      	uxtb	r1, r1
 8011166:	e455      	b.n	8010a14 <pjpeg_decode_mcu+0xdec>
 8011168:	b2c9      	uxtb	r1, r1
 801116a:	e55d      	b.n	8010c28 <pjpeg_decode_mcu+0x1000>
 801116c:	b2c0      	uxtb	r0, r0
 801116e:	e54b      	b.n	8010c08 <pjpeg_decode_mcu+0xfe0>
  return (uint8)b;
 8011170:	b2db      	uxtb	r3, r3
 8011172:	e4f6      	b.n	8010b62 <pjpeg_decode_mcu+0xf3a>
 8011174:	b2c9      	uxtb	r1, r1
 8011176:	e504      	b.n	8010b82 <pjpeg_decode_mcu+0xf5a>
  return (uint8)b;
 8011178:	b2c9      	uxtb	r1, r1
 801117a:	e51c      	b.n	8010bb6 <pjpeg_decode_mcu+0xf8e>
      return 0;
 801117c:	2000      	movs	r0, #0
 801117e:	e543      	b.n	8010c08 <pjpeg_decode_mcu+0xfe0>
 8011180:	2100      	movs	r1, #0
 8011182:	e518      	b.n	8010bb6 <pjpeg_decode_mcu+0xf8e>
      return 0;
 8011184:	2300      	movs	r3, #0
 8011186:	e4a8      	b.n	8010ada <pjpeg_decode_mcu+0xeb2>
 8011188:	2300      	movs	r3, #0
 801118a:	e429      	b.n	80109e0 <pjpeg_decode_mcu+0xdb8>
      return 0;
 801118c:	2100      	movs	r1, #0
 801118e:	e54b      	b.n	8010c28 <pjpeg_decode_mcu+0x1000>
      return 255;
 8011190:	25ff      	movs	r5, #255	; 0xff
 8011192:	e61b      	b.n	8010dcc <pjpeg_decode_mcu+0x11a4>
 8011194:	20ff      	movs	r0, #255	; 0xff
 8011196:	e628      	b.n	8010dea <pjpeg_decode_mcu+0x11c2>
      return 0;
 8011198:	2200      	movs	r2, #0
 801119a:	e48f      	b.n	8010abc <pjpeg_decode_mcu+0xe94>
 801119c:	2200      	movs	r2, #0
 801119e:	e55e      	b.n	8010c5e <pjpeg_decode_mcu+0x1036>
      return 0;
 80111a0:	2300      	movs	r3, #0
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 80111a2:	7023      	strb	r3, [r4, #0]
 80111a4:	f7ff ba31 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
      return 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	e513      	b.n	8010bd4 <pjpeg_decode_mcu+0xfac>
      return 0;
 80111ac:	2300      	movs	r3, #0
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 80111ae:	700b      	strb	r3, [r1, #0]
 80111b0:	f7ff ba2b 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
      return 0;
 80111b4:	2100      	movs	r1, #0
 80111b6:	e42d      	b.n	8010a14 <pjpeg_decode_mcu+0xdec>
      return 0;
 80111b8:	2100      	movs	r1, #0
 80111ba:	e401      	b.n	80109c0 <pjpeg_decode_mcu+0xd98>
      return 0;
 80111bc:	2300      	movs	r3, #0
 80111be:	e438      	b.n	8010a32 <pjpeg_decode_mcu+0xe0a>
      return 255;
 80111c0:	22ff      	movs	r2, #255	; 0xff
 80111c2:	e66b      	b.n	8010e9c <pjpeg_decode_mcu+0x1274>
      return 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	e4cc      	b.n	8010b62 <pjpeg_decode_mcu+0xf3a>
 80111c8:	2100      	movs	r1, #0
 80111ca:	e4da      	b.n	8010b82 <pjpeg_decode_mcu+0xf5a>
 80111cc:	2300      	movs	r3, #0
 80111ce:	e555      	b.n	8010c7c <pjpeg_decode_mcu+0x1054>
      return 0;
 80111d0:	2100      	movs	r1, #0
 80111d2:	e458      	b.n	8010a86 <pjpeg_decode_mcu+0xe5e>
 80111d4:	2000      	movs	r0, #0
 80111d6:	e446      	b.n	8010a66 <pjpeg_decode_mcu+0xe3e>
 80111d8:	2000      	movs	r0, #0
 80111da:	e72b      	b.n	8011034 <pjpeg_decode_mcu+0x140c>
      return 0;
 80111dc:	2300      	movs	r3, #0
 80111de:	f7ff bb42 	b.w	8010866 <pjpeg_decode_mcu+0xc3e>
      return 255;
 80111e2:	25ff      	movs	r5, #255	; 0xff
 80111e4:	e611      	b.n	8010e0a <pjpeg_decode_mcu+0x11e2>
 80111e6:	21ff      	movs	r1, #255	; 0xff
 80111e8:	e61f      	b.n	8010e2a <pjpeg_decode_mcu+0x1202>
      return 255;
 80111ea:	22ff      	movs	r2, #255	; 0xff
 80111ec:	e637      	b.n	8010e5e <pjpeg_decode_mcu+0x1236>
 80111ee:	20ff      	movs	r0, #255	; 0xff
 80111f0:	e644      	b.n	8010e7c <pjpeg_decode_mcu+0x1254>
 80111f2:	21ff      	movs	r1, #255	; 0xff
 80111f4:	f7ff b990 	b.w	8010518 <pjpeg_decode_mcu+0x8f0>
 80111f8:	24ff      	movs	r4, #255	; 0xff
 80111fa:	f7ff b99c 	b.w	8010536 <pjpeg_decode_mcu+0x90e>
 80111fe:	21ff      	movs	r1, #255	; 0xff
 8011200:	f7ff b9a9 	b.w	8010556 <pjpeg_decode_mcu+0x92e>
 8011204:	23ff      	movs	r3, #255	; 0xff
 8011206:	f7ff b9b6 	b.w	8010576 <pjpeg_decode_mcu+0x94e>
      return 255;
 801120a:	21ff      	movs	r1, #255	; 0xff
 801120c:	f7ff b9cc 	b.w	80105a8 <pjpeg_decode_mcu+0x980>
 8011210:	22ff      	movs	r2, #255	; 0xff
 8011212:	f7ff b9d8 	b.w	80105c6 <pjpeg_decode_mcu+0x99e>
 8011216:	21ff      	movs	r1, #255	; 0xff
 8011218:	f7ff b9e5 	b.w	80105e6 <pjpeg_decode_mcu+0x9be>
 801121c:	23ff      	movs	r3, #255	; 0xff
 801121e:	f7ff b9f2 	b.w	8010606 <pjpeg_decode_mcu+0x9de>
      return 0;
 8011222:	2300      	movs	r3, #0
 8011224:	f7ff b9ef 	b.w	8010606 <pjpeg_decode_mcu+0x9de>
 8011228:	2200      	movs	r2, #0
 801122a:	f7ff b9cc 	b.w	80105c6 <pjpeg_decode_mcu+0x99e>
 801122e:	2100      	movs	r1, #0
 8011230:	f7ff b9d9 	b.w	80105e6 <pjpeg_decode_mcu+0x9be>
      return 0;
 8011234:	2400      	movs	r4, #0
 8011236:	f7ff b97e 	b.w	8010536 <pjpeg_decode_mcu+0x90e>
 801123a:	2100      	movs	r1, #0
 801123c:	f7ff b98b 	b.w	8010556 <pjpeg_decode_mcu+0x92e>
 8011240:	2300      	movs	r3, #0
 8011242:	f7ff b998 	b.w	8010576 <pjpeg_decode_mcu+0x94e>
      return 0;
 8011246:	2100      	movs	r1, #0
 8011248:	f7ff b9ae 	b.w	80105a8 <pjpeg_decode_mcu+0x980>
      return 255;
 801124c:	23ff      	movs	r3, #255	; 0xff
 801124e:	f7ff bbf0 	b.w	8010a32 <pjpeg_decode_mcu+0xe0a>
      return 0;
 8011252:	2200      	movs	r2, #0
 8011254:	e622      	b.n	8010e9c <pjpeg_decode_mcu+0x1274>
      return 255;
 8011256:	23ff      	movs	r3, #255	; 0xff
 8011258:	e630      	b.n	8010ebc <pjpeg_decode_mcu+0x1294>
      return 0;
 801125a:	2300      	movs	r3, #0
 801125c:	e62e      	b.n	8010ebc <pjpeg_decode_mcu+0x1294>
      return 0;
 801125e:	2000      	movs	r0, #0
 8011260:	e5c3      	b.n	8010dea <pjpeg_decode_mcu+0x11c2>
      return 255;
 8011262:	23ff      	movs	r3, #255	; 0xff
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8011264:	7023      	strb	r3, [r4, #0]
 8011266:	f7ff b9d0 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
      return 255;
 801126a:	23ff      	movs	r3, #255	; 0xff
 801126c:	e435      	b.n	8010ada <pjpeg_decode_mcu+0xeb2>
      return 0;
 801126e:	2500      	movs	r5, #0
 8011270:	e5ac      	b.n	8010dcc <pjpeg_decode_mcu+0x11a4>
      return 255;
 8011272:	23ff      	movs	r3, #255	; 0xff
 8011274:	e4ae      	b.n	8010bd4 <pjpeg_decode_mcu+0xfac>
      return 255;
 8011276:	23ff      	movs	r3, #255	; 0xff
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8011278:	700b      	strb	r3, [r1, #0]
 801127a:	f7ff b9c6 	b.w	801060a <pjpeg_decode_mcu+0x9e2>
      return 255;
 801127e:	23ff      	movs	r3, #255	; 0xff
 8011280:	e4fc      	b.n	8010c7c <pjpeg_decode_mcu+0x1054>
      return 0;
 8011282:	2500      	movs	r5, #0
 8011284:	e5c1      	b.n	8010e0a <pjpeg_decode_mcu+0x11e2>
 8011286:	2100      	movs	r1, #0
 8011288:	e5cf      	b.n	8010e2a <pjpeg_decode_mcu+0x1202>
      return 0;
 801128a:	2200      	movs	r2, #0
 801128c:	e5e7      	b.n	8010e5e <pjpeg_decode_mcu+0x1236>
 801128e:	2000      	movs	r0, #0
 8011290:	e5f4      	b.n	8010e7c <pjpeg_decode_mcu+0x1254>
 8011292:	2100      	movs	r1, #0
 8011294:	f7ff b940 	b.w	8010518 <pjpeg_decode_mcu+0x8f0>
 8011298:	2000c5e0 	.word	0x2000c5e0
 801129c:	2000caf0 	.word	0x2000caf0
 80112a0:	2000cbf0 	.word	0x2000cbf0
 80112a4:	2000ccf0 	.word	0x2000ccf0
 80112a8:	2000cbef 	.word	0x2000cbef

080112ac <pjpeg_decode_init>:

unsigned char
pjpeg_decode_init(pjpeg_image_info_t *pInfo,
                  pjpeg_need_bytes_callback_t pNeed_bytes_callback,
                  void *pCallback_data, unsigned char reduce) {
 80112ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8 status;

  pInfo->m_width = 0;
 80112b0:	2500      	movs	r5, #0
  pInfo->m_pMCUBufG = (unsigned char *)0;
  pInfo->m_pMCUBufB = (unsigned char *)0;

  g_pNeedBytesCallback = pNeed_bytes_callback;
  g_pCallback_data = pCallback_data;
  gCallbackStatus = 0;
 80112b2:	4f9e      	ldr	r7, [pc, #632]	; (801152c <pjpeg_decode_init+0x280>)
                  void *pCallback_data, unsigned char reduce) {
 80112b4:	4604      	mov	r4, r0
  gBitBuf = 0;
 80112b6:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 801156c <pjpeg_decode_init+0x2c0>
  gCallbackStatus = 0;
 80112ba:	703d      	strb	r5, [r7, #0]
  return getBits(numBits, 0);
 80112bc:	4628      	mov	r0, r5
  gImageXSize = 0;
 80112be:	4f9c      	ldr	r7, [pc, #624]	; (8011530 <pjpeg_decode_init+0x284>)
  gBitsLeft = 8;
 80112c0:	2608      	movs	r6, #8
  gInBufLeft = 0;
 80112c2:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8011568 <pjpeg_decode_init+0x2bc>
                  void *pCallback_data, unsigned char reduce) {
 80112c6:	b087      	sub	sp, #28
  gImageXSize = 0;
 80112c8:	803d      	strh	r5, [r7, #0]
  gImageYSize = 0;
 80112ca:	4f9a      	ldr	r7, [pc, #616]	; (8011534 <pjpeg_decode_init+0x288>)
  pInfo->m_MCUSPerCol = 0;
 80112cc:	6125      	str	r5, [r4, #16]
  gImageYSize = 0;
 80112ce:	803d      	strh	r5, [r7, #0]
  gCompsInFrame = 0;
 80112d0:	4f99      	ldr	r7, [pc, #612]	; (8011538 <pjpeg_decode_init+0x28c>)
  pInfo->m_scanType = PJPG_GRAYSCALE;
 80112d2:	7525      	strb	r5, [r4, #20]
  gCompsInFrame = 0;
 80112d4:	703d      	strb	r5, [r7, #0]
  gRestartInterval = 0;
 80112d6:	4f99      	ldr	r7, [pc, #612]	; (801153c <pjpeg_decode_init+0x290>)
  pInfo->m_pMCUBufB = (unsigned char *)0;
 80112d8:	62a5      	str	r5, [r4, #40]	; 0x28
  gRestartInterval = 0;
 80112da:	803d      	strh	r5, [r7, #0]
  gCompsInScan = 0;
 80112dc:	4f98      	ldr	r7, [pc, #608]	; (8011540 <pjpeg_decode_init+0x294>)
  gBitBuf = 0;
 80112de:	f8a9 5000 	strh.w	r5, [r9]
  gCompsInScan = 0;
 80112e2:	703d      	strb	r5, [r7, #0]
  gValidHuffTables = 0;
 80112e4:	4f97      	ldr	r7, [pc, #604]	; (8011544 <pjpeg_decode_init+0x298>)
  gBitsLeft = 8;
 80112e6:	f8df a288 	ldr.w	sl, [pc, #648]	; 8011570 <pjpeg_decode_init+0x2c4>
  gValidHuffTables = 0;
 80112ea:	703d      	strb	r5, [r7, #0]
  gValidQuantTables = 0;
 80112ec:	4f96      	ldr	r7, [pc, #600]	; (8011548 <pjpeg_decode_init+0x29c>)
  gBitsLeft = 8;
 80112ee:	f88a 6000 	strb.w	r6, [sl]
  gValidQuantTables = 0;
 80112f2:	703d      	strb	r5, [r7, #0]
  gTemFlag = 0;
 80112f4:	4f95      	ldr	r7, [pc, #596]	; (801154c <pjpeg_decode_init+0x2a0>)
 80112f6:	703d      	strb	r5, [r7, #0]
  gInBufOfs = 0;
 80112f8:	4f95      	ldr	r7, [pc, #596]	; (8011550 <pjpeg_decode_init+0x2a4>)
  pInfo->m_height = 0;
 80112fa:	e9c4 5500 	strd	r5, r5, [r4]
  pInfo->m_MCUSPerRow = 0;
 80112fe:	e9c4 5502 	strd	r5, r5, [r4, #8]
  pInfo->m_MCUHeight = 0;
 8011302:	e9c4 5506 	strd	r5, r5, [r4, #24]
  pInfo->m_pMCUBufG = (unsigned char *)0;
 8011306:	e9c4 5508 	strd	r5, r5, [r4, #32]
  gInBufOfs = 0;
 801130a:	703d      	strb	r5, [r7, #0]
  gInBufLeft = 0;
 801130c:	f888 5000 	strb.w	r5, [r8]
  g_pNeedBytesCallback = pNeed_bytes_callback;
 8011310:	4d90      	ldr	r5, [pc, #576]	; (8011554 <pjpeg_decode_init+0x2a8>)
 8011312:	6029      	str	r1, [r5, #0]
  gReduce = reduce;
 8011314:	4990      	ldr	r1, [pc, #576]	; (8011558 <pjpeg_decode_init+0x2ac>)
  g_pCallback_data = pCallback_data;
 8011316:	4d91      	ldr	r5, [pc, #580]	; (801155c <pjpeg_decode_init+0x2b0>)
  gReduce = reduce;
 8011318:	700b      	strb	r3, [r1, #0]
  g_pCallback_data = pCallback_data;
 801131a:	602a      	str	r2, [r5, #0]
  return getBits(numBits, 0);
 801131c:	f7fd fcba 	bl	800ec94 <getBits.constprop.5>
  if (gBitsLeft < numBits) {
 8011320:	f89a 3000 	ldrb.w	r3, [sl]
  uint16 ret = gBitBuf;
 8011324:	f8b9 2000 	ldrh.w	r2, [r9]
  if (gBitsLeft < numBits) {
 8011328:	2b07      	cmp	r3, #7
 801132a:	d90d      	bls.n	8011348 <pjpeg_decode_init+0x9c>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 801132c:	3b08      	subs	r3, #8
    gBitBuf <<= numBits;
 801132e:	0212      	lsls	r2, r2, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 8011330:	f88a 3000 	strb.w	r3, [sl]

  status = init();
  if ((status) || (gCallbackStatus))
 8011334:	4b7d      	ldr	r3, [pc, #500]	; (801152c <pjpeg_decode_init+0x280>)
    gBitBuf <<= numBits;
 8011336:	f8a9 2000 	strh.w	r2, [r9]
  if ((status) || (gCallbackStatus))
 801133a:	781f      	ldrb	r7, [r3, #0]
 801133c:	2f00      	cmp	r7, #0
 801133e:	d035      	beq.n	80113ac <pjpeg_decode_init+0x100>
  pInfo->m_pMCUBufR = gMCUBufR;
  pInfo->m_pMCUBufG = gMCUBufG;
  pInfo->m_pMCUBufB = gMCUBufB;

  return 0;
}
 8011340:	4638      	mov	r0, r7
 8011342:	b007      	add	sp, #28
 8011344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gBitBuf <<= gBitsLeft;
 8011348:	409a      	lsls	r2, r3
  if (!gInBufLeft) {
 801134a:	f898 1000 	ldrb.w	r1, [r8]
    gBitBuf <<= gBitsLeft;
 801134e:	b292      	uxth	r2, r2
 8011350:	f8a9 2000 	strh.w	r2, [r9]
  if (!gInBufLeft) {
 8011354:	b9b1      	cbnz	r1, 8011384 <pjpeg_decode_init+0xd8>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8011356:	4b7f      	ldr	r3, [pc, #508]	; (8011554 <pjpeg_decode_init+0x2a8>)
  gInBufOfs = 4;
 8011358:	2604      	movs	r6, #4
  gInBufLeft = 0;
 801135a:	f888 1000 	strb.w	r1, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 801135e:	4642      	mov	r2, r8
 8011360:	681d      	ldr	r5, [r3, #0]
 8011362:	21fc      	movs	r1, #252	; 0xfc
 8011364:	4b7d      	ldr	r3, [pc, #500]	; (801155c <pjpeg_decode_init+0x2b0>)
 8011366:	487e      	ldr	r0, [pc, #504]	; (8011560 <pjpeg_decode_init+0x2b4>)
 8011368:	681b      	ldr	r3, [r3, #0]
  gInBufOfs = 4;
 801136a:	703e      	strb	r6, [r7, #0]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 801136c:	47a8      	blx	r5
  if (status) {
 801136e:	b108      	cbz	r0, 8011374 <pjpeg_decode_init+0xc8>
    gCallbackStatus = status;
 8011370:	4b6e      	ldr	r3, [pc, #440]	; (801152c <pjpeg_decode_init+0x280>)
 8011372:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 8011374:	f898 1000 	ldrb.w	r1, [r8]
 8011378:	2900      	cmp	r1, #0
 801137a:	d038      	beq.n	80113ee <pjpeg_decode_init+0x142>
 801137c:	f8b9 2000 	ldrh.w	r2, [r9]
 8011380:	f89a 3000 	ldrb.w	r3, [sl]
  return gInBuf[gInBufOfs++];
 8011384:	4e72      	ldr	r6, [pc, #456]	; (8011550 <pjpeg_decode_init+0x2a4>)
  gInBufLeft--;
 8011386:	3901      	subs	r1, #1
  return gInBuf[gInBufOfs++];
 8011388:	4f76      	ldr	r7, [pc, #472]	; (8011564 <pjpeg_decode_init+0x2b8>)
 801138a:	7830      	ldrb	r0, [r6, #0]
  gInBufLeft--;
 801138c:	f888 1000 	strb.w	r1, [r8]
  return gInBuf[gInBufOfs++];
 8011390:	1c45      	adds	r5, r0, #1
 8011392:	5c39      	ldrb	r1, [r7, r0]
 8011394:	7035      	strb	r5, [r6, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 8011396:	430a      	orrs	r2, r1
 8011398:	f1c3 0308 	rsb	r3, r3, #8
 801139c:	fa02 f303 	lsl.w	r3, r2, r3
 80113a0:	f8a9 3000 	strh.w	r3, [r9]
  if ((status) || (gCallbackStatus))
 80113a4:	4b61      	ldr	r3, [pc, #388]	; (801152c <pjpeg_decode_init+0x280>)
 80113a6:	781f      	ldrb	r7, [r3, #0]
 80113a8:	2f00      	cmp	r7, #0
 80113aa:	d1c9      	bne.n	8011340 <pjpeg_decode_init+0x94>
  return getBits(numBits, 0);
 80113ac:	4638      	mov	r0, r7
 80113ae:	f7fd fc71 	bl	800ec94 <getBits.constprop.5>
 80113b2:	4605      	mov	r5, r0
 80113b4:	4638      	mov	r0, r7
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 80113b6:	b2ed      	uxtb	r5, r5
  return getBits(numBits, 0);
 80113b8:	f7fd fc6c 	bl	800ec94 <getBits.constprop.5>
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 80113bc:	2dff      	cmp	r5, #255	; 0xff
  uint8 thischar = (uint8)getBits1(8);
 80113be:	fa5f fb80 	uxtb.w	fp, r0
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 80113c2:	d122      	bne.n	801140a <pjpeg_decode_init+0x15e>
 80113c4:	f1bb 0fd8 	cmp.w	fp, #216	; 0xd8
 80113c8:	d11f      	bne.n	801140a <pjpeg_decode_init+0x15e>
  status = processMarkers(&c);
 80113ca:	f10d 0017 	add.w	r0, sp, #23
 80113ce:	f7fd fd23 	bl	800ee18 <processMarkers>
  if (status)
 80113d2:	4607      	mov	r7, r0
 80113d4:	2800      	cmp	r0, #0
 80113d6:	d139      	bne.n	801144c <pjpeg_decode_init+0x1a0>
  switch (c) {
 80113d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80113dc:	2bc2      	cmp	r3, #194	; 0xc2
 80113de:	d07b      	beq.n	80114d8 <pjpeg_decode_init+0x22c>
 80113e0:	2bc9      	cmp	r3, #201	; 0xc9
 80113e2:	f000 808c 	beq.w	80114fe <pjpeg_decode_init+0x252>
 80113e6:	2bc0      	cmp	r3, #192	; 0xc0
 80113e8:	d07e      	beq.n	80114e8 <pjpeg_decode_init+0x23c>
    return PJPG_UNSUPPORTED_MARKER;
 80113ea:	2714      	movs	r7, #20
 80113ec:	e02e      	b.n	801144c <pjpeg_decode_init+0x1a0>
      gTemFlag = ~gTemFlag;
 80113ee:	4857      	ldr	r0, [pc, #348]	; (801154c <pjpeg_decode_init+0x2a0>)
 80113f0:	f8b9 2000 	ldrh.w	r2, [r9]
 80113f4:	7801      	ldrb	r1, [r0, #0]
 80113f6:	f89a 3000 	ldrb.w	r3, [sl]
 80113fa:	43c9      	mvns	r1, r1
 80113fc:	b2c9      	uxtb	r1, r1
      return gTemFlag ? 0xFF : 0xD9;
 80113fe:	2900      	cmp	r1, #0
      gTemFlag = ~gTemFlag;
 8011400:	7001      	strb	r1, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 8011402:	bf0c      	ite	eq
 8011404:	21d9      	moveq	r1, #217	; 0xd9
 8011406:	21ff      	movne	r1, #255	; 0xff
 8011408:	e7c5      	b.n	8011396 <pjpeg_decode_init+0xea>
  if ((lastchar == 0xFF) && (thischar == M_SOI))
 801140a:	f640 76ff 	movw	r6, #4095	; 0xfff
 801140e:	f8b9 3000 	ldrh.w	r3, [r9]
 8011412:	f89a 1000 	ldrb.w	r1, [sl]
 8011416:	9401      	str	r4, [sp, #4]
 8011418:	e003      	b.n	8011422 <pjpeg_decode_init+0x176>
 801141a:	3e01      	subs	r6, #1
 801141c:	b2b6      	uxth	r6, r6
    if (--bytesleft == 0)
 801141e:	b1a6      	cbz	r6, 801144a <pjpeg_decode_init+0x19e>
    thischar = (uint8)getBits1(8);
 8011420:	4693      	mov	fp, r2
  if (gBitsLeft < numBits) {
 8011422:	2907      	cmp	r1, #7
 8011424:	461d      	mov	r5, r3
 8011426:	d917      	bls.n	8011458 <pjpeg_decode_init+0x1ac>
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 8011428:	3908      	subs	r1, #8
    gBitBuf <<= numBits;
 801142a:	021b      	lsls	r3, r3, #8
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 801142c:	b2c9      	uxtb	r1, r1
    gBitBuf <<= numBits;
 801142e:	b29b      	uxth	r3, r3
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 8011430:	f88a 1000 	strb.w	r1, [sl]
    gBitBuf <<= numBits;
 8011434:	f8a9 3000 	strh.w	r3, [r9]
  return ret >> (16 - origBits);
 8011438:	122d      	asrs	r5, r5, #8
    if (lastchar == 0xFF) {
 801143a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    thischar = (uint8)getBits1(8);
 801143e:	b2ea      	uxtb	r2, r5
    if (lastchar == 0xFF) {
 8011440:	d1eb      	bne.n	801141a <pjpeg_decode_init+0x16e>
      if (thischar == M_SOI)
 8011442:	2dd8      	cmp	r5, #216	; 0xd8
 8011444:	d04a      	beq.n	80114dc <pjpeg_decode_init+0x230>
      else if (thischar == M_EOI)
 8011446:	2dd9      	cmp	r5, #217	; 0xd9
 8011448:	d1e7      	bne.n	801141a <pjpeg_decode_init+0x16e>
 801144a:	2713      	movs	r7, #19
    return gCallbackStatus ? gCallbackStatus : status;
 801144c:	4b37      	ldr	r3, [pc, #220]	; (801152c <pjpeg_decode_init+0x280>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	bf18      	it	ne
 8011454:	461f      	movne	r7, r3
 8011456:	e773      	b.n	8011340 <pjpeg_decode_init+0x94>
    gBitBuf <<= gBitsLeft;
 8011458:	408b      	lsls	r3, r1
  if (!gInBufLeft) {
 801145a:	f898 0000 	ldrb.w	r0, [r8]
    gBitBuf <<= gBitsLeft;
 801145e:	b29a      	uxth	r2, r3
 8011460:	f8a9 2000 	strh.w	r2, [r9]
  if (!gInBufLeft) {
 8011464:	b9c0      	cbnz	r0, 8011498 <pjpeg_decode_init+0x1ec>
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8011466:	4b3b      	ldr	r3, [pc, #236]	; (8011554 <pjpeg_decode_init+0x2a8>)
  gInBufOfs = 4;
 8011468:	f04f 0c04 	mov.w	ip, #4
 801146c:	4c38      	ldr	r4, [pc, #224]	; (8011550 <pjpeg_decode_init+0x2a4>)
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 801146e:	21fc      	movs	r1, #252	; 0xfc
 8011470:	681f      	ldr	r7, [r3, #0]
 8011472:	4b3a      	ldr	r3, [pc, #232]	; (801155c <pjpeg_decode_init+0x2b0>)
  gInBufLeft = 0;
 8011474:	f888 0000 	strb.w	r0, [r8]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8011478:	4a3b      	ldr	r2, [pc, #236]	; (8011568 <pjpeg_decode_init+0x2bc>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4838      	ldr	r0, [pc, #224]	; (8011560 <pjpeg_decode_init+0x2b4>)
  gInBufOfs = 4;
 801147e:	f884 c000 	strb.w	ip, [r4]
  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 8011482:	47b8      	blx	r7
  if (status) {
 8011484:	b108      	cbz	r0, 801148a <pjpeg_decode_init+0x1de>
    gCallbackStatus = status;
 8011486:	4b29      	ldr	r3, [pc, #164]	; (801152c <pjpeg_decode_init+0x280>)
 8011488:	7018      	strb	r0, [r3, #0]
    if (!gInBufLeft) {
 801148a:	f898 0000 	ldrb.w	r0, [r8]
 801148e:	b1a8      	cbz	r0, 80114bc <pjpeg_decode_init+0x210>
 8011490:	f8b9 2000 	ldrh.w	r2, [r9]
 8011494:	f89a 1000 	ldrb.w	r1, [sl]
  return gInBuf[gInBufOfs++];
 8011498:	4c2d      	ldr	r4, [pc, #180]	; (8011550 <pjpeg_decode_init+0x2a4>)
  gInBufLeft--;
 801149a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801149e:	4831      	ldr	r0, [pc, #196]	; (8011564 <pjpeg_decode_init+0x2b8>)
  return gInBuf[gInBufOfs++];
 80114a0:	7823      	ldrb	r3, [r4, #0]
  gInBufLeft--;
 80114a2:	f888 c000 	strb.w	ip, [r8]
  return gInBuf[gInBufOfs++];
 80114a6:	1c5f      	adds	r7, r3, #1
 80114a8:	5cc3      	ldrb	r3, [r0, r3]
 80114aa:	7027      	strb	r7, [r4, #0]
    gBitBuf <<= (numBits - gBitsLeft);
 80114ac:	4313      	orrs	r3, r2
 80114ae:	f1c1 0208 	rsb	r2, r1, #8
 80114b2:	4093      	lsls	r3, r2
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	f8a9 3000 	strh.w	r3, [r9]
 80114ba:	e7bd      	b.n	8011438 <pjpeg_decode_init+0x18c>
      gTemFlag = ~gTemFlag;
 80114bc:	4823      	ldr	r0, [pc, #140]	; (801154c <pjpeg_decode_init+0x2a0>)
 80114be:	f8b9 2000 	ldrh.w	r2, [r9]
 80114c2:	7803      	ldrb	r3, [r0, #0]
 80114c4:	f89a 1000 	ldrb.w	r1, [sl]
 80114c8:	43db      	mvns	r3, r3
 80114ca:	b2db      	uxtb	r3, r3
      return gTemFlag ? 0xFF : 0xD9;
 80114cc:	2b00      	cmp	r3, #0
      gTemFlag = ~gTemFlag;
 80114ce:	7003      	strb	r3, [r0, #0]
      return gTemFlag ? 0xFF : 0xD9;
 80114d0:	bf0c      	ite	eq
 80114d2:	23d9      	moveq	r3, #217	; 0xd9
 80114d4:	23ff      	movne	r3, #255	; 0xff
 80114d6:	e7e9      	b.n	80114ac <pjpeg_decode_init+0x200>
    return PJPG_UNSUPPORTED_MODE;
 80114d8:	2725      	movs	r7, #37	; 0x25
 80114da:	e7b7      	b.n	801144c <pjpeg_decode_init+0x1a0>
  if (thischar != 0xFF)
 80114dc:	0a1b      	lsrs	r3, r3, #8
 80114de:	9c01      	ldr	r4, [sp, #4]
 80114e0:	2bff      	cmp	r3, #255	; 0xff
 80114e2:	f43f af72 	beq.w	80113ca <pjpeg_decode_init+0x11e>
 80114e6:	e7b0      	b.n	801144a <pjpeg_decode_init+0x19e>
  return getBits(numBits, 0);
 80114e8:	f7fd fb30 	bl	800eb4c <getBits.constprop.4>
 80114ec:	4605      	mov	r5, r0
 80114ee:	4638      	mov	r0, r7
 80114f0:	f7fd fbd0 	bl	800ec94 <getBits.constprop.5>
  if (getBits1(8) != 8)
 80114f4:	2808      	cmp	r0, #8
  return getBits(numBits, 0);
 80114f6:	4606      	mov	r6, r0
  if (getBits1(8) != 8)
 80114f8:	d003      	beq.n	8011502 <pjpeg_decode_init+0x256>
    return PJPG_BAD_PRECISION;
 80114fa:	2707      	movs	r7, #7
 80114fc:	e7a6      	b.n	801144c <pjpeg_decode_init+0x1a0>
    return PJPG_NO_ARITHMITIC_SUPPORT;
 80114fe:	2711      	movs	r7, #17
 8011500:	e7a4      	b.n	801144c <pjpeg_decode_init+0x1a0>
  return getBits(numBits, 0);
 8011502:	f7fd fb23 	bl	800eb4c <getBits.constprop.4>
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 8011506:	1e43      	subs	r3, r0, #1
  gImageYSize = getBits1(16);
 8011508:	4a0a      	ldr	r2, [pc, #40]	; (8011534 <pjpeg_decode_init+0x288>)
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 801150a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  gImageYSize = getBits1(16);
 801150e:	8010      	strh	r0, [r2, #0]
  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 8011510:	d301      	bcc.n	8011516 <pjpeg_decode_init+0x26a>
    return PJPG_BAD_HEIGHT;
 8011512:	4637      	mov	r7, r6
 8011514:	e79a      	b.n	801144c <pjpeg_decode_init+0x1a0>
  return getBits(numBits, 0);
 8011516:	f7fd fb19 	bl	800eb4c <getBits.constprop.4>
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 801151a:	1e43      	subs	r3, r0, #1
  gImageXSize = getBits1(16);
 801151c:	4a04      	ldr	r2, [pc, #16]	; (8011530 <pjpeg_decode_init+0x284>)
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 801151e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  gImageXSize = getBits1(16);
 8011522:	8010      	strh	r0, [r2, #0]
  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 8011524:	d326      	bcc.n	8011574 <pjpeg_decode_init+0x2c8>
    return PJPG_BAD_WIDTH;
 8011526:	2709      	movs	r7, #9
 8011528:	e790      	b.n	801144c <pjpeg_decode_init+0x1a0>
 801152a:	bf00      	nop
 801152c:	2000c5dd 	.word	0x2000c5dd
 8011530:	2000c9e0 	.word	0x2000c9e0
 8011534:	2000c9e2 	.word	0x2000c9e2
 8011538:	2000c67b 	.word	0x2000c67b
 801153c:	2000cf06 	.word	0x2000cf06
 8011540:	2000c67c 	.word	0x2000c67c
 8011544:	2000cf0c 	.word	0x2000cf0c
 8011548:	2000cf0d 	.word	0x2000cf0d
 801154c:	2000cf0b 	.word	0x2000cf0b
 8011550:	2000cae5 	.word	0x2000cae5
 8011554:	2000cf14 	.word	0x2000cf14
 8011558:	2000cf04 	.word	0x2000cf04
 801155c:	2000cf10 	.word	0x2000cf10
 8011560:	2000c9e8 	.word	0x2000c9e8
 8011564:	2000c9e4 	.word	0x2000c9e4
 8011568:	2000cae4 	.word	0x2000cae4
 801156c:	2000c5da 	.word	0x2000c5da
 8011570:	2000c5dc 	.word	0x2000c5dc
  return getBits(numBits, 0);
 8011574:	4638      	mov	r0, r7
 8011576:	f7fd fb8d 	bl	800ec94 <getBits.constprop.5>
  gCompsInFrame = (uint8)getBits1(8);
 801157a:	4ba8      	ldr	r3, [pc, #672]	; (801181c <pjpeg_decode_init+0x570>)
 801157c:	b2c0      	uxtb	r0, r0
  if (gCompsInFrame > 3)
 801157e:	2803      	cmp	r0, #3
  gCompsInFrame = (uint8)getBits1(8);
 8011580:	7018      	strb	r0, [r3, #0]
  if (gCompsInFrame > 3)
 8011582:	f200 8101 	bhi.w	8011788 <pjpeg_decode_init+0x4dc>
  if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
 8011586:	2303      	movs	r3, #3
 8011588:	fb13 6600 	smlabb	r6, r3, r0, r6
 801158c:	42b5      	cmp	r5, r6
 801158e:	f040 80f9 	bne.w	8011784 <pjpeg_decode_init+0x4d8>
  for (i = 0; i < gCompsInFrame; i++) {
 8011592:	2800      	cmp	r0, #0
 8011594:	f000 80fa 	beq.w	801178c <pjpeg_decode_init+0x4e0>
 8011598:	4da1      	ldr	r5, [pc, #644]	; (8011820 <pjpeg_decode_init+0x574>)
 801159a:	4ea2      	ldr	r6, [pc, #648]	; (8011824 <pjpeg_decode_init+0x578>)
  return getBits(numBits, 0);
 801159c:	2000      	movs	r0, #0
 801159e:	f7fd fb79 	bl	800ec94 <getBits.constprop.5>
    gCompIdent[i] = (uint8)getBits1(8);
 80115a2:	4ba1      	ldr	r3, [pc, #644]	; (8011828 <pjpeg_decode_init+0x57c>)
  return getBits(numBits, 0);
 80115a4:	2100      	movs	r1, #0
    gCompIdent[i] = (uint8)getBits1(8);
 80115a6:	55d8      	strb	r0, [r3, r7]
  return getBits(numBits, 0);
 80115a8:	2004      	movs	r0, #4
 80115aa:	f7fe f9a7 	bl	800f8fc <getBits>
 80115ae:	2100      	movs	r1, #0
    gCompHSamp[i] = (uint8)getBits1(4);
 80115b0:	55e8      	strb	r0, [r5, r7]
  return getBits(numBits, 0);
 80115b2:	2004      	movs	r0, #4
 80115b4:	f7fe f9a2 	bl	800f8fc <getBits>
    gCompVSamp[i] = (uint8)getBits1(4);
 80115b8:	55f0      	strb	r0, [r6, r7]
  return getBits(numBits, 0);
 80115ba:	2000      	movs	r0, #0
 80115bc:	f7fd fb6a 	bl	800ec94 <getBits.constprop.5>
  for (i = 0; i < gCompsInFrame; i++) {
 80115c0:	1c7b      	adds	r3, r7, #1
    gCompQuant[i] = (uint8)getBits1(8);
 80115c2:	b2c0      	uxtb	r0, r0
 80115c4:	4a99      	ldr	r2, [pc, #612]	; (801182c <pjpeg_decode_init+0x580>)
    if (gCompQuant[i] > 1)
 80115c6:	2801      	cmp	r0, #1
    gCompQuant[i] = (uint8)getBits1(8);
 80115c8:	55d0      	strb	r0, [r2, r7]
  for (i = 0; i < gCompsInFrame; i++) {
 80115ca:	b2df      	uxtb	r7, r3
    if (gCompQuant[i] > 1)
 80115cc:	f200 80d8 	bhi.w	8011780 <pjpeg_decode_init+0x4d4>
  for (i = 0; i < gCompsInFrame; i++) {
 80115d0:	4b92      	ldr	r3, [pc, #584]	; (801181c <pjpeg_decode_init+0x570>)
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	429f      	cmp	r7, r3
 80115d6:	d3e1      	bcc.n	801159c <pjpeg_decode_init+0x2f0>
  if ((status) || (gCallbackStatus))
 80115d8:	4a95      	ldr	r2, [pc, #596]	; (8011830 <pjpeg_decode_init+0x584>)
 80115da:	7817      	ldrb	r7, [r2, #0]
 80115dc:	2f00      	cmp	r7, #0
 80115de:	f47f aeaf 	bne.w	8011340 <pjpeg_decode_init+0x94>
  if (gCompsInFrame == 1) {
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d016      	beq.n	8011614 <pjpeg_decode_init+0x368>
  } else if (gCompsInFrame == 3) {
 80115e6:	2b03      	cmp	r3, #3
 80115e8:	f040 808a 	bne.w	8011700 <pjpeg_decode_init+0x454>
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 80115ec:	786b      	ldrb	r3, [r5, #1]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d10e      	bne.n	8011610 <pjpeg_decode_init+0x364>
 80115f2:	7873      	ldrb	r3, [r6, #1]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d10b      	bne.n	8011610 <pjpeg_decode_init+0x364>
 80115f8:	78ab      	ldrb	r3, [r5, #2]
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d108      	bne.n	8011610 <pjpeg_decode_init+0x364>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 80115fe:	78b3      	ldrb	r3, [r6, #2]
 8011600:	2b01      	cmp	r3, #1
 8011602:	d105      	bne.n	8011610 <pjpeg_decode_init+0x364>
    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 8011604:	782b      	ldrb	r3, [r5, #0]
 8011606:	2b01      	cmp	r3, #1
 8011608:	f000 80a1 	beq.w	801174e <pjpeg_decode_init+0x4a2>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 801160c:	2b02      	cmp	r3, #2
 801160e:	d07d      	beq.n	801170c <pjpeg_decode_init+0x460>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 8011610:	271b      	movs	r7, #27
 8011612:	e695      	b.n	8011340 <pjpeg_decode_init+0x94>
    if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
 8011614:	782b      	ldrb	r3, [r5, #0]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d1fa      	bne.n	8011610 <pjpeg_decode_init+0x364>
 801161a:	7833      	ldrb	r3, [r6, #0]
 801161c:	2b01      	cmp	r3, #1
 801161e:	d1f7      	bne.n	8011610 <pjpeg_decode_init+0x364>
    gMaxMCUXSize = 8;
 8011620:	2008      	movs	r0, #8
    gMaxBlocksPerMCU = 1;
 8011622:	4984      	ldr	r1, [pc, #528]	; (8011834 <pjpeg_decode_init+0x588>)
    gMCUOrg[0] = 0;
 8011624:	4d84      	ldr	r5, [pc, #528]	; (8011838 <pjpeg_decode_init+0x58c>)
    gMaxMCUYSize = 8;
 8011626:	2207      	movs	r2, #7
    gMaxBlocksPerMCU = 1;
 8011628:	700b      	strb	r3, [r1, #0]
    gMaxMCUYSize = 8;
 801162a:	4601      	mov	r1, r0
    gMCUOrg[0] = 0;
 801162c:	702f      	strb	r7, [r5, #0]
    gMaxMCUYSize = 8;
 801162e:	4b83      	ldr	r3, [pc, #524]	; (801183c <pjpeg_decode_init+0x590>)
    gScanType = PJPG_GRAYSCALE;
 8011630:	4e83      	ldr	r6, [pc, #524]	; (8011840 <pjpeg_decode_init+0x594>)
    gMaxMCUXSize = 8;
 8011632:	4d84      	ldr	r5, [pc, #528]	; (8011844 <pjpeg_decode_init+0x598>)
    gScanType = PJPG_GRAYSCALE;
 8011634:	7037      	strb	r7, [r6, #0]
    gMaxMCUYSize = 8;
 8011636:	9301      	str	r3, [sp, #4]
    gMaxMCUXSize = 8;
 8011638:	7028      	strb	r0, [r5, #0]
    gMaxMCUYSize = 8;
 801163a:	7018      	strb	r0, [r3, #0]
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 801163c:	4b82      	ldr	r3, [pc, #520]	; (8011848 <pjpeg_decode_init+0x59c>)
 801163e:	2003      	movs	r0, #3
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	3307      	adds	r3, #7
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8011644:	2908      	cmp	r1, #8
 8011646:	4981      	ldr	r1, [pc, #516]	; (801184c <pjpeg_decode_init+0x5a0>)
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8011648:	fa43 f300 	asr.w	r3, r3, r0
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 801164c:	f8df c218 	ldr.w	ip, [pc, #536]	; 8011868 <pjpeg_decode_init+0x5bc>
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8011650:	8809      	ldrh	r1, [r1, #0]
 8011652:	bf14      	ite	ne
 8011654:	2704      	movne	r7, #4
 8011656:	2703      	moveq	r7, #3
  gMaxMCUSPerRow =
 8011658:	b29b      	uxth	r3, r3
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 801165a:	440a      	add	r2, r1
  gMaxMCUSPerCol =
 801165c:	497c      	ldr	r1, [pc, #496]	; (8011850 <pjpeg_decode_init+0x5a4>)
  status = processMarkers(&c);
 801165e:	f10d 0017 	add.w	r0, sp, #23
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8011662:	413a      	asrs	r2, r7
  gMaxMCUSPerCol =
 8011664:	b292      	uxth	r2, r2
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8011666:	fb13 f702 	smulbb	r7, r3, r2
  gMaxMCUSPerCol =
 801166a:	800a      	strh	r2, [r1, #0]
  gMaxMCUSPerRow =
 801166c:	4a79      	ldr	r2, [pc, #484]	; (8011854 <pjpeg_decode_init+0x5a8>)
  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 801166e:	f8ac 7000 	strh.w	r7, [ip]
  gMaxMCUSPerRow =
 8011672:	8013      	strh	r3, [r2, #0]
  status = processMarkers(&c);
 8011674:	f7fd fbd0 	bl	800ee18 <processMarkers>
  if (status)
 8011678:	4607      	mov	r7, r0
 801167a:	2800      	cmp	r0, #0
 801167c:	f47f aee6 	bne.w	801144c <pjpeg_decode_init+0x1a0>
  if (c == M_EOI) {
 8011680:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8011684:	2bda      	cmp	r3, #218	; 0xda
 8011686:	d13d      	bne.n	8011704 <pjpeg_decode_init+0x458>
  return getBits(numBits, 0);
 8011688:	f7fd fa60 	bl	800eb4c <getBits.constprop.4>
 801168c:	4683      	mov	fp, r0
 801168e:	4638      	mov	r0, r7
 8011690:	f7fd fb00 	bl	800ec94 <getBits.constprop.5>
  left -= 3;
 8011694:	f1ab 0203 	sub.w	r2, fp, #3
  gCompsInScan = (uint8)getBits1(8);
 8011698:	b2c0      	uxtb	r0, r0
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 801169a:	2303      	movs	r3, #3
  left -= 3;
 801169c:	b292      	uxth	r2, r2
  gCompsInScan = (uint8)getBits1(8);
 801169e:	496e      	ldr	r1, [pc, #440]	; (8011858 <pjpeg_decode_init+0x5ac>)
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 80116a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  left -= 3;
 80116a4:	9202      	str	r2, [sp, #8]
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 80116a6:	429a      	cmp	r2, r3
  gCompsInScan = (uint8)getBits1(8);
 80116a8:	7008      	strb	r0, [r1, #0]
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 80116aa:	d12d      	bne.n	8011708 <pjpeg_decode_init+0x45c>
 80116ac:	3801      	subs	r0, #1
 80116ae:	2802      	cmp	r0, #2
 80116b0:	d82a      	bhi.n	8011708 <pjpeg_decode_init+0x45c>
    gCompList[i] = ci;
 80116b2:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 801186c <pjpeg_decode_init+0x5c0>
  return getBits(numBits, 0);
 80116b6:	2000      	movs	r0, #0
 80116b8:	f7fd faec 	bl	800ec94 <getBits.constprop.5>
    uint8 cc = (uint8)getBits1(8);
 80116bc:	b2c2      	uxtb	r2, r0
  return getBits(numBits, 0);
 80116be:	2000      	movs	r0, #0
    uint8 cc = (uint8)getBits1(8);
 80116c0:	9203      	str	r2, [sp, #12]
  return getBits(numBits, 0);
 80116c2:	f7fd fae7 	bl	800ec94 <getBits.constprop.5>
    left -= 2;
 80116c6:	9b02      	ldr	r3, [sp, #8]
    uint8 c = (uint8)getBits1(8);
 80116c8:	b2c0      	uxtb	r0, r0
    for (ci = 0; ci < gCompsInFrame; ci++)
 80116ca:	4a54      	ldr	r2, [pc, #336]	; (801181c <pjpeg_decode_init+0x570>)
    left -= 2;
 80116cc:	3b02      	subs	r3, #2
    for (ci = 0; ci < gCompsInFrame; ci++)
 80116ce:	7811      	ldrb	r1, [r2, #0]
    left -= 2;
 80116d0:	fa1f fc83 	uxth.w	ip, r3
    for (ci = 0; ci < gCompsInFrame; ci++)
 80116d4:	b191      	cbz	r1, 80116fc <pjpeg_decode_init+0x450>
      if (cc == gCompIdent[ci])
 80116d6:	4b54      	ldr	r3, [pc, #336]	; (8011828 <pjpeg_decode_init+0x57c>)
 80116d8:	9a03      	ldr	r2, [sp, #12]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	4293      	cmp	r3, r2
 80116de:	f000 8082 	beq.w	80117e6 <pjpeg_decode_init+0x53a>
    for (ci = 0; ci < gCompsInFrame; ci++)
 80116e2:	2901      	cmp	r1, #1
 80116e4:	d90a      	bls.n	80116fc <pjpeg_decode_init+0x450>
      if (cc == gCompIdent[ci])
 80116e6:	4b50      	ldr	r3, [pc, #320]	; (8011828 <pjpeg_decode_init+0x57c>)
 80116e8:	785b      	ldrb	r3, [r3, #1]
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d068      	beq.n	80117c0 <pjpeg_decode_init+0x514>
    for (ci = 0; ci < gCompsInFrame; ci++)
 80116ee:	2902      	cmp	r1, #2
 80116f0:	d004      	beq.n	80116fc <pjpeg_decode_init+0x450>
      if (cc == gCompIdent[ci])
 80116f2:	4b4d      	ldr	r3, [pc, #308]	; (8011828 <pjpeg_decode_init+0x57c>)
 80116f4:	789b      	ldrb	r3, [r3, #2]
 80116f6:	4293      	cmp	r3, r2
 80116f8:	f000 817a 	beq.w	80119f0 <pjpeg_decode_init+0x744>
      return PJPG_BAD_SOS_COMP_ID;
 80116fc:	270f      	movs	r7, #15
 80116fe:	e6a5      	b.n	801144c <pjpeg_decode_init+0x1a0>
    return PJPG_UNSUPPORTED_COLORSPACE;
 8011700:	271a      	movs	r7, #26
 8011702:	e61d      	b.n	8011340 <pjpeg_decode_init+0x94>
    return PJPG_UNEXPECTED_MARKER;
 8011704:	2712      	movs	r7, #18
 8011706:	e6a1      	b.n	801144c <pjpeg_decode_init+0x1a0>
    return PJPG_BAD_SOS_LENGTH;
 8011708:	270e      	movs	r7, #14
 801170a:	e69f      	b.n	801144c <pjpeg_decode_init+0x1a0>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 801170c:	7832      	ldrb	r2, [r6, #0]
 801170e:	2a01      	cmp	r2, #1
 8011710:	f000 8170 	beq.w	80119f4 <pjpeg_decode_init+0x748>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2)) {
 8011714:	2a02      	cmp	r2, #2
 8011716:	f47f af7b 	bne.w	8011610 <pjpeg_decode_init+0x364>
      gScanType = PJPG_YH2V2;
 801171a:	2104      	movs	r1, #4
 801171c:	4e48      	ldr	r6, [pc, #288]	; (8011840 <pjpeg_decode_init+0x594>)
      gMCUOrg[0] = 0;
 801171e:	4a46      	ldr	r2, [pc, #280]	; (8011838 <pjpeg_decode_init+0x58c>)
      gMaxBlocksPerMCU = 6;
 8011720:	2506      	movs	r5, #6
 8011722:	4b44      	ldr	r3, [pc, #272]	; (8011834 <pjpeg_decode_init+0x588>)
      gMCUOrg[0] = 0;
 8011724:	2000      	movs	r0, #0
      gScanType = PJPG_YH2V2;
 8011726:	7031      	strb	r1, [r6, #0]
      gMCUOrg[0] = 0;
 8011728:	f240 2101 	movw	r1, #513	; 0x201
      gMaxBlocksPerMCU = 6;
 801172c:	701d      	strb	r5, [r3, #0]
      gMaxMCUXSize = 16;
 801172e:	2310      	movs	r3, #16
      gMCUOrg[0] = 0;
 8011730:	6010      	str	r0, [r2, #0]
      gMaxMCUXSize = 16;
 8011732:	4d44      	ldr	r5, [pc, #272]	; (8011844 <pjpeg_decode_init+0x598>)
      gMCUOrg[0] = 0;
 8011734:	8091      	strh	r1, [r2, #4]
      gMaxMCUYSize = 16;
 8011736:	4a41      	ldr	r2, [pc, #260]	; (801183c <pjpeg_decode_init+0x590>)
      gMaxMCUXSize = 16;
 8011738:	702b      	strb	r3, [r5, #0]
      gMaxMCUYSize = 16;
 801173a:	9201      	str	r2, [sp, #4]
 801173c:	7013      	strb	r3, [r2, #0]
 801173e:	9a01      	ldr	r2, [sp, #4]
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8011740:	2004      	movs	r0, #4
 8011742:	4b41      	ldr	r3, [pc, #260]	; (8011848 <pjpeg_decode_init+0x59c>)
 8011744:	7811      	ldrb	r1, [r2, #0]
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	1e4a      	subs	r2, r1, #1
 801174a:	330f      	adds	r3, #15
 801174c:	e77a      	b.n	8011644 <pjpeg_decode_init+0x398>
    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 801174e:	7833      	ldrb	r3, [r6, #0]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d021      	beq.n	8011798 <pjpeg_decode_init+0x4ec>
    } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
 8011754:	2b02      	cmp	r3, #2
 8011756:	f47f af5b 	bne.w	8011610 <pjpeg_decode_init+0x364>
      gScanType = PJPG_YH1V2;
 801175a:	2303      	movs	r3, #3
      gMCUOrg[0] = 0;
 801175c:	4d36      	ldr	r5, [pc, #216]	; (8011838 <pjpeg_decode_init+0x58c>)
 801175e:	4f3f      	ldr	r7, [pc, #252]	; (801185c <pjpeg_decode_init+0x5b0>)
      gMaxBlocksPerMCU = 4;
 8011760:	2104      	movs	r1, #4
      gScanType = PJPG_YH1V2;
 8011762:	4e37      	ldr	r6, [pc, #220]	; (8011840 <pjpeg_decode_init+0x594>)
      gMaxMCUXSize = 8;
 8011764:	2008      	movs	r0, #8
      gMCUOrg[0] = 0;
 8011766:	602f      	str	r7, [r5, #0]
      gMaxBlocksPerMCU = 4;
 8011768:	4a32      	ldr	r2, [pc, #200]	; (8011834 <pjpeg_decode_init+0x588>)
      gMaxMCUYSize = 16;
 801176a:	4f34      	ldr	r7, [pc, #208]	; (801183c <pjpeg_decode_init+0x590>)
      gScanType = PJPG_YH1V2;
 801176c:	7033      	strb	r3, [r6, #0]
      gMaxMCUYSize = 16;
 801176e:	2310      	movs	r3, #16
      gMaxMCUXSize = 8;
 8011770:	4d34      	ldr	r5, [pc, #208]	; (8011844 <pjpeg_decode_init+0x598>)
      gMaxBlocksPerMCU = 4;
 8011772:	7011      	strb	r1, [r2, #0]
      gMaxMCUYSize = 16;
 8011774:	220f      	movs	r2, #15
 8011776:	4619      	mov	r1, r3
 8011778:	9701      	str	r7, [sp, #4]
      gMaxMCUXSize = 8;
 801177a:	7028      	strb	r0, [r5, #0]
      gMaxMCUYSize = 16;
 801177c:	703b      	strb	r3, [r7, #0]
 801177e:	e75d      	b.n	801163c <pjpeg_decode_init+0x390>
      return PJPG_UNSUPPORTED_QUANT_TABLE;
 8011780:	2724      	movs	r7, #36	; 0x24
 8011782:	e663      	b.n	801144c <pjpeg_decode_init+0x1a0>
    return PJPG_BAD_SOF_LENGTH;
 8011784:	270b      	movs	r7, #11
 8011786:	e661      	b.n	801144c <pjpeg_decode_init+0x1a0>
    return PJPG_TOO_MANY_COMPONENTS;
 8011788:	270a      	movs	r7, #10
 801178a:	e65f      	b.n	801144c <pjpeg_decode_init+0x1a0>
  if ((status) || (gCallbackStatus))
 801178c:	4b28      	ldr	r3, [pc, #160]	; (8011830 <pjpeg_decode_init+0x584>)
 801178e:	781f      	ldrb	r7, [r3, #0]
    return PJPG_UNSUPPORTED_COLORSPACE;
 8011790:	2f00      	cmp	r7, #0
 8011792:	bf08      	it	eq
 8011794:	271a      	moveq	r7, #26
 8011796:	e5d3      	b.n	8011340 <pjpeg_decode_init+0x94>
      gMCUOrg[0] = 0;
 8011798:	4827      	ldr	r0, [pc, #156]	; (8011838 <pjpeg_decode_init+0x58c>)
 801179a:	f44f 7180 	mov.w	r1, #256	; 0x100
      gMCUOrg[1] = 1;
 801179e:	2502      	movs	r5, #2
      gScanType = PJPG_YH1V1;
 80117a0:	4e27      	ldr	r6, [pc, #156]	; (8011840 <pjpeg_decode_init+0x594>)
      gMCUOrg[0] = 0;
 80117a2:	8001      	strh	r1, [r0, #0]
      gMaxBlocksPerMCU = 3;
 80117a4:	2703      	movs	r7, #3
 80117a6:	4a23      	ldr	r2, [pc, #140]	; (8011834 <pjpeg_decode_init+0x588>)
      gMCUOrg[1] = 1;
 80117a8:	7085      	strb	r5, [r0, #2]
      gScanType = PJPG_YH1V1;
 80117aa:	7033      	strb	r3, [r6, #0]
      gMaxMCUXSize = 8;
 80117ac:	2308      	movs	r3, #8
      gMaxMCUYSize = 8;
 80117ae:	4823      	ldr	r0, [pc, #140]	; (801183c <pjpeg_decode_init+0x590>)
      gMaxMCUXSize = 8;
 80117b0:	4d24      	ldr	r5, [pc, #144]	; (8011844 <pjpeg_decode_init+0x598>)
      gMaxMCUYSize = 8;
 80117b2:	4619      	mov	r1, r3
      gMaxBlocksPerMCU = 3;
 80117b4:	7017      	strb	r7, [r2, #0]
      gMaxMCUYSize = 8;
 80117b6:	2207      	movs	r2, #7
 80117b8:	9001      	str	r0, [sp, #4]
      gMaxMCUXSize = 8;
 80117ba:	702b      	strb	r3, [r5, #0]
      gMaxMCUYSize = 8;
 80117bc:	7003      	strb	r3, [r0, #0]
 80117be:	e73d      	b.n	801163c <pjpeg_decode_init+0x390>
    for (ci = 0; ci < gCompsInFrame; ci++)
 80117c0:	2301      	movs	r3, #1
  for (i = 0; i < gCompsInScan; i++) {
 80117c2:	1c79      	adds	r1, r7, #1
    gCompDCTab[ci] = (c >> 4) & 15;
 80117c4:	0902      	lsrs	r2, r0, #4
    gCompList[i] = ci;
 80117c6:	f80b 3007 	strb.w	r3, [fp, r7]
    gCompACTab[ci] = (c & 15);
 80117ca:	f000 000f 	and.w	r0, r0, #15
  for (i = 0; i < gCompsInScan; i++) {
 80117ce:	b2cf      	uxtb	r7, r1
    gCompDCTab[ci] = (c >> 4) & 15;
 80117d0:	4923      	ldr	r1, [pc, #140]	; (8011860 <pjpeg_decode_init+0x5b4>)
 80117d2:	54ca      	strb	r2, [r1, r3]
  for (i = 0; i < gCompsInScan; i++) {
 80117d4:	4a20      	ldr	r2, [pc, #128]	; (8011858 <pjpeg_decode_init+0x5ac>)
    gCompACTab[ci] = (c & 15);
 80117d6:	4923      	ldr	r1, [pc, #140]	; (8011864 <pjpeg_decode_init+0x5b8>)
  for (i = 0; i < gCompsInScan; i++) {
 80117d8:	7812      	ldrb	r2, [r2, #0]
    gCompACTab[ci] = (c & 15);
 80117da:	54c8      	strb	r0, [r1, r3]
  for (i = 0; i < gCompsInScan; i++) {
 80117dc:	42ba      	cmp	r2, r7
 80117de:	d904      	bls.n	80117ea <pjpeg_decode_init+0x53e>
    left -= 2;
 80117e0:	f8cd c008 	str.w	ip, [sp, #8]
 80117e4:	e767      	b.n	80116b6 <pjpeg_decode_init+0x40a>
    for (ci = 0; ci < gCompsInFrame; ci++)
 80117e6:	2300      	movs	r3, #0
 80117e8:	e7eb      	b.n	80117c2 <pjpeg_decode_init+0x516>
  return getBits(numBits, 0);
 80117ea:	2000      	movs	r0, #0
 80117ec:	f7fd fa52 	bl	800ec94 <getBits.constprop.5>
 80117f0:	2000      	movs	r0, #0
 80117f2:	f7fd fa4f 	bl	800ec94 <getBits.constprop.5>
 80117f6:	2100      	movs	r1, #0
 80117f8:	2004      	movs	r0, #4
 80117fa:	f7fe f87f 	bl	800f8fc <getBits>
 80117fe:	2100      	movs	r1, #0
 8011800:	2004      	movs	r0, #4
 8011802:	f7fe f87b 	bl	800f8fc <getBits>
  left -= 3;
 8011806:	9b02      	ldr	r3, [sp, #8]
 8011808:	1f5f      	subs	r7, r3, #5
 801180a:	b2bf      	uxth	r7, r7
  return getBits(numBits, 0);
 801180c:	2000      	movs	r0, #0
  while (left) {
 801180e:	b37f      	cbz	r7, 8011870 <pjpeg_decode_init+0x5c4>
    left--;
 8011810:	3f01      	subs	r7, #1
  return getBits(numBits, 0);
 8011812:	f7fd fa3f 	bl	800ec94 <getBits.constprop.5>
    left--;
 8011816:	b2bf      	uxth	r7, r7
 8011818:	e7f8      	b.n	801180c <pjpeg_decode_init+0x560>
 801181a:	bf00      	nop
 801181c:	2000c67b 	.word	0x2000c67b
 8011820:	2000c668 	.word	0x2000c668
 8011824:	2000c678 	.word	0x2000c678
 8011828:	2000c66c 	.word	0x2000c66c
 801182c:	2000c674 	.word	0x2000c674
 8011830:	2000c5dd 	.word	0x2000c5dd
 8011834:	2000cdf6 	.word	0x2000cdf6
 8011838:	2000cdf0 	.word	0x2000cdf0
 801183c:	2000cdfd 	.word	0x2000cdfd
 8011840:	2000cf0a 	.word	0x2000cf0a
 8011844:	2000cdfc 	.word	0x2000cdfc
 8011848:	2000c9e0 	.word	0x2000c9e0
 801184c:	2000c9e2 	.word	0x2000c9e2
 8011850:	2000cdf8 	.word	0x2000cdf8
 8011854:	2000cdfa 	.word	0x2000cdfa
 8011858:	2000c67c 	.word	0x2000c67c
 801185c:	02010000 	.word	0x02010000
 8011860:	2000c664 	.word	0x2000c664
 8011864:	2000c660 	.word	0x2000c660
 8011868:	2000ce00 	.word	0x2000ce00
 801186c:	2000c670 	.word	0x2000c670
  for (i = 0; i < gCompsInScan; i++) {
 8011870:	4b68      	ldr	r3, [pc, #416]	; (8011a14 <pjpeg_decode_init+0x768>)
 8011872:	7819      	ldrb	r1, [r3, #0]
 8011874:	2900      	cmp	r1, #0
 8011876:	d05c      	beq.n	8011932 <pjpeg_decode_init+0x686>
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8011878:	4a67      	ldr	r2, [pc, #412]	; (8011a18 <pjpeg_decode_init+0x76c>)
 801187a:	2301      	movs	r3, #1
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 801187c:	f89b 0000 	ldrb.w	r0, [fp]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8011880:	f892 c000 	ldrb.w	ip, [r2]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8011884:	4a65      	ldr	r2, [pc, #404]	; (8011a1c <pjpeg_decode_init+0x770>)
 8011886:	4607      	mov	r7, r0
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8011888:	9002      	str	r0, [sp, #8]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 801188a:	5c12      	ldrb	r2, [r2, r0]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 801188c:	4864      	ldr	r0, [pc, #400]	; (8011a20 <pjpeg_decode_init+0x774>)
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 801188e:	3202      	adds	r2, #2
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8011890:	9003      	str	r0, [sp, #12]
        ((gValidHuffTables & (1 << compACTab)) == 0))
 8011892:	b2d2      	uxtb	r2, r2
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8011894:	5dc0      	ldrb	r0, [r0, r7]
 8011896:	fa03 f202 	lsl.w	r2, r3, r2
 801189a:	fa03 f000 	lsl.w	r0, r3, r0
 801189e:	4302      	orrs	r2, r0
 80118a0:	ea32 0e0c 	bics.w	lr, r2, ip
 80118a4:	f040 809e 	bne.w	80119e4 <pjpeg_decode_init+0x738>
  for (i = 0; i < gCompsInScan; i++) {
 80118a8:	4299      	cmp	r1, r3
 80118aa:	d921      	bls.n	80118f0 <pjpeg_decode_init+0x644>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 80118ac:	f89b 0001 	ldrb.w	r0, [fp, #1]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 80118b0:	4a5a      	ldr	r2, [pc, #360]	; (8011a1c <pjpeg_decode_init+0x770>)
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80118b2:	4f5b      	ldr	r7, [pc, #364]	; (8011a20 <pjpeg_decode_init+0x774>)
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 80118b4:	5c12      	ldrb	r2, [r2, r0]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80118b6:	5c38      	ldrb	r0, [r7, r0]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 80118b8:	3202      	adds	r2, #2
 80118ba:	fa03 f000 	lsl.w	r0, r3, r0
        ((gValidHuffTables & (1 << compACTab)) == 0))
 80118be:	b2d2      	uxtb	r2, r2
 80118c0:	fa03 f202 	lsl.w	r2, r3, r2
 80118c4:	4302      	orrs	r2, r0
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80118c6:	ea32 0e0c 	bics.w	lr, r2, ip
 80118ca:	f040 808b 	bne.w	80119e4 <pjpeg_decode_init+0x738>
  for (i = 0; i < gCompsInScan; i++) {
 80118ce:	2902      	cmp	r1, #2
 80118d0:	d00e      	beq.n	80118f0 <pjpeg_decode_init+0x644>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 80118d2:	f89b 2002 	ldrb.w	r2, [fp, #2]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 80118d6:	4851      	ldr	r0, [pc, #324]	; (8011a1c <pjpeg_decode_init+0x770>)
 80118d8:	5c80      	ldrb	r0, [r0, r2]
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80118da:	5cba      	ldrb	r2, [r7, r2]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 80118dc:	3002      	adds	r0, #2
 80118de:	fa03 f202 	lsl.w	r2, r3, r2
        ((gValidHuffTables & (1 << compACTab)) == 0))
 80118e2:	b2c0      	uxtb	r0, r0
 80118e4:	fa03 f000 	lsl.w	r0, r3, r0
 80118e8:	4302      	orrs	r2, r0
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80118ea:	ea32 030c 	bics.w	r3, r2, ip
 80118ee:	d179      	bne.n	80119e4 <pjpeg_decode_init+0x738>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	484c      	ldr	r0, [pc, #304]	; (8011a24 <pjpeg_decode_init+0x778>)
 80118f4:	5cc2      	ldrb	r2, [r0, r3]
    if ((gValidQuantTables & compQuantMask) == 0)
 80118f6:	4b4c      	ldr	r3, [pc, #304]	; (8011a28 <pjpeg_decode_init+0x77c>)
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 80118f8:	2a00      	cmp	r2, #0
    if ((gValidQuantTables & compQuantMask) == 0)
 80118fa:	781b      	ldrb	r3, [r3, #0]
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 80118fc:	bf0c      	ite	eq
 80118fe:	2201      	moveq	r2, #1
 8011900:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 8011902:	421a      	tst	r2, r3
 8011904:	d072      	beq.n	80119ec <pjpeg_decode_init+0x740>
  for (i = 0; i < gCompsInScan; i++) {
 8011906:	2901      	cmp	r1, #1
 8011908:	d913      	bls.n	8011932 <pjpeg_decode_init+0x686>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 801190a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801190e:	5c82      	ldrb	r2, [r0, r2]
 8011910:	2a00      	cmp	r2, #0
 8011912:	bf0c      	ite	eq
 8011914:	2201      	moveq	r2, #1
 8011916:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 8011918:	4213      	tst	r3, r2
 801191a:	d067      	beq.n	80119ec <pjpeg_decode_init+0x740>
  for (i = 0; i < gCompsInScan; i++) {
 801191c:	2902      	cmp	r1, #2
 801191e:	d008      	beq.n	8011932 <pjpeg_decode_init+0x686>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 8011920:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8011924:	5c82      	ldrb	r2, [r0, r2]
 8011926:	2a00      	cmp	r2, #0
 8011928:	bf0c      	ite	eq
 801192a:	2201      	moveq	r2, #1
 801192c:	2202      	movne	r2, #2
    if ((gValidQuantTables & compQuantMask) == 0)
 801192e:	4213      	tst	r3, r2
 8011930:	d05c      	beq.n	80119ec <pjpeg_decode_init+0x740>
  if (gRestartInterval) {
 8011932:	4b3e      	ldr	r3, [pc, #248]	; (8011a2c <pjpeg_decode_init+0x780>)
  gLastDC[0] = 0;
 8011934:	493e      	ldr	r1, [pc, #248]	; (8011a30 <pjpeg_decode_init+0x784>)
  if (gRestartInterval) {
 8011936:	881a      	ldrh	r2, [r3, #0]
  gLastDC[0] = 0;
 8011938:	2300      	movs	r3, #0
 801193a:	600b      	str	r3, [r1, #0]
  gLastDC[2] = 0;
 801193c:	808b      	strh	r3, [r1, #4]
  if (gRestartInterval) {
 801193e:	b11a      	cbz	r2, 8011948 <pjpeg_decode_init+0x69c>
    gRestartsLeft = gRestartInterval;
 8011940:	483c      	ldr	r0, [pc, #240]	; (8011a34 <pjpeg_decode_init+0x788>)
    gNextRestartNum = 0;
 8011942:	493d      	ldr	r1, [pc, #244]	; (8011a38 <pjpeg_decode_init+0x78c>)
    gRestartsLeft = gRestartInterval;
 8011944:	8002      	strh	r2, [r0, #0]
    gNextRestartNum = 0;
 8011946:	800b      	strh	r3, [r1, #0]
  if (gBitsLeft > 0)
 8011948:	f89a 3000 	ldrb.w	r3, [sl]
 801194c:	f8b9 2000 	ldrh.w	r2, [r9]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d049      	beq.n	80119e8 <pjpeg_decode_init+0x73c>
 8011954:	4839      	ldr	r0, [pc, #228]	; (8011a3c <pjpeg_decode_init+0x790>)
 8011956:	f898 1000 	ldrb.w	r1, [r8]
 801195a:	7803      	ldrb	r3, [r0, #0]
  gInBuf[gInBufOfs] = i;
 801195c:	4f38      	ldr	r7, [pc, #224]	; (8011a40 <pjpeg_decode_init+0x794>)
  gInBufLeft++;
 801195e:	3101      	adds	r1, #1
 8011960:	3b01      	subs	r3, #1
 8011962:	f888 1000 	strb.w	r1, [r8]
 8011966:	b2db      	uxtb	r3, r3
  gInBufOfs--;
 8011968:	7003      	strb	r3, [r0, #0]
    stuffChar((uint8)gBitBuf);
 801196a:	54fa      	strb	r2, [r7, r3]
  gInBufOfs--;
 801196c:	4b33      	ldr	r3, [pc, #204]	; (8011a3c <pjpeg_decode_init+0x790>)
  stuffChar((uint8)(gBitBuf >> 8));
 801196e:	0a12      	lsrs	r2, r2, #8
  gInBufLeft++;
 8011970:	f898 1000 	ldrb.w	r1, [r8]
  gBitsLeft = 8;
 8011974:	2008      	movs	r0, #8
  gInBufOfs--;
 8011976:	781b      	ldrb	r3, [r3, #0]
  gInBufLeft++;
 8011978:	3101      	adds	r1, #1
  gBitsLeft = 8;
 801197a:	f88a 0000 	strb.w	r0, [sl]
  gInBufOfs--;
 801197e:	3b01      	subs	r3, #1
  return getBits(numBits, 1);
 8011980:	2001      	movs	r0, #1
  gInBufLeft++;
 8011982:	f888 1000 	strb.w	r1, [r8]
  gInBufOfs--;
 8011986:	b2db      	uxtb	r3, r3
  stuffChar((uint8)(gBitBuf >> 8));
 8011988:	54fa      	strb	r2, [r7, r3]
  gInBufOfs--;
 801198a:	4a2c      	ldr	r2, [pc, #176]	; (8011a3c <pjpeg_decode_init+0x790>)
 801198c:	7013      	strb	r3, [r2, #0]
  return getBits(numBits, 1);
 801198e:	f7fd f981 	bl	800ec94 <getBits.constprop.5>
 8011992:	2001      	movs	r0, #1
 8011994:	f7fd f97e 	bl	800ec94 <getBits.constprop.5>
  if ((status) || (gCallbackStatus))
 8011998:	4b2a      	ldr	r3, [pc, #168]	; (8011a44 <pjpeg_decode_init+0x798>)
 801199a:	781f      	ldrb	r7, [r3, #0]
 801199c:	2f00      	cmp	r7, #0
 801199e:	f47f accf 	bne.w	8011340 <pjpeg_decode_init+0x94>
  pInfo->m_comps = gCompsInFrame;
 80119a2:	4929      	ldr	r1, [pc, #164]	; (8011a48 <pjpeg_decode_init+0x79c>)
  pInfo->m_width = gImageXSize;
 80119a4:	4b29      	ldr	r3, [pc, #164]	; (8011a4c <pjpeg_decode_init+0x7a0>)
  pInfo->m_comps = gCompsInFrame;
 80119a6:	f891 c000 	ldrb.w	ip, [r1]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 80119aa:	4929      	ldr	r1, [pc, #164]	; (8011a50 <pjpeg_decode_init+0x7a4>)
  pInfo->m_width = gImageXSize;
 80119ac:	881a      	ldrh	r2, [r3, #0]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 80119ae:	f8b1 e000 	ldrh.w	lr, [r1]
  pInfo->m_height = gImageYSize;
 80119b2:	4b28      	ldr	r3, [pc, #160]	; (8011a54 <pjpeg_decode_init+0x7a8>)
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 80119b4:	4928      	ldr	r1, [pc, #160]	; (8011a58 <pjpeg_decode_init+0x7ac>)
  pInfo->m_height = gImageYSize;
 80119b6:	881b      	ldrh	r3, [r3, #0]
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 80119b8:	f8b1 9000 	ldrh.w	r9, [r1]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 80119bc:	9901      	ldr	r1, [sp, #4]
  pInfo->m_scanType = gScanType;
 80119be:	7836      	ldrb	r6, [r6, #0]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 80119c0:	7808      	ldrb	r0, [r1, #0]
  pInfo->m_MCUWidth = gMaxMCUXSize;
 80119c2:	782d      	ldrb	r5, [r5, #0]
  pInfo->m_pMCUBufR = gMCUBufR;
 80119c4:	4925      	ldr	r1, [pc, #148]	; (8011a5c <pjpeg_decode_init+0x7b0>)
  pInfo->m_width = gImageXSize;
 80119c6:	6022      	str	r2, [r4, #0]
  pInfo->m_height = gImageYSize;
 80119c8:	6063      	str	r3, [r4, #4]
  pInfo->m_pMCUBufG = gMCUBufG;
 80119ca:	4a25      	ldr	r2, [pc, #148]	; (8011a60 <pjpeg_decode_init+0x7b4>)
  pInfo->m_pMCUBufB = gMCUBufB;
 80119cc:	4b25      	ldr	r3, [pc, #148]	; (8011a64 <pjpeg_decode_init+0x7b8>)
  pInfo->m_comps = gCompsInFrame;
 80119ce:	f8c4 c008 	str.w	ip, [r4, #8]
  pInfo->m_scanType = gScanType;
 80119d2:	7526      	strb	r6, [r4, #20]
  pInfo->m_pMCUBufB = gMCUBufB;
 80119d4:	62a3      	str	r3, [r4, #40]	; 0x28
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 80119d6:	e9c4 e903 	strd	lr, r9, [r4, #12]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 80119da:	e9c4 5006 	strd	r5, r0, [r4, #24]
  pInfo->m_pMCUBufG = gMCUBufG;
 80119de:	e9c4 1208 	strd	r1, r2, [r4, #32]
  return 0;
 80119e2:	e4ad      	b.n	8011340 <pjpeg_decode_init+0x94>
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 80119e4:	2718      	movs	r7, #24
 80119e6:	e531      	b.n	801144c <pjpeg_decode_init+0x1a0>
 80119e8:	4f15      	ldr	r7, [pc, #84]	; (8011a40 <pjpeg_decode_init+0x794>)
 80119ea:	e7bf      	b.n	801196c <pjpeg_decode_init+0x6c0>
      return PJPG_UNDEFINED_QUANT_TABLE;
 80119ec:	2717      	movs	r7, #23
 80119ee:	e52d      	b.n	801144c <pjpeg_decode_init+0x1a0>
    for (ci = 0; ci < gCompsInFrame; ci++)
 80119f0:	2302      	movs	r3, #2
 80119f2:	e6e6      	b.n	80117c2 <pjpeg_decode_init+0x516>
      gMaxBlocksPerMCU = 4;
 80119f4:	2004      	movs	r0, #4
 80119f6:	491c      	ldr	r1, [pc, #112]	; (8011a68 <pjpeg_decode_init+0x7bc>)
      gScanType = PJPG_YH2V1;
 80119f8:	4e1c      	ldr	r6, [pc, #112]	; (8011a6c <pjpeg_decode_init+0x7c0>)
      gMaxMCUXSize = 16;
 80119fa:	2210      	movs	r2, #16
      gMaxBlocksPerMCU = 4;
 80119fc:	7008      	strb	r0, [r1, #0]
      gMCUOrg[0] = 0;
 80119fe:	491c      	ldr	r1, [pc, #112]	; (8011a70 <pjpeg_decode_init+0x7c4>)
 8011a00:	481c      	ldr	r0, [pc, #112]	; (8011a74 <pjpeg_decode_init+0x7c8>)
      gScanType = PJPG_YH2V1;
 8011a02:	7033      	strb	r3, [r6, #0]
      gMaxMCUYSize = 8;
 8011a04:	2308      	movs	r3, #8
      gMCUOrg[0] = 0;
 8011a06:	6008      	str	r0, [r1, #0]
      gMaxMCUXSize = 16;
 8011a08:	4d1b      	ldr	r5, [pc, #108]	; (8011a78 <pjpeg_decode_init+0x7cc>)
      gMaxMCUYSize = 8;
 8011a0a:	491c      	ldr	r1, [pc, #112]	; (8011a7c <pjpeg_decode_init+0x7d0>)
      gMaxMCUXSize = 16;
 8011a0c:	702a      	strb	r2, [r5, #0]
      gMaxMCUYSize = 8;
 8011a0e:	9101      	str	r1, [sp, #4]
 8011a10:	700b      	strb	r3, [r1, #0]
 8011a12:	e694      	b.n	801173e <pjpeg_decode_init+0x492>
 8011a14:	2000c67c 	.word	0x2000c67c
 8011a18:	2000cf0c 	.word	0x2000cf0c
 8011a1c:	2000c660 	.word	0x2000c660
 8011a20:	2000c664 	.word	0x2000c664
 8011a24:	2000c674 	.word	0x2000c674
 8011a28:	2000cf0d 	.word	0x2000cf0d
 8011a2c:	2000cf06 	.word	0x2000cf06
 8011a30:	2000cae8 	.word	0x2000cae8
 8011a34:	2000cf08 	.word	0x2000cf08
 8011a38:	2000cdfe 	.word	0x2000cdfe
 8011a3c:	2000cae5 	.word	0x2000cae5
 8011a40:	2000c9e4 	.word	0x2000c9e4
 8011a44:	2000c5dd 	.word	0x2000c5dd
 8011a48:	2000c67b 	.word	0x2000c67b
 8011a4c:	2000c9e0 	.word	0x2000c9e0
 8011a50:	2000cdfa 	.word	0x2000cdfa
 8011a54:	2000c9e2 	.word	0x2000c9e2
 8011a58:	2000cdf8 	.word	0x2000cdf8
 8011a5c:	2000ccf0 	.word	0x2000ccf0
 8011a60:	2000cbf0 	.word	0x2000cbf0
 8011a64:	2000caf0 	.word	0x2000caf0
 8011a68:	2000cdf6 	.word	0x2000cdf6
 8011a6c:	2000cf0a 	.word	0x2000cf0a
 8011a70:	2000cdf0 	.word	0x2000cdf0
 8011a74:	02010000 	.word	0x02010000
 8011a78:	2000cdfc 	.word	0x2000cdfc
 8011a7c:	2000cdfd 	.word	0x2000cdfd

08011a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011a86:	e003      	b.n	8011a90 <LoopCopyDataInit>

08011a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011a88:	4b0c      	ldr	r3, [pc, #48]	; (8011abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011a8e:	3104      	adds	r1, #4

08011a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011a90:	480b      	ldr	r0, [pc, #44]	; (8011ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011a92:	4b0c      	ldr	r3, [pc, #48]	; (8011ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011a98:	d3f6      	bcc.n	8011a88 <CopyDataInit>
  ldr  r2, =_sbss
 8011a9a:	4a0b      	ldr	r2, [pc, #44]	; (8011ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011a9c:	e002      	b.n	8011aa4 <LoopFillZerobss>

08011a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011aa0:	f842 3b04 	str.w	r3, [r2], #4

08011aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011aa4:	4b09      	ldr	r3, [pc, #36]	; (8011acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011aa8:	d3f9      	bcc.n	8011a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8011aaa:	f000 f9bb 	bl	8011e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011aae:	f016 ff8d 	bl	80289cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011ab2:	f7fb fc9d 	bl	800d3f0 <main>
  bx  lr    
 8011ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011ab8:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8011abc:	080b474c 	.word	0x080b474c
  ldr  r0, =_sdata
 8011ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011ac4:	20008de0 	.word	0x20008de0
  ldr  r2, =_sbss
 8011ac8:	20008de0 	.word	0x20008de0
  ldr  r3, = _ebss
 8011acc:	2003cff4 	.word	0x2003cff4

08011ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011ad0:	e7fe      	b.n	8011ad0 <ADC_IRQHandler>
	...

08011ad4 <HAL_I2C_MspInit>:
#include "camera_spi.h"
#include "main.h"
#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"
#include "stm32f7xx_hal.h"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 8011ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 8011adc:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8011ade:	4d1d      	ldr	r5, [pc, #116]	; (8011b54 <HAL_I2C_MspInit+0x80>)
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8011ae0:	a809      	add	r0, sp, #36	; 0x24
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 8011ae2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 8011ae4:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8011ae6:	f7f9 f8ad 	bl	800ac44 <HAL_RCCEx_PeriphCLKConfig>
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8011aea:	4b1b      	ldr	r3, [pc, #108]	; (8011b58 <HAL_I2C_MspInit+0x84>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011aec:	2012      	movs	r0, #18
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8011aee:	2404      	movs	r4, #4
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8011af0:	f44f 7680 	mov.w	r6, #256	; 0x100
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8011af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8011af6:	a904      	add	r1, sp, #16
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8011af8:	f042 0202 	orr.w	r2, r2, #2
 8011afc:	631a      	str	r2, [r3, #48]	; 0x30
 8011afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b00:	f002 0202 	and.w	r2, r2, #2
 8011b04:	9201      	str	r2, [sp, #4]
 8011b06:	9a01      	ldr	r2, [sp, #4]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8011b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b0a:	f042 0202 	orr.w	r2, r2, #2
 8011b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8011b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b12:	f002 0202 	and.w	r2, r2, #2
 8011b16:	9202      	str	r2, [sp, #8]
 8011b18:	9a02      	ldr	r2, [sp, #8]
  I2Cx_CLK_ENABLE();
 8011b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011b1c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8011b20:	641a      	str	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011b22:	2201      	movs	r2, #1
  I2Cx_CLK_ENABLE();
 8011b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011b26:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8011b28:	4628      	mov	r0, r5
  I2Cx_CLK_ENABLE();
 8011b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8011b2e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8011b30:	9408      	str	r4, [sp, #32]
  I2Cx_CLK_ENABLE();
 8011b32:	9303      	str	r3, [sp, #12]
 8011b34:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8011b36:	2302      	movs	r3, #2
 8011b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8011b3c:	f7f7 fec2 	bl	80098c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8011b40:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8011b44:	a904      	add	r1, sp, #16
 8011b46:	4628      	mov	r0, r5
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8011b48:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8011b4a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8011b4c:	f7f7 feba 	bl	80098c4 <HAL_GPIO_Init>
}
 8011b50:	b02a      	add	sp, #168	; 0xa8
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	40020400 	.word	0x40020400
 8011b58:	40023800 	.word	0x40023800

08011b5c <HAL_SPI_MspInit>:
  HAL_GPIO_DeInit(I2Cx_SDA_GPIO_PORT, I2Cx_SDA_PIN);
}
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hspi->Instance == SPIx) {
 8011b5c:	6802      	ldr	r2, [r0, #0]
 8011b5e:	4b23      	ldr	r3, [pc, #140]	; (8011bec <HAL_SPI_MspInit+0x90>)
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d000      	beq.n	8011b66 <HAL_SPI_MspInit+0xa>
 8011b64:	4770      	bx	lr

    SPIx_SCK_GPIO_CLK_ENABLE();
 8011b66:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    SPIx_MISO_GPIO_CLK_ENABLE();
    SPIx_MOSI_GPIO_CLK_ENABLE();

    SPIx_CLK_ENABLE();

    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8011b6a:	2202      	movs	r2, #2
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011b6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8011b72:	b530      	push	{r4, r5, lr}
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011b74:	6318      	str	r0, [r3, #48]	; 0x30
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8011b76:	b08b      	sub	sp, #44	; 0x2c
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011b78:	6b18      	ldr	r0, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8011b7a:	2405      	movs	r4, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8011b7c:	2500      	movs	r5, #0
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8011b7e:	a905      	add	r1, sp, #20
    SPIx_SCK_GPIO_CLK_ENABLE();
 8011b80:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011b84:	9001      	str	r0, [sp, #4]
 8011b86:	9801      	ldr	r0, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8011b88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b8a:	4310      	orrs	r0, r2
 8011b8c:	6318      	str	r0, [r3, #48]	; 0x30
 8011b8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b90:	4010      	ands	r0, r2
 8011b92:	9002      	str	r0, [sp, #8]
 8011b94:	9802      	ldr	r0, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8011b96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b98:	4310      	orrs	r0, r2
 8011b9a:	6318      	str	r0, [r3, #48]	; 0x30
 8011b9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b9e:	4010      	ands	r0, r2
 8011ba0:	9003      	str	r0, [sp, #12]
 8011ba2:	9803      	ldr	r0, [sp, #12]
    SPIx_CLK_ENABLE();
 8011ba4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011ba6:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8011baa:	6418      	str	r0, [r3, #64]	; 0x40
 8011bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8011bae:	4810      	ldr	r0, [pc, #64]	; (8011bf0 <HAL_SPI_MspInit+0x94>)
    SPIx_CLK_ENABLE();
 8011bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8011bb4:	9205      	str	r2, [sp, #20]
    SPIx_CLK_ENABLE();
 8011bb6:	9304      	str	r3, [sp, #16]
 8011bb8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011bba:	e9cd 2206 	strd	r2, r2, [sp, #24]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8011bbe:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8011bc2:	f7f7 fe7f 	bl	80098c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8011bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8011bca:	a905      	add	r1, sp, #20
 8011bcc:	4809      	ldr	r0, [pc, #36]	; (8011bf4 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8011bce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8011bd0:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8011bd2:	f7f7 fe77 	bl	80098c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8011bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8011bda:	a905      	add	r1, sp, #20
 8011bdc:	4805      	ldr	r0, [pc, #20]	; (8011bf4 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8011bde:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8011be0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8011be2:	f7f7 fe6f 	bl	80098c4 <HAL_GPIO_Init>
  }
}
 8011be6:	b00b      	add	sp, #44	; 0x2c
 8011be8:	bd30      	pop	{r4, r5, pc}
 8011bea:	bf00      	nop
 8011bec:	40003800 	.word	0x40003800
 8011bf0:	40022000 	.word	0x40022000
 8011bf4:	40020400 	.word	0x40020400

08011bf8 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (huart->Instance == USART1) {
 8011bf8:	6803      	ldr	r3, [r0, #0]
 8011bfa:	4a31      	ldr	r2, [pc, #196]	; (8011cc0 <HAL_UART_MspInit+0xc8>)
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8011bfc:	b570      	push	{r4, r5, r6, lr}
  if (huart->Instance == USART1) {
 8011bfe:	4293      	cmp	r3, r2
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8011c00:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c02:	f04f 0400 	mov.w	r4, #0
 8011c06:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8011c0a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8011c0e:	9409      	str	r4, [sp, #36]	; 0x24
  if (huart->Instance == USART1) {
 8011c10:	d025      	beq.n	8011c5e <HAL_UART_MspInit+0x66>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

  } else if (huart->Instance == USART6) {
 8011c12:	4a2c      	ldr	r2, [pc, #176]	; (8011cc4 <HAL_UART_MspInit+0xcc>)
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d001      	beq.n	8011c1c <HAL_UART_MspInit+0x24>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}
 8011c18:	b00a      	add	sp, #40	; 0x28
 8011c1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8011c1c:	4b2a      	ldr	r3, [pc, #168]	; (8011cc8 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8011c1e:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c20:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c22:	a905      	add	r1, sp, #20
    __HAL_RCC_USART6_CLK_ENABLE();
 8011c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c26:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8011c28:	2408      	movs	r4, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 8011c2a:	f042 0220 	orr.w	r2, r2, #32
 8011c2e:	645a      	str	r2, [r3, #68]	; 0x44
 8011c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c32:	f002 0220 	and.w	r2, r2, #32
 8011c36:	9203      	str	r2, [sp, #12]
 8011c38:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c3c:	f042 0204 	orr.w	r2, r2, #4
 8011c40:	631a      	str	r2, [r3, #48]	; 0x30
 8011c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8011c44:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c46:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c4a:	4820      	ldr	r0, [pc, #128]	; (8011ccc <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c4c:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c4e:	9304      	str	r3, [sp, #16]
 8011c50:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8011c52:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c56:	f7f7 fe35 	bl	80098c4 <HAL_GPIO_Init>
}
 8011c5a:	b00a      	add	sp, #40	; 0x28
 8011c5c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8011c5e:	4b1a      	ldr	r3, [pc, #104]	; (8011cc8 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c60:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8011c62:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011c64:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8011c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8011c68:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 8011c6a:	f042 0210 	orr.w	r2, r2, #16
 8011c6e:	645a      	str	r2, [r3, #68]	; 0x44
 8011c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c72:	f002 0210 	and.w	r2, r2, #16
 8011c76:	9200      	str	r2, [sp, #0]
 8011c78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c7c:	4332      	orrs	r2, r6
 8011c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8011c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c82:	4032      	ands	r2, r6
 8011c84:	9201      	str	r2, [sp, #4]
 8011c86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c8a:	f042 0201 	orr.w	r2, r2, #1
 8011c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8011c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8011c92:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c94:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8011c98:	480d      	ldr	r0, [pc, #52]	; (8011cd0 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c9a:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c9c:	9302      	str	r3, [sp, #8]
 8011c9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011ca0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8011ca2:	f7f7 fe0f 	bl	80098c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8011ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8011caa:	a905      	add	r1, sp, #20
 8011cac:	4809      	ldr	r0, [pc, #36]	; (8011cd4 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cae:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011cb0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8011cb2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cb4:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8011cb8:	f7f7 fe04 	bl	80098c4 <HAL_GPIO_Init>
}
 8011cbc:	b00a      	add	sp, #40	; 0x28
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}
 8011cc0:	40011000 	.word	0x40011000
 8011cc4:	40011400 	.word	0x40011400
 8011cc8:	40023800 	.word	0x40023800
 8011ccc:	40020800 	.word	0x40020800
 8011cd0:	40020400 	.word	0x40020400
 8011cd4:	40020000 	.word	0x40020000

08011cd8 <HAL_LTDC_MspInit>:
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 8011cd8:	4b43      	ldr	r3, [pc, #268]	; (8011de8 <HAL_LTDC_MspInit+0x110>)
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8011cda:	4844      	ldr	r0, [pc, #272]	; (8011dec <HAL_LTDC_MspInit+0x114>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8011cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8011ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8011ce6:	645a      	str	r2, [r3, #68]	; 0x44
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8011ce8:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_LTDC_CLK_ENABLE();
 8011cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8011cec:	2510      	movs	r5, #16
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011cee:	2402      	movs	r4, #2
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8011cf0:	260e      	movs	r6, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 8011cf2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8011cf6:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8011cf8:	a907      	add	r1, sp, #28

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8011cfa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_LTDC_CLK_ENABLE();
 8011cfe:	9201      	str	r2, [sp, #4]
 8011d00:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011d04:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8011dfc <HAL_LTDC_MspInit+0x124>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011d08:	432a      	orrs	r2, r5
 8011d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8011d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d0e:	402a      	ands	r2, r5
 8011d10:	9202      	str	r2, [sp, #8]
 8011d12:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8011d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d1e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8011d22:	9203      	str	r2, [sp, #12]
 8011d24:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8011d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8011d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d30:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011d34:	9204      	str	r2, [sp, #16]
 8011d36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8011d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8011d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d42:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8011d46:	9205      	str	r2, [sp, #20]
 8011d48:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8011d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011d50:	631a      	str	r2, [r3, #48]	; 0x30
 8011d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8011d54:	9507      	str	r5, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8011d56:	2501      	movs	r5, #1
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8011d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011d5c:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8011d5e:	9306      	str	r3, [sp, #24]
 8011d60:	9b06      	ldr	r3, [sp, #24]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8011d62:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8011d64:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8011d68:	f7f7 fdac 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8011d6c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8011d6e:	a907      	add	r1, sp, #28
 8011d70:	481f      	ldr	r0, [pc, #124]	; (8011df0 <HAL_LTDC_MspInit+0x118>)
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8011d72:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011d74:	4f1f      	ldr	r7, [pc, #124]	; (8011df4 <HAL_LTDC_MspInit+0x11c>)
  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8011d76:	e9cd 9407 	strd	r9, r4, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8011d7a:	f7f7 fda3 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8011d7e:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011d82:	a907      	add	r1, sp, #28
 8011d84:	4640      	mov	r0, r8
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011d86:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8011d88:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8011d8a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011d8c:	f7f7 fd9a 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin =
 8011d90:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8011d94:	a907      	add	r1, sp, #28
 8011d96:	4818      	ldr	r0, [pc, #96]	; (8011df8 <HAL_LTDC_MspInit+0x120>)
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011d98:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin =
 8011d9a:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8011d9c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8011d9e:	f7f7 fd91 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8011da2:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011da4:	a907      	add	r1, sp, #28
 8011da6:	4638      	mov	r0, r7
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8011da8:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8011daa:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8011dac:	2408      	movs	r4, #8
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8011dae:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011db0:	f7f7 fd88 	bl	80098c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011db4:	a907      	add	r1, sp, #28
 8011db6:	4640      	mov	r0, r8
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8011db8:	e9cd 9507 	strd	r9, r5, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8011dbc:	f7f7 fd82 	bl	80098c4 <HAL_GPIO_Init>
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011dc0:	a907      	add	r1, sp, #28
 8011dc2:	4638      	mov	r0, r7
  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8011dc4:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8011dc8:	f7f7 fd7c 	bl	80098c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8011dcc:	462a      	mov	r2, r5
 8011dce:	4649      	mov	r1, r9
 8011dd0:	4640      	mov	r0, r8
 8011dd2:	f7f7 fe9b 	bl	8009b0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8011dd6:	462a      	mov	r2, r5
 8011dd8:	4621      	mov	r1, r4
 8011dda:	4638      	mov	r0, r7
 8011ddc:	f7f7 fe96 	bl	8009b0c <HAL_GPIO_WritePin>
}
 8011de0:	b00d      	add	sp, #52	; 0x34
 8011de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011de6:	bf00      	nop
 8011de8:	40023800 	.word	0x40023800
 8011dec:	40021000 	.word	0x40021000
 8011df0:	40021800 	.word	0x40021800
 8011df4:	40022800 	.word	0x40022800
 8011df8:	40022400 	.word	0x40022400
 8011dfc:	40022000 	.word	0x40022000

08011e00 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop

08011e04 <HardFault_Handler>:

void HardFault_Handler(void) {
 8011e04:	e7fe      	b.n	8011e04 <HardFault_Handler>
 8011e06:	bf00      	nop

08011e08 <MemManage_Handler>:

  while (1) {
  }
}

void MemManage_Handler(void) {
 8011e08:	e7fe      	b.n	8011e08 <MemManage_Handler>
 8011e0a:	bf00      	nop

08011e0c <BusFault_Handler>:

  while (1) {
  }
}

void BusFault_Handler(void) {
 8011e0c:	e7fe      	b.n	8011e0c <BusFault_Handler>
 8011e0e:	bf00      	nop

08011e10 <UsageFault_Handler>:

  while (1) {
  }
}

void UsageFault_Handler(void) {
 8011e10:	e7fe      	b.n	8011e10 <UsageFault_Handler>
 8011e12:	bf00      	nop

08011e14 <SVC_Handler>:
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop

08011e18 <DebugMon_Handler>:
 8011e18:	4770      	bx	lr
 8011e1a:	bf00      	nop

08011e1c <PendSV_Handler>:
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop

08011e20 <SysTick_Handler>:

void DebugMon_Handler(void) {}

void PendSV_Handler(void) {}

void SysTick_Handler(void) { HAL_IncTick(); }
 8011e20:	f7f7 ba70 	b.w	8009304 <HAL_IncTick>

08011e24 <SystemInit>:
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8011e24:	4a0f      	ldr	r2, [pc, #60]	; (8011e64 <SystemInit+0x40>)
#endif

  RCC->CR |= (uint32_t)0x00000001;
 8011e26:	4b10      	ldr	r3, [pc, #64]	; (8011e68 <SystemInit+0x44>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8011e28:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  RCC->CFGR = 0x00000000;

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011e2c:	490f      	ldr	r1, [pc, #60]	; (8011e6c <SystemInit+0x48>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8011e2e:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8011e32:	b470      	push	{r4, r5, r6}
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8011e34:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8011e38:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8011e3a:	6818      	ldr	r0, [r3, #0]
  RCC->CIR = 0x00000000;

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8011e3c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8011e40:	4e0b      	ldr	r6, [pc, #44]	; (8011e70 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8011e42:	f040 0001 	orr.w	r0, r0, #1
 8011e46:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8011e48:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	4001      	ands	r1, r0
 8011e4e:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8011e50:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011e52:	6819      	ldr	r1, [r3, #0]
 8011e54:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8011e58:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8011e5a:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8011e5c:	6095      	str	r5, [r2, #8]
#endif
}
 8011e5e:	bc70      	pop	{r4, r5, r6}
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	e000ed00 	.word	0xe000ed00
 8011e68:	40023800 	.word	0x40023800
 8011e6c:	fef6ffff 	.word	0xfef6ffff
 8011e70:	24003010 	.word	0x24003010

08011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8011e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e78:	b09d      	sub	sp, #116	; 0x74

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8011e7a:	f101 0901 	add.w	r9, r1, #1
{
 8011e7e:	9216      	str	r2, [sp, #88]	; 0x58
 8011e80:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8011e82:	930a      	str	r3, [sp, #40]	; 0x28
 8011e84:	1c8b      	adds	r3, r1, #2
 8011e86:	4252      	negs	r2, r2
 8011e88:	910c      	str	r1, [sp, #48]	; 0x30
 8011e8a:	9314      	str	r3, [sp, #80]	; 0x50
 8011e8c:	f002 0207 	and.w	r2, r2, #7
 8011e90:	f8bd 10bc 	ldrh.w	r1, [sp, #188]	; 0xbc
 8011e94:	9013      	str	r0, [sp, #76]	; 0x4c
 8011e96:	1dd3      	adds	r3, r2, #7
 8011e98:	910d      	str	r1, [sp, #52]	; 0x34
 8011e9a:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	; 0xc0
 8011e9e:	2b0c      	cmp	r3, #12
 8011ea0:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8011ea4:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ea6:	bf38      	it	cc
 8011ea8:	230c      	movcc	r3, #12
 8011eaa:	f99d 70cc 	ldrsb.w	r7, [sp, #204]	; 0xcc
 8011eae:	454b      	cmp	r3, r9
 8011eb0:	f200 82cd 	bhi.w	801244e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5da>
 8011eb4:	b322      	cbz	r2, 8011f00 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x8c>
        *cols_8b++ = PAD8;
 8011eb6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011eb8:	2a01      	cmp	r2, #1
 8011eba:	701f      	strb	r7, [r3, #0]
 8011ebc:	f103 0c01 	add.w	ip, r3, #1
 8011ec0:	d020      	beq.n	8011f04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011ec2:	2a02      	cmp	r2, #2
 8011ec4:	705f      	strb	r7, [r3, #1]
 8011ec6:	f103 0c02 	add.w	ip, r3, #2
 8011eca:	d01b      	beq.n	8011f04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011ecc:	2a03      	cmp	r2, #3
 8011ece:	709f      	strb	r7, [r3, #2]
 8011ed0:	f103 0c03 	add.w	ip, r3, #3
 8011ed4:	d016      	beq.n	8011f04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011ed6:	2a04      	cmp	r2, #4
 8011ed8:	70df      	strb	r7, [r3, #3]
 8011eda:	f103 0c04 	add.w	ip, r3, #4
 8011ede:	d011      	beq.n	8011f04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011ee0:	2a05      	cmp	r2, #5
 8011ee2:	711f      	strb	r7, [r3, #4]
 8011ee4:	f103 0c05 	add.w	ip, r3, #5
 8011ee8:	d00c      	beq.n	8011f04 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8011eea:	2a07      	cmp	r2, #7
 8011eec:	715f      	strb	r7, [r3, #5]
 8011eee:	f103 0c06 	add.w	ip, r3, #6
 8011ef2:	f040 82b1 	bne.w	8012458 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5e4>
 8011ef6:	719f      	strb	r7, [r3, #6]
 8011ef8:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8011efc:	4690      	mov	r8, r2
 8011efe:	e002      	b.n	8011f06 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 8011f00:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 8011f04:	4690      	mov	r8, r2
 8011f06:	2400      	movs	r4, #0
 8011f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f0a:	f10c 0001 	add.w	r0, ip, #1
 8011f0e:	4625      	mov	r5, r4
 8011f10:	f367 0407 	bfi	r4, r7, #0, #8
 8011f14:	eba3 0e02 	sub.w	lr, r3, r2
 8011f18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	f367 0507 	bfi	r5, r7, #0, #8
 8011f20:	f367 240f 	bfi	r4, r7, #8, #8
 8011f24:	441a      	add	r2, r3
 8011f26:	f367 250f 	bfi	r5, r7, #8, #8
 8011f2a:	ea4f 06de 	mov.w	r6, lr, lsr #3
 8011f2e:	f367 4417 	bfi	r4, r7, #16, #8
 8011f32:	f367 4517 	bfi	r5, r7, #16, #8
 8011f36:	f367 641f 	bfi	r4, r7, #24, #8
 8011f3a:	f367 651f 	bfi	r5, r7, #24, #8
 8011f3e:	3101      	adds	r1, #1
 8011f40:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 8011f42:	3008      	adds	r0, #8
 8011f44:	428e      	cmp	r6, r1
 8011f46:	f103 0307 	add.w	r3, r3, #7
 8011f4a:	e9c2 4500 	strd	r4, r5, [r2]
 8011f4e:	f102 0208 	add.w	r2, r2, #8
 8011f52:	d8f4      	bhi.n	8011f3e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xca>
 8011f54:	f02e 0107 	bic.w	r1, lr, #7
 8011f58:	eb08 0201 	add.w	r2, r8, r1
 8011f5c:	4571      	cmp	r1, lr
 8011f5e:	eb0c 0001 	add.w	r0, ip, r1
 8011f62:	b292      	uxth	r2, r2
 8011f64:	d05c      	beq.n	8012020 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
    for(i = 0; i < input_x + 2; i++){
 8011f66:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8011f68:	1c43      	adds	r3, r0, #1
 8011f6a:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 8011f6e:	b290      	uxth	r0, r2
 8011f70:	4581      	cmp	r9, r0
 8011f72:	db55      	blt.n	8012020 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 8011f74:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 8011f76:	701f      	strb	r7, [r3, #0]
 8011f78:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 8011f7a:	b292      	uxth	r2, r2
 8011f7c:	4591      	cmp	r9, r2
 8011f7e:	db4e      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011f80:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 8011f82:	705f      	strb	r7, [r3, #1]
 8011f84:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 8011f86:	b292      	uxth	r2, r2
 8011f88:	4591      	cmp	r9, r2
 8011f8a:	db48      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011f8c:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 8011f8e:	709f      	strb	r7, [r3, #2]
 8011f90:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8011f92:	b292      	uxth	r2, r2
 8011f94:	4591      	cmp	r9, r2
 8011f96:	db42      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011f98:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 8011f9a:	70df      	strb	r7, [r3, #3]
 8011f9c:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 8011f9e:	b292      	uxth	r2, r2
 8011fa0:	4591      	cmp	r9, r2
 8011fa2:	db3c      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011fa4:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 8011fa6:	711f      	strb	r7, [r3, #4]
 8011fa8:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 8011faa:	b292      	uxth	r2, r2
 8011fac:	4591      	cmp	r9, r2
 8011fae:	db36      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011fb0:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 8011fb2:	715f      	strb	r7, [r3, #5]
 8011fb4:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 8011fb6:	b292      	uxth	r2, r2
 8011fb8:	4591      	cmp	r9, r2
 8011fba:	db30      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011fbc:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 8011fbe:	719f      	strb	r7, [r3, #6]
 8011fc0:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8011fc2:	b292      	uxth	r2, r2
 8011fc4:	4591      	cmp	r9, r2
 8011fc6:	db2a      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011fc8:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 8011fcc:	71df      	strb	r7, [r3, #7]
 8011fce:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 8011fd2:	b292      	uxth	r2, r2
 8011fd4:	4591      	cmp	r9, r2
 8011fd6:	db22      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011fd8:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 8011fdc:	721f      	strb	r7, [r3, #8]
 8011fde:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 8011fe2:	b292      	uxth	r2, r2
 8011fe4:	4591      	cmp	r9, r2
 8011fe6:	db1a      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011fe8:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 8011fec:	725f      	strb	r7, [r3, #9]
 8011fee:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 8011ff2:	b292      	uxth	r2, r2
 8011ff4:	4591      	cmp	r9, r2
 8011ff6:	db12      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8011ff8:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 8011ffc:	729f      	strb	r7, [r3, #10]
 8011ffe:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 8012002:	b292      	uxth	r2, r2
 8012004:	4591      	cmp	r9, r2
 8012006:	db0a      	blt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8012008:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 801200c:	72df      	strb	r7, [r3, #11]
 801200e:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 8012012:	b292      	uxth	r2, r2
 8012014:	454a      	cmp	r2, r9
 8012016:	dc02      	bgt.n	801201e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
        *cols_8b++ = PAD8;
 8012018:	731f      	strb	r7, [r3, #12]
 801201a:	330d      	adds	r3, #13
 801201c:	e000      	b.n	8012020 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 801201e:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8012020:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012022:	b192      	cbz	r2, 801204a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1d6>
 8012024:	4614      	mov	r4, r2
 8012026:	2100      	movs	r1, #0
 8012028:	461a      	mov	r2, r3
 801202a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801202c:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 801202e:	7017      	strb	r7, [r2, #0]
 8012030:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 8012032:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8012034:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8012038:	4284      	cmp	r4, r0
 801203a:	d8f7      	bhi.n	801202c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1b8>
 801203c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801203e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012040:	3a01      	subs	r2, #1
 8012042:	b292      	uxth	r2, r2
 8012044:	fb02 1201 	mla	r2, r2, r1, r1
 8012048:	4413      	add	r3, r2
 801204a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801204c:	f1a2 0113 	sub.w	r1, r2, #19
 8012050:	f64f 72ea 	movw	r2, #65514	; 0xffea
 8012054:	4291      	cmp	r1, r2
 8012056:	f200 81f0 	bhi.w	801243a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c6>
 801205a:	425a      	negs	r2, r3
 801205c:	f012 0203 	ands.w	r2, r2, #3
 8012060:	f000 81d8 	beq.w	8012414 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a0>
 8012064:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 8012066:	701f      	strb	r7, [r3, #0]
 8012068:	f103 0501 	add.w	r5, r3, #1
 801206c:	f000 81d3 	beq.w	8012416 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a2>
 8012070:	2a03      	cmp	r2, #3
 8012072:	705f      	strb	r7, [r3, #1]
 8012074:	f103 0502 	add.w	r5, r3, #2
 8012078:	f040 81e7 	bne.w	801244a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5d6>
 801207c:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 801207e:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 8012080:	709f      	strb	r7, [r3, #2]
 8012082:	2100      	movs	r1, #0
 8012084:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012086:	4413      	add	r3, r2
 8012088:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 801208a:	460a      	mov	r2, r1
 801208c:	f367 0107 	bfi	r1, r7, #0, #8
 8012090:	08a0      	lsrs	r0, r4, #2
 8012092:	f367 210f 	bfi	r1, r7, #8, #8
 8012096:	f367 4117 	bfi	r1, r7, #16, #8
 801209a:	f367 611f 	bfi	r1, r7, #24, #8
 801209e:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 80120a0:	f843 1b04 	str.w	r1, [r3], #4
 80120a4:	4290      	cmp	r0, r2
 80120a6:	d8fa      	bhi.n	801209e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x22a>
 80120a8:	f024 0303 	bic.w	r3, r4, #3
 80120ac:	18f2      	adds	r2, r6, r3
 80120ae:	42a3      	cmp	r3, r4
 80120b0:	eb05 0003 	add.w	r0, r5, r3
 80120b4:	b291      	uxth	r1, r2
 80120b6:	d019      	beq.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
    for(i = 0; i < input_x + 2; i++){
 80120b8:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 80120ba:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 80120bc:	b293      	uxth	r3, r2
 80120be:	4599      	cmp	r9, r3
 80120c0:	db14      	blt.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80120c2:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 80120c4:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	454b      	cmp	r3, r9
 80120ca:	dc0f      	bgt.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80120cc:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 80120ce:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	4599      	cmp	r9, r3
 80120d4:	db0a      	blt.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80120d6:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 80120d8:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 80120da:	b29b      	uxth	r3, r3
 80120dc:	4599      	cmp	r9, r3
 80120de:	db05      	blt.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80120e0:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 80120e2:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	4599      	cmp	r9, r3
 80120e8:	db00      	blt.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
        *cols_8b++ = PAD8;
 80120ea:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 80120ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80120ee:	2800      	cmp	r0, #0
 80120f0:	f000 818c 	beq.w	801240c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x598>
 80120f4:	1e43      	subs	r3, r0, #1
{
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 80120f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80120f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80120fa:	46d0      	mov	r8, sl
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	1e69      	subs	r1, r5, #1
 8012100:	086f      	lsrs	r7, r5, #1
 8012102:	1e72      	subs	r2, r6, #1
 8012104:	3301      	adds	r3, #1
 8012106:	fb00 f101 	mul.w	r1, r0, r1
 801210a:	b292      	uxth	r2, r2
 801210c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801210e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8012112:	9115      	str	r1, [sp, #84]	; 0x54
 8012114:	0079      	lsls	r1, r7, #1
 8012116:	f104 0909 	add.w	r9, r4, #9
 801211a:	9317      	str	r3, [sp, #92]	; 0x5c
 801211c:	f005 0301 	and.w	r3, r5, #1
 8012120:	9111      	str	r1, [sp, #68]	; 0x44
 8012122:	1c51      	adds	r1, r2, #1
 8012124:	930e      	str	r3, [sp, #56]	; 0x38
 8012126:	4603      	mov	r3, r0
 8012128:	3203      	adds	r2, #3
 801212a:	970f      	str	r7, [sp, #60]	; 0x3c
 801212c:	fb01 f303 	mul.w	r3, r1, r3
 8012130:	921b      	str	r2, [sp, #108]	; 0x6c
 8012132:	9319      	str	r3, [sp, #100]	; 0x64
 8012134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012136:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8012138:	911a      	str	r1, [sp, #104]	; 0x68
 801213a:	4413      	add	r3, r2
 801213c:	9318      	str	r3, [sp, #96]	; 0x60
 801213e:	4603      	mov	r3, r0
 8012140:	fb05 f303 	mul.w	r3, r5, r3
 8012144:	9310      	str	r3, [sp, #64]	; 0x40
 8012146:	0073      	lsls	r3, r6, #1
 8012148:	9312      	str	r3, [sp, #72]	; 0x48
 801214a:	0043      	lsls	r3, r0, #1
 801214c:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 801214e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012150:	b1db      	cbz	r3, 801218a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 8012152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012154:	b1ca      	cbz	r2, 801218a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 8012156:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012158:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 801215a:	9c18      	ldr	r4, [sp, #96]	; 0x60
        for(i = 0; i < input_y; i++){
 801215c:	469a      	mov	sl, r3
 801215e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012160:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8012164:	e9dd ce19 	ldrd	ip, lr, [sp, #100]	; 0x64
 8012168:	eb04 000e 	add.w	r0, r4, lr
 801216c:	4622      	mov	r2, r4
 801216e:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8012170:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8012174:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8012176:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 801217a:	4282      	cmp	r2, r0
 801217c:	d1f8      	bne.n	8012170 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2fc>
 801217e:	3501      	adds	r5, #1
 8012180:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 8012182:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 8012184:	b2ab      	uxth	r3, r5
 8012186:	459a      	cmp	sl, r3
 8012188:	d8ee      	bhi.n	8012168 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2f4>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801218a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801218c:	f108 0804 	add.w	r8, r8, #4
 8012190:	3304      	adds	r3, #4
 8012192:	9327      	str	r3, [sp, #156]	; 0x9c
 8012194:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012196:	3304      	adds	r3, #4
 8012198:	9328      	str	r3, [sp, #160]	; 0xa0
    for (i = 0; i < output_y; i++) {
 801219a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801219c:	2b00      	cmp	r3, #0
 801219e:	f000 812c 	beq.w	80123fa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x586>
 80121a2:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 80121a6:	2300      	movs	r3, #0
 80121a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80121ac:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 80121b0:	46f0      	mov	r8, lr
 80121b2:	440a      	add	r2, r1
 80121b4:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 80121b8:	9307      	str	r3, [sp, #28]
 80121ba:	9208      	str	r2, [sp, #32]
 80121bc:	9309      	str	r3, [sp, #36]	; 0x24
        for (j = 0; j < output_x / 2; j++) {
 80121be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f000 80a8 	beq.w	8012316 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x4a2>
 80121c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121c8:	9907      	ldr	r1, [sp, #28]
 80121ca:	fb01 2302 	mla	r3, r1, r2, r2
 80121ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80121d0:	eb08 0c01 	add.w	ip, r8, r1
 80121d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80121d6:	9304      	str	r3, [sp, #16]
 80121d8:	1a9b      	subs	r3, r3, r2
 80121da:	eb08 0701 	add.w	r7, r8, r1
 80121de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80121e0:	9303      	str	r3, [sp, #12]
 80121e2:	4441      	add	r1, r8
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            sum0 = TN_MAX(sum0, activation_min);
            sum0 = TN_MIN(sum0, activation_max);
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80121e4:	9b08      	ldr	r3, [sp, #32]
 80121e6:	9105      	str	r1, [sp, #20]
 80121e8:	9301      	str	r3, [sp, #4]
 80121ea:	9a01      	ldr	r2, [sp, #4]
            sum1 += output_offset;
            sum1 = TN_MAX(sum1, activation_min);
            sum1 = TN_MIN(sum1, activation_max);
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;

            cols_8b_iterptr += STRIDE * 2;
 80121ec:	f108 0802 	add.w	r8, r8, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80121f0:	9904      	ldr	r1, [sp, #16]
 80121f2:	f10c 0c02 	add.w	ip, ip, #2
            q31_t sum0 = bias[0] + biasR[0];
 80121f6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80121f8:	3702      	adds	r7, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80121fa:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 80121fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            sum0 += cols_8b[0]*ksrc[0];
 80121fe:	f918 4c02 	ldrsb.w	r4, [r8, #-2]
            q31_t sum0 = bias[0] + biasR[0];
 8012202:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012206:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8012208:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[0]*ksrc[0];
 801220c:	f919 0c09 	ldrsb.w	r0, [r9, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 8012210:	4419      	add	r1, r3
            sum1 += cols_8b[1]*ksrc[0];
 8012212:	f918 5c01 	ldrsb.w	r5, [r8, #-1]
            sum0 += cols_8b[1]*ksrc[1];
 8012216:	f919 2c08 	ldrsb.w	r2, [r9, #-8]
            sum0 += cols_8b[0]*ksrc[0];
 801221a:	fb14 1400 	smlabb	r4, r4, r0, r1
            sum1 += cols_8b[2]*ksrc[1];
 801221e:	f998 3000 	ldrsb.w	r3, [r8]
            sum0 += cols_8b[2]*ksrc[2];
 8012222:	f919 bc07 	ldrsb.w	fp, [r9, #-7]
            sum1 += cols_8b[1]*ksrc[0];
 8012226:	fb10 1105 	smlabb	r1, r0, r5, r1
            sum0 += cols_8b[1]*ksrc[1];
 801222a:	fb15 4402 	smlabb	r4, r5, r2, r4
            sum0 += cols_8b[0]*ksrc[3];
 801222e:	f919 ac06 	ldrsb.w	sl, [r9, #-6]
            sum1 += cols_8b[2]*ksrc[1];
 8012232:	fb12 1003 	smlabb	r0, r2, r3, r1
            sum0 += cols_8b[0]*ksrc[3];
 8012236:	f99c 2000 	ldrsb.w	r2, [ip]
            sum0 += cols_8b[2]*ksrc[2];
 801223a:	fb13 430b 	smlabb	r3, r3, fp, r4
            sum1 += cols_8b[1]*ksrc[3];
 801223e:	f99c 1001 	ldrsb.w	r1, [ip, #1]
            sum0 += cols_8b[1]*ksrc[4];
 8012242:	f919 6c05 	ldrsb.w	r6, [r9, #-5]
            sum0 += cols_8b[0]*ksrc[3];
 8012246:	fb12 330a 	smlabb	r3, r2, sl, r3
            sum1 += cols_8b[2]*ksrc[4];
 801224a:	f99c 5002 	ldrsb.w	r5, [ip, #2]
            sum1 += cols_8b[3]*ksrc[2];
 801224e:	f998 2001 	ldrsb.w	r2, [r8, #1]
            sum0 += cols_8b[1]*ksrc[4];
 8012252:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum0 += cols_8b[2]*ksrc[5];
 8012256:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
            sum1 += cols_8b[3]*ksrc[2];
 801225a:	fb1b 0202 	smlabb	r2, fp, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 801225e:	f919 0c03 	ldrsb.w	r0, [r9, #-3]
 8012262:	f997 b002 	ldrsb.w	fp, [r7, #2]
            sum0 += cols_8b[2]*ksrc[5];
 8012266:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[3];
 801226a:	fb1a 2201 	smlabb	r2, sl, r1, r2
            sum0 += cols_8b[1]*ksrc[7];
 801226e:	f919 1c02 	ldrsb.w	r1, [r9, #-2]
            sum0 += cols_8b[0]*ksrc[6];
 8012272:	fb1b 3300 	smlabb	r3, fp, r0, r3
            sum1 += cols_8b[1]*ksrc[6];
 8012276:	f997 b003 	ldrsb.w	fp, [r7, #3]
            sum1 += cols_8b[2]*ksrc[7];
 801227a:	f997 a004 	ldrsb.w	sl, [r7, #4]
            sum1 += cols_8b[2]*ksrc[4];
 801227e:	fb16 2205 	smlabb	r2, r6, r5, r2
            sum0 += cols_8b[1]*ksrc[7];
 8012282:	fb1b 3301 	smlabb	r3, fp, r1, r3
            sum0 += cols_8b[2]*ksrc[8];
 8012286:	f919 6c01 	ldrsb.w	r6, [r9, #-1]
            sum0 = (float) sum0 * *scales;
 801228a:	ed5e 7a01 	vldr	s15, [lr, #-4]
            sum0 += cols_8b[2]*ksrc[8];
 801228e:	fb1a 3306 	smlabb	r3, sl, r6, r3
            sum1 += cols_8b[3]*ksrc[5];
 8012292:	f99c 5003 	ldrsb.w	r5, [ip, #3]
 8012296:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum0 += cols_8b[2]*ksrc[8];
 801229a:	ee07 3a10 	vmov	s14, r3
            sum1 += cols_8b[3]*ksrc[8];
 801229e:	f997 3005 	ldrsb.w	r3, [r7, #5]
            sum0 = (float) sum0 * *scales;
 80122a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            sum1 += cols_8b[1]*ksrc[6];
 80122a6:	fb10 220b 	smlabb	r2, r0, fp, r2
            sum0 += output_offset;
 80122aa:	982a      	ldr	r0, [sp, #168]	; 0xa8
            sum1 += cols_8b[2]*ksrc[7];
 80122ac:	fb11 220a 	smlabb	r2, r1, sl, r2
            sum0 = (float) sum0 * *scales;
 80122b0:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 += cols_8b[3]*ksrc[8];
 80122b4:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum0 = (float) sum0 * *scales;
 80122b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            sum1 = (float) sum1 * *scales;
 80122bc:	ee07 2a90 	vmov	s15, r2
 80122c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 80122c4:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 80122c8:	4403      	add	r3, r0
            sum0 = TN_MAX(sum0, activation_min);
 80122ca:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80122cc:	4283      	cmp	r3, r0
 80122ce:	bfb8      	it	lt
 80122d0:	4603      	movlt	r3, r0
            sum0 = TN_MIN(sum0, activation_max);
 80122d2:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80122d4:	4283      	cmp	r3, r0
 80122d6:	bfa8      	it	ge
 80122d8:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80122da:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80122de:	9a01      	ldr	r2, [sp, #4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80122e0:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 80122e2:	ed1e 7a01 	vldr	s14, [lr, #-4]
            sum1 += output_offset;
 80122e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
            sum1 = (float) sum1 * *scales;
 80122e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122f0:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 80122f4:	440b      	add	r3, r1
            sum1 = TN_MAX(sum1, activation_min);
 80122f6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80122f8:	428b      	cmp	r3, r1
 80122fa:	bfb8      	it	lt
 80122fc:	460b      	movlt	r3, r1
            sum1 = TN_MIN(sum1, activation_max);
 80122fe:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8012300:	428b      	cmp	r3, r1
 8012302:	bfa8      	it	ge
 8012304:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8012306:	7013      	strb	r3, [r2, #0]
 8012308:	9b06      	ldr	r3, [sp, #24]
 801230a:	18d3      	adds	r3, r2, r3
 801230c:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 801230e:	9b05      	ldr	r3, [sp, #20]
 8012310:	4598      	cmp	r8, r3
 8012312:	f47f af6a 	bne.w	80121ea <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x376>
 8012316:	9f09      	ldr	r7, [sp, #36]	; 0x24
        }
        if (output_x & 1) {
 8012318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801231a:	3701      	adds	r7, #1
 801231c:	9709      	str	r7, [sp, #36]	; 0x24
 801231e:	2b00      	cmp	r3, #0
 8012320:	d07b      	beq.n	801241a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a6>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 8012322:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012324:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8012326:	9807      	ldr	r0, [sp, #28]
 8012328:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801232c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801232e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012332:	4420      	add	r0, r4
            sum += cols_8b[0]*ksrc[0];
 8012334:	f998 4000 	ldrsb.w	r4, [r8]
            q31_t sum = bias[0] + biasR[0];
 8012338:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 801233a:	f919 2c09 	ldrsb.w	r2, [r9, #-9]
            sum += cols_8b[1]*ksrc[1];
 801233e:	f998 5001 	ldrsb.w	r5, [r8, #1]
            sum += cols_8b[0]*ksrc[0];
 8012342:	fb14 3c02 	smlabb	ip, r4, r2, r3

            sum = (float) sum * *scales;
            sum += output_offset;
            sum = TN_MAX(sum, activation_min);
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8012346:	9a08      	ldr	r2, [sp, #32]
 8012348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            sum += cols_8b[1]*ksrc[1];
 801234a:	f919 4c08 	ldrsb.w	r4, [r9, #-8]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 801234e:	eba2 0a03 	sub.w	sl, r2, r3
 8012352:	9b10      	ldr	r3, [sp, #64]	; 0x40
            cols_8b += column_x + 2;
 8012354:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012356:	18d3      	adds	r3, r2, r3
 8012358:	9007      	str	r0, [sp, #28]
 801235a:	eb08 0106 	add.w	r1, r8, r6
            sum = (float) sum * *scales;
 801235e:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8012362:	9308      	str	r3, [sp, #32]
            sum += cols_8b[1]*ksrc[1];
 8012364:	fb15 c304 	smlabb	r3, r5, r4, ip
            sum += cols_8b[2]*ksrc[2];
 8012368:	f998 5002 	ldrsb.w	r5, [r8, #2]
            cols_8b += column_x + 2;
 801236c:	1988      	adds	r0, r1, r6
            sum += cols_8b[2]*ksrc[2];
 801236e:	f919 4c07 	ldrsb.w	r4, [r9, #-7]
            sum += output_offset;
 8012372:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 8012374:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 8012378:	f918 5006 	ldrsb.w	r5, [r8, r6]
 801237c:	f919 4c06 	ldrsb.w	r4, [r9, #-6]
            sum += cols_8b[0]*ksrc[6];
 8012380:	f918 6016 	ldrsb.w	r6, [r8, r6, lsl #1]

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2;
 8012384:	f108 0803 	add.w	r8, r8, #3
            sum += cols_8b[0]*ksrc[3];
 8012388:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 801238c:	f991 4001 	ldrsb.w	r4, [r1, #1]
 8012390:	f919 5c05 	ldrsb.w	r5, [r9, #-5]
            sum += cols_8b[2]*ksrc[5];
 8012394:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 8012398:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 801239c:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
 80123a0:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 80123a4:	f919 3c03 	ldrsb.w	r3, [r9, #-3]
 80123a8:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 80123ac:	f990 6001 	ldrsb.w	r6, [r0, #1]
 80123b0:	f919 3c02 	ldrsb.w	r3, [r9, #-2]
            sum += cols_8b[2]*ksrc[8];
 80123b4:	f990 0002 	ldrsb.w	r0, [r0, #2]
            sum += cols_8b[1]*ksrc[7];
 80123b8:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 80123bc:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 80123c0:	fb10 1103 	smlabb	r1, r0, r3, r1
            sum = (float) sum * *scales;
 80123c4:	ee07 1a90 	vmov	s15, r1
 80123c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123d4:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80123d8:	4413      	add	r3, r2
            sum = TN_MAX(sum, activation_min);
 80123da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80123dc:	4293      	cmp	r3, r2
 80123de:	bfb8      	it	lt
 80123e0:	4613      	movlt	r3, r2
            sum = TN_MIN(sum, activation_max);
 80123e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80123e4:	4293      	cmp	r3, r2
 80123e6:	bfa8      	it	ge
 80123e8:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80123ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80123ec:	f80a 3002 	strb.w	r3, [sl, r2]
    for (i = 0; i < output_y; i++) {
 80123f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123f2:	42bb      	cmp	r3, r7
 80123f4:	f47f aee3 	bne.w	80121be <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 80123f8:	46f0      	mov	r8, lr
        input++;
 80123fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123fc:	f109 0909 	add.w	r9, r9, #9
 8012400:	3301      	adds	r3, #1
 8012402:	9313      	str	r3, [sp, #76]	; 0x4c
    for (c = 0; c < input_ch; c++){
 8012404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012406:	4598      	cmp	r8, r3
 8012408:	f47f aea1 	bne.w	801214e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2da>
}
 801240c:	2000      	movs	r0, #0
 801240e:	b01d      	add	sp, #116	; 0x74
 8012410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 8012414:	461d      	mov	r5, r3
 8012416:	4616      	mov	r6, r2
 8012418:	e633      	b.n	8012082 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
 801241a:	9b08      	ldr	r3, [sp, #32]
        cols_8b_iterptr += 1 * 2;
 801241c:	f108 0802 	add.w	r8, r8, #2
 8012420:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012422:	4413      	add	r3, r2
 8012424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012426:	9308      	str	r3, [sp, #32]
 8012428:	9b07      	ldr	r3, [sp, #28]
 801242a:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 801242c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801242e:	9307      	str	r3, [sp, #28]
 8012430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012432:	4293      	cmp	r3, r2
 8012434:	f47f aec3 	bne.w	80121be <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 8012438:	e7de      	b.n	80123f8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x584>
    for(i = 0; i < input_x + 2; i++){
 801243a:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 801243c:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 8012440:	1aca      	subs	r2, r1, r3
 8012442:	b292      	uxth	r2, r2
 8012444:	4591      	cmp	r9, r2
 8012446:	daf9      	bge.n	801243c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c8>
 8012448:	e650      	b.n	80120ec <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 801244a:	2602      	movs	r6, #2
 801244c:	e619      	b.n	8012082 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
        *cols_8b++ = PAD8;
 801244e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    for(i = 0; i < input_x + 2; i++){
 8012450:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 8012452:	701f      	strb	r7, [r3, #0]
 8012454:	3301      	adds	r3, #1
 8012456:	e58d      	b.n	8011f74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x100>
    for(i = 0; i < input_x + 2; i++){
 8012458:	f04f 0806 	mov.w	r8, #6
 801245c:	e553      	b.n	8011f06 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 801245e:	bf00      	nop

08012460 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask>:
    const uint16_t output_y, const uint16_t output_x,
    const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
    q7_t *output, q7_t *output_mask, const int mask_idx, const int32_t output_offset,
    const int32_t activation_min, const int32_t activation_max,
    q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8012460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012464:	b093      	sub	sp, #76	; 0x4c
 8012466:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 801246a:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
    #define STRIDE 1
    int i, j;
    q7_t mask_value;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 801246e:	900b      	str	r0, [sp, #44]	; 0x2c
{
 8012470:	9401      	str	r4, [sp, #4]
 8012472:	e9cd 2303 	strd	r2, r3, [sp, #12]
    for (i = 0; i < output_y; i++) {
 8012476:	2800      	cmp	r0, #0
 8012478:	f000 81a1 	beq.w	80127be <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x35e>
                sum0 = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + j * 2) * channel_offset] = sum0;
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801247c:	2301      	movs	r3, #1
 801247e:	1e4a      	subs	r2, r1, #1
 8012480:	ea01 0503 	and.w	r5, r1, r3
        for (j = 0; j < output_x / 2; j++) {
 8012484:	fa21 f003 	lsr.w	r0, r1, r3
 8012488:	950d      	str	r5, [sp, #52]	; 0x34
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801248a:	9d20      	ldr	r5, [sp, #128]	; 0x80
        for (j = 0; j < output_x / 2; j++) {
 801248c:	900c      	str	r0, [sp, #48]	; 0x30
 801248e:	0040      	lsls	r0, r0, #1
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8012490:	40ab      	lsls	r3, r5
 8012492:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8012494:	900f      	str	r0, [sp, #60]	; 0x3c
 8012496:	fb05 f202 	mul.w	r2, r5, r2
 801249a:	b2db      	uxtb	r3, r3
            else
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801249c:	950a      	str	r5, [sp, #40]	; 0x28
 801249e:	9208      	str	r2, [sp, #32]
 80124a0:	006a      	lsls	r2, r5, #1
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 80124a2:	9307      	str	r3, [sp, #28]
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 80124a4:	43db      	mvns	r3, r3
 80124a6:	9205      	str	r2, [sp, #20]
 80124a8:	1902      	adds	r2, r0, r4
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	9210      	str	r2, [sp, #64]	; 0x40
 80124ae:	462a      	mov	r2, r5
 80124b0:	9300      	str	r3, [sp, #0]
 80124b2:	fb02 f201 	mul.w	r2, r2, r1
 80124b6:	920e      	str	r2, [sp, #56]	; 0x38
    for (i = 0; i < output_y; i++) {
 80124b8:	2200      	movs	r2, #0
 80124ba:	9209      	str	r2, [sp, #36]	; 0x24
 80124bc:	4262      	negs	r2, r4
 80124be:	9206      	str	r2, [sp, #24]
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
            sum += cols_8b[0]*ksrc[0];
            sum += cols_8b[1]*ksrc[1];
            sum += cols_8b[2]*ksrc[2];
            cols_8b += column_x + 2;
 80124c0:	1ca2      	adds	r2, r4, #2
 80124c2:	9211      	str	r2, [sp, #68]	; 0x44
        for (j = 0; j < output_x / 2; j++) {
 80124c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f000 80f6 	beq.w	80126b8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x258>
 80124cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80124ce:	9a01      	ldr	r2, [sp, #4]
 80124d0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80124d2:	eb03 0e02 	add.w	lr, r3, r2
 80124d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80124da:	eba3 0a01 	sub.w	sl, r3, r1
 80124de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80124e0:	4699      	mov	r9, r3
 80124e2:	440a      	add	r2, r1
 80124e4:	9202      	str	r2, [sp, #8]
 80124e6:	e04a      	b.n	801257e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x11e>
 80124e8:	f1ba 0f00 	cmp.w	sl, #0
 80124ec:	46d0      	mov	r8, sl
 80124ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80124f0:	bfb8      	it	lt
 80124f2:	f10a 0807 	addlt.w	r8, sl, #7
 80124f6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80124fa:	eb02 0608 	add.w	r6, r2, r8
            if (sum0 > activation_max){
 80124fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012500:	429a      	cmp	r2, r3
 8012502:	f2c0 80b4 	blt.w	801266e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x20e>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012506:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012508:	f802 300a 	strb.w	r3, [r2, sl]
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801250c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801250e:	9a07      	ldr	r2, [sp, #28]
 8012510:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012514:	4313      	orrs	r3, r2
 8012516:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012518:	f802 3008 	strb.w	r3, [r2, r8]
            sum1 = (float) sum1 * *scales;
 801251c:	ee07 5a90 	vmov	s15, r5
 8012520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            sum1 += output_offset;
 8012522:	9a21      	ldr	r2, [sp, #132]	; 0x84
            sum1 = (float) sum1 * *scales;
 8012524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012528:	ed93 7a00 	vldr	s14, [r3]
 801252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012534:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8012538:	4413      	add	r3, r2
            if (sum1 < activation_min){
 801253a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801253c:	429a      	cmp	r2, r3
 801253e:	f340 809f 	ble.w	8012680 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x220>
 8012542:	f1b9 0f00 	cmp.w	r9, #0
 8012546:	464a      	mov	r2, r9
 8012548:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801254a:	bfb8      	it	lt
 801254c:	f109 0207 	addlt.w	r2, r9, #7
 8012550:	eb03 02e2 	add.w	r2, r3, r2, asr #3
            if (sum1 > activation_max){
 8012554:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	; 0x88
 8012558:	428b      	cmp	r3, r1
 801255a:	dd00      	ble.n	801255e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xfe>
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801255c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801255e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012560:	f801 3009 	strb.w	r3, [r1, r9]
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 8012564:	9900      	ldr	r1, [sp, #0]
 8012566:	7813      	ldrb	r3, [r2, #0]
 8012568:	400b      	ands	r3, r1
 801256a:	7013      	strb	r3, [r2, #0]
 801256c:	9b05      	ldr	r3, [sp, #20]
 801256e:	f10e 0e02 	add.w	lr, lr, #2
 8012572:	4499      	add	r9, r3
 8012574:	449a      	add	sl, r3
        for (j = 0; j < output_x / 2; j++) {
 8012576:	9b02      	ldr	r3, [sp, #8]
 8012578:	4573      	cmp	r3, lr
 801257a:	f000 8099 	beq.w	80126b0 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x250>
            q31_t sum0 = bias[0] + biasR[0];
 801257e:	9b03      	ldr	r3, [sp, #12]
 8012580:	9c06      	ldr	r4, [sp, #24]
 8012582:	6818      	ldr	r0, [r3, #0]
 8012584:	9b04      	ldr	r3, [sp, #16]
 8012586:	eb0e 0604 	add.w	r6, lr, r4
            sum0 += cols_8b[0]*ksrc[0];
 801258a:	f99b 1000 	ldrsb.w	r1, [fp]
            q31_t sum0 = bias[0] + biasR[0];
 801258e:	681b      	ldr	r3, [r3, #0]
            sum0 += cols_8b[0]*ksrc[0];
 8012590:	f91e 7004 	ldrsb.w	r7, [lr, r4]
            q31_t sum0 = bias[0] + biasR[0];
 8012594:	4418      	add	r0, r3
            sum1 += cols_8b[1]*ksrc[0];
 8012596:	f996 c001 	ldrsb.w	ip, [r6, #1]
            sum0 += cols_8b[1]*ksrc[1];
 801259a:	f99b 4001 	ldrsb.w	r4, [fp, #1]
            sum0 += cols_8b[0]*ksrc[0];
 801259e:	fb17 0701 	smlabb	r7, r7, r1, r0
            sum1 += cols_8b[2]*ksrc[1];
 80125a2:	f996 3002 	ldrsb.w	r3, [r6, #2]
            sum1 += cols_8b[1]*ksrc[0];
 80125a6:	fb11 000c 	smlabb	r0, r1, ip, r0
            sum0 += cols_8b[2]*ksrc[2];
 80125aa:	f99b 1002 	ldrsb.w	r1, [fp, #2]
            sum0 += cols_8b[1]*ksrc[1];
 80125ae:	fb1c 7704 	smlabb	r7, ip, r4, r7
            sum0 += cols_8b[0]*ksrc[3];
 80125b2:	f99b 5003 	ldrsb.w	r5, [fp, #3]
            sum1 += cols_8b[2]*ksrc[1];
 80125b6:	fb14 0003 	smlabb	r0, r4, r3, r0
 80125ba:	9a01      	ldr	r2, [sp, #4]
            sum0 += cols_8b[2]*ksrc[2];
 80125bc:	fb13 7301 	smlabb	r3, r3, r1, r7
            sum0 += cols_8b[0]*ksrc[3];
 80125c0:	f99e 7002 	ldrsb.w	r7, [lr, #2]
            sum1 += cols_8b[3]*ksrc[2];
 80125c4:	f996 4003 	ldrsb.w	r4, [r6, #3]
 80125c8:	4472      	add	r2, lr
            sum0 += cols_8b[0]*ksrc[3];
 80125ca:	fb17 3305 	smlabb	r3, r7, r5, r3
            sum1 += cols_8b[1]*ksrc[3];
 80125ce:	f99e 6003 	ldrsb.w	r6, [lr, #3]
            sum0 += cols_8b[1]*ksrc[4];
 80125d2:	f99b 7004 	ldrsb.w	r7, [fp, #4]
            sum1 += cols_8b[3]*ksrc[2];
 80125d6:	fb11 0404 	smlabb	r4, r1, r4, r0
            sum0 += cols_8b[2]*ksrc[5];
 80125da:	f99b 8005 	ldrsb.w	r8, [fp, #5]
            sum1 += cols_8b[2]*ksrc[4];
 80125de:	f99e 0004 	ldrsb.w	r0, [lr, #4]
            sum0 += cols_8b[1]*ksrc[4];
 80125e2:	fb16 3307 	smlabb	r3, r6, r7, r3
            sum1 += cols_8b[1]*ksrc[3];
 80125e6:	fb15 4106 	smlabb	r1, r5, r6, r4
            sum0 += cols_8b[0]*ksrc[6];
 80125ea:	f992 6004 	ldrsb.w	r6, [r2, #4]
            sum0 += cols_8b[2]*ksrc[5];
 80125ee:	fb10 3308 	smlabb	r3, r0, r8, r3
            sum0 += cols_8b[0]*ksrc[6];
 80125f2:	f99b 4006 	ldrsb.w	r4, [fp, #6]
            sum0 = (float) sum0 * *scales;
 80125f6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
            sum1 += cols_8b[1]*ksrc[6];
 80125f8:	f992 c005 	ldrsb.w	ip, [r2, #5]
            sum0 += cols_8b[0]*ksrc[6];
 80125fc:	fb16 3304 	smlabb	r3, r6, r4, r3
            sum0 = (float) sum0 * *scales;
 8012600:	ed95 7a00 	vldr	s14, [r5]
            sum1 += cols_8b[2]*ksrc[4];
 8012604:	fb17 1500 	smlabb	r5, r7, r0, r1
            sum0 += cols_8b[1]*ksrc[7];
 8012608:	f99b 0007 	ldrsb.w	r0, [fp, #7]
            sum1 += cols_8b[2]*ksrc[7];
 801260c:	f992 7006 	ldrsb.w	r7, [r2, #6]
            sum0 += cols_8b[2]*ksrc[8];
 8012610:	f99b 1008 	ldrsb.w	r1, [fp, #8]
            sum0 += cols_8b[1]*ksrc[7];
 8012614:	fb1c 3300 	smlabb	r3, ip, r0, r3
            sum1 += cols_8b[3]*ksrc[5];
 8012618:	f99e 6005 	ldrsb.w	r6, [lr, #5]
            sum0 += cols_8b[2]*ksrc[8];
 801261c:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum1 += cols_8b[3]*ksrc[8];
 8012620:	f992 2007 	ldrsb.w	r2, [r2, #7]
            sum1 += cols_8b[3]*ksrc[5];
 8012624:	fb18 5506 	smlabb	r5, r8, r6, r5
            sum0 += cols_8b[2]*ksrc[8];
 8012628:	ee07 3a90 	vmov	s15, r3
            sum1 += cols_8b[1]*ksrc[6];
 801262c:	fb14 550c 	smlabb	r5, r4, ip, r5
            sum0 = (float) sum0 * *scales;
 8012630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum1 += cols_8b[2]*ksrc[7];
 8012634:	fb10 5507 	smlabb	r5, r0, r7, r5
            sum0 = (float) sum0 * *scales;
 8012638:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[3]*ksrc[8];
 801263c:	fb11 5502 	smlabb	r5, r1, r2, r5
            sum0 += output_offset;
 8012640:	9a21      	ldr	r2, [sp, #132]	; 0x84
            sum0 = (float) sum0 * *scales;
 8012642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012646:	ee17 3a90 	vmov	r3, s15
            sum0 += output_offset;
 801264a:	4413      	add	r3, r2
            if (sum0 < activation_min){
 801264c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801264e:	429a      	cmp	r2, r3
 8012650:	f77f af4a 	ble.w	80124e8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x88>
 8012654:	f1ba 0f00 	cmp.w	sl, #0
 8012658:	4656      	mov	r6, sl
 801265a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801265c:	bfb8      	it	lt
 801265e:	f10a 0607 	addlt.w	r6, sl, #7
 8012662:	eb03 06e6 	add.w	r6, r3, r6, asr #3
            if (sum0 > activation_max){
 8012666:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 801266a:	4293      	cmp	r3, r2
 801266c:	dd00      	ble.n	8012670 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x210>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801266e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012670:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012672:	f802 300a 	strb.w	r3, [r2, sl]
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8012676:	9a00      	ldr	r2, [sp, #0]
 8012678:	7833      	ldrb	r3, [r6, #0]
 801267a:	4013      	ands	r3, r2
 801267c:	7033      	strb	r3, [r6, #0]
 801267e:	e74d      	b.n	801251c <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xbc>
 8012680:	f1b9 0f00 	cmp.w	r9, #0
 8012684:	4649      	mov	r1, r9
            if (sum1 > activation_max){
 8012686:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8012688:	bfb8      	it	lt
 801268a:	f109 0107 	addlt.w	r1, r9, #7
 801268e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012690:	4298      	cmp	r0, r3
 8012692:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8012696:	440a      	add	r2, r1
 8012698:	f6ff af60 	blt.w	801255c <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0xfc>
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801269c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801269e:	f802 3009 	strb.w	r3, [r2, r9]
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 80126a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80126a4:	9a07      	ldr	r2, [sp, #28]
 80126a6:	5c5b      	ldrb	r3, [r3, r1]
 80126a8:	4313      	orrs	r3, r2
 80126aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80126ac:	5453      	strb	r3, [r2, r1]
 80126ae:	e75d      	b.n	801256c <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x10c>
 80126b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80126b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126b4:	4413      	add	r3, r2
 80126b6:	9324      	str	r3, [sp, #144]	; 0x90
 80126b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ba:	3301      	adds	r3, #1
 80126bc:	9309      	str	r3, [sp, #36]	; 0x24
        if (output_x & 1) {
 80126be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d06c      	beq.n	801279e <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x33e>
            cols_8b += column_x + 2;
 80126c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80126c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
            q31_t sum = bias[0] + biasR[0];
 80126c8:	9b03      	ldr	r3, [sp, #12]
            cols_8b += column_x + 2;
 80126ca:	1951      	adds	r1, r2, r5
            q31_t sum = bias[0] + biasR[0];
 80126cc:	9a04      	ldr	r2, [sp, #16]
            sum += cols_8b[0]*ksrc[0];
 80126ce:	9824      	ldr	r0, [sp, #144]	; 0x90
            q31_t sum = bias[0] + biasR[0];
 80126d0:	6812      	ldr	r2, [r2, #0]
 80126d2:	681b      	ldr	r3, [r3, #0]
            sum += cols_8b[0]*ksrc[0];
 80126d4:	f990 4000 	ldrsb.w	r4, [r0]
            sum += cols_8b[0]*ksrc[3];
            sum += cols_8b[1]*ksrc[4];
            sum += cols_8b[2]*ksrc[5];
            cols_8b += column_x + 2;
 80126d8:	1948      	adds	r0, r1, r5
            q31_t sum = bias[0] + biasR[0];
 80126da:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 80126dc:	f99b 2000 	ldrsb.w	r2, [fp]
            sum += cols_8b[0]*ksrc[6];
            sum += cols_8b[1]*ksrc[7];
            sum += cols_8b[2]*ksrc[8];

            sum = (float) sum * *scales;
 80126e0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
            sum += cols_8b[0]*ksrc[0];
 80126e2:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[1]*ksrc[1];
 80126e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
            sum = (float) sum * *scales;
 80126e8:	ed96 7a00 	vldr	s14, [r6]
            sum += cols_8b[1]*ksrc[1];
 80126ec:	f992 4001 	ldrsb.w	r4, [r2, #1]
 80126f0:	f99b 2001 	ldrsb.w	r2, [fp, #1]
 80126f4:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[2]*ksrc[2];
 80126f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80126fa:	f992 4002 	ldrsb.w	r4, [r2, #2]
 80126fe:	f99b 2002 	ldrsb.w	r2, [fp, #2]
 8012702:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[0]*ksrc[3];
 8012706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012708:	4614      	mov	r4, r2
 801270a:	f99b 2003 	ldrsb.w	r2, [fp, #3]
 801270e:	5764      	ldrsb	r4, [r4, r5]
 8012710:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[1]*ksrc[4];
 8012714:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8012718:	f99b 4004 	ldrsb.w	r4, [fp, #4]
            sum += cols_8b[2]*ksrc[5];
 801271c:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 8012720:	fb12 3304 	smlabb	r3, r2, r4, r3
            sum += cols_8b[2]*ksrc[5];
 8012724:	f99b 4005 	ldrsb.w	r4, [fp, #5]
            sum += cols_8b[0]*ksrc[6];
 8012728:	9a24      	ldr	r2, [sp, #144]	; 0x90
            sum += cols_8b[2]*ksrc[5];
 801272a:	fb11 3304 	smlabb	r3, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 801272e:	f99b 4006 	ldrsb.w	r4, [fp, #6]
 8012732:	f912 2015 	ldrsb.w	r2, [r2, r5, lsl #1]
            sum += cols_8b[1]*ksrc[7];
 8012736:	f990 1001 	ldrsb.w	r1, [r0, #1]
            sum += cols_8b[0]*ksrc[6];
 801273a:	fb12 3304 	smlabb	r3, r2, r4, r3
            sum += cols_8b[1]*ksrc[7];
 801273e:	f99b 4007 	ldrsb.w	r4, [fp, #7]
            sum += cols_8b[2]*ksrc[8];
 8012742:	f990 0002 	ldrsb.w	r0, [r0, #2]
            sum += cols_8b[1]*ksrc[7];
 8012746:	fb11 3304 	smlabb	r3, r1, r4, r3
            sum += cols_8b[2]*ksrc[8];
 801274a:	f99b 4008 	ldrsb.w	r4, [fp, #8]
            sum += output_offset;
 801274e:	9a21      	ldr	r2, [sp, #132]	; 0x84
            sum += cols_8b[2]*ksrc[8];
 8012750:	fb10 3304 	smlabb	r3, r0, r4, r3
            sum = (float) sum * *scales;
 8012754:	ee07 3a90 	vmov	s15, r3
 8012758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801275c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012764:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8012768:	4413      	add	r3, r2
            mask_value = 1;
            if (sum < activation_min){
 801276a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801276c:	4293      	cmp	r3, r2
 801276e:	da29      	bge.n	80127c4 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x364>
 8012770:	9b08      	ldr	r3, [sp, #32]
 8012772:	2b00      	cmp	r3, #0
 8012774:	461a      	mov	r2, r3
 8012776:	bfb8      	it	lt
 8012778:	1dda      	addlt	r2, r3, #7
 801277a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801277c:	eb03 02e2 	add.w	r2, r3, r2, asr #3
                sum = activation_min;
                mask_value = 0;
            }
            if (sum > activation_max){
 8012780:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	; 0x88
 8012784:	428b      	cmp	r3, r1
 8012786:	dd00      	ble.n	801278a <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x32a>
                sum = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8012788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801278a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801278c:	9808      	ldr	r0, [sp, #32]
 801278e:	540b      	strb	r3, [r1, r0]
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8012790:	9900      	ldr	r1, [sp, #0]
 8012792:	7813      	ldrb	r3, [r2, #0]
 8012794:	400b      	ands	r3, r1
 8012796:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 8012798:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801279a:	3301      	adds	r3, #1
 801279c:	9324      	str	r3, [sp, #144]	; 0x90
        }
        cols_8b_iterptr += 1 * 2;
 801279e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80127a0:	9a08      	ldr	r2, [sp, #32]
 80127a2:	3302      	adds	r3, #2
 80127a4:	4611      	mov	r1, r2
 80127a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127a8:	9324      	str	r3, [sp, #144]	; 0x90
 80127aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127ac:	441a      	add	r2, r3
 80127ae:	4419      	add	r1, r3
    for (i = 0; i < output_y; i++) {
 80127b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127b2:	920a      	str	r2, [sp, #40]	; 0x28
 80127b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127b6:	9108      	str	r1, [sp, #32]
 80127b8:	4293      	cmp	r3, r2
 80127ba:	f47f ae83 	bne.w	80124c4 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x64>
    }
}
 80127be:	b013      	add	sp, #76	; 0x4c
 80127c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c4:	9a08      	ldr	r2, [sp, #32]
            if (sum > activation_max){
 80127c6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80127c8:	2a00      	cmp	r2, #0
 80127ca:	4611      	mov	r1, r2
 80127cc:	bfb8      	it	lt
 80127ce:	1dd1      	addlt	r1, r2, #7
 80127d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80127d2:	4283      	cmp	r3, r0
 80127d4:	ea4f 01e1 	mov.w	r1, r1, asr #3
 80127d8:	440a      	add	r2, r1
 80127da:	dcd5      	bgt.n	8012788 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x328>
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80127dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80127de:	9808      	ldr	r0, [sp, #32]
 80127e0:	5413      	strb	r3, [r2, r0]
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 80127e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80127e4:	9a07      	ldr	r2, [sp, #28]
 80127e6:	5c5b      	ldrb	r3, [r3, r1]
 80127e8:	4313      	orrs	r3, r2
 80127ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80127ec:	5453      	strb	r3, [r2, r1]
 80127ee:	e7d3      	b.n	8012798 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask+0x338>

080127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>:
{
 80127f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f4:	b095      	sub	sp, #84	; 0x54
 80127f6:	460c      	mov	r4, r1
 80127f8:	4692      	mov	sl, r2
    for(i = 0; i < input_x + 2; i++){
 80127fa:	f104 0901 	add.w	r9, r4, #1
 80127fe:	4622      	mov	r2, r4
{
 8012800:	461c      	mov	r4, r3
 8012802:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
 8012806:	f102 0802 	add.w	r8, r2, #2
 801280a:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 801280e:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
 8012812:	982b      	ldr	r0, [sp, #172]	; 0xac
 8012814:	9211      	str	r2, [sp, #68]	; 0x44
 8012816:	4241      	negs	r1, r0
 8012818:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 801281c:	f001 0107 	and.w	r1, r1, #7
 8012820:	9212      	str	r2, [sp, #72]	; 0x48
 8012822:	f99d 20b0 	ldrsb.w	r2, [sp, #176]	; 0xb0
 8012826:	1dcb      	adds	r3, r1, #7
 8012828:	2b0c      	cmp	r3, #12
 801282a:	bf38      	it	cc
 801282c:	230c      	movcc	r3, #12
 801282e:	4599      	cmp	r9, r3
 8012830:	f0c0 81cc 	bcc.w	8012bcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3dc>
 8012834:	2900      	cmp	r1, #0
 8012836:	f000 81c3 	beq.w	8012bc0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3d0>
        *cols_8b++ = PAD8;
 801283a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801283c:	2901      	cmp	r1, #1
 801283e:	701a      	strb	r2, [r3, #0]
 8012840:	f103 0601 	add.w	r6, r3, #1
 8012844:	f000 818c 	beq.w	8012b60 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x370>
 8012848:	2902      	cmp	r1, #2
 801284a:	705a      	strb	r2, [r3, #1]
 801284c:	f103 0602 	add.w	r6, r3, #2
 8012850:	f000 8186 	beq.w	8012b60 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x370>
 8012854:	2903      	cmp	r1, #3
 8012856:	709a      	strb	r2, [r3, #2]
 8012858:	f103 0603 	add.w	r6, r3, #3
 801285c:	f000 8180 	beq.w	8012b60 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x370>
 8012860:	2904      	cmp	r1, #4
 8012862:	70da      	strb	r2, [r3, #3]
 8012864:	f103 0604 	add.w	r6, r3, #4
 8012868:	f000 817a 	beq.w	8012b60 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x370>
 801286c:	2905      	cmp	r1, #5
 801286e:	711a      	strb	r2, [r3, #4]
 8012870:	f103 0605 	add.w	r6, r3, #5
 8012874:	f000 8174 	beq.w	8012b60 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x370>
 8012878:	2907      	cmp	r1, #7
 801287a:	715a      	strb	r2, [r3, #5]
 801287c:	f103 0606 	add.w	r6, r3, #6
 8012880:	f040 81a9 	bne.w	8012bd6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3e6>
 8012884:	1dde      	adds	r6, r3, #7
 8012886:	4618      	mov	r0, r3
 8012888:	719a      	strb	r2, [r3, #6]
    for(i = 0; i < input_x + 2; i++){
 801288a:	910f      	str	r1, [sp, #60]	; 0x3c
 801288c:	2700      	movs	r7, #0
 801288e:	eba8 0301 	sub.w	r3, r8, r1
 8012892:	4401      	add	r1, r0
 8012894:	1c75      	adds	r5, r6, #1
 8012896:	46bc      	mov	ip, r7
 8012898:	f362 0707 	bfi	r7, r2, #0, #8
 801289c:	9310      	str	r3, [sp, #64]	; 0x40
 801289e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80128a2:	4660      	mov	r0, ip
 80128a4:	f362 0c07 	bfi	ip, r2, #0, #8
 80128a8:	f362 270f 	bfi	r7, r2, #8, #8
 80128ac:	f362 2c0f 	bfi	ip, r2, #8, #8
 80128b0:	f362 4717 	bfi	r7, r2, #16, #8
 80128b4:	f362 4c17 	bfi	ip, r2, #16, #8
 80128b8:	f362 671f 	bfi	r7, r2, #24, #8
 80128bc:	f362 6c1f 	bfi	ip, r2, #24, #8
 80128c0:	4663      	mov	r3, ip
 80128c2:	4694      	mov	ip, r2
 80128c4:	461a      	mov	r2, r3
 80128c6:	3001      	adds	r0, #1
 80128c8:	462b      	mov	r3, r5
        *cols_8b++ = PAD8;
 80128ca:	3508      	adds	r5, #8
 80128cc:	4586      	cmp	lr, r0
 80128ce:	f103 0307 	add.w	r3, r3, #7
 80128d2:	e9c1 7200 	strd	r7, r2, [r1]
 80128d6:	f101 0108 	add.w	r1, r1, #8
 80128da:	d8f4      	bhi.n	80128c6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0xd6>
 80128dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80128de:	4662      	mov	r2, ip
 80128e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80128e2:	f027 0107 	bic.w	r1, r7, #7
 80128e6:	4408      	add	r0, r1
 80128e8:	428f      	cmp	r7, r1
 80128ea:	eb06 0501 	add.w	r5, r6, r1
 80128ee:	b280      	uxth	r0, r0
 80128f0:	d065      	beq.n	80129be <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x1ce>
    for(i = 0; i < input_x + 2; i++){
 80128f2:	3001      	adds	r0, #1
        *cols_8b++ = PAD8;
 80128f4:	1c6b      	adds	r3, r5, #1
 80128f6:	f806 c001 	strb.w	ip, [r6, r1]
    for(i = 0; i < input_x + 2; i++){
 80128fa:	b280      	uxth	r0, r0
 80128fc:	4581      	cmp	r9, r0
 80128fe:	db5e      	blt.n	80129be <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x1ce>
 8012900:	1c41      	adds	r1, r0, #1
        *cols_8b++ = PAD8;
 8012902:	701a      	strb	r2, [r3, #0]
 8012904:	1c5d      	adds	r5, r3, #1
    for(i = 0; i < input_x + 2; i++){
 8012906:	b289      	uxth	r1, r1
 8012908:	4589      	cmp	r9, r1
 801290a:	f2c0 812c 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 801290e:	1c81      	adds	r1, r0, #2
        *cols_8b++ = PAD8;
 8012910:	705a      	strb	r2, [r3, #1]
 8012912:	1c9d      	adds	r5, r3, #2
    for(i = 0; i < input_x + 2; i++){
 8012914:	b289      	uxth	r1, r1
 8012916:	4589      	cmp	r9, r1
 8012918:	f2c0 8125 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 801291c:	1cc1      	adds	r1, r0, #3
        *cols_8b++ = PAD8;
 801291e:	709a      	strb	r2, [r3, #2]
 8012920:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8012922:	b289      	uxth	r1, r1
 8012924:	4589      	cmp	r9, r1
 8012926:	f2c0 811e 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 801292a:	1d01      	adds	r1, r0, #4
        *cols_8b++ = PAD8;
 801292c:	70da      	strb	r2, [r3, #3]
 801292e:	1d1d      	adds	r5, r3, #4
    for(i = 0; i < input_x + 2; i++){
 8012930:	b289      	uxth	r1, r1
 8012932:	4589      	cmp	r9, r1
 8012934:	f2c0 8117 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012938:	1d41      	adds	r1, r0, #5
        *cols_8b++ = PAD8;
 801293a:	711a      	strb	r2, [r3, #4]
 801293c:	1d5d      	adds	r5, r3, #5
    for(i = 0; i < input_x + 2; i++){
 801293e:	b289      	uxth	r1, r1
 8012940:	4589      	cmp	r9, r1
 8012942:	f2c0 8110 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012946:	1d81      	adds	r1, r0, #6
        *cols_8b++ = PAD8;
 8012948:	715a      	strb	r2, [r3, #5]
 801294a:	1d9d      	adds	r5, r3, #6
    for(i = 0; i < input_x + 2; i++){
 801294c:	b289      	uxth	r1, r1
 801294e:	4589      	cmp	r9, r1
 8012950:	f2c0 8109 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012954:	1dc1      	adds	r1, r0, #7
        *cols_8b++ = PAD8;
 8012956:	719a      	strb	r2, [r3, #6]
 8012958:	1ddd      	adds	r5, r3, #7
    for(i = 0; i < input_x + 2; i++){
 801295a:	b289      	uxth	r1, r1
 801295c:	4589      	cmp	r9, r1
 801295e:	f2c0 8102 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012962:	f100 0108 	add.w	r1, r0, #8
        *cols_8b++ = PAD8;
 8012966:	71da      	strb	r2, [r3, #7]
 8012968:	f103 0508 	add.w	r5, r3, #8
    for(i = 0; i < input_x + 2; i++){
 801296c:	b289      	uxth	r1, r1
 801296e:	4589      	cmp	r9, r1
 8012970:	f2c0 80f9 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012974:	f100 0109 	add.w	r1, r0, #9
        *cols_8b++ = PAD8;
 8012978:	721a      	strb	r2, [r3, #8]
 801297a:	f103 0509 	add.w	r5, r3, #9
    for(i = 0; i < input_x + 2; i++){
 801297e:	b289      	uxth	r1, r1
 8012980:	4589      	cmp	r9, r1
 8012982:	f2c0 80f0 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012986:	f100 010a 	add.w	r1, r0, #10
        *cols_8b++ = PAD8;
 801298a:	725a      	strb	r2, [r3, #9]
 801298c:	f103 050a 	add.w	r5, r3, #10
    for(i = 0; i < input_x + 2; i++){
 8012990:	b289      	uxth	r1, r1
 8012992:	4589      	cmp	r9, r1
 8012994:	f2c0 80e7 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 8012998:	f100 010b 	add.w	r1, r0, #11
        *cols_8b++ = PAD8;
 801299c:	729a      	strb	r2, [r3, #10]
 801299e:	f103 050b 	add.w	r5, r3, #11
    for(i = 0; i < input_x + 2; i++){
 80129a2:	b289      	uxth	r1, r1
 80129a4:	4589      	cmp	r9, r1
 80129a6:	f2c0 80de 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
 80129aa:	300c      	adds	r0, #12
        *cols_8b++ = PAD8;
 80129ac:	72da      	strb	r2, [r3, #11]
 80129ae:	f103 050c 	add.w	r5, r3, #12
    for(i = 0; i < input_x + 2; i++){
 80129b2:	b281      	uxth	r1, r0
 80129b4:	4589      	cmp	r9, r1
 80129b6:	f2c0 80d6 	blt.w	8012b66 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x376>
        *cols_8b++ = PAD8;
 80129ba:	731a      	strb	r2, [r3, #12]
 80129bc:	330d      	adds	r3, #13
    for(i = 0; i < input_y; i++){
 80129be:	f1ba 0f00 	cmp.w	sl, #0
 80129c2:	d00f      	beq.n	80129e4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x1f4>
 80129c4:	4619      	mov	r1, r3
 80129c6:	2000      	movs	r0, #0
 80129c8:	3001      	adds	r0, #1
        *cols_8b++ = PAD8;//left
 80129ca:	700a      	strb	r2, [r1, #0]
 80129cc:	4441      	add	r1, r8
    for(i = 0; i < input_y; i++){
 80129ce:	b285      	uxth	r5, r0
        *cols_8b++ = PAD8;//right
 80129d0:	f801 2c01 	strb.w	r2, [r1, #-1]
    for(i = 0; i < input_y; i++){
 80129d4:	45aa      	cmp	sl, r5
 80129d6:	d8f7      	bhi.n	80129c8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x1d8>
 80129d8:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80129dc:	b289      	uxth	r1, r1
 80129de:	fb01 8108 	mla	r1, r1, r8, r8
 80129e2:	440b      	add	r3, r1
 80129e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80129e6:	f1a1 0013 	sub.w	r0, r1, #19
 80129ea:	f64f 71ea 	movw	r1, #65514	; 0xffea
 80129ee:	4288      	cmp	r0, r1
 80129f0:	f200 80de 	bhi.w	8012bb0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3c0>
 80129f4:	4259      	negs	r1, r3
 80129f6:	f011 0103 	ands.w	r1, r1, #3
 80129fa:	f000 80d6 	beq.w	8012baa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3ba>
 80129fe:	2901      	cmp	r1, #1
        *cols_8b++ = PAD8;
 8012a00:	701a      	strb	r2, [r3, #0]
 8012a02:	f103 0601 	add.w	r6, r3, #1
 8012a06:	f000 80d1 	beq.w	8012bac <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3bc>
 8012a0a:	2903      	cmp	r1, #3
 8012a0c:	705a      	strb	r2, [r3, #1]
 8012a0e:	f103 0602 	add.w	r6, r3, #2
 8012a12:	f040 80d9 	bne.w	8012bc8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3d8>
 8012a16:	1cde      	adds	r6, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8012a18:	460d      	mov	r5, r1
        *cols_8b++ = PAD8;
 8012a1a:	709a      	strb	r2, [r3, #2]
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	eba8 0701 	sub.w	r7, r8, r1
 8012a22:	440b      	add	r3, r1
    for(i = 0; i < input_x + 2; i++){
 8012a24:	4601      	mov	r1, r0
 8012a26:	f362 0007 	bfi	r0, r2, #0, #8
 8012a2a:	ea4f 0c97 	mov.w	ip, r7, lsr #2
 8012a2e:	f362 200f 	bfi	r0, r2, #8, #8
 8012a32:	f362 4017 	bfi	r0, r2, #16, #8
 8012a36:	f362 601f 	bfi	r0, r2, #24, #8
 8012a3a:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 8012a3c:	f843 0b04 	str.w	r0, [r3], #4
 8012a40:	458c      	cmp	ip, r1
 8012a42:	d8fa      	bhi.n	8012a3a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x24a>
 8012a44:	f027 0103 	bic.w	r1, r7, #3
 8012a48:	186b      	adds	r3, r5, r1
 8012a4a:	428f      	cmp	r7, r1
 8012a4c:	eb06 0001 	add.w	r0, r6, r1
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	d019      	beq.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
    for(i = 0; i < input_x + 2; i++){
 8012a54:	1c5d      	adds	r5, r3, #1
        *cols_8b++ = PAD8;
 8012a56:	5472      	strb	r2, [r6, r1]
    for(i = 0; i < input_x + 2; i++){
 8012a58:	b2a9      	uxth	r1, r5
 8012a5a:	4589      	cmp	r9, r1
 8012a5c:	db14      	blt.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
 8012a5e:	1c99      	adds	r1, r3, #2
        *cols_8b++ = PAD8;
 8012a60:	7042      	strb	r2, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 8012a62:	b289      	uxth	r1, r1
 8012a64:	4549      	cmp	r1, r9
 8012a66:	dc0f      	bgt.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
 8012a68:	1cd9      	adds	r1, r3, #3
        *cols_8b++ = PAD8;
 8012a6a:	7082      	strb	r2, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 8012a6c:	b289      	uxth	r1, r1
 8012a6e:	4589      	cmp	r9, r1
 8012a70:	db0a      	blt.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
 8012a72:	1d19      	adds	r1, r3, #4
        *cols_8b++ = PAD8;
 8012a74:	70c2      	strb	r2, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 8012a76:	b289      	uxth	r1, r1
 8012a78:	4589      	cmp	r9, r1
 8012a7a:	db05      	blt.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
 8012a7c:	3305      	adds	r3, #5
        *cols_8b++ = PAD8;
 8012a7e:	7102      	strb	r2, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	4599      	cmp	r9, r3
 8012a84:	db00      	blt.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
        *cols_8b++ = PAD8;
 8012a86:	7142      	strb	r2, [r0, #5]
    for (c = 0; c < input_ch; c++){
 8012a88:	2c00      	cmp	r4, #0
 8012a8a:	f000 808a 	beq.w	8012ba2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3b2>
 8012a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a90:	2500      	movs	r5, #0
 8012a92:	46dc      	mov	ip, fp
 8012a94:	1e5e      	subs	r6, r3, #1
 8012a96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8012a98:	b2b6      	uxth	r6, r6
 8012a9a:	4443      	add	r3, r8
 8012a9c:	1c77      	adds	r7, r6, #1
 8012a9e:	3603      	adds	r6, #3
 8012aa0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012aa2:	46b1      	mov	r9, r6
 8012aa4:	fb07 f804 	mul.w	r8, r7, r4
 8012aa8:	4656      	mov	r6, sl
 8012aaa:	9710      	str	r7, [sp, #64]	; 0x40
        for(i = 0; i < input_y; i++){
 8012aac:	b1e6      	cbz	r6, 8012ae8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x2f8>
 8012aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ab0:	b1d3      	cbz	r3, 8012ae8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x2f8>
 8012ab2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8012ab6:	f04f 0a00 	mov.w	sl, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 8012aba:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
        for(i = 0; i < input_y; i++){
 8012abe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012ac0:	eb0e 0007 	add.w	r0, lr, r7
 8012ac4:	4672      	mov	r2, lr
 8012ac6:	465b      	mov	r3, fp
                *cols_8b++ = *src;// + input_offset;
 8012ac8:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8012acc:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8012ace:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8012ad2:	4282      	cmp	r2, r0
 8012ad4:	d1f8      	bne.n	8012ac8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x2d8>
 8012ad6:	f10a 0a01 	add.w	sl, sl, #1
 8012ada:	44c3      	add	fp, r8
            cols_8b += 1;//skip end
 8012adc:	44ce      	add	lr, r9
        for(i = 0; i < input_y; i++){
 8012ade:	fa1f f38a 	uxth.w	r3, sl
 8012ae2:	429e      	cmp	r6, r3
 8012ae4:	d8ec      	bhi.n	8012ac0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x2d0>
 8012ae6:	9710      	str	r7, [sp, #64]	; 0x40
        if (c % 8 == 0 && c > 1) output_mask++;
 8012ae8:	2d01      	cmp	r5, #1
 8012aea:	f005 0e07 	and.w	lr, r5, #7
 8012aee:	d93c      	bls.n	8012b6a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x37a>
 8012af0:	f1be 0f00 	cmp.w	lr, #0
 8012af4:	d139      	bne.n	8012b6a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x37a>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012af6:	9f24      	ldr	r7, [sp, #144]	; 0x90
        if (c % 8 == 0 && c > 1) output_mask++;
 8012af8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012afa:	9706      	str	r7, [sp, #24]
 8012afc:	f10c 0704 	add.w	r7, ip, #4
        if (c % 8 == 0 && c > 1) output_mask++;
 8012b00:	3301      	adds	r3, #1
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012b02:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012b04:	970f      	str	r7, [sp, #60]	; 0x3c
 8012b06:	9f22      	ldr	r7, [sp, #136]	; 0x88
        if (c % 8 == 0 && c > 1) output_mask++;
 8012b08:	9327      	str	r3, [sp, #156]	; 0x9c
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012b0a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012b0c:	9705      	str	r7, [sp, #20]
 8012b0e:	2700      	movs	r7, #0
 8012b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b12:	9825      	ldr	r0, [sp, #148]	; 0x94
 8012b14:	9203      	str	r2, [sp, #12]
 8012b16:	9704      	str	r7, [sp, #16]
 8012b18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012b1a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8012b1e:	f102 0b04 	add.w	fp, r2, #4
 8012b22:	9108      	str	r1, [sp, #32]
 8012b24:	4663      	mov	r3, ip
 8012b26:	9007      	str	r0, [sp, #28]
 8012b28:	f107 0a04 	add.w	sl, r7, #4
 8012b2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012b2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012b30:	940a      	str	r4, [sp, #40]	; 0x28
 8012b32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    for (c = 0; c < input_ch; c++){
 8012b34:	3501      	adds	r5, #1
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012b36:	9702      	str	r7, [sp, #8]
        input++;
 8012b38:	3701      	adds	r7, #1
    for (c = 0; c < input_ch; c++){
 8012b3a:	b2ad      	uxth	r5, r5
        input++;
 8012b3c:	970d      	str	r7, [sp, #52]	; 0x34
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012b3e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012b40:	9701      	str	r7, [sp, #4]
 8012b42:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012b44:	9700      	str	r7, [sp, #0]
        ksrc += 9;
 8012b46:	3709      	adds	r7, #9
 8012b48:	971e      	str	r7, [sp, #120]	; 0x78
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012b4a:	f7ff fc89 	bl	8012460 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask>
    for (c = 0; c < input_ch; c++){
 8012b4e:	42ac      	cmp	r4, r5
 8012b50:	d027      	beq.n	8012ba2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3b2>
    for(i = 0; i < input_x + 2; i++){
 8012b52:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8012b56:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8012b5a:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
 8012b5e:	e7a5      	b.n	8012aac <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x2bc>
    for(i = 0; i < input_x + 2; i++){
 8012b60:	910f      	str	r1, [sp, #60]	; 0x3c
 8012b62:	4618      	mov	r0, r3
 8012b64:	e692      	b.n	801288c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x9c>
        *cols_8b++ = PAD8;
 8012b66:	462b      	mov	r3, r5
 8012b68:	e729      	b.n	80129be <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x1ce>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012b6a:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8012b6c:	4663      	mov	r3, ip
 8012b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b70:	9706      	str	r7, [sp, #24]
 8012b72:	f10c 0704 	add.w	r7, ip, #4
 8012b76:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012b78:	970f      	str	r7, [sp, #60]	; 0x3c
 8012b7a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8012b7c:	9825      	ldr	r0, [sp, #148]	; 0x94
 8012b7e:	9705      	str	r7, [sp, #20]
 8012b80:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012b82:	9209      	str	r2, [sp, #36]	; 0x24
 8012b84:	f107 0a04 	add.w	sl, r7, #4
 8012b88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012b8a:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8012b8c:	9108      	str	r1, [sp, #32]
 8012b8e:	f102 0b04 	add.w	fp, r2, #4
 8012b92:	9007      	str	r0, [sp, #28]
 8012b94:	940a      	str	r4, [sp, #40]	; 0x28
 8012b96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012b98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012b9a:	f8cd e010 	str.w	lr, [sp, #16]
 8012b9e:	9703      	str	r7, [sp, #12]
 8012ba0:	e7c7      	b.n	8012b32 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x342>
}
 8012ba2:	2000      	movs	r0, #0
 8012ba4:	b015      	add	sp, #84	; 0x54
 8012ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 8012baa:	461e      	mov	r6, r3
 8012bac:	460d      	mov	r5, r1
 8012bae:	e735      	b.n	8012a1c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x22c>
 8012bb0:	4618      	mov	r0, r3
        *cols_8b++ = PAD8;
 8012bb2:	f800 2b01 	strb.w	r2, [r0], #1
    for(i = 0; i < input_x + 2; i++){
 8012bb6:	1ac1      	subs	r1, r0, r3
 8012bb8:	b289      	uxth	r1, r1
 8012bba:	4549      	cmp	r1, r9
 8012bbc:	ddf9      	ble.n	8012bb2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x3c2>
 8012bbe:	e763      	b.n	8012a88 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x298>
    for(i = 0; i < input_x + 2; i++){
 8012bc0:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8012bc2:	910f      	str	r1, [sp, #60]	; 0x3c
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	e661      	b.n	801288c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x9c>
    for(i = 0; i < input_x + 2; i++){
 8012bc8:	2502      	movs	r5, #2
 8012bca:	e727      	b.n	8012a1c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x22c>
        *cols_8b++ = PAD8;
 8012bcc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    for(i = 0; i < input_x + 2; i++){
 8012bce:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 8012bd0:	701a      	strb	r2, [r3, #0]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	e694      	b.n	8012900 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x110>
    for(i = 0; i < input_x + 2; i++){
 8012bd6:	2306      	movs	r3, #6
 8012bd8:	982b      	ldr	r0, [sp, #172]	; 0xac
 8012bda:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bdc:	e656      	b.n	801288c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask+0x9c>
 8012bde:	bf00      	nop

08012be0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8012be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be4:	b09f      	sub	sp, #124	; 0x7c

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8012be6:	f101 0901 	add.w	r9, r1, #1
{
 8012bea:	9218      	str	r2, [sp, #96]	; 0x60
 8012bec:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8012bee:	930a      	str	r3, [sp, #40]	; 0x28
 8012bf0:	1c8b      	adds	r3, r1, #2
 8012bf2:	4252      	negs	r2, r2
 8012bf4:	910c      	str	r1, [sp, #48]	; 0x30
 8012bf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8012bf8:	f002 0207 	and.w	r2, r2, #7
 8012bfc:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 8012c00:	9014      	str	r0, [sp, #80]	; 0x50
 8012c02:	1dd3      	adds	r3, r2, #7
 8012c04:	910d      	str	r1, [sp, #52]	; 0x34
 8012c06:	f8bd 10c8 	ldrh.w	r1, [sp, #200]	; 0xc8
 8012c0a:	2b0c      	cmp	r3, #12
 8012c0c:	f99d 70d4 	ldrsb.w	r7, [sp, #212]	; 0xd4
 8012c10:	910b      	str	r1, [sp, #44]	; 0x2c
 8012c12:	bf38      	it	cc
 8012c14:	230c      	movcc	r3, #12
 8012c16:	454b      	cmp	r3, r9
 8012c18:	f200 82e5 	bhi.w	80131e6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x606>
 8012c1c:	b322      	cbz	r2, 8012c68 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x88>
        *cols_8b++ = PAD8;
 8012c1e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8012c20:	2a01      	cmp	r2, #1
 8012c22:	701f      	strb	r7, [r3, #0]
 8012c24:	f103 0c01 	add.w	ip, r3, #1
 8012c28:	d020      	beq.n	8012c6c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8012c2a:	2a02      	cmp	r2, #2
 8012c2c:	705f      	strb	r7, [r3, #1]
 8012c2e:	f103 0c02 	add.w	ip, r3, #2
 8012c32:	d01b      	beq.n	8012c6c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8012c34:	2a03      	cmp	r2, #3
 8012c36:	709f      	strb	r7, [r3, #2]
 8012c38:	f103 0c03 	add.w	ip, r3, #3
 8012c3c:	d016      	beq.n	8012c6c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8012c3e:	2a04      	cmp	r2, #4
 8012c40:	70df      	strb	r7, [r3, #3]
 8012c42:	f103 0c04 	add.w	ip, r3, #4
 8012c46:	d011      	beq.n	8012c6c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8012c48:	2a05      	cmp	r2, #5
 8012c4a:	711f      	strb	r7, [r3, #4]
 8012c4c:	f103 0c05 	add.w	ip, r3, #5
 8012c50:	d00c      	beq.n	8012c6c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8012c52:	2a07      	cmp	r2, #7
 8012c54:	715f      	strb	r7, [r3, #5]
 8012c56:	f103 0c06 	add.w	ip, r3, #6
 8012c5a:	f040 82c9 	bne.w	80131f0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x610>
 8012c5e:	719f      	strb	r7, [r3, #6]
 8012c60:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8012c64:	4690      	mov	r8, r2
 8012c66:	e002      	b.n	8012c6e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
 8012c68:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 8012c6c:	4690      	mov	r8, r2
 8012c6e:	2400      	movs	r4, #0
 8012c70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c72:	f10c 0001 	add.w	r0, ip, #1
 8012c76:	4625      	mov	r5, r4
 8012c78:	f367 0407 	bfi	r4, r7, #0, #8
 8012c7c:	eba3 0e02 	sub.w	lr, r3, r2
 8012c80:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8012c82:	4629      	mov	r1, r5
 8012c84:	f367 0507 	bfi	r5, r7, #0, #8
 8012c88:	f367 240f 	bfi	r4, r7, #8, #8
 8012c8c:	441a      	add	r2, r3
 8012c8e:	f367 250f 	bfi	r5, r7, #8, #8
 8012c92:	ea4f 06de 	mov.w	r6, lr, lsr #3
 8012c96:	f367 4417 	bfi	r4, r7, #16, #8
 8012c9a:	f367 4517 	bfi	r5, r7, #16, #8
 8012c9e:	f367 641f 	bfi	r4, r7, #24, #8
 8012ca2:	f367 651f 	bfi	r5, r7, #24, #8
 8012ca6:	3101      	adds	r1, #1
 8012ca8:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 8012caa:	3008      	adds	r0, #8
 8012cac:	428e      	cmp	r6, r1
 8012cae:	f103 0307 	add.w	r3, r3, #7
 8012cb2:	e9c2 4500 	strd	r4, r5, [r2]
 8012cb6:	f102 0208 	add.w	r2, r2, #8
 8012cba:	d8f4      	bhi.n	8012ca6 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xc6>
 8012cbc:	f02e 0107 	bic.w	r1, lr, #7
 8012cc0:	eb08 0201 	add.w	r2, r8, r1
 8012cc4:	4571      	cmp	r1, lr
 8012cc6:	eb0c 0001 	add.w	r0, ip, r1
 8012cca:	b292      	uxth	r2, r2
 8012ccc:	d05c      	beq.n	8012d88 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
    for(i = 0; i < input_x + 2; i++){
 8012cce:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8012cd0:	1c43      	adds	r3, r0, #1
 8012cd2:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 8012cd6:	b290      	uxth	r0, r2
 8012cd8:	4581      	cmp	r9, r0
 8012cda:	db55      	blt.n	8012d88 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
 8012cdc:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 8012cde:	701f      	strb	r7, [r3, #0]
 8012ce0:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 8012ce2:	b292      	uxth	r2, r2
 8012ce4:	4591      	cmp	r9, r2
 8012ce6:	db4e      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012ce8:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 8012cea:	705f      	strb	r7, [r3, #1]
 8012cec:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 8012cee:	b292      	uxth	r2, r2
 8012cf0:	4591      	cmp	r9, r2
 8012cf2:	db48      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012cf4:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 8012cf6:	709f      	strb	r7, [r3, #2]
 8012cf8:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8012cfa:	b292      	uxth	r2, r2
 8012cfc:	4591      	cmp	r9, r2
 8012cfe:	db42      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d00:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 8012d02:	70df      	strb	r7, [r3, #3]
 8012d04:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 8012d06:	b292      	uxth	r2, r2
 8012d08:	4591      	cmp	r9, r2
 8012d0a:	db3c      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d0c:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 8012d0e:	711f      	strb	r7, [r3, #4]
 8012d10:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 8012d12:	b292      	uxth	r2, r2
 8012d14:	4591      	cmp	r9, r2
 8012d16:	db36      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d18:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 8012d1a:	715f      	strb	r7, [r3, #5]
 8012d1c:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 8012d1e:	b292      	uxth	r2, r2
 8012d20:	4591      	cmp	r9, r2
 8012d22:	db30      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d24:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 8012d26:	719f      	strb	r7, [r3, #6]
 8012d28:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8012d2a:	b292      	uxth	r2, r2
 8012d2c:	4591      	cmp	r9, r2
 8012d2e:	db2a      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d30:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 8012d34:	71df      	strb	r7, [r3, #7]
 8012d36:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 8012d3a:	b292      	uxth	r2, r2
 8012d3c:	4591      	cmp	r9, r2
 8012d3e:	db22      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d40:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 8012d44:	721f      	strb	r7, [r3, #8]
 8012d46:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 8012d4a:	b292      	uxth	r2, r2
 8012d4c:	4591      	cmp	r9, r2
 8012d4e:	db1a      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d50:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 8012d54:	725f      	strb	r7, [r3, #9]
 8012d56:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 8012d5a:	b292      	uxth	r2, r2
 8012d5c:	4591      	cmp	r9, r2
 8012d5e:	db12      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d60:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 8012d64:	729f      	strb	r7, [r3, #10]
 8012d66:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 8012d6a:	b292      	uxth	r2, r2
 8012d6c:	4591      	cmp	r9, r2
 8012d6e:	db0a      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8012d70:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 8012d74:	72df      	strb	r7, [r3, #11]
 8012d76:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 8012d7a:	b292      	uxth	r2, r2
 8012d7c:	4591      	cmp	r9, r2
 8012d7e:	db02      	blt.n	8012d86 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
        *cols_8b++ = PAD8;
 8012d80:	731f      	strb	r7, [r3, #12]
 8012d82:	330d      	adds	r3, #13
 8012d84:	e000      	b.n	8012d88 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
 8012d86:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8012d88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d8a:	b192      	cbz	r2, 8012db2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1d2>
 8012d8c:	4614      	mov	r4, r2
 8012d8e:	2100      	movs	r1, #0
 8012d90:	461a      	mov	r2, r3
 8012d92:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012d94:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8012d96:	7017      	strb	r7, [r2, #0]
 8012d98:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 8012d9a:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8012d9c:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8012da0:	4284      	cmp	r4, r0
 8012da2:	d8f7      	bhi.n	8012d94 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1b4>
 8012da4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012da6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012da8:	3a01      	subs	r2, #1
 8012daa:	b292      	uxth	r2, r2
 8012dac:	fb02 1201 	mla	r2, r2, r1, r1
 8012db0:	4413      	add	r3, r2
 8012db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012db4:	f1a2 0113 	sub.w	r1, r2, #19
 8012db8:	f64f 72ea 	movw	r2, #65514	; 0xffea
 8012dbc:	4291      	cmp	r1, r2
 8012dbe:	f200 8208 	bhi.w	80131d2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5f2>
 8012dc2:	425a      	negs	r2, r3
 8012dc4:	f012 0203 	ands.w	r2, r2, #3
 8012dc8:	f000 81f0 	beq.w	80131ac <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5cc>
 8012dcc:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 8012dce:	701f      	strb	r7, [r3, #0]
 8012dd0:	f103 0501 	add.w	r5, r3, #1
 8012dd4:	f000 81eb 	beq.w	80131ae <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5ce>
 8012dd8:	2a03      	cmp	r2, #3
 8012dda:	705f      	strb	r7, [r3, #1]
 8012ddc:	f103 0502 	add.w	r5, r3, #2
 8012de0:	f040 81ff 	bne.w	80131e2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x602>
 8012de4:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8012de6:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 8012de8:	709f      	strb	r7, [r3, #2]
 8012dea:	2100      	movs	r1, #0
 8012dec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012dee:	4413      	add	r3, r2
 8012df0:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 8012df2:	460a      	mov	r2, r1
 8012df4:	f367 0107 	bfi	r1, r7, #0, #8
 8012df8:	08a0      	lsrs	r0, r4, #2
 8012dfa:	f367 210f 	bfi	r1, r7, #8, #8
 8012dfe:	f367 4117 	bfi	r1, r7, #16, #8
 8012e02:	f367 611f 	bfi	r1, r7, #24, #8
 8012e06:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8012e08:	f843 1b04 	str.w	r1, [r3], #4
 8012e0c:	4290      	cmp	r0, r2
 8012e0e:	d8fa      	bhi.n	8012e06 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x226>
 8012e10:	f024 0303 	bic.w	r3, r4, #3
 8012e14:	18f2      	adds	r2, r6, r3
 8012e16:	42a3      	cmp	r3, r4
 8012e18:	eb05 0003 	add.w	r0, r5, r3
 8012e1c:	b291      	uxth	r1, r2
 8012e1e:	d019      	beq.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
    for(i = 0; i < input_x + 2; i++){
 8012e20:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 8012e22:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 8012e24:	b293      	uxth	r3, r2
 8012e26:	4599      	cmp	r9, r3
 8012e28:	db14      	blt.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8012e2a:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 8012e2c:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	454b      	cmp	r3, r9
 8012e32:	dc0f      	bgt.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8012e34:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 8012e36:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	4599      	cmp	r9, r3
 8012e3c:	db0a      	blt.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8012e3e:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 8012e40:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	4599      	cmp	r9, r3
 8012e46:	db05      	blt.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8012e48:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 8012e4a:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	4599      	cmp	r9, r3
 8012e50:	db00      	blt.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
        *cols_8b++ = PAD8;
 8012e52:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 8012e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e56:	2c00      	cmp	r4, #0
 8012e58:	f000 81a4 	beq.w	80131a4 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5c4>
 8012e5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012e5e:	1e63      	subs	r3, r4, #1
 8012e60:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8012e62:	1e72      	subs	r2, r6, #1
 8012e64:	f006 0101 	and.w	r1, r6, #1
 8012e68:	f100 0a09 	add.w	sl, r0, #9
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	b292      	uxth	r2, r2
 8012e70:	f1c1 0102 	rsb	r1, r1, #2
 8012e74:	3301      	adds	r3, #1
{
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 8012e76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012e78:	1c50      	adds	r0, r2, #1
 8012e7a:	086f      	lsrs	r7, r5, #1
 8012e7c:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8012e80:	901a      	str	r0, [sp, #104]	; 0x68
 8012e82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012e84:	970f      	str	r7, [sp, #60]	; 0x3c
 8012e86:	4401      	add	r1, r0
 8012e88:	982b      	ldr	r0, [sp, #172]	; 0xac
 8012e8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012e8e:	4684      	mov	ip, r0
 8012e90:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012e92:	9319      	str	r3, [sp, #100]	; 0x64
 8012e94:	1cd3      	adds	r3, r2, #3
 8012e96:	46e1      	mov	r9, ip
 8012e98:	9116      	str	r1, [sp, #88]	; 0x58
 8012e9a:	931d      	str	r3, [sp, #116]	; 0x74
 8012e9c:	4623      	mov	r3, r4
 8012e9e:	fb00 f303 	mul.w	r3, r0, r3
 8012ea2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012ea4:	931c      	str	r3, [sp, #112]	; 0x70
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8012ea6:	1c8b      	adds	r3, r1, #2
 8012ea8:	9317      	str	r3, [sp, #92]	; 0x5c
 8012eaa:	00bb      	lsls	r3, r7, #2
 8012eac:	9312      	str	r3, [sp, #72]	; 0x48
 8012eae:	4673      	mov	r3, lr
 8012eb0:	fb04 f303 	mul.w	r3, r4, r3
 8012eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8012eb6:	f005 0301 	and.w	r3, r5, #1
 8012eba:	930e      	str	r3, [sp, #56]	; 0x38
 8012ebc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8012ebe:	4403      	add	r3, r0
 8012ec0:	931b      	str	r3, [sp, #108]	; 0x6c
 8012ec2:	4623      	mov	r3, r4
 8012ec4:	fb03 f305 	mul.w	r3, r3, r5
 8012ec8:	9310      	str	r3, [sp, #64]	; 0x40
 8012eca:	0073      	lsls	r3, r6, #1
 8012ecc:	9311      	str	r3, [sp, #68]	; 0x44
 8012ece:	0063      	lsls	r3, r4, #1
 8012ed0:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 8012ed2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ed4:	b1eb      	cbz	r3, 8012f12 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x332>
 8012ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ed8:	b1da      	cbz	r2, 8012f12 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x332>
 8012eda:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012edc:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 8012ede:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
        for(i = 0; i < input_y; i++){
 8012ee0:	4698      	mov	r8, r3
 8012ee2:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8012ee6:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 8012eea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012eec:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8012ef0:	eb04 000e 	add.w	r0, r4, lr
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8012ef8:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8012efc:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8012efe:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8012f02:	4282      	cmp	r2, r0
 8012f04:	d1f8      	bne.n	8012ef8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x318>
 8012f06:	3501      	adds	r5, #1
 8012f08:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 8012f0a:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 8012f0c:	b2ab      	uxth	r3, r5
 8012f0e:	4598      	cmp	r8, r3
 8012f10:	d8ee      	bhi.n	8012ef0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x310>
        depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8012f12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012f14:	f109 0904 	add.w	r9, r9, #4
 8012f18:	3304      	adds	r3, #4
 8012f1a:	9329      	str	r3, [sp, #164]	; 0xa4
 8012f1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012f1e:	3304      	adds	r3, #4
 8012f20:	932a      	str	r3, [sp, #168]	; 0xa8
    for (i = 0; i < output_y; i++) {
 8012f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 8134 	beq.w	8013192 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5b2>
 8012f2a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f32:	f8cd 90ac 	str.w	r9, [sp, #172]	; 0xac
 8012f36:	4681      	mov	r9, r0
 8012f38:	440a      	add	r2, r1
 8012f3a:	982b      	ldr	r0, [sp, #172]	; 0xac
 8012f3c:	9308      	str	r3, [sp, #32]
 8012f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8012f40:	9307      	str	r3, [sp, #28]
        for (j = 0; j < output_x / 2; j++) {
 8012f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f000 80b1 	beq.w	80130ac <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x4cc>
 8012f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f4c:	9908      	ldr	r1, [sp, #32]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012f4e:	902b      	str	r0, [sp, #172]	; 0xac
 8012f50:	fb01 2302 	mla	r3, r1, r2, r2
 8012f54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012f56:	eb09 0801 	add.w	r8, r9, r1
 8012f5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012f5c:	9303      	str	r3, [sp, #12]
 8012f5e:	1a9b      	subs	r3, r3, r2
 8012f60:	eb09 0e01 	add.w	lr, r9, r1
 8012f64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012f66:	9305      	str	r3, [sp, #20]
 8012f68:	4449      	add	r1, r9
 8012f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f6c:	9104      	str	r1, [sp, #16]
 8012f6e:	9301      	str	r3, [sp, #4]
 8012f70:	9a01      	ldr	r2, [sp, #4]
 8012f72:	f108 0804 	add.w	r8, r8, #4
 8012f76:	9903      	ldr	r1, [sp, #12]
 8012f78:	f10e 0e04 	add.w	lr, lr, #4
            q31_t sum0 = bias[0] + biasR[0];
 8012f7c:	982a      	ldr	r0, [sp, #168]	; 0xa8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012f7e:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 8012f80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
            sum0 += cols_8b[0]*ksrc[0];
 8012f82:	f91a 2c09 	ldrsb.w	r2, [sl, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 8012f86:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8012f8a:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8012f8c:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[1]*ksrc[1];
 8012f90:	f91a 4c08 	ldrsb.w	r4, [sl, #-8]
            q31_t sum0 = bias[0] + biasR[0];
 8012f94:	1858      	adds	r0, r3, r1
            sum0 += cols_8b[0]*ksrc[0];
 8012f96:	f999 1000 	ldrsb.w	r1, [r9]
            sum1 += cols_8b[2]*ksrc[0];
 8012f9a:	f999 5002 	ldrsb.w	r5, [r9, #2]
            sum0 += cols_8b[0]*ksrc[0];
 8012f9e:	fb11 0302 	smlabb	r3, r1, r2, r0
            sum0 += cols_8b[1]*ksrc[1];
 8012fa2:	f999 1001 	ldrsb.w	r1, [r9, #1]
            sum0 += cols_8b[2]*ksrc[2];
 8012fa6:	f91a bc07 	ldrsb.w	fp, [sl, #-7]
            sum1 += cols_8b[2]*ksrc[0];
 8012faa:	fb12 0005 	smlabb	r0, r2, r5, r0
            sum0 += cols_8b[1]*ksrc[1];
 8012fae:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum0 += cols_8b[0]*ksrc[3];
 8012fb2:	f91a 6c06 	ldrsb.w	r6, [sl, #-6]
            sum0 += cols_8b[1]*ksrc[4];
 8012fb6:	f91a 3c05 	ldrsb.w	r3, [sl, #-5]
            sum0 += cols_8b[2]*ksrc[2];
 8012fba:	fb15 150b 	smlabb	r5, r5, fp, r1
            sum0 += cols_8b[0]*ksrc[3];
 8012fbe:	f918 1c02 	ldrsb.w	r1, [r8, #-2]
            sum0 = (float) sum0 * *scales;
 8012fc2:	9f2b      	ldr	r7, [sp, #172]	; 0xac
            sum0 += cols_8b[0]*ksrc[3];
 8012fc4:	fb11 5506 	smlabb	r5, r1, r6, r5
            sum0 += cols_8b[1]*ksrc[4];
 8012fc8:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
            sum1 += cols_8b[2]*ksrc[3];
 8012fcc:	f998 c000 	ldrsb.w	ip, [r8]
            sum0 = (float) sum0 * *scales;
 8012fd0:	ed17 7a01 	vldr	s14, [r7, #-4]
            sum0 += cols_8b[1]*ksrc[4];
 8012fd4:	fb11 5103 	smlabb	r1, r1, r3, r5
            sum0 += cols_8b[2]*ksrc[5];
 8012fd8:	f91a 7c04 	ldrsb.w	r7, [sl, #-4]
            sum1 += cols_8b[3]*ksrc[1];
 8012fdc:	f999 2003 	ldrsb.w	r2, [r9, #3]
            sum0 += cols_8b[2]*ksrc[5];
 8012fe0:	fb1c 1107 	smlabb	r1, ip, r7, r1
            sum0 += cols_8b[0]*ksrc[6];
 8012fe4:	f91a 5c03 	ldrsb.w	r5, [sl, #-3]
            sum1 += cols_8b[3]*ksrc[1];
 8012fe8:	fb14 0202 	smlabb	r2, r4, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 8012fec:	f99e 4000 	ldrsb.w	r4, [lr]
            sum1 += cols_8b[4]*ksrc[2];
 8012ff0:	f919 0f04 	ldrsb.w	r0, [r9, #4]!
            sum0 += cols_8b[0]*ksrc[6];
 8012ff4:	fb14 1105 	smlabb	r1, r4, r5, r1
            sum0 += cols_8b[1]*ksrc[7];
 8012ff8:	f91a 4c02 	ldrsb.w	r4, [sl, #-2]
            sum1 += cols_8b[4]*ksrc[2];
 8012ffc:	fb1b 2200 	smlabb	r2, fp, r0, r2
            sum0 += cols_8b[1]*ksrc[7];
 8013000:	f99e 0001 	ldrsb.w	r0, [lr, #1]
            sum1 += cols_8b[2]*ksrc[6];
 8013004:	f99e b002 	ldrsb.w	fp, [lr, #2]
            sum0 += cols_8b[1]*ksrc[7];
 8013008:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[2]*ksrc[8];
 801300c:	f91a 0c01 	ldrsb.w	r0, [sl, #-1]
            sum1 += cols_8b[2]*ksrc[3];
 8013010:	fb16 220c 	smlabb	r2, r6, ip, r2
            sum1 += cols_8b[3]*ksrc[4];
 8013014:	f998 6001 	ldrsb.w	r6, [r8, #1]
            sum0 += cols_8b[2]*ksrc[8];
 8013018:	fb1b 1c00 	smlabb	ip, fp, r0, r1
            sum1 += cols_8b[3]*ksrc[4];
 801301c:	fb13 2206 	smlabb	r2, r3, r6, r2
            sum1 += cols_8b[4]*ksrc[5];
 8013020:	f998 6002 	ldrsb.w	r6, [r8, #2]
            sum0 += cols_8b[2]*ksrc[8];
 8013024:	ee07 ca90 	vmov	s15, ip
            sum1 += cols_8b[3]*ksrc[7];
 8013028:	f99e c003 	ldrsb.w	ip, [lr, #3]
            sum1 += cols_8b[4]*ksrc[5];
 801302c:	fb17 2706 	smlabb	r7, r7, r6, r2
            sum1 += cols_8b[4]*ksrc[8];
 8013030:	f99e 1004 	ldrsb.w	r1, [lr, #4]
            sum0 = (float) sum0 * *scales;
 8013034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8013038:	9a01      	ldr	r2, [sp, #4]
            sum1 += cols_8b[2]*ksrc[6];
 801303a:	fb15 770b 	smlabb	r7, r5, fp, r7
            sum0 = (float) sum0 * *scales;
 801303e:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[3]*ksrc[7];
 8013042:	fb14 770c 	smlabb	r7, r4, ip, r7
            sum1 += cols_8b[4]*ksrc[8];
 8013046:	fb10 7701 	smlabb	r7, r0, r1, r7
            sum0 += output_offset;
 801304a:	982c      	ldr	r0, [sp, #176]	; 0xb0
            sum0 = (float) sum0 * *scales;
 801304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013050:	9902      	ldr	r1, [sp, #8]
            sum0 = (float) sum0 * *scales;
 8013052:	ee17 3a90 	vmov	r3, s15
            sum1 = (float) sum1 * *scales;
 8013056:	ee07 7a90 	vmov	s15, r7
            sum0 += output_offset;
 801305a:	4403      	add	r3, r0
            sum0 = TN_MAX(sum0, activation_min);
 801305c:	982e      	ldr	r0, [sp, #184]	; 0xb8
            sum1 = (float) sum1 * *scales;
 801305e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = TN_MAX(sum0, activation_min);
 8013062:	4283      	cmp	r3, r0
 8013064:	bfb8      	it	lt
 8013066:	4603      	movlt	r3, r0
            sum0 = TN_MIN(sum0, activation_max);
 8013068:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801306a:	4283      	cmp	r3, r0
 801306c:	bfa8      	it	ge
 801306e:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013070:	9805      	ldr	r0, [sp, #20]
 8013072:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 8013074:	9b2b      	ldr	r3, [sp, #172]	; 0xac
            sum1 += output_offset;
 8013076:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum1 = (float) sum1 * *scales;
 8013078:	ed13 7a01 	vldr	s14, [r3, #-4]
 801307c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013084:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8013088:	440b      	add	r3, r1
            sum1 = TN_MAX(sum1, activation_min);
 801308a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801308c:	428b      	cmp	r3, r1
 801308e:	bfb8      	it	lt
 8013090:	460b      	movlt	r3, r1
            sum1 = TN_MIN(sum1, activation_max);
 8013092:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8013094:	428b      	cmp	r3, r1
 8013096:	bfa8      	it	ge
 8013098:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801309a:	7013      	strb	r3, [r2, #0]
 801309c:	9b06      	ldr	r3, [sp, #24]
 801309e:	18d3      	adds	r3, r2, r3
 80130a0:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 80130a2:	9b04      	ldr	r3, [sp, #16]
 80130a4:	4599      	cmp	r9, r3
 80130a6:	f47f af63 	bne.w	8012f70 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x390>
 80130aa:	982b      	ldr	r0, [sp, #172]	; 0xac
 80130ac:	9b07      	ldr	r3, [sp, #28]
        if (output_x & 1) {
 80130ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130b0:	3301      	adds	r3, #1
 80130b2:	9307      	str	r3, [sp, #28]
 80130b4:	2a00      	cmp	r2, #0
 80130b6:	d07c      	beq.n	80131b2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5d2>
            q31_t sum = bias[0] + biasR[0];
 80130b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80130ba:	9c08      	ldr	r4, [sp, #32]
 80130bc:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80130c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80130c2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80130c4:	442c      	add	r4, r5
            sum += cols_8b[1]*ksrc[1];
 80130c6:	f91a cc08 	ldrsb.w	ip, [sl, #-8]
            q31_t sum = bias[0] + biasR[0];
 80130ca:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80130ce:	9408      	str	r4, [sp, #32]
 80130d0:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 80130d2:	f999 4000 	ldrsb.w	r4, [r9]
 80130d6:	f91a 2c09 	ldrsb.w	r2, [sl, #-9]
            sum += cols_8b[1]*ksrc[1];
 80130da:	f999 5001 	ldrsb.w	r5, [r9, #1]
            sum += cols_8b[0]*ksrc[0];
 80130de:	fb14 3302 	smlabb	r3, r4, r2, r3
            cols_8b += column_x + 2;
 80130e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            sum = (float) sum * *scales;
 80130e4:	ed10 7a01 	vldr	s14, [r0, #-4]
            sum += cols_8b[1]*ksrc[1];
 80130e8:	fb15 330c 	smlabb	r3, r5, ip, r3
            sum += cols_8b[2]*ksrc[2];
 80130ec:	f999 5002 	ldrsb.w	r5, [r9, #2]
            cols_8b += column_x + 2;
 80130f0:	eb09 0106 	add.w	r1, r9, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80130f4:	e9dd 2409 	ldrd	r2, r4, [sp, #36]	; 0x24
            cols_8b += column_x + 2;
 80130f8:	198f      	adds	r7, r1, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80130fa:	eba2 0e04 	sub.w	lr, r2, r4
 80130fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013100:	4422      	add	r2, r4
            sum += cols_8b[2]*ksrc[2];
 8013102:	f91a 4c07 	ldrsb.w	r4, [sl, #-7]
 8013106:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 801310a:	f919 5006 	ldrsb.w	r5, [r9, r6]
 801310e:	f91a 4c06 	ldrsb.w	r4, [sl, #-6]
            sum += cols_8b[0]*ksrc[6];
 8013112:	f919 6016 	ldrsb.w	r6, [r9, r6, lsl #1]
            sum += cols_8b[0]*ksrc[3];
 8013116:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 801311a:	f991 4001 	ldrsb.w	r4, [r1, #1]
 801311e:	f91a 5c05 	ldrsb.w	r5, [sl, #-5]
            sum += cols_8b[2]*ksrc[5];
 8013122:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 8013126:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 801312a:	f91a 4c04 	ldrsb.w	r4, [sl, #-4]
 801312e:	9209      	str	r2, [sp, #36]	; 0x24
 8013130:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 8013134:	f91a 3c03 	ldrsb.w	r3, [sl, #-3]
            sum += cols_8b[2]*ksrc[8];
 8013138:	f997 4002 	ldrsb.w	r4, [r7, #2]
            sum += cols_8b[0]*ksrc[6];
 801313c:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 8013140:	f91a 3c02 	ldrsb.w	r3, [sl, #-2]
 8013144:	f997 6001 	ldrsb.w	r6, [r7, #1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8013148:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            sum += cols_8b[1]*ksrc[7];
 801314a:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 801314e:	f91a 3c01 	ldrsb.w	r3, [sl, #-1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8013152:	4491      	add	r9, r2
            sum += output_offset;
 8013154:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            sum += cols_8b[2]*ksrc[8];
 8013156:	fb14 1103 	smlabb	r1, r4, r3, r1
            sum = (float) sum * *scales;
 801315a:	ee07 1a90 	vmov	s15, r1
 801315e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801316a:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 801316e:	4413      	add	r3, r2
            sum = TN_MAX(sum, activation_min);
 8013170:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013172:	4293      	cmp	r3, r2
 8013174:	bfb8      	it	lt
 8013176:	4613      	movlt	r3, r2
            sum = TN_MIN(sum, activation_max);
 8013178:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801317a:	4293      	cmp	r3, r2
 801317c:	bfa8      	it	ge
 801317e:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013180:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013182:	f80e 3002 	strb.w	r3, [lr, r2]
    for (i = 0; i < output_y; i++) {
 8013186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013188:	9b07      	ldr	r3, [sp, #28]
 801318a:	429a      	cmp	r2, r3
 801318c:	f47f aed9 	bne.w	8012f42 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x362>
 8013190:	4681      	mov	r9, r0
        input++;
 8013192:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013194:	f10a 0a09 	add.w	sl, sl, #9
 8013198:	3301      	adds	r3, #1
 801319a:	9314      	str	r3, [sp, #80]	; 0x50
    for (c = 0; c < input_ch; c++){
 801319c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801319e:	4599      	cmp	r9, r3
 80131a0:	f47f ae97 	bne.w	8012ed2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x2f2>
}
 80131a4:	2000      	movs	r0, #0
 80131a6:	b01f      	add	sp, #124	; 0x7c
 80131a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 80131ac:	461d      	mov	r5, r3
 80131ae:	4616      	mov	r6, r2
 80131b0:	e61b      	b.n	8012dea <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x20a>
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 80131b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80131b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80131b6:	4499      	add	r9, r3
 80131b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ba:	4413      	add	r3, r2
 80131bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131be:	9309      	str	r3, [sp, #36]	; 0x24
 80131c0:	9b08      	ldr	r3, [sp, #32]
 80131c2:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 80131c4:	9a07      	ldr	r2, [sp, #28]
 80131c6:	9308      	str	r3, [sp, #32]
 80131c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131ca:	4293      	cmp	r3, r2
 80131cc:	f47f aeb9 	bne.w	8012f42 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x362>
 80131d0:	e7de      	b.n	8013190 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5b0>
    for(i = 0; i < input_x + 2; i++){
 80131d2:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 80131d4:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 80131d8:	1aca      	subs	r2, r1, r3
 80131da:	b292      	uxth	r2, r2
 80131dc:	4591      	cmp	r9, r2
 80131de:	daf9      	bge.n	80131d4 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5f4>
 80131e0:	e638      	b.n	8012e54 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 80131e2:	2602      	movs	r6, #2
 80131e4:	e601      	b.n	8012dea <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x20a>
        *cols_8b++ = PAD8;
 80131e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    for(i = 0; i < input_x + 2; i++){
 80131e8:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 80131ea:	701f      	strb	r7, [r3, #0]
 80131ec:	3301      	adds	r3, #1
 80131ee:	e575      	b.n	8012cdc <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xfc>
    for(i = 0; i < input_x + 2; i++){
 80131f0:	f04f 0806 	mov.w	r8, #6
 80131f4:	e53b      	b.n	8012c6e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
 80131f6:	bf00      	nop

080131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>:
            const int32_t output_offset, const int32_t input_offset,
            const int32_t output_activation_min,
            const int32_t output_activation_max, q7_t *output, q7_t *output_mask,
            const uint16_t output_x, const uint16_t output_y,
            const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 80131f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	b0a1      	sub	sp, #132	; 0x84

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 80131fe:	1ccf      	adds	r7, r1, #3
{
 8013200:	930f      	str	r3, [sp, #60]	; 0x3c
 8013202:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8013204:	9111      	str	r1, [sp, #68]	; 0x44
 8013206:	1c99      	adds	r1, r3, #2
 8013208:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 801320c:	921a      	str	r2, [sp, #104]	; 0x68
    for(i = 0; i < input_x + 4; i++){
 801320e:	2200      	movs	r2, #0
{
 8013210:	9310      	str	r3, [sp, #64]	; 0x40
 8013212:	f8bd c0d0 	ldrh.w	ip, [sp, #208]	; 0xd0
 8013216:	f99d 30e0 	ldrsb.w	r3, [sp, #224]	; 0xe0
 801321a:	9006      	str	r0, [sp, #24]
    for(i = 0; i < input_x + 4; i++){
 801321c:	3201      	adds	r2, #1
 801321e:	460e      	mov	r6, r1
        *cols_8b++ = PAD8;
 8013220:	f801 3c02 	strb.w	r3, [r1, #-2]
 8013224:	3102      	adds	r1, #2
    for(i = 0; i < input_x + 4; i++){
 8013226:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8013228:	f801 3c03 	strb.w	r3, [r1, #-3]
    for(i = 0; i < input_x + 4; i++){
 801322c:	42ba      	cmp	r2, r7
 801322e:	ddf5      	ble.n	801321c <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x24>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8013230:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013232:	b1b8      	cbz	r0, 8013264 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x6c>
 8013234:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013236:	4632      	mov	r2, r6
 8013238:	2100      	movs	r1, #0
 801323a:	4680      	mov	r8, r0
 801323c:	1d25      	adds	r5, r4, #4
 801323e:	46a6      	mov	lr, r4
 8013240:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8013242:	7013      	strb	r3, [r2, #0]
        *cols_8b++ = PAD8;//left
 8013244:	7053      	strb	r3, [r2, #1]
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8013246:	eb02 040e 	add.w	r4, r2, lr
    for(i = 0; i < input_y; i++){
 801324a:	b288      	uxth	r0, r1
 801324c:	442a      	add	r2, r5
        *cols_8b++ = PAD8;//right
 801324e:	70a3      	strb	r3, [r4, #2]
    for(i = 0; i < input_y; i++){
 8013250:	4580      	cmp	r8, r0
        *cols_8b++ = PAD8;//right
 8013252:	f802 3c01 	strb.w	r3, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8013256:	d8f3      	bhi.n	8013240 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x48>
 8013258:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801325a:	3a01      	subs	r2, #1
 801325c:	b292      	uxth	r2, r2
 801325e:	fb02 5505 	mla	r5, r2, r5, r5
 8013262:	442e      	add	r6, r5
 8013264:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013266:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801326a:	1fa1      	subs	r1, r4, #6
 801326c:	4291      	cmp	r1, r2
 801326e:	f200 8322 	bhi.w	80138b6 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x6be>
 8013272:	2000      	movs	r0, #0
 8013274:	1d25      	adds	r5, r4, #4
 8013276:	4631      	mov	r1, r6
 8013278:	4602      	mov	r2, r0
 801327a:	f363 0007 	bfi	r0, r3, #0, #8
 801327e:	086c      	lsrs	r4, r5, #1
 8013280:	f363 200f 	bfi	r0, r3, #8, #8
 8013284:	f363 4017 	bfi	r0, r3, #16, #8
 8013288:	f363 601f 	bfi	r0, r3, #24, #8
 801328c:	3201      	adds	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
        *cols_8b++ = PAD8;
 801328e:	f841 0b04 	str.w	r0, [r1], #4
 8013292:	42a2      	cmp	r2, r4
 8013294:	d3fa      	bcc.n	801328c <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x94>
 8013296:	f025 0201 	bic.w	r2, r5, #1
 801329a:	42aa      	cmp	r2, r5
 801329c:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 80132a0:	d002      	beq.n	80132a8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xb0>
 80132a2:	f806 3012 	strb.w	r3, [r6, r2, lsl #1]
        *cols_8b++ = PAD8;
 80132a6:	704b      	strb	r3, [r1, #1]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 80132a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80132aa:	2900      	cmp	r1, #0
 80132ac:	f000 82ea 	beq.w	8013884 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x68c>
 80132b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80132b2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80132b6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
    #define STRIDE 1
    int i, j;
    q7_t mask_value;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 80132b8:	ea4f 055c 	mov.w	r5, ip, lsr #1
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 80132bc:	0044      	lsls	r4, r0, #1
 80132be:	1e43      	subs	r3, r0, #1
 80132c0:	f106 0e19 	add.w	lr, r6, #25
 80132c4:	fb01 f202 	mul.w	r2, r1, r2
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	1826      	adds	r6, r4, r0
 80132cc:	9415      	str	r4, [sp, #84]	; 0x54
 80132ce:	3409      	adds	r4, #9
 80132d0:	921b      	str	r2, [sp, #108]	; 0x6c
            sum += cols_8b[0]*ksrc[0];
            sum += cols_8b[1]*ksrc[1];
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            cols_8b += column_x + 4;
 80132d2:	46f2      	mov	sl, lr
 80132d4:	941f      	str	r4, [sp, #124]	; 0x7c
 80132d6:	1c5c      	adds	r4, r3, #1
 80132d8:	3305      	adds	r3, #5
        for (j = 0; j < output_x / 2; j++) {
 80132da:	9513      	str	r5, [sp, #76]	; 0x4c
 80132dc:	fb04 f201 	mul.w	r2, r4, r1
 80132e0:	931e      	str	r3, [sp, #120]	; 0x78
 80132e2:	006b      	lsls	r3, r5, #1
 80132e4:	921c      	str	r2, [sp, #112]	; 0x70
 80132e6:	f00c 0201 	and.w	r2, ip, #1
 80132ea:	9316      	str	r3, [sp, #88]	; 0x58
 80132ec:	004b      	lsls	r3, r1, #1
 80132ee:	9212      	str	r2, [sp, #72]	; 0x48
 80132f0:	9309      	str	r3, [sp, #36]	; 0x24
    for (c = 0; c < input_ch; c++){
 80132f2:	2300      	movs	r3, #0
 80132f4:	fb01 f20c 	mul.w	r2, r1, ip
 80132f8:	9319      	str	r3, [sp, #100]	; 0x64
            cols_8b += column_x + 4;
 80132fa:	1d03      	adds	r3, r0, #4
 80132fc:	9214      	str	r2, [sp, #80]	; 0x50
 80132fe:	0082      	lsls	r2, r0, #2
 8013300:	9618      	str	r6, [sp, #96]	; 0x60
 8013302:	941d      	str	r4, [sp, #116]	; 0x74
 8013304:	9217      	str	r2, [sp, #92]	; 0x5c
 8013306:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8013308:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801330a:	b1eb      	cbz	r3, 8013348 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x150>
 801330c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801330e:	b1da      	cbz	r2, 8013348 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x150>
 8013310:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8013312:	2500      	movs	r5, #0
 8013314:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8013316:	4698      	mov	r8, r3
 8013318:	9e06      	ldr	r6, [sp, #24]
 801331a:	1854      	adds	r4, r2, r1
 801331c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801331e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8013322:	e9dd ce1c 	ldrd	ip, lr, [sp, #112]	; 0x70
 8013326:	eb04 000e 	add.w	r0, r4, lr
 801332a:	4622      	mov	r2, r4
 801332c:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 801332e:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8013332:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8013334:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8013338:	4290      	cmp	r0, r2
 801333a:	d1f8      	bne.n	801332e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x136>
 801333c:	3501      	adds	r5, #1
 801333e:	4466      	add	r6, ip
 8013340:	444c      	add	r4, r9
        for(i = 0; i < input_y; i++){
 8013342:	b2ab      	uxth	r3, r5
 8013344:	4598      	cmp	r8, r3
 8013346:	d8ee      	bhi.n	8013326 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x12e>
        if (c % 8 == 0 && c > 1) output_mask++;
 8013348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801334a:	2a01      	cmp	r2, #1
 801334c:	f002 0307 	and.w	r3, r2, #7
 8013350:	d903      	bls.n	801335a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x162>
 8013352:	b913      	cbnz	r3, 801335a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x162>
 8013354:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8013356:	3201      	adds	r2, #1
 8013358:	9233      	str	r2, [sp, #204]	; 0xcc
        depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801335a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801335c:	3204      	adds	r2, #4
 801335e:	922b      	str	r2, [sp, #172]	; 0xac
 8013360:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013362:	3204      	adds	r2, #4
 8013364:	922c      	str	r2, [sp, #176]	; 0xb0
 8013366:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013368:	3204      	adds	r2, #4
 801336a:	922d      	str	r2, [sp, #180]	; 0xb4
    for (i = 0; i < output_y; i++) {
 801336c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801336e:	2a00      	cmp	r2, #0
 8013370:	f000 827b 	beq.w	801386a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x672>
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013374:	2201      	movs	r2, #1
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013376:	f8dd b0dc 	ldr.w	fp, [sp, #220]	; 0xdc
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801337a:	fa02 f303 	lsl.w	r3, r2, r3
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801337e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013380:	46dc      	mov	ip, fp
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013382:	b2db      	uxtb	r3, r3
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013384:	920d      	str	r2, [sp, #52]	; 0x34
 8013386:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013388:	930a      	str	r3, [sp, #40]	; 0x28
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 801338a:	43db      	mvns	r3, r3
 801338c:	920b      	str	r2, [sp, #44]	; 0x2c
    for (i = 0; i < output_y; i++) {
 801338e:	2200      	movs	r2, #0
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013390:	b2db      	uxtb	r3, r3
    for (i = 0; i < output_y; i++) {
 8013392:	920c      	str	r2, [sp, #48]	; 0x30
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013394:	9307      	str	r3, [sp, #28]
        for (j = 0; j < output_x / 2; j++) {
 8013396:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013398:	2b00      	cmp	r3, #0
 801339a:	f000 8183 	beq.w	80136a4 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x4ac>
 801339e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80133a2:	eb0c 0803 	add.w	r8, ip, r3
 80133a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133a8:	eb0c 0e03 	add.w	lr, ip, r3
 80133ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80133ae:	4463      	add	r3, ip
 80133b0:	9301      	str	r3, [sp, #4]
 80133b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133b4:	eb0c 0703 	add.w	r7, ip, r3
 80133b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133ba:	1a9a      	subs	r2, r3, r2
 80133bc:	9304      	str	r3, [sp, #16]
 80133be:	9702      	str	r7, [sp, #8]
 80133c0:	9203      	str	r2, [sp, #12]
 80133c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80133c4:	4462      	add	r2, ip
 80133c6:	9208      	str	r2, [sp, #32]
 80133c8:	e04b      	b.n	8013462 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x26a>
 80133ca:	9903      	ldr	r1, [sp, #12]
 80133cc:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80133ce:	10ca      	asrs	r2, r1, #3
 80133d0:	eb00 0b02 	add.w	fp, r0, r2
            if (sum0 > activation_max){
 80133d4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80133d6:	4298      	cmp	r0, r3
 80133d8:	f2c0 815f 	blt.w	801369a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x4a2>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80133dc:	9806      	ldr	r0, [sp, #24]
 80133de:	5443      	strb	r3, [r0, r1]
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 80133e0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80133e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133e4:	5c9b      	ldrb	r3, [r3, r2]
 80133e6:	430b      	orrs	r3, r1
 80133e8:	9933      	ldr	r1, [sp, #204]	; 0xcc
 80133ea:	548b      	strb	r3, [r1, r2]
            sum1 = (float) sum1 * *scales;
 80133ec:	ee07 6a90 	vmov	s15, r6
 80133f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
            sum1 += output_offset;
 80133f2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum1 = (float) sum1 * *scales;
 80133f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133f8:	ed13 7a01 	vldr	s14, [r3, #-4]
 80133fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013404:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8013408:	4413      	add	r3, r2
            if (sum1 < activation_min){
 801340a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801340c:	429a      	cmp	r2, r3
 801340e:	f340 8133 	ble.w	8013678 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x480>
 8013412:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8013414:	4619      	mov	r1, r3
 8013416:	9b04      	ldr	r3, [sp, #16]
 8013418:	eb01 02e3 	add.w	r2, r1, r3, asr #3
            if (sum1 > activation_max){
 801341c:	e9dd 1030 	ldrd	r1, r0, [sp, #192]	; 0xc0
 8013420:	4281      	cmp	r1, r0
 8013422:	f300 8124 	bgt.w	801366e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x476>
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8013426:	9806      	ldr	r0, [sp, #24]
 8013428:	54c1      	strb	r1, [r0, r3]
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801342a:	7813      	ldrb	r3, [r2, #0]
 801342c:	9907      	ldr	r1, [sp, #28]
 801342e:	400b      	ands	r3, r1
 8013430:	7013      	strb	r3, [r2, #0]
 8013432:	9a04      	ldr	r2, [sp, #16]
 8013434:	9b01      	ldr	r3, [sp, #4]
 8013436:	4611      	mov	r1, r2
 8013438:	9a03      	ldr	r2, [sp, #12]
            cols_8b_iterptr += STRIDE * 2;
 801343a:	f10c 0c02 	add.w	ip, ip, #2
 801343e:	3302      	adds	r3, #2
 8013440:	f108 0802 	add.w	r8, r8, #2
 8013444:	f10e 0e02 	add.w	lr, lr, #2
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	9b02      	ldr	r3, [sp, #8]
 801344c:	3302      	adds	r3, #2
 801344e:	9302      	str	r3, [sp, #8]
 8013450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013452:	4419      	add	r1, r3
 8013454:	441a      	add	r2, r3
        for (j = 0; j < output_x / 2; j++) {
 8013456:	9b08      	ldr	r3, [sp, #32]
 8013458:	9104      	str	r1, [sp, #16]
 801345a:	459c      	cmp	ip, r3
 801345c:	9203      	str	r2, [sp, #12]
 801345e:	f000 8121 	beq.w	80136a4 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x4ac>
            q31_t sum0 = bias[0] + biasR[0];
 8013462:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013464:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013466:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801346a:	f852 2c04 	ldr.w	r2, [r2, #-4]
            sum0 += cols_8b[0]*ksrc[0];
 801346e:	f91a 4c19 	ldrsb.w	r4, [sl, #-25]
            q31_t sum0 = bias[0] + biasR[0];
 8013472:	441a      	add	r2, r3
            sum0 += cols_8b[0]*ksrc[0];
 8013474:	f99c 0000 	ldrsb.w	r0, [ip]
            sum1 += cols_8b[1]*ksrc[0];
 8013478:	f99c 5001 	ldrsb.w	r5, [ip, #1]
            sum0 += cols_8b[1]*ksrc[1];
 801347c:	f91a 1c18 	ldrsb.w	r1, [sl, #-24]
            sum0 += cols_8b[0]*ksrc[0];
 8013480:	fb10 2004 	smlabb	r0, r0, r4, r2
            sum1 += cols_8b[2]*ksrc[1];
 8013484:	f99c 6002 	ldrsb.w	r6, [ip, #2]
            sum1 += cols_8b[1]*ksrc[0];
 8013488:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum0 += cols_8b[1]*ksrc[1];
 801348c:	fb15 0001 	smlabb	r0, r5, r1, r0
            sum0 += cols_8b[2]*ksrc[2];
 8013490:	f91a 4c17 	ldrsb.w	r4, [sl, #-23]
            sum1 += cols_8b[3]*ksrc[2];
 8013494:	f99c 5003 	ldrsb.w	r5, [ip, #3]
            sum1 += cols_8b[2]*ksrc[1];
 8013498:	fb11 2206 	smlabb	r2, r1, r6, r2
            sum0 += cols_8b[2]*ksrc[2];
 801349c:	fb16 0004 	smlabb	r0, r6, r4, r0
            sum0 += cols_8b[3]*ksrc[3];
 80134a0:	f91a 6c16 	ldrsb.w	r6, [sl, #-22]
            sum1 += cols_8b[3]*ksrc[2];
 80134a4:	fb14 2105 	smlabb	r1, r4, r5, r2
            sum1 += cols_8b[4]*ksrc[3];
 80134a8:	f99c 3004 	ldrsb.w	r3, [ip, #4]
            sum0 += cols_8b[3]*ksrc[3];
 80134ac:	fb15 0006 	smlabb	r0, r5, r6, r0
            sum0 += cols_8b[4]*ksrc[4];
 80134b0:	f91a 5c15 	ldrsb.w	r5, [sl, #-21]
            sum1 += cols_8b[4]*ksrc[3];
 80134b4:	fb16 1403 	smlabb	r4, r6, r3, r1
            sum0 += cols_8b[0]*ksrc[5];
 80134b8:	f91a 2c14 	ldrsb.w	r2, [sl, #-20]
            sum0 += cols_8b[4]*ksrc[4];
 80134bc:	fb13 0305 	smlabb	r3, r3, r5, r0
            sum0 += cols_8b[0]*ksrc[5];
 80134c0:	f998 1004 	ldrsb.w	r1, [r8, #4]
            sum1 += cols_8b[1]*ksrc[5];
 80134c4:	f998 0005 	ldrsb.w	r0, [r8, #5]
            sum0 += cols_8b[1]*ksrc[6];
 80134c8:	f91a bc13 	ldrsb.w	fp, [sl, #-19]
            sum0 += cols_8b[0]*ksrc[5];
 80134cc:	fb11 3302 	smlabb	r3, r1, r2, r3
            sum1 += cols_8b[5]*ksrc[4];
 80134d0:	f99c 1005 	ldrsb.w	r1, [ip, #5]
            sum1 += cols_8b[2]*ksrc[6];
 80134d4:	f998 9006 	ldrsb.w	r9, [r8, #6]
            sum0 += cols_8b[1]*ksrc[6];
 80134d8:	fb10 330b 	smlabb	r3, r0, fp, r3
            sum0 += cols_8b[2]*ksrc[7];
 80134dc:	f91a 6c12 	ldrsb.w	r6, [sl, #-18]
            sum1 += cols_8b[5]*ksrc[4];
 80134e0:	fb15 4101 	smlabb	r1, r5, r1, r4
            sum1 += cols_8b[3]*ksrc[7];
 80134e4:	f998 5007 	ldrsb.w	r5, [r8, #7]
            sum0 += cols_8b[3]*ksrc[8];
 80134e8:	f91a 4c11 	ldrsb.w	r4, [sl, #-17]
            sum0 += cols_8b[2]*ksrc[7];
 80134ec:	fb19 3306 	smlabb	r3, r9, r6, r3
            sum1 += cols_8b[1]*ksrc[5];
 80134f0:	fb12 1200 	smlabb	r2, r2, r0, r1
            sum1 += cols_8b[4]*ksrc[8];
 80134f4:	f998 0008 	ldrsb.w	r0, [r8, #8]
            sum0 += cols_8b[4]*ksrc[9];
 80134f8:	f91a 1c10 	ldrsb.w	r1, [sl, #-16]
            sum0 += cols_8b[3]*ksrc[8];
 80134fc:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[2]*ksrc[6];
 8013500:	fb1b 2209 	smlabb	r2, fp, r9, r2
            sum0 += cols_8b[0]*ksrc[10];
 8013504:	f91a bc0f 	ldrsb.w	fp, [sl, #-15]
            sum0 += cols_8b[4]*ksrc[9];
 8013508:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum0 += cols_8b[0]*ksrc[10];
 801350c:	f99e 9008 	ldrsb.w	r9, [lr, #8]
            sum1 += cols_8b[3]*ksrc[7];
 8013510:	fb16 2205 	smlabb	r2, r6, r5, r2
            sum1 += cols_8b[1]*ksrc[10];
 8013514:	f99e 6009 	ldrsb.w	r6, [lr, #9]
            sum0 += cols_8b[0]*ksrc[10];
 8013518:	fb19 330b 	smlabb	r3, r9, fp, r3
            sum0 += cols_8b[1]*ksrc[11];
 801351c:	f91a 9c0e 	ldrsb.w	r9, [sl, #-14]
            sum1 += cols_8b[4]*ksrc[8];
 8013520:	fb14 2200 	smlabb	r2, r4, r0, r2
            sum1 += cols_8b[5]*ksrc[9];
 8013524:	f998 0009 	ldrsb.w	r0, [r8, #9]
            sum1 += cols_8b[2]*ksrc[11];
 8013528:	f99e 400a 	ldrsb.w	r4, [lr, #10]
            sum0 += cols_8b[1]*ksrc[11];
 801352c:	fb16 3309 	smlabb	r3, r6, r9, r3
            sum0 += cols_8b[2]*ksrc[12];
 8013530:	f91a 5c0d 	ldrsb.w	r5, [sl, #-13]
            sum1 += cols_8b[5]*ksrc[9];
 8013534:	fb11 2200 	smlabb	r2, r1, r0, r2
            sum1 += cols_8b[3]*ksrc[12];
 8013538:	f99e 000b 	ldrsb.w	r0, [lr, #11]
            sum0 += cols_8b[2]*ksrc[12];
 801353c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum0 += cols_8b[3]*ksrc[13];
 8013540:	f91a 1c0c 	ldrsb.w	r1, [sl, #-12]
            sum1 += cols_8b[1]*ksrc[10];
 8013544:	fb1b 2206 	smlabb	r2, fp, r6, r2
            sum0 += cols_8b[0]*ksrc[15];
 8013548:	9f01      	ldr	r7, [sp, #4]
            sum1 += cols_8b[4]*ksrc[13];
 801354a:	f99e b00c 	ldrsb.w	fp, [lr, #12]
            sum0 += cols_8b[3]*ksrc[13];
 801354e:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum0 += cols_8b[4]*ksrc[14];
 8013552:	f91a 6c0b 	ldrsb.w	r6, [sl, #-11]
            sum1 += cols_8b[2]*ksrc[11];
 8013556:	fb19 2204 	smlabb	r2, r9, r4, r2
            sum0 = (float) sum0 * *scales;
 801355a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
            sum0 += cols_8b[0]*ksrc[15];
 801355c:	f997 900c 	ldrsb.w	r9, [r7, #12]
            sum0 += cols_8b[4]*ksrc[14];
 8013560:	fb1b 3306 	smlabb	r3, fp, r6, r3
            sum0 = (float) sum0 * *scales;
 8013564:	ed14 7a01 	vldr	s14, [r4, #-4]
            sum1 += cols_8b[3]*ksrc[12];
 8013568:	fb15 2200 	smlabb	r2, r5, r0, r2
            sum0 += cols_8b[0]*ksrc[15];
 801356c:	f91a 4c0a 	ldrsb.w	r4, [sl, #-10]
            sum1 += cols_8b[1]*ksrc[15];
 8013570:	463d      	mov	r5, r7
 8013572:	f997 000d 	ldrsb.w	r0, [r7, #13]
            sum1 += cols_8b[4]*ksrc[13];
 8013576:	fb11 220b 	smlabb	r2, r1, fp, r2
            sum0 += cols_8b[0]*ksrc[15];
 801357a:	fb19 3304 	smlabb	r3, r9, r4, r3
            sum1 += cols_8b[5]*ksrc[14];
 801357e:	f99e 100d 	ldrsb.w	r1, [lr, #13]
            sum0 += cols_8b[1]*ksrc[16];
 8013582:	f91a 9c09 	ldrsb.w	r9, [sl, #-9]
            sum1 += cols_8b[2]*ksrc[16];
 8013586:	f997 b00e 	ldrsb.w	fp, [r7, #14]
            sum1 += cols_8b[5]*ksrc[14];
 801358a:	fb16 2201 	smlabb	r2, r6, r1, r2
            sum0 += cols_8b[2]*ksrc[17];
 801358e:	f91a 7c08 	ldrsb.w	r7, [sl, #-8]
            sum0 += cols_8b[1]*ksrc[16];
 8013592:	fb10 3309 	smlabb	r3, r0, r9, r3
            sum1 += cols_8b[3]*ksrc[17];
 8013596:	f995 100f 	ldrsb.w	r1, [r5, #15]
            sum1 += cols_8b[1]*ksrc[15];
 801359a:	fb14 2200 	smlabb	r2, r4, r0, r2
            sum0 += cols_8b[2]*ksrc[17];
 801359e:	9705      	str	r7, [sp, #20]
 80135a0:	fb1b 3307 	smlabb	r3, fp, r7, r3
            sum1 += cols_8b[4]*ksrc[18];
 80135a4:	f995 4010 	ldrsb.w	r4, [r5, #16]
 80135a8:	462f      	mov	r7, r5
            sum0 += cols_8b[3]*ksrc[18];
 80135aa:	f91a 6c07 	ldrsb.w	r6, [sl, #-7]
            sum1 += cols_8b[2]*ksrc[16];
 80135ae:	fb19 220b 	smlabb	r2, r9, fp, r2
            sum0 += cols_8b[0]*ksrc[20];
 80135b2:	9d02      	ldr	r5, [sp, #8]
            sum0 += cols_8b[4]*ksrc[19];
 80135b4:	f91a 0c06 	ldrsb.w	r0, [sl, #-6]
            sum0 += cols_8b[3]*ksrc[18];
 80135b8:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum0 += cols_8b[0]*ksrc[20];
 80135bc:	f995 b010 	ldrsb.w	fp, [r5, #16]
            sum1 += cols_8b[3]*ksrc[17];
 80135c0:	9d05      	ldr	r5, [sp, #20]
            sum0 += cols_8b[4]*ksrc[19];
 80135c2:	fb14 3300 	smlabb	r3, r4, r0, r3
            sum0 += cols_8b[0]*ksrc[20];
 80135c6:	f91a 9c05 	ldrsb.w	r9, [sl, #-5]
            sum1 += cols_8b[3]*ksrc[17];
 80135ca:	fb15 2201 	smlabb	r2, r5, r1, r2
            sum1 += cols_8b[1]*ksrc[20];
 80135ce:	9d02      	ldr	r5, [sp, #8]
            sum0 += cols_8b[0]*ksrc[20];
 80135d0:	fb1b 3309 	smlabb	r3, fp, r9, r3
            sum0 += cols_8b[1]*ksrc[21];
 80135d4:	f91a bc04 	ldrsb.w	fp, [sl, #-4]
            sum1 += cols_8b[1]*ksrc[20];
 80135d8:	f995 1011 	ldrsb.w	r1, [r5, #17]
            sum1 += cols_8b[4]*ksrc[18];
 80135dc:	fb16 2604 	smlabb	r6, r6, r4, r2
            sum1 += cols_8b[5]*ksrc[19];
 80135e0:	f997 4011 	ldrsb.w	r4, [r7, #17]
            sum1 += cols_8b[2]*ksrc[21];
 80135e4:	462f      	mov	r7, r5
            sum0 += cols_8b[2]*ksrc[22];
 80135e6:	f91a 2c03 	ldrsb.w	r2, [sl, #-3]
            sum0 += cols_8b[1]*ksrc[21];
 80135ea:	fb11 330b 	smlabb	r3, r1, fp, r3
            sum1 += cols_8b[2]*ksrc[21];
 80135ee:	f995 5012 	ldrsb.w	r5, [r5, #18]
            sum1 += cols_8b[5]*ksrc[19];
 80135f2:	fb10 6604 	smlabb	r6, r0, r4, r6
            sum1 += cols_8b[3]*ksrc[22];
 80135f6:	f997 4013 	ldrsb.w	r4, [r7, #19]
            sum0 += cols_8b[2]*ksrc[22];
 80135fa:	fb15 3302 	smlabb	r3, r5, r2, r3
            sum0 += cols_8b[3]*ksrc[23];
 80135fe:	f91a 0c02 	ldrsb.w	r0, [sl, #-2]
            sum1 += cols_8b[1]*ksrc[20];
 8013602:	fb19 6601 	smlabb	r6, r9, r1, r6
            sum1 += cols_8b[4]*ksrc[23];
 8013606:	f997 9014 	ldrsb.w	r9, [r7, #20]
            sum0 += cols_8b[3]*ksrc[23];
 801360a:	fb14 3300 	smlabb	r3, r4, r0, r3
            sum0 += cols_8b[4]*ksrc[24];
 801360e:	f91a 1c01 	ldrsb.w	r1, [sl, #-1]
            sum1 += cols_8b[2]*ksrc[21];
 8013612:	fb1b 6605 	smlabb	r6, fp, r5, r6
            sum1 += cols_8b[5]*ksrc[24];
 8013616:	f997 5015 	ldrsb.w	r5, [r7, #21]
            sum0 += cols_8b[4]*ksrc[24];
 801361a:	fb19 3301 	smlabb	r3, r9, r1, r3
            sum1 += cols_8b[3]*ksrc[22];
 801361e:	fb12 6604 	smlabb	r6, r2, r4, r6
            sum0 += output_offset;
 8013622:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum0 += cols_8b[4]*ksrc[24];
 8013624:	ee07 3a90 	vmov	s15, r3
            sum1 += cols_8b[4]*ksrc[23];
 8013628:	fb10 6609 	smlabb	r6, r0, r9, r6
            sum0 = (float) sum0 * *scales;
 801362c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum1 += cols_8b[5]*ksrc[24];
 8013630:	fb11 6605 	smlabb	r6, r1, r5, r6
            sum0 = (float) sum0 * *scales;
 8013634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801363c:	ee17 3a90 	vmov	r3, s15
            sum0 += output_offset;
 8013640:	4413      	add	r3, r2
            if (sum0 < activation_min){
 8013642:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8013644:	429a      	cmp	r2, r3
 8013646:	f77f aec0 	ble.w	80133ca <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x1d2>
 801364a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801364c:	4619      	mov	r1, r3
 801364e:	9b03      	ldr	r3, [sp, #12]
 8013650:	eb01 0be3 	add.w	fp, r1, r3, asr #3
            if (sum0 > activation_max){
 8013654:	e9dd 2130 	ldrd	r2, r1, [sp, #192]	; 0xc0
 8013658:	428a      	cmp	r2, r1
 801365a:	dc1e      	bgt.n	801369a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x4a2>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801365c:	9906      	ldr	r1, [sp, #24]
 801365e:	54ca      	strb	r2, [r1, r3]
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8013660:	f89b 3000 	ldrb.w	r3, [fp]
 8013664:	9a07      	ldr	r2, [sp, #28]
 8013666:	4013      	ands	r3, r2
 8013668:	f88b 3000 	strb.w	r3, [fp]
 801366c:	e6be      	b.n	80133ec <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x1f4>
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801366e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8013670:	9906      	ldr	r1, [sp, #24]
 8013672:	9804      	ldr	r0, [sp, #16]
 8013674:	540b      	strb	r3, [r1, r0]
 8013676:	e6d8      	b.n	801342a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x232>
 8013678:	9804      	ldr	r0, [sp, #16]
            if (sum1 > activation_max){
 801367a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801367c:	10c1      	asrs	r1, r0, #3
 801367e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8013680:	429c      	cmp	r4, r3
 8013682:	440a      	add	r2, r1
 8013684:	dbf3      	blt.n	801366e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x476>
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8013686:	9a06      	ldr	r2, [sp, #24]
 8013688:	5413      	strb	r3, [r2, r0]
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 801368a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801368c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801368e:	5c5b      	ldrb	r3, [r3, r1]
 8013690:	4313      	orrs	r3, r2
 8013692:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8013694:	5453      	strb	r3, [r2, r1]
 8013696:	4602      	mov	r2, r0
 8013698:	e6cc      	b.n	8013434 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x23c>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801369a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801369c:	9a06      	ldr	r2, [sp, #24]
 801369e:	9903      	ldr	r1, [sp, #12]
 80136a0:	5453      	strb	r3, [r2, r1]
 80136a2:	e7dd      	b.n	8013660 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x468>
 80136a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136a6:	3301      	adds	r3, #1
 80136a8:	930c      	str	r3, [sp, #48]	; 0x30
        if (output_x & 1) {
 80136aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 80cd 	beq.w	801384c <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x654>
            q31_t sum = bias[0] + biasR[0];
 80136b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80136b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80136b6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80136ba:	f852 2c04 	ldr.w	r2, [r2, #-4]
            sum += cols_8b[0]*ksrc[0];
 80136be:	f99c 4000 	ldrsb.w	r4, [ip]
 80136c2:	f91a 5c19 	ldrsb.w	r5, [sl, #-25]
            q31_t sum = bias[0] + biasR[0];
 80136c6:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 80136c8:	f99c 2001 	ldrsb.w	r2, [ip, #1]
            sum += cols_8b[0]*ksrc[0];
 80136cc:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 80136d0:	f91a 5c18 	ldrsb.w	r5, [sl, #-24]
            sum += cols_8b[2]*ksrc[2];
 80136d4:	f99c 4002 	ldrsb.w	r4, [ip, #2]
            sum += cols_8b[1]*ksrc[1];
 80136d8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 80136dc:	f91a 5c17 	ldrsb.w	r5, [sl, #-23]
            sum += cols_8b[3]*ksrc[3];
 80136e0:	f99c 2003 	ldrsb.w	r2, [ip, #3]
            sum += cols_8b[2]*ksrc[2];
 80136e4:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 80136e8:	f91a 5c16 	ldrsb.w	r5, [sl, #-22]
            cols_8b += column_x + 4;
 80136ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
            sum += cols_8b[4]*ksrc[4];
 80136ee:	f99c 4004 	ldrsb.w	r4, [ip, #4]
            sum += cols_8b[3]*ksrc[3];
 80136f2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 80136f6:	f91a 5c15 	ldrsb.w	r5, [sl, #-21]
            cols_8b += column_x + 4;
 80136fa:	eb0c 0106 	add.w	r1, ip, r6
            sum += cols_8b[0]*ksrc[5];
 80136fe:	f91c 2006 	ldrsb.w	r2, [ip, r6]
            sum += cols_8b[4]*ksrc[4];
 8013702:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[5];
 8013706:	f91a 5c14 	ldrsb.w	r5, [sl, #-20]
            sum += cols_8b[1]*ksrc[6];
 801370a:	f991 4001 	ldrsb.w	r4, [r1, #1]
            sum += cols_8b[2]*ksrc[7];
            sum += cols_8b[3]*ksrc[8];
            sum += cols_8b[4]*ksrc[9];
            cols_8b += column_x + 4;
 801370e:	1988      	adds	r0, r1, r6
            sum += cols_8b[0]*ksrc[5];
 8013710:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[6];
 8013714:	f91a 5c13 	ldrsb.w	r5, [sl, #-19]
            sum += cols_8b[2]*ksrc[7];
 8013718:	f991 2002 	ldrsb.w	r2, [r1, #2]
            sum += cols_8b[1]*ksrc[6];
 801371c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[7];
 8013720:	f91a 5c12 	ldrsb.w	r5, [sl, #-18]
            sum += cols_8b[3]*ksrc[8];
 8013724:	f991 4003 	ldrsb.w	r4, [r1, #3]
            sum += cols_8b[2]*ksrc[7];
 8013728:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[8];
 801372c:	f91a 5c11 	ldrsb.w	r5, [sl, #-17]
            sum += cols_8b[4]*ksrc[9];
 8013730:	f991 2004 	ldrsb.w	r2, [r1, #4]
            sum += cols_8b[3]*ksrc[8];
 8013734:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[9];
 8013738:	f91a 5c10 	ldrsb.w	r5, [sl, #-16]
            sum += cols_8b[0]*ksrc[10];
 801373c:	f91c 4016 	ldrsb.w	r4, [ip, r6, lsl #1]
            sum += cols_8b[4]*ksrc[9];
 8013740:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[10];
 8013744:	f91a 5c0f 	ldrsb.w	r5, [sl, #-15]
            sum += cols_8b[1]*ksrc[11];
 8013748:	f990 2001 	ldrsb.w	r2, [r0, #1]
            sum += cols_8b[0]*ksrc[10];
 801374c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[11];
 8013750:	f91a 5c0e 	ldrsb.w	r5, [sl, #-14]
            sum += cols_8b[2]*ksrc[12];
 8013754:	f990 4002 	ldrsb.w	r4, [r0, #2]
            sum += cols_8b[1]*ksrc[11];
 8013758:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[12];
 801375c:	f91a 5c0d 	ldrsb.w	r5, [sl, #-13]
            sum += cols_8b[3]*ksrc[13];
 8013760:	f990 2003 	ldrsb.w	r2, [r0, #3]
            sum += cols_8b[2]*ksrc[12];
 8013764:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[13];
 8013768:	f91a 5c0c 	ldrsb.w	r5, [sl, #-12]
            sum += cols_8b[4]*ksrc[14];
 801376c:	f990 4004 	ldrsb.w	r4, [r0, #4]
            sum += cols_8b[3]*ksrc[13];
 8013770:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[14];
 8013774:	f91a 5c0b 	ldrsb.w	r5, [sl, #-11]
            cols_8b += column_x + 4;
            sum += cols_8b[0]*ksrc[15];
 8013778:	4632      	mov	r2, r6
 801377a:	f911 6016 	ldrsb.w	r6, [r1, r6, lsl #1]
            sum += cols_8b[4]*ksrc[14];
 801377e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[15];
 8013782:	f91a 1c0a 	ldrsb.w	r1, [sl, #-10]
            cols_8b += column_x + 4;
 8013786:	1882      	adds	r2, r0, r2
            sum += cols_8b[1]*ksrc[16];
 8013788:	f91a 4c09 	ldrsb.w	r4, [sl, #-9]
            sum += cols_8b[0]*ksrc[15];
 801378c:	fb16 3301 	smlabb	r3, r6, r1, r3
            sum += cols_8b[2]*ksrc[17];
            sum += cols_8b[3]*ksrc[18];
            sum += cols_8b[4]*ksrc[19];
            cols_8b += column_x + 4;
 8013790:	9e0e      	ldr	r6, [sp, #56]	; 0x38
            sum += cols_8b[1]*ksrc[16];
 8013792:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[2]*ksrc[17];
 8013796:	f992 1002 	ldrsb.w	r1, [r2, #2]
            sum += cols_8b[1]*ksrc[16];
 801379a:	fb17 3304 	smlabb	r3, r7, r4, r3
            sum += cols_8b[2]*ksrc[17];
 801379e:	f91a 4c08 	ldrsb.w	r4, [sl, #-8]
            sum += cols_8b[3]*ksrc[18];
 80137a2:	f992 5003 	ldrsb.w	r5, [r2, #3]
            sum += cols_8b[2]*ksrc[17];
 80137a6:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[3]*ksrc[18];
 80137aa:	f91a 4c07 	ldrsb.w	r4, [sl, #-7]
            sum += cols_8b[4]*ksrc[19];
 80137ae:	f992 3004 	ldrsb.w	r3, [r2, #4]
            cols_8b += column_x + 4;
 80137b2:	4432      	add	r2, r6
            sum += cols_8b[3]*ksrc[18];
 80137b4:	fb15 1104 	smlabb	r1, r5, r4, r1
            sum += cols_8b[4]*ksrc[19];
 80137b8:	f91a 4c06 	ldrsb.w	r4, [sl, #-6]
            sum += cols_8b[0]*ksrc[20];
 80137bc:	f910 0016 	ldrsb.w	r0, [r0, r6, lsl #1]
            sum += cols_8b[4]*ksrc[19];
 80137c0:	fb13 1304 	smlabb	r3, r3, r4, r1
            sum += cols_8b[0]*ksrc[20];
 80137c4:	f91a 4c05 	ldrsb.w	r4, [sl, #-5]
            sum += cols_8b[1]*ksrc[21];
 80137c8:	f992 1001 	ldrsb.w	r1, [r2, #1]
            sum += cols_8b[0]*ksrc[20];
 80137cc:	fb10 3304 	smlabb	r3, r0, r4, r3
            sum += cols_8b[1]*ksrc[21];
 80137d0:	f91a 4c04 	ldrsb.w	r4, [sl, #-4]
            sum += cols_8b[2]*ksrc[22];
 80137d4:	f992 0002 	ldrsb.w	r0, [r2, #2]
            sum += cols_8b[1]*ksrc[21];
 80137d8:	fb11 3304 	smlabb	r3, r1, r4, r3
            sum += cols_8b[2]*ksrc[22];
 80137dc:	f91a 4c03 	ldrsb.w	r4, [sl, #-3]
            sum += cols_8b[3]*ksrc[23];
 80137e0:	f992 1003 	ldrsb.w	r1, [r2, #3]
            sum += cols_8b[2]*ksrc[22];
 80137e4:	fb10 3304 	smlabb	r3, r0, r4, r3
            sum += cols_8b[3]*ksrc[23];
 80137e8:	f91a 4c02 	ldrsb.w	r4, [sl, #-2]
            sum += cols_8b[4]*ksrc[24];
 80137ec:	f992 2004 	ldrsb.w	r2, [r2, #4]
            sum += cols_8b[3]*ksrc[23];
 80137f0:	fb11 3304 	smlabb	r3, r1, r4, r3
            sum += cols_8b[4]*ksrc[24];
 80137f4:	f91a 4c01 	ldrsb.w	r4, [sl, #-1]

            sum = (float) sum * *scales;
 80137f8:	992d      	ldr	r1, [sp, #180]	; 0xb4
            sum += cols_8b[4]*ksrc[24];
 80137fa:	fb12 3304 	smlabb	r3, r2, r4, r3
            sum += output_offset;
 80137fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum = (float) sum * *scales;
 8013800:	ed11 7a01 	vldr	s14, [r1, #-4]
 8013804:	ee07 3a90 	vmov	s15, r3
 8013808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801380c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013814:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8013818:	4413      	add	r3, r2
            mask_value = 1;
            if (sum < activation_min){
 801381a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801381c:	429a      	cmp	r2, r3
 801381e:	dd34      	ble.n	801388a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x692>
 8013820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013822:	2b00      	cmp	r3, #0
 8013824:	461a      	mov	r2, r3
 8013826:	bfb8      	it	lt
 8013828:	1dda      	addlt	r2, r3, #7
 801382a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801382c:	eb03 02e2 	add.w	r2, r3, r2, asr #3
                sum = activation_min;
                mask_value = 0;
            }
            if (sum > activation_max){
 8013830:	e9dd 3130 	ldrd	r3, r1, [sp, #192]	; 0xc0
 8013834:	428b      	cmp	r3, r1
 8013836:	dd00      	ble.n	801383a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x642>
                sum = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013838:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801383a:	9906      	ldr	r1, [sp, #24]
 801383c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801383e:	540b      	strb	r3, [r1, r0]
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8013840:	9907      	ldr	r1, [sp, #28]
 8013842:	7813      	ldrb	r3, [r2, #0]
 8013844:	400b      	ands	r3, r1
 8013846:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 8013848:	f10c 0c01 	add.w	ip, ip, #1
 801384c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }
        cols_8b_iterptr += 2 * 2;
 801384e:	f10c 0c04 	add.w	ip, ip, #4
 8013852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013854:	4611      	mov	r1, r2
 8013856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013858:	441a      	add	r2, r3
 801385a:	4419      	add	r1, r3
    for (i = 0; i < output_y; i++) {
 801385c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801385e:	920d      	str	r2, [sp, #52]	; 0x34
 8013860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013862:	910b      	str	r1, [sp, #44]	; 0x2c
 8013864:	4293      	cmp	r3, r2
 8013866:	f47f ad96 	bne.w	8013396 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x19e>
    for (c = 0; c < input_ch; c++){
 801386a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801386c:	f10a 0a19 	add.w	sl, sl, #25
        input++;
 8013870:	9a06      	ldr	r2, [sp, #24]
    for (c = 0; c < input_ch; c++){
 8013872:	3301      	adds	r3, #1
        input++;
 8013874:	3201      	adds	r2, #1
    for (c = 0; c < input_ch; c++){
 8013876:	b29b      	uxth	r3, r3
        input++;
 8013878:	9206      	str	r2, [sp, #24]
    for (c = 0; c < input_ch; c++){
 801387a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801387c:	9319      	str	r3, [sp, #100]	; 0x64
 801387e:	429a      	cmp	r2, r3
 8013880:	f47f ad42 	bne.w	8013308 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x110>
}
 8013884:	b021      	add	sp, #132	; 0x84
 8013886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801388a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            if (sum > activation_max){
 801388c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801388e:	2a00      	cmp	r2, #0
 8013890:	4611      	mov	r1, r2
 8013892:	bfb8      	it	lt
 8013894:	1dd1      	addlt	r1, r2, #7
 8013896:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8013898:	4298      	cmp	r0, r3
 801389a:	ea4f 01e1 	mov.w	r1, r1, asr #3
 801389e:	440a      	add	r2, r1
 80138a0:	dbca      	blt.n	8013838 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x640>
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80138a2:	9a06      	ldr	r2, [sp, #24]
 80138a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80138a6:	5413      	strb	r3, [r2, r0]
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 80138a8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80138aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138ac:	5c5b      	ldrb	r3, [r3, r1]
 80138ae:	4313      	orrs	r3, r2
 80138b0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80138b2:	5453      	strb	r3, [r2, r1]
 80138b4:	e7c8      	b.n	8013848 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x650>
 80138b6:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 80138b8:	2200      	movs	r2, #0
 80138ba:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 80138bc:	f806 3c02 	strb.w	r3, [r6, #-2]
        *cols_8b++ = PAD8;
 80138c0:	f806 3c01 	strb.w	r3, [r6, #-1]
 80138c4:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 80138c6:	b292      	uxth	r2, r2
 80138c8:	4297      	cmp	r7, r2
 80138ca:	daf6      	bge.n	80138ba <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0x6c2>
 80138cc:	e4ec      	b.n	80132a8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask+0xb0>
 80138ce:	bf00      	nop

080138d0 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 80138d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138d4:	b09b      	sub	sp, #108	; 0x6c
 80138d6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 80138da:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 80138de:	9112      	str	r1, [sp, #72]	; 0x48
 80138e0:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 80138e4:	9011      	str	r0, [sp, #68]	; 0x44
{
 80138e6:	9204      	str	r2, [sp, #16]
    for (i = 0; i < output_y; i++) {
 80138e8:	2800      	cmp	r0, #0
 80138ea:	f000 839d 	beq.w	8014028 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x758>
        for (j = 0; j < output_x / 2; j++) {
 80138ee:	0848      	lsrs	r0, r1, #1
 80138f0:	1e4b      	subs	r3, r1, #1
 80138f2:	0054      	lsls	r4, r2, #1
 80138f4:	2500      	movs	r5, #0
 80138f6:	0046      	lsls	r6, r0, #1
 80138f8:	9014      	str	r0, [sp, #80]	; 0x50
 80138fa:	9405      	str	r4, [sp, #20]
 80138fc:	9618      	str	r6, [sp, #96]	; 0x60
 80138fe:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8013900:	950e      	str	r5, [sp, #56]	; 0x38
 8013902:	fb06 f303 	mul.w	r3, r6, r3
    for (i = 0; i < output_y; i++) {
 8013906:	950d      	str	r5, [sp, #52]	; 0x34
 8013908:	9319      	str	r3, [sp, #100]	; 0x64
 801390a:	1903      	adds	r3, r0, r4
 801390c:	f001 0001 	and.w	r0, r1, #1
 8013910:	fb06 f101 	mul.w	r1, r6, r1
 8013914:	005b      	lsls	r3, r3, #1
 8013916:	9013      	str	r0, [sp, #76]	; 0x4c
 8013918:	9316      	str	r3, [sp, #88]	; 0x58
 801391a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801391c:	9115      	str	r1, [sp, #84]	; 0x54
 801391e:	4433      	add	r3, r6
 8013920:	930f      	str	r3, [sp, #60]	; 0x3c
 8013922:	0093      	lsls	r3, r2, #2
 8013924:	9317      	str	r3, [sp, #92]	; 0x5c
 8013926:	4253      	negs	r3, r2
 8013928:	930c      	str	r3, [sp, #48]	; 0x30
 801392a:	0073      	lsls	r3, r6, #1
 801392c:	930b      	str	r3, [sp, #44]	; 0x2c
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            sum += cols_8b[5]*ksrc[5];
            sum += cols_8b[6]*ksrc[6];
            cols_8b += column_x + 6;
 801392e:	1d93      	adds	r3, r2, #6
 8013930:	9310      	str	r3, [sp, #64]	; 0x40
        for (j = 0; j < output_x / 2; j++) {
 8013932:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013934:	2b00      	cmp	r3, #0
 8013936:	f000 8206 	beq.w	8013d46 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x476>
 801393a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801393c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801393e:	9904      	ldr	r1, [sp, #16]
 8013940:	fb02 3303 	mla	r3, r2, r3, r3
 8013944:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8013946:	eb02 0e01 	add.w	lr, r2, r1
 801394a:	9905      	ldr	r1, [sp, #20]
 801394c:	9308      	str	r3, [sp, #32]
 801394e:	440a      	add	r2, r1
 8013950:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013952:	9201      	str	r2, [sp, #4]
 8013954:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8013956:	eb02 0c01 	add.w	ip, r2, r1
 801395a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801395c:	1a9b      	subs	r3, r3, r2
 801395e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013960:	9307      	str	r3, [sp, #28]
 8013962:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013964:	4413      	add	r3, r2
 8013966:	9306      	str	r3, [sp, #24]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801396a:	9302      	str	r3, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 801396c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013970:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	6811      	ldr	r1, [r2, #0]
 8013976:	eb0e 0006 	add.w	r0, lr, r6
            sum0 += cols_8b[0]*ksrc[0];
 801397a:	f99b 5000 	ldrsb.w	r5, [fp]
 801397e:	9f01      	ldr	r7, [sp, #4]
            q31_t sum0 = bias[0] + biasR[0];
 8013980:	4419      	add	r1, r3
 8013982:	9a04      	ldr	r2, [sp, #16]
            sum0 += cols_8b[0]*ksrc[0];
 8013984:	f91e 3006 	ldrsb.w	r3, [lr, r6]
 8013988:	f10e 0e02 	add.w	lr, lr, #2
 801398c:	18bc      	adds	r4, r7, r2
            sum0 += cols_8b[1]*ksrc[1];
 801398e:	f99b 6001 	ldrsb.w	r6, [fp, #1]
            sum1 += cols_8b[1]*ksrc[0];
 8013992:	f990 7001 	ldrsb.w	r7, [r0, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8013996:	fb13 1305 	smlabb	r3, r3, r5, r1
            sum1 += cols_8b[2]*ksrc[1];
 801399a:	f990 8002 	ldrsb.w	r8, [r0, #2]
 801399e:	4462      	add	r2, ip
            sum1 += cols_8b[1]*ksrc[0];
 80139a0:	fb15 1107 	smlabb	r1, r5, r7, r1
            sum1 += cols_8b[3]*ksrc[2];
 80139a4:	f990 9003 	ldrsb.w	r9, [r0, #3]
            sum0 += cols_8b[1]*ksrc[1];
 80139a8:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[2];
 80139ac:	f99b 7002 	ldrsb.w	r7, [fp, #2]
            sum1 += cols_8b[2]*ksrc[1];
 80139b0:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[3];
 80139b4:	f990 a004 	ldrsb.w	sl, [r0, #4]
            sum0 += cols_8b[2]*ksrc[2];
 80139b8:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[3];
 80139bc:	f99b 8003 	ldrsb.w	r8, [fp, #3]
            sum1 += cols_8b[3]*ksrc[2];
 80139c0:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum1 += cols_8b[5]*ksrc[4];
 80139c4:	f990 5005 	ldrsb.w	r5, [r0, #5]
            sum0 += cols_8b[3]*ksrc[3];
 80139c8:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[4];
 80139cc:	f99b 9004 	ldrsb.w	r9, [fp, #4]
            sum1 += cols_8b[4]*ksrc[3];
 80139d0:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum1 += cols_8b[6]*ksrc[5];
 80139d4:	f990 6006 	ldrsb.w	r6, [r0, #6]
            sum0 += cols_8b[4]*ksrc[4];
 80139d8:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum0 += cols_8b[5]*ksrc[5];
 80139dc:	f99b a005 	ldrsb.w	sl, [fp, #5]
            sum1 += cols_8b[5]*ksrc[4];
 80139e0:	fb19 1105 	smlabb	r1, r9, r5, r1
            sum1 += cols_8b[1]*ksrc[7];
 80139e4:	f99e 7005 	ldrsb.w	r7, [lr, #5]
            sum0 += cols_8b[5]*ksrc[5];
 80139e8:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum0 += cols_8b[6]*ksrc[6];
 80139ec:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[5];
 80139f0:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum1 += cols_8b[7]*ksrc[6];
 80139f4:	f990 a007 	ldrsb.w	sl, [r0, #7]
            sum0 += cols_8b[6]*ksrc[6];
 80139f8:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum0 += cols_8b[0]*ksrc[7];
 80139fc:	f99b 0007 	ldrsb.w	r0, [fp, #7]
 8013a00:	f99e 6004 	ldrsb.w	r6, [lr, #4]
            sum1 += cols_8b[7]*ksrc[6];
 8013a04:	fb15 110a 	smlabb	r1, r5, sl, r1
            sum1 += cols_8b[2]*ksrc[8];
 8013a08:	f99e 8006 	ldrsb.w	r8, [lr, #6]
            sum0 += cols_8b[0]*ksrc[7];
 8013a0c:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[8];
 8013a10:	f99b 6008 	ldrsb.w	r6, [fp, #8]
            sum1 += cols_8b[1]*ksrc[7];
 8013a14:	fb10 1107 	smlabb	r1, r0, r7, r1
            sum1 += cols_8b[3]*ksrc[9];
 8013a18:	f99e 9007 	ldrsb.w	r9, [lr, #7]
            sum0 += cols_8b[1]*ksrc[8];
 8013a1c:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[9];
 8013a20:	f99b 7009 	ldrsb.w	r7, [fp, #9]
            sum1 += cols_8b[2]*ksrc[8];
 8013a24:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[10];
 8013a28:	f99e 5008 	ldrsb.w	r5, [lr, #8]
            sum0 += cols_8b[2]*ksrc[9];
 8013a2c:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[10];
 8013a30:	f99b 800a 	ldrsb.w	r8, [fp, #10]
            sum1 += cols_8b[3]*ksrc[9];
 8013a34:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum0 += cols_8b[3]*ksrc[10];
 8013a38:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[11];
 8013a3c:	f99b 900b 	ldrsb.w	r9, [fp, #11]
            sum1 += cols_8b[4]*ksrc[10];
 8013a40:	fb18 1105 	smlabb	r1, r8, r5, r1
            sum1 += cols_8b[5]*ksrc[11];
 8013a44:	f99e a009 	ldrsb.w	sl, [lr, #9]
            sum0 += cols_8b[4]*ksrc[11];
 8013a48:	fb15 3309 	smlabb	r3, r5, r9, r3
            sum0 += cols_8b[5]*ksrc[12];
 8013a4c:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum0 += cols_8b[0]*ksrc[14];
 8013a50:	9f01      	ldr	r7, [sp, #4]
            sum1 += cols_8b[5]*ksrc[11];
 8013a52:	fb19 110a 	smlabb	r1, r9, sl, r1
            sum1 += cols_8b[6]*ksrc[12];
 8013a56:	f99e 000a 	ldrsb.w	r0, [lr, #10]
            sum0 += cols_8b[5]*ksrc[12];
 8013a5a:	fb1a 3305 	smlabb	r3, sl, r5, r3
            sum0 += cols_8b[6]*ksrc[13];
 8013a5e:	f99b a00d 	ldrsb.w	sl, [fp, #13]
            sum0 += cols_8b[0]*ksrc[14];
 8013a62:	f997 600c 	ldrsb.w	r6, [r7, #12]
            sum1 += cols_8b[6]*ksrc[12];
 8013a66:	fb15 1100 	smlabb	r1, r5, r0, r1
            sum0 += cols_8b[6]*ksrc[13];
 8013a6a:	fb10 330a 	smlabb	r3, r0, sl, r3
            sum1 += cols_8b[7]*ksrc[13];
 8013a6e:	f99e 500b 	ldrsb.w	r5, [lr, #11]
            sum0 += cols_8b[0]*ksrc[14];
 8013a72:	f99b 000e 	ldrsb.w	r0, [fp, #14]
            sum1 += cols_8b[1]*ksrc[14];
 8013a76:	f997 800d 	ldrsb.w	r8, [r7, #13]
            sum1 += cols_8b[7]*ksrc[13];
 8013a7a:	fb1a 1105 	smlabb	r1, sl, r5, r1
            sum0 += cols_8b[0]*ksrc[14];
 8013a7e:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[15];
 8013a82:	f99b 600f 	ldrsb.w	r6, [fp, #15]
            sum1 += cols_8b[2]*ksrc[15];
 8013a86:	f997 900e 	ldrsb.w	r9, [r7, #14]
            sum1 += cols_8b[1]*ksrc[14];
 8013a8a:	fb10 1108 	smlabb	r1, r0, r8, r1
            sum0 += cols_8b[1]*ksrc[15];
 8013a8e:	fb18 3306 	smlabb	r3, r8, r6, r3
            sum0 += cols_8b[2]*ksrc[16];
 8013a92:	f99b 8010 	ldrsb.w	r8, [fp, #16]
            sum1 += cols_8b[3]*ksrc[16];
 8013a96:	f997 a00f 	ldrsb.w	sl, [r7, #15]
            sum1 += cols_8b[2]*ksrc[15];
 8013a9a:	fb16 1109 	smlabb	r1, r6, r9, r1
            sum0 += cols_8b[2]*ksrc[16];
 8013a9e:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[3]*ksrc[17];
 8013aa2:	f99b 9011 	ldrsb.w	r9, [fp, #17]
            sum1 += cols_8b[2]*ksrc[15];
 8013aa6:	4638      	mov	r0, r7
            sum1 += cols_8b[4]*ksrc[17];
 8013aa8:	f997 5010 	ldrsb.w	r5, [r7, #16]
            sum1 += cols_8b[3]*ksrc[16];
 8013aac:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[4]*ksrc[18];
 8013ab0:	f99b 8012 	ldrsb.w	r8, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 8013ab4:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[6]*ksrc[19];
 8013ab8:	f990 6012 	ldrsb.w	r6, [r0, #18]
            sum1 += cols_8b[4]*ksrc[17];
 8013abc:	fb19 1705 	smlabb	r7, r9, r5, r1
            sum1 += cols_8b[5]*ksrc[18];
 8013ac0:	f990 9011 	ldrsb.w	r9, [r0, #17]
            sum0 += cols_8b[4]*ksrc[18];
 8013ac4:	fb15 3308 	smlabb	r3, r5, r8, r3
            sum0 += cols_8b[5]*ksrc[19];
 8013ac8:	f99b 1013 	ldrsb.w	r1, [fp, #19]
            sum1 += cols_8b[5]*ksrc[18];
 8013acc:	fb18 7809 	smlabb	r8, r8, r9, r7
            sum0 += cols_8b[6]*ksrc[20];
 8013ad0:	f99b 7014 	ldrsb.w	r7, [fp, #20]
            sum0 += cols_8b[5]*ksrc[19];
 8013ad4:	fb19 3501 	smlabb	r5, r9, r1, r3
            sum0 += cols_8b[0]*ksrc[21];
 8013ad8:	f994 3012 	ldrsb.w	r3, [r4, #18]
            sum1 += cols_8b[6]*ksrc[19];
 8013adc:	fb11 8106 	smlabb	r1, r1, r6, r8
 8013ae0:	3002      	adds	r0, #2
            sum0 += cols_8b[6]*ksrc[20];
 8013ae2:	fb16 5507 	smlabb	r5, r6, r7, r5
            sum0 += cols_8b[0]*ksrc[21];
 8013ae6:	f99b 6015 	ldrsb.w	r6, [fp, #21]
            sum0 += cols_8b[1]*ksrc[22];
 8013aea:	f99b a016 	ldrsb.w	sl, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 8013aee:	fb13 5306 	smlabb	r3, r3, r6, r5
            sum1 += cols_8b[7]*ksrc[20];
 8013af2:	f990 5011 	ldrsb.w	r5, [r0, #17]
            sum0 += cols_8b[0]*ksrc[21];
 8013af6:	9603      	str	r6, [sp, #12]
            sum1 += cols_8b[7]*ksrc[20];
 8013af8:	fb17 1505 	smlabb	r5, r7, r5, r1
            sum1 += cols_8b[1]*ksrc[21];
 8013afc:	f994 6013 	ldrsb.w	r6, [r4, #19]
 8013b00:	9001      	str	r0, [sp, #4]
 8013b02:	9803      	ldr	r0, [sp, #12]
            sum0 += cols_8b[1]*ksrc[22];
 8013b04:	fb16 330a 	smlabb	r3, r6, sl, r3
            sum1 += cols_8b[2]*ksrc[22];
 8013b08:	f994 9014 	ldrsb.w	r9, [r4, #20]
            sum0 += cols_8b[2]*ksrc[23];
 8013b0c:	f99b 8017 	ldrsb.w	r8, [fp, #23]
            sum1 += cols_8b[1]*ksrc[21];
 8013b10:	fb10 5006 	smlabb	r0, r0, r6, r5
            sum1 += cols_8b[3]*ksrc[23];
 8013b14:	f994 7015 	ldrsb.w	r7, [r4, #21]
            sum0 += cols_8b[3]*ksrc[24];
 8013b18:	f99b 1018 	ldrsb.w	r1, [fp, #24]
            sum0 += cols_8b[2]*ksrc[23];
 8013b1c:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum1 += cols_8b[2]*ksrc[22];
 8013b20:	fb1a 0009 	smlabb	r0, sl, r9, r0
            sum1 += cols_8b[4]*ksrc[24];
 8013b24:	f994 6016 	ldrsb.w	r6, [r4, #22]
            sum0 += cols_8b[3]*ksrc[24];
 8013b28:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum0 += cols_8b[4]*ksrc[25];
 8013b2c:	f99b 5019 	ldrsb.w	r5, [fp, #25]
            sum1 += cols_8b[3]*ksrc[23];
 8013b30:	fb18 0007 	smlabb	r0, r8, r7, r0
            sum1 += cols_8b[5]*ksrc[25];
 8013b34:	f994 a017 	ldrsb.w	sl, [r4, #23]
            sum0 += cols_8b[5]*ksrc[26];
 8013b38:	f99b 901a 	ldrsb.w	r9, [fp, #26]
            sum0 += cols_8b[4]*ksrc[25];
 8013b3c:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[4]*ksrc[24];
 8013b40:	fb11 0006 	smlabb	r0, r1, r6, r0
            sum1 += cols_8b[6]*ksrc[26];
 8013b44:	f994 8018 	ldrsb.w	r8, [r4, #24]
            sum0 += cols_8b[6]*ksrc[27];
 8013b48:	f99b 701b 	ldrsb.w	r7, [fp, #27]
            sum0 += cols_8b[5]*ksrc[26];
 8013b4c:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[25];
 8013b50:	fb15 050a 	smlabb	r5, r5, sl, r0
            sum0 += cols_8b[0]*ksrc[28];
 8013b54:	f99c 1018 	ldrsb.w	r1, [ip, #24]
 8013b58:	f99b 601c 	ldrsb.w	r6, [fp, #28]
            sum0 += cols_8b[6]*ksrc[27];
 8013b5c:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum1 += cols_8b[6]*ksrc[26];
 8013b60:	fb19 5508 	smlabb	r5, r9, r8, r5
            sum1 += cols_8b[7]*ksrc[27];
 8013b64:	f994 4019 	ldrsb.w	r4, [r4, #25]
            sum0 += cols_8b[1]*ksrc[29];
 8013b68:	f99b 001d 	ldrsb.w	r0, [fp, #29]
            sum0 += cols_8b[0]*ksrc[28];
 8013b6c:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum1 += cols_8b[7]*ksrc[27];
 8013b70:	fb17 5404 	smlabb	r4, r7, r4, r5
            sum1 += cols_8b[1]*ksrc[28];
 8013b74:	f99c 1019 	ldrsb.w	r1, [ip, #25]
            sum1 += cols_8b[2]*ksrc[29];
 8013b78:	f99c 801a 	ldrsb.w	r8, [ip, #26]
            sum0 += cols_8b[2]*ksrc[30];
 8013b7c:	f99b a01e 	ldrsb.w	sl, [fp, #30]
            sum0 += cols_8b[1]*ksrc[29];
 8013b80:	fb11 3300 	smlabb	r3, r1, r0, r3
            sum1 += cols_8b[1]*ksrc[28];
 8013b84:	fb16 4401 	smlabb	r4, r6, r1, r4
            sum0 += cols_8b[3]*ksrc[31];
 8013b88:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum1 += cols_8b[3]*ksrc[30];
 8013b8c:	f99c 101b 	ldrsb.w	r1, [ip, #27]
            sum0 += cols_8b[2]*ksrc[30];
 8013b90:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum1 += cols_8b[2]*ksrc[29];
 8013b94:	fb10 4408 	smlabb	r4, r0, r8, r4
            sum1 += cols_8b[4]*ksrc[31];
 8013b98:	f99c 601c 	ldrsb.w	r6, [ip, #28]
            sum0 += cols_8b[4]*ksrc[32];
 8013b9c:	f99b 0020 	ldrsb.w	r0, [fp, #32]
            sum0 += cols_8b[3]*ksrc[31];
 8013ba0:	fb11 3305 	smlabb	r3, r1, r5, r3
            sum1 += cols_8b[3]*ksrc[30];
 8013ba4:	fb1a 4101 	smlabb	r1, sl, r1, r4
            sum0 += cols_8b[5]*ksrc[33];
 8013ba8:	f99b 8021 	ldrsb.w	r8, [fp, #33]	; 0x21
            sum1 += cols_8b[5]*ksrc[32];
 8013bac:	f99c 401d 	ldrsb.w	r4, [ip, #29]
            sum0 += cols_8b[4]*ksrc[32];
 8013bb0:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum1 += cols_8b[4]*ksrc[31];
 8013bb4:	fb15 1106 	smlabb	r1, r5, r6, r1
            sum1 += cols_8b[6]*ksrc[33];
 8013bb8:	f99c 501e 	ldrsb.w	r5, [ip, #30]
            sum0 += cols_8b[6]*ksrc[34];
 8013bbc:	f99b 6022 	ldrsb.w	r6, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 8013bc0:	fb14 3308 	smlabb	r3, r4, r8, r3
            sum1 += cols_8b[5]*ksrc[32];
 8013bc4:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[0]*ksrc[35];
 8013bc8:	f992 701e 	ldrsb.w	r7, [r2, #30]
 8013bcc:	f99b 4023 	ldrsb.w	r4, [fp, #35]	; 0x23
            sum0 += cols_8b[6]*ksrc[34];
 8013bd0:	fb15 3306 	smlabb	r3, r5, r6, r3
            sum1 += cols_8b[6]*ksrc[33];
 8013bd4:	fb18 1505 	smlabb	r5, r8, r5, r1
            sum1 += cols_8b[7]*ksrc[34];
 8013bd8:	f99c 801f 	ldrsb.w	r8, [ip, #31]
            sum1 += cols_8b[1]*ksrc[35];
 8013bdc:	f992 901f 	ldrsb.w	r9, [r2, #31]
            sum0 += cols_8b[0]*ksrc[35];
 8013be0:	fb17 3304 	smlabb	r3, r7, r4, r3
            sum0 += cols_8b[1]*ksrc[36];
 8013be4:	f99b 0024 	ldrsb.w	r0, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[34];
 8013be8:	fb16 5808 	smlabb	r8, r6, r8, r5
            sum1 += cols_8b[2]*ksrc[36];
 8013bec:	f992 7020 	ldrsb.w	r7, [r2, #32]
            sum0 += cols_8b[2]*ksrc[37];
 8013bf0:	f99b 1025 	ldrsb.w	r1, [fp, #37]	; 0x25
            sum1 += cols_8b[1]*ksrc[35];
 8013bf4:	fb14 8609 	smlabb	r6, r4, r9, r8
            sum0 += cols_8b[1]*ksrc[36];
 8013bf8:	fb19 3300 	smlabb	r3, r9, r0, r3
            sum1 += cols_8b[3]*ksrc[37];
 8013bfc:	f992 5021 	ldrsb.w	r5, [r2, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 8013c00:	f99b a026 	ldrsb.w	sl, [fp, #38]	; 0x26
            sum1 += cols_8b[2]*ksrc[36];
 8013c04:	fb10 6407 	smlabb	r4, r0, r7, r6
            sum0 += cols_8b[2]*ksrc[37];
 8013c08:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum1 += cols_8b[4]*ksrc[38];
 8013c0c:	f992 9022 	ldrsb.w	r9, [r2, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 8013c10:	f99b 8027 	ldrsb.w	r8, [fp, #39]	; 0x27
            sum1 += cols_8b[3]*ksrc[37];
 8013c14:	fb11 4005 	smlabb	r0, r1, r5, r4
            sum0 += cols_8b[3]*ksrc[38];
 8013c18:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum1 += cols_8b[5]*ksrc[39];
 8013c1c:	f992 7023 	ldrsb.w	r7, [r2, #35]	; 0x23
            sum1 += cols_8b[4]*ksrc[38];
 8013c20:	fb1a 0109 	smlabb	r1, sl, r9, r0
            sum0 += cols_8b[5]*ksrc[40];
 8013c24:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[39];
 8013c28:	fb19 3308 	smlabb	r3, r9, r8, r3
 8013c2c:	9805      	ldr	r0, [sp, #20]
            sum1 += cols_8b[6]*ksrc[40];
 8013c2e:	f992 5024 	ldrsb.w	r5, [r2, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[39];
 8013c32:	fb18 1107 	smlabb	r1, r8, r7, r1
 8013c36:	4460      	add	r0, ip
            sum0 += cols_8b[6]*ksrc[41];
 8013c38:	f99b 4029 	ldrsb.w	r4, [fp, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[40];
 8013c3c:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum1 += cols_8b[7]*ksrc[41];
 8013c40:	f992 9025 	ldrsb.w	r9, [r2, #37]	; 0x25
            sum0 += cols_8b[0]*ksrc[42];
 8013c44:	f990 a024 	ldrsb.w	sl, [r0, #36]	; 0x24
            sum1 += cols_8b[6]*ksrc[40];
 8013c48:	fb16 1105 	smlabb	r1, r6, r5, r1
            sum0 += cols_8b[0]*ksrc[42];
 8013c4c:	f99b 202a 	ldrsb.w	r2, [fp, #42]	; 0x2a
            sum0 += cols_8b[6]*ksrc[41];
 8013c50:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[42];
 8013c54:	f990 8025 	ldrsb.w	r8, [r0, #37]	; 0x25
            sum1 += cols_8b[7]*ksrc[41];
 8013c58:	fb14 1109 	smlabb	r1, r4, r9, r1
            sum0 += cols_8b[0]*ksrc[42];
 8013c5c:	fb1a 3302 	smlabb	r3, sl, r2, r3
            sum0 += cols_8b[1]*ksrc[43];
 8013c60:	f99b a02b 	ldrsb.w	sl, [fp, #43]	; 0x2b
            sum1 += cols_8b[2]*ksrc[43];
 8013c64:	f990 6026 	ldrsb.w	r6, [r0, #38]	; 0x26
            sum1 += cols_8b[1]*ksrc[42];
 8013c68:	fb12 1108 	smlabb	r1, r2, r8, r1
            sum0 += cols_8b[2]*ksrc[44];
 8013c6c:	f99b 702c 	ldrsb.w	r7, [fp, #44]	; 0x2c
            sum0 += cols_8b[1]*ksrc[43];
 8013c70:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum0 = (float) sum0 * *scales;
 8013c74:	9c25      	ldr	r4, [sp, #148]	; 0x94
            sum1 += cols_8b[2]*ksrc[43];
 8013c76:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum0 += cols_8b[3]*ksrc[45];
 8013c7a:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum0 += cols_8b[2]*ksrc[44];
 8013c7e:	fb16 3307 	smlabb	r3, r6, r7, r3
            sum0 = (float) sum0 * *scales;
 8013c82:	edd4 7a00 	vldr	s15, [r4]
 8013c86:	f10c 0c02 	add.w	ip, ip, #2
            sum1 += cols_8b[3]*ksrc[44];
 8013c8a:	f990 4027 	ldrsb.w	r4, [r0, #39]	; 0x27
            sum1 += cols_8b[4]*ksrc[45];
 8013c8e:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[46];
 8013c92:	f99b 902e 	ldrsb.w	r9, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 8013c96:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum1 += cols_8b[5]*ksrc[46];
 8013c9a:	f990 6029 	ldrsb.w	r6, [r0, #41]	; 0x29
            sum1 += cols_8b[3]*ksrc[44];
 8013c9e:	fb17 1104 	smlabb	r1, r7, r4, r1
            sum0 += cols_8b[5]*ksrc[47];
 8013ca2:	f99b 802f 	ldrsb.w	r8, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 8013ca6:	fb12 3309 	smlabb	r3, r2, r9, r3
            sum1 += cols_8b[6]*ksrc[47];
 8013caa:	f990 a02a 	ldrsb.w	sl, [r0, #42]	; 0x2a
            sum1 += cols_8b[4]*ksrc[45];
 8013cae:	fb15 1102 	smlabb	r1, r5, r2, r1
            sum0 += cols_8b[6]*ksrc[48];
 8013cb2:	f99b 4030 	ldrsb.w	r4, [fp, #48]	; 0x30
            sum0 += cols_8b[5]*ksrc[47];
 8013cb6:	fb16 3308 	smlabb	r3, r6, r8, r3
            sum1 += cols_8b[5]*ksrc[46];
 8013cba:	fb19 1106 	smlabb	r1, r9, r6, r1
            sum1 += cols_8b[7]*ksrc[48];
 8013cbe:	f990 002b 	ldrsb.w	r0, [r0, #43]	; 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 8013cc2:	fb1a 3304 	smlabb	r3, sl, r4, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013cc6:	9a02      	ldr	r2, [sp, #8]
            sum1 += cols_8b[6]*ksrc[47];
 8013cc8:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[6]*ksrc[48];
 8013ccc:	ee07 3a10 	vmov	s14, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013cd0:	9b08      	ldr	r3, [sp, #32]
            sum1 += cols_8b[7]*ksrc[48];
 8013cd2:	fb14 1100 	smlabb	r1, r4, r0, r1
            sum0 = (float) sum0 * *scales;
 8013cd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013cda:	1ad7      	subs	r7, r2, r3
            sum0 = (float) sum0 * *scales;
 8013cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 = (float) sum1 * *scales;
 8013ce0:	ee07 1a90 	vmov	s15, r1
            sum0 += output_offset;
 8013ce4:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 8013ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 8013cea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013cee:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8013cf2:	440b      	add	r3, r1
            sum0 = TN_MAX(sum0, activation_min);
 8013cf4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013cf6:	428b      	cmp	r3, r1
 8013cf8:	bfb8      	it	lt
 8013cfa:	460b      	movlt	r3, r1
            sum0 = TN_MIN(sum0, activation_max);
 8013cfc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8013cfe:	428b      	cmp	r3, r1
 8013d00:	bfa8      	it	ge
 8013d02:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8013d04:	9907      	ldr	r1, [sp, #28]
 8013d06:	547b      	strb	r3, [r7, r1]
            sum1 = (float) sum1 * *scales;
 8013d08:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013d0a:	ed93 7a00 	vldr	s14, [r3]
            sum1 += output_offset;
 8013d0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 8013d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d18:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8013d1c:	440b      	add	r3, r1
            sum1 = TN_MAX(sum1, activation_min);
 8013d1e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013d20:	428b      	cmp	r3, r1
 8013d22:	bfb8      	it	lt
 8013d24:	460b      	movlt	r3, r1
            sum1 = TN_MIN(sum1, activation_max);
 8013d26:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8013d28:	428b      	cmp	r3, r1
 8013d2a:	bfa8      	it	ge
 8013d2c:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8013d2e:	7013      	strb	r3, [r2, #0]
 8013d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d32:	18d3      	adds	r3, r2, r3
 8013d34:	9302      	str	r3, [sp, #8]
        for (j = 0; j < output_x / 2; j++) {
 8013d36:	9b06      	ldr	r3, [sp, #24]
 8013d38:	4563      	cmp	r3, ip
 8013d3a:	f47f ae17 	bne.w	801396c <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x9c>
 8013d3e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013d40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d42:	4413      	add	r3, r2
 8013d44:	932a      	str	r3, [sp, #168]	; 0xa8
 8013d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (output_x & 1) {
 8013d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8013d4e:	2a00      	cmp	r2, #0
 8013d50:	f000 816d 	beq.w	801402e <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x75e>
            q31_t sum = bias[0] + biasR[0];
 8013d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
            cols_8b += column_x + 6;
 8013d56:	9e10      	ldr	r6, [sp, #64]	; 0x40
            q31_t sum = bias[0] + biasR[0];
 8013d58:	6813      	ldr	r3, [r2, #0]
 8013d5a:	990e      	ldr	r1, [sp, #56]	; 0x38
            cols_8b += column_x + 6;
 8013d5c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8013d5e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013d60:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 8013d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d64:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8013d66:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 8013d6a:	6812      	ldr	r2, [r2, #0]
 8013d6c:	910e      	str	r1, [sp, #56]	; 0x38
            sum += cols_8b[0]*ksrc[0];
 8013d6e:	992a      	ldr	r1, [sp, #168]	; 0xa8
            q31_t sum = bias[0] + biasR[0];
 8013d70:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8013d72:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[0]*ksrc[0];
 8013d74:	f991 4000 	ldrsb.w	r4, [r1]
            sum += cols_8b[2]*ksrc[9];
            sum += cols_8b[3]*ksrc[10];
            sum += cols_8b[4]*ksrc[11];
            sum += cols_8b[5]*ksrc[12];
            sum += cols_8b[6]*ksrc[13];
            cols_8b += column_x + 6;
 8013d78:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 8013d7a:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 8013d7e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8013d82:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 8013d86:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[1]*ksrc[1];
 8013d88:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8013d8c:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 8013d90:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 8013d94:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 8013d96:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 8013d9a:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 8013d9e:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 8013da2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[3];
 8013da4:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8013da8:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 8013dac:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 8013db0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[4]*ksrc[4];
 8013db2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 8013db6:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 8013dba:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 8013dbe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[5]*ksrc[5];
 8013dc0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8013dc4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[6];
 8013dc6:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 8013dca:	4617      	mov	r7, r2
            sum += cols_8b[6]*ksrc[6];
 8013dcc:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum += cols_8b[0]*ksrc[7];
 8013dd0:	57ba      	ldrsb	r2, [r7, r6]
            sum += cols_8b[6]*ksrc[6];
 8013dd2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8013dd6:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 8013dda:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 8013dde:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 8013de2:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 8013de6:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 8013dea:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 8013dee:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 8013df2:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 8013df6:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 8013dfa:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 8013dfe:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 8013e02:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 8013e06:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 8013e0a:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 8013e0e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8013e12:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 8013e16:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 8013e1a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 8013e1e:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 8013e22:	463c      	mov	r4, r7
 8013e24:	4637      	mov	r7, r6
            sum += cols_8b[6]*ksrc[13];
 8013e26:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 8013e2a:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 8013e2e:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 8013e32:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 8013e36:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 8013e3a:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 8013e3e:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 8013e42:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 8013e46:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 8013e4a:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 8013e4e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 8013e52:	f99b 5011 	ldrsb.w	r5, [fp, #17]
            sum += cols_8b[4]*ksrc[18];
 8013e56:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2;
 8013e5a:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[17];
 8013e5c:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 8013e60:	f99b 5012 	ldrsb.w	r5, [fp, #18]
            sum += cols_8b[5]*ksrc[19];
 8013e64:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += 3 * 2;
 8013e68:	3607      	adds	r6, #7
            sum += cols_8b[4]*ksrc[18];
 8013e6a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 8013e6e:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 8013e72:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[19];
 8013e76:	fb12 3305 	smlabb	r3, r2, r5, r3
        cols_8b_iterptr += 3 * 2;
 8013e7a:	962a      	str	r6, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[20];
 8013e7c:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 8013e80:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 8013e82:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 8013e86:	fb14 3506 	smlabb	r5, r4, r6, r3
            sum += cols_8b[0]*ksrc[21];
 8013e8a:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 8013e8e:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 8013e92:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 8013e96:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 8013e9a:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 8013e9e:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 8013ea2:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 8013ea6:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 8013eaa:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 8013eae:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 8013eb2:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 8013eb6:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 8013eba:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 8013ebe:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 8013ec2:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 8013ec6:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 8013eca:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[6]*ksrc[27];
 8013ecc:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 8013ed0:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 8013ed4:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 8013ed8:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 8013edc:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 8013ede:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 8013ee2:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 8013ee6:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 8013eea:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 8013eee:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 8013ef2:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 8013ef6:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 8013efa:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 8013efe:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 8013f02:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 8013f06:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 8013f0a:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 8013f0e:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 8013f12:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 8013f16:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 8013f1a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 8013f1e:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 8013f22:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 8013f26:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 8013f2a:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 8013f2e:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 8013f30:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 8013f34:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 8013f38:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 8013f3c:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 8013f40:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 8013f44:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 8013f48:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 8013f4c:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 8013f50:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 8013f54:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 8013f58:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 8013f5c:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8013f60:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8013f64:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 8013f68:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 8013f6c:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8013f70:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 8013f74:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 8013f78:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[5]*ksrc[40];
 8013f7a:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8013f7e:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013f82:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 8013f86:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 8013f88:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 8013f8c:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8013f90:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8013f94:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 8013f98:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 8013f9c:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 8013fa0:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 8013fa4:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 8013fa8:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 8013fac:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 8013fb0:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 8013fb4:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 8013fb8:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 8013fbc:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 8013fc0:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 8013fc4:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 8013fc8:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 8013fcc:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 8013fd0:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 8013fd4:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 8013fd8:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 8013fdc:	9825      	ldr	r0, [sp, #148]	; 0x94
            sum += cols_8b[6]*ksrc[48];
 8013fde:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013fe2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
            sum = (float) sum * *scales;
 8013fe4:	ed90 7a00 	vldr	s14, [r0]
 8013fe8:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 8013fec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013fee:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum = (float) sum * *scales;
 8013ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff4:	9f15      	ldr	r7, [sp, #84]	; 0x54
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8013ff6:	1a71      	subs	r1, r6, r1
 8013ff8:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 8013ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ffe:	960f      	str	r6, [sp, #60]	; 0x3c
 8014000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014004:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8014008:	4413      	add	r3, r2
            sum = TN_MAX(sum, activation_min);
 801400a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801400c:	4293      	cmp	r3, r2
 801400e:	bfb8      	it	lt
 8014010:	4613      	movlt	r3, r2
            sum = TN_MIN(sum, activation_max);
 8014012:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014014:	4293      	cmp	r3, r2
 8014016:	bfa8      	it	ge
 8014018:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 801401a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801401c:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 801401e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014022:	429a      	cmp	r2, r3
 8014024:	f47f ac85 	bne.w	8013932 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
    }
}
 8014028:	b01b      	add	sp, #108	; 0x6c
 801402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += 3 * 2;
 801402e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014030:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014032:	3306      	adds	r3, #6
 8014034:	932a      	str	r3, [sp, #168]	; 0xa8
 8014036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014038:	4413      	add	r3, r2
 801403a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801403c:	930f      	str	r3, [sp, #60]	; 0x3c
 801403e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014040:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8014042:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014044:	930e      	str	r3, [sp, #56]	; 0x38
 8014046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014048:	4293      	cmp	r3, r2
 801404a:	f47f ac72 	bne.w	8013932 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
}
 801404e:	b01b      	add	sp, #108	; 0x6c
 8014050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014054 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>:
{
 8014054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014058:	b093      	sub	sp, #76	; 0x4c
 801405a:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 801405c:	f101 0e05 	add.w	lr, r1, #5
{
 8014060:	4615      	mov	r5, r2
 8014062:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014064:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8014068:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801406c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8014070:	1cd8      	adds	r0, r3, #3
 8014072:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 8014076:	2100      	movs	r1, #0
{
 8014078:	930f      	str	r3, [sp, #60]	; 0x3c
 801407a:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 801407e:	9310      	str	r3, [sp, #64]	; 0x40
 8014080:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 8014084:	3101      	adds	r1, #1
 8014086:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 8014088:	f800 3c03 	strb.w	r3, [r0, #-3]
 801408c:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 801408e:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8014090:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 8014094:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 8014098:	4571      	cmp	r1, lr
 801409a:	ddf3      	ble.n	8014084 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 801409c:	b1cd      	cbz	r5, 80140d2 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x7e>
 801409e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80140a0:	4610      	mov	r0, r2
 80140a2:	2600      	movs	r6, #0
 80140a4:	1d8f      	adds	r7, r1, #6
 80140a6:	19d1      	adds	r1, r2, r7
 80140a8:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 80140aa:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 80140ac:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 80140ae:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 80140b2:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 80140b4:	f801 3c03 	strb.w	r3, [r1, #-3]
 80140b8:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 80140ba:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 80140bc:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 80140c0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80140c4:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 80140c6:	d8ef      	bhi.n	80140a8 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x54>
 80140c8:	1e69      	subs	r1, r5, #1
 80140ca:	b289      	uxth	r1, r1
 80140cc:	fb01 7707 	mla	r7, r1, r7, r7
 80140d0:	443a      	add	r2, r7
 80140d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80140d4:	1e88      	subs	r0, r1, #2
 80140d6:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 80140da:	4288      	cmp	r0, r1
 80140dc:	f200 8092 	bhi.w	8014204 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b0>
 80140e0:	2000      	movs	r0, #0
 80140e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80140e4:	4606      	mov	r6, r0
 80140e6:	f363 0007 	bfi	r0, r3, #0, #8
 80140ea:	f101 0c06 	add.w	ip, r1, #6
 80140ee:	4611      	mov	r1, r2
 80140f0:	f363 200f 	bfi	r0, r3, #8, #8
 80140f4:	ea4f 079c 	mov.w	r7, ip, lsr #2
 80140f8:	f363 4017 	bfi	r0, r3, #16, #8
 80140fc:	f363 601f 	bfi	r0, r3, #24, #8
 8014100:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 8014102:	6008      	str	r0, [r1, #0]
 8014104:	6048      	str	r0, [r1, #4]
 8014106:	310c      	adds	r1, #12
 8014108:	42b7      	cmp	r7, r6
 801410a:	f841 0c04 	str.w	r0, [r1, #-4]
 801410e:	d8f7      	bhi.n	8014100 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xac>
 8014110:	f02c 0003 	bic.w	r0, ip, #3
 8014114:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8014118:	4560      	cmp	r0, ip
 801411a:	b287      	uxth	r7, r0
 801411c:	eb02 0106 	add.w	r1, r2, r6
 8014120:	d010      	beq.n	8014144 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 8014122:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 8014124:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 8014126:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 8014128:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 801412a:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 801412c:	4572      	cmp	r2, lr
 801412e:	dc09      	bgt.n	8014144 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
 8014130:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 8014132:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8014134:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 8014136:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8014138:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 801413a:	4596      	cmp	lr, r2
 801413c:	db02      	blt.n	8014144 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 801413e:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8014140:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8014142:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8014144:	2c00      	cmp	r4, #0
 8014146:	d059      	beq.n	80141fc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
 8014148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801414a:	1e63      	subs	r3, r4, #1
 801414c:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 801414e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014152:	b29b      	uxth	r3, r3
 8014154:	b2b6      	uxth	r6, r6
 8014156:	3214      	adds	r2, #20
 8014158:	3301      	adds	r3, #1
 801415a:	1c77      	adds	r7, r6, #1
 801415c:	9211      	str	r2, [sp, #68]	; 0x44
 801415e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014160:	3607      	adds	r6, #7
 8014162:	fb07 f804 	mul.w	r8, r7, r4
 8014166:	18d3      	adds	r3, r2, r3
 8014168:	960d      	str	r6, [sp, #52]	; 0x34
 801416a:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 801416c:	b1f5      	cbz	r5, 80141ac <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 801416e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014170:	b1e3      	cbz	r3, 80141ac <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 8014172:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014174:	f04f 0e00 	mov.w	lr, #0
 8014178:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801417a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801417e:	eb03 0c02 	add.w	ip, r3, r2
 8014182:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014184:	eb07 000c 	add.w	r0, r7, ip
 8014188:	4662      	mov	r2, ip
 801418a:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 801418c:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8014190:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8014192:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8014196:	4282      	cmp	r2, r0
 8014198:	d1f8      	bne.n	801418c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x138>
 801419a:	f10e 0e01 	add.w	lr, lr, #1
 801419e:	44c1      	add	r9, r8
 80141a0:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 80141a2:	fa1f f38e 	uxth.w	r3, lr
 80141a6:	429d      	cmp	r5, r3
 80141a8:	d8ec      	bhi.n	8014184 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x130>
 80141aa:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80141ac:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80141ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141b0:	9604      	str	r6, [sp, #16]
 80141b2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80141b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141b6:	9603      	str	r6, [sp, #12]
 80141b8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80141ba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80141bc:	9601      	str	r6, [sp, #4]
 80141be:	f106 0904 	add.w	r9, r6, #4
 80141c2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80141c4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80141c6:	9302      	str	r3, [sp, #8]
        input++;
 80141c8:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80141ca:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 80141cc:	3631      	adds	r6, #49	; 0x31
        input++;
 80141ce:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80141d0:	465b      	mov	r3, fp
 80141d2:	9207      	str	r2, [sp, #28]
 80141d4:	4652      	mov	r2, sl
 80141d6:	9106      	str	r1, [sp, #24]
 80141d8:	f10b 0b04 	add.w	fp, fp, #4
 80141dc:	9005      	str	r0, [sp, #20]
 80141de:	f10a 0a04 	add.w	sl, sl, #4
 80141e2:	9408      	str	r4, [sp, #32]
 80141e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80141e6:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 80141e8:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80141ea:	f7ff fb71 	bl	80138d0 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 80141ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d002      	beq.n	80141fc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80141f6:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 80141fa:	e7b7      	b.n	801416c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x118>
}
 80141fc:	2000      	movs	r0, #0
 80141fe:	b013      	add	sp, #76	; 0x4c
 8014200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014204:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8014206:	2100      	movs	r1, #0
 8014208:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 801420a:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 801420e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8014212:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8014214:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8014216:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 801421a:	4571      	cmp	r1, lr
 801421c:	ddf4      	ble.n	8014208 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b4>
 801421e:	e791      	b.n	8014144 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>

08014220 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	b09f      	sub	sp, #124	; 0x7c
 8014226:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 801422a:	9013      	str	r0, [sp, #76]	; 0x4c
 801422c:	4603      	mov	r3, r0
{
 801422e:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 8014232:	9114      	str	r1, [sp, #80]	; 0x50
 8014234:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 8014238:	9005      	str	r0, [sp, #20]
    for (i = 0; i < output_y; i++) {
 801423a:	2b00      	cmp	r3, #0
 801423c:	f000 83c5 	beq.w	80149ca <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7aa>
 8014240:	f000 0301 	and.w	r3, r0, #1
 8014244:	460c      	mov	r4, r1
 8014246:	1d86      	adds	r6, r0, #6
        for (j = 0; j < output_x / 2; j++) {
 8014248:	0849      	lsrs	r1, r1, #1
 801424a:	f1c3 0306 	rsb	r3, r3, #6
 801424e:	1e62      	subs	r2, r4, #1
 8014250:	460d      	mov	r5, r1
 8014252:	9116      	str	r1, [sp, #88]	; 0x58
 8014254:	4433      	add	r3, r6
 8014256:	4401      	add	r1, r0
 8014258:	00ad      	lsls	r5, r5, #2
 801425a:	2700      	movs	r7, #0
 801425c:	931b      	str	r3, [sp, #108]	; 0x6c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 801425e:	3302      	adds	r3, #2
 8014260:	951a      	str	r5, [sp, #104]	; 0x68
 8014262:	931d      	str	r3, [sp, #116]	; 0x74
 8014264:	f004 0301 	and.w	r3, r4, #1
 8014268:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801426a:	9315      	str	r3, [sp, #84]	; 0x54
 801426c:	462b      	mov	r3, r5
 801426e:	fb05 f202 	mul.w	r2, r5, r2
 8014272:	9612      	str	r6, [sp, #72]	; 0x48
 8014274:	fb03 f304 	mul.w	r3, r3, r4
 8014278:	921c      	str	r2, [sp, #112]	; 0x70
 801427a:	008a      	lsls	r2, r1, #2
 801427c:	9317      	str	r3, [sp, #92]	; 0x5c
 801427e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for (j = 0; j < output_x / 2; j++) {
 8014280:	9710      	str	r7, [sp, #64]	; 0x40
 8014282:	442b      	add	r3, r5
 8014284:	9218      	str	r2, [sp, #96]	; 0x60
    for (i = 0; i < output_y; i++) {
 8014286:	970f      	str	r7, [sp, #60]	; 0x3c
 8014288:	9311      	str	r3, [sp, #68]	; 0x44
 801428a:	0043      	lsls	r3, r0, #1
 801428c:	9307      	str	r3, [sp, #28]
 801428e:	4243      	negs	r3, r0
 8014290:	930e      	str	r3, [sp, #56]	; 0x38
 8014292:	0083      	lsls	r3, r0, #2
 8014294:	9319      	str	r3, [sp, #100]	; 0x64
 8014296:	006b      	lsls	r3, r5, #1
 8014298:	930d      	str	r3, [sp, #52]	; 0x34
        for (j = 0; j < output_x / 2; j++) {
 801429a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801429c:	2b00      	cmp	r3, #0
 801429e:	f000 8221 	beq.w	80146e4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x4c4>
 80142a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80142a6:	9905      	ldr	r1, [sp, #20]
 80142a8:	fb02 3303 	mla	r3, r2, r3, r3
 80142ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80142ae:	440a      	add	r2, r1
 80142b0:	9907      	ldr	r1, [sp, #28]
 80142b2:	930a      	str	r3, [sp, #40]	; 0x28
 80142b4:	9202      	str	r2, [sp, #8]
 80142b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80142b8:	440a      	add	r2, r1
 80142ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 80142bc:	9203      	str	r2, [sp, #12]
 80142be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80142c0:	440a      	add	r2, r1
 80142c2:	9201      	str	r2, [sp, #4]
 80142c4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80142c6:	1a9b      	subs	r3, r3, r2
 80142c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80142ca:	9309      	str	r3, [sp, #36]	; 0x24
 80142cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80142ce:	4413      	add	r3, r2
 80142d0:	9308      	str	r3, [sp, #32]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80142d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142d4:	9306      	str	r3, [sp, #24]
            q31_t sum0 = bias[0] + biasR[0];
 80142d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142da:	9c02      	ldr	r4, [sp, #8]
 80142dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80142de:	6808      	ldr	r0, [r1, #0]
 80142e0:	9e05      	ldr	r6, [sp, #20]
 80142e2:	1962      	adds	r2, r4, r5
 80142e4:	9903      	ldr	r1, [sp, #12]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	198f      	adds	r7, r1, r6
            sum0 += cols_8b[0]*ksrc[0];
 80142ea:	f99b e000 	ldrsb.w	lr, [fp]
 80142ee:	4621      	mov	r1, r4
            q31_t sum0 = bias[0] + biasR[0];
 80142f0:	4403      	add	r3, r0
            sum0 += cols_8b[0]*ksrc[0];
 80142f2:	5764      	ldrsb	r4, [r4, r5]
            sum0 += cols_8b[1]*ksrc[1];
 80142f4:	f992 0001 	ldrsb.w	r0, [r2, #1]
            sum0 += cols_8b[0]*ksrc[0];
 80142f8:	fb14 340e 	smlabb	r4, r4, lr, r3
 80142fc:	9704      	str	r7, [sp, #16]
            sum0 += cols_8b[1]*ksrc[1];
 80142fe:	f99b 7001 	ldrsb.w	r7, [fp, #1]
            sum1 += cols_8b[2]*ksrc[0];
 8014302:	f992 c002 	ldrsb.w	ip, [r2, #2]
            sum0 += cols_8b[2]*ksrc[2];
 8014306:	f99b 6002 	ldrsb.w	r6, [fp, #2]
            sum0 += cols_8b[1]*ksrc[1];
 801430a:	fb10 4407 	smlabb	r4, r0, r7, r4
            sum1 += cols_8b[3]*ksrc[1];
 801430e:	f992 5003 	ldrsb.w	r5, [r2, #3]
            sum1 += cols_8b[2]*ksrc[0];
 8014312:	fb1e 330c 	smlabb	r3, lr, ip, r3
            sum0 += cols_8b[2]*ksrc[2];
 8014316:	fb1c 4406 	smlabb	r4, ip, r6, r4
            sum0 += cols_8b[3]*ksrc[3];
 801431a:	f99b e003 	ldrsb.w	lr, [fp, #3]
            sum1 += cols_8b[4]*ksrc[2];
 801431e:	f992 0004 	ldrsb.w	r0, [r2, #4]
            sum1 += cols_8b[3]*ksrc[1];
 8014322:	fb17 3305 	smlabb	r3, r7, r5, r3
            sum0 += cols_8b[3]*ksrc[3];
 8014326:	fb15 440e 	smlabb	r4, r5, lr, r4
            sum0 += cols_8b[4]*ksrc[4];
 801432a:	f99b 7004 	ldrsb.w	r7, [fp, #4]
            sum1 += cols_8b[5]*ksrc[3];
 801432e:	f992 5005 	ldrsb.w	r5, [r2, #5]
            sum1 += cols_8b[4]*ksrc[2];
 8014332:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[5]*ksrc[5];
 8014336:	f99b 8005 	ldrsb.w	r8, [fp, #5]
            sum0 += cols_8b[4]*ksrc[4];
 801433a:	fb10 4407 	smlabb	r4, r0, r7, r4
            sum1 += cols_8b[5]*ksrc[3];
 801433e:	fb1e 3305 	smlabb	r3, lr, r5, r3
            sum1 += cols_8b[6]*ksrc[4];
 8014342:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum0 += cols_8b[5]*ksrc[5];
 8014346:	fb15 4408 	smlabb	r4, r5, r8, r4
            sum0 += cols_8b[6]*ksrc[6];
 801434a:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[4];
 801434e:	fb17 3e00 	smlabb	lr, r7, r0, r3
            sum0 += cols_8b[0]*ksrc[7];
 8014352:	f99b 6007 	ldrsb.w	r6, [fp, #7]
 8014356:	f991 3006 	ldrsb.w	r3, [r1, #6]
            sum0 += cols_8b[6]*ksrc[6];
 801435a:	fb10 4005 	smlabb	r0, r0, r5, r4
            sum0 += cols_8b[1]*ksrc[8];
 801435e:	f99b 4008 	ldrsb.w	r4, [fp, #8]
            sum0 += cols_8b[0]*ksrc[7];
 8014362:	fb13 0006 	smlabb	r0, r3, r6, r0
            sum0 += cols_8b[1]*ksrc[8];
 8014366:	f991 3007 	ldrsb.w	r3, [r1, #7]
            sum1 += cols_8b[2]*ksrc[7];
 801436a:	f991 7008 	ldrsb.w	r7, [r1, #8]
            sum0 += cols_8b[1]*ksrc[8];
 801436e:	fb13 0004 	smlabb	r0, r3, r4, r0
            sum1 += cols_8b[7]*ksrc[5];
 8014372:	f992 3007 	ldrsb.w	r3, [r2, #7]
            sum1 += cols_8b[3]*ksrc[8];
 8014376:	f991 c009 	ldrsb.w	ip, [r1, #9]
            sum0 += cols_8b[2]*ksrc[9];
 801437a:	f99b 9009 	ldrsb.w	r9, [fp, #9]
            sum1 += cols_8b[7]*ksrc[5];
 801437e:	fb18 e303 	smlabb	r3, r8, r3, lr
            sum0 += cols_8b[3]*ksrc[10];
 8014382:	f99b e00a 	ldrsb.w	lr, [fp, #10]
            sum1 += cols_8b[8]*ksrc[6];
 8014386:	f992 2008 	ldrsb.w	r2, [r2, #8]
            sum0 += cols_8b[2]*ksrc[9];
 801438a:	fb17 0009 	smlabb	r0, r7, r9, r0
            sum1 += cols_8b[4]*ksrc[9];
 801438e:	f991 800a 	ldrsb.w	r8, [r1, #10]
            sum1 += cols_8b[8]*ksrc[6];
 8014392:	fb15 3202 	smlabb	r2, r5, r2, r3
            sum0 += cols_8b[4]*ksrc[11];
 8014396:	f99b 300b 	ldrsb.w	r3, [fp, #11]
            sum0 += cols_8b[3]*ksrc[10];
 801439a:	fb1c 000e 	smlabb	r0, ip, lr, r0
            sum1 += cols_8b[5]*ksrc[10];
 801439e:	f991 500b 	ldrsb.w	r5, [r1, #11]
            sum1 += cols_8b[2]*ksrc[7];
 80143a2:	fb16 2607 	smlabb	r6, r6, r7, r2
            sum0 += cols_8b[5]*ksrc[12];
 80143a6:	f99b 200c 	ldrsb.w	r2, [fp, #12]
            sum0 += cols_8b[4]*ksrc[11];
 80143aa:	fb18 0003 	smlabb	r0, r8, r3, r0
            sum1 += cols_8b[6]*ksrc[11];
 80143ae:	f991 700c 	ldrsb.w	r7, [r1, #12]
            sum1 += cols_8b[3]*ksrc[8];
 80143b2:	fb14 640c 	smlabb	r4, r4, ip, r6
            sum1 += cols_8b[7]*ksrc[12];
 80143b6:	f991 c00d 	ldrsb.w	ip, [r1, #13]
            sum0 += cols_8b[5]*ksrc[12];
 80143ba:	fb15 0002 	smlabb	r0, r5, r2, r0
            sum0 += cols_8b[0]*ksrc[14];
 80143be:	9903      	ldr	r1, [sp, #12]
            sum0 += cols_8b[6]*ksrc[13];
 80143c0:	f99b 600d 	ldrsb.w	r6, [fp, #13]
            sum1 += cols_8b[4]*ksrc[9];
 80143c4:	fb19 4808 	smlabb	r8, r9, r8, r4
            sum0 += cols_8b[0]*ksrc[14];
 80143c8:	f99b 900e 	ldrsb.w	r9, [fp, #14]
            sum0 += cols_8b[6]*ksrc[13];
 80143cc:	fb17 0a06 	smlabb	sl, r7, r6, r0
            sum0 += cols_8b[0]*ksrc[14];
 80143d0:	f991 000c 	ldrsb.w	r0, [r1, #12]
            sum1 += cols_8b[5]*ksrc[10];
 80143d4:	fb1e 8805 	smlabb	r8, lr, r5, r8
            sum1 += cols_8b[8]*ksrc[13];
 80143d8:	9c02      	ldr	r4, [sp, #8]
            sum0 += cols_8b[1]*ksrc[15];
 80143da:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum0 += cols_8b[0]*ksrc[14];
 80143de:	fb10 a009 	smlabb	r0, r0, r9, sl
            sum0 += cols_8b[1]*ksrc[15];
 80143e2:	f991 e00d 	ldrsb.w	lr, [r1, #13]
            sum1 += cols_8b[6]*ksrc[11];
 80143e6:	fb13 8307 	smlabb	r3, r3, r7, r8
            sum1 += cols_8b[2]*ksrc[14];
 80143ea:	f991 700e 	ldrsb.w	r7, [r1, #14]
 80143ee:	3404      	adds	r4, #4
            sum1 += cols_8b[3]*ksrc[15];
 80143f0:	9903      	ldr	r1, [sp, #12]
            sum0 += cols_8b[1]*ksrc[15];
 80143f2:	fb1e 0005 	smlabb	r0, lr, r5, r0
            sum1 += cols_8b[7]*ksrc[12];
 80143f6:	fb12 320c 	smlabb	r2, r2, ip, r3
            sum0 += cols_8b[2]*ksrc[16];
 80143fa:	f99b e010 	ldrsb.w	lr, [fp, #16]
            sum1 += cols_8b[8]*ksrc[13];
 80143fe:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8014402:	3104      	adds	r1, #4
            sum1 += cols_8b[3]*ksrc[15];
 8014404:	f991 800b 	ldrsb.w	r8, [r1, #11]
            sum0 += cols_8b[2]*ksrc[16];
 8014408:	fb17 000e 	smlabb	r0, r7, lr, r0
            sum0 += cols_8b[3]*ksrc[17];
 801440c:	f99b c011 	ldrsb.w	ip, [fp, #17]
            sum1 += cols_8b[8]*ksrc[13];
 8014410:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum1 += cols_8b[4]*ksrc[16];
 8014414:	f991 300c 	ldrsb.w	r3, [r1, #12]
            sum0 += cols_8b[4]*ksrc[18];
 8014418:	f99b 6012 	ldrsb.w	r6, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 801441c:	fb18 000c 	smlabb	r0, r8, ip, r0
            sum1 += cols_8b[2]*ksrc[14];
 8014420:	fb19 2207 	smlabb	r2, r9, r7, r2
 8014424:	9402      	str	r4, [sp, #8]
            sum1 += cols_8b[5]*ksrc[17];
 8014426:	f991 700d 	ldrsb.w	r7, [r1, #13]
            sum0 += cols_8b[4]*ksrc[18];
 801442a:	fb13 0006 	smlabb	r0, r3, r6, r0
            sum0 += cols_8b[5]*ksrc[19];
 801442e:	f99b 4013 	ldrsb.w	r4, [fp, #19]
            sum1 += cols_8b[3]*ksrc[15];
 8014432:	fb15 2208 	smlabb	r2, r5, r8, r2
            sum0 += cols_8b[6]*ksrc[20];
 8014436:	f99b a014 	ldrsb.w	sl, [fp, #20]
            sum1 += cols_8b[6]*ksrc[18];
 801443a:	f991 500e 	ldrsb.w	r5, [r1, #14]
            sum0 += cols_8b[5]*ksrc[19];
 801443e:	fb17 0804 	smlabb	r8, r7, r4, r0
            sum1 += cols_8b[4]*ksrc[16];
 8014442:	fb1e 2303 	smlabb	r3, lr, r3, r2
            sum0 += cols_8b[0]*ksrc[21];
 8014446:	9804      	ldr	r0, [sp, #16]
            sum0 += cols_8b[6]*ksrc[20];
 8014448:	fb15 820a 	smlabb	r2, r5, sl, r8
            sum0 += cols_8b[0]*ksrc[21];
 801444c:	f99b e015 	ldrsb.w	lr, [fp, #21]
 8014450:	f990 9012 	ldrsb.w	r9, [r0, #18]
            sum1 += cols_8b[5]*ksrc[17];
 8014454:	fb1c 3307 	smlabb	r3, ip, r7, r3
            sum0 += cols_8b[1]*ksrc[22];
 8014458:	f990 c013 	ldrsb.w	ip, [r0, #19]
 801445c:	f99b 7016 	ldrsb.w	r7, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 8014460:	fb19 220e 	smlabb	r2, r9, lr, r2
            sum1 += cols_8b[2]*ksrc[21];
 8014464:	f990 8014 	ldrsb.w	r8, [r0, #20]
            sum1 += cols_8b[6]*ksrc[18];
 8014468:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[7]*ksrc[19];
 801446c:	f991 900f 	ldrsb.w	r9, [r1, #15]
            sum0 += cols_8b[1]*ksrc[22];
 8014470:	fb1c 2207 	smlabb	r2, ip, r7, r2
            sum0 += cols_8b[2]*ksrc[23];
 8014474:	f99b 6017 	ldrsb.w	r6, [fp, #23]
            sum1 += cols_8b[7]*ksrc[19];
 8014478:	fb14 3309 	smlabb	r3, r4, r9, r3
            sum1 += cols_8b[8]*ksrc[20];
 801447c:	f991 4010 	ldrsb.w	r4, [r1, #16]
            sum1 += cols_8b[3]*ksrc[22];
 8014480:	f990 c015 	ldrsb.w	ip, [r0, #21]
            sum0 += cols_8b[2]*ksrc[23];
 8014484:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum1 += cols_8b[8]*ksrc[20];
 8014488:	fb1a 3304 	smlabb	r3, sl, r4, r3
            sum0 += cols_8b[3]*ksrc[24];
 801448c:	f99b 5018 	ldrsb.w	r5, [fp, #24]
            sum1 += cols_8b[4]*ksrc[23];
 8014490:	f990 9016 	ldrsb.w	r9, [r0, #22]
            sum1 += cols_8b[2]*ksrc[21];
 8014494:	fb1e 3308 	smlabb	r3, lr, r8, r3
            sum0 += cols_8b[4]*ksrc[25];
 8014498:	f99b a019 	ldrsb.w	sl, [fp, #25]
            sum0 += cols_8b[3]*ksrc[24];
 801449c:	fb1c 2205 	smlabb	r2, ip, r5, r2
            sum0 += cols_8b[5]*ksrc[26];
 80144a0:	f99b 801a 	ldrsb.w	r8, [fp, #26]
            sum1 += cols_8b[3]*ksrc[22];
 80144a4:	fb17 330c 	smlabb	r3, r7, ip, r3
 80144a8:	9103      	str	r1, [sp, #12]
            sum0 += cols_8b[4]*ksrc[25];
 80144aa:	fb19 220a 	smlabb	r2, r9, sl, r2
            sum1 += cols_8b[4]*ksrc[23];
 80144ae:	4601      	mov	r1, r0
 80144b0:	fb16 3609 	smlabb	r6, r6, r9, r3
            sum1 += cols_8b[5]*ksrc[24];
 80144b4:	f990 0017 	ldrsb.w	r0, [r0, #23]
            sum1 += cols_8b[6]*ksrc[25];
 80144b8:	f991 4018 	ldrsb.w	r4, [r1, #24]
            sum0 += cols_8b[6]*ksrc[27];
 80144bc:	f99b e01b 	ldrsb.w	lr, [fp, #27]
            sum1 += cols_8b[5]*ksrc[24];
 80144c0:	fb15 6600 	smlabb	r6, r5, r0, r6
            sum0 += cols_8b[5]*ksrc[26];
 80144c4:	fb10 2208 	smlabb	r2, r0, r8, r2
            sum0 += cols_8b[0]*ksrc[28];
 80144c8:	9b01      	ldr	r3, [sp, #4]
            sum0 += cols_8b[1]*ksrc[29];
 80144ca:	9d01      	ldr	r5, [sp, #4]
            sum1 += cols_8b[7]*ksrc[26];
 80144cc:	f991 c019 	ldrsb.w	ip, [r1, #25]
            sum0 += cols_8b[6]*ksrc[27];
 80144d0:	fb14 220e 	smlabb	r2, r4, lr, r2
            sum1 += cols_8b[8]*ksrc[27];
 80144d4:	f991 701a 	ldrsb.w	r7, [r1, #26]
            sum1 += cols_8b[6]*ksrc[25];
 80144d8:	fb1a 6404 	smlabb	r4, sl, r4, r6
            sum0 += cols_8b[0]*ksrc[28];
 80144dc:	f99b 101c 	ldrsb.w	r1, [fp, #28]
 80144e0:	f993 3018 	ldrsb.w	r3, [r3, #24]
            sum1 += cols_8b[7]*ksrc[26];
 80144e4:	fb18 440c 	smlabb	r4, r8, ip, r4
            sum0 += cols_8b[1]*ksrc[29];
 80144e8:	f995 9019 	ldrsb.w	r9, [r5, #25]
            sum0 += cols_8b[0]*ksrc[28];
 80144ec:	fb13 2301 	smlabb	r3, r3, r1, r2
            sum0 += cols_8b[1]*ksrc[29];
 80144f0:	f99b 201d 	ldrsb.w	r2, [fp, #29]
            sum1 += cols_8b[2]*ksrc[28];
 80144f4:	f995 a01a 	ldrsb.w	sl, [r5, #26]
            sum1 += cols_8b[8]*ksrc[27];
 80144f8:	fb1e 4407 	smlabb	r4, lr, r7, r4
            sum0 += cols_8b[1]*ksrc[29];
 80144fc:	fb19 3302 	smlabb	r3, r9, r2, r3
            sum0 += cols_8b[2]*ksrc[30];
 8014500:	f99b 601e 	ldrsb.w	r6, [fp, #30]
            sum1 += cols_8b[3]*ksrc[29];
 8014504:	f995 001b 	ldrsb.w	r0, [r5, #27]
            sum1 += cols_8b[2]*ksrc[28];
 8014508:	fb11 440a 	smlabb	r4, r1, sl, r4
            sum0 += cols_8b[2]*ksrc[30];
 801450c:	fb1a 3806 	smlabb	r8, sl, r6, r3
            sum0 += cols_8b[3]*ksrc[31];
 8014510:	f99b 301f 	ldrsb.w	r3, [fp, #31]
            sum1 += cols_8b[4]*ksrc[30];
 8014514:	462f      	mov	r7, r5
            sum0 += cols_8b[4]*ksrc[32];
 8014516:	f99b 9020 	ldrsb.w	r9, [fp, #32]
            sum1 += cols_8b[4]*ksrc[30];
 801451a:	f995 501c 	ldrsb.w	r5, [r5, #28]
            sum0 += cols_8b[3]*ksrc[31];
 801451e:	fb10 8803 	smlabb	r8, r0, r3, r8
            sum1 += cols_8b[3]*ksrc[29];
 8014522:	fb12 4400 	smlabb	r4, r2, r0, r4
            sum1 += cols_8b[5]*ksrc[31];
 8014526:	f997 a01d 	ldrsb.w	sl, [r7, #29]
            sum0 += cols_8b[5]*ksrc[33];
 801452a:	f99b e021 	ldrsb.w	lr, [fp, #33]	; 0x21
            sum0 += cols_8b[4]*ksrc[32];
 801452e:	fb15 8809 	smlabb	r8, r5, r9, r8
            sum1 += cols_8b[4]*ksrc[30];
 8014532:	fb16 4405 	smlabb	r4, r6, r5, r4
            sum0 += cols_8b[6]*ksrc[34];
 8014536:	f99b c022 	ldrsb.w	ip, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 801453a:	fb1a 880e 	smlabb	r8, sl, lr, r8
            sum1 += cols_8b[5]*ksrc[31];
 801453e:	4639      	mov	r1, r7
 8014540:	fb13 440a 	smlabb	r4, r3, sl, r4
            sum1 += cols_8b[6]*ksrc[32];
 8014544:	f997 701e 	ldrsb.w	r7, [r7, #30]
 8014548:	9a05      	ldr	r2, [sp, #20]
            sum0 += cols_8b[6]*ksrc[34];
 801454a:	fb17 880c 	smlabb	r8, r7, ip, r8
            sum0 += cols_8b[0]*ksrc[35];
 801454e:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum1 += cols_8b[6]*ksrc[32];
 8014552:	fb19 4407 	smlabb	r4, r9, r7, r4
            sum1 += cols_8b[7]*ksrc[33];
 8014556:	9f01      	ldr	r7, [sp, #4]
 8014558:	4411      	add	r1, r2
            sum0 += cols_8b[1]*ksrc[36];
 801455a:	f99b 5024 	ldrsb.w	r5, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[33];
 801455e:	f997 701f 	ldrsb.w	r7, [r7, #31]
            sum0 += cols_8b[0]*ksrc[35];
 8014562:	f991 201e 	ldrsb.w	r2, [r1, #30]
            sum1 += cols_8b[7]*ksrc[33];
 8014566:	fb1e 4707 	smlabb	r7, lr, r7, r4
            sum1 += cols_8b[8]*ksrc[34];
 801456a:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[0]*ksrc[35];
 801456c:	fb12 8200 	smlabb	r2, r2, r0, r8
            sum0 += cols_8b[1]*ksrc[36];
 8014570:	f991 801f 	ldrsb.w	r8, [r1, #31]
            sum1 += cols_8b[8]*ksrc[34];
 8014574:	f994 4020 	ldrsb.w	r4, [r4, #32]
            sum1 += cols_8b[2]*ksrc[35];
 8014578:	f991 6020 	ldrsb.w	r6, [r1, #32]
            sum0 += cols_8b[1]*ksrc[36];
 801457c:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[2]*ksrc[37];
 8014580:	f99b 3025 	ldrsb.w	r3, [fp, #37]	; 0x25
            sum1 += cols_8b[8]*ksrc[34];
 8014584:	fb1c 7404 	smlabb	r4, ip, r4, r7
            sum1 += cols_8b[3]*ksrc[36];
 8014588:	f991 9021 	ldrsb.w	r9, [r1, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 801458c:	f99b 8026 	ldrsb.w	r8, [fp, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[37];
 8014590:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum1 += cols_8b[2]*ksrc[35];
 8014594:	fb10 4406 	smlabb	r4, r0, r6, r4
            sum1 += cols_8b[4]*ksrc[37];
 8014598:	f991 a022 	ldrsb.w	sl, [r1, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 801459c:	f99b c027 	ldrsb.w	ip, [fp, #39]	; 0x27
            sum0 += cols_8b[3]*ksrc[38];
 80145a0:	fb19 2208 	smlabb	r2, r9, r8, r2
            sum1 += cols_8b[3]*ksrc[36];
 80145a4:	fb15 4009 	smlabb	r0, r5, r9, r4
            sum1 += cols_8b[5]*ksrc[38];
 80145a8:	f991 e023 	ldrsb.w	lr, [r1, #35]	; 0x23
            sum0 += cols_8b[4]*ksrc[39];
 80145ac:	fb1a 220c 	smlabb	r2, sl, ip, r2
            sum0 += cols_8b[5]*ksrc[40];
 80145b0:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum1 += cols_8b[4]*ksrc[37];
 80145b4:	fb13 030a 	smlabb	r3, r3, sl, r0
 80145b8:	9c01      	ldr	r4, [sp, #4]
 80145ba:	9d07      	ldr	r5, [sp, #28]
            sum0 += cols_8b[5]*ksrc[40];
 80145bc:	fb1e 2206 	smlabb	r2, lr, r6, r2
            sum1 += cols_8b[6]*ksrc[39];
 80145c0:	f991 7024 	ldrsb.w	r7, [r1, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[38];
 80145c4:	fb18 3e0e 	smlabb	lr, r8, lr, r3
 80145c8:	442c      	add	r4, r5
            sum0 = (float) sum0 * *scales;
 80145ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
            sum0 += cols_8b[6]*ksrc[41];
 80145cc:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            sum1 += cols_8b[7]*ksrc[40];
 80145d0:	f991 9025 	ldrsb.w	r9, [r1, #37]	; 0x25
            sum1 += cols_8b[8]*ksrc[41];
 80145d4:	f991 0026 	ldrsb.w	r0, [r1, #38]	; 0x26
            sum0 += cols_8b[6]*ksrc[41];
 80145d8:	fb17 2105 	smlabb	r1, r7, r5, r2
            sum0 += cols_8b[0]*ksrc[42];
 80145dc:	f99b a02a 	ldrsb.w	sl, [fp, #42]	; 0x2a
            sum0 = (float) sum0 * *scales;
 80145e0:	ed93 7a00 	vldr	s14, [r3]
            sum0 += cols_8b[0]*ksrc[42];
 80145e4:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
 80145e8:	9b01      	ldr	r3, [sp, #4]
 80145ea:	fb12 120a 	smlabb	r2, r2, sl, r1
            sum0 += cols_8b[1]*ksrc[43];
 80145ee:	f99b 802b 	ldrsb.w	r8, [fp, #43]	; 0x2b
 80145f2:	f994 1025 	ldrsb.w	r1, [r4, #37]	; 0x25
 80145f6:	3304      	adds	r3, #4
 80145f8:	fb11 2208 	smlabb	r2, r1, r8, r2
 80145fc:	9301      	str	r3, [sp, #4]
            sum1 += cols_8b[6]*ksrc[39];
 80145fe:	fb1c e307 	smlabb	r3, ip, r7, lr
            sum1 += cols_8b[2]*ksrc[42];
 8014602:	f994 c026 	ldrsb.w	ip, [r4, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[44];
 8014606:	f99b e02c 	ldrsb.w	lr, [fp, #44]	; 0x2c
            sum1 += cols_8b[7]*ksrc[40];
 801460a:	fb16 3309 	smlabb	r3, r6, r9, r3
            sum1 += cols_8b[3]*ksrc[43];
 801460e:	f994 6027 	ldrsb.w	r6, [r4, #39]	; 0x27
            sum0 += cols_8b[2]*ksrc[44];
 8014612:	fb1c 220e 	smlabb	r2, ip, lr, r2
            sum0 += cols_8b[3]*ksrc[45];
 8014616:	f99b 702d 	ldrsb.w	r7, [fp, #45]	; 0x2d
            sum1 += cols_8b[4]*ksrc[44];
 801461a:	f994 9028 	ldrsb.w	r9, [r4, #40]	; 0x28
            sum1 += cols_8b[8]*ksrc[41];
 801461e:	fb15 3300 	smlabb	r3, r5, r0, r3
            sum0 += cols_8b[4]*ksrc[46];
 8014622:	f99b 102e 	ldrsb.w	r1, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 8014626:	fb16 2207 	smlabb	r2, r6, r7, r2
            sum1 += cols_8b[2]*ksrc[42];
 801462a:	fb1a 330c 	smlabb	r3, sl, ip, r3
            sum1 += cols_8b[5]*ksrc[45];
 801462e:	f994 a029 	ldrsb.w	sl, [r4, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[47];
 8014632:	f99b c02f 	ldrsb.w	ip, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 8014636:	fb19 2201 	smlabb	r2, r9, r1, r2
            sum1 += cols_8b[6]*ksrc[46];
 801463a:	f994 502a 	ldrsb.w	r5, [r4, #42]	; 0x2a
            sum1 += cols_8b[3]*ksrc[43];
 801463e:	fb18 3806 	smlabb	r8, r8, r6, r3
            sum0 += cols_8b[5]*ksrc[47];
 8014642:	fb1a 230c 	smlabb	r3, sl, ip, r2
            sum0 += cols_8b[6]*ksrc[48];
 8014646:	f99b 2030 	ldrsb.w	r2, [fp, #48]	; 0x30
            sum1 += cols_8b[4]*ksrc[44];
 801464a:	fb1e 8809 	smlabb	r8, lr, r9, r8
            sum0 += cols_8b[6]*ksrc[48];
 801464e:	fb15 3002 	smlabb	r0, r5, r2, r3
            sum1 += cols_8b[5]*ksrc[45];
 8014652:	fb17 880a 	smlabb	r8, r7, sl, r8
            sum0 += cols_8b[6]*ksrc[48];
 8014656:	ee07 0a90 	vmov	s15, r0
            sum1 += cols_8b[7]*ksrc[47];
 801465a:	f994 002b 	ldrsb.w	r0, [r4, #43]	; 0x2b
            sum1 += cols_8b[6]*ksrc[46];
 801465e:	fb11 8805 	smlabb	r8, r1, r5, r8
            sum1 += cols_8b[8]*ksrc[48];
 8014662:	f994 402c 	ldrsb.w	r4, [r4, #44]	; 0x2c
            sum0 = (float) sum0 * *scales;
 8014666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801466a:	9906      	ldr	r1, [sp, #24]
            sum1 += cols_8b[7]*ksrc[47];
 801466c:	fb1c 8800 	smlabb	r8, ip, r0, r8
            sum0 += output_offset;
 8014670:	982b      	ldr	r0, [sp, #172]	; 0xac
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8014672:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            sum0 = (float) sum0 * *scales;
 8014674:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[8]*ksrc[48];
 8014678:	fb12 8804 	smlabb	r8, r2, r4, r8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801467c:	1b4b      	subs	r3, r1, r5
            sum0 = (float) sum0 * *scales;
 801467e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014682:	ee17 2a90 	vmov	r2, s15
            sum1 = (float) sum1 * *scales;
 8014686:	ee07 8a90 	vmov	s15, r8
            sum0 += output_offset;
 801468a:	4402      	add	r2, r0
            sum0 = TN_MAX(sum0, activation_min);
 801468c:	982c      	ldr	r0, [sp, #176]	; 0xb0
            sum1 = (float) sum1 * *scales;
 801468e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = TN_MAX(sum0, activation_min);
 8014692:	4282      	cmp	r2, r0
 8014694:	bfb8      	it	lt
 8014696:	4602      	movlt	r2, r0
            sum0 = TN_MIN(sum0, activation_max);
 8014698:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801469a:	4282      	cmp	r2, r0
 801469c:	bfa8      	it	ge
 801469e:	4602      	movge	r2, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80146a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146a2:	541a      	strb	r2, [r3, r0]
            sum1 = (float) sum1 * *scales;
 80146a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80146a6:	ed92 7a00 	vldr	s14, [r2]
            sum1 += output_offset;
 80146aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            sum1 = (float) sum1 * *scales;
 80146ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146b4:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 80146b8:	4413      	add	r3, r2
            sum1 = TN_MAX(sum1, activation_min);
 80146ba:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80146bc:	4293      	cmp	r3, r2
 80146be:	bfb8      	it	lt
 80146c0:	4613      	movlt	r3, r2
            sum1 = TN_MIN(sum1, activation_max);
 80146c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80146c4:	4293      	cmp	r3, r2
 80146c6:	bfa8      	it	ge
 80146c8:	4613      	movge	r3, r2
 80146ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146cc:	188a      	adds	r2, r1, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80146ce:	700b      	strb	r3, [r1, #0]
        for (j = 0; j < output_x / 2; j++) {
 80146d0:	9b01      	ldr	r3, [sp, #4]
 80146d2:	9206      	str	r2, [sp, #24]
 80146d4:	9a08      	ldr	r2, [sp, #32]
 80146d6:	429a      	cmp	r2, r3
 80146d8:	f47f adfd 	bne.w	80142d6 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0xb6>
 80146dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80146de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80146e0:	4413      	add	r3, r2
 80146e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80146e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if (output_x & 1) {
 80146e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80146e8:	3301      	adds	r3, #1
 80146ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80146ec:	2a00      	cmp	r2, #0
 80146ee:	f000 816f 	beq.w	80149d0 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7b0>
            q31_t sum = bias[0] + biasR[0];
 80146f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            cols_8b += column_x + 6;
 80146f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
            q31_t sum = bias[0] + biasR[0];
 80146f6:	6813      	ldr	r3, [r2, #0]
 80146f8:	9910      	ldr	r1, [sp, #64]	; 0x40
            sum += cols_8b[0]*ksrc[7];
 80146fa:	4637      	mov	r7, r6
            cols_8b += column_x + 6;
 80146fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80146fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014700:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 8014702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014704:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8014706:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 801470a:	6812      	ldr	r2, [r2, #0]
 801470c:	9110      	str	r1, [sp, #64]	; 0x40
            sum += cols_8b[0]*ksrc[0];
 801470e:	992e      	ldr	r1, [sp, #184]	; 0xb8
            q31_t sum = bias[0] + biasR[0];
 8014710:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8014712:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[0]*ksrc[0];
 8014714:	f991 4000 	ldrsb.w	r4, [r1]
            cols_8b += column_x + 6;
 8014718:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 801471a:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 801471e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8014722:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 8014726:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[1]*ksrc[1];
 8014728:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 801472c:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 8014730:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 8014734:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[2]*ksrc[2];
 8014736:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 801473a:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 801473e:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 8014742:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[3]*ksrc[3];
 8014744:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8014748:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 801474c:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 8014750:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[4]*ksrc[4];
 8014752:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 8014756:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 801475a:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 801475e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[5]*ksrc[5];
 8014760:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[6];
 8014764:	f99b 5006 	ldrsb.w	r5, [fp, #6]
 8014768:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 801476c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[6]*ksrc[6];
 801476e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8014772:	5792      	ldrsb	r2, [r2, r6]
 8014774:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 8014778:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 801477c:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 8014780:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 8014784:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 8014788:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 801478c:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 8014790:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 8014794:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 8014798:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 801479c:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 80147a0:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 80147a4:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 80147a8:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 80147ac:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 80147b0:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 80147b4:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 80147b8:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 80147bc:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 80147c0:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[6]*ksrc[13];
 80147c2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 80147c6:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 80147ca:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 80147ce:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 80147d2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 80147d6:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 80147da:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 80147de:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 80147e2:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 80147e6:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 80147ea:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 80147ee:	f99b 5011 	ldrsb.w	r5, [fp, #17]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80147f2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
            sum += cols_8b[4]*ksrc[18];
 80147f4:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[17];
 80147f8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 80147fc:	f99b 5012 	ldrsb.w	r5, [fp, #18]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8014800:	46b4      	mov	ip, r6
            sum += cols_8b[5]*ksrc[19];
 8014802:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8014806:	9e1d      	ldr	r6, [sp, #116]	; 0x74
            sum += cols_8b[4]*ksrc[18];
 8014808:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 801480c:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 8014810:	f991 4006 	ldrsb.w	r4, [r1, #6]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8014814:	44b4      	add	ip, r6
            sum += cols_8b[5]*ksrc[19];
 8014816:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[20];
 801481a:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 801481e:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 8014820:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 8014824:	fb14 3506 	smlabb	r5, r4, r6, r3
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8014828:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
            sum += cols_8b[0]*ksrc[21];
 801482c:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 8014830:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 8014834:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 8014838:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 801483c:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 8014840:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 8014844:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 8014848:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 801484c:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 8014850:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 8014854:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 8014858:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 801485c:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 8014860:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 8014864:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 8014868:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 801486c:	9f12      	ldr	r7, [sp, #72]	; 0x48
            sum += cols_8b[6]*ksrc[27];
 801486e:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 8014872:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 8014876:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 801487a:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 801487e:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 8014880:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 8014884:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 8014888:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 801488c:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 8014890:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 8014894:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 8014898:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 801489c:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 80148a0:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 80148a4:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 80148a8:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 80148ac:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 80148b0:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 80148b4:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 80148b8:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 80148bc:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 80148c0:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 80148c4:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 80148c8:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 80148cc:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 80148d0:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 80148d2:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 80148d6:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 80148da:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 80148de:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 80148e2:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 80148e6:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 80148ea:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 80148ee:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 80148f2:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 80148f6:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 80148fa:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 80148fe:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8014902:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8014906:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 801490a:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 801490e:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8014912:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 8014916:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 801491a:	9f12      	ldr	r7, [sp, #72]	; 0x48
            sum += cols_8b[5]*ksrc[40];
 801491c:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8014920:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014924:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 8014928:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 801492a:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 801492e:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8014932:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8014936:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 801493a:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 801493e:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 8014942:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 8014946:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 801494a:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 801494e:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 8014952:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 8014956:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 801495a:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 801495e:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 8014962:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 8014966:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 801496a:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 801496e:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 8014972:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 8014976:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 801497a:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 801497e:	9829      	ldr	r0, [sp, #164]	; 0xa4
            sum += cols_8b[6]*ksrc[48];
 8014980:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8014984:	9e11      	ldr	r6, [sp, #68]	; 0x44
            sum = (float) sum * *scales;
 8014986:	ed90 7a00 	vldr	s14, [r0]
 801498a:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 801498e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8014990:	9f17      	ldr	r7, [sp, #92]	; 0x5c
            sum = (float) sum * *scales;
 8014992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8014996:	1a71      	subs	r1, r6, r1
            sum += output_offset;
 8014998:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801499a:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 801499c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149a0:	9611      	str	r6, [sp, #68]	; 0x44
 80149a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149a6:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80149aa:	4413      	add	r3, r2
            sum = TN_MAX(sum, activation_min);
 80149ac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80149ae:	4293      	cmp	r3, r2
 80149b0:	bfb8      	it	lt
 80149b2:	4613      	movlt	r3, r2
            sum = TN_MIN(sum, activation_max);
 80149b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80149b6:	4293      	cmp	r3, r2
 80149b8:	bfa8      	it	ge
 80149ba:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80149bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80149be:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 80149c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80149c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149c4:	429a      	cmp	r2, r3
 80149c6:	f47f ac68 	bne.w	801429a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7a>
    }
}
 80149ca:	b01f      	add	sp, #124	; 0x7c
 80149cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 80149d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80149d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80149d4:	4413      	add	r3, r2
 80149d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80149d8:	932e      	str	r3, [sp, #184]	; 0xb8
 80149da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149dc:	4413      	add	r3, r2
 80149de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149e0:	9311      	str	r3, [sp, #68]	; 0x44
 80149e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149e4:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 80149e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149e8:	9310      	str	r3, [sp, #64]	; 0x40
 80149ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80149ec:	4293      	cmp	r3, r2
 80149ee:	f47f ac54 	bne.w	801429a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7a>
}
 80149f2:	b01f      	add	sp, #124	; 0x7c
 80149f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149f8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>:
{
 80149f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fc:	b093      	sub	sp, #76	; 0x4c
 80149fe:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8014a00:	f101 0e05 	add.w	lr, r1, #5
{
 8014a04:	4615      	mov	r5, r2
 8014a06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a08:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8014a0c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8014a10:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8014a14:	1cd8      	adds	r0, r3, #3
 8014a16:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 8014a1a:	2100      	movs	r1, #0
{
 8014a1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a1e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8014a22:	9310      	str	r3, [sp, #64]	; 0x40
 8014a24:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 8014a28:	3101      	adds	r1, #1
 8014a2a:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 8014a2c:	f800 3c03 	strb.w	r3, [r0, #-3]
 8014a30:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 8014a32:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8014a34:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 8014a38:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 8014a3c:	4571      	cmp	r1, lr
 8014a3e:	ddf3      	ble.n	8014a28 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 8014a40:	b1cd      	cbz	r5, 8014a76 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x7e>
 8014a42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a44:	4610      	mov	r0, r2
 8014a46:	2600      	movs	r6, #0
 8014a48:	1d8f      	adds	r7, r1, #6
 8014a4a:	19d1      	adds	r1, r2, r7
 8014a4c:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 8014a4e:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 8014a50:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 8014a52:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 8014a56:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 8014a58:	f801 3c03 	strb.w	r3, [r1, #-3]
 8014a5c:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 8014a5e:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 8014a60:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 8014a64:	f801 3c01 	strb.w	r3, [r1, #-1]
 8014a68:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 8014a6a:	d8ef      	bhi.n	8014a4c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x54>
 8014a6c:	1e69      	subs	r1, r5, #1
 8014a6e:	b289      	uxth	r1, r1
 8014a70:	fb01 7707 	mla	r7, r1, r7, r7
 8014a74:	443a      	add	r2, r7
 8014a76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a78:	1e88      	subs	r0, r1, #2
 8014a7a:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8014a7e:	4288      	cmp	r0, r1
 8014a80:	f200 8092 	bhi.w	8014ba8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1b0>
 8014a84:	2000      	movs	r0, #0
 8014a86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a88:	4606      	mov	r6, r0
 8014a8a:	f363 0007 	bfi	r0, r3, #0, #8
 8014a8e:	f101 0c06 	add.w	ip, r1, #6
 8014a92:	4611      	mov	r1, r2
 8014a94:	f363 200f 	bfi	r0, r3, #8, #8
 8014a98:	ea4f 079c 	mov.w	r7, ip, lsr #2
 8014a9c:	f363 4017 	bfi	r0, r3, #16, #8
 8014aa0:	f363 601f 	bfi	r0, r3, #24, #8
 8014aa4:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 8014aa6:	6008      	str	r0, [r1, #0]
 8014aa8:	6048      	str	r0, [r1, #4]
 8014aaa:	310c      	adds	r1, #12
 8014aac:	42b7      	cmp	r7, r6
 8014aae:	f841 0c04 	str.w	r0, [r1, #-4]
 8014ab2:	d8f7      	bhi.n	8014aa4 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xac>
 8014ab4:	f02c 0003 	bic.w	r0, ip, #3
 8014ab8:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8014abc:	4560      	cmp	r0, ip
 8014abe:	b287      	uxth	r7, r0
 8014ac0:	eb02 0106 	add.w	r1, r2, r6
 8014ac4:	d010      	beq.n	8014ae8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 8014ac6:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 8014ac8:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 8014aca:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 8014acc:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 8014ace:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8014ad0:	4572      	cmp	r2, lr
 8014ad2:	dc09      	bgt.n	8014ae8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
 8014ad4:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 8014ad6:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8014ad8:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 8014ada:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8014adc:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 8014ade:	4596      	cmp	lr, r2
 8014ae0:	db02      	blt.n	8014ae8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 8014ae2:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8014ae4:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8014ae6:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8014ae8:	2c00      	cmp	r4, #0
 8014aea:	d059      	beq.n	8014ba0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1a8>
 8014aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014aee:	1e63      	subs	r3, r4, #1
 8014af0:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8014af2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	b2b6      	uxth	r6, r6
 8014afa:	3214      	adds	r2, #20
 8014afc:	3301      	adds	r3, #1
 8014afe:	1c77      	adds	r7, r6, #1
 8014b00:	9211      	str	r2, [sp, #68]	; 0x44
 8014b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b04:	3607      	adds	r6, #7
 8014b06:	fb07 f804 	mul.w	r8, r7, r4
 8014b0a:	18d3      	adds	r3, r2, r3
 8014b0c:	960d      	str	r6, [sp, #52]	; 0x34
 8014b0e:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8014b10:	b1f5      	cbz	r5, 8014b50 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x158>
 8014b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b14:	b1e3      	cbz	r3, 8014b50 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x158>
 8014b16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014b18:	f04f 0e00 	mov.w	lr, #0
 8014b1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014b1e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8014b22:	eb03 0c02 	add.w	ip, r3, r2
 8014b26:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014b28:	eb07 000c 	add.w	r0, r7, ip
 8014b2c:	4662      	mov	r2, ip
 8014b2e:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 8014b30:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8014b34:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8014b36:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8014b3a:	4282      	cmp	r2, r0
 8014b3c:	d1f8      	bne.n	8014b30 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x138>
 8014b3e:	f10e 0e01 	add.w	lr, lr, #1
 8014b42:	44c1      	add	r9, r8
 8014b44:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 8014b46:	fa1f f38e 	uxth.w	r3, lr
 8014b4a:	429d      	cmp	r5, r3
 8014b4c:	d8ec      	bhi.n	8014b28 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x130>
 8014b4e:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8014b50:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8014b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b54:	9604      	str	r6, [sp, #16]
 8014b56:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b5a:	9603      	str	r6, [sp, #12]
 8014b5c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8014b5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014b60:	9601      	str	r6, [sp, #4]
 8014b62:	f106 0904 	add.w	r9, r6, #4
 8014b66:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8014b68:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8014b6a:	9302      	str	r3, [sp, #8]
        input++;
 8014b6c:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8014b6e:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 8014b70:	3631      	adds	r6, #49	; 0x31
        input++;
 8014b72:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8014b74:	465b      	mov	r3, fp
 8014b76:	9207      	str	r2, [sp, #28]
 8014b78:	4652      	mov	r2, sl
 8014b7a:	9106      	str	r1, [sp, #24]
 8014b7c:	f10b 0b04 	add.w	fp, fp, #4
 8014b80:	9005      	str	r0, [sp, #20]
 8014b82:	f10a 0a04 	add.w	sl, sl, #4
 8014b86:	9408      	str	r4, [sp, #32]
 8014b88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014b8a:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 8014b8c:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8014b8e:	f7ff fb47 	bl	8014220 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 8014b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d002      	beq.n	8014ba0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8014b9a:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8014b9e:	e7b7      	b.n	8014b10 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x118>
}
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	b013      	add	sp, #76	; 0x4c
 8014ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba8:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8014baa:	2100      	movs	r1, #0
 8014bac:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 8014bae:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 8014bb2:	f802 3c02 	strb.w	r3, [r2, #-2]
 8014bb6:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8014bb8:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8014bba:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 8014bbe:	4571      	cmp	r1, lr
 8014bc0:	ddf4      	ble.n	8014bac <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1b4>
 8014bc2:	e791      	b.n	8014ae8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>

08014bc4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask>:
    const uint16_t output_y, const uint16_t output_x,
    const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
    q7_t *output, q7_t *output_mask, const int mask_idx, const int32_t output_offset,
    const int32_t activation_min, const int32_t activation_max,
    q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8014bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc8:	b0a3      	sub	sp, #140	; 0x8c
 8014bca:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    #define STRIDE 2
    int i, j;
    q7_t mask_value;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8014bce:	4603      	mov	r3, r0
 8014bd0:	9016      	str	r0, [sp, #88]	; 0x58
{
 8014bd2:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 8014bd6:	f8dd e0d0 	ldr.w	lr, [sp, #208]	; 0xd0
 8014bda:	f8bd 00d4 	ldrh.w	r0, [sp, #212]	; 0xd4
    for (i = 0; i < output_y; i++) {
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	f000 8433 	beq.w	801544a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x886>
                sum0 = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + j * 2) * channel_offset] = sum0;
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014be4:	2201      	movs	r2, #1
 8014be6:	4603      	mov	r3, r0
 8014be8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 8014bea:	1d85      	adds	r5, r0, #6
 8014bec:	fa00 f402 	lsl.w	r4, r0, r2
 8014bf0:	4013      	ands	r3, r2
 8014bf2:	40b2      	lsls	r2, r6
        for (j = 0; j < output_x / 2; j++) {
 8014bf4:	084e      	lsrs	r6, r1, #1
 8014bf6:	9420      	str	r4, [sp, #128]	; 0x80
 8014bf8:	4404      	add	r4, r0
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014bfa:	b2d7      	uxtb	r7, r2
 8014bfc:	f1c3 0306 	rsb	r3, r3, #6
 8014c00:	941f      	str	r4, [sp, #124]	; 0x7c
 8014c02:	0064      	lsls	r4, r4, #1
 8014c04:	1e4a      	subs	r2, r1, #1
 8014c06:	901b      	str	r0, [sp, #108]	; 0x6c
 8014c08:	9421      	str	r4, [sp, #132]	; 0x84
 8014c0a:	00b4      	lsls	r4, r6, #2
 8014c0c:	0080      	lsls	r0, r0, #2
 8014c0e:	9515      	str	r5, [sp, #84]	; 0x54
 8014c10:	941c      	str	r4, [sp, #112]	; 0x70
 8014c12:	195d      	adds	r5, r3, r5
 8014c14:	9c36      	ldr	r4, [sp, #216]	; 0xd8
            else
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014c16:	43fb      	mvns	r3, r7
 8014c18:	901e      	str	r0, [sp, #120]	; 0x78
 8014c1a:	fb04 f202 	mul.w	r2, r4, r2
        for (j = 0; j < output_x / 2; j++) {
 8014c1e:	9617      	str	r6, [sp, #92]	; 0x5c
 8014c20:	9212      	str	r2, [sp, #72]	; 0x48
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014c22:	b2da      	uxtb	r2, r3
 8014c24:	4603      	mov	r3, r0
 8014c26:	981b      	ldr	r0, [sp, #108]	; 0x6c
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014c28:	9711      	str	r7, [sp, #68]	; 0x44
 8014c2a:	4403      	add	r3, r0
 8014c2c:	9519      	str	r5, [sp, #100]	; 0x64
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014c2e:	920c      	str	r2, [sp, #48]	; 0x30
 8014c30:	931d      	str	r3, [sp, #116]	; 0x74
 8014c32:	f001 0301 	and.w	r3, r1, #1
 8014c36:	9414      	str	r4, [sp, #80]	; 0x50
 8014c38:	9318      	str	r3, [sp, #96]	; 0x60
 8014c3a:	4623      	mov	r3, r4
 8014c3c:	fb03 f301 	mul.w	r3, r3, r1
 8014c40:	931a      	str	r3, [sp, #104]	; 0x68
 8014c42:	0063      	lsls	r3, r4, #1
 8014c44:	9310      	str	r3, [sp, #64]	; 0x40
    for (i = 0; i < output_y; i++) {
 8014c46:	2300      	movs	r3, #0
 8014c48:	9313      	str	r3, [sp, #76]	; 0x4c
        for (j = 0; j < output_x / 2; j++) {
 8014c4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 8287 	beq.w	8015160 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x59c>
 8014c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c54:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8014c56:	4473      	add	r3, lr
 8014c58:	9301      	str	r3, [sp, #4]
 8014c5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014c5c:	4473      	add	r3, lr
 8014c5e:	9303      	str	r3, [sp, #12]
 8014c60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014c62:	4473      	add	r3, lr
 8014c64:	9302      	str	r3, [sp, #8]
 8014c66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014c68:	4473      	add	r3, lr
 8014c6a:	9308      	str	r3, [sp, #32]
 8014c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c6e:	4473      	add	r3, lr
 8014c70:	9306      	str	r3, [sp, #24]
 8014c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c74:	eb0e 0703 	add.w	r7, lr, r3
 8014c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c7a:	1a9a      	subs	r2, r3, r2
 8014c7c:	9305      	str	r3, [sp, #20]
 8014c7e:	9707      	str	r7, [sp, #28]
 8014c80:	9204      	str	r2, [sp, #16]
 8014c82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c84:	4472      	add	r2, lr
 8014c86:	920d      	str	r2, [sp, #52]	; 0x34
 8014c88:	e05b      	b.n	8014d42 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x17e>
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	461d      	mov	r5, r3
 8014c8e:	bfb8      	it	lt
 8014c90:	1ddd      	addlt	r5, r3, #7
 8014c92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014c94:	10ed      	asrs	r5, r5, #3
 8014c96:	eb03 0805 	add.w	r8, r3, r5
            if (sum0 > activation_max){
 8014c9a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014c9c:	4283      	cmp	r3, r0
 8014c9e:	f2c0 823c 	blt.w	801511a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x556>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8014ca2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014ca4:	9904      	ldr	r1, [sp, #16]
 8014ca6:	5458      	strb	r0, [r3, r1]
                BIT_SET(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8014ca8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014caa:	5d58      	ldrb	r0, [r3, r5]
 8014cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cae:	4318      	orrs	r0, r3
 8014cb0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014cb2:	5558      	strb	r0, [r3, r5]

            sum1 = (float) sum1 * *scales;
 8014cb4:	ee07 2a90 	vmov	s15, r2
 8014cb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
            sum1 += output_offset;
 8014cba:	9a31      	ldr	r2, [sp, #196]	; 0xc4
            sum1 = (float) sum1 * *scales;
 8014cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cc0:	ed93 7a00 	vldr	s14, [r3]
 8014cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ccc:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8014cd0:	4413      	add	r3, r2
            mask_value = 1;
            if (sum1 < activation_min){
 8014cd2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	f340 822b 	ble.w	8015130 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x56c>
 8014cda:	9b05      	ldr	r3, [sp, #20]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	461a      	mov	r2, r3
 8014ce0:	bfb8      	it	lt
 8014ce2:	1dda      	addlt	r2, r3, #7
 8014ce4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014ce6:	eb03 02e2 	add.w	r2, r3, r2, asr #3
                sum1 = activation_min;
                mask_value = 0;
            }
            if (sum1 > activation_max){
 8014cea:	e9dd 3132 	ldrd	r3, r1, [sp, #200]	; 0xc8
 8014cee:	428b      	cmp	r3, r1
 8014cf0:	dd00      	ble.n	8014cf4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x130>
                sum1 = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8014cf2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014cf4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8014cf6:	9805      	ldr	r0, [sp, #20]
 8014cf8:	540b      	strb	r3, [r1, r0]
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 8014cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cfc:	7813      	ldrb	r3, [r2, #0]
 8014cfe:	400b      	ands	r3, r1
 8014d00:	7013      	strb	r3, [r2, #0]
 8014d02:	9a05      	ldr	r2, [sp, #20]
 8014d04:	9b01      	ldr	r3, [sp, #4]
 8014d06:	4611      	mov	r1, r2
 8014d08:	9a04      	ldr	r2, [sp, #16]

            cols_8b_iterptr += STRIDE * 2;
 8014d0a:	f10e 0e04 	add.w	lr, lr, #4
 8014d0e:	3304      	adds	r3, #4
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	9b03      	ldr	r3, [sp, #12]
 8014d14:	3304      	adds	r3, #4
 8014d16:	9303      	str	r3, [sp, #12]
 8014d18:	9b02      	ldr	r3, [sp, #8]
 8014d1a:	3304      	adds	r3, #4
 8014d1c:	9302      	str	r3, [sp, #8]
 8014d1e:	9b08      	ldr	r3, [sp, #32]
 8014d20:	3304      	adds	r3, #4
 8014d22:	9308      	str	r3, [sp, #32]
 8014d24:	9b06      	ldr	r3, [sp, #24]
 8014d26:	3304      	adds	r3, #4
 8014d28:	9306      	str	r3, [sp, #24]
 8014d2a:	9b07      	ldr	r3, [sp, #28]
 8014d2c:	3304      	adds	r3, #4
 8014d2e:	9307      	str	r3, [sp, #28]
 8014d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d32:	4419      	add	r1, r3
 8014d34:	441a      	add	r2, r3
        for (j = 0; j < output_x / 2; j++) {
 8014d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d38:	9105      	str	r1, [sp, #20]
 8014d3a:	459e      	cmp	lr, r3
 8014d3c:	9204      	str	r2, [sp, #16]
 8014d3e:	f000 820f 	beq.w	8015160 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x59c>
            q31_t sum0 = bias[0] + biasR[0];
 8014d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	6812      	ldr	r2, [r2, #0]
            sum0 += cols_8b[0]*ksrc[0];
 8014d4a:	f99c 5000 	ldrsb.w	r5, [ip]
            q31_t sum0 = bias[0] + biasR[0];
 8014d4e:	441a      	add	r2, r3
            sum0 += cols_8b[0]*ksrc[0];
 8014d50:	f99e 1000 	ldrsb.w	r1, [lr]
            sum0 += cols_8b[1]*ksrc[1];
 8014d54:	f99c 8001 	ldrsb.w	r8, [ip, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8014d58:	fb11 2105 	smlabb	r1, r1, r5, r2
            sum0 += cols_8b[1]*ksrc[1];
 8014d5c:	f99e 3001 	ldrsb.w	r3, [lr, #1]
            sum1 += cols_8b[2]*ksrc[0];
 8014d60:	f99e 0002 	ldrsb.w	r0, [lr, #2]
            sum0 += cols_8b[2]*ksrc[2];
 8014d64:	f99c 4002 	ldrsb.w	r4, [ip, #2]
            sum0 += cols_8b[1]*ksrc[1];
 8014d68:	fb13 1108 	smlabb	r1, r3, r8, r1
            sum1 += cols_8b[3]*ksrc[1];
 8014d6c:	f99e 6003 	ldrsb.w	r6, [lr, #3]
            sum1 += cols_8b[2]*ksrc[0];
 8014d70:	fb15 2200 	smlabb	r2, r5, r0, r2
            sum0 += cols_8b[2]*ksrc[2];
 8014d74:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[3]*ksrc[3];
 8014d78:	f99c 5003 	ldrsb.w	r5, [ip, #3]
            sum1 += cols_8b[4]*ksrc[2];
 8014d7c:	f99e 0004 	ldrsb.w	r0, [lr, #4]
            sum1 += cols_8b[3]*ksrc[1];
 8014d80:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum0 += cols_8b[3]*ksrc[3];
 8014d84:	fb16 1105 	smlabb	r1, r6, r5, r1
            sum0 += cols_8b[4]*ksrc[4];
 8014d88:	f99c 8004 	ldrsb.w	r8, [ip, #4]
            sum1 += cols_8b[5]*ksrc[3];
 8014d8c:	f99e 6005 	ldrsb.w	r6, [lr, #5]
            sum1 += cols_8b[4]*ksrc[2];
 8014d90:	fb14 2200 	smlabb	r2, r4, r0, r2
            sum0 += cols_8b[4]*ksrc[4];
 8014d94:	fb10 1308 	smlabb	r3, r0, r8, r1
            sum0 += cols_8b[5]*ksrc[5];
 8014d98:	f99c 4005 	ldrsb.w	r4, [ip, #5]
            sum0 += cols_8b[0]*ksrc[7];
 8014d9c:	9f01      	ldr	r7, [sp, #4]
            sum1 += cols_8b[5]*ksrc[3];
 8014d9e:	fb15 2206 	smlabb	r2, r5, r6, r2
            sum0 += cols_8b[5]*ksrc[5];
 8014da2:	fb16 3304 	smlabb	r3, r6, r4, r3
            sum1 += cols_8b[6]*ksrc[4];
 8014da6:	f99e 0006 	ldrsb.w	r0, [lr, #6]
            sum0 += cols_8b[6]*ksrc[6];
 8014daa:	f99c 6006 	ldrsb.w	r6, [ip, #6]
            sum1 += cols_8b[6]*ksrc[4];
 8014dae:	fb18 2500 	smlabb	r5, r8, r0, r2
            sum0 += cols_8b[0]*ksrc[7];
 8014db2:	f99c 1007 	ldrsb.w	r1, [ip, #7]
 8014db6:	f997 2006 	ldrsb.w	r2, [r7, #6]
            sum0 += cols_8b[6]*ksrc[6];
 8014dba:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum0 += cols_8b[1]*ksrc[8];
 8014dbe:	f99c 3008 	ldrsb.w	r3, [ip, #8]
            sum0 += cols_8b[0]*ksrc[7];
 8014dc2:	fb12 0001 	smlabb	r0, r2, r1, r0
            sum0 += cols_8b[1]*ksrc[8];
 8014dc6:	f997 2007 	ldrsb.w	r2, [r7, #7]
            sum1 += cols_8b[2]*ksrc[7];
 8014dca:	f997 9008 	ldrsb.w	r9, [r7, #8]
            sum0 += cols_8b[1]*ksrc[8];
 8014dce:	fb12 0003 	smlabb	r0, r2, r3, r0
            sum1 += cols_8b[7]*ksrc[5];
 8014dd2:	f99e 2007 	ldrsb.w	r2, [lr, #7]
            sum0 += cols_8b[2]*ksrc[9];
 8014dd6:	f99c b009 	ldrsb.w	fp, [ip, #9]
            sum1 += cols_8b[7]*ksrc[5];
 8014dda:	fb14 5202 	smlabb	r2, r4, r2, r5
            sum1 += cols_8b[8]*ksrc[6];
 8014dde:	f99e 4008 	ldrsb.w	r4, [lr, #8]
            sum1 += cols_8b[3]*ksrc[8];
 8014de2:	f997 8009 	ldrsb.w	r8, [r7, #9]
            sum0 += cols_8b[2]*ksrc[9];
 8014de6:	fb19 000b 	smlabb	r0, r9, fp, r0
            sum1 += cols_8b[8]*ksrc[6];
 8014dea:	fb16 2404 	smlabb	r4, r6, r4, r2
            sum0 += cols_8b[3]*ksrc[10];
 8014dee:	f99c a00a 	ldrsb.w	sl, [ip, #10]
            sum1 += cols_8b[4]*ksrc[9];
 8014df2:	f997 500a 	ldrsb.w	r5, [r7, #10]
            sum1 += cols_8b[2]*ksrc[7];
 8014df6:	fb11 4109 	smlabb	r1, r1, r9, r4
            sum0 += cols_8b[4]*ksrc[11];
 8014dfa:	f99c 200b 	ldrsb.w	r2, [ip, #11]
            sum0 += cols_8b[3]*ksrc[10];
 8014dfe:	fb18 000a 	smlabb	r0, r8, sl, r0
            sum1 += cols_8b[3]*ksrc[8];
 8014e02:	fb13 1108 	smlabb	r1, r3, r8, r1
            sum0 += cols_8b[4]*ksrc[11];
 8014e06:	9209      	str	r2, [sp, #36]	; 0x24
 8014e08:	fb15 0002 	smlabb	r0, r5, r2, r0
            sum1 += cols_8b[5]*ksrc[10];
 8014e0c:	f997 600b 	ldrsb.w	r6, [r7, #11]
            sum1 += cols_8b[4]*ksrc[9];
 8014e10:	fb1b 1105 	smlabb	r1, fp, r5, r1
            sum0 += cols_8b[5]*ksrc[12];
 8014e14:	f99c 400c 	ldrsb.w	r4, [ip, #12]
            sum1 += cols_8b[6]*ksrc[11];
 8014e18:	f997 900c 	ldrsb.w	r9, [r7, #12]
            sum0 += cols_8b[5]*ksrc[12];
 8014e1c:	fb16 0004 	smlabb	r0, r6, r4, r0
            sum1 += cols_8b[7]*ksrc[12];
 8014e20:	f997 800d 	ldrsb.w	r8, [r7, #13]
            sum0 += cols_8b[6]*ksrc[13];
 8014e24:	f99c 300d 	ldrsb.w	r3, [ip, #13]
            sum1 += cols_8b[5]*ksrc[10];
 8014e28:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum0 += cols_8b[0]*ksrc[14];
 8014e2c:	9f03      	ldr	r7, [sp, #12]
            sum1 += cols_8b[6]*ksrc[11];
 8014e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            sum0 += cols_8b[6]*ksrc[13];
 8014e30:	fb19 0b03 	smlabb	fp, r9, r3, r0
            sum0 += cols_8b[0]*ksrc[14];
 8014e34:	f99c 500e 	ldrsb.w	r5, [ip, #14]
            sum0 += cols_8b[1]*ksrc[15];
 8014e38:	f997 a00d 	ldrsb.w	sl, [r7, #13]
            sum1 += cols_8b[6]*ksrc[11];
 8014e3c:	fb12 1209 	smlabb	r2, r2, r9, r1
            sum0 += cols_8b[0]*ksrc[14];
 8014e40:	f997 000c 	ldrsb.w	r0, [r7, #12]
            sum1 += cols_8b[2]*ksrc[14];
 8014e44:	f997 100e 	ldrsb.w	r1, [r7, #14]
            sum1 += cols_8b[7]*ksrc[12];
 8014e48:	fb14 2208 	smlabb	r2, r4, r8, r2
            sum1 += cols_8b[8]*ksrc[13];
 8014e4c:	9f01      	ldr	r7, [sp, #4]
            sum0 += cols_8b[0]*ksrc[14];
 8014e4e:	fb10 b005 	smlabb	r0, r0, r5, fp
            sum0 += cols_8b[1]*ksrc[15];
 8014e52:	f99c 600f 	ldrsb.w	r6, [ip, #15]
            sum1 += cols_8b[8]*ksrc[13];
 8014e56:	f997 800e 	ldrsb.w	r8, [r7, #14]
            sum0 += cols_8b[1]*ksrc[15];
 8014e5a:	fb1a 0006 	smlabb	r0, sl, r6, r0
            sum1 += cols_8b[3]*ksrc[15];
 8014e5e:	9f03      	ldr	r7, [sp, #12]
            sum0 += cols_8b[2]*ksrc[16];
 8014e60:	f99c a010 	ldrsb.w	sl, [ip, #16]
            sum1 += cols_8b[8]*ksrc[13];
 8014e64:	fb13 2208 	smlabb	r2, r3, r8, r2
            sum1 += cols_8b[3]*ksrc[15];
 8014e68:	f997 400f 	ldrsb.w	r4, [r7, #15]
            sum0 += cols_8b[3]*ksrc[17];
 8014e6c:	f99c 9011 	ldrsb.w	r9, [ip, #17]
            sum0 += cols_8b[2]*ksrc[16];
 8014e70:	fb11 000a 	smlabb	r0, r1, sl, r0
            sum1 += cols_8b[2]*ksrc[14];
 8014e74:	fb15 2201 	smlabb	r2, r5, r1, r2
            sum1 += cols_8b[4]*ksrc[16];
 8014e78:	f997 3010 	ldrsb.w	r3, [r7, #16]
            sum0 += cols_8b[4]*ksrc[18];
 8014e7c:	f99c 8012 	ldrsb.w	r8, [ip, #18]
            sum0 += cols_8b[3]*ksrc[17];
 8014e80:	fb14 0009 	smlabb	r0, r4, r9, r0
            sum1 += cols_8b[3]*ksrc[15];
 8014e84:	fb16 2204 	smlabb	r2, r6, r4, r2
            sum1 += cols_8b[5]*ksrc[17];
 8014e88:	f997 1011 	ldrsb.w	r1, [r7, #17]
            sum0 += cols_8b[5]*ksrc[19];
 8014e8c:	f99c 5013 	ldrsb.w	r5, [ip, #19]
            sum0 += cols_8b[4]*ksrc[18];
 8014e90:	fb13 0008 	smlabb	r0, r3, r8, r0
            sum0 += cols_8b[6]*ksrc[20];
 8014e94:	f99c 4014 	ldrsb.w	r4, [ip, #20]
            sum1 += cols_8b[4]*ksrc[16];
 8014e98:	fb1a 2303 	smlabb	r3, sl, r3, r2
            sum0 += cols_8b[0]*ksrc[21];
 8014e9c:	f99c 2015 	ldrsb.w	r2, [ip, #21]
            sum0 += cols_8b[5]*ksrc[19];
 8014ea0:	fb11 0005 	smlabb	r0, r1, r5, r0
            sum1 += cols_8b[6]*ksrc[18];
 8014ea4:	f997 6012 	ldrsb.w	r6, [r7, #18]
            sum1 += cols_8b[5]*ksrc[17];
 8014ea8:	fb19 3301 	smlabb	r3, r9, r1, r3
            sum0 += cols_8b[6]*ksrc[20];
 8014eac:	e9cd 2409 	strd	r2, r4, [sp, #36]	; 0x24
            sum0 += cols_8b[0]*ksrc[21];
 8014eb0:	9a02      	ldr	r2, [sp, #8]
            sum0 += cols_8b[6]*ksrc[20];
 8014eb2:	fb16 0004 	smlabb	r0, r6, r4, r0
            sum0 += cols_8b[0]*ksrc[21];
 8014eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
            sum1 += cols_8b[6]*ksrc[18];
 8014eb8:	fb18 3306 	smlabb	r3, r8, r6, r3
            sum0 += cols_8b[0]*ksrc[21];
 8014ebc:	f992 a012 	ldrsb.w	sl, [r2, #18]
            sum0 += cols_8b[1]*ksrc[22];
 8014ec0:	f992 9013 	ldrsb.w	r9, [r2, #19]
            sum0 += cols_8b[0]*ksrc[21];
 8014ec4:	fb1a 0001 	smlabb	r0, sl, r1, r0
            sum0 += cols_8b[1]*ksrc[22];
 8014ec8:	f99c 1016 	ldrsb.w	r1, [ip, #22]
            sum1 += cols_8b[2]*ksrc[21];
 8014ecc:	f992 a014 	ldrsb.w	sl, [r2, #20]
            sum0 += cols_8b[1]*ksrc[22];
 8014ed0:	fb19 0001 	smlabb	r0, r9, r1, r0
            sum0 += cols_8b[2]*ksrc[23];
 8014ed4:	f99c 6017 	ldrsb.w	r6, [ip, #23]
            sum1 += cols_8b[7]*ksrc[19];
 8014ed8:	f997 b013 	ldrsb.w	fp, [r7, #19]
            sum1 += cols_8b[3]*ksrc[22];
 8014edc:	f992 8015 	ldrsb.w	r8, [r2, #21]
            sum0 += cols_8b[2]*ksrc[23];
 8014ee0:	fb1a 0006 	smlabb	r0, sl, r6, r0
            sum1 += cols_8b[7]*ksrc[19];
 8014ee4:	fb15 330b 	smlabb	r3, r5, fp, r3
            sum0 += cols_8b[3]*ksrc[24];
 8014ee8:	f99c 9018 	ldrsb.w	r9, [ip, #24]
            sum1 += cols_8b[8]*ksrc[20];
 8014eec:	f997 5014 	ldrsb.w	r5, [r7, #20]
 8014ef0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            sum0 += cols_8b[3]*ksrc[24];
 8014ef2:	fb18 0009 	smlabb	r0, r8, r9, r0
            sum1 += cols_8b[4]*ksrc[23];
 8014ef6:	f992 b016 	ldrsb.w	fp, [r2, #22]
            sum1 += cols_8b[8]*ksrc[20];
 8014efa:	fb14 3505 	smlabb	r5, r4, r5, r3
            sum1 += cols_8b[2]*ksrc[21];
 8014efe:	9f09      	ldr	r7, [sp, #36]	; 0x24
            sum0 += cols_8b[4]*ksrc[25];
 8014f00:	f99c 3019 	ldrsb.w	r3, [ip, #25]
            sum1 += cols_8b[5]*ksrc[24];
 8014f04:	f992 4017 	ldrsb.w	r4, [r2, #23]
            sum1 += cols_8b[2]*ksrc[21];
 8014f08:	fb17 5a0a 	smlabb	sl, r7, sl, r5
            sum0 += cols_8b[4]*ksrc[25];
 8014f0c:	fb1b 0003 	smlabb	r0, fp, r3, r0
            sum0 += cols_8b[5]*ksrc[26];
 8014f10:	f99c 501a 	ldrsb.w	r5, [ip, #26]
            sum1 += cols_8b[3]*ksrc[22];
 8014f14:	fb11 a108 	smlabb	r1, r1, r8, sl
            sum1 += cols_8b[6]*ksrc[25];
 8014f18:	4617      	mov	r7, r2
            sum0 += cols_8b[5]*ksrc[26];
 8014f1a:	fb14 0005 	smlabb	r0, r4, r5, r0
            sum0 += cols_8b[6]*ksrc[27];
 8014f1e:	f99c 801b 	ldrsb.w	r8, [ip, #27]
            sum0 += cols_8b[5]*ksrc[26];
 8014f22:	9509      	str	r5, [sp, #36]	; 0x24
            sum1 += cols_8b[4]*ksrc[23];
 8014f24:	fb16 1b0b 	smlabb	fp, r6, fp, r1
            sum0 += cols_8b[0]*ksrc[28];
 8014f28:	9d08      	ldr	r5, [sp, #32]
            sum1 += cols_8b[6]*ksrc[25];
 8014f2a:	f992 2018 	ldrsb.w	r2, [r2, #24]
            sum1 += cols_8b[5]*ksrc[24];
 8014f2e:	fb19 bb04 	smlabb	fp, r9, r4, fp
            sum0 += cols_8b[0]*ksrc[28];
 8014f32:	f99c 601c 	ldrsb.w	r6, [ip, #28]
            sum0 += cols_8b[6]*ksrc[27];
 8014f36:	fb12 0108 	smlabb	r1, r2, r8, r0
            sum0 += cols_8b[0]*ksrc[28];
 8014f3a:	f995 0018 	ldrsb.w	r0, [r5, #24]
            sum0 += cols_8b[1]*ksrc[29];
 8014f3e:	f99c 401d 	ldrsb.w	r4, [ip, #29]
            sum1 += cols_8b[6]*ksrc[25];
 8014f42:	fb13 b202 	smlabb	r2, r3, r2, fp
            sum0 += cols_8b[0]*ksrc[28];
 8014f46:	fb10 1006 	smlabb	r0, r0, r6, r1
            sum0 += cols_8b[1]*ksrc[29];
 8014f4a:	f995 1019 	ldrsb.w	r1, [r5, #25]
            sum1 += cols_8b[7]*ksrc[26];
 8014f4e:	f997 a019 	ldrsb.w	sl, [r7, #25]
            sum0 += cols_8b[1]*ksrc[29];
 8014f52:	fb11 0304 	smlabb	r3, r1, r4, r0
            sum1 += cols_8b[7]*ksrc[26];
 8014f56:	9909      	ldr	r1, [sp, #36]	; 0x24
            sum1 += cols_8b[2]*ksrc[28];
 8014f58:	f995 901a 	ldrsb.w	r9, [r5, #26]
            sum1 += cols_8b[7]*ksrc[26];
 8014f5c:	fb11 220a 	smlabb	r2, r1, sl, r2
            sum1 += cols_8b[8]*ksrc[27];
 8014f60:	f997 101a 	ldrsb.w	r1, [r7, #26]
            sum0 += cols_8b[2]*ksrc[30];
 8014f64:	f99c 001e 	ldrsb.w	r0, [ip, #30]
            sum1 += cols_8b[3]*ksrc[29];
 8014f68:	462f      	mov	r7, r5
            sum1 += cols_8b[8]*ksrc[27];
 8014f6a:	fb18 2201 	smlabb	r2, r8, r1, r2
            sum0 += cols_8b[3]*ksrc[31];
 8014f6e:	f99c a01f 	ldrsb.w	sl, [ip, #31]
            sum0 += cols_8b[2]*ksrc[30];
 8014f72:	fb19 3300 	smlabb	r3, r9, r0, r3
            sum1 += cols_8b[3]*ksrc[29];
 8014f76:	f995 501b 	ldrsb.w	r5, [r5, #27]
            sum1 += cols_8b[2]*ksrc[28];
 8014f7a:	fb16 2209 	smlabb	r2, r6, r9, r2
            sum1 += cols_8b[4]*ksrc[30];
 8014f7e:	f997 101c 	ldrsb.w	r1, [r7, #28]
            sum0 += cols_8b[4]*ksrc[32];
 8014f82:	f99c 8020 	ldrsb.w	r8, [ip, #32]
            sum0 += cols_8b[3]*ksrc[31];
 8014f86:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum1 += cols_8b[3]*ksrc[29];
 8014f8a:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum1 += cols_8b[5]*ksrc[31];
 8014f8e:	f997 901d 	ldrsb.w	r9, [r7, #29]
            sum1 += cols_8b[6]*ksrc[32];
 8014f92:	f997 401e 	ldrsb.w	r4, [r7, #30]
            sum0 += cols_8b[4]*ksrc[32];
 8014f96:	fb11 3308 	smlabb	r3, r1, r8, r3
            sum0 += cols_8b[5]*ksrc[33];
 8014f9a:	f99c 6021 	ldrsb.w	r6, [ip, #33]	; 0x21
            sum1 += cols_8b[4]*ksrc[30];
 8014f9e:	fb10 2101 	smlabb	r1, r0, r1, r2
            sum0 += cols_8b[6]*ksrc[34];
 8014fa2:	f99c 5022 	ldrsb.w	r5, [ip, #34]	; 0x22
            sum0 += cols_8b[0]*ksrc[35];
 8014fa6:	f99c 0023 	ldrsb.w	r0, [ip, #35]	; 0x23
            sum0 += cols_8b[5]*ksrc[33];
 8014faa:	fb19 3306 	smlabb	r3, r9, r6, r3
            sum0 += cols_8b[6]*ksrc[34];
 8014fae:	9509      	str	r5, [sp, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[31];
 8014fb0:	fb1a 1109 	smlabb	r1, sl, r9, r1
            sum0 += cols_8b[0]*ksrc[35];
 8014fb4:	4605      	mov	r5, r0
            sum0 += cols_8b[6]*ksrc[34];
 8014fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            sum0 += cols_8b[0]*ksrc[35];
 8014fb8:	9806      	ldr	r0, [sp, #24]
            sum1 += cols_8b[6]*ksrc[32];
 8014fba:	fb18 1104 	smlabb	r1, r8, r4, r1
            sum0 += cols_8b[6]*ksrc[34];
 8014fbe:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum1 += cols_8b[7]*ksrc[33];
 8014fc2:	f997 801f 	ldrsb.w	r8, [r7, #31]
            sum0 += cols_8b[0]*ksrc[35];
 8014fc6:	f990 201e 	ldrsb.w	r2, [r0, #30]
            sum0 += cols_8b[1]*ksrc[36];
 8014fca:	f990 901f 	ldrsb.w	r9, [r0, #31]
            sum1 += cols_8b[7]*ksrc[33];
 8014fce:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum0 += cols_8b[0]*ksrc[35];
 8014fd2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum0 += cols_8b[1]*ksrc[36];
 8014fd6:	f99c 2024 	ldrsb.w	r2, [ip, #36]	; 0x24
            sum1 += cols_8b[2]*ksrc[35];
 8014fda:	f990 4020 	ldrsb.w	r4, [r0, #32]
            sum0 += cols_8b[1]*ksrc[36];
 8014fde:	920a      	str	r2, [sp, #40]	; 0x28
 8014fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            sum1 += cols_8b[3]*ksrc[36];
 8014fe2:	f990 a021 	ldrsb.w	sl, [r0, #33]	; 0x21
            sum0 += cols_8b[1]*ksrc[36];
 8014fe6:	fb19 3302 	smlabb	r3, r9, r2, r3
            sum0 += cols_8b[2]*ksrc[37];
 8014fea:	f99c 9025 	ldrsb.w	r9, [ip, #37]	; 0x25
            sum0 += cols_8b[3]*ksrc[38];
 8014fee:	f99c 8026 	ldrsb.w	r8, [ip, #38]	; 0x26
            sum1 += cols_8b[8]*ksrc[34];
 8014ff2:	f997 6020 	ldrsb.w	r6, [r7, #32]
            sum0 += cols_8b[2]*ksrc[37];
 8014ff6:	fb14 3309 	smlabb	r3, r4, r9, r3
            sum1 += cols_8b[8]*ksrc[34];
 8014ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
            sum1 += cols_8b[4]*ksrc[37];
 8014ffc:	4607      	mov	r7, r0
            sum0 += cols_8b[0]*ksrc[35];
 8014ffe:	950b      	str	r5, [sp, #44]	; 0x2c
            sum0 += cols_8b[3]*ksrc[38];
 8015000:	fb1a 3308 	smlabb	r3, sl, r8, r3
            sum1 += cols_8b[4]*ksrc[37];
 8015004:	f990 b022 	ldrsb.w	fp, [r0, #34]	; 0x22
            sum1 += cols_8b[8]*ksrc[34];
 8015008:	fb12 1106 	smlabb	r1, r2, r6, r1
            sum0 += cols_8b[4]*ksrc[39];
 801500c:	f99c 5027 	ldrsb.w	r5, [ip, #39]	; 0x27
            sum1 += cols_8b[5]*ksrc[38];
 8015010:	f990 6023 	ldrsb.w	r6, [r0, #35]	; 0x23
            sum1 += cols_8b[2]*ksrc[35];
 8015014:	980b      	ldr	r0, [sp, #44]	; 0x2c
            sum0 += cols_8b[4]*ksrc[39];
 8015016:	fb1b 3305 	smlabb	r3, fp, r5, r3
            sum1 += cols_8b[2]*ksrc[35];
 801501a:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[5]*ksrc[40];
 801501e:	f99c 0028 	ldrsb.w	r0, [ip, #40]	; 0x28
 8015022:	fb16 3400 	smlabb	r4, r6, r0, r3
            sum1 += cols_8b[6]*ksrc[39];
 8015026:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 801502a:	9309      	str	r3, [sp, #36]	; 0x24
            sum1 += cols_8b[3]*ksrc[36];
 801502c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801502e:	fb13 120a 	smlabb	r2, r3, sl, r1
            sum0 = (float) sum0 * *scales;
 8015032:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
            sum0 += cols_8b[6]*ksrc[41];
 8015034:	f99c a029 	ldrsb.w	sl, [ip, #41]	; 0x29
            sum0 = (float) sum0 * *scales;
 8015038:	ed93 7a00 	vldr	s14, [r3]
            sum1 += cols_8b[4]*ksrc[37];
 801503c:	fb19 220b 	smlabb	r2, r9, fp, r2
            sum0 += cols_8b[6]*ksrc[41];
 8015040:	9b09      	ldr	r3, [sp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[40];
 8015042:	f997 1025 	ldrsb.w	r1, [r7, #37]	; 0x25
            sum1 += cols_8b[5]*ksrc[38];
 8015046:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum0 += cols_8b[0]*ksrc[42];
 801504a:	f99c 902a 	ldrsb.w	r9, [ip, #42]	; 0x2a
            sum0 += cols_8b[6]*ksrc[41];
 801504e:	fb13 430a 	smlabb	r3, r3, sl, r4
            sum0 += cols_8b[0]*ksrc[42];
 8015052:	9c07      	ldr	r4, [sp, #28]
 8015054:	f994 b024 	ldrsb.w	fp, [r4, #36]	; 0x24
            sum0 += cols_8b[1]*ksrc[43];
 8015058:	4626      	mov	r6, r4
 801505a:	f994 8025 	ldrsb.w	r8, [r4, #37]	; 0x25
            sum0 += cols_8b[0]*ksrc[42];
 801505e:	fb1b 3309 	smlabb	r3, fp, r9, r3
            sum1 += cols_8b[6]*ksrc[39];
 8015062:	9c09      	ldr	r4, [sp, #36]	; 0x24
            sum0 += cols_8b[1]*ksrc[43];
 8015064:	f99c b02b 	ldrsb.w	fp, [ip, #43]	; 0x2b
            sum1 += cols_8b[6]*ksrc[39];
 8015068:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum1 += cols_8b[2]*ksrc[42];
 801506c:	4634      	mov	r4, r6
            sum0 += cols_8b[1]*ksrc[43];
 801506e:	fb18 330b 	smlabb	r3, r8, fp, r3
            sum1 += cols_8b[2]*ksrc[42];
 8015072:	f996 6026 	ldrsb.w	r6, [r6, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[44];
 8015076:	f99c 802c 	ldrsb.w	r8, [ip, #44]	; 0x2c
            sum1 += cols_8b[7]*ksrc[40];
 801507a:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum0 += cols_8b[3]*ksrc[45];
 801507e:	f99c 502d 	ldrsb.w	r5, [ip, #45]	; 0x2d
            sum1 += cols_8b[8]*ksrc[41];
 8015082:	f997 1026 	ldrsb.w	r1, [r7, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[44];
 8015086:	fb16 3308 	smlabb	r3, r6, r8, r3
            sum1 += cols_8b[3]*ksrc[43];
 801508a:	4627      	mov	r7, r4
 801508c:	f994 4027 	ldrsb.w	r4, [r4, #39]	; 0x27
            sum1 += cols_8b[8]*ksrc[41];
 8015090:	fb1a 2201 	smlabb	r2, sl, r1, r2
            sum0 += cols_8b[4]*ksrc[46];
 8015094:	f99c a02e 	ldrsb.w	sl, [ip, #46]	; 0x2e
            sum1 += cols_8b[4]*ksrc[44];
 8015098:	f997 0028 	ldrsb.w	r0, [r7, #40]	; 0x28
            sum0 += cols_8b[3]*ksrc[45];
 801509c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum1 += cols_8b[2]*ksrc[42];
 80150a0:	fb19 2206 	smlabb	r2, r9, r6, r2
            sum1 += cols_8b[5]*ksrc[45];
 80150a4:	f997 9029 	ldrsb.w	r9, [r7, #41]	; 0x29
            sum0 += cols_8b[4]*ksrc[46];
 80150a8:	fb10 330a 	smlabb	r3, r0, sl, r3
            sum0 += cols_8b[5]*ksrc[47];
 80150ac:	f99c 602f 	ldrsb.w	r6, [ip, #47]	; 0x2f
            sum1 += cols_8b[3]*ksrc[43];
 80150b0:	fb1b 2204 	smlabb	r2, fp, r4, r2
            sum1 += cols_8b[6]*ksrc[46];
 80150b4:	f997 102a 	ldrsb.w	r1, [r7, #42]	; 0x2a
            sum0 += cols_8b[6]*ksrc[48];
 80150b8:	f99c 4030 	ldrsb.w	r4, [ip, #48]	; 0x30
            sum0 += cols_8b[5]*ksrc[47];
 80150bc:	fb19 3306 	smlabb	r3, r9, r6, r3
            sum1 += cols_8b[4]*ksrc[44];
 80150c0:	fb18 2200 	smlabb	r2, r8, r0, r2
            sum1 += cols_8b[7]*ksrc[47];
 80150c4:	f997 b02b 	ldrsb.w	fp, [r7, #43]	; 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 80150c8:	fb11 3304 	smlabb	r3, r1, r4, r3
            sum1 += cols_8b[5]*ksrc[45];
 80150cc:	fb15 2209 	smlabb	r2, r5, r9, r2
            sum0 += cols_8b[6]*ksrc[48];
 80150d0:	ee07 3a90 	vmov	s15, r3
            sum1 += cols_8b[8]*ksrc[48];
 80150d4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
            sum1 += cols_8b[6]*ksrc[46];
 80150d8:	fb1a 2201 	smlabb	r2, sl, r1, r2
            sum0 = (float) sum0 * *scales;
 80150dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum1 += cols_8b[7]*ksrc[47];
 80150e0:	fb16 220b 	smlabb	r2, r6, fp, r2
            sum0 = (float) sum0 * *scales;
 80150e4:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[8]*ksrc[48];
 80150e8:	fb14 2203 	smlabb	r2, r4, r3, r2
            sum0 += output_offset;
 80150ec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
            sum0 = (float) sum0 * *scales;
 80150ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150f2:	ee17 0a90 	vmov	r0, s15
            sum0 += output_offset;
 80150f6:	4418      	add	r0, r3
            if (sum0 < activation_min){
 80150f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80150fa:	4283      	cmp	r3, r0
 80150fc:	9b04      	ldr	r3, [sp, #16]
 80150fe:	f77f adc4 	ble.w	8014c8a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xc6>
 8015102:	2b00      	cmp	r3, #0
 8015104:	4698      	mov	r8, r3
 8015106:	bfb8      	it	lt
 8015108:	f103 0807 	addlt.w	r8, r3, #7
 801510c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801510e:	eb03 08e8 	add.w	r8, r3, r8, asr #3
            if (sum0 > activation_max){
 8015112:	e9dd 3132 	ldrd	r3, r1, [sp, #200]	; 0xc8
 8015116:	428b      	cmp	r3, r1
 8015118:	dd00      	ble.n	801511c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x558>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 801511a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801511c:	9804      	ldr	r0, [sp, #16]
 801511e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8015120:	540b      	strb	r3, [r1, r0]
                BIT_CLEAR(output_mask[(i * output_x + j * 2) * channel_offset / 8], mask_idx);
 8015122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015124:	f898 0000 	ldrb.w	r0, [r8]
 8015128:	4018      	ands	r0, r3
 801512a:	f888 0000 	strb.w	r0, [r8]
 801512e:	e5c1      	b.n	8014cb4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0xf0>
 8015130:	9a05      	ldr	r2, [sp, #20]
            if (sum1 > activation_max){
 8015132:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8015134:	2a00      	cmp	r2, #0
 8015136:	4611      	mov	r1, r2
 8015138:	bfb8      	it	lt
 801513a:	1dd1      	addlt	r1, r2, #7
 801513c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801513e:	4298      	cmp	r0, r3
 8015140:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8015144:	440a      	add	r2, r1
 8015146:	f6ff add4 	blt.w	8014cf2 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x12e>
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 801514a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801514c:	9805      	ldr	r0, [sp, #20]
 801514e:	5413      	strb	r3, [r2, r0]
                BIT_SET(output_mask[(i * output_x + (j * 2 + 1)) * channel_offset / 8], mask_idx);
 8015150:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015152:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015154:	5c5b      	ldrb	r3, [r3, r1]
 8015156:	4313      	orrs	r3, r2
 8015158:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801515a:	5453      	strb	r3, [r2, r1]
 801515c:	4602      	mov	r2, r0
 801515e:	e5d1      	b.n	8014d04 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x140>
 8015160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015162:	3301      	adds	r3, #1
 8015164:	9313      	str	r3, [sp, #76]	; 0x4c
        }
        if (output_x & 1) {
 8015166:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015168:	2b00      	cmp	r3, #0
 801516a:	f000 815f 	beq.w	801542c <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x868>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 801516e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	6812      	ldr	r2, [r2, #0]
            sum += cols_8b[0]*ksrc[0];
 8015176:	f99e 4000 	ldrsb.w	r4, [lr]
 801517a:	f99c 5000 	ldrsb.w	r5, [ip]
            q31_t sum = bias[0] + biasR[0];
 801517e:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8015180:	f99e 2001 	ldrsb.w	r2, [lr, #1]
            sum += cols_8b[0]*ksrc[0];
 8015184:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8015188:	f99c 5001 	ldrsb.w	r5, [ip, #1]
            sum += cols_8b[2]*ksrc[2];
 801518c:	f99e 4002 	ldrsb.w	r4, [lr, #2]
            sum += cols_8b[1]*ksrc[1];
 8015190:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8015194:	f99c 5002 	ldrsb.w	r5, [ip, #2]
            sum += cols_8b[3]*ksrc[3];
 8015198:	f99e 2003 	ldrsb.w	r2, [lr, #3]
            sum += cols_8b[2]*ksrc[2];
 801519c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 80151a0:	f99c 5003 	ldrsb.w	r5, [ip, #3]
            sum += cols_8b[4]*ksrc[4];
 80151a4:	f99e 4004 	ldrsb.w	r4, [lr, #4]
            sum += cols_8b[3]*ksrc[3];
 80151a8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 80151ac:	f99c 5004 	ldrsb.w	r5, [ip, #4]
            sum += cols_8b[5]*ksrc[5];
 80151b0:	f99e 2005 	ldrsb.w	r2, [lr, #5]
            sum += cols_8b[4]*ksrc[4];
 80151b4:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 80151b8:	f99c 5005 	ldrsb.w	r5, [ip, #5]
            sum += cols_8b[6]*ksrc[6];
            cols_8b += column_x + 6;
 80151bc:	9e15      	ldr	r6, [sp, #84]	; 0x54
            sum += cols_8b[6]*ksrc[6];
 80151be:	f99e 4006 	ldrsb.w	r4, [lr, #6]
            sum += cols_8b[5]*ksrc[5];
 80151c2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[6];
 80151c6:	f99c 5006 	ldrsb.w	r5, [ip, #6]
            cols_8b += column_x + 6;
 80151ca:	eb0e 0106 	add.w	r1, lr, r6
            sum += cols_8b[0]*ksrc[7];
 80151ce:	f91e 2006 	ldrsb.w	r2, [lr, r6]
            sum += cols_8b[6]*ksrc[6];
 80151d2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 80151d6:	f99c 5007 	ldrsb.w	r5, [ip, #7]
            sum += cols_8b[1]*ksrc[8];
 80151da:	f991 4001 	ldrsb.w	r4, [r1, #1]
            sum += cols_8b[2]*ksrc[9];
            sum += cols_8b[3]*ksrc[10];
            sum += cols_8b[4]*ksrc[11];
            sum += cols_8b[5]*ksrc[12];
            sum += cols_8b[6]*ksrc[13];
            cols_8b += column_x + 6;
 80151de:	1988      	adds	r0, r1, r6
            sum += cols_8b[0]*ksrc[7];
 80151e0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 80151e4:	f99c 5008 	ldrsb.w	r5, [ip, #8]
            sum += cols_8b[2]*ksrc[9];
 80151e8:	f991 2002 	ldrsb.w	r2, [r1, #2]
            sum += cols_8b[1]*ksrc[8];
 80151ec:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 80151f0:	f99c 5009 	ldrsb.w	r5, [ip, #9]
            sum += cols_8b[3]*ksrc[10];
 80151f4:	f991 4003 	ldrsb.w	r4, [r1, #3]
            sum += cols_8b[2]*ksrc[9];
 80151f8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 80151fc:	f99c 500a 	ldrsb.w	r5, [ip, #10]
            sum += cols_8b[4]*ksrc[11];
 8015200:	f991 2004 	ldrsb.w	r2, [r1, #4]
            sum += cols_8b[3]*ksrc[10];
 8015204:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 8015208:	f99c 500b 	ldrsb.w	r5, [ip, #11]
            sum += cols_8b[5]*ksrc[12];
 801520c:	f991 4005 	ldrsb.w	r4, [r1, #5]
            sum += cols_8b[4]*ksrc[11];
 8015210:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8015214:	f99c 500c 	ldrsb.w	r5, [ip, #12]
            sum += cols_8b[6]*ksrc[13];
 8015218:	f991 2006 	ldrsb.w	r2, [r1, #6]
            sum += cols_8b[5]*ksrc[12];
 801521c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 8015220:	f99c 500d 	ldrsb.w	r5, [ip, #13]
            sum += cols_8b[0]*ksrc[14];
 8015224:	f91e 4016 	ldrsb.w	r4, [lr, r6, lsl #1]
            sum += cols_8b[6]*ksrc[13];
 8015228:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 801522c:	f99c 500e 	ldrsb.w	r5, [ip, #14]
            sum += cols_8b[1]*ksrc[15];
 8015230:	f990 2001 	ldrsb.w	r2, [r0, #1]
            sum += cols_8b[0]*ksrc[14];
 8015234:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 8015238:	f99c 500f 	ldrsb.w	r5, [ip, #15]
            sum += cols_8b[2]*ksrc[16];
 801523c:	f990 4002 	ldrsb.w	r4, [r0, #2]
            sum += cols_8b[1]*ksrc[15];
 8015240:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 8015244:	f99c 5010 	ldrsb.w	r5, [ip, #16]
            sum += cols_8b[3]*ksrc[17];
 8015248:	f990 2003 	ldrsb.w	r2, [r0, #3]
            sum += cols_8b[2]*ksrc[16];
 801524c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 8015250:	f99c 5011 	ldrsb.w	r5, [ip, #17]
            sum += cols_8b[4]*ksrc[18];
 8015254:	f990 4004 	ldrsb.w	r4, [r0, #4]
            sum += cols_8b[3]*ksrc[17];
 8015258:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 801525c:	f99c 5012 	ldrsb.w	r5, [ip, #18]
            sum += cols_8b[5]*ksrc[19];
 8015260:	f990 2005 	ldrsb.w	r2, [r0, #5]
            sum += cols_8b[4]*ksrc[18];
 8015264:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 8015268:	f99c 5013 	ldrsb.w	r5, [ip, #19]
            sum += cols_8b[6]*ksrc[20];
 801526c:	f990 4006 	ldrsb.w	r4, [r0, #6]
            sum += cols_8b[5]*ksrc[19];
 8015270:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[20];
 8015274:	f99c 5014 	ldrsb.w	r5, [ip, #20]
            cols_8b += column_x + 6;
            sum += cols_8b[0]*ksrc[21];
 8015278:	4632      	mov	r2, r6
 801527a:	f911 6016 	ldrsb.w	r6, [r1, r6, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 801527e:	fb14 3105 	smlabb	r1, r4, r5, r3
            sum += cols_8b[0]*ksrc[21];
 8015282:	f99c 3015 	ldrsb.w	r3, [ip, #21]
            cols_8b += column_x + 6;
 8015286:	1882      	adds	r2, r0, r2
            sum += cols_8b[1]*ksrc[22];
            sum += cols_8b[2]*ksrc[23];
 8015288:	f99c 4017 	ldrsb.w	r4, [ip, #23]
            sum += cols_8b[0]*ksrc[21];
 801528c:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[22];
 8015290:	f99c 3016 	ldrsb.w	r3, [ip, #22]
 8015294:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[2]*ksrc[23];
 8015298:	f992 5002 	ldrsb.w	r5, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 801529c:	fb17 1103 	smlabb	r1, r7, r3, r1
            sum += cols_8b[3]*ksrc[24];
 80152a0:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[4]*ksrc[25];
            sum += cols_8b[5]*ksrc[26];
            sum += cols_8b[6]*ksrc[27];
            cols_8b += column_x + 6;
            sum += cols_8b[0]*ksrc[28];
 80152a4:	9e15      	ldr	r6, [sp, #84]	; 0x54
            sum += cols_8b[2]*ksrc[23];
 80152a6:	fb15 1104 	smlabb	r1, r5, r4, r1
            sum += cols_8b[3]*ksrc[24];
 80152aa:	f99c 4018 	ldrsb.w	r4, [ip, #24]
            sum += cols_8b[4]*ksrc[25];
 80152ae:	f992 5004 	ldrsb.w	r5, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 80152b2:	fb13 1104 	smlabb	r1, r3, r4, r1
            sum += cols_8b[4]*ksrc[25];
 80152b6:	f99c 4019 	ldrsb.w	r4, [ip, #25]
            sum += cols_8b[5]*ksrc[26];
 80152ba:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 80152be:	fb15 1104 	smlabb	r1, r5, r4, r1
            sum += cols_8b[5]*ksrc[26];
 80152c2:	f99c 501a 	ldrsb.w	r5, [ip, #26]
            sum += cols_8b[6]*ksrc[27];
 80152c6:	f992 4006 	ldrsb.w	r4, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 80152ca:	fb13 1505 	smlabb	r5, r3, r5, r1
            sum += cols_8b[6]*ksrc[27];
 80152ce:	f99c 301b 	ldrsb.w	r3, [ip, #27]
            cols_8b += column_x + 6;
 80152d2:	1991      	adds	r1, r2, r6
            sum += cols_8b[0]*ksrc[28];
 80152d4:	f910 0016 	ldrsb.w	r0, [r0, r6, lsl #1]
            sum += cols_8b[6]*ksrc[27];
 80152d8:	fb14 5303 	smlabb	r3, r4, r3, r5
            sum += cols_8b[0]*ksrc[28];
 80152dc:	f99c 501c 	ldrsb.w	r5, [ip, #28]
            sum += cols_8b[1]*ksrc[29];
 80152e0:	f991 4001 	ldrsb.w	r4, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 80152e4:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[1]*ksrc[29];
 80152e8:	f99c 501d 	ldrsb.w	r5, [ip, #29]
            sum += cols_8b[2]*ksrc[30];
 80152ec:	f991 0002 	ldrsb.w	r0, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 80152f0:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[30];
 80152f4:	f99c 501e 	ldrsb.w	r5, [ip, #30]
            sum += cols_8b[3]*ksrc[31];
 80152f8:	f991 4003 	ldrsb.w	r4, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 80152fc:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[3]*ksrc[31];
 8015300:	f99c 501f 	ldrsb.w	r5, [ip, #31]
            sum += cols_8b[4]*ksrc[32];
 8015304:	f991 0004 	ldrsb.w	r0, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 8015308:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[32];
 801530c:	f99c 5020 	ldrsb.w	r5, [ip, #32]
            sum += cols_8b[5]*ksrc[33];
 8015310:	f991 4005 	ldrsb.w	r4, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 8015314:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[5]*ksrc[33];
 8015318:	f99c 5021 	ldrsb.w	r5, [ip, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 801531c:	f991 0006 	ldrsb.w	r0, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 8015320:	fb14 3405 	smlabb	r4, r4, r5, r3
            sum += cols_8b[6]*ksrc[34];
 8015324:	f99c 5022 	ldrsb.w	r5, [ip, #34]	; 0x22
            cols_8b += column_x + 6;
            sum += cols_8b[0]*ksrc[35];
 8015328:	4633      	mov	r3, r6
 801532a:	f912 6016 	ldrsb.w	r6, [r2, r6, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 801532e:	fb10 4205 	smlabb	r2, r0, r5, r4
            sum += cols_8b[0]*ksrc[35];
 8015332:	f99c 0023 	ldrsb.w	r0, [ip, #35]	; 0x23
            cols_8b += column_x + 6;
 8015336:	18cb      	adds	r3, r1, r3
            sum += cols_8b[1]*ksrc[36];
 8015338:	f99c 4024 	ldrsb.w	r4, [ip, #36]	; 0x24
            sum += cols_8b[0]*ksrc[35];
 801533c:	fb16 2200 	smlabb	r2, r6, r0, r2
            sum += cols_8b[2]*ksrc[37];
 8015340:	f99c 5025 	ldrsb.w	r5, [ip, #37]	; 0x25
            sum += cols_8b[1]*ksrc[36];
 8015344:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[2]*ksrc[37];
 8015348:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 801534c:	fb17 2204 	smlabb	r2, r7, r4, r2
            sum += cols_8b[3]*ksrc[38];
 8015350:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[4]*ksrc[39];
            sum += cols_8b[5]*ksrc[40];
            sum += cols_8b[6]*ksrc[41];
            cols_8b += column_x + 6;
 8015354:	9e15      	ldr	r6, [sp, #84]	; 0x54
            sum += cols_8b[2]*ksrc[37];
 8015356:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[3]*ksrc[38];
 801535a:	f99c 5026 	ldrsb.w	r5, [ip, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 801535e:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8015362:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[4]*ksrc[39];
 8015366:	f99c 4027 	ldrsb.w	r4, [ip, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 801536a:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 801536e:	fb10 2004 	smlabb	r0, r0, r4, r2
            sum += cols_8b[5]*ksrc[40];
 8015372:	f99c 4028 	ldrsb.w	r4, [ip, #40]	; 0x28
            sum += cols_8b[6]*ksrc[41];
 8015376:	f993 2006 	ldrsb.w	r2, [r3, #6]
            cols_8b += column_x + 6;
 801537a:	4433      	add	r3, r6
            sum += cols_8b[5]*ksrc[40];
 801537c:	fb15 0004 	smlabb	r0, r5, r4, r0
            sum += cols_8b[6]*ksrc[41];
 8015380:	f99c 4029 	ldrsb.w	r4, [ip, #41]	; 0x29
            sum += cols_8b[0]*ksrc[42];
 8015384:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 8015388:	fb12 0204 	smlabb	r2, r2, r4, r0
            sum += cols_8b[0]*ksrc[42];
 801538c:	f99c 402a 	ldrsb.w	r4, [ip, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8015390:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 8015394:	fb11 2204 	smlabb	r2, r1, r4, r2
            sum += cols_8b[1]*ksrc[43];
 8015398:	f99c 402b 	ldrsb.w	r4, [ip, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 801539c:	f993 1002 	ldrsb.w	r1, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 80153a0:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[2]*ksrc[44];
 80153a4:	f99c 402c 	ldrsb.w	r4, [ip, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 80153a8:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 80153ac:	fb11 2204 	smlabb	r2, r1, r4, r2
            sum += cols_8b[3]*ksrc[45];
 80153b0:	f99c 402d 	ldrsb.w	r4, [ip, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 80153b4:	f993 1004 	ldrsb.w	r1, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 80153b8:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[4]*ksrc[46];
 80153bc:	f99c 402e 	ldrsb.w	r4, [ip, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 80153c0:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 80153c4:	fb11 2204 	smlabb	r2, r1, r4, r2
            sum += cols_8b[5]*ksrc[47];
 80153c8:	f99c 402f 	ldrsb.w	r4, [ip, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 80153cc:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 80153d0:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[6]*ksrc[48];
 80153d4:	f99c 4030 	ldrsb.w	r4, [ip, #48]	; 0x30

            sum = (float) sum * *scales;
 80153d8:	992d      	ldr	r1, [sp, #180]	; 0xb4
            sum += cols_8b[6]*ksrc[48];
 80153da:	fb13 2204 	smlabb	r2, r3, r4, r2
            sum = (float) sum * *scales;
 80153de:	ed91 7a00 	vldr	s14, [r1]
 80153e2:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 80153e6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
            sum = (float) sum * *scales;
 80153e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153f4:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80153f8:	4413      	add	r3, r2
            mask_value = 1;
            if (sum < activation_min){
 80153fa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80153fc:	4293      	cmp	r3, r2
 80153fe:	da27      	bge.n	8015450 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x88c>
 8015400:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015402:	2b00      	cmp	r3, #0
 8015404:	461a      	mov	r2, r3
 8015406:	bfb8      	it	lt
 8015408:	1dda      	addlt	r2, r3, #7
 801540a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801540c:	eb03 02e2 	add.w	r2, r3, r2, asr #3
                sum = activation_min;
                mask_value = 0;
            }
            if (sum > activation_max){
 8015410:	e9dd 3132 	ldrd	r3, r1, [sp, #200]	; 0xc8
 8015414:	428b      	cmp	r3, r1
 8015416:	dd00      	ble.n	801541a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x856>
                sum = activation_max;
                mask_value = 0;
            }
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8015418:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801541a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801541c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801541e:	540b      	strb	r3, [r1, r0]
            if (mask_value == 1)
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
            else
                BIT_CLEAR(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 8015420:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015422:	7813      	ldrb	r3, [r2, #0]
 8015424:	400b      	ands	r3, r1
 8015426:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 8015428:	f10e 0e02 	add.w	lr, lr, #2
 801542c:	9a12      	ldr	r2, [sp, #72]	; 0x48
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 801542e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015430:	4611      	mov	r1, r2
 8015432:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015434:	449e      	add	lr, r3
 8015436:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015438:	441a      	add	r2, r3
 801543a:	4419      	add	r1, r3
    for (i = 0; i < output_y; i++) {
 801543c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801543e:	9214      	str	r2, [sp, #80]	; 0x50
 8015440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015442:	9112      	str	r1, [sp, #72]	; 0x48
 8015444:	4293      	cmp	r3, r2
 8015446:	f47f ac00 	bne.w	8014c4a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x86>
    }
}
 801544a:	b023      	add	sp, #140	; 0x8c
 801544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015450:	9a12      	ldr	r2, [sp, #72]	; 0x48
            if (sum > activation_max){
 8015452:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8015454:	2a00      	cmp	r2, #0
 8015456:	4611      	mov	r1, r2
 8015458:	bfb8      	it	lt
 801545a:	1dd1      	addlt	r1, r2, #7
 801545c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801545e:	4283      	cmp	r3, r0
 8015460:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8015464:	440a      	add	r2, r1
 8015466:	dcd7      	bgt.n	8015418 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x854>
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8015468:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801546a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801546c:	5413      	strb	r3, [r2, r0]
                BIT_SET(output_mask[(i * output_x + output_x - 1) * channel_offset / 8], mask_idx);
 801546e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015472:	5c5b      	ldrb	r3, [r3, r1]
 8015474:	4313      	orrs	r3, r2
 8015476:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015478:	5453      	strb	r3, [r2, r1]
 801547a:	e7d5      	b.n	8015428 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask+0x864>

0801547c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask>:
{
 801547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015480:	b095      	sub	sp, #84	; 0x54
 8015482:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8015484:	f101 0c05 	add.w	ip, r1, #5
{
 8015488:	4692      	mov	sl, r2
 801548a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801548c:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
 8015490:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
 8015494:	1cd8      	adds	r0, r3, #3
 8015496:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    for(i = 0; i < input_x + 6; i++){
 801549a:	2100      	movs	r1, #0
{
 801549c:	9311      	str	r3, [sp, #68]	; 0x44
 801549e:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 80154a2:	9312      	str	r3, [sp, #72]	; 0x48
 80154a4:	f99d 30b0 	ldrsb.w	r3, [sp, #176]	; 0xb0
    for(i = 0; i < input_x + 6; i++){
 80154a8:	3101      	adds	r1, #1
 80154aa:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 80154ac:	f800 3c03 	strb.w	r3, [r0, #-3]
 80154b0:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 80154b2:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 80154b4:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 80154b8:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 80154bc:	4561      	cmp	r1, ip
 80154be:	ddf3      	ble.n	80154a8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x2c>
    for(i = 0; i < input_y; i++){
 80154c0:	f1ba 0f00 	cmp.w	sl, #0
 80154c4:	d019      	beq.n	80154fa <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x7e>
 80154c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80154c8:	4610      	mov	r0, r2
 80154ca:	2500      	movs	r5, #0
 80154cc:	1d8e      	adds	r6, r1, #6
 80154ce:	1991      	adds	r1, r2, r6
 80154d0:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;//left
 80154d2:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 80154d4:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 80154d6:	b2af      	uxth	r7, r5
        *cols_8b++ = PAD8;//left
 80154d8:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 80154da:	f801 3c03 	strb.w	r3, [r1, #-3]
 80154de:	4430      	add	r0, r6
    for(i = 0; i < input_y; i++){
 80154e0:	45ba      	cmp	sl, r7
        *cols_8b++ = PAD8;//right
 80154e2:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 80154e6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80154ea:	4431      	add	r1, r6
    for(i = 0; i < input_y; i++){
 80154ec:	d8f0      	bhi.n	80154d0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x54>
 80154ee:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80154f2:	b289      	uxth	r1, r1
 80154f4:	fb01 6606 	mla	r6, r1, r6, r6
 80154f8:	4432      	add	r2, r6
 80154fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80154fc:	1e88      	subs	r0, r1, #2
 80154fe:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8015502:	4288      	cmp	r0, r1
 8015504:	f200 80ce 	bhi.w	80156a4 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x228>
 8015508:	2000      	movs	r0, #0
 801550a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801550c:	4605      	mov	r5, r0
 801550e:	f363 0007 	bfi	r0, r3, #0, #8
 8015512:	1d8f      	adds	r7, r1, #6
 8015514:	4611      	mov	r1, r2
 8015516:	f363 200f 	bfi	r0, r3, #8, #8
 801551a:	08be      	lsrs	r6, r7, #2
 801551c:	f363 4017 	bfi	r0, r3, #16, #8
 8015520:	f363 601f 	bfi	r0, r3, #24, #8
 8015524:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;
 8015526:	6008      	str	r0, [r1, #0]
 8015528:	6048      	str	r0, [r1, #4]
 801552a:	310c      	adds	r1, #12
 801552c:	42ae      	cmp	r6, r5
 801552e:	f841 0c04 	str.w	r0, [r1, #-4]
 8015532:	d8f7      	bhi.n	8015524 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xa8>
 8015534:	f027 0503 	bic.w	r5, r7, #3
 8015538:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 801553c:	42bd      	cmp	r5, r7
 801553e:	b2a8      	uxth	r0, r5
 8015540:	eb02 0106 	add.w	r1, r2, r6
 8015544:	d010      	beq.n	8015568 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xec>
    for(i = 0; i < input_x + 6; i++){
 8015546:	1c45      	adds	r5, r0, #1
        *cols_8b++ = PAD8;
 8015548:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 801554a:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 801554c:	b2aa      	uxth	r2, r5
        *cols_8b++ = PAD8;
 801554e:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8015550:	4562      	cmp	r2, ip
 8015552:	dc09      	bgt.n	8015568 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xec>
 8015554:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 8015556:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8015558:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 801555a:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 801555c:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 801555e:	4594      	cmp	ip, r2
 8015560:	db02      	blt.n	8015568 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xec>
        *cols_8b++ = PAD8;
 8015562:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8015564:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8015566:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8015568:	2c00      	cmp	r4, #0
 801556a:	f000 8097 	beq.w	801569c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x220>
 801556e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015570:	2500      	movs	r5, #0
 8015572:	46dc      	mov	ip, fp
 8015574:	1e5e      	subs	r6, r3, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8015576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801557a:	b2b6      	uxth	r6, r6
 801557c:	3314      	adds	r3, #20
 801557e:	1c77      	adds	r7, r6, #1
 8015580:	3607      	adds	r6, #7
 8015582:	9313      	str	r3, [sp, #76]	; 0x4c
 8015584:	46b1      	mov	r9, r6
 8015586:	fb07 f804 	mul.w	r8, r7, r4
 801558a:	4656      	mov	r6, sl
 801558c:	9710      	str	r7, [sp, #64]	; 0x40
        for(i = 0; i < input_y; i++){
 801558e:	b1f6      	cbz	r6, 80155ce <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x152>
 8015590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015592:	b1e3      	cbz	r3, 80155ce <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x152>
 8015594:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015596:	f04f 0a00 	mov.w	sl, #0
 801559a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801559c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80155a0:	eb03 0e02 	add.w	lr, r3, r2
 80155a4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80155a6:	eb07 000e 	add.w	r0, r7, lr
 80155aa:	4672      	mov	r2, lr
 80155ac:	465b      	mov	r3, fp
                *cols_8b++ = *src;// + input_offset;
 80155ae:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 80155b2:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 80155b4:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 80155b8:	4282      	cmp	r2, r0
 80155ba:	d1f8      	bne.n	80155ae <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x132>
 80155bc:	f10a 0a01 	add.w	sl, sl, #1
 80155c0:	44c3      	add	fp, r8
 80155c2:	44ce      	add	lr, r9
        for(i = 0; i < input_y; i++){
 80155c4:	fa1f f38a 	uxth.w	r3, sl
 80155c8:	429e      	cmp	r6, r3
 80155ca:	d8ec      	bhi.n	80155a6 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x12a>
 80155cc:	9710      	str	r7, [sp, #64]	; 0x40
        if (c % 8 == 0 && c > 1) output_mask++;
 80155ce:	2d01      	cmp	r5, #1
 80155d0:	f005 0e07 	and.w	lr, r5, #7
 80155d4:	d937      	bls.n	8015646 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x1ca>
 80155d6:	f1be 0f00 	cmp.w	lr, #0
 80155da:	d134      	bne.n	8015646 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x1ca>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80155dc:	9f24      	ldr	r7, [sp, #144]	; 0x90
    for (c = 0; c < input_ch; c++){
 80155de:	3501      	adds	r5, #1
        if (c % 8 == 0 && c > 1) output_mask++;
 80155e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80155e2:	9706      	str	r7, [sp, #24]
 80155e4:	f10c 0704 	add.w	r7, ip, #4
        if (c % 8 == 0 && c > 1) output_mask++;
 80155e8:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80155ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 80155ec:	970f      	str	r7, [sp, #60]	; 0x3c
    for (c = 0; c < input_ch; c++){
 80155ee:	b2ad      	uxth	r5, r5
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80155f0:	9f22      	ldr	r7, [sp, #136]	; 0x88
        if (c % 8 == 0 && c > 1) output_mask++;
 80155f2:	9327      	str	r3, [sp, #156]	; 0x9c
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80155f4:	9705      	str	r7, [sp, #20]
 80155f6:	2700      	movs	r7, #0
 80155f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80155fa:	9704      	str	r7, [sp, #16]
 80155fc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80155fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015600:	f107 0a04 	add.w	sl, r7, #4
 8015604:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015606:	9825      	ldr	r0, [sp, #148]	; 0x94
 8015608:	9702      	str	r7, [sp, #8]
        input++;
 801560a:	3701      	adds	r7, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801560c:	9203      	str	r2, [sp, #12]
        input++;
 801560e:	970d      	str	r7, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8015610:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8015612:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015614:	9701      	str	r7, [sp, #4]
 8015616:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8015618:	f102 0b04 	add.w	fp, r2, #4
 801561c:	9309      	str	r3, [sp, #36]	; 0x24
 801561e:	4663      	mov	r3, ip
 8015620:	9700      	str	r7, [sp, #0]
        ksrc += 49;
 8015622:	3731      	adds	r7, #49	; 0x31
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8015624:	9108      	str	r1, [sp, #32]
 8015626:	9007      	str	r0, [sp, #28]
 8015628:	9911      	ldr	r1, [sp, #68]	; 0x44
 801562a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801562c:	940a      	str	r4, [sp, #40]	; 0x28
        ksrc += 49;
 801562e:	971e      	str	r7, [sp, #120]	; 0x78
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8015630:	f7ff fac8 	bl	8014bc4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask>
    for (c = 0; c < input_ch; c++){
 8015634:	42a5      	cmp	r5, r4
 8015636:	d031      	beq.n	801569c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x220>
    for(i = 0; i < input_x + 6; i++){
 8015638:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 801563c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8015640:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
 8015644:	e7a3      	b.n	801558e <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x112>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8015646:	9f24      	ldr	r7, [sp, #144]	; 0x90
    for (c = 0; c < input_ch; c++){
 8015648:	3501      	adds	r5, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801564a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801564c:	4663      	mov	r3, ip
 801564e:	9706      	str	r7, [sp, #24]
 8015650:	f10c 0704 	add.w	r7, ip, #4
 8015654:	992b      	ldr	r1, [sp, #172]	; 0xac
    for (c = 0; c < input_ch; c++){
 8015656:	b2ad      	uxth	r5, r5
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8015658:	970f      	str	r7, [sp, #60]	; 0x3c
 801565a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801565c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801565e:	9705      	str	r7, [sp, #20]
 8015660:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8015662:	9209      	str	r2, [sp, #36]	; 0x24
 8015664:	f107 0a04 	add.w	sl, r7, #4
 8015668:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 801566a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801566c:	9703      	str	r7, [sp, #12]
 801566e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015670:	f102 0b04 	add.w	fp, r2, #4
 8015674:	9108      	str	r1, [sp, #32]
 8015676:	9702      	str	r7, [sp, #8]
        input++;
 8015678:	3701      	adds	r7, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801567a:	9007      	str	r0, [sp, #28]
        input++;
 801567c:	970d      	str	r7, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801567e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8015680:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015682:	9701      	str	r7, [sp, #4]
 8015684:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8015686:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015688:	9700      	str	r7, [sp, #0]
        ksrc += 49;
 801568a:	3731      	adds	r7, #49	; 0x31
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 801568c:	f8cd e010 	str.w	lr, [sp, #16]
 8015690:	940a      	str	r4, [sp, #40]	; 0x28
        ksrc += 49;
 8015692:	971e      	str	r7, [sp, #120]	; 0x78
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_mask, c % 8, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8015694:	f7ff fa96 	bl	8014bc4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq_bitmask>
    for (c = 0; c < input_ch; c++){
 8015698:	42ac      	cmp	r4, r5
 801569a:	d1cd      	bne.n	8015638 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x1bc>
}
 801569c:	2000      	movs	r0, #0
 801569e:	b015      	add	sp, #84	; 0x54
 80156a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a4:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 80156a6:	2100      	movs	r1, #0
 80156a8:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 80156aa:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 80156ae:	f802 3c02 	strb.w	r3, [r2, #-2]
 80156b2:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 80156b4:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 80156b6:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 80156ba:	4561      	cmp	r1, ip
 80156bc:	ddf4      	ble.n	80156a8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0x22c>
 80156be:	e753      	b.n	8015568 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask+0xec>

080156c0 <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
    return &buffer0[65536];
}
 80156c0:	4800      	ldr	r0, [pc, #0]	; (80156c4 <getInput+0x4>)
 80156c2:	4770      	bx	lr
 80156c4:	2001cf40 	.word	0x2001cf40

080156c8 <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 80156c8:	4800      	ldr	r0, [pc, #0]	; (80156cc <getOutput+0x4>)
 80156ca:	4770      	bx	lr
 80156cc:	20015844 	.word	0x20015844

080156d0 <invoke>:
void end2endinference(q7_t* img){
    invoke(NULL);
}
void invoke(float* labels){
 80156d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d4:	ed2d 8b02 	vpush	{d8}
 80156d8:	f5ad 4da3 	sub.w	sp, sp, #20864	; 0x5180
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 80156dc:	2600      	movs	r6, #0
 80156de:	4bcd      	ldr	r3, [pc, #820]	; (8015a14 <invoke+0x344>)
 80156e0:	f04f 087f 	mov.w	r8, #127	; 0x7f
void invoke(float* labels){
 80156e4:	b099      	sub	sp, #100	; 0x64
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 80156e6:	f04f 0a10 	mov.w	sl, #16
 80156ea:	f503 34e0 	add.w	r4, r3, #114688	; 0x1c000
 80156ee:	f5a3 3580 	sub.w	r5, r3, #65536	; 0x10000
 80156f2:	960d      	str	r6, [sp, #52]	; 0x34
 80156f4:	2280      	movs	r2, #128	; 0x80
 80156f6:	9604      	str	r6, [sp, #16]
 80156f8:	2640      	movs	r6, #64	; 0x40
 80156fa:	f8df c360 	ldr.w	ip, [pc, #864]	; 8015a5c <invoke+0x38c>
 80156fe:	4611      	mov	r1, r2
 8015700:	f8df e35c 	ldr.w	lr, [pc, #860]	; 8015a60 <invoke+0x390>
/* layer 1:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
/* layer 2:CONV_2D */
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
/* layer 3:CONV_2D */
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 8015704:	f04f 0b20 	mov.w	fp, #32
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 8015708:	4fc3      	ldr	r7, [pc, #780]	; (8015a18 <invoke+0x348>)
 801570a:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8015a64 <invoke+0x394>
void invoke(float* labels){
 801570e:	901b      	str	r0, [sp, #108]	; 0x6c
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 8015710:	4618      	mov	r0, r3
 8015712:	9507      	str	r5, [sp, #28]
 8015714:	2303      	movs	r3, #3
 8015716:	970c      	str	r7, [sp, #48]	; 0x30
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 8015718:	462f      	mov	r7, r5
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 801571a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 801571e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015722:	940b      	str	r4, [sp, #44]	; 0x2c
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
/* layer 8:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
/* layer 9:ADD */
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 8015724:	ed9f 8abd 	vldr	s16, [pc, #756]	; 8015a1c <invoke+0x34c>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 8015728:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801572c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015730:	e9cd 9e00 	strd	r9, lr, [sp]
 8015734:	e9cd c602 	strd	ip, r6, [sp, #8]
 8015738:	9605      	str	r6, [sp, #20]
 801573a:	f00f f907 	bl	802494c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 801573e:	4628      	mov	r0, r5
 8015740:	9508      	str	r5, [sp, #32]
 8015742:	4635      	mov	r5, r6
 8015744:	960d      	str	r6, [sp, #52]	; 0x34
 8015746:	2680      	movs	r6, #128	; 0x80
 8015748:	2240      	movs	r2, #64	; 0x40
 801574a:	f8df e31c 	ldr.w	lr, [pc, #796]	; 8015a68 <invoke+0x398>
 801574e:	9605      	str	r6, [sp, #20]
 8015750:	4653      	mov	r3, sl
 8015752:	4eb3      	ldr	r6, [pc, #716]	; (8015a20 <invoke+0x350>)
 8015754:	4611      	mov	r1, r2
 8015756:	f8df c314 	ldr.w	ip, [pc, #788]	; 8015a6c <invoke+0x39c>
 801575a:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8015a70 <invoke+0x3a0>
 801575e:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 8015760:	2680      	movs	r6, #128	; 0x80
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 8015762:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8015766:	9504      	str	r5, [sp, #16]
 8015768:	f8cd 9004 	str.w	r9, [sp, #4]
/* layer 34:ADD */
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
/* layer 35:CONV_2D */
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
/* layer 36:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 801576c:	f04f 0904 	mov.w	r9, #4
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 8015770:	940c      	str	r4, [sp, #48]	; 0x30
 8015772:	e9cd 5806 	strd	r5, r8, [sp, #24]
 8015776:	e9cd ce02 	strd	ip, lr, [sp, #8]
 801577a:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 801577e:	f7fc fb79 	bl	8011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 8015782:	9604      	str	r6, [sp, #16]
 8015784:	f507 3610 	add.w	r6, r7, #147456	; 0x24000
 8015788:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 8015a74 <invoke+0x3a4>
 801578c:	2240      	movs	r2, #64	; 0x40
 801578e:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8015a78 <invoke+0x3a8>
 8015792:	9607      	str	r6, [sp, #28]
 8015794:	f06f 0605 	mvn.w	r6, #5
 8015798:	9711      	str	r7, [sp, #68]	; 0x44
 801579a:	4638      	mov	r0, r7
/* layer 50:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
/* layer 51:CAST */
fptr = (float*)&buffer0[35116];
int8ptr = (int8_t*)&buffer0[35076];
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801579c:	f648 1730 	movw	r7, #35120	; 0x8930
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 80157a0:	4653      	mov	r3, sl
 80157a2:	4611      	mov	r1, r2
 80157a4:	9209      	str	r2, [sp, #36]	; 0x24
 80157a6:	9208      	str	r2, [sp, #32]
 80157a8:	f8cd c004 	str.w	ip, [sp, #4]
 80157ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80157ae:	e9cd 5805 	strd	r5, r8, [sp, #20]
 80157b2:	e9cd e602 	strd	lr, r6, [sp, #8]
 80157b6:	2508      	movs	r5, #8
 80157b8:	4e9a      	ldr	r6, [pc, #616]	; (8015a24 <invoke+0x354>)
 80157ba:	950a      	str	r5, [sp, #40]	; 0x28
 80157bc:	9600      	str	r6, [sp, #0]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80157be:	f648 162c 	movw	r6, #35116	; 0x892c
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 80157c2:	f00e f8a1 	bl	8023908 <convolve_1x1_s8_ch16_fpreq>
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80157c6:	9713      	str	r7, [sp, #76]	; 0x4c
 80157c8:	f648 1734 	movw	r7, #35124	; 0x8934
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 80157cc:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 8015a7c <invoke+0x3ac>
 80157d0:	462b      	mov	r3, r5
 80157d2:	f5a4 4000 	sub.w	r0, r4, #32768	; 0x8000
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80157d6:	9714      	str	r7, [sp, #80]	; 0x50
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 80157d8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80157dc:	4f92      	ldr	r7, [pc, #584]	; (8015a28 <invoke+0x358>)
 80157de:	2240      	movs	r2, #64	; 0x40
 80157e0:	f8cd c008 	str.w	ip, [sp, #8]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80157e4:	f648 1c38 	movw	ip, #35128	; 0x8938
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 80157e8:	9701      	str	r7, [sp, #4]
 80157ea:	f04f 0e06 	mov.w	lr, #6
 80157ee:	4f8f      	ldr	r7, [pc, #572]	; (8015a2c <invoke+0x35c>)
 80157f0:	4611      	mov	r1, r2
 80157f2:	9505      	str	r5, [sp, #20]
 80157f4:	9503      	str	r5, [sp, #12]
 80157f6:	f5a0 3500 	sub.w	r5, r0, #131072	; 0x20000
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80157fa:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80157fe:	f648 1c3c 	movw	ip, #35132	; 0x893c
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 8015802:	9700      	str	r7, [sp, #0]
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015804:	f06f 077f 	mvn.w	r7, #127	; 0x7f
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 8015808:	f8cd 8018 	str.w	r8, [sp, #24]
 801580c:	9507      	str	r5, [sp, #28]
 801580e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015812:	f8cd e010 	str.w	lr, [sp, #16]
 8015816:	940b      	str	r4, [sp, #44]	; 0x2c
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015818:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 801581c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8015820:	f00e fb12 	bl	8023e48 <convolve_1x1_s8_ch8_fpreq>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015824:	970d      	str	r7, [sp, #52]	; 0x34
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015826:	9f11      	ldr	r7, [sp, #68]	; 0x44
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015828:	2240      	movs	r2, #64	; 0x40
 801582a:	f8df e254 	ldr.w	lr, [pc, #596]	; 8015a80 <invoke+0x3b0>
 801582e:	465b      	mov	r3, fp
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015830:	4437      	add	r7, r6
 8015832:	9e13      	ldr	r6, [sp, #76]	; 0x4c
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015834:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8015a84 <invoke+0x3b4>
 8015838:	4611      	mov	r1, r2
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801583a:	971e      	str	r7, [sp, #120]	; 0x78
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 801583c:	4628      	mov	r0, r5
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801583e:	9f11      	ldr	r7, [sp, #68]	; 0x44
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015840:	f8cd e00c 	str.w	lr, [sp, #12]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015844:	4437      	add	r7, r6
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015846:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 801584a:	f8cd c008 	str.w	ip, [sp, #8]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801584e:	9713      	str	r7, [sp, #76]	; 0x4c
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015850:	9606      	str	r6, [sp, #24]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015852:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015854:	9e14      	ldr	r6, [sp, #80]	; 0x50
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015856:	9508      	str	r5, [sp, #32]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015858:	4437      	add	r7, r6
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 801585a:	2680      	movs	r6, #128	; 0x80
 801585c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015860:	9714      	str	r7, [sp, #80]	; 0x50
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015862:	9605      	str	r6, [sp, #20]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015864:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015866:	9e15      	ldr	r6, [sp, #84]	; 0x54
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015868:	f8cd 801c 	str.w	r8, [sp, #28]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801586c:	4437      	add	r7, r6
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 801586e:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015872:	940c      	str	r4, [sp, #48]	; 0x30
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015874:	9715      	str	r7, [sp, #84]	; 0x54
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015876:	9604      	str	r6, [sp, #16]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015878:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801587a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801587c:	4437      	add	r7, r6
 801587e:	f648 1644 	movw	r6, #35140	; 0x8944
 8015882:	9716      	str	r7, [sp, #88]	; 0x58
 8015884:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015886:	4437      	add	r7, r6
 8015888:	f648 1648 	movw	r6, #35144	; 0x8948
 801588c:	9717      	str	r7, [sp, #92]	; 0x5c
 801588e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015890:	4437      	add	r7, r6
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015892:	4e67      	ldr	r6, [pc, #412]	; (8015a30 <invoke+0x360>)
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015894:	9718      	str	r7, [sp, #96]	; 0x60
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8015896:	9601      	str	r6, [sp, #4]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8015898:	f648 164c 	movw	r6, #35148	; 0x894c
 801589c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801589e:	4437      	add	r7, r6
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 80158a0:	4e64      	ldr	r6, [pc, #400]	; (8015a34 <invoke+0x364>)
 80158a2:	e9cd bb0a 	strd	fp, fp, [sp, #40]	; 0x28
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80158a6:	9719      	str	r7, [sp, #100]	; 0x64
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 80158a8:	9600      	str	r6, [sp, #0]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80158aa:	f648 1650 	movw	r6, #35152	; 0x8950
 80158ae:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80158b0:	4437      	add	r7, r6
/* layer 56:ZEROS */
int8ptr = (char*)&buffer0[35116];for(int i = 0; i < 1; i++) int8ptr[i] = 0;
/* layer 57:ONES */
fptr = (float*)&buffer0[35116];for(int i = 0; i < 1; i++) fptr[i] = 1.0;
/* layer 58:NEGATIVE */
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80158b2:	f648 1654 	movw	r6, #35156	; 0x8954
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 80158b6:	971a      	str	r7, [sp, #104]	; 0x68
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 80158b8:	f7fd f992 	bl	8012be0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 80158bc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80158be:	465b      	mov	r3, fp
 80158c0:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8015a88 <invoke+0x3b8>
 80158c4:	465a      	mov	r2, fp
 80158c6:	9707      	str	r7, [sp, #28]
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80158c8:	4437      	add	r7, r6
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 80158ca:	2680      	movs	r6, #128	; 0x80
 80158cc:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8015a8c <invoke+0x3bc>
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80158d0:	9720      	str	r7, [sp, #128]	; 0x80
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 80158d2:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 80158d6:	4659      	mov	r1, fp
 80158d8:	4628      	mov	r0, r5
 80158da:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80158de:	f8cd 8018 	str.w	r8, [sp, #24]
 80158e2:	f8cd c004 	str.w	ip, [sp, #4]
 80158e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80158e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80158ec:	2600      	movs	r6, #0
 80158ee:	e9cd e602 	strd	lr, r6, [sp, #8]
 80158f2:	4e51      	ldr	r6, [pc, #324]	; (8015a38 <invoke+0x368>)
 80158f4:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 80158f6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 80158fa:	e9cd bb08 	strd	fp, fp, [sp, #32]
 80158fe:	f00e fb83 	bl	8024008 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 8015902:	9605      	str	r6, [sp, #20]
 8015904:	2600      	movs	r6, #0
 8015906:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015908:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015a90 <invoke+0x3c0>
 801590c:	4653      	mov	r3, sl
 801590e:	9604      	str	r6, [sp, #16]
 8015910:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015914:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8015a94 <invoke+0x3c4>
 8015918:	465a      	mov	r2, fp
 801591a:	9603      	str	r6, [sp, #12]
 801591c:	2630      	movs	r6, #48	; 0x30
 801591e:	4659      	mov	r1, fp
 8015920:	4638      	mov	r0, r7
 8015922:	960a      	str	r6, [sp, #40]	; 0x28
 8015924:	4e45      	ldr	r6, [pc, #276]	; (8015a3c <invoke+0x36c>)
 8015926:	9507      	str	r5, [sp, #28]
 8015928:	f8cd 8018 	str.w	r8, [sp, #24]
 801592c:	9600      	str	r6, [sp, #0]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 801592e:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 8015930:	940b      	str	r4, [sp, #44]	; 0x2c
 8015932:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8015936:	e9cd bb08 	strd	fp, fp, [sp, #32]
 801593a:	f00d ffe5 	bl	8023908 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 801593e:	4628      	mov	r0, r5
 8015940:	9508      	str	r5, [sp, #32]
 8015942:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8015946:	f8df e150 	ldr.w	lr, [pc, #336]	; 8015a98 <invoke+0x3c8>
 801594a:	2330      	movs	r3, #48	; 0x30
 801594c:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8015a9c <invoke+0x3cc>
 8015950:	465a      	mov	r2, fp
 8015952:	4659      	mov	r1, fp
 8015954:	950d      	str	r5, [sp, #52]	; 0x34
 8015956:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801595a:	940c      	str	r4, [sp, #48]	; 0x30
 801595c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8015960:	4e37      	ldr	r6, [pc, #220]	; (8015a40 <invoke+0x370>)
 8015962:	9601      	str	r6, [sp, #4]
 8015964:	4e37      	ldr	r6, [pc, #220]	; (8015a44 <invoke+0x374>)
 8015966:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
 801596a:	e9cd 5806 	strd	r5, r8, [sp, #24]
 801596e:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8015972:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
 8015974:	2680      	movs	r6, #128	; 0x80
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 8015976:	f7fc fa7d 	bl	8011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
 801597a:	f5a4 3020 	sub.w	r0, r4, #163840	; 0x28000
 801597e:	f04f 0e0e 	mov.w	lr, #14
 8015982:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8015aa0 <invoke+0x3d0>
 8015986:	f500 4540 	add.w	r5, r0, #49152	; 0xc000
 801598a:	465a      	mov	r2, fp
 801598c:	4659      	mov	r1, fp
 801598e:	2330      	movs	r3, #48	; 0x30
 8015990:	e9cd 8506 	strd	r8, r5, [sp, #24]
 8015994:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8015998:	e9cd 6504 	strd	r6, r5, [sp, #16]
 801599c:	4e2a      	ldr	r6, [pc, #168]	; (8015a48 <invoke+0x378>)
 801599e:	9601      	str	r6, [sp, #4]
 80159a0:	4e2a      	ldr	r6, [pc, #168]	; (8015a4c <invoke+0x37c>)
 80159a2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80159a6:	e9cd a40a 	strd	sl, r4, [sp, #40]	; 0x28
 80159aa:	e9cd bb08 	strd	fp, fp, [sp, #32]
 80159ae:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_ch16_fpreq(&buffer0[81920],32,32,16,(const q7_t*) weight9,bias9,scales9,-128,-12,-128,127,&buffer0[6144],32,32,48,sbuf);
 80159b0:	2630      	movs	r6, #48	; 0x30
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
 80159b2:	f00e f969 	bl	8023c88 <convolve_1x1_s8_ch48_fpreq>
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 80159b6:	eef0 0a48 	vmov.f32	s1, s16
 80159ba:	eef2 2a08 	vmov.f32	s5, #40	; 0x41400000  12.0
 80159be:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8015a50 <invoke+0x380>
 80159c2:	eef2 1a0c 	vmov.f32	s3, #44	; 0x41600000  14.0
 80159c6:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8015a54 <invoke+0x384>
 80159ca:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015a58 <invoke+0x388>
 80159ce:	4639      	mov	r1, r7
 80159d0:	f507 33a0 	add.w	r3, r7, #81920	; 0x14000
 80159d4:	f5a4 32e0 	sub.w	r2, r4, #114688	; 0x1c000
 80159d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80159dc:	f00d fed0 	bl	8023780 <add_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[81920],32,32,16,(const q7_t*) weight9,bias9,scales9,-128,-12,-128,127,&buffer0[6144],32,32,48,sbuf);
 80159e0:	f5a4 332a 	sub.w	r3, r4, #174080	; 0x2a800
 80159e4:	f06f 0e0b 	mvn.w	lr, #11
 80159e8:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8015aa4 <invoke+0x3d4>
 80159ec:	461d      	mov	r5, r3
 80159ee:	465a      	mov	r2, fp
 80159f0:	4653      	mov	r3, sl
 80159f2:	4659      	mov	r1, fp
 80159f4:	f8cd b020 	str.w	fp, [sp, #32]
 80159f8:	f5a4 30c0 	sub.w	r0, r4, #98304	; 0x18000
 80159fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a00:	9507      	str	r5, [sp, #28]
 8015a02:	f8cd e010 	str.w	lr, [sp, #16]
 8015a06:	f8cd c008 	str.w	ip, [sp, #8]
 8015a0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8015a0c:	e9cd b609 	strd	fp, r6, [sp, #36]	; 0x24
 8015a10:	e04a      	b.n	8015aa8 <invoke+0x3d8>
 8015a12:	bf00      	nop
 8015a14:	2001cf40 	.word	0x2001cf40
 8015a18:	2003b148 	.word	0x2003b148
 8015a1c:	00000000 	.word	0x00000000
 8015a20:	080324c0 	.word	0x080324c0
 8015a24:	0804d158 	.word	0x0804d158
 8015a28:	08040c20 	.word	0x08040c20
 8015a2c:	080592e8 	.word	0x080592e8
 8015a30:	080415e0 	.word	0x080415e0
 8015a34:	0803e9f0 	.word	0x0803e9f0
 8015a38:	080b1198 	.word	0x080b1198
 8015a3c:	080b1398 	.word	0x080b1398
 8015a40:	08041660 	.word	0x08041660
 8015a44:	0803ff50 	.word	0x0803ff50
 8015a48:	08040da0 	.word	0x08040da0
 8015a4c:	080b1698 	.word	0x080b1698
 8015a50:	3dda2865 	.word	0x3dda2865
 8015a54:	3ddbe084 	.word	0x3ddbe084
 8015a58:	3d6b9c01 	.word	0x3d6b9c01
 8015a5c:	08041fa0 	.word	0x08041fa0
 8015a60:	08040100 	.word	0x08040100
 8015a64:	08047da8 	.word	0x08047da8
 8015a68:	08041fe0 	.word	0x08041fe0
 8015a6c:	08041720 	.word	0x08041720
 8015a70:	08040ea0 	.word	0x08040ea0
 8015a74:	08042ec0 	.word	0x08042ec0
 8015a78:	080408e0 	.word	0x080408e0
 8015a7c:	08044140 	.word	0x08044140
 8015a80:	08046ec0 	.word	0x08046ec0
 8015a84:	08041e60 	.word	0x08041e60
 8015a88:	08047ae8 	.word	0x08047ae8
 8015a8c:	08040ca0 	.word	0x08040ca0
 8015a90:	08047b28 	.word	0x08047b28
 8015a94:	08040ce0 	.word	0x08040ce0
 8015a98:	08047be8 	.word	0x08047be8
 8015a9c:	08041ee0 	.word	0x08041ee0
 8015aa0:	08047ca8 	.word	0x08047ca8
 8015aa4:	08047ce8 	.word	0x08047ce8
 8015aa8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015aac:	9605      	str	r6, [sp, #20]
 8015aae:	9603      	str	r6, [sp, #12]
 8015ab0:	4ed4      	ldr	r6, [pc, #848]	; (8015e04 <invoke+0x734>)
 8015ab2:	9601      	str	r6, [sp, #4]
 8015ab4:	4ed4      	ldr	r6, [pc, #848]	; (8015e08 <invoke+0x738>)
 8015ab6:	9600      	str	r6, [sp, #0]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 8015ab8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_ch16_fpreq(&buffer0[81920],32,32,16,(const q7_t*) weight9,bias9,scales9,-128,-12,-128,127,&buffer0[6144],32,32,48,sbuf);
 8015abc:	f00d ff24 	bl	8023908 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 8015ac0:	465a      	mov	r2, fp
 8015ac2:	4659      	mov	r1, fp
 8015ac4:	960d      	str	r6, [sp, #52]	; 0x34
 8015ac6:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
 8015aca:	2680      	movs	r6, #128	; 0x80
 8015acc:	f8df e378 	ldr.w	lr, [pc, #888]	; 8015e48 <invoke+0x778>
 8015ad0:	2330      	movs	r3, #48	; 0x30
 8015ad2:	f8df c378 	ldr.w	ip, [pc, #888]	; 8015e4c <invoke+0x77c>
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	9508      	str	r5, [sp, #32]
 8015ada:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015ade:	f8cd 801c 	str.w	r8, [sp, #28]
 8015ae2:	f8cd c008 	str.w	ip, [sp, #8]
 8015ae6:	940c      	str	r4, [sp, #48]	; 0x30
 8015ae8:	e9cd 6b05 	strd	r6, fp, [sp, #20]
 8015aec:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 8015af0:	f8df b35c 	ldr.w	fp, [pc, #860]	; 8015e50 <invoke+0x780>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 8015af4:	e9cd e603 	strd	lr, r6, [sp, #12]
 8015af8:	4ec4      	ldr	r6, [pc, #784]	; (8015e0c <invoke+0x73c>)
 8015afa:	9601      	str	r6, [sp, #4]
 8015afc:	4ec4      	ldr	r6, [pc, #784]	; (8015e10 <invoke+0x740>)
 8015afe:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 8015b00:	f06f 067f 	mvn.w	r6, #127	; 0x7f
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 8015b04:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
 8015b08:	f7fe ff76 	bl	80149f8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 8015b0c:	9605      	str	r6, [sp, #20]
 8015b0e:	2680      	movs	r6, #128	; 0x80
 8015b10:	f06f 0e04 	mvn.w	lr, #4
 8015b14:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8015e54 <invoke+0x784>
 8015b18:	4652      	mov	r2, sl
 8015b1a:	9604      	str	r6, [sp, #16]
 8015b1c:	2618      	movs	r6, #24
 8015b1e:	4651      	mov	r1, sl
 8015b20:	4628      	mov	r0, r5
 8015b22:	960a      	str	r6, [sp, #40]	; 0x28
 8015b24:	2330      	movs	r3, #48	; 0x30
 8015b26:	4ebb      	ldr	r6, [pc, #748]	; (8015e14 <invoke+0x744>)
 8015b28:	9707      	str	r7, [sp, #28]
 8015b2a:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 8015b2c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 8015b30:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b34:	f8cd b004 	str.w	fp, [sp, #4]
 8015b38:	940b      	str	r4, [sp, #44]	; 0x2c
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 8015b3a:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8015e58 <invoke+0x788>
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 8015b3e:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8015b42:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8015b46:	f00e f89f 	bl	8023c88 <convolve_1x1_s8_ch48_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 8015b4a:	9605      	str	r6, [sp, #20]
 8015b4c:	9603      	str	r6, [sp, #12]
 8015b4e:	2678      	movs	r6, #120	; 0x78
 8015b50:	f04f 0e05 	mov.w	lr, #5
 8015b54:	f8df c304 	ldr.w	ip, [pc, #772]	; 8015e5c <invoke+0x78c>
 8015b58:	960a      	str	r6, [sp, #40]	; 0x28
 8015b5a:	4652      	mov	r2, sl
 8015b5c:	4eae      	ldr	r6, [pc, #696]	; (8015e18 <invoke+0x748>)
 8015b5e:	4651      	mov	r1, sl
 8015b60:	4638      	mov	r0, r7
 8015b62:	2318      	movs	r3, #24
 8015b64:	9600      	str	r6, [sp, #0]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[6144],16,16,120,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[6144],16,16,120,sbuf,-128);
 8015b66:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 8015b6a:	9507      	str	r5, [sp, #28]
 8015b6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b70:	f8cd e010 	str.w	lr, [sp, #16]
 8015b74:	940b      	str	r4, [sp, #44]	; 0x2c
 8015b76:	e9cd bc01 	strd	fp, ip, [sp, #4]
 8015b7a:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8015b7e:	f00d ffa3 	bl	8023ac8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[6144],16,16,120,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[6144],16,16,120,sbuf,-128);
 8015b82:	960d      	str	r6, [sp, #52]	; 0x34
 8015b84:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015b88:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8015e60 <invoke+0x790>
 8015b8c:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 8015e64 <invoke+0x794>
 8015b90:	2378      	movs	r3, #120	; 0x78
 8015b92:	9606      	str	r6, [sp, #24]
 8015b94:	2680      	movs	r6, #128	; 0x80
 8015b96:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8015e68 <invoke+0x798>
 8015b9a:	4652      	mov	r2, sl
 8015b9c:	9605      	str	r6, [sp, #20]
 8015b9e:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015ba2:	4651      	mov	r1, sl
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	9508      	str	r5, [sp, #32]
 8015ba8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015bac:	f8cd 801c 	str.w	r8, [sp, #28]
 8015bb0:	940c      	str	r4, [sp, #48]	; 0x30
 8015bb2:	e9cd e603 	strd	lr, r6, [sp, #12]
 8015bb6:	4e99      	ldr	r6, [pc, #612]	; (8015e1c <invoke+0x74c>)
 8015bb8:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8015bba:	2618      	movs	r6, #24
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[6144],16,16,120,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[6144],16,16,120,sbuf,-128);
 8015bbc:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
 8015bc0:	e9cd bc01 	strd	fp, ip, [sp, #4]
 8015bc4:	f7fc f956 	bl	8011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8015bc8:	960a      	str	r6, [sp, #40]	; 0x28
 8015bca:	2680      	movs	r6, #128	; 0x80
 8015bcc:	f8df e29c 	ldr.w	lr, [pc, #668]	; 8015e6c <invoke+0x79c>
 8015bd0:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8015e70 <invoke+0x7a0>
 8015bd4:	4652      	mov	r2, sl
 8015bd6:	9604      	str	r6, [sp, #16]
 8015bd8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015bdc:	f8df b294 	ldr.w	fp, [pc, #660]	; 8015e74 <invoke+0x7a4>
 8015be0:	4651      	mov	r1, sl
 8015be2:	9605      	str	r6, [sp, #20]
 8015be4:	f505 46f0 	add.w	r6, r5, #30720	; 0x7800
 8015be8:	4628      	mov	r0, r5
 8015bea:	2378      	movs	r3, #120	; 0x78
 8015bec:	9607      	str	r6, [sp, #28]
 8015bee:	f06f 0621 	mvn.w	r6, #33	; 0x21
 8015bf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8015bf6:	940b      	str	r4, [sp, #44]	; 0x2c
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8015bf8:	4d89      	ldr	r5, [pc, #548]	; (8015e20 <invoke+0x750>)
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8015bfa:	e9cd e602 	strd	lr, r6, [sp, #8]
 8015bfe:	e9cd bc00 	strd	fp, ip, [sp]
 8015c02:	e9cd aa08 	strd	sl, sl, [sp, #32]
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8015c06:	2678      	movs	r6, #120	; 0x78
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8015c08:	f00e f9fe 	bl	8024008 <convolve_1x1_s8_fpreq>
add_fpreq(6144, &buffer0[0],0.04381648,-5,&buffer0[36864],0.05460287,-34,0.06156369,-11,&buffer0[43008]);
 8015c0c:	eefa 2a06 	vmov.f32	s5, #166	; 0xc1300000 -11.0
 8015c10:	ed9f 2a84 	vldr	s4, [pc, #528]	; 8015e24 <invoke+0x754>
 8015c14:	eddf 1a84 	vldr	s3, [pc, #528]	; 8015e28 <invoke+0x758>
 8015c18:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 8015c1c:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8015e2c <invoke+0x75c>
 8015c20:	f507 4328 	add.w	r3, r7, #43008	; 0xa800
 8015c24:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8015e30 <invoke+0x760>
 8015c28:	4639      	mov	r1, r7
 8015c2a:	f5a4 320c 	sub.w	r2, r4, #143360	; 0x23000
 8015c2e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8015c32:	9711      	str	r7, [sp, #68]	; 0x44
 8015c34:	f00d fda4 	bl	8023780 <add_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8015c38:	960a      	str	r6, [sp, #40]	; 0x28
 8015c3a:	f04f 0e0b 	mov.w	lr, #11
 8015c3e:	4e7d      	ldr	r6, [pc, #500]	; (8015e34 <invoke+0x764>)
 8015c40:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8015c44:	f8df c230 	ldr.w	ip, [pc, #560]	; 8015e78 <invoke+0x7a8>
 8015c48:	4652      	mov	r2, sl
 8015c4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8015e7c <invoke+0x7ac>
 8015c4e:	4651      	mov	r1, sl
 8015c50:	9600      	str	r6, [sp, #0]
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8015c52:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8015c54:	f505 401e 	add.w	r0, r5, #40448	; 0x9e00
 8015c58:	2318      	movs	r3, #24
 8015c5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8015c5e:	9705      	str	r7, [sp, #20]
 8015c60:	9703      	str	r7, [sp, #12]
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8015c62:	2708      	movs	r7, #8
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8015c64:	9507      	str	r5, [sp, #28]
 8015c66:	f8cd e010 	str.w	lr, [sp, #16]
 8015c6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8015c6c:	e9cd bc01 	strd	fp, ip, [sp, #4]
 8015c70:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8015c74:	f00d ff28 	bl	8023ac8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8015c78:	9605      	str	r6, [sp, #20]
 8015c7a:	4e6f      	ldr	r6, [pc, #444]	; (8015e38 <invoke+0x768>)
 8015c7c:	2378      	movs	r3, #120	; 0x78
 8015c7e:	f8df e200 	ldr.w	lr, [pc, #512]	; 8015e80 <invoke+0x7b0>
 8015c82:	4652      	mov	r2, sl
 8015c84:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8015e84 <invoke+0x7b4>
 8015c88:	4651      	mov	r1, sl
 8015c8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8015e88 <invoke+0x7b8>
 8015c8e:	4628      	mov	r0, r5
 8015c90:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8015c92:	2680      	movs	r6, #128	; 0x80
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8015c94:	9508      	str	r5, [sp, #32]
 8015c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c98:	940c      	str	r4, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8015c9a:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8015e8c <invoke+0x7bc>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8015c9e:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8015ca2:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8015ca6:	e9cd bc01 	strd	fp, ip, [sp, #4]
 8015caa:	e9cd 7806 	strd	r7, r8, [sp, #24]
 8015cae:	e9cd e703 	strd	lr, r7, [sp, #12]
 8015cb2:	970d      	str	r7, [sp, #52]	; 0x34
 8015cb4:	f7fc ff94 	bl	8012be0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8015cb8:	9604      	str	r6, [sp, #16]
 8015cba:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015cbe:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015cc0:	2208      	movs	r2, #8
 8015cc2:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8015e90 <invoke+0x7c0>
 8015cc6:	9605      	str	r6, [sp, #20]
 8015cc8:	2600      	movs	r6, #0
 8015cca:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8015e94 <invoke+0x7c4>
 8015cce:	4611      	mov	r1, r2
 8015cd0:	9603      	str	r6, [sp, #12]
 8015cd2:	2628      	movs	r6, #40	; 0x28
 8015cd4:	2378      	movs	r3, #120	; 0x78
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8015cda:	9208      	str	r2, [sp, #32]
 8015cdc:	960a      	str	r6, [sp, #40]	; 0x28
 8015cde:	f8cd a000 	str.w	sl, [sp]
 8015ce2:	940b      	str	r4, [sp, #44]	; 0x2c
convolve_1x1_s8_fpreq(&buffer0[0],8,8,40,(const q7_t*) weight18,bias18,scales18,-128,0,-128,127,&buffer0[2560],8,8,160,sbuf);
 8015ce4:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8015e98 <invoke+0x7c8>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8015ce8:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8015e9c <invoke+0x7cc>
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8015cec:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8015cf0:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8015cf4:	f00e f988 	bl	8024008 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],8,8,40,(const q7_t*) weight18,bias18,scales18,-128,0,-128,127,&buffer0[2560],8,8,160,sbuf);
 8015cf8:	4633      	mov	r3, r6
 8015cfa:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015cfe:	2208      	movs	r2, #8
 8015d00:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8015ea0 <invoke+0x7d0>
 8015d04:	4638      	mov	r0, r7
 8015d06:	9605      	str	r6, [sp, #20]
 8015d08:	4611      	mov	r1, r2
 8015d0a:	9603      	str	r6, [sp, #12]
 8015d0c:	2600      	movs	r6, #0
 8015d0e:	f8df c194 	ldr.w	ip, [pc, #404]	; 8015ea4 <invoke+0x7d4>
 8015d12:	9604      	str	r6, [sp, #16]
 8015d14:	26a0      	movs	r6, #160	; 0xa0
 8015d16:	9507      	str	r5, [sp, #28]
 8015d18:	9209      	str	r2, [sp, #36]	; 0x24
 8015d1a:	9208      	str	r2, [sp, #32]
 8015d1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d20:	960a      	str	r6, [sp, #40]	; 0x28
 8015d22:	f8cd a000 	str.w	sl, [sp]
 8015d26:	940b      	str	r4, [sp, #44]	; 0x2c
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8015d28:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8015ea8 <invoke+0x7d8>
convolve_1x1_s8_fpreq(&buffer0[0],8,8,40,(const q7_t*) weight18,bias18,scales18,-128,0,-128,127,&buffer0[2560],8,8,160,sbuf);
 8015d2c:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8015d30:	f00e f96a 	bl	8024008 <convolve_1x1_s8_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8015d34:	4633      	mov	r3, r6
 8015d36:	960b      	str	r6, [sp, #44]	; 0x2c
 8015d38:	2680      	movs	r6, #128	; 0x80
 8015d3a:	f8df e170 	ldr.w	lr, [pc, #368]	; 8015eac <invoke+0x7dc>
 8015d3e:	2208      	movs	r2, #8
 8015d40:	9605      	str	r6, [sp, #20]
 8015d42:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015d46:	f8df c168 	ldr.w	ip, [pc, #360]	; 8015eb0 <invoke+0x7e0>
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	960d      	str	r6, [sp, #52]	; 0x34
 8015d4e:	4628      	mov	r0, r5
 8015d50:	9508      	str	r5, [sp, #32]
 8015d52:	f8cd b000 	str.w	fp, [sp]
 8015d56:	940c      	str	r4, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8015d58:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015eb4 <invoke+0x7e4>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8015d5c:	e9cd 6806 	strd	r6, r8, [sp, #24]
 8015d60:	e9cd e603 	strd	lr, r6, [sp, #12]
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8015d64:	2628      	movs	r6, #40	; 0x28
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8015d66:	e9cd ac01 	strd	sl, ip, [sp, #4]
 8015d6a:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 8015d6e:	f7fe f971 	bl	8014054 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8015d72:	960a      	str	r6, [sp, #40]	; 0x28
 8015d74:	2680      	movs	r6, #128	; 0x80
 8015d76:	f04f 0e16 	mov.w	lr, #22
 8015d7a:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8015eb8 <invoke+0x7e8>
 8015d7e:	2208      	movs	r2, #8
 8015d80:	9604      	str	r6, [sp, #16]
 8015d82:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015d86:	f8df a134 	ldr.w	sl, [pc, #308]	; 8015ebc <invoke+0x7ec>
 8015d8a:	4611      	mov	r1, r2
 8015d8c:	9605      	str	r6, [sp, #20]
 8015d8e:	f505 5620 	add.w	r6, r5, #10240	; 0x2800
 8015d92:	4628      	mov	r0, r5
 8015d94:	23a0      	movs	r3, #160	; 0xa0
 8015d96:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d9a:	9607      	str	r6, [sp, #28]
 8015d9c:	940b      	str	r4, [sp, #44]	; 0x2c
 8015d9e:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8015da2:	e9cd ba00 	strd	fp, sl, [sp]
 8015da6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8015daa:	f00e f92d 	bl	8024008 <convolve_1x1_s8_fpreq>
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 8015dae:	4632      	mov	r2, r6
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8015db0:	26a0      	movs	r6, #160	; 0xa0
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 8015db2:	eef0 0a48 	vmov.f32	s1, s16
 8015db6:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 8015dba:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8015e3c <invoke+0x76c>
 8015dbe:	eef3 1a06 	vmov.f32	s3, #54	; 0x41b00000  22.0
 8015dc2:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8015e40 <invoke+0x770>
 8015dc6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015e44 <invoke+0x774>
 8015dca:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 8015dce:	4639      	mov	r1, r7
 8015dd0:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 8015dd4:	f00d fcd4 	bl	8023780 <add_fpreq>
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8015dd8:	960a      	str	r6, [sp, #40]	; 0x28
 8015dda:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015dde:	2208      	movs	r2, #8
 8015de0:	f06f 0e02 	mvn.w	lr, #2
 8015de4:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8015ec0 <invoke+0x7f0>
 8015de8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8015ec4 <invoke+0x7f4>
 8015dec:	f505 5048 	add.w	r0, r5, #12800	; 0x3200
 8015df0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8015ec8 <invoke+0x7f8>
 8015df4:	f505 6508 	add.w	r5, r5, #2176	; 0x880
 8015df8:	9605      	str	r6, [sp, #20]
 8015dfa:	4611      	mov	r1, r2
 8015dfc:	9603      	str	r6, [sp, #12]
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8015dfe:	2680      	movs	r6, #128	; 0x80
 8015e00:	e064      	b.n	8015ecc <invoke+0x7fc>
 8015e02:	bf00      	nop
 8015e04:	08040de0 	.word	0x08040de0
 8015e08:	080b1998 	.word	0x080b1998
 8015e0c:	08040ee0 	.word	0x08040ee0
 8015e10:	08032550 	.word	0x08032550
 8015e14:	08047f58 	.word	0x08047f58
 8015e18:	080483d8 	.word	0x080483d8
 8015e1c:	08032e80 	.word	0x08032e80
 8015e20:	2000d940 	.word	0x2000d940
 8015e24:	3d7c2a35 	.word	0x3d7c2a35
 8015e28:	c2080000 	.word	0xc2080000
 8015e2c:	3d5fa742 	.word	0x3d5fa742
 8015e30:	3d3378e9 	.word	0x3d3378e9
 8015e34:	08049a58 	.word	0x08049a58
 8015e38:	080332b8 	.word	0x080332b8
 8015e3c:	3d188730 	.word	0x3d188730
 8015e40:	3cff28b0 	.word	0x3cff28b0
 8015e44:	3d15631d 	.word	0x3d15631d
 8015e48:	08042020 	.word	0x08042020
 8015e4c:	08041760 	.word	0x08041760
 8015e50:	08040140 	.word	0x08040140
 8015e54:	080420e0 	.word	0x080420e0
 8015e58:	080401a0 	.word	0x080401a0
 8015e5c:	08042140 	.word	0x08042140
 8015e60:	08042320 	.word	0x08042320
 8015e64:	08041820 	.word	0x08041820
 8015e68:	08040fa0 	.word	0x08040fa0
 8015e6c:	08042500 	.word	0x08042500
 8015e70:	08040380 	.word	0x08040380
 8015e74:	08048f18 	.word	0x08048f18
 8015e78:	08042560 	.word	0x08042560
 8015e7c:	080403e0 	.word	0x080403e0
 8015e80:	08042740 	.word	0x08042740
 8015e84:	08041a00 	.word	0x08041a00
 8015e88:	08041180 	.word	0x08041180
 8015e8c:	0804a598 	.word	0x0804a598
 8015e90:	08042920 	.word	0x08042920
 8015e94:	080405c0 	.word	0x080405c0
 8015e98:	0804b858 	.word	0x0804b858
 8015e9c:	080336f0 	.word	0x080336f0
 8015ea0:	080429c0 	.word	0x080429c0
 8015ea4:	08040660 	.word	0x08040660
 8015ea8:	08041360 	.word	0x08041360
 8015eac:	08042c40 	.word	0x08042c40
 8015eb0:	08041be0 	.word	0x08041be0
 8015eb4:	0804d1d8 	.word	0x0804d1d8
 8015eb8:	08042ee0 	.word	0x08042ee0
 8015ebc:	08040900 	.word	0x08040900
 8015ec0:	08042f80 	.word	0x08042f80
 8015ec4:	080409a0 	.word	0x080409a0
 8015ec8:	0804ead8 	.word	0x0804ead8
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8015ecc:	2328      	movs	r3, #40	; 0x28
 8015ece:	f8cd e010 	str.w	lr, [sp, #16]
 8015ed2:	f8cd b000 	str.w	fp, [sp]
 8015ed6:	940b      	str	r4, [sp, #44]	; 0x2c
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8015ed8:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 801628c <invoke+0xbbc>
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8015edc:	e9cd 8506 	strd	r8, r5, [sp, #24]
 8015ee0:	e9cd ac01 	strd	sl, ip, [sp, #4]
 8015ee4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8015ee8:	f00e f88e 	bl	8024008 <convolve_1x1_s8_fpreq>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8015eec:	9605      	str	r6, [sp, #20]
 8015eee:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015ef2:	f8df e39c 	ldr.w	lr, [pc, #924]	; 8016290 <invoke+0xbc0>
 8015ef6:	2208      	movs	r2, #8
 8015ef8:	f8df c398 	ldr.w	ip, [pc, #920]	; 8016294 <invoke+0xbc4>
 8015efc:	960e      	str	r6, [sp, #56]	; 0x38
 8015efe:	23a0      	movs	r3, #160	; 0xa0
 8015f00:	9606      	str	r6, [sp, #24]
 8015f02:	4611      	mov	r1, r2
 8015f04:	9604      	str	r6, [sp, #16]
 8015f06:	4628      	mov	r0, r5
 8015f08:	4ecd      	ldr	r6, [pc, #820]	; (8016240 <invoke+0xb70>)
 8015f0a:	f8df a38c 	ldr.w	sl, [pc, #908]	; 8016298 <invoke+0xbc8>
 8015f0e:	9508      	str	r5, [sp, #32]
 8015f10:	930c      	str	r3, [sp, #48]	; 0x30
 8015f12:	9709      	str	r7, [sp, #36]	; 0x24
 8015f14:	f8cd 801c 	str.w	r8, [sp, #28]
 8015f18:	940d      	str	r4, [sp, #52]	; 0x34
 8015f1a:	9711      	str	r7, [sp, #68]	; 0x44
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015f1c:	2780      	movs	r7, #128	; 0x80
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8015f1e:	e9cd e602 	strd	lr, r6, [sp, #8]
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015f22:	2630      	movs	r6, #48	; 0x30
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8015f24:	e9cd ac00 	strd	sl, ip, [sp]
 8015f28:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 8015f2c:	f7fd f964 	bl	80131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015f30:	960b      	str	r6, [sp, #44]	; 0x2c
 8015f32:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015f36:	f8df c364 	ldr.w	ip, [pc, #868]	; 801629c <invoke+0xbcc>
 8015f3a:	2208      	movs	r2, #8
 8015f3c:	f04f 0e02 	mov.w	lr, #2
 8015f40:	f8df a35c 	ldr.w	sl, [pc, #860]	; 80162a0 <invoke+0xbd0>
 8015f44:	4628      	mov	r0, r5
 8015f46:	4611      	mov	r1, r2
 8015f48:	23a0      	movs	r3, #160	; 0xa0
 8015f4a:	920a      	str	r2, [sp, #40]	; 0x28
 8015f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8015f4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015f52:	f8cd e00c 	str.w	lr, [sp, #12]
 8015f56:	f8cd a000 	str.w	sl, [sp]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8015f5a:	f04f 0a0c 	mov.w	sl, #12
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015f5e:	940c      	str	r4, [sp, #48]	; 0x30
 8015f60:	e9cd 7604 	strd	r7, r6, [sp, #16]
 8015f64:	f5a5 76c0 	sub.w	r6, r5, #384	; 0x180
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8015f68:	2780      	movs	r7, #128	; 0x80
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015f6a:	9608      	str	r6, [sp, #32]
 8015f6c:	f5a5 6658 	sub.w	r6, r5, #3456	; 0xd80
 8015f70:	9607      	str	r6, [sp, #28]
 8015f72:	4eb4      	ldr	r6, [pc, #720]	; (8016244 <invoke+0xb74>)
 8015f74:	e9cd c601 	strd	ip, r6, [sp, #4]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8015f78:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8015f7c:	f00e f928 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8015f80:	f8df c320 	ldr.w	ip, [pc, #800]	; 80162a4 <invoke+0xbd4>
 8015f84:	2208      	movs	r2, #8
 8015f86:	9607      	str	r6, [sp, #28]
 8015f88:	f06f 0e01 	mvn.w	lr, #1
 8015f8c:	9605      	str	r6, [sp, #20]
 8015f8e:	2690      	movs	r6, #144	; 0x90
 8015f90:	f5a5 6058 	sub.w	r0, r5, #3456	; 0xd80
 8015f94:	950a      	str	r5, [sp, #40]	; 0x28
 8015f96:	960d      	str	r6, [sp, #52]	; 0x34
 8015f98:	f505 55b4 	add.w	r5, r5, #5760	; 0x1680
 8015f9c:	4eaa      	ldr	r6, [pc, #680]	; (8016248 <invoke+0xb78>)
 8015f9e:	4611      	mov	r1, r2
 8015fa0:	2330      	movs	r3, #48	; 0x30
 8015fa2:	920c      	str	r2, [sp, #48]	; 0x30
 8015fa4:	920b      	str	r2, [sp, #44]	; 0x2c
 8015fa6:	f8cd 8020 	str.w	r8, [sp, #32]
 8015faa:	9509      	str	r5, [sp, #36]	; 0x24
 8015fac:	f8cd e018 	str.w	lr, [sp, #24]
 8015fb0:	940e      	str	r4, [sp, #56]	; 0x38
 8015fb2:	e9cd c603 	strd	ip, r6, [sp, #12]
 8015fb6:	4ea5      	ldr	r6, [pc, #660]	; (801624c <invoke+0xb7c>)
 8015fb8:	9600      	str	r6, [sp, #0]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
 8015fba:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8015fbc:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8015fc0:	f00e fa28 	bl	8024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
 8015fc4:	9605      	str	r6, [sp, #20]
 8015fc6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8015fca:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 80162a8 <invoke+0xbd8>
 8015fce:	2208      	movs	r2, #8
 8015fd0:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 80162ac <invoke+0xbdc>
 8015fd4:	960e      	str	r6, [sp, #56]	; 0x38
 8015fd6:	2390      	movs	r3, #144	; 0x90
 8015fd8:	9606      	str	r6, [sp, #24]
 8015fda:	4611      	mov	r1, r2
 8015fdc:	9604      	str	r6, [sp, #16]
 8015fde:	f5a5 5690 	sub.w	r6, r5, #4608	; 0x1200
 8015fe2:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 80162b0 <invoke+0xbe0>
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	9609      	str	r6, [sp, #36]	; 0x24
 8015fea:	4e99      	ldr	r6, [pc, #612]	; (8016250 <invoke+0xb80>)
 8015fec:	9508      	str	r5, [sp, #32]
 8015fee:	930c      	str	r3, [sp, #48]	; 0x30
 8015ff0:	f8cd 801c 	str.w	r8, [sp, #28]
 8015ff4:	940d      	str	r4, [sp, #52]	; 0x34
 8015ff6:	e9cd e602 	strd	lr, r6, [sp, #8]
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8015ffa:	2630      	movs	r6, #48	; 0x30
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
 8015ffc:	e9cd ac00 	strd	sl, ip, [sp]
 8016000:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 8016004:	f7fc fbf4 	bl	80127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8016008:	960b      	str	r6, [sp, #44]	; 0x2c
 801600a:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 801600e:	2208      	movs	r2, #8
 8016010:	f04f 0e11 	mov.w	lr, #17
 8016014:	f8df c29c 	ldr.w	ip, [pc, #668]	; 80162b4 <invoke+0xbe4>
 8016018:	f8df a29c 	ldr.w	sl, [pc, #668]	; 80162b8 <invoke+0xbe8>
 801601c:	4611      	mov	r1, r2
 801601e:	f8cd e00c 	str.w	lr, [sp, #12]
 8016022:	2390      	movs	r3, #144	; 0x90
 8016024:	4628      	mov	r0, r5
 8016026:	920a      	str	r2, [sp, #40]	; 0x28
 8016028:	9209      	str	r2, [sp, #36]	; 0x24
 801602a:	f8cd 8018 	str.w	r8, [sp, #24]
 801602e:	f8cd a000 	str.w	sl, [sp]
 8016032:	940c      	str	r4, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8016034:	f8df a284 	ldr.w	sl, [pc, #644]	; 80162bc <invoke+0xbec>
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8016038:	e9cd 7604 	strd	r7, r6, [sp, #16]
 801603c:	f5a5 76c0 	sub.w	r6, r5, #384	; 0x180
 8016040:	f505 5710 	add.w	r7, r5, #9216	; 0x2400
 8016044:	9608      	str	r6, [sp, #32]
 8016046:	4e83      	ldr	r6, [pc, #524]	; (8016254 <invoke+0xb84>)
 8016048:	9707      	str	r7, [sp, #28]
 801604a:	e9cd c601 	strd	ip, r6, [sp, #4]
 801604e:	f00e f8bf 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(3072, &buffer0[1280],0.034391046,2,&buffer0[19712],0.027072277,17,0.039104667,6,&buffer0[7040],&buffer0[10496]);
 8016052:	9b11      	ldr	r3, [sp, #68]	; 0x44
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8016054:	f06f 0605 	mvn.w	r6, #5
add_fpreq_bitmask(3072, &buffer0[1280],0.034391046,2,&buffer0[19712],0.027072277,17,0.039104667,6,&buffer0[7040],&buffer0[10496]);
 8016058:	eef1 2a08 	vmov.f32	s5, #24	; 0x40c00000  6.0
 801605c:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8016258 <invoke+0xb88>
 8016060:	eef3 1a01 	vmov.f32	s3, #49	; 0x41880000  17.0
 8016064:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 801625c <invoke+0xb8c>
 8016068:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801606c:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8016260 <invoke+0xb90>
 8016070:	463a      	mov	r2, r7
 8016072:	f5a7 4190 	sub.w	r1, r7, #18432	; 0x4800
 8016076:	9500      	str	r5, [sp, #0]
 8016078:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 801607c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8016080:	f00d fbcc 	bl	802381c <add_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8016084:	9606      	str	r6, [sp, #24]
 8016086:	2618      	movs	r6, #24
 8016088:	f5a7 53c0 	sub.w	r3, r7, #6144	; 0x1800
 801608c:	f8df e230 	ldr.w	lr, [pc, #560]	; 80162c0 <invoke+0xbf0>
 8016090:	2208      	movs	r2, #8
 8016092:	9602      	str	r6, [sp, #8]
 8016094:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8016098:	461d      	mov	r5, r3
 801609a:	f8df c228 	ldr.w	ip, [pc, #552]	; 80162c4 <invoke+0xbf4>
 801609e:	9607      	str	r6, [sp, #28]
 80160a0:	4611      	mov	r1, r2
 80160a2:	9605      	str	r6, [sp, #20]
 80160a4:	26c0      	movs	r6, #192	; 0xc0
 80160a6:	950a      	str	r5, [sp, #40]	; 0x28
 80160a8:	f505 55cc 	add.w	r5, r5, #6528	; 0x1980
 80160ac:	960d      	str	r6, [sp, #52]	; 0x34
 80160ae:	f5a7 5046 	sub.w	r0, r7, #12672	; 0x3180
 80160b2:	4e6c      	ldr	r6, [pc, #432]	; (8016264 <invoke+0xb94>)
 80160b4:	2330      	movs	r3, #48	; 0x30
 80160b6:	f8cd 8020 	str.w	r8, [sp, #32]
 80160ba:	9509      	str	r5, [sp, #36]	; 0x24
 80160bc:	940e      	str	r4, [sp, #56]	; 0x38
 80160be:	e9cd e603 	strd	lr, r6, [sp, #12]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 80160c2:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 80160c4:	e9cd ac00 	strd	sl, ip, [sp]
 80160c8:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 80160cc:	f00e f9a2 	bl	8024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 80160d0:	9605      	str	r6, [sp, #20]
 80160d2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 80160d6:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80162c8 <invoke+0xbf8>
 80160da:	2208      	movs	r2, #8
 80160dc:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 80162cc <invoke+0xbfc>
 80160e0:	960e      	str	r6, [sp, #56]	; 0x38
 80160e2:	23c0      	movs	r3, #192	; 0xc0
 80160e4:	9606      	str	r6, [sp, #24]
 80160e6:	4611      	mov	r1, r2
 80160e8:	9604      	str	r6, [sp, #16]
 80160ea:	f5a5 569c 	sub.w	r6, r5, #4992	; 0x1380
 80160ee:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 80162d0 <invoke+0xc00>
 80160f2:	4628      	mov	r0, r5
 80160f4:	9609      	str	r6, [sp, #36]	; 0x24
 80160f6:	4e5c      	ldr	r6, [pc, #368]	; (8016268 <invoke+0xb98>)
 80160f8:	9508      	str	r5, [sp, #32]
 80160fa:	930c      	str	r3, [sp, #48]	; 0x30
 80160fc:	f8cd 801c 	str.w	r8, [sp, #28]
 8016100:	940d      	str	r4, [sp, #52]	; 0x34
 8016102:	e9cd e602 	strd	lr, r6, [sp, #8]
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8016106:	2630      	movs	r6, #48	; 0x30
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8016108:	e9cd ac00 	strd	sl, ip, [sp]
 801610c:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 8016110:	f7fc fb6e 	bl	80127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8016114:	9708      	str	r7, [sp, #32]
 8016116:	960b      	str	r6, [sp, #44]	; 0x2c
 8016118:	2780      	movs	r7, #128	; 0x80
 801611a:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 801611e:	2208      	movs	r2, #8
 8016120:	f06f 0e07 	mvn.w	lr, #7
 8016124:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80162d4 <invoke+0xc04>
 8016128:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80162d8 <invoke+0xc08>
 801612c:	4611      	mov	r1, r2
 801612e:	f8cd e00c 	str.w	lr, [sp, #12]
 8016132:	23c0      	movs	r3, #192	; 0xc0
 8016134:	4628      	mov	r0, r5
 8016136:	920a      	str	r2, [sp, #40]	; 0x28
 8016138:	9209      	str	r2, [sp, #36]	; 0x24
 801613a:	f8cd 8018 	str.w	r8, [sp, #24]
 801613e:	f8cd a000 	str.w	sl, [sp]
 8016142:	940c      	str	r4, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 8016144:	f8df a194 	ldr.w	sl, [pc, #404]	; 80162dc <invoke+0xc0c>
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8016148:	e9cd 7604 	strd	r7, r6, [sp, #16]
 801614c:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 8016150:	9607      	str	r6, [sp, #28]
 8016152:	4e46      	ldr	r6, [pc, #280]	; (801626c <invoke+0xb9c>)
 8016154:	e9cd c601 	strd	ip, r6, [sp, #4]
 8016158:	f00e f83a 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
 801615c:	f505 5240 	add.w	r2, r5, #12288	; 0x3000
 8016160:	9500      	str	r5, [sp, #0]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 8016162:	2618      	movs	r6, #24
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
 8016164:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016166:	eef0 2a48 	vmov.f32	s5, s16
 801616a:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8016270 <invoke+0xba0>
 801616e:	eefa 1a00 	vmov.f32	s3, #160	; 0xc1000000 -8.0
 8016172:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8016274 <invoke+0xba4>
 8016176:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 801617a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8016258 <invoke+0xb88>
 801617e:	f505 4382 	add.w	r3, r5, #16640	; 0x4100
 8016182:	f505 51dc 	add.w	r1, r5, #7040	; 0x1b80
 8016186:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801618a:	f00d fb47 	bl	802381c <add_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 801618e:	9602      	str	r6, [sp, #8]
 8016190:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8016194:	4b38      	ldr	r3, [pc, #224]	; (8016278 <invoke+0xba8>)
 8016196:	f8df e148 	ldr.w	lr, [pc, #328]	; 80162e0 <invoke+0xc10>
 801619a:	9607      	str	r6, [sp, #28]
 801619c:	461d      	mov	r5, r3
 801619e:	9605      	str	r6, [sp, #20]
 80161a0:	2600      	movs	r6, #0
 80161a2:	f5a5 52e7 	sub.w	r2, r5, #7392	; 0x1ce0
 80161a6:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80162e4 <invoke+0xc14>
 80161aa:	9606      	str	r6, [sp, #24]
 80161ac:	26f0      	movs	r6, #240	; 0xf0
 80161ae:	4617      	mov	r7, r2
 80161b0:	f5a2 50cc 	sub.w	r0, r2, #6528	; 0x1980
 80161b4:	960d      	str	r6, [sp, #52]	; 0x34
 80161b6:	2208      	movs	r2, #8
 80161b8:	4e30      	ldr	r6, [pc, #192]	; (801627c <invoke+0xbac>)
 80161ba:	2330      	movs	r3, #48	; 0x30
 80161bc:	4611      	mov	r1, r2
 80161be:	f8cd 8020 	str.w	r8, [sp, #32]
 80161c2:	970a      	str	r7, [sp, #40]	; 0x28
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 80161c4:	46ab      	mov	fp, r5
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 80161c6:	9509      	str	r5, [sp, #36]	; 0x24
 80161c8:	940e      	str	r4, [sp, #56]	; 0x38
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 80161ca:	4f2d      	ldr	r7, [pc, #180]	; (8016280 <invoke+0xbb0>)
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 80161cc:	e9cd e603 	strd	lr, r6, [sp, #12]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 80161d0:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 80161d2:	e9cd ac00 	strd	sl, ip, [sp]
 80161d6:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 80161da:	f00e f91b 	bl	8024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 80161de:	9605      	str	r6, [sp, #20]
 80161e0:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 80161e4:	f8df e100 	ldr.w	lr, [pc, #256]	; 80162e8 <invoke+0xc18>
 80161e8:	23f0      	movs	r3, #240	; 0xf0
 80161ea:	f8df c100 	ldr.w	ip, [pc, #256]	; 80162ec <invoke+0xc1c>
 80161ee:	960e      	str	r6, [sp, #56]	; 0x38
 80161f0:	2208      	movs	r2, #8
 80161f2:	9606      	str	r6, [sp, #24]
 80161f4:	4628      	mov	r0, r5
 80161f6:	9604      	str	r6, [sp, #16]
 80161f8:	f5a5 56ab 	sub.w	r6, r5, #5472	; 0x1560
 80161fc:	4611      	mov	r1, r2
 80161fe:	930c      	str	r3, [sp, #48]	; 0x30
 8016200:	9609      	str	r6, [sp, #36]	; 0x24
 8016202:	4e20      	ldr	r6, [pc, #128]	; (8016284 <invoke+0xbb4>)
 8016204:	9508      	str	r5, [sp, #32]
 8016206:	f8cd 801c 	str.w	r8, [sp, #28]
 801620a:	940d      	str	r4, [sp, #52]	; 0x34
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 801620c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80162f0 <invoke+0xc20>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 8016210:	e9cd e602 	strd	lr, r6, [sp, #8]
 8016214:	e9cd 7c00 	strd	r7, ip, [sp]
 8016218:	e9cd 990a 	strd	r9, r9, [sp, #40]	; 0x28
 801621c:	f7ff f92e 	bl	801547c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 8016220:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8016224:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8016228:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80162f4 <invoke+0xc24>
 801622c:	4f16      	ldr	r7, [pc, #88]	; (8016288 <invoke+0xbb8>)
 801622e:	4628      	mov	r0, r5
 8016230:	464a      	mov	r2, r9
 8016232:	4649      	mov	r1, r9
 8016234:	23f0      	movs	r3, #240	; 0xf0
 8016236:	f8cd 8018 	str.w	r8, [sp, #24]
 801623a:	9700      	str	r7, [sp, #0]
 801623c:	940c      	str	r4, [sp, #48]	; 0x30
 801623e:	e05b      	b.n	80162f8 <invoke+0xc28>
 8016240:	08043200 	.word	0x08043200
 8016244:	08043480 	.word	0x08043480
 8016248:	08043540 	.word	0x08043540
 801624c:	20004e8c 	.word	0x20004e8c
 8016250:	08043780 	.word	0x08043780
 8016254:	080439c0 	.word	0x080439c0
 8016258:	3d202c37 	.word	0x3d202c37
 801625c:	3cddc6ae 	.word	0x3cddc6ae
 8016260:	3d0cdda0 	.word	0x3d0cdda0
 8016264:	08043a80 	.word	0x08043a80
 8016268:	08043d80 	.word	0x08043d80
 801626c:	08044080 	.word	0x08044080
 8016270:	3d61159a 	.word	0x3d61159a
 8016274:	3d1c5f3b 	.word	0x3d1c5f3b
 8016278:	200146a0 	.word	0x200146a0
 801627c:	080441c0 	.word	0x080441c0
 8016280:	08037100 	.word	0x08037100
 8016284:	08044580 	.word	0x08044580
 8016288:	0805d858 	.word	0x0805d858
 801628c:	080521d8 	.word	0x080521d8
 8016290:	2003b4a8 	.word	0x2003b4a8
 8016294:	2000275c 	.word	0x2000275c
 8016298:	08035590 	.word	0x08035590
 801629c:	2000001c 	.word	0x2000001c
 80162a0:	080503d8 	.word	0x080503d8
 80162a4:	200000dc 	.word	0x200000dc
 80162a8:	2003b728 	.word	0x2003b728
 80162ac:	200029dc 	.word	0x200029dc
 80162b0:	08036530 	.word	0x08036530
 80162b4:	2000031c 	.word	0x2000031c
 80162b8:	08053b28 	.word	0x08053b28
 80162bc:	2000554c 	.word	0x2000554c
 80162c0:	200003dc 	.word	0x200003dc
 80162c4:	08055628 	.word	0x08055628
 80162c8:	2003b968 	.word	0x2003b968
 80162cc:	20002c1c 	.word	0x20002c1c
 80162d0:	08036a40 	.word	0x08036a40
 80162d4:	200006dc 	.word	0x200006dc
 80162d8:	08056ee8 	.word	0x08056ee8
 80162dc:	2000674c 	.word	0x2000674c
 80162e0:	2000079c 	.word	0x2000079c
 80162e4:	080593e8 	.word	0x080593e8
 80162e8:	2003bc68 	.word	0x2003bc68
 80162ec:	20002f1c 	.word	0x20002f1c
 80162f0:	08039ef0 	.word	0x08039ef0
 80162f4:	20000b5c 	.word	0x20000b5c
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 80162f8:	4fdb      	ldr	r7, [pc, #876]	; (8016668 <invoke+0xf98>)
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 80162fa:	e9cd e604 	strd	lr, r6, [sp, #16]
 80162fe:	2660      	movs	r6, #96	; 0x60
 8016300:	960b      	str	r6, [sp, #44]	; 0x2c
 8016302:	f5a5 569c 	sub.w	r6, r5, #4992	; 0x1380
 8016306:	f5a5 65c0 	sub.w	r5, r5, #1536	; 0x600
 801630a:	9608      	str	r6, [sp, #32]
 801630c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016310:	9507      	str	r5, [sp, #28]
 8016312:	9603      	str	r6, [sp, #12]
 8016314:	4ed5      	ldr	r6, [pc, #852]	; (801666c <invoke+0xf9c>)
 8016316:	e9cd c601 	strd	ip, r6, [sp, #4]
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 801631a:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 801631e:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8016322:	f00d ff55 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 8016326:	9605      	str	r6, [sp, #20]
 8016328:	9603      	str	r6, [sp, #12]
 801632a:	f5a5 664c 	sub.w	r6, r5, #3264	; 0xcc0
 801632e:	f44f 7ec0 	mov.w	lr, #384	; 0x180
 8016332:	f8df c390 	ldr.w	ip, [pc, #912]	; 80166c4 <invoke+0xff4>
 8016336:	9608      	str	r6, [sp, #32]
 8016338:	464a      	mov	r2, r9
 801633a:	4ecd      	ldr	r6, [pc, #820]	; (8016670 <invoke+0xfa0>)
 801633c:	4649      	mov	r1, r9
 801633e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8016342:	f04f 0e01 	mov.w	lr, #1
 8016346:	2360      	movs	r3, #96	; 0x60
 8016348:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801634c:	4628      	mov	r0, r5
 801634e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016352:	f8cd b01c 	str.w	fp, [sp, #28]
 8016356:	f8cd 8018 	str.w	r8, [sp, #24]
 801635a:	f8cd e010 	str.w	lr, [sp, #16]
 801635e:	9700      	str	r7, [sp, #0]
 8016360:	940c      	str	r4, [sp, #48]	; 0x30
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 8016362:	4fc4      	ldr	r7, [pc, #784]	; (8016674 <invoke+0xfa4>)
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 8016364:	e9cd c601 	strd	ip, r6, [sp, #4]
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 8016368:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 801636c:	f00d ff30 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 8016370:	f5a5 6c1c 	sub.w	ip, r5, #2496	; 0x9c0
 8016374:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8016378:	f8df e34c 	ldr.w	lr, [pc, #844]	; 80166c8 <invoke+0xff8>
 801637c:	4658      	mov	r0, fp
 801637e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8016382:	464a      	mov	r2, r9
 8016384:	f8cd b020 	str.w	fp, [sp, #32]
 8016388:	f04f 0b80 	mov.w	fp, #128	; 0x80
 801638c:	960e      	str	r6, [sp, #56]	; 0x38
 801638e:	4649      	mov	r1, r9
 8016390:	9606      	str	r6, [sp, #24]
 8016392:	9604      	str	r6, [sp, #16]
 8016394:	4eb8      	ldr	r6, [pc, #736]	; (8016678 <invoke+0xfa8>)
 8016396:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801639a:	f8cd b014 	str.w	fp, [sp, #20]
 801639e:	f8cd 801c 	str.w	r8, [sp, #28]
 80163a2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80163a6:	940d      	str	r4, [sp, #52]	; 0x34
 80163a8:	e9cd 930b 	strd	r9, r3, [sp, #44]	; 0x2c
 80163ac:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80163b0:	e9cd ae00 	strd	sl, lr, [sp]
 80163b4:	f7fc ff20 	bl	80131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) weight35,bias35,scales35,-16,128,-128,127,&buffer0[30560],&buffer0[27296],4,4,96,sbuf);
 80163b8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 80163bc:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80163c0:	f04f 0a60 	mov.w	sl, #96	; 0x60
 80163c4:	f06f 0c0f 	mvn.w	ip, #15
 80163c8:	f8df e300 	ldr.w	lr, [pc, #768]	; 80166cc <invoke+0xffc>
 80163cc:	f5a5 63d8 	sub.w	r3, r5, #1728	; 0x6c0
 80163d0:	4faa      	ldr	r7, [pc, #680]	; (801667c <invoke+0xfac>)
 80163d2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80163d6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80163da:	464a      	mov	r2, r9
 80163dc:	4649      	mov	r1, r9
 80163de:	f8cd c00c 	str.w	ip, [sp, #12]
 80163e2:	4658      	mov	r0, fp
 80163e4:	f8cd e000 	str.w	lr, [sp]
 80163e8:	931c      	str	r3, [sp, #112]	; 0x70
 80163ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80163ee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80163f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80163f6:	f8cd b01c 	str.w	fp, [sp, #28]
 80163fa:	f8cd a010 	str.w	sl, [sp, #16]
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 80163fe:	f44f 7ac0 	mov.w	sl, #384	; 0x180
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) weight35,bias35,scales35,-16,128,-128,127,&buffer0[30560],&buffer0[27296],4,4,96,sbuf);
 8016402:	940c      	str	r4, [sp, #48]	; 0x30
 8016404:	e9cd 6805 	strd	r6, r8, [sp, #20]
 8016408:	f5ab 664c 	sub.w	r6, fp, #3264	; 0xcc0
 801640c:	9608      	str	r6, [sp, #32]
 801640e:	4e9c      	ldr	r6, [pc, #624]	; (8016680 <invoke+0xfb0>)
 8016410:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8016414:	f00d fedc 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(1536, &buffer0[29024],0.027058998,-1,&buffer0[30560],0.022201976,-16,0.031616762,-1,&buffer0[32288],&buffer0[27488]);
 8016418:	f5ab 6340 	sub.w	r3, fp, #3072	; 0xc00
 801641c:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8016420:	f06f 067f 	mvn.w	r6, #127	; 0x7f
add_fpreq_bitmask(1536, &buffer0[29024],0.027058998,-1,&buffer0[30560],0.022201976,-16,0.031616762,-1,&buffer0[32288],&buffer0[27488]);
 8016424:	4618      	mov	r0, r3
 8016426:	eefb 1a00 	vmov.f32	s3, #176	; 0xc1800000 -16.0
 801642a:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8016684 <invoke+0xfb4>
 801642e:	465a      	mov	r2, fp
 8016430:	eef0 0a62 	vmov.f32	s1, s5
 8016434:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8016688 <invoke+0xfb8>
 8016438:	ed9f 0a94 	vldr	s0, [pc, #592]	; 801668c <invoke+0xfbc>
 801643c:	4629      	mov	r1, r5
 801643e:	f50b 63d8 	add.w	r3, fp, #1728	; 0x6c0
 8016442:	9000      	str	r0, [sp, #0]
 8016444:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8016448:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801644c:	f00d f9e6 	bl	802381c <add_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8016450:	9605      	str	r6, [sp, #20]
 8016452:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8016456:	f8df e278 	ldr.w	lr, [pc, #632]	; 80166d0 <invoke+0x1000>
 801645a:	f505 5796 	add.w	r7, r5, #4800	; 0x12c0
 801645e:	f8df c274 	ldr.w	ip, [pc, #628]	; 80166d4 <invoke+0x1004>
 8016462:	9603      	str	r6, [sp, #12]
 8016464:	464a      	mov	r2, r9
 8016466:	4e8a      	ldr	r6, [pc, #552]	; (8016690 <invoke+0xfc0>)
 8016468:	4649      	mov	r1, r9
 801646a:	2360      	movs	r3, #96	; 0x60
 801646c:	f505 604c 	add.w	r0, r5, #3264	; 0xcc0
 8016470:	f8cd 8018 	str.w	r8, [sp, #24]
 8016474:	9707      	str	r7, [sp, #28]
 8016476:	f8cd c000 	str.w	ip, [sp]
 801647a:	940c      	str	r4, [sp, #48]	; 0x30
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 801647c:	f8df b258 	ldr.w	fp, [pc, #600]	; 80166d8 <invoke+0x1008>
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8016480:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8016484:	f04f 0a01 	mov.w	sl, #1
 8016488:	e9cd e601 	strd	lr, r6, [sp, #4]
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 801648c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8016490:	f8cd a010 	str.w	sl, [sp, #16]
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 8016494:	f8df a244 	ldr.w	sl, [pc, #580]	; 80166dc <invoke+0x100c>
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8016498:	e9cd 5908 	strd	r5, r9, [sp, #32]
 801649c:	f00d fe98 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 80164a0:	960e      	str	r6, [sp, #56]	; 0x38
 80164a2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 80164a6:	f505 7e40 	add.w	lr, r5, #768	; 0x300
 80164aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80164ae:	f8df c230 	ldr.w	ip, [pc, #560]	; 80166e0 <invoke+0x1010>
 80164b2:	9606      	str	r6, [sp, #24]
 80164b4:	2680      	movs	r6, #128	; 0x80
 80164b6:	464a      	mov	r2, r9
 80164b8:	4649      	mov	r1, r9
 80164ba:	9605      	str	r6, [sp, #20]
 80164bc:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 80164c0:	4638      	mov	r0, r7
 80164c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80164c6:	9604      	str	r6, [sp, #16]
 80164c8:	4e72      	ldr	r6, [pc, #456]	; (8016694 <invoke+0xfc4>)
 80164ca:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80164ce:	940d      	str	r4, [sp, #52]	; 0x34
 80164d0:	e9cd 930b 	strd	r9, r3, [sp, #44]	; 0x2c
 80164d4:	e9cd 8707 	strd	r8, r7, [sp, #28]
 80164d8:	e9cd c602 	strd	ip, r6, [sp, #8]
 80164dc:	e9cd ba00 	strd	fp, sl, [sp]
 80164e0:	f7fc fe8a 	bl	80131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 80164e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80164e6:	f04f 0e60 	mov.w	lr, #96	; 0x60
 80164ea:	f505 5a2b 	add.w	sl, r5, #10944	; 0x2ac0
 80164ee:	9608      	str	r6, [sp, #32]
 80164f0:	2680      	movs	r6, #128	; 0x80
 80164f2:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 80166e4 <invoke+0x1014>
 80164f6:	4638      	mov	r0, r7
 80164f8:	4f67      	ldr	r7, [pc, #412]	; (8016698 <invoke+0xfc8>)
 80164fa:	464a      	mov	r2, r9
 80164fc:	4649      	mov	r1, r9
 80164fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8016502:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 8016506:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 801650a:	f8cd 8018 	str.w	r8, [sp, #24]
 801650e:	f8cd a01c 	str.w	sl, [sp, #28]
 8016512:	9700      	str	r7, [sp, #0]
 8016514:	940c      	str	r4, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 8016516:	4f61      	ldr	r7, [pc, #388]	; (801669c <invoke+0xfcc>)
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 8016518:	e9cd 9e0a 	strd	r9, lr, [sp, #40]	; 0x28
 801651c:	f06f 0e7f 	mvn.w	lr, #127	; 0x7f
 8016520:	e9cd 6e04 	strd	r6, lr, [sp, #16]
 8016524:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016528:	9603      	str	r6, [sp, #12]
 801652a:	4e5d      	ldr	r6, [pc, #372]	; (80166a0 <invoke+0xfd0>)
 801652c:	e9cd c601 	strd	ip, r6, [sp, #4]
 8016530:	f00d fe4e 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 8016534:	f505 66d8 	add.w	r6, r5, #1728	; 0x6c0
 8016538:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 801653c:	4652      	mov	r2, sl
 801653e:	f50a 5387 	add.w	r3, sl, #4320	; 0x10e0
 8016542:	f5aa 51f0 	sub.w	r1, sl, #7680	; 0x1e00
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 8016546:	f505 5abd 	add.w	sl, r5, #6048	; 0x17a0
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 801654a:	9600      	str	r6, [sp, #0]
 801654c:	eef0 0a61 	vmov.f32	s1, s3
 8016550:	ed9f 2a54 	vldr	s4, [pc, #336]	; 80166a4 <invoke+0xfd4>
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 8016554:	f5aa 76f0 	sub.w	r6, sl, #480	; 0x1e0
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 8016558:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80166a8 <invoke+0xfd8>
 801655c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016684 <invoke+0xfb4>
 8016560:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
 8016564:	f44f 60c0 	mov.w	r0, #1536	; 0x600
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 8016568:	4635      	mov	r5, r6
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 801656a:	f00d f957 	bl	802381c <add_fpreq_bitmask>
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 801656e:	961d      	str	r6, [sp, #116]	; 0x74
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 8016570:	f5aa 662e 	sub.w	r6, sl, #2784	; 0xae0
 8016574:	f06f 0c03 	mvn.w	ip, #3
 8016578:	f8df e16c 	ldr.w	lr, [pc, #364]	; 80166e8 <invoke+0x1018>
 801657c:	464a      	mov	r2, r9
 801657e:	9608      	str	r6, [sp, #32]
 8016580:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8016584:	4649      	mov	r1, r9
 8016586:	f8cd c010 	str.w	ip, [sp, #16]
 801658a:	9605      	str	r6, [sp, #20]
 801658c:	f50a 5010 	add.w	r0, sl, #9216	; 0x2400
 8016590:	9603      	str	r6, [sp, #12]
 8016592:	f44f 7610 	mov.w	r6, #576	; 0x240
 8016596:	f8cd e000 	str.w	lr, [sp]
 801659a:	2360      	movs	r3, #96	; 0x60
 801659c:	960b      	str	r6, [sp, #44]	; 0x2c
 801659e:	4e43      	ldr	r6, [pc, #268]	; (80166ac <invoke+0xfdc>)
 80165a0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80165a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80165a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80165ac:	f8cd a01c 	str.w	sl, [sp, #28]
 80165b0:	940c      	str	r4, [sp, #48]	; 0x30
 80165b2:	e9cd 7601 	strd	r7, r6, [sp, #4]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 80165b6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 80165ba:	f00d fe09 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 80165be:	4f3c      	ldr	r7, [pc, #240]	; (80166b0 <invoke+0xfe0>)
 80165c0:	f5aa 60cc 	sub.w	r0, sl, #1632	; 0x660
 80165c4:	960e      	str	r6, [sp, #56]	; 0x38
 80165c6:	2680      	movs	r6, #128	; 0x80
 80165c8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80165cc:	4939      	ldr	r1, [pc, #228]	; (80166b4 <invoke+0xfe4>)
 80165ce:	464a      	mov	r2, r9
 80165d0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80165d4:	9009      	str	r0, [sp, #36]	; 0x24
 80165d6:	4650      	mov	r0, sl
 80165d8:	9101      	str	r1, [sp, #4]
 80165da:	4649      	mov	r1, r9
 80165dc:	940d      	str	r4, [sp, #52]	; 0x34
 80165de:	e9cd 6b05 	strd	r6, fp, [sp, #20]
 80165e2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
fptr = (float*)&buffer0[35116];
 80165e6:	f8df b104 	ldr.w	fp, [pc, #260]	; 80166ec <invoke+0x101c>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 80165ea:	9604      	str	r6, [sp, #16]
 80165ec:	4e32      	ldr	r6, [pc, #200]	; (80166b8 <invoke+0xfe8>)
 80165ee:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80165f2:	4f32      	ldr	r7, [pc, #200]	; (80166bc <invoke+0xfec>)
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 80165f4:	f50a 5610 	add.w	r6, sl, #9216	; 0x2400
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 80165f8:	e9cd 930b 	strd	r9, r3, [sp, #44]	; 0x2c
 80165fc:	e9cd 8a07 	strd	r8, sl, [sp, #28]
 8016600:	9700      	str	r7, [sp, #0]
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 8016602:	f5aa 77a0 	sub.w	r7, sl, #320	; 0x140
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 8016606:	f7fc f8f3 	bl	80127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 801660a:	9607      	str	r6, [sp, #28]
 801660c:	26a0      	movs	r6, #160	; 0xa0
 801660e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8016612:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80166f0 <invoke+0x1020>
 8016616:	464a      	mov	r2, r9
 8016618:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80166f4 <invoke+0x1024>
 801661c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8016620:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016624:	4650      	mov	r0, sl
 8016626:	f8cd e000 	str.w	lr, [sp]
 801662a:	f8cd 8018 	str.w	r8, [sp, #24]
 801662e:	9708      	str	r7, [sp, #32]
 8016630:	940c      	str	r4, [sp, #48]	; 0x30
 8016632:	e9cd 960a 	strd	r9, r6, [sp, #40]	; 0x28
 8016636:	2680      	movs	r6, #128	; 0x80
 8016638:	e9cd 6104 	strd	r6, r1, [sp, #16]
 801663c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016640:	4649      	mov	r1, r9
 8016642:	9603      	str	r6, [sp, #12]
 8016644:	4e1e      	ldr	r6, [pc, #120]	; (80166c0 <invoke+0xff0>)
 8016646:	e9cd c601 	strd	ip, r6, [sp, #4]
 801664a:	f00d fdc1 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 801664e:	2601      	movs	r6, #1
 8016650:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8016654:	464a      	mov	r2, r9
 8016656:	f8cd 8014 	str.w	r8, [sp, #20]
 801665a:	f50a 5010 	add.w	r0, sl, #9216	; 0x2400
 801665e:	9104      	str	r1, [sp, #16]
 8016660:	23a0      	movs	r3, #160	; 0xa0
 8016662:	4649      	mov	r1, r9
 8016664:	e048      	b.n	80166f8 <invoke+0x1028>
 8016666:	bf00      	nop
 8016668:	08063258 	.word	0x08063258
 801666c:	08044940 	.word	0x08044940
 8016670:	08044ac0 	.word	0x08044ac0
 8016674:	2003c028 	.word	0x2003c028
 8016678:	080450c0 	.word	0x080450c0
 801667c:	200012dc 	.word	0x200012dc
 8016680:	080456c0 	.word	0x080456c0
 8016684:	3d018094 	.word	0x3d018094
 8016688:	3cb5e0eb 	.word	0x3cb5e0eb
 801668c:	3cddaad5 	.word	0x3cddaad5
 8016690:	08045840 	.word	0x08045840
 8016694:	08045e40 	.word	0x08045e40
 8016698:	08082d58 	.word	0x08082d58
 801669c:	20001bdc 	.word	0x20001bdc
 80166a0:	08046440 	.word	0x08046440
 80166a4:	3d3459c4 	.word	0x3d3459c4
 80166a8:	3d06687e 	.word	0x3d06687e
 80166ac:	080465c0 	.word	0x080465c0
 80166b0:	2003c628 	.word	0x2003c628
 80166b4:	20003edc 	.word	0x20003edc
 80166b8:	08046f40 	.word	0x08046f40
 80166bc:	0803eb10 	.word	0x0803eb10
 80166c0:	08047840 	.word	0x08047840
 80166c4:	20000cdc 	.word	0x20000cdc
 80166c8:	200032dc 	.word	0x200032dc
 80166cc:	0806e7d8 	.word	0x0806e7d8
 80166d0:	2000145c 	.word	0x2000145c
 80166d4:	080777d8 	.word	0x080777d8
 80166d8:	0803c470 	.word	0x0803c470
 80166dc:	200038dc 	.word	0x200038dc
 80166e0:	200047dc 	.word	0x200047dc
 80166e4:	20001a5c 	.word	0x20001a5c
 80166e8:	0808bd58 	.word	0x0808bd58
 80166ec:	2003cf88 	.word	0x2003cf88
 80166f0:	200024dc 	.word	0x200024dc
 80166f4:	0809a998 	.word	0x0809a998
 80166f8:	9603      	str	r6, [sp, #12]
 80166fa:	f8cd 9000 	str.w	r9, [sp]
 80166fe:	9506      	str	r5, [sp, #24]
 8016700:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8016704:	f010 f932 	bl	802696c <avg_pooling>
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 8016708:	4632      	mov	r2, r6
 801670a:	f06f 0621 	mvn.w	r6, #33	; 0x21
 801670e:	f8df e3b0 	ldr.w	lr, [pc, #944]	; 8016ac0 <invoke+0x13f0>
 8016712:	f8df c3b0 	ldr.w	ip, [pc, #944]	; 8016ac4 <invoke+0x13f4>
 8016716:	4628      	mov	r0, r5
 8016718:	9603      	str	r6, [sp, #12]
 801671a:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 801671e:	f505 75f2 	add.w	r5, r5, #484	; 0x1e4
 8016722:	4611      	mov	r1, r2
 8016724:	920a      	str	r2, [sp, #40]	; 0x28
 8016726:	23a0      	movs	r3, #160	; 0xa0
 8016728:	9204      	str	r2, [sp, #16]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801672a:	f648 190d 	movw	r9, #35085	; 0x890d
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 801672e:	9507      	str	r5, [sp, #28]
 8016730:	f8cd c000 	str.w	ip, [sp]
 8016734:	940c      	str	r4, [sp, #48]	; 0x30
 8016736:	e9cd 6805 	strd	r6, r8, [sp, #20]
 801673a:	260a      	movs	r6, #10
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801673c:	f648 180b 	movw	r8, #35083	; 0x890b
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 8016740:	960b      	str	r6, [sp, #44]	; 0x2c
 8016742:	4eda      	ldr	r6, [pc, #872]	; (8016aac <invoke+0x13dc>)
 8016744:	e9cd a208 	strd	sl, r2, [sp, #32]
 8016748:	e9cd e601 	strd	lr, r6, [sp, #4]
 801674c:	f00d fd40 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8016750:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016752:	f648 1304 	movw	r3, #35076	; 0x8904
 8016756:	f648 1005 	movw	r0, #35077	; 0x8905
 801675a:	f648 1106 	movw	r1, #35078	; 0x8906
 801675e:	f648 1207 	movw	r2, #35079	; 0x8907
 8016762:	56ee      	ldrsb	r6, [r5, r3]
 8016764:	f648 1e0a 	movw	lr, #35082	; 0x890a
 8016768:	f648 1c08 	movw	ip, #35080	; 0x8908
 801676c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801676e:	ee03 6a10 	vmov	s6, r6
 8016772:	18ee      	adds	r6, r5, r3
 8016774:	f648 1309 	movw	r3, #35081	; 0x8909
 8016778:	9621      	str	r6, [sp, #132]	; 0x84
 801677a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801677e:	562e      	ldrsb	r6, [r5, r0]
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 8016780:	f10a 002c 	add.w	r0, sl, #44	; 0x2c
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8016784:	ee03 6a90 	vmov	s7, r6
 8016788:	566e      	ldrsb	r6, [r5, r1]
 801678a:	f648 110c 	movw	r1, #35084	; 0x890c
 801678e:	ee04 6a10 	vmov	s8, r6
 8016792:	56ae      	ldrsb	r6, [r5, r2]
 8016794:	eef8 3ae3 	vcvt.f32.s32	s7, s7
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 8016798:	2201      	movs	r2, #1
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801679a:	ee04 6a90 	vmov	s9, r6
 801679e:	f915 600e 	ldrsb.w	r6, [r5, lr]
 80167a2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80167a6:	ee05 6a90 	vmov	s11, r6
 80167aa:	f915 600c 	ldrsb.w	r6, [r5, ip]
 80167ae:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80167b2:	ee05 6a10 	vmov	s10, r6
 80167b6:	f915 6008 	ldrsb.w	r6, [r5, r8]
 80167ba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80167be:	ed87 4a00 	vstr	s8, [r7]
 80167c2:	ee06 6a10 	vmov	s12, r6
 80167c6:	566e      	ldrsb	r6, [r5, r1]
 80167c8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80167cc:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80167ce:	ee06 6a90 	vmov	s13, r6
 80167d2:	f915 6009 	ldrsb.w	r6, [r5, r9]
 80167d6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80167da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80167dc:	ee07 6a10 	vmov	s14, r6
 80167e0:	56ee      	ldrsb	r6, [r5, r3]
 80167e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80167e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80167e8:	ee07 6a90 	vmov	s15, r6
 80167ec:	eb05 060c 	add.w	r6, r5, ip
 80167f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80167f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167f6:	9622      	str	r6, [sp, #136]	; 0x88
 80167f8:	f648 160c 	movw	r6, #35084	; 0x890c
 80167fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016800:	ed83 3a00 	vstr	s6, [r3]
 8016804:	19ae      	adds	r6, r5, r6
 8016806:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016808:	edc1 3a00 	vstr	s7, [r1]
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 801680c:	230a      	movs	r3, #10
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801680e:	ed85 5a00 	vstr	s10, [r5]
 8016812:	ee17 ca90 	vmov	ip, s15
 8016816:	9d17      	ldr	r5, [sp, #92]	; 0x5c
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 8016818:	4611      	mov	r1, r2
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 801681a:	edc7 4a00 	vstr	s9, [r7]
/* layer 60:SUM */
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
/* layer 61:EXP */
tte_exp(10,(float*)&buffer0[35076],(float*)&buffer0[35160]);
/* layer 62:MUL */
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 801681e:	f648 1924 	movw	r9, #35108	; 0x8924
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8016822:	edc5 5a00 	vstr	s11, [r5]
 8016826:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8016828:	9623      	str	r6, [sp, #140]	; 0x8c
 801682a:	4656      	mov	r6, sl
 801682c:	ed85 6a00 	vstr	s12, [r5]
 8016830:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8016832:	edc5 6a00 	vstr	s13, [r5]
 8016836:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016838:	ed85 7a00 	vstr	s14, [r5]
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 801683c:	f1a0 0528 	sub.w	r5, r0, #40	; 0x28
 8016840:	9303      	str	r3, [sp, #12]
 8016842:	9500      	str	r5, [sp, #0]
 8016844:	e9cd 2201 	strd	r2, r2, [sp, #4]
for(int i = 0; i < 10; i++) fptr[i] = (float)int8ptr[i];
 8016848:	f846 cf40 	str.w	ip, [r6, #64]!
 801684c:	961f      	str	r6, [sp, #124]	; 0x7c
int8ptr = (int8_t*)&buffer0[35076];
 801684e:	4e98      	ldr	r6, [pc, #608]	; (8016ab0 <invoke+0x13e0>)
fptr = (float*)&buffer0[35116];
 8016850:	f8cb 0000 	str.w	r0, [fp]
int8ptr = (int8_t*)&buffer0[35076];
 8016854:	6035      	str	r5, [r6, #0]
fptr = (float*)&buffer0[35116];
 8016856:	4605      	mov	r5, r0
LogSoftmax((float*)&buffer0[35116],1,1,10,(float*)&buffer0[35076],1,1,10);
 8016858:	f007 ff62 	bl	801e720 <LogSoftmax>
nll_loss((float*)&buffer0[35076],2,1,labels,10,(float*)&buffer0[35116]);
 801685c:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8016860:	230a      	movs	r3, #10
 8016862:	9501      	str	r5, [sp, #4]
 8016864:	f1a5 0028 	sub.w	r0, r5, #40	; 0x28
 8016868:	2201      	movs	r2, #1
 801686a:	9300      	str	r3, [sp, #0]
 801686c:	2102      	movs	r1, #2
 801686e:	4643      	mov	r3, r8
 8016870:	f007 ffd6 	bl	801e820 <nll_loss>
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 8016874:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016876:	ed87 8a00 	vstr	s16, [r7]
fptr = (float*)&buffer0[35116];for(int i = 0; i < 1; i++) fptr[i] = 1.0;
 801687a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 801687e:	ed80 8a00 	vstr	s16, [r0]
 8016882:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016884:	9715      	str	r7, [sp, #84]	; 0x54
 8016886:	ed80 8a00 	vstr	s16, [r0]
 801688a:	9816      	ldr	r0, [sp, #88]	; 0x58
fptr = (float*)&buffer0[35116];for(int i = 0; i < 1; i++) fptr[i] = 1.0;
 801688c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 801688e:	ed80 8a00 	vstr	s16, [r0]
 8016892:	9817      	ldr	r0, [sp, #92]	; 0x5c
fptr = (float*)&buffer0[35116];for(int i = 0; i < 1; i++) fptr[i] = 1.0;
 8016894:	6039      	str	r1, [r7, #0]
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 8016896:	ed80 8a00 	vstr	s16, [r0]
 801689a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801689c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801689e:	ed80 8a00 	vstr	s16, [r0]
 80168a2:	9819      	ldr	r0, [sp, #100]	; 0x64
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80168a4:	9920      	ldr	r1, [sp, #128]	; 0x80
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 80168a6:	ed80 8a00 	vstr	s16, [r0]
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80168aa:	4a82      	ldr	r2, [pc, #520]	; (8016ab4 <invoke+0x13e4>)
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 80168ac:	981a      	ldr	r0, [sp, #104]	; 0x68
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80168ae:	600a      	str	r2, [r1, #0]
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 80168b0:	220a      	movs	r2, #10
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 80168b2:	ed83 8a00 	vstr	s16, [r3]
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 80168b6:	2301      	movs	r3, #1
fptr = (float*)&buffer0[35116];for(int i = 0; i < 10; i++) fptr[i] = 0.0;
 80168b8:	ed80 8a00 	vstr	s16, [r0]
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 80168bc:	4628      	mov	r0, r5
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80168be:	edd8 7a00 	vldr	s15, [r8]
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80168c2:	497d      	ldr	r1, [pc, #500]	; (8016ab8 <invoke+0x13e8>)
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80168c4:	eef1 7a67 	vneg.f32	s15, s15
int8ptr = (char*)&buffer0[35116];for(int i = 0; i < 1; i++) int8ptr[i] = 0;
 80168c8:	6035      	str	r5, [r6, #0]
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80168ca:	4e7c      	ldr	r6, [pc, #496]	; (8016abc <invoke+0x13ec>)
 80168cc:	f8cb 8000 	str.w	r8, [fp]
 80168d0:	edc7 7a00 	vstr	s15, [r7]
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80168d4:	f105 0728 	add.w	r7, r5, #40	; 0x28
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80168d8:	edd8 7a01 	vldr	s15, [r8, #4]
fptr = (float*)&buffer0[35116];fptr2 = (float*)&buffer0[35156];for(int i = 0; i < 1; i++) fptr2[i] = fptr[i] * -1.0f;
 80168dc:	600f      	str	r7, [r1, #0]
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80168de:	eef1 7a67 	vneg.f32	s15, s15
 80168e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80168e4:	6035      	str	r5, [r6, #0]
 80168e6:	edc1 7a00 	vstr	s15, [r1]
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 80168ea:	4619      	mov	r1, r3
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80168ec:	edd8 7a02 	vldr	s15, [r8, #8]
 80168f0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80168f2:	eef1 7a67 	vneg.f32	s15, s15
 80168f6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80168f8:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 80168fc:	edc7 7a00 	vstr	s15, [r7]
 8016900:	edd8 7a03 	vldr	s15, [r8, #12]
 8016904:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8016906:	eef1 7a67 	vneg.f32	s15, s15
 801690a:	edc7 7a00 	vstr	s15, [r7]
 801690e:	edd8 7a04 	vldr	s15, [r8, #16]
 8016912:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8016914:	eef1 7a67 	vneg.f32	s15, s15
 8016918:	edc7 7a00 	vstr	s15, [r7]
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 801691c:	f100 0728 	add.w	r7, r0, #40	; 0x28
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016920:	edd8 7a05 	vldr	s15, [r8, #20]
 8016924:	eef1 7a67 	vneg.f32	s15, s15
 8016928:	edc5 7a00 	vstr	s15, [r5]
 801692c:	edd8 7a06 	vldr	s15, [r8, #24]
 8016930:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8016932:	eef1 7a67 	vneg.f32	s15, s15
 8016936:	edc5 7a00 	vstr	s15, [r5]
 801693a:	edd8 7a07 	vldr	s15, [r8, #28]
 801693e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016940:	eef1 7a67 	vneg.f32	s15, s15
 8016944:	9513      	str	r5, [sp, #76]	; 0x4c
 8016946:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8016948:	edc5 7a00 	vstr	s15, [r5]
 801694c:	edd8 7a08 	vldr	s15, [r8, #32]
 8016950:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8016952:	eef1 7a67 	vneg.f32	s15, s15
 8016956:	edc5 7a00 	vstr	s15, [r5]
 801695a:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 801695e:	f648 187c 	movw	r8, #35196	; 0x897c
fptr = (float*)labels;fptr3 = (float*)&buffer0[35116];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016962:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016964:	eef1 7a67 	vneg.f32	s15, s15
 8016968:	edc5 7a00 	vstr	s15, [r5]
sum_3D((float*)&buffer0[35116],1,10,1,1,(float*)&buffer0[35156]);
 801696c:	9300      	str	r3, [sp, #0]
 801696e:	9701      	str	r7, [sp, #4]
 8016970:	f00b fb78 	bl	8022064 <sum_3D>
tte_exp(10,(float*)&buffer0[35076],(float*)&buffer0[35160]);
 8016974:	f10a 0104 	add.w	r1, sl, #4
 8016978:	200a      	movs	r0, #10
 801697a:	f101 0254 	add.w	r2, r1, #84	; 0x54
 801697e:	f00c febf 	bl	8023700 <tte_exp>
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016984:	f648 1c68 	movw	ip, #35176	; 0x8968
 8016988:	f648 106c 	movw	r0, #35180	; 0x896c
 801698c:	f648 1170 	movw	r1, #35184	; 0x8970
 8016990:	f648 1e64 	movw	lr, #35172	; 0x8964
 8016994:	449c      	add	ip, r3
 8016996:	4418      	add	r0, r3
 8016998:	4419      	add	r1, r3
 801699a:	f648 1274 	movw	r2, #35188	; 0x8974
 801699e:	461f      	mov	r7, r3
 80169a0:	ed9c 3a00 	vldr	s6, [ip]
 80169a4:	edd0 3a00 	vldr	s7, [r0]
 80169a8:	449e      	add	lr, r3
 80169aa:	441a      	add	r2, r3
 80169ac:	ed91 4a00 	vldr	s8, [r1]
 80169b0:	f648 1378 	movw	r3, #35192	; 0x8978
 80169b4:	f648 1c58 	movw	ip, #35160	; 0x8958
 80169b8:	f648 105c 	movw	r0, #35164	; 0x895c
 80169bc:	f648 1160 	movw	r1, #35168	; 0x8960
 80169c0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80169c2:	443b      	add	r3, r7
 80169c4:	44b8      	add	r8, r7
 80169c6:	44bc      	add	ip, r7
 80169c8:	4438      	add	r0, r7
 80169ca:	4439      	add	r1, r7
 80169cc:	edd5 7a00 	vldr	s15, [r5]
 80169d0:	44b9      	add	r9, r7
 80169d2:	edde 2a00 	vldr	s5, [lr]
 80169d6:	f648 1e1c 	movw	lr, #35100	; 0x891c
 80169da:	ed91 7a00 	vldr	s14, [r1]
/* layer 63:SUBTRACT */
sub(10,(float*)&buffer0[35116],(float*)&buffer0[35076],(float*)&buffer0[35156]);
 80169de:	f10a 012c 	add.w	r1, sl, #44	; 0x2c
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 80169e2:	edd2 4a00 	vldr	s9, [r2]
 80169e6:	f648 1214 	movw	r2, #35092	; 0x8914
 80169ea:	ed93 5a00 	vldr	s10, [r3]
 80169ee:	f648 1310 	movw	r3, #35088	; 0x8910
 80169f2:	edd8 5a00 	vldr	s11, [r8]
 80169f6:	f648 1820 	movw	r8, #35104	; 0x8920
 80169fa:	ed9c 6a00 	vldr	s12, [ip]
 80169fe:	f648 1c28 	movw	ip, #35112	; 0x8928
 8016a02:	edd0 6a00 	vldr	s13, [r0]
 8016a06:	f648 1018 	movw	r0, #35096	; 0x8918
 8016a0a:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8016a0e:	44be      	add	lr, r7
 8016a10:	ee23 3a27 	vmul.f32	s6, s6, s15
 8016a14:	44bc      	add	ip, r7
 8016a16:	443b      	add	r3, r7
 8016a18:	443a      	add	r2, r7
 8016a1a:	4438      	add	r0, r7
 8016a1c:	44b8      	add	r8, r7
 8016a1e:	f101 072c 	add.w	r7, r1, #44	; 0x2c
 8016a22:	edc3 2a00 	vstr	s5, [r3]
 8016a26:	ed82 3a00 	vstr	s6, [r2]
sub(10,(float*)&buffer0[35116],(float*)&buffer0[35076],(float*)&buffer0[35156]);
 8016a2a:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8016a2e:	f1a1 0228 	sub.w	r2, r1, #40	; 0x28
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016a32:	f8cb 7000 	str.w	r7, [fp]
 8016a36:	4f20      	ldr	r7, [pc, #128]	; (8016ab8 <invoke+0x13e8>)
 8016a38:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016a3c:	ee24 4a27 	vmul.f32	s8, s8, s15
 8016a40:	6032      	str	r2, [r6, #0]
 8016a42:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8016a46:	603b      	str	r3, [r7, #0]
 8016a48:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016a4c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8016a4e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8016a52:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8016a54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016a58:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8016a5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016a5e:	ed89 5a00 	vstr	s10, [r9]
 8016a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a66:	edc0 3a00 	vstr	s7, [r0]
 8016a6a:	ed8e 4a00 	vstr	s8, [lr]
sub(10,(float*)&buffer0[35116],(float*)&buffer0[35076],(float*)&buffer0[35156]);
 8016a6e:	200a      	movs	r0, #10
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016a70:	edc8 4a00 	vstr	s9, [r8]
/* layer 64:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[35072],10,(float*)&buffer0[35156]);
/* layer 65:MUL */
mul(10,(float*)&buffer0[35156],scales42,(float*)&buffer0[35072]);
/* layer 66:BIAS_UPDATE */
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 8016a74:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016a78:	edcc 5a00 	vstr	s11, [ip]
fptr = (float*)&buffer0[35072];//gradients
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016a7c:	f10a 090c 	add.w	r9, sl, #12
fptr = (float*)&buffer0[35160];fptr3 = (float*)&buffer0[35076];fptr2 = &buffer0[35156];for(int i = 0; i < 10; i++) fptr3[i] = *fptr2 * fptr[i];
 8016a80:	ed85 6a00 	vstr	s12, [r5]
 8016a84:	edc6 6a00 	vstr	s13, [r6]
 8016a88:	edc7 7a00 	vstr	s15, [r7]
sub(10,(float*)&buffer0[35116],(float*)&buffer0[35076],(float*)&buffer0[35156]);
 8016a8c:	f00b fada 	bl	8022044 <sub>
where_zeros_inplace_bit((bool*)&buffer0[35072],10,(float*)&buffer0[35156]);
 8016a90:	f10a 0254 	add.w	r2, sl, #84	; 0x54
 8016a94:	210a      	movs	r1, #10
 8016a96:	4650      	mov	r0, sl
 8016a98:	f00c fe4c 	bl	8023734 <where_zeros_inplace_bit>
mul(10,(float*)&buffer0[35156],scales42,(float*)&buffer0[35072]);
 8016a9c:	4653      	mov	r3, sl
 8016a9e:	f10a 0154 	add.w	r1, sl, #84	; 0x54
 8016aa2:	4a02      	ldr	r2, [pc, #8]	; (8016aac <invoke+0x13dc>)
 8016aa4:	200a      	movs	r0, #10
 8016aa6:	f007 feab 	bl	801e800 <mul>
 8016aaa:	e00d      	b.n	8016ac8 <invoke+0x13f8>
 8016aac:	08047ac0 	.word	0x08047ac0
 8016ab0:	2003cfdc 	.word	0x2003cfdc
 8016ab4:	bf800000 	.word	0xbf800000
 8016ab8:	2003cfcc 	.word	0x2003cfcc
 8016abc:	2003cfd8 	.word	0x2003cfd8
 8016ac0:	2000cf18 	.word	0x2000cf18
 8016ac4:	20007dcc 	.word	0x20007dcc
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016ac8:	4bdd      	ldr	r3, [pc, #884]	; (8016e40 <invoke+0x1770>)
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 8016aca:	f8df e3c4 	ldr.w	lr, [pc, #964]	; 8016e90 <invoke+0x17c0>
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016ace:	f8d3 c000 	ldr.w	ip, [r3]
 8016ad2:	eddf 7adc 	vldr	s15, [pc, #880]	; 8016e44 <invoke+0x1774>
 8016ad6:	edda 4a00 	vldr	s9, [sl]
 8016ada:	ed95 5a00 	vldr	s10, [r5]
 8016ade:	edd6 5a00 	vldr	s11, [r6]
fptr = (float*)&buffer0[35072];//gradients
 8016ae2:	f8cb a000 	str.w	sl, [fp]
/* layer 67:TRANSPOSE_CONV_2D */
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016ae6:	eddf 0ad8 	vldr	s1, [pc, #864]	; 8016e48 <invoke+0x1778>
 8016aea:	ed9f 0ad8 	vldr	s0, [pc, #864]	; 8016e4c <invoke+0x177c>
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 8016aee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016af2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016af6:	ed9d 6a34 	vldr	s12, [sp, #208]	; 0xd0
 8016afa:	eddd 6a35 	vldr	s13, [sp, #212]	; 0xd4
 8016afe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016b02:	ed9d 7a36 	vldr	s14, [sp, #216]	; 0xd8
 8016b06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016b0e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016b12:	ee66 6a85 	vmul.f32	s13, s13, s10
 8016b16:	ee27 7a25 	vmul.f32	s14, s14, s11
 8016b1a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8016b1e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8016b22:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016b26:	ee16 7a10 	vmov	r7, s12
 8016b2a:	e9dc 6500 	ldrd	r6, r5, [ip]
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 8016b2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016b32:	1bf6      	subs	r6, r6, r7
 8016b34:	ee16 7a90 	vmov	r7, s13
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 8016b38:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016b3c:	1bed      	subs	r5, r5, r7
 8016b3e:	f8cc 6000 	str.w	r6, [ip]
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016b42:	2201      	movs	r2, #1
 8016b44:	230a      	movs	r3, #10
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016b46:	f8cc 5004 	str.w	r5, [ip, #4]
const float v15_bias_QAS[10] = {7226669.0,5630245.0,7711640.5,8892241.0,8484369.0,5921074.5,6742354.0,8089809.0,6873818.5,5485806.5,};
 8016b4a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016b4e:	e888 0003 	stmia.w	r8, {r0, r1}
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016b52:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016b56:	4650      	mov	r0, sl
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016b58:	ed9d 5a39 	vldr	s10, [sp, #228]	; 0xe4
 8016b5c:	ee17 8a10 	vmov	r8, s14
 8016b60:	ee24 4a27 	vmul.f32	s8, s8, s15
 8016b64:	edd9 3a00 	vldr	s7, [r9]
 8016b68:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8016b6c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016b70:	eddd 4a38 	vldr	s9, [sp, #224]	; 0xe0
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016b74:	4611      	mov	r1, r2
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016b76:	eddd 5a3a 	vldr	s11, [sp, #232]	; 0xe8
 8016b7a:	ee24 4a23 	vmul.f32	s8, s8, s7
 8016b7e:	ed9d 6a3b 	vldr	s12, [sp, #236]	; 0xec
 8016b82:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8016b86:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
 8016b8a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8016b8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016b92:	ed90 3a04 	vldr	s6, [r0, #16]
 8016b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016b9a:	edd0 3a06 	vldr	s7, [r0, #24]
 8016b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ba2:	ed90 7a05 	vldr	s14, [r0, #20]
 8016ba6:	eebd 4ac4 	vcvt.s32.f32	s8, s8
 8016baa:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8016bae:	ee25 5a07 	vmul.f32	s10, s10, s14
 8016bb2:	ed99 7a05 	vldr	s14, [r9, #20]
 8016bb6:	ee64 4a83 	vmul.f32	s9, s9, s6
 8016bba:	ed99 3a04 	vldr	s6, [r9, #16]
 8016bbe:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8016bc2:	ee14 6a10 	vmov	r6, s8
 8016bc6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016bca:	edd9 3a06 	vldr	s7, [r9, #24]
 8016bce:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 8016bd2:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8016bd6:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 8016bda:	1bad      	subs	r5, r5, r6
 8016bdc:	ee26 6a03 	vmul.f32	s12, s12, s6
 8016be0:	eba7 0a08 	sub.w	sl, r7, r8
 8016be4:	ee16 9a90 	vmov	r9, s13
 8016be8:	eefd 6ae5 	vcvt.s32.f32	s13, s11
 8016bec:	f8cc 500c 	str.w	r5, [ip, #12]
 8016bf0:	ee14 7a90 	vmov	r7, s9
 8016bf4:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8016bf8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8016bfc:	ee16 8a90 	vmov	r8, s13
 8016c00:	eefd 6ac6 	vcvt.s32.f32	s13, s12
 8016c04:	1bed      	subs	r5, r5, r7
 8016c06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016c0a:	f8dc 701c 	ldr.w	r7, [ip, #28]
 8016c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c12:	f8cc 5010 	str.w	r5, [ip, #16]
 8016c16:	ee16 ea90 	vmov	lr, s13
 8016c1a:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8016c1e:	ee17 6a10 	vmov	r6, s14
 8016c22:	eba7 0e0e 	sub.w	lr, r7, lr
 8016c26:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8016c2a:	eba5 0909 	sub.w	r9, r5, r9
 8016c2e:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8016c32:	1bbe      	subs	r6, r7, r6
 8016c34:	ee17 7a90 	vmov	r7, s15
 8016c38:	eba5 0808 	sub.w	r8, r5, r8
 8016c3c:	f8dc 5024 	ldr.w	r5, [ip, #36]	; 0x24
 8016c40:	f8cc a008 	str.w	sl, [ip, #8]
 8016c44:	1bed      	subs	r5, r5, r7
 8016c46:	f8cc 5024 	str.w	r5, [ip, #36]	; 0x24
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016c4a:	25a0      	movs	r5, #160	; 0xa0
for(int i = 0; i < 10; i++) v15_bias[i] -= (int32_t)(fptr[i] * blr * v15_bias_QAS[i]);
 8016c4c:	e9cc e607 	strd	lr, r6, [ip, #28]
 8016c50:	e9cc 9805 	strd	r9, r8, [ip, #20]
pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight((float*)&buffer0[35072],1,1,10,(q7_t*)v15_weight,NULL,(float*)&buffer0[35752],1,1,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016c54:	9207      	str	r2, [sp, #28]
 8016c56:	2600      	movs	r6, #0
 8016c58:	9406      	str	r4, [sp, #24]
 8016c5a:	9505      	str	r5, [sp, #20]
 8016c5c:	4d7c      	ldr	r5, [pc, #496]	; (8016e50 <invoke+0x1780>)
 8016c5e:	682d      	ldr	r5, [r5, #0]
 8016c60:	e9cd 5600 	strd	r5, r6, [sp]
 8016c64:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8016c68:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016c6c:	9502      	str	r5, [sp, #8]
 8016c6e:	f007 fdfd 	bl	801e86c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight>
 8016c72:	462b      	mov	r3, r5
/* layer 68:MUL */
fptr = (float*)&buffer0[35752];fptr3 = (float*)&buffer0[35112];for(int i = 0; i < 160; i++) fptr3[i] = 0.0625 * fptr[i];
 8016c74:	f5a5 7520 	sub.w	r5, r5, #640	; 0x280
 8016c78:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8016e54 <invoke+0x1784>
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	461a      	mov	r2, r3
 8016c80:	4629      	mov	r1, r5
 8016c82:	462f      	mov	r7, r5
 8016c84:	ecf2 7a01 	vldmia	r2!, {s15}
 8016c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016c8c:	ece1 7a01 	vstmia	r1!, {s15}
 8016c90:	4281      	cmp	r1, r0
 8016c92:	d1f7      	bne.n	8016c84 <invoke+0x15b4>
/* layer 69:ONES */
fptr = (float*)&buffer0[35752];for(int i = 0; i < 2560; i++) fptr[i] = 1.0;
 8016c94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016c98:	486f      	ldr	r0, [pc, #444]	; (8016e58 <invoke+0x1788>)
 8016c9a:	f843 2b04 	str.w	r2, [r3], #4
 8016c9e:	4283      	cmp	r3, r0
 8016ca0:	d1fb      	bne.n	8016c9a <invoke+0x15ca>
/* layer 70:MUL */
fptr = &buffer0[35752];
fptr3 = (float*)&buffer0[71456];fptr2 = &buffer0[35112];
 8016ca2:	4a6e      	ldr	r2, [pc, #440]	; (8016e5c <invoke+0x178c>)
 8016ca4:	f648 3578 	movw	r5, #35704	; 0x8b78
 8016ca8:	4b6d      	ldr	r3, [pc, #436]	; (8016e60 <invoke+0x1790>)
 8016caa:	f502 7c20 	add.w	ip, r2, #640	; 0x280
 8016cae:	601a      	str	r2, [r3, #0]
 8016cb0:	4662      	mov	r2, ip
 8016cb2:	eb0c 0305 	add.w	r3, ip, r5
fptr = (float*)&buffer0[35752];fptr3 = (float*)&buffer0[35112];for(int i = 0; i < 160; i++) fptr3[i] = 0.0625 * fptr[i];
 8016cb6:	463e      	mov	r6, r7
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 160; i++) *fptr3++ = fptr2[i] * *fptr++;
 8016cb8:	ecb6 7a01 	vldmia	r6!, {s14}
 8016cbc:	ecf2 7a01 	vldmia	r2!, {s15}
 8016cc0:	428e      	cmp	r6, r1
 8016cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cc6:	ece3 7a01 	vstmia	r3!, {s15}
 8016cca:	d1f5      	bne.n	8016cb8 <invoke+0x15e8>
 8016ccc:	f50c 7c20 	add.w	ip, ip, #640	; 0x280
for(int hw = 0; hw < 16; hw++){
 8016cd0:	4584      	cmp	ip, r0
 8016cd2:	d1ed      	bne.n	8016cb0 <invoke+0x15e0>
 8016cd4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8016e94 <invoke+0x17c4>
}
/* layer 71:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[34752],2560,(float*)&buffer0[71456]);
 8016cd8:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8016cdc:	4b61      	ldr	r3, [pc, #388]	; (8016e64 <invoke+0x1794>)
/* layer 72:MUL */
fptr = &buffer0[71456];
fptr2 = scales41;
 8016cde:	f5a8 5520 	sub.w	r5, r8, #10240	; 0x2800
where_zeros_inplace_bit((bool*)&buffer0[34752],2560,(float*)&buffer0[71456]);
 8016ce2:	4861      	ldr	r0, [pc, #388]	; (8016e68 <invoke+0x1798>)
 8016ce4:	f8c3 8000 	str.w	r8, [r3]
 8016ce8:	462a      	mov	r2, r5
 8016cea:	f8cb c000 	str.w	ip, [fp]
 8016cee:	f00c fd21 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales41;
 8016cf2:	4a5e      	ldr	r2, [pc, #376]	; (8016e6c <invoke+0x179c>)
 8016cf4:	4b5a      	ldr	r3, [pc, #360]	; (8016e60 <invoke+0x1790>)
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	f502 7120 	add.w	r1, r2, #640	; 0x280
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	4602      	mov	r2, r0
 8016d00:	4b5a      	ldr	r3, [pc, #360]	; (8016e6c <invoke+0x179c>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 160; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8016d02:	ecb3 7a01 	vldmia	r3!, {s14}
 8016d06:	edd2 7a00 	vldr	s15, [r2]
 8016d0a:	4299      	cmp	r1, r3
 8016d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d10:	ece2 7a01 	vstmia	r2!, {s15}
 8016d14:	d1f5      	bne.n	8016d02 <invoke+0x1632>
 8016d16:	f500 7020 	add.w	r0, r0, #640	; 0x280
for(int hw = 0; hw < 16; hw++){
 8016d1a:	4540      	cmp	r0, r8
 8016d1c:	d1ef      	bne.n	8016cfe <invoke+0x162e>
}
/* layer 73:SUM */
sum_4D_exclude((float*)&buffer0[71456],1,4,4,160,3,(float*)&buffer0[35112]);
 8016d1e:	2304      	movs	r3, #4
 8016d20:	46b8      	mov	r8, r7
 8016d22:	2203      	movs	r2, #3
 8016d24:	4f4d      	ldr	r7, [pc, #308]	; (8016e5c <invoke+0x178c>)
 8016d26:	21a0      	movs	r1, #160	; 0xa0
 8016d28:	e9cd 2701 	strd	r2, r7, [sp, #4]
 8016d2c:	9100      	str	r1, [sp, #0]
 8016d2e:	461a      	mov	r2, r3
 8016d30:	2101      	movs	r1, #1
 8016d32:	f8cb 0000 	str.w	r0, [fp]
 8016d36:	484e      	ldr	r0, [pc, #312]	; (8016e70 <invoke+0x17a0>)
 8016d38:	f00b fa2a 	bl	8022190 <sum_4D_exclude>
/* layer 74:BIAS_UPDATE */
const float v14_conv_2_bias_QAS[160] = {13692137.0,19261938.0,11724018.0,15995767.0,11511035.0,13978226.0,13318236.0,15185337.0,16044907.0,13090192.0,18656104.0,15929412.0,13392275.0,12705674.0,14612814.0,14853912.0,13506463.0,14990395.0,11315240.0,14900121.0,12532963.0,13305904.0,10984116.0,11420090.0,20989936.0,11729253.0,16511564.0,12546760.0,15382199.0,11444539.0,14609242.0,14229125.0,10841364.0,13249268.0,11710322.0,18311496.0,18176314.0,16571779.0,10241948.0,17752202.0,10010849.0,14704289.0,16407807.0,10964493.0,9445204.0,11574554.0,13028653.0,10459334.0,13996892.0,13706602.0,11706172.0,9088910.0,17713242.0,13367667.0,16977514.0,13729297.0,12711183.0,12772596.0,13657839.0,17160660.0,12789136.0,12517683.0,15142629.0,10657967.0,15758544.0,12207528.0,13358369.0,15665969.0,12541531.0,11594505.0,14079964.0,12522974.0,14928081.0,10138978.0,13967913.0,15935079.0,12038422.0,11431681.0,12112233.0,16464442.0,14495634.0,9923740.0,12361548.0,16376936.0,13596515.0,10047472.0,11238909.0,11956242.0,16708229.0,16412659.0,17055102.0,12363023.0,11499603.0,16893202.0,11182502.0,12018862.0,10686181.0,9444339.0,13663267.0,11849798.0,14407176.0,16582653.0,14108628.0,18280370.0,9444990.0,17465492.0,12230222.0,14927575.0,15896605.0,15578875.0,11972533.0,9797134.0,10548356.0,13393242.0,12720091.0,11875466.0,11710234.0,19880172.0,11598175.0,10539637.0,15175966.0,12422034.0,14625480.0,9663037.0,12314371.0,17176266.0,16664494.0,17591406.0,13589260.0,16484145.0,9586017.0,17904128.0,9004582.0,12500575.0,15361911.0,15686215.0,11069421.0,16926154.0,11444003.0,19838518.0,19701492.0,13418607.0,13593890.0,17349308.0,11338150.0,7302307.5,17400080.0,16249119.0,9367620.0,14919256.0,11277772.0,12360135.0,13006402.0,23275230.0,13262085.0,13616705.0,9458116.0,10899180.0,13300777.0,11491153.0,};
 8016d3c:	494d      	ldr	r1, [pc, #308]	; (8016e74 <invoke+0x17a4>)
 8016d3e:	f50d 606a 	add.w	r0, sp, #3744	; 0xea0
 8016d42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d46:	f012 f8be 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[35112];//gradients
for(int i = 0; i < 160; i++) v14_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_2_bias_QAS[i]);
 8016d4a:	4b4b      	ldr	r3, [pc, #300]	; (8016e78 <invoke+0x17a8>)
fptr = (float*)&buffer0[35112];//gradients
 8016d4c:	f8cb 7000 	str.w	r7, [fp]
 8016d50:	f50d 606a 	add.w	r0, sp, #3744	; 0xea0
 8016d54:	6819      	ldr	r1, [r3, #0]
 8016d56:	4647      	mov	r7, r8
for(int i = 0; i < 160; i++) v14_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_2_bias_QAS[i]);
 8016d58:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8016e44 <invoke+0x1774>
 8016d5c:	3904      	subs	r1, #4
 8016d5e:	ecb7 7a01 	vldmia	r7!, {s14}
 8016d62:	ecf0 7a01 	vldmia	r0!, {s15}
 8016d66:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016d6a:	42be      	cmp	r6, r7
 8016d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d78:	ee17 3a90 	vmov	r3, s15
 8016d7c:	eba2 0303 	sub.w	r3, r2, r3
 8016d80:	600b      	str	r3, [r1, #0]
 8016d82:	d1ec      	bne.n	8016d5e <invoke+0x168e>
/* layer 75:GROUP_CONV */
const float v15_weight_QAS[10] = {156465.22,121900.914,166965.39,192526.67,183695.81,128197.68,145979.3,175153.14,148825.64,118773.67,};
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[34592],1,1,160,weight_fp44,NULL,v15_weight,1,1,1600,-FLT_MAX,FLT_MAX,(float*)sbuf,1,160, v15_weight_QAS, lr);
 8016d84:	4b3d      	ldr	r3, [pc, #244]	; (8016e7c <invoke+0x17ac>)
 8016d86:	2601      	movs	r6, #1
 8016d88:	4a31      	ldr	r2, [pc, #196]	; (8016e50 <invoke+0x1780>)
 8016d8a:	27a0      	movs	r7, #160	; 0xa0
const float v15_weight_QAS[10] = {156465.22,121900.914,166965.39,192526.67,183695.81,128197.68,145979.3,175153.14,148825.64,118773.67,};
 8016d8c:	f8df e108 	ldr.w	lr, [pc, #264]	; 8016e98 <invoke+0x17c8>
 8016d90:	f10d 0cf8 	add.w	ip, sp, #248	; 0xf8
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[34592],1,1,160,weight_fp44,NULL,v15_weight,1,1,1600,-FLT_MAX,FLT_MAX,(float*)sbuf,1,160, v15_weight_QAS, lr);
 8016d94:	6811      	ldr	r1, [r2, #0]
 8016d96:	f04f 0800 	mov.w	r8, #0
 8016d9a:	681a      	ldr	r2, [r3, #0]
 8016d9c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8016da0:	9102      	str	r1, [sp, #8]
 8016da2:	9200      	str	r2, [sp, #0]
 8016da4:	9305      	str	r3, [sp, #20]
 8016da6:	9406      	str	r4, [sp, #24]
 8016da8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8016dac:	f8cd 8004 	str.w	r8, [sp, #4]
 8016db0:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8016e80 <invoke+0x17b0>
 8016db4:	eddf 0a24 	vldr	s1, [pc, #144]	; 8016e48 <invoke+0x1778>
 8016db8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016e4c <invoke+0x177c>
const float v15_weight_QAS[10] = {156465.22,121900.914,166965.39,192526.67,183695.81,128197.68,145979.3,175153.14,148825.64,118773.67,};
 8016dbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[34592],1,1,160,weight_fp44,NULL,v15_weight,1,1,1600,-FLT_MAX,FLT_MAX,(float*)sbuf,1,160, v15_weight_QAS, lr);
 8016dc0:	e9cd 6707 	strd	r6, r7, [sp, #28]
 8016dc4:	e9cd 6603 	strd	r6, r6, [sp, #12]
const float v15_weight_QAS[10] = {156465.22,121900.914,166965.39,192526.67,183695.81,128197.68,145979.3,175153.14,148825.64,118773.67,};
 8016dc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016dcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016dd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016dd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[34592],1,1,160,weight_fp44,NULL,v15_weight,1,1,1600,-FLT_MAX,FLT_MAX,(float*)sbuf,1,160, v15_weight_QAS, lr);
 8016dd8:	4632      	mov	r2, r6
 8016dda:	463b      	mov	r3, r7
const float v15_weight_QAS[10] = {156465.22,121900.914,166965.39,192526.67,183695.81,128197.68,145979.3,175153.14,148825.64,118773.67,};
 8016ddc:	e88c 0003 	stmia.w	ip, {r0, r1}
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[34592],1,1,160,weight_fp44,NULL,v15_weight,1,1,1600,-FLT_MAX,FLT_MAX,(float*)sbuf,1,160, v15_weight_QAS, lr);
 8016de0:	4631      	mov	r1, r6
 8016de2:	4828      	ldr	r0, [pc, #160]	; (8016e84 <invoke+0x17b4>)
 8016de4:	f007 fb2c 	bl	801e440 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace>
/* layer 76:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[71456],4,4,160,(q7_t*)v14_conv_2_weight,NULL,(float*)&buffer0[34592],4,4,576,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8016de8:	4b27      	ldr	r3, [pc, #156]	; (8016e88 <invoke+0x17b8>)
 8016dea:	2004      	movs	r0, #4
 8016dec:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	9607      	str	r6, [sp, #28]
 8016df4:	4602      	mov	r2, r0
 8016df6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016df8:	4601      	mov	r1, r0
 8016dfa:	9300      	str	r3, [sp, #0]
 8016dfc:	463b      	mov	r3, r7
 8016dfe:	9602      	str	r6, [sp, #8]
 8016e00:	9003      	str	r0, [sp, #12]
 8016e02:	eddf 0a11 	vldr	s1, [pc, #68]	; 8016e48 <invoke+0x1778>
 8016e06:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8016e4c <invoke+0x177c>
 8016e0a:	f8cd 8004 	str.w	r8, [sp, #4]
 8016e0e:	9406      	str	r4, [sp, #24]
 8016e10:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8016e14:	4816      	ldr	r0, [pc, #88]	; (8016e70 <invoke+0x17a0>)
 8016e16:	f008 f8d3 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 77:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[33440],9216,(float*)&buffer0[34592]);
 8016e1a:	4a1a      	ldr	r2, [pc, #104]	; (8016e84 <invoke+0x17b4>)
 8016e1c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8016e20:	f5a2 6090 	sub.w	r0, r2, #1152	; 0x480
/* layer 78:MUL */
fptr = &buffer0[34592];
fptr2 = scales40;
 8016e24:	4616      	mov	r6, r2
 8016e26:	921d      	str	r2, [sp, #116]	; 0x74
where_zeros_inplace_bit((bool*)&buffer0[33440],9216,(float*)&buffer0[34592]);
 8016e28:	f00c fc84 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales40;
 8016e2c:	4a17      	ldr	r2, [pc, #92]	; (8016e8c <invoke+0x17bc>)
 8016e2e:	4630      	mov	r0, r6
 8016e30:	4b0b      	ldr	r3, [pc, #44]	; (8016e60 <invoke+0x1790>)
 8016e32:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8016e36:	601a      	str	r2, [r3, #0]
 8016e38:	4602      	mov	r2, r0
 8016e3a:	4b14      	ldr	r3, [pc, #80]	; (8016e8c <invoke+0x17bc>)
 8016e3c:	e02e      	b.n	8016e9c <invoke+0x17cc>
 8016e3e:	bf00      	nop
 8016e40:	20004e5c 	.word	0x20004e5c
 8016e44:	39d1b717 	.word	0x39d1b717
 8016e48:	7f7fffff 	.word	0x7f7fffff
 8016e4c:	ff7fffff 	.word	0xff7fffff
 8016e50:	20004e60 	.word	0x20004e60
 8016e54:	3d800000 	.word	0x3d800000
 8016e58:	200182e8 	.word	0x200182e8
 8016e5c:	20015868 	.word	0x20015868
 8016e60:	2003cfcc 	.word	0x2003cfcc
 8016e64:	2003cfd8 	.word	0x2003cfd8
 8016e68:	20015700 	.word	0x20015700
 8016e6c:	08047840 	.word	0x08047840
 8016e70:	2001e660 	.word	0x2001e660
 8016e74:	0802c6a0 	.word	0x0802c6a0
 8016e78:	20004e54 	.word	0x20004e54
 8016e7c:	2000840c 	.word	0x2000840c
 8016e80:	3a51b717 	.word	0x3a51b717
 8016e84:	20015660 	.word	0x20015660
 8016e88:	20004e58 	.word	0x20004e58
 8016e8c:	08046f40 	.word	0x08046f40
 8016e90:	0802c678 	.word	0x0802c678
 8016e94:	20020e60 	.word	0x20020e60
 8016e98:	0802c920 	.word	0x0802c920
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 576; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8016e9c:	ecb3 7a01 	vldmia	r3!, {s14}
 8016ea0:	edd2 7a00 	vldr	s15, [r2]
 8016ea4:	428b      	cmp	r3, r1
 8016ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016eaa:	ece2 7a01 	vstmia	r2!, {s15}
 8016eae:	d1f5      	bne.n	8016e9c <invoke+0x17cc>
 8016eb0:	f500 6010 	add.w	r0, r0, #2304	; 0x900
for(int hw = 0; hw < 16; hw++){
 8016eb4:	42a8      	cmp	r0, r5
 8016eb6:	d1bf      	bne.n	8016e38 <invoke+0x1768>
}
/* layer 79:SUM */
sum_4D_exclude((float*)&buffer0[34592],1,4,4,576,3,(float*)&buffer0[71456]);
 8016eb8:	2304      	movs	r3, #4
 8016eba:	2203      	movs	r2, #3
 8016ebc:	f44f 7010 	mov.w	r0, #576	; 0x240
 8016ec0:	9502      	str	r5, [sp, #8]
 8016ec2:	9201      	str	r2, [sp, #4]
 8016ec4:	2101      	movs	r1, #1
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	9000      	str	r0, [sp, #0]
 8016eca:	f5a5 4010 	sub.w	r0, r5, #36864	; 0x9000
 8016ece:	f8cb 5000 	str.w	r5, [fp]
 8016ed2:	f00b f95d 	bl	8022190 <sum_4D_exclude>
/* layer 80:BIAS_UPDATE */
const float v14_conv_1_bias_QAS[576] = {654677250.0,56907796.0,28639336.0,35434564.0,41620364.0,670483260.0,99952424.0,46708484.0,65207204.0,77129590.0,86876216.0,26197844.0,51814240.0,37802844.0,56369708.0,80488216.0,496990340.0,103415900.0,52359292.0,117645930.0,36162868.0,66714136.0,41964964.0,70289260.0,141463520.0,35091620.0,292941020.0,319235940.0,149274560.0,31588280.0,58581532.0,30769990.0,94868030.0,1084318700.0,120959870.0,55601030.0,26995596.0,58911108.0,58494684.0,73105710.0,52481680.0,95490550.0,549109250.0,78954710.0,35137028.0,59012830.0,289998900.0,29434386.0,51404452.0,81299550.0,49754300.0,21620110.0,32478784.0,131605530.0,107687110.0,59945176.0,63924004.0,54849904.0,63493092.0,45972916.0,70220950.0,103747230.0,47871584.0,62248656.0,275410370.0,24195816.0,26073014.0,254556940.0,80991980.0,96683720.0,42729896.0,213654620.0,80830030.0,322784220.0,553329100.0,46875692.0,422841380.0,63145850.0,47938756.0,72988320.0,58928640.0,50203988.0,44146424.0,120659020.0,69507544.0,13374964.0,240567940.0,18266646.0,54699344.0,57096424.0,552308540.0,84762350.0,242749870.0,319167500.0,71150340.0,31884426.0,66255364.0,85494536.0,66699116.0,36679252.0,44997460.0,180317470.0,87871224.0,41108684.0,531991520.0,34514850.0,96381270.0,69300616.0,57619676.0,43981004.0,289805760.0,19124140.0,107008740.0,344962750.0,72299440.0,580689100.0,209671490.0,33476972.0,61112460.0,50215950.0,68393176.0,52556184.0,124962520.0,44188224.0,54853452.0,48236770.0,58527270.0,71695250.0,174800380.0,73951940.0,20854050.0,23348352.0,78900630.0,15238067.0,68789464.0,96828620.0,279096060.0,100488270.0,67073372.0,58398588.0,132698136.0,62893096.0,586947800.0,128614300.0,382380770.0,52745670.0,27297846.0,295490000.0,171373980.0,166499040.0,228337550.0,111371580.0,67201010.0,46145636.0,71408990.0,45095148.0,19798874.0,76104970.0,47009500.0,108986410.0,71923400.0,391806720.0,50333988.0,101243990.0,70909430.0,31091898.0,57822284.0,351701800.0,64377884.0,108605920.0,132598290.0,65642250.0,29381194.0,26002788.0,560494500.0,222602530.0,73611160.0,64367284.0,102444700.0,105854720.0,91623460.0,584034200.0,40446036.0,88276990.0,589991400.0,80158650.0,66977012.0,127081304.0,50682140.0,97636456.0,174896960.0,37453344.0,16513916.0,52115344.0,54673972.0,284836600.0,69556504.0,114206056.0,104500710.0,43250244.0,52804620.0,46978070.0,43776224.0,76813900.0,77624424.0,498489570.0,58108268.0,65040160.0,234663680.0,47201516.0,52909956.0,58724840.0,333171140.0,47209908.0,70600750.0,441201400.0,61439932.0,93082650.0,220306510.0,234074530.0,56594264.0,702751700.0,125412504.0,248965900.0,232523090.0,17991080.0,346721060.0,63789436.0,503435740.0,241199520.0,80868664.0,209974930.0,47489420.0,68403180.0,73742520.0,86631710.0,54824900.0,292945340.0,74857430.0,25703130.0,84739330.0,39290590.0,303463550.0,45986228.0,81848770.0,53310760.0,54298540.0,30542152.0,106303380.0,87395580.0,287210020.0,49321840.0,39647710.0,18478792.0,59350676.0,35629800.0,484234340.0,48085950.0,16154992.0,404483400.0,615795100.0,78496264.0,73261360.0,61674108.0,26099064.0,699598200.0,38941500.0,64231510.0,60505180.0,64973576.0,70256390.0,70861230.0,51139610.0,32120648.0,62785516.0,43137724.0,51929396.0,368455740.0,201290560.0,82584390.0,81244980.0,62516724.0,74438950.0,64338556.0,80612080.0,54837100.0,15520916.0,39409464.0,80629010.0,114839130.0,34846412.0,201007310.0,65928788.0,42773108.0,131007010.0,170778990.0,65153372.0,74664136.0,88584860.0,359521200.0,237987870.0,794981400.0,43835344.0,48056710.0,54212630.0,224232620.0,142729860.0,45310160.0,60274170.0,61516890.0,100241690.0,214157500.0,174766220.0,18965498.0,976528500.0,125968050.0,48190196.0,68159544.0,90855440.0,80148870.0,25554136.0,90372420.0,44151196.0,142363860.0,99211896.0,159560720.0,61584640.0,44390890.0,62563260.0,739954200.0,250580800.0,83113890.0,215827520.0,69334890.0,39331624.0,63023030.0,49171260.0,96203420.0,15227498.0,46266300.0,103972744.0,63911150.0,58022224.0,65204764.0,57357650.0,102470850.0,51409000.0,18943040.0,178717700.0,23863238.0,56017300.0,126508060.0,610637200.0,572862700.0,260035950.0,88401090.0,55596428.0,537952800.0,264884660.0,88599830.0,56247860.0,85039380.0,98471000.0,43227290.0,42081484.0,236852130.0,36193100.0,55489476.0,264554350.0,67817690.0,95430696.0,65984290.0,21100126.0,416677280.0,732663800.0,64633684.0,66381230.0,46598948.0,270284860.0,29732766.0,109784184.0,54277784.0,787284800.0,72548990.0,71628000.0,98449980.0,41073880.0,40253188.0,310405020.0,66526836.0,50062824.0,398259680.0,283337060.0,39688530.0,46420836.0,278220450.0,199301380.0,61640308.0,351477630.0,51733724.0,65544252.0,91552850.0,79158580.0,74639830.0,348254750.0,32287442.0,54703772.0,66396820.0,61409970.0,477720900.0,67987610.0,258890910.0,111633100.0,367385900.0,57199184.0,40422564.0,124957060.0,42436824.0,122911460.0,32194310.0,44816732.0,21652908.0,48304724.0,620104300.0,455923460.0,65915470.0,122298800.0,108369930.0,63116344.0,51079930.0,71023740.0,50536428.0,108716120.0,69045450.0,160311230.0,61704950.0,5438406.0,45865820.0,98318760.0,97947630.0,92464410.0,266429890.0,39297060.0,361692480.0,84327330.0,52093148.0,68813580.0,62595140.0,44849070.0,69300080.0,43442304.0,598566460.0,145892500.0,178124620.0,54539664.0,104331250.0,176513900.0,89473016.0,57357950.0,77571130.0,68650960.0,275267700.0,519989540.0,76950050.0,72244020.0,50186412.0,63371010.0,675403300.0,100704300.0,58621812.0,95153496.0,335437300.0,140058380.0,82091176.0,60262028.0,79512620.0,152860740.0,44524184.0,67407224.0,33087474.0,371648420.0,33859164.0,57698550.0,83707120.0,39638400.0,192536240.0,56621800.0,70704990.0,1146847200.0,151390600.0,64262056.0,46334990.0,378402530.0,413929000.0,43777404.0,106047910.0,320401200.0,40397160.0,59336308.0,59474780.0,399783870.0,41248050.0,35563644.0,533717760.0,60820964.0,121610904.0,70730456.0,35886370.0,36166430.0,743826940.0,89319450.0,200731490.0,280399680.0,130070810.0,74413980.0,42912524.0,62994880.0,131365280.0,56617220.0,132340504.0,86821544.0,57484040.0,129530720.0,35509516.0,26503264.0,97707144.0,59481024.0,187618800.0,63759810.0,341817500.0,55760372.0,340905150.0,298305280.0,29314520.0,63348276.0,206844780.0,37981620.0,104377210.0,208315120.0,65593612.0,85215460.0,66000492.0,189495310.0,112676800.0,68011340.0,283621600.0,53067724.0,83703340.0,39738884.0,102314980.0,34048096.0,56217644.0,109366650.0,71244810.0,67235336.0,68341896.0,15974653.0,66683380.0,293023680.0,67268040.0,55150110.0,28825000.0,81498376.0,59237252.0,299566400.0,80850824.0,44838536.0,45711468.0,62308544.0,84774080.0,76161624.0,33728570.0,35460708.0,48520600.0,89148140.0,54691024.0,};
 8016ed6:	f643 70e0 	movw	r0, #16352	; 0x3fe0
 8016eda:	49c9      	ldr	r1, [pc, #804]	; (8017200 <invoke+0x1b30>)
 8016edc:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016ee0:	4468      	add	r0, sp
 8016ee2:	4fc8      	ldr	r7, [pc, #800]	; (8017204 <invoke+0x1b34>)
 8016ee4:	f011 ffef 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[71456];//gradients
for(int i = 0; i < 576; i++) v14_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_1_bias_QAS[i]);
 8016ee8:	4bc7      	ldr	r3, [pc, #796]	; (8017208 <invoke+0x1b38>)
 8016eea:	f643 76e0 	movw	r6, #16352	; 0x3fe0
 8016eee:	46a9      	mov	r9, r5
 8016ef0:	6819      	ldr	r1, [r3, #0]
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	4bc5      	ldr	r3, [pc, #788]	; (801720c <invoke+0x1b3c>)
 8016ef6:	446e      	add	r6, sp
 8016ef8:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8017210 <invoke+0x1b40>
 8016efc:	3904      	subs	r1, #4
 8016efe:	441f      	add	r7, r3
fptr = (float*)&buffer0[71456];//gradients
 8016f00:	f8cb 5000 	str.w	r5, [fp]
for(int i = 0; i < 576; i++) v14_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_1_bias_QAS[i]);
 8016f04:	ecb0 7a01 	vldmia	r0!, {s14}
 8016f08:	ecf6 7a01 	vldmia	r6!, {s15}
 8016f0c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016f10:	42b8      	cmp	r0, r7
 8016f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016f1e:	ee17 3a90 	vmov	r3, s15
 8016f22:	eba2 0303 	sub.w	r3, r2, r3
 8016f26:	600b      	str	r3, [r1, #0]
 8016f28:	d1ec      	bne.n	8016f04 <invoke+0x1834>
/* layer 81:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight((float*)&buffer0[34592],4,4,576,v14_conv_1_weight,NULL,(float*)&buffer0[34592],4,4,576,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 8016f2a:	4bba      	ldr	r3, [pc, #744]	; (8017214 <invoke+0x1b44>)
 8016f2c:	2004      	movs	r0, #4
 8016f2e:	2200      	movs	r2, #0
 8016f30:	2101      	movs	r1, #1
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f44f 7610 	mov.w	r6, #576	; 0x240
 8016f38:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	4633      	mov	r3, r6
 8016f3e:	9208      	str	r2, [sp, #32]
 8016f40:	9201      	str	r2, [sp, #4]
 8016f42:	4602      	mov	r2, r0
 8016f44:	9107      	str	r1, [sp, #28]
 8016f46:	4601      	mov	r1, r0
 8016f48:	9003      	str	r0, [sp, #12]
 8016f4a:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8017218 <invoke+0x1b48>
 8016f4e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 801721c <invoke+0x1b4c>
 8016f52:	9406      	str	r4, [sp, #24]
 8016f54:	9702      	str	r7, [sp, #8]
 8016f56:	e9cd 0604 	strd	r0, r6, [sp, #16]
 8016f5a:	48b1      	ldr	r0, [pc, #708]	; (8017220 <invoke+0x1b50>)
 8016f5c:	f00b fa14 	bl	8022388 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>
/* layer 82:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[32288],9216,(float*)&buffer0[34592]);
 8016f60:	4aaf      	ldr	r2, [pc, #700]	; (8017220 <invoke+0x1b50>)
 8016f62:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8016f66:	f5a2 6010 	sub.w	r0, r2, #2304	; 0x900
 8016f6a:	f00c fbe3 	bl	8023734 <where_zeros_inplace_bit>
/* layer 83:MUL */
fptr = &buffer0[34592];
fptr2 = scales39;
 8016f6e:	4aad      	ldr	r2, [pc, #692]	; (8017224 <invoke+0x1b54>)
 8016f70:	4bad      	ldr	r3, [pc, #692]	; (8017228 <invoke+0x1b58>)
 8016f72:	48ab      	ldr	r0, [pc, #684]	; (8017220 <invoke+0x1b50>)
 8016f74:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8016f78:	601a      	str	r2, [r3, #0]
 8016f7a:	4602      	mov	r2, r0
 8016f7c:	4ba9      	ldr	r3, [pc, #676]	; (8017224 <invoke+0x1b54>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 576; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8016f7e:	ecb3 7a01 	vldmia	r3!, {s14}
 8016f82:	edd2 7a00 	vldr	s15, [r2]
 8016f86:	4299      	cmp	r1, r3
 8016f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f8c:	ece2 7a01 	vstmia	r2!, {s15}
 8016f90:	d1f5      	bne.n	8016f7e <invoke+0x18ae>
 8016f92:	f500 6010 	add.w	r0, r0, #2304	; 0x900
for(int hw = 0; hw < 16; hw++){
 8016f96:	42a8      	cmp	r0, r5
 8016f98:	d1ef      	bne.n	8016f7a <invoke+0x18aa>
}
/* layer 84:SUM */
sum_4D_exclude((float*)&buffer0[34592],1,4,4,576,3,(float*)&buffer0[32288]);
 8016f9a:	2304      	movs	r3, #4
 8016f9c:	2203      	movs	r2, #3
 8016f9e:	f44f 7010 	mov.w	r0, #576	; 0x240
 8016fa2:	49a2      	ldr	r1, [pc, #648]	; (801722c <invoke+0x1b5c>)
 8016fa4:	9201      	str	r2, [sp, #4]
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	9102      	str	r1, [sp, #8]
 8016faa:	2101      	movs	r1, #1
 8016fac:	9000      	str	r0, [sp, #0]
 8016fae:	f644 06e0 	movw	r6, #18656	; 0x48e0
 8016fb2:	489b      	ldr	r0, [pc, #620]	; (8017220 <invoke+0x1b50>)
 8016fb4:	f8cb 5000 	str.w	r5, [fp]
 8016fb8:	446e      	add	r6, sp
 8016fba:	f00b f8e9 	bl	8022190 <sum_4D_exclude>
/* layer 85:BIAS_UPDATE */
const float v14_conv_0_bias_QAS[576] = {709765500.0,1095124000.0,1133707000.0,815438500.0,511527780.0,1367263900.0,935322600.0,844678340.0,990682000.0,1381466900.0,1661784400.0,1016122940.0,1224061200.0,1013002750.0,428049950.0,670605060.0,589710600.0,650380160.0,557326300.0,1432191400.0,831155840.0,917173400.0,1181492500.0,880701950.0,498734750.0,560498400.0,851469200.0,2326794200.0,860911600.0,899014600.0,1542670500.0,1193208800.0,1208935700.0,1334557300.0,1723967400.0,1017743300.0,1047666560.0,803147300.0,991691650.0,1285904900.0,943131500.0,2076445000.0,568394750.0,766322900.0,1009402400.0,1752257800.0,901930900.0,1196144100.0,877986370.0,1504507600.0,1440736100.0,1676165000.0,1356689400.0,1116655700.0,796375200.0,975324400.0,900250560.0,1693932000.0,1119845900.0,1277458300.0,1268598400.0,940435260.0,1058945800.0,1202319900.0,803017150.0,1553228700.0,1649039600.0,592482560.0,1543578800.0,2043024000.0,590441800.0,583050940.0,981700800.0,1877846700.0,862232060.0,1199681000.0,587289500.0,910118660.0,1029848770.0,582502100.0,1141456000.0,830896300.0,966474200.0,1600403100.0,1206793700.0,1261174000.0,645275650.0,627599940.0,828432260.0,705586100.0,997754900.0,1288693800.0,1377384700.0,954810940.0,802859500.0,786782100.0,1292652800.0,888381100.0,791653700.0,966741100.0,1359114100.0,1421973500.0,1713822800.0,1807880400.0,755974500.0,921512960.0,1034368400.0,909598600.0,1138169200.0,875483500.0,744147100.0,547103700.0,1126018000.0,751019200.0,2665237200.0,402269400.0,1124923800.0,1253719600.0,795353200.0,800949570.0,707095200.0,1632616800.0,880725500.0,1502117000.0,1478159600.0,1059249300.0,618686000.0,1267334700.0,1343037000.0,998627700.0,1103230500.0,606646800.0,1502279000.0,1081737100.0,1499061500.0,793925950.0,1354904600.0,1395839200.0,704076700.0,778446140.0,996775040.0,842334500.0,677417000.0,1322773200.0,764164700.0,717671040.0,983127550.0,1306062000.0,1398581400.0,2267852300.0,913928640.0,765004600.0,1039427460.0,895914430.0,1201822600.0,793640200.0,485753660.0,1458245500.0,1148978400.0,1249098500.0,1240560500.0,529751800.0,810625860.0,729382600.0,1876112100.0,2655239700.0,1317100200.0,755093800.0,1626249900.0,1355298300.0,464236320.0,1248849700.0,658562750.0,988066940.0,1037217540.0,1402158800.0,891950200.0,1141235700.0,768246660.0,1105301000.0,544895100.0,1038515900.0,1569874700.0,1374045300.0,1365792100.0,707770240.0,857808960.0,1733172200.0,1274738000.0,791595900.0,1094738600.0,969909570.0,1335364000.0,889775400.0,1279947900.0,904945860.0,1355467600.0,1272010000.0,395509000.0,1186386000.0,1511950000.0,1125813000.0,1361319700.0,1315675600.0,667403800.0,1006691100.0,950591700.0,1222079100.0,882939900.0,998370300.0,879234940.0,1526667600.0,1133747100.0,1795115800.0,618088060.0,430757400.0,1056906100.0,742673700.0,820676900.0,829036160.0,1062813800.0,801857300.0,1524490900.0,1130863500.0,1553224600.0,1208842600.0,784218900.0,1458397600.0,1026584770.0,1671973600.0,1103741700.0,1380621700.0,1504777500.0,817890500.0,790377400.0,1468335600.0,1475093200.0,1956903600.0,1723930900.0,1065083900.0,577031500.0,624219200.0,691416260.0,1004647300.0,1522902800.0,697993150.0,1398376100.0,1668307600.0,1218290300.0,675446700.0,473089950.0,1260903400.0,1296227600.0,1017332350.0,1079602200.0,1728847600.0,761102600.0,904108600.0,960484350.0,1028917000.0,1110003300.0,917011600.0,946854460.0,932012200.0,781880200.0,741687500.0,1114406500.0,1167860900.0,1219633900.0,1201702300.0,671067500.0,1208231000.0,568765500.0,859809900.0,1056809400.0,1332625300.0,554227700.0,1579453000.0,720678100.0,1096826900.0,989365570.0,1522905700.0,1355347100.0,647235800.0,919510300.0,756880300.0,527748350.0,1170371300.0,891398000.0,1319128000.0,806378000.0,1085371100.0,1114828700.0,1147039900.0,1255932800.0,805798140.0,1260319900.0,2730469600.0,1523122200.0,456933700.0,1664981600.0,329745120.0,768808800.0,1698862800.0,1368207100.0,1259227900.0,1135502700.0,533421220.0,875108740.0,1315042000.0,1610768400.0,552992100.0,2074859600.0,728770100.0,704792770.0,1323453200.0,2092041300.0,478484740.0,1627354200.0,856432260.0,800860540.0,1426148700.0,936139900.0,866274940.0,836225900.0,1476864400.0,909409200.0,1340054300.0,659692300.0,497744450.0,1056237250.0,1164675500.0,1281789600.0,850571260.0,1570496100.0,770182600.0,826975700.0,771177000.0,1582711000.0,727766400.0,1845083400.0,2280922000.0,694984450.0,614463200.0,938864700.0,1484511500.0,1076206100.0,974194750.0,1146216300.0,977081800.0,1988339000.0,1142222100.0,514207940.0,1580486700.0,1007209340.0,848592900.0,908745800.0,505462500.0,1365757600.0,1429319000.0,1159292800.0,841443100.0,1222609900.0,583328000.0,1434691500.0,1124150800.0,1118268800.0,1495555500.0,496960060.0,1468733400.0,511777800.0,1266581400.0,924647400.0,848324200.0,1468851600.0,1693428200.0,302855500.0,1029968100.0,1182835000.0,1188315300.0,859590700.0,1038217000.0,460949820.0,931617600.0,1218704900.0,1332053200.0,968419650.0,961760450.0,974512450.0,956192450.0,1257385000.0,591231740.0,662804740.0,1519281400.0,802349060.0,655362240.0,770534000.0,838000450.0,785072200.0,936890000.0,1308171600.0,1099153900.0,1704177200.0,1115482200.0,866558700.0,1682019800.0,1578424300.0,2326447600.0,870230600.0,1198532700.0,973222660.0,832662340.0,345076380.0,1247841200.0,841159100.0,1356277100.0,1057226200.0,980127800.0,1835405400.0,903260200.0,1724645600.0,1053157900.0,1269480600.0,995525760.0,968609150.0,1345127200.0,922574400.0,1351952100.0,1592046100.0,1140705300.0,902511000.0,706637100.0,670551230.0,977607600.0,753510800.0,1286277600.0,1372853100.0,560120770.0,1319472400.0,372056640.0,1182992600.0,671349950.0,600612900.0,1720631800.0,1004348160.0,1812159500.0,1290155900.0,765228300.0,1290548100.0,1053504000.0,2210465800.0,571374850.0,1130181000.0,1189527800.0,2101162000.0,1014256400.0,959216500.0,672499260.0,938408960.0,1661429600.0,954882560.0,708066940.0,1170326500.0,686253060.0,1436656300.0,2456641500.0,653572540.0,902271740.0,1455706800.0,1438566700.0,1223845800.0,639383200.0,1000602100.0,968534800.0,916141300.0,720094850.0,1080491900.0,802088450.0,660013950.0,1354206000.0,1555291400.0,680623170.0,893461950.0,2420506400.0,2187462700.0,2141534300.0,1374263000.0,791174900.0,468521060.0,1192926600.0,1607688700.0,891179500.0,832951360.0,1184124500.0,1435509000.0,1180843000.0,1220177400.0,768656100.0,1036418370.0,1392252000.0,682545500.0,788558900.0,803753400.0,1047760060.0,1255842000.0,1787099300.0,1008697100.0,1280515300.0,773963260.0,1449254000.0,1279767400.0,1202323600.0,641619000.0,1070403260.0,870887500.0,1194177000.0,782379140.0,927551170.0,902481400.0,2463644200.0,1756292200.0,633898560.0,1542372500.0,1121136800.0,1055708600.0,795748900.0,1110882000.0,1305546900.0,837518500.0,725063360.0,888921860.0,1204967200.0,1227687200.0,1083948500.0,743211970.0,786811500.0,679662800.0,1071571400.0,1100937000.0,1137544700.0,1230878700.0,652873100.0,503117630.0,1067040900.0,1052204540.0,556872400.0,984733600.0,755281150.0,1200749400.0,1399731300.0,804894700.0,1933307500.0,948895400.0,692623740.0,612503300.0,709957060.0,1121045600.0,2337875500.0,627245000.0,526102820.0,850095170.0,1337719700.0,1122795000.0,613296400.0,310497730.0,1546923300.0,1554380000.0,1416566100.0,1378671700.0,1216238000.0,1961352200.0,624456700.0,639845760.0,847553000.0,670097000.0,1434944900.0,};
 8016fbe:	f644 00e0 	movw	r0, #18656	; 0x48e0
 8016fc2:	499b      	ldr	r1, [pc, #620]	; (8017230 <invoke+0x1b60>)
 8016fc4:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016fc8:	4468      	add	r0, sp
 8016fca:	f011 ff7c 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[32288];//gradients
for(int i = 0; i < 576; i++) v14_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_0_bias_QAS[i]);
 8016fce:	4b99      	ldr	r3, [pc, #612]	; (8017234 <invoke+0x1b64>)
 8016fd0:	4896      	ldr	r0, [pc, #600]	; (801722c <invoke+0x1b5c>)
 8016fd2:	6819      	ldr	r1, [r3, #0]
 8016fd4:	f500 6710 	add.w	r7, r0, #2304	; 0x900
 8016fd8:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8017210 <invoke+0x1b40>
 8016fdc:	3904      	subs	r1, #4
fptr = (float*)&buffer0[32288];//gradients
 8016fde:	f8cb 0000 	str.w	r0, [fp]
for(int i = 0; i < 576; i++) v14_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v14_conv_0_bias_QAS[i]);
 8016fe2:	ecb0 7a01 	vldmia	r0!, {s14}
 8016fe6:	ecf6 7a01 	vldmia	r6!, {s15}
 8016fea:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016fee:	42b8      	cmp	r0, r7
 8016ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ff4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ffc:	ee17 3a90 	vmov	r3, s15
 8017000:	eba2 0303 	sub.w	r3, r2, r3
 8017004:	600b      	str	r3, [r1, #0]
 8017006:	d1ec      	bne.n	8016fe2 <invoke+0x1912>
/* layer 86:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[34592],4,4,576,(q7_t*)v14_conv_0_weight,NULL,(float*)&buffer0[71456],4,4,96,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017008:	2004      	movs	r0, #4
 801700a:	2660      	movs	r6, #96	; 0x60
 801700c:	4b8a      	ldr	r3, [pc, #552]	; (8017238 <invoke+0x1b68>)
 801700e:	f04f 0c00 	mov.w	ip, #0
 8017012:	4602      	mov	r2, r0
 8017014:	4601      	mov	r1, r0
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	2701      	movs	r7, #1
 801701a:	9003      	str	r0, [sp, #12]
 801701c:	9502      	str	r5, [sp, #8]
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	f44f 7310 	mov.w	r3, #576	; 0x240
 8017024:	9707      	str	r7, [sp, #28]
 8017026:	f8cd c004 	str.w	ip, [sp, #4]
 801702a:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017218 <invoke+0x1b48>
 801702e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 801721c <invoke+0x1b4c>
 8017032:	9406      	str	r4, [sp, #24]
 8017034:	e9cd 0604 	strd	r0, r6, [sp, #16]
 8017038:	4879      	ldr	r0, [pc, #484]	; (8017220 <invoke+0x1b50>)
 801703a:	f5a0 6870 	sub.w	r8, r0, #3840	; 0xf00
 801703e:	f007 ffbf 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 87:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[30752],1536,(float*)&buffer0[71456]);
 8017042:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8017046:	f508 421f 	add.w	r2, r8, #40704	; 0x9f00
 801704a:	f508 5ac0 	add.w	sl, r8, #6144	; 0x1800
 801704e:	4645      	mov	r5, r8
 8017050:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8017054:	f5a2 401f 	sub.w	r0, r2, #40704	; 0x9f00
 8017058:	f00c fb6c 	bl	8023734 <where_zeros_inplace_bit>
/* layer 88:DIV */
fptr3 = (float*)&buffer0[30752]; fptr2 = (float*)&buffer0[71456];
for(int i = 0; i < 1536; i++) *fptr3++ = *fptr2++ / 0.044030919671058655;
 801705c:	a766      	add	r7, pc, #408	; (adr r7, 80171f8 <invoke+0x1b28>)
 801705e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017062:	f859 0b04 	ldr.w	r0, [r9], #4
 8017066:	f7f0 f809 	bl	800707c <__aeabi_f2d>
 801706a:	4632      	mov	r2, r6
 801706c:	463b      	mov	r3, r7
 801706e:	f7f0 f85d 	bl	800712c <__aeabi_dmul>
 8017072:	f7f0 fb33 	bl	80076dc <__aeabi_d2f>
 8017076:	f845 0b04 	str.w	r0, [r5], #4
 801707a:	45aa      	cmp	sl, r5
 801707c:	d1f1      	bne.n	8017062 <invoke+0x1992>
/* layer 89:MUL */
fptr = (float*)&buffer0[30752];fptr3 = (float*)&buffer0[55136];for(int i = 0; i < 1536; i++) fptr3[i] = 0.032814495265483856 * fptr[i];
 801707e:	4a6f      	ldr	r2, [pc, #444]	; (801723c <invoke+0x1b6c>)
 8017080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017082:	486f      	ldr	r0, [pc, #444]	; (8017240 <invoke+0x1b70>)
 8017084:	4692      	mov	sl, r2
 8017086:	496f      	ldr	r1, [pc, #444]	; (8017244 <invoke+0x1b74>)
 8017088:	4616      	mov	r6, r2
 801708a:	f8cb 3000 	str.w	r3, [fp]
 801708e:	4613      	mov	r3, r2
 8017090:	6002      	str	r2, [r0, #0]
 8017092:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8017248 <invoke+0x1b78>
 8017096:	4a64      	ldr	r2, [pc, #400]	; (8017228 <invoke+0x1b58>)
 8017098:	6011      	str	r1, [r2, #0]
 801709a:	ecf8 7a01 	vldmia	r8!, {s15}
 801709e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80170a2:	45a8      	cmp	r8, r5
 80170a4:	ece3 7a01 	vstmia	r3!, {s15}
 80170a8:	d1f7      	bne.n	801709a <invoke+0x19ca>
/* layer 90:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[30560],1536,(float*)&buffer0[55136]);
 80170aa:	4a64      	ldr	r2, [pc, #400]	; (801723c <invoke+0x1b6c>)
 80170ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80170b0:	f5a2 40c0 	sub.w	r0, r2, #24576	; 0x6000
 80170b4:	f00c fb3e 	bl	8023734 <where_zeros_inplace_bit>
/* layer 91:MUL */
fptr = &buffer0[55136];
fptr2 = scales38;
 80170b8:	4a64      	ldr	r2, [pc, #400]	; (801724c <invoke+0x1b7c>)
 80170ba:	4b5b      	ldr	r3, [pc, #364]	; (8017228 <invoke+0x1b58>)
 80170bc:	485f      	ldr	r0, [pc, #380]	; (801723c <invoke+0x1b6c>)
 80170be:	f502 71c0 	add.w	r1, r2, #384	; 0x180
 80170c2:	601a      	str	r2, [r3, #0]
 80170c4:	4602      	mov	r2, r0
 80170c6:	4b61      	ldr	r3, [pc, #388]	; (801724c <invoke+0x1b7c>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80170c8:	ecb3 7a01 	vldmia	r3!, {s14}
 80170cc:	edd2 7a00 	vldr	s15, [r2]
 80170d0:	4299      	cmp	r1, r3
 80170d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80170d6:	ece2 7a01 	vstmia	r2!, {s15}
 80170da:	d1f5      	bne.n	80170c8 <invoke+0x19f8>
 80170dc:	f500 70c0 	add.w	r0, r0, #384	; 0x180
for(int hw = 0; hw < 16; hw++){
 80170e0:	4b5b      	ldr	r3, [pc, #364]	; (8017250 <invoke+0x1b80>)
 80170e2:	4298      	cmp	r0, r3
 80170e4:	d1ee      	bne.n	80170c4 <invoke+0x19f4>
}
/* layer 92:SUM */
sum_4D_exclude((float*)&buffer0[55136],1,4,4,96,3,(float*)&buffer0[30560]);
 80170e6:	2060      	movs	r0, #96	; 0x60
 80170e8:	2304      	movs	r3, #4
 80170ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80170ec:	2203      	movs	r2, #3
 80170ee:	9000      	str	r0, [sp, #0]
 80170f0:	4852      	ldr	r0, [pc, #328]	; (801723c <invoke+0x1b6c>)
 80170f2:	9102      	str	r1, [sp, #8]
 80170f4:	2101      	movs	r1, #1
 80170f6:	f500 55c0 	add.w	r5, r0, #6144	; 0x1800
 80170fa:	9201      	str	r2, [sp, #4]
 80170fc:	461a      	mov	r2, r3
 80170fe:	f8cb 5000 	str.w	r5, [fp]
 8017102:	f00b f845 	bl	8022190 <sum_4D_exclude>
/* layer 93:BIAS_UPDATE */
const float v13_conv_2_bias_QAS[96] = {355876930.0,558494000.0,171505010.0,219625920.0,252224220.0,303974660.0,250815900.0,445427970.0,339608640.0,302080860.0,380221800.0,512144100.0,215463940.0,219955250.0,378082370.0,229628900.0,114224056.0,536883650.0,218712540.0,180932660.0,295388800.0,343863170.0,320962270.0,212863230.0,378079970.0,294832800.0,291525060.0,195432300.0,367240320.0,309562050.0,88026150.0,251921040.0,315553280.0,493595100.0,414583550.0,257529400.0,299791600.0,319802300.0,207819330.0,318879900.0,288209820.0,346871230.0,167362420.0,140486420.0,186923460.0,163456770.0,249238110.0,318699300.0,325383230.0,52047384.0,95620120.0,202914190.0,310612670.0,289033300.0,233746460.0,566257000.0,309147260.0,211750430.0,197801090.0,93774480.0,54541588.0,209369070.0,261716340.0,584899100.0,219669650.0,316235360.0,428031520.0,209397600.0,307910600.0,281835000.0,357124060.0,180688110.0,239177200.0,124883480.0,275977470.0,442674700.0,269128260.0,153219920.0,597601900.0,359578720.0,300028000.0,106665224.0,100305060.0,204829940.0,341734340.0,196705010.0,193376800.0,216446640.0,332725200.0,569350900.0,153075920.0,308560060.0,208734180.0,123613210.0,229790660.0,232261920.0,};
 8017106:	4953      	ldr	r1, [pc, #332]	; (8017254 <invoke+0x1b84>)
 8017108:	a8d8      	add	r0, sp, #864	; 0x360
 801710a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801710e:	f011 feda 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[30560];//gradients
for(int i = 0; i < 96; i++) v13_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_2_bias_QAS[i]);
 8017112:	4b51      	ldr	r3, [pc, #324]	; (8017258 <invoke+0x1b88>)
 8017114:	f5a5 40f0 	sub.w	r0, r5, #30720	; 0x7800
 8017118:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8017210 <invoke+0x1b40>
 801711c:	6819      	ldr	r1, [r3, #0]
 801711e:	add8      	add	r5, sp, #864	; 0x360
fptr = (float*)&buffer0[30560];//gradients
 8017120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017122:	f500 77c0 	add.w	r7, r0, #384	; 0x180
 8017126:	3904      	subs	r1, #4
 8017128:	f8cb 3000 	str.w	r3, [fp]
for(int i = 0; i < 96; i++) v13_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_2_bias_QAS[i]);
 801712c:	ecb0 7a01 	vldmia	r0!, {s14}
 8017130:	ecf5 7a01 	vldmia	r5!, {s15}
 8017134:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017138:	4287      	cmp	r7, r0
 801713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801713e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017146:	ee17 3a90 	vmov	r3, s15
 801714a:	eba2 0303 	sub.w	r3, r2, r3
 801714e:	600b      	str	r3, [r1, #0]
 8017150:	d1ec      	bne.n	801712c <invoke+0x1a5c>
/* layer 94:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[55136],4,4,96,(q7_t*)v13_conv_2_weight,NULL,(float*)&buffer0[30560],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017152:	4a42      	ldr	r2, [pc, #264]	; (801725c <invoke+0x1b8c>)
 8017154:	2004      	movs	r0, #4
 8017156:	2101      	movs	r1, #1
 8017158:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801715c:	6812      	ldr	r2, [r2, #0]
 801715e:	2500      	movs	r5, #0
 8017160:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017162:	9200      	str	r2, [sp, #0]
 8017164:	4602      	mov	r2, r0
 8017166:	9107      	str	r1, [sp, #28]
 8017168:	4601      	mov	r1, r0
 801716a:	9305      	str	r3, [sp, #20]
 801716c:	2360      	movs	r3, #96	; 0x60
 801716e:	9501      	str	r5, [sp, #4]
 8017170:	eddf 0a29 	vldr	s1, [pc, #164]	; 8017218 <invoke+0x1b48>
 8017174:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801721c <invoke+0x1b4c>
 8017178:	9406      	str	r4, [sp, #24]
 801717a:	9702      	str	r7, [sp, #8]
 801717c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8017180:	482e      	ldr	r0, [pc, #184]	; (801723c <invoke+0x1b6c>)
 8017182:	f007 ff1d 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 95:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[29792],6144,(float*)&buffer0[30560]);
 8017186:	4a36      	ldr	r2, [pc, #216]	; (8017260 <invoke+0x1b90>)
 8017188:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801718c:	f5a2 7040 	sub.w	r0, r2, #768	; 0x300
/* layer 96:MUL */
fptr = &buffer0[30560];
fptr2 = scales37;
 8017190:	4615      	mov	r5, r2
 8017192:	9212      	str	r2, [sp, #72]	; 0x48
where_zeros_inplace_bit((bool*)&buffer0[29792],6144,(float*)&buffer0[30560]);
 8017194:	f00c face 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales37;
 8017198:	4a32      	ldr	r2, [pc, #200]	; (8017264 <invoke+0x1b94>)
 801719a:	4628      	mov	r0, r5
 801719c:	4b22      	ldr	r3, [pc, #136]	; (8017228 <invoke+0x1b58>)
 801719e:	f502 61c0 	add.w	r1, r2, #1536	; 0x600
 80171a2:	601a      	str	r2, [r3, #0]
 80171a4:	4602      	mov	r2, r0
 80171a6:	4b2f      	ldr	r3, [pc, #188]	; (8017264 <invoke+0x1b94>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 80171a8:	ecb3 7a01 	vldmia	r3!, {s14}
 80171ac:	edd2 7a00 	vldr	s15, [r2]
 80171b0:	4299      	cmp	r1, r3
 80171b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80171b6:	ece2 7a01 	vstmia	r2!, {s15}
 80171ba:	d1f5      	bne.n	80171a8 <invoke+0x1ad8>
 80171bc:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
for(int hw = 0; hw < 16; hw++){
 80171c0:	42b0      	cmp	r0, r6
 80171c2:	d1ef      	bne.n	80171a4 <invoke+0x1ad4>
}
/* layer 97:SUM */
sum_4D_exclude((float*)&buffer0[30560],1,4,4,384,3,(float*)&buffer0[55136]);
 80171c4:	2304      	movs	r3, #4
 80171c6:	2203      	movs	r2, #3
 80171c8:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80171cc:	9602      	str	r6, [sp, #8]
 80171ce:	9201      	str	r2, [sp, #4]
 80171d0:	2101      	movs	r1, #1
 80171d2:	461a      	mov	r2, r3
 80171d4:	9000      	str	r0, [sp, #0]
 80171d6:	4822      	ldr	r0, [pc, #136]	; (8017260 <invoke+0x1b90>)
 80171d8:	f242 75e0 	movw	r5, #10208	; 0x27e0
 80171dc:	f8cb 6000 	str.w	r6, [fp]
 80171e0:	f00a ffd6 	bl	8022190 <sum_4D_exclude>
/* layer 98:BIAS_UPDATE */
const float v13_conv_1_bias_QAS[384] = {29903106.0,218695170.0,30306388.0,21724138.0,535217340.0,16003526.0,32152158.0,187248000.0,11008200.0,10799484.0,33226112.0,25116114.0,13621018.0,88510960.0,216415630.0,36400264.0,20554932.0,85092610.0,13933570.0,40355590.0,19902466.0,162674620.0,8.514448e+20,34753044.0,36432384.0,106568250.0,21425456.0,62075030.0,56788890.0,218641630.0,62288770.0,78014410.0,38646750.0,21849236.0,10505907.0,84220616.0,165009550.0,27466204.0,27632670.0,24674206.0,243689440.0,136897330.0,64120964.0,192845090.0,33581936.0,294545250.0,19203338.0,8347400.5,44178140.0,98293650.0,46789390.0,85510260.0,115284230.0,406463070.0,47568624.0,39491936.0,1425052300.0,110039064.0,84780000.0,98775730.0,5429590.5,54328024.0,40784012.0,14251685.0,19731754.0,49599268.0,143573600.0,52199044.0,64020470.0,8.514448e+20,63777044.0,1240437900.0,23135490.0,104101800.0,37786950.0,59503050.0,32931996.0,8.514448e+20,23411048.0,28174422.0,41912440.0,1129791900.0,45772176.0,576092160.0,43555050.0,59650776.0,58871796.0,52104410.0,180291150.0,45319780.0,630081300.0,33330492.0,25461428.0,60240560.0,21556068.0,16496781.0,220467540.0,25849228.0,68962510.0,60926360.0,23426336.0,8.514448e+20,70230640.0,64390164.0,48119532.0,681097900.0,149453680.0,20411554.0,2068529.8,101910424.0,32540704.0,116077410.0,101141944.0,28197638.0,288374460.0,97656350.0,125656240.0,697916000.0,94551580.0,7238937.0,30893486.0,31146326.0,47771092.0,22109046.0,181613490.0,156987170.0,10137324.0,14380247.0,23749974.0,34948384.0,28464574.0,35196444.0,184802720.0,18045186.0,8.514448e+20,972604200.0,176434930.0,35577184.0,350785000.0,45171788.0,20368120.0,100501416.0,689966660.0,66735710.0,91060700.0,150600080.0,55002780.0,61597720.0,21528004.0,51178550.0,58461624.0,23989124.0,23032286.0,51682744.0,142413460.0,105533640.0,19441712.0,34129590.0,27312670.0,86819570.0,26903978.0,75896120.0,16438411.0,15282757.0,18410920.0,31545624.0,29712804.0,20630142.0,212912900.0,208794450.0,22804224.0,8.514448e+20,57922828.0,72065770.0,54211576.0,478728800.0,40695136.0,56643690.0,22905564.0,73612504.0,138857460.0,1020830100.0,11712604.0,29323960.0,32946764.0,32294184.0,33965812.0,44834436.0,96104920.0,44905708.0,106658530.0,52512044.0,88080680.0,100838840.0,52295196.0,84067410.0,51566480.0,22363844.0,42417760.0,19235632.0,41795750.0,2364194600.0,176797940.0,22229236.0,65894810.0,14518711.0,37160068.0,60382000.0,29139062.0,52835044.0,49179852.0,25524106.0,33450300.0,71744744.0,139331860.0,105134560.0,1343524200.0,121738936.0,66152212.0,234290320.0,91344690.0,62273204.0,28954232.0,9760435.0,117927130.0,23199580.0,34121540.0,1007458900.0,19002262.0,23868702.0,18456332.0,24511972.0,23436084.0,33889172.0,37044356.0,45994308.0,78664400.0,19103196.0,20565574.0,25134748.0,41795270.0,78745440.0,25432282.0,36809604.0,22888154.0,40720704.0,98644840.0,30299742.0,36693624.0,16980772.0,19945392.0,216585360.0,113229760.0,8.514448e+20,23825210.0,79609320.0,14199620.0,868785800.0,63508516.0,28225906.0,43626556.0,26480122.0,304683600.0,30790816.0,32378780.0,59837400.0,115109340.0,177095550.0,35438440.0,78271360.0,13395547.0,245560660.0,355709800.0,110673030.0,833379900.0,21303774.0,12327210.0,28411482.0,37121492.0,93276590.0,2403352.0,14007026.0,60998384.0,82678340.0,25447940.0,21988886.0,77557730.0,78396560.0,381440060.0,163138900.0,535285020.0,27119984.0,8.514448e+20,22378012.0,265606290.0,166443070.0,55623184.0,29839490.0,24620542.0,30222376.0,31380324.0,31162294.0,62026920.0,22052116.0,36080496.0,47588308.0,19013760.0,110051660.0,84972930.0,73442910.0,36334824.0,11475609.0,312681630.0,68187690.0,30441394.0,36119148.0,112473000.0,280030850.0,30804322.0,29880286.0,35358196.0,8.514448e+20,84218910.0,36732496.0,1307728100.0,23856358.0,165226740.0,51993308.0,8.514448e+20,31531298.0,249580770.0,39758644.0,31771484.0,34759572.0,102811704.0,23604470.0,31572148.0,47229416.0,8.514448e+20,27637554.0,57290044.0,138265900.0,42498036.0,22459320.0,24007922.0,108555000.0,39797216.0,51128264.0,17208626.0,8.514448e+20,46867080.0,66854470.0,28288860.0,16591960.0,172624800.0,43966544.0,23823556.0,8489910.0,28979696.0,107371800.0,27236328.0,31858474.0,75676580.0,31478474.0,7945755.0,36691710.0,20057414.0,50837704.0,42353784.0,8.514448e+20,145009040.0,697708700.0,45465740.0,521025920.0,37596176.0,21722252.0,60942212.0,25127978.0,710074900.0,1101367600.0,90038510.0,74934250.0,8.514448e+20,64313932.0,};
 80171e4:	f242 70e0 	movw	r0, #10208	; 0x27e0
 80171e8:	491f      	ldr	r1, [pc, #124]	; (8017268 <invoke+0x1b98>)
 80171ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80171ee:	4468      	add	r0, sp
 80171f0:	e03c      	b.n	801726c <invoke+0x1b9c>
 80171f2:	bf00      	nop
 80171f4:	f3af 8000 	nop.w
 80171f8:	9c7b628f 	.word	0x9c7b628f
 80171fc:	4036b618 	.word	0x4036b618
 8017200:	0802c948 	.word	0x0802c948
 8017204:	00012020 	.word	0x00012020
 8017208:	20004e4c 	.word	0x20004e4c
 801720c:	2000cf40 	.word	0x2000cf40
 8017210:	39d1b717 	.word	0x39d1b717
 8017214:	20004e50 	.word	0x20004e50
 8017218:	7f7fffff 	.word	0x7f7fffff
 801721c:	ff7fffff 	.word	0xff7fffff
 8017220:	20015660 	.word	0x20015660
 8017224:	080465c0 	.word	0x080465c0
 8017228:	2003cfcc 	.word	0x2003cfcc
 801722c:	20014d60 	.word	0x20014d60
 8017230:	0802d248 	.word	0x0802d248
 8017234:	20004e44 	.word	0x20004e44
 8017238:	20004e48 	.word	0x20004e48
 801723c:	2001a6a0 	.word	0x2001a6a0
 8017240:	2003cfd8 	.word	0x2003cfd8
 8017244:	2001fe60 	.word	0x2001fe60
 8017248:	3d06687e 	.word	0x3d06687e
 801724c:	08046440 	.word	0x08046440
 8017250:	2001bea0 	.word	0x2001bea0
 8017254:	0802db48 	.word	0x0802db48
 8017258:	20004e3c 	.word	0x20004e3c
 801725c:	20004e40 	.word	0x20004e40
 8017260:	200146a0 	.word	0x200146a0
 8017264:	08045e40 	.word	0x08045e40
 8017268:	0802dcc8 	.word	0x0802dcc8
 801726c:	4fca      	ldr	r7, [pc, #808]	; (8017598 <invoke+0x1ec8>)
 801726e:	f011 fe2a 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[55136];//gradients
for(int i = 0; i < 384; i++) v13_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_1_bias_QAS[i]);
 8017272:	4bca      	ldr	r3, [pc, #808]	; (801759c <invoke+0x1ecc>)
 8017274:	446d      	add	r5, sp
 8017276:	f5a7 60c0 	sub.w	r0, r7, #1536	; 0x600
 801727a:	6819      	ldr	r1, [r3, #0]
 801727c:	eddf 6ac8 	vldr	s13, [pc, #800]	; 80175a0 <invoke+0x1ed0>
 8017280:	3904      	subs	r1, #4
fptr = (float*)&buffer0[55136];//gradients
 8017282:	f8cb 6000 	str.w	r6, [fp]
for(int i = 0; i < 384; i++) v13_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_1_bias_QAS[i]);
 8017286:	ecb0 7a01 	vldmia	r0!, {s14}
 801728a:	ecf5 7a01 	vldmia	r5!, {s15}
 801728e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017292:	4287      	cmp	r7, r0
 8017294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801729c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172a0:	ee17 3a90 	vmov	r3, s15
 80172a4:	eba2 0303 	sub.w	r3, r2, r3
 80172a8:	600b      	str	r3, [r1, #0]
 80172aa:	d1ec      	bne.n	8017286 <invoke+0x1bb6>
/* layer 99:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight((float*)&buffer0[30560],4,4,384,v13_conv_1_weight,NULL,(float*)&buffer0[30560],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 80172ac:	4bbd      	ldr	r3, [pc, #756]	; (80175a4 <invoke+0x1ed4>)
 80172ae:	2004      	movs	r0, #4
 80172b0:	2200      	movs	r2, #0
 80172b2:	2101      	movs	r1, #1
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f44f 75c0 	mov.w	r5, #384	; 0x180
 80172ba:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80172bc:	9300      	str	r3, [sp, #0]
 80172be:	462b      	mov	r3, r5
 80172c0:	9208      	str	r2, [sp, #32]
 80172c2:	9201      	str	r2, [sp, #4]
 80172c4:	4602      	mov	r2, r0
 80172c6:	9107      	str	r1, [sp, #28]
 80172c8:	4601      	mov	r1, r0
 80172ca:	9003      	str	r0, [sp, #12]
 80172cc:	eddf 0ab6 	vldr	s1, [pc, #728]	; 80175a8 <invoke+0x1ed8>
 80172d0:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 80175ac <invoke+0x1edc>
 80172d4:	9406      	str	r4, [sp, #24]
 80172d6:	9702      	str	r7, [sp, #8]
 80172d8:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80172dc:	48b4      	ldr	r0, [pc, #720]	; (80175b0 <invoke+0x1ee0>)
 80172de:	f00b f9f3 	bl	80226c8 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight>
/* layer 100:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[29024],6144,(float*)&buffer0[30560]);
 80172e2:	4ab3      	ldr	r2, [pc, #716]	; (80175b0 <invoke+0x1ee0>)
 80172e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80172e8:	f5a2 60c0 	sub.w	r0, r2, #1536	; 0x600
 80172ec:	f00c fa22 	bl	8023734 <where_zeros_inplace_bit>
/* layer 101:MUL */
fptr = &buffer0[30560];
fptr2 = scales36;
 80172f0:	4ab0      	ldr	r2, [pc, #704]	; (80175b4 <invoke+0x1ee4>)
 80172f2:	4bb1      	ldr	r3, [pc, #708]	; (80175b8 <invoke+0x1ee8>)
 80172f4:	48ae      	ldr	r0, [pc, #696]	; (80175b0 <invoke+0x1ee0>)
 80172f6:	f502 61c0 	add.w	r1, r2, #1536	; 0x600
 80172fa:	601a      	str	r2, [r3, #0]
 80172fc:	4602      	mov	r2, r0
 80172fe:	4bad      	ldr	r3, [pc, #692]	; (80175b4 <invoke+0x1ee4>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017300:	ecb3 7a01 	vldmia	r3!, {s14}
 8017304:	edd2 7a00 	vldr	s15, [r2]
 8017308:	4299      	cmp	r1, r3
 801730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801730e:	ece2 7a01 	vstmia	r2!, {s15}
 8017312:	d1f5      	bne.n	8017300 <invoke+0x1c30>
 8017314:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
for(int hw = 0; hw < 16; hw++){
 8017318:	42b0      	cmp	r0, r6
 801731a:	d1ef      	bne.n	80172fc <invoke+0x1c2c>
}
/* layer 102:SUM */
sum_4D_exclude((float*)&buffer0[30560],1,4,4,384,3,(float*)&buffer0[29024]);
 801731c:	2304      	movs	r3, #4
 801731e:	2203      	movs	r2, #3
 8017320:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017324:	49a5      	ldr	r1, [pc, #660]	; (80175bc <invoke+0x1eec>)
 8017326:	9201      	str	r2, [sp, #4]
 8017328:	461a      	mov	r2, r3
 801732a:	9102      	str	r1, [sp, #8]
 801732c:	2101      	movs	r1, #1
 801732e:	9000      	str	r0, [sp, #0]
 8017330:	f642 55e0 	movw	r5, #11744	; 0x2de0
 8017334:	489e      	ldr	r0, [pc, #632]	; (80175b0 <invoke+0x1ee0>)
 8017336:	f8cb 6000 	str.w	r6, [fp]
 801733a:	446d      	add	r5, sp
 801733c:	f00a ff28 	bl	8022190 <sum_4D_exclude>
/* layer 103:BIAS_UPDATE */
const float v13_conv_0_bias_QAS[384] = {6218774000.0,3655683800.0,4025783800.0,2553552400.0,1573439900.0,1095861600.0,3012372200.0,2777113900.0,761768300.0,3771176700.0,3574636000.0,8691896000.0,3036402200.0,1724976000.0,685664600.0,1073968500.0,1804135600.0,2191398100.0,1821529300.0,5283446300.0,4263397000.0,2276812500.0,6.4540545e+19,4234068000.0,1748282000.0,964335940.0,3552744400.0,1359091600.0,4323833000.0,1872564000.0,1488891500.0,3862231600.0,6268766000.0,2438708500.0,1655078900.0,3378801000.0,2838569500.0,1017552450.0,5908493300.0,3654168800.0,3148908300.0,1547238800.0,988844350.0,3815565800.0,2178253600.0,1079768700.0,3168508000.0,2190347500.0,684622340.0,1716071400.0,1310837100.0,2729751300.0,4372761000.0,1094751500.0,1885218600.0,3021010000.0,1250654800.0,763530430.0,4148253000.0,3617149700.0,1183229600.0,2562792200.0,2781286700.0,2710524700.0,1975316900.0,1297935000.0,2870464300.0,2654215000.0,3112936000.0,6.4540545e+19,1756145000.0,2001426200.0,3125140500.0,3793797600.0,1727468800.0,3925337600.0,5689981400.0,6.4540545e+19,3438579200.0,582194600.0,3111272200.0,2231951400.0,3126232600.0,1222943000.0,4747296300.0,1998135600.0,2614590700.0,2600152000.0,1791896400.0,2153195500.0,3365325300.0,5975375000.0,4788534000.0,2194499600.0,5548968000.0,3320401200.0,1427101700.0,3381228000.0,3586954200.0,1195268600.0,3247417900.0,6.4540545e+19,2153742300.0,2611620600.0,4444410000.0,4090424300.0,1524046100.0,1042931100.0,4638144000.0,4641611000.0,3583312000.0,3960049200.0,4833686500.0,3446786800.0,1081646600.0,782966340.0,1756297600.0,1948061700.0,2643361800.0,1301894500.0,1428760300.0,4288829000.0,3919010600.0,2344144600.0,919689100.0,2324802300.0,1238316800.0,1418477200.0,2283643000.0,4231538200.0,2522716700.0,5533971500.0,2962834400.0,2876232000.0,6.4540545e+19,1863885200.0,1620246300.0,5678483000.0,2110078500.0,2458661400.0,1882340200.0,786495040.0,1169366700.0,2111179400.0,3585948700.0,3423332900.0,7283285000.0,4650178600.0,2218300700.0,3173031400.0,3549933600.0,1720029400.0,5499190000.0,1270336600.0,2229560600.0,4930055000.0,2109084400.0,3369081900.0,1452618900.0,3383978000.0,2294657500.0,3072205000.0,3735657700.0,902825660.0,3094816000.0,2909646000.0,2488696600.0,1998046600.0,2408844800.0,1841184300.0,3220803300.0,6.4540545e+19,4333779500.0,3132397300.0,1364643000.0,3476246300.0,2576431400.0,3625121000.0,2080053600.0,2014506500.0,2807186200.0,2050715900.0,4277033000.0,2017156100.0,1668210300.0,1533583600.0,4565575700.0,4990597600.0,1677164400.0,2696547600.0,2567651300.0,3378558200.0,1497617200.0,2948733000.0,2861216300.0,2033264500.0,5331606500.0,3027645000.0,1566484200.0,1331578200.0,1479618600.0,904620900.0,3018522600.0,4916824000.0,1746880600.0,1856318700.0,7332025000.0,2200847400.0,3405922000.0,1213794300.0,4213964300.0,4341902300.0,1245220000.0,4376626000.0,7956229000.0,2030982000.0,2440010800.0,4072967700.0,2198071000.0,2278283800.0,1924683900.0,2201240600.0,4866540000.0,1399736400.0,2595831000.0,2117742700.0,4469250600.0,2274346800.0,1353044900.0,3117955600.0,1992863700.0,1313300400.0,2969270000.0,2770915000.0,1065277400.0,873739900.0,3889906700.0,2895561700.0,2608214000.0,2339272700.0,1831300500.0,2168545500.0,2939032000.0,3494531800.0,1346712800.0,2055590400.0,1048361800.0,3326954500.0,2906894300.0,4390433000.0,5230125600.0,2800091400.0,2892284200.0,6.4540545e+19,2299110700.0,4648113700.0,1018604900.0,365536000.0,2133898000.0,2222018600.0,2936011800.0,4279367200.0,2876851500.0,2206437600.0,2805782500.0,3802612200.0,1691852200.0,3116817200.0,2988988200.0,3470097200.0,678116200.0,1985151500.0,2660800300.0,3027061000.0,5284247600.0,1779763100.0,2385741800.0,4025605400.0,1749066900.0,2965630500.0,1691411200.0,2734037000.0,5797724700.0,3967366400.0,2732758500.0,2383597800.0,1421569800.0,4434281000.0,3909362400.0,3465807000.0,1789423400.0,5695254000.0,6.4540545e+19,1925940600.0,1215265800.0,2184526300.0,3532325400.0,2546660900.0,1066540160.0,2692514600.0,1810779600.0,1661833600.0,1745124500.0,1957702700.0,3146242300.0,2661046500.0,2856432000.0,3023174700.0,3567440400.0,2730573800.0,5689904000.0,1918862300.0,2269911800.0,1785945700.0,2749466000.0,4697850000.0,1645029100.0,2927824600.0,5085659600.0,3561831700.0,5456234500.0,6.4540545e+19,3296790300.0,4769472500.0,1904915600.0,1177256300.0,1573386200.0,1282618500.0,6.4540545e+19,2721441000.0,1333981600.0,3156787000.0,1516863100.0,2939711500.0,1823237400.0,3306214000.0,2206616000.0,2554347800.0,6.4540545e+19,3702762500.0,1360204700.0,2267084000.0,2767849700.0,4147105500.0,3619621000.0,1738791600.0,5862744000.0,2841494800.0,1243502200.0,6.4540545e+19,2759690500.0,1891875300.0,4226381800.0,2920187400.0,1999094800.0,1496611800.0,3497114000.0,2092673000.0,1781992400.0,977630700.0,1443327400.0,757286850.0,1227997800.0,1888430200.0,3479004400.0,3747829800.0,4297170400.0,4356546000.0,4411444000.0,6.4540545e+19,2125595800.0,2704379600.0,1672170900.0,3533985000.0,2002610700.0,2331888600.0,3538415000.0,1111041500.0,2146001900.0,2001717800.0,2241361400.0,1805678500.0,6.4540545e+19,4455689700.0,};
 8017340:	f642 50e0 	movw	r0, #11744	; 0x2de0
 8017344:	499e      	ldr	r1, [pc, #632]	; (80175c0 <invoke+0x1ef0>)
 8017346:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801734a:	4468      	add	r0, sp
 801734c:	f011 fdbb 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[29024];//gradients
for(int i = 0; i < 384; i++) v13_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_0_bias_QAS[i]);
 8017350:	4b9c      	ldr	r3, [pc, #624]	; (80175c4 <invoke+0x1ef4>)
 8017352:	489a      	ldr	r0, [pc, #616]	; (80175bc <invoke+0x1eec>)
 8017354:	6819      	ldr	r1, [r3, #0]
 8017356:	f500 67c0 	add.w	r7, r0, #1536	; 0x600
 801735a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80175a0 <invoke+0x1ed0>
 801735e:	3904      	subs	r1, #4
fptr = (float*)&buffer0[29024];//gradients
 8017360:	f8cb 0000 	str.w	r0, [fp]
for(int i = 0; i < 384; i++) v13_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v13_conv_0_bias_QAS[i]);
 8017364:	ecb0 7a01 	vldmia	r0!, {s14}
 8017368:	ecf5 7a01 	vldmia	r5!, {s15}
 801736c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017370:	4287      	cmp	r7, r0
 8017372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017376:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801737a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801737e:	ee17 3a90 	vmov	r3, s15
 8017382:	eba2 0303 	sub.w	r3, r2, r3
 8017386:	600b      	str	r3, [r1, #0]
 8017388:	d1ec      	bne.n	8017364 <invoke+0x1c94>
/* layer 104:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[30560],4,4,384,(q7_t*)v13_conv_0_weight,NULL,(float*)&buffer0[55136],4,4,96,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 801738a:	2004      	movs	r0, #4
 801738c:	2560      	movs	r5, #96	; 0x60
 801738e:	4b8e      	ldr	r3, [pc, #568]	; (80175c8 <invoke+0x1ef8>)
 8017390:	f04f 0c00 	mov.w	ip, #0
 8017394:	4602      	mov	r2, r0
 8017396:	4601      	mov	r1, r0
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2701      	movs	r7, #1
 801739c:	9003      	str	r0, [sp, #12]
 801739e:	9602      	str	r6, [sp, #8]
 80173a0:	9300      	str	r3, [sp, #0]
 80173a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80173a6:	9707      	str	r7, [sp, #28]
 80173a8:	f8cd c004 	str.w	ip, [sp, #4]
 80173ac:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80175a8 <invoke+0x1ed8>
 80173b0:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80175ac <invoke+0x1edc>
 80173b4:	9406      	str	r4, [sp, #24]
 80173b6:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80173ba:	487d      	ldr	r0, [pc, #500]	; (80175b0 <invoke+0x1ee0>)
 80173bc:	f5a0 6840 	sub.w	r8, r0, #3072	; 0xc00
 80173c0:	f007 fdfe 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 105:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[27488],1536,(float*)&buffer0[55136]);
 80173c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80173c8:	f508 42d8 	add.w	r2, r8, #27648	; 0x6c00
 80173cc:	f508 59c0 	add.w	r9, r8, #6144	; 0x1800
 80173d0:	4645      	mov	r5, r8
 80173d2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80173d6:	f5a2 40d8 	sub.w	r0, r2, #27648	; 0x6c00
 80173da:	f00c f9ab 	bl	8023734 <where_zeros_inplace_bit>
/* layer 106:DIV */
fptr3 = (float*)&buffer0[27488]; fptr2 = (float*)&buffer0[55136];
for(int i = 0; i < 1536; i++) *fptr3++ = *fptr2++ / 0.03161676228046417;
 80173de:	a76c      	add	r7, pc, #432	; (adr r7, 8017590 <invoke+0x1ec0>)
 80173e0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80173e4:	f85a 0b04 	ldr.w	r0, [sl], #4
 80173e8:	f7ef fe48 	bl	800707c <__aeabi_f2d>
 80173ec:	4632      	mov	r2, r6
 80173ee:	463b      	mov	r3, r7
 80173f0:	f7ef fe9c 	bl	800712c <__aeabi_dmul>
 80173f4:	f7f0 f972 	bl	80076dc <__aeabi_d2f>
 80173f8:	f845 0b04 	str.w	r0, [r5], #4
 80173fc:	45a9      	cmp	r9, r5
 80173fe:	d1f1      	bne.n	80173e4 <invoke+0x1d14>
/* layer 107:MUL */
fptr = (float*)&buffer0[27488];fptr3 = (float*)&buffer0[51872];for(int i = 0; i < 1536; i++) fptr3[i] = 0.02220197580754757 * fptr[i];
 8017400:	4a72      	ldr	r2, [pc, #456]	; (80175cc <invoke+0x1efc>)
 8017402:	4b6d      	ldr	r3, [pc, #436]	; (80175b8 <invoke+0x1ee8>)
 8017404:	f502 5113 	add.w	r1, r2, #9408	; 0x24c0
 8017408:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80175d0 <invoke+0x1f00>
 801740c:	4616      	mov	r6, r2
 801740e:	4617      	mov	r7, r2
 8017410:	6019      	str	r1, [r3, #0]
 8017412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017414:	496f      	ldr	r1, [pc, #444]	; (80175d4 <invoke+0x1f04>)
 8017416:	f8cb 3000 	str.w	r3, [fp]
 801741a:	4613      	mov	r3, r2
 801741c:	600a      	str	r2, [r1, #0]
 801741e:	ecf8 7a01 	vldmia	r8!, {s15}
 8017422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017426:	4545      	cmp	r5, r8
 8017428:	ece3 7a01 	vstmia	r3!, {s15}
 801742c:	d1f7      	bne.n	801741e <invoke+0x1d4e>
/* layer 108:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[27296],1536,(float*)&buffer0[51872]);
 801742e:	4a67      	ldr	r2, [pc, #412]	; (80175cc <invoke+0x1efc>)
 8017430:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8017434:	f5a2 40c0 	sub.w	r0, r2, #24576	; 0x6000
 8017438:	f00c f97c 	bl	8023734 <where_zeros_inplace_bit>
/* layer 109:MUL */
fptr = &buffer0[51872];
fptr2 = scales35;
 801743c:	4a66      	ldr	r2, [pc, #408]	; (80175d8 <invoke+0x1f08>)
 801743e:	4863      	ldr	r0, [pc, #396]	; (80175cc <invoke+0x1efc>)
 8017440:	4b5d      	ldr	r3, [pc, #372]	; (80175b8 <invoke+0x1ee8>)
 8017442:	f502 71c0 	add.w	r1, r2, #384	; 0x180
 8017446:	f500 58c0 	add.w	r8, r0, #6144	; 0x1800
 801744a:	601a      	str	r2, [r3, #0]
 801744c:	4602      	mov	r2, r0
 801744e:	4b62      	ldr	r3, [pc, #392]	; (80175d8 <invoke+0x1f08>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017450:	ecb3 7a01 	vldmia	r3!, {s14}
 8017454:	edd2 7a00 	vldr	s15, [r2]
 8017458:	4299      	cmp	r1, r3
 801745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801745e:	ece2 7a01 	vstmia	r2!, {s15}
 8017462:	d1f5      	bne.n	8017450 <invoke+0x1d80>
 8017464:	f500 70c0 	add.w	r0, r0, #384	; 0x180
for(int hw = 0; hw < 16; hw++){
 8017468:	4540      	cmp	r0, r8
 801746a:	d1ef      	bne.n	801744c <invoke+0x1d7c>
}
/* layer 110:SUM */
sum_4D_exclude((float*)&buffer0[51872],1,4,4,96,3,(float*)&buffer0[27296]);
 801746c:	2304      	movs	r3, #4
 801746e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017470:	2203      	movs	r2, #3
 8017472:	2060      	movs	r0, #96	; 0x60
 8017474:	9502      	str	r5, [sp, #8]
 8017476:	2101      	movs	r1, #1
 8017478:	9201      	str	r2, [sp, #4]
 801747a:	461a      	mov	r2, r3
 801747c:	9000      	str	r0, [sp, #0]
 801747e:	4853      	ldr	r0, [pc, #332]	; (80175cc <invoke+0x1efc>)
 8017480:	f8cb 8000 	str.w	r8, [fp]
 8017484:	f00a fe84 	bl	8022190 <sum_4D_exclude>
/* layer 111:BIAS_UPDATE */
const float v12_conv_2_bias_QAS[96] = {795028030.0,423624300.0,479252960.0,478791100.0,896438900.0,361995970.0,1020356860.0,1440235000.0,1393280600.0,817915500.0,616777300.0,766457150.0,783091840.0,417292930.0,1323931900.0,384448220.0,275395330.0,517444160.0,423124500.0,507065340.0,1057349570.0,965357950.0,635712300.0,764407550.0,1123631200.0,503342620.0,420479680.0,474280900.0,438251900.0,968981500.0,438337150.0,538776500.0,588037440.0,1068639300.0,973549950.0,811783400.0,405616100.0,806178050.0,646484030.0,784293600.0,376276260.0,320535780.0,589879740.0,215542480.0,759753540.0,513519420.0,618079040.0,1282527200.0,615622900.0,196468270.0,260889140.0,542197440.0,720725000.0,638961800.0,471709540.0,1136323800.0,549965400.0,615306050.0,804758800.0,376068600.0,373630050.0,573741250.0,642607740.0,200830430.0,396703740.0,796792300.0,836330430.0,361802240.0,517987840.0,593386050.0,648856100.0,370742660.0,753040500.0,188531440.0,384764380.0,716875900.0,773829950.0,576809150.0,1390649200.0,725712700.0,805873000.0,169132160.0,462125800.0,390630270.0,485278620.0,386392300.0,309343230.0,438246530.0,698687100.0,1022324160.0,591663040.0,708810800.0,436116100.0,496532480.0,786962940.0,755363200.0,};
 8017488:	4954      	ldr	r1, [pc, #336]	; (80175dc <invoke+0x1f0c>)
 801748a:	f50d 609c 	add.w	r0, sp, #1248	; 0x4e0
 801748e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8017492:	f011 fd18 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[27296];//gradients
for(int i = 0; i < 96; i++) v12_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_2_bias_QAS[i]);
 8017496:	4b52      	ldr	r3, [pc, #328]	; (80175e0 <invoke+0x1f10>)
 8017498:	4852      	ldr	r0, [pc, #328]	; (80175e4 <invoke+0x1f14>)
 801749a:	f50d 6c9c 	add.w	ip, sp, #1248	; 0x4e0
 801749e:	6819      	ldr	r1, [r3, #0]
 80174a0:	f500 7ec0 	add.w	lr, r0, #384	; 0x180
 80174a4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80175a0 <invoke+0x1ed0>
 80174a8:	3904      	subs	r1, #4
fptr = (float*)&buffer0[27296];//gradients
 80174aa:	f8cb 5000 	str.w	r5, [fp]
for(int i = 0; i < 96; i++) v12_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_2_bias_QAS[i]);
 80174ae:	ecb0 7a01 	vldmia	r0!, {s14}
 80174b2:	ecfc 7a01 	vldmia	ip!, {s15}
 80174b6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80174ba:	4586      	cmp	lr, r0
 80174bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80174c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174c8:	ee17 3a90 	vmov	r3, s15
 80174cc:	eba2 0303 	sub.w	r3, r2, r3
 80174d0:	600b      	str	r3, [r1, #0]
 80174d2:	d1ec      	bne.n	80174ae <invoke+0x1dde>
/* layer 112:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[51872],4,4,96,(q7_t*)v12_conv_2_weight,NULL,(float*)&buffer0[27296],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80174d4:	4a44      	ldr	r2, [pc, #272]	; (80175e8 <invoke+0x1f18>)
 80174d6:	2004      	movs	r0, #4
 80174d8:	f04f 0c00 	mov.w	ip, #0
 80174dc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80174de:	6812      	ldr	r2, [r2, #0]
 80174e0:	2101      	movs	r1, #1
 80174e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80174e6:	9502      	str	r5, [sp, #8]
 80174e8:	9200      	str	r2, [sp, #0]
 80174ea:	4602      	mov	r2, r0
 80174ec:	9107      	str	r1, [sp, #28]
 80174ee:	4601      	mov	r1, r0
 80174f0:	9305      	str	r3, [sp, #20]
 80174f2:	2360      	movs	r3, #96	; 0x60
 80174f4:	f8cd c004 	str.w	ip, [sp, #4]
 80174f8:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80175a8 <invoke+0x1ed8>
 80174fc:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80175ac <invoke+0x1edc>
 8017500:	9406      	str	r4, [sp, #24]
 8017502:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8017506:	4831      	ldr	r0, [pc, #196]	; (80175cc <invoke+0x1efc>)
 8017508:	f007 fd5a 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 113:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[26528],6144,(float*)&buffer0[27296]);
 801750c:	4a35      	ldr	r2, [pc, #212]	; (80175e4 <invoke+0x1f14>)
 801750e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8017512:	f5a2 7040 	sub.w	r0, r2, #768	; 0x300
/* layer 114:MUL */
fptr = &buffer0[27296];
fptr2 = scales34;
 8017516:	4615      	mov	r5, r2
 8017518:	921c      	str	r2, [sp, #112]	; 0x70
where_zeros_inplace_bit((bool*)&buffer0[26528],6144,(float*)&buffer0[27296]);
 801751a:	f00c f90b 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales34;
 801751e:	4933      	ldr	r1, [pc, #204]	; (80175ec <invoke+0x1f1c>)
 8017520:	4628      	mov	r0, r5
 8017522:	4a25      	ldr	r2, [pc, #148]	; (80175b8 <invoke+0x1ee8>)
 8017524:	6011      	str	r1, [r2, #0]
 8017526:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 801752a:	4602      	mov	r2, r0
 801752c:	4b2f      	ldr	r3, [pc, #188]	; (80175ec <invoke+0x1f1c>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 801752e:	ecb3 7a01 	vldmia	r3!, {s14}
 8017532:	edd2 7a00 	vldr	s15, [r2]
 8017536:	4299      	cmp	r1, r3
 8017538:	ee67 7a27 	vmul.f32	s15, s14, s15
 801753c:	ece2 7a01 	vstmia	r2!, {s15}
 8017540:	d1f5      	bne.n	801752e <invoke+0x1e5e>
 8017542:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
for(int hw = 0; hw < 16; hw++){
 8017546:	42b8      	cmp	r0, r7
 8017548:	d1ef      	bne.n	801752a <invoke+0x1e5a>
}
/* layer 115:SUM */
sum_4D_exclude((float*)&buffer0[27296],1,4,4,384,3,(float*)&buffer0[51872]);
 801754a:	2304      	movs	r3, #4
 801754c:	2203      	movs	r2, #3
 801754e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017552:	9702      	str	r7, [sp, #8]
 8017554:	9201      	str	r2, [sp, #4]
 8017556:	2101      	movs	r1, #1
 8017558:	461a      	mov	r2, r3
 801755a:	9000      	str	r0, [sp, #0]
 801755c:	4821      	ldr	r0, [pc, #132]	; (80175e4 <invoke+0x1f14>)
 801755e:	f8cb 7000 	str.w	r7, [fp]
 8017562:	f00a fe15 	bl	8022190 <sum_4D_exclude>
/* layer 116:BIAS_UPDATE */
const float v12_conv_1_bias_QAS[384] = {680649200.0,69443840.0,241322860.0,80489496.0,80691630.0,294001250.0,107731150.0,52987056.0,32530756.0,24586336.0,119902000.0,47630390.0,96925370.0,21572388.0,30960382.0,119762040.0,28125472.0,69059064.0,1105776800.0,47085650.0,54227330.0,23889654.0,72401620.0,3.4511303e+16,113776120.0,45162532.0,9.708138e+20,124803704.0,17816108.0,144262860.0,331772300.0,135888900.0,164727540.0,194066880.0,154027940.0,55157268.0,27045502.0,97904820.0,54438700.0,303278660.0,12362003.0,1042228350.0,643438140.0,60179332.0,39908252.0,163291120.0,517501730.0,170270290.0,227213740.0,1370298000.0,115288136.0,280747400.0,175949800.0,33373296.0,48514708.0,41199920.0,78254720.0,9.708138e+20,453542900.0,88115530.0,146622220.0,10955774.0,1672740900.0,63418460.0,25068528.0,49819490.0,37846076.0,39181356.0,73032000.0,92893120.0,6528928.0,100887620.0,121488056.0,831450940.0,141784590.0,188391170.0,72439230.0,88022510.0,90558090.0,191907090.0,380063940.0,36673228.0,281133220.0,193172080.0,37085428.0,274824320.0,14769999.0,176138460.0,95463016.0,19472444.0,328781570.0,38959136.0,47053252.0,156587490.0,29402610.0,115884376.0,35218770.0,61586468.0,634546600.0,60442856.0,236849220.0,27113518.0,18367392.0,73647870.0,22987670.0,113493060.0,200594910.0,307410620.0,72727040.0,56567316.0,37424616.0,921706750.0,153012300.0,121281090.0,24853752.0,61172724.0,49337680.0,182255100.0,24415668.0,65750696.0,55503460.0,37280652.0,1258082300.0,99035340.0,133413880.0,27096782.0,121029600.0,56115252.0,30667618.0,47280856.0,9.708138e+20,113290990.0,40715724.0,357438750.0,36486670.0,172003070.0,261998830.0,187449120.0,51582920.0,334937570.0,55945830.0,944658560.0,109379440.0,89333770.0,337961920.0,987207000.0,31556666.0,148114180.0,41062480.0,52236652.0,165748370.0,69615970.0,59515556.0,322113380.0,425687420.0,36736120.0,43174200.0,191407570.0,38773124.0,16738277.0,84924260.0,128233330.0,48222108.0,24441116.0,58718372.0,62130484.0,70179630.0,33736096.0,73848780.0,761925000.0,90858456.0,38253724.0,284263780.0,42319870.0,1084416100.0,122633180.0,18796978.0,20323764.0,9.708138e+20,73665690.0,282964500000000.0,3.4680817e+20,69947290.0,104142640.0,31024776.0,10167363.0,31862356.0,130711080.0,49809760.0,113956620.0,75655860.0,21221994.0,155463920.0,130742504.0,189932740.0,133679670.0,55810700.0,33437294.0,35320364.0,306550720.0,108544600.0,58353850.0,82360730.0,159779230.0,97278880.0,114619010.0,59246020.0,114979150.0,118233440.0,30607828.0,84174850.0,34790910.0,176133380.0,43541028.0,108081770.0,33076980.0,35958616.0,35044764.0,213399630.0,1208276500.0,111141230.0,39859172.0,28398308.0,37453444.0,517015170.0,104045630.0,90151120.0,132066330.0,53671510.0,40765060.0,128265220.0,79884990.0,21395194.0,56846548.0,55997920.0,154076080.0,35897896.0,85285580.0,37287464.0,44771570.0,65000536.0,30918738.0,114472584.0,22731470.0,131453960.0,53656350.0,493477120.0,366332160.0,46090508.0,249981000.0,56240092.0,61729080.0,819527600.0,48934690.0,22435840.0,17833398.0,63885404.0,33058492.0,28890800.0,59674296.0,58250664.0,79550050.0,83156504.0,27791218.0,183412690.0,78321480.0,74524310.0,451072580.0,31507766.0,253719600.0,47475730.0,344763170.0,602704600.0,58548130.0,38813570.0,64482676.0,34223570.0,729680500.0,129350660.0,81558320.0,151623630.0,85952140.0,569547400.0,126092220.0,186059230.0,40756330.0,222430380.0,250228900.0,87782350.0,62698530.0,94738280.0,35568124.0,123619200.0,951448700.0,53220690.0,43804164.0,116273704.0,20950906.0,90746190.0,106682990.0,212486860.0,297780580.0,84009810.0,20731540.0,1085934700.0,115616184.0,92536540.0,153480340.0,149813940.0,1357518700.0,53056396.0,13452287.0,152835580.0,45520680.0,7153737.0,189962270.0,13424615.0,46581788.0,60839012.0,60871780.0,82857896.0,122577400.0,202675490.0,74252344.0,302843100.0,82180260.0,67164050.0,144256700.0,203185580.0,104642210.0,31926436.0,338139200.0,158402830.0,132649490.0,36223340.0,22270606.0,169933820.0,81857280.0,73139064.0,259672930.0,9618092.0,68564080.0,45304148.0,48773236.0,21535702.0,45699004.0,27462012.0,111699080.0,1017591900.0,34205668.0,375507800.0,175735070.0,997363800.0,98687440.0,1299152500.0,135593380.0,27775246.0,142973920.0,74591260.0,226205870.0,387703500.0,555103500.0,80686216.0,71789656.0,31479418.0,38753948.0,28233520.0,59774836.0,38505580.0,111002824.0,103070200.0,26854110.0,56696096.0,27145416.0,68423980.0,18124092.0,97490360.0,122723660.0,153317310.0,229591440.0,117964910.0,115923020.0,860251650.0,26710836.0,};
 8017566:	f243 30e0 	movw	r0, #13280	; 0x33e0
 801756a:	4921      	ldr	r1, [pc, #132]	; (80175f0 <invoke+0x1f20>)
 801756c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8017570:	4468      	add	r0, sp
 8017572:	f011 fca8 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[51872];//gradients
for(int i = 0; i < 384; i++) v12_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_1_bias_QAS[i]);
 8017576:	4b1f      	ldr	r3, [pc, #124]	; (80175f4 <invoke+0x1f24>)
 8017578:	f243 30e0 	movw	r0, #13280	; 0x33e0
 801757c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80175f8 <invoke+0x1f28>
 8017580:	6819      	ldr	r1, [r3, #0]
 8017582:	4468      	add	r0, sp
 8017584:	eddf 6a06 	vldr	s13, [pc, #24]	; 80175a0 <invoke+0x1ed0>
 8017588:	3904      	subs	r1, #4
fptr = (float*)&buffer0[51872];//gradients
 801758a:	f8cb 7000 	str.w	r7, [fp]
 801758e:	e035      	b.n	80175fc <invoke+0x1f2c>
 8017590:	8453abfb 	.word	0x8453abfb
 8017594:	403fa0f8 	.word	0x403fa0f8
 8017598:	2001aca0 	.word	0x2001aca0
 801759c:	20004e34 	.word	0x20004e34
 80175a0:	39d1b717 	.word	0x39d1b717
 80175a4:	20004e38 	.word	0x20004e38
 80175a8:	7f7fffff 	.word	0x7f7fffff
 80175ac:	ff7fffff 	.word	0xff7fffff
 80175b0:	200146a0 	.word	0x200146a0
 80175b4:	08045840 	.word	0x08045840
 80175b8:	2003cfcc 	.word	0x2003cfcc
 80175bc:	200140a0 	.word	0x200140a0
 80175c0:	0802e2c8 	.word	0x0802e2c8
 80175c4:	20004e2c 	.word	0x20004e2c
 80175c8:	20004e30 	.word	0x20004e30
 80175cc:	200199e0 	.word	0x200199e0
 80175d0:	3cb5e0eb 	.word	0x3cb5e0eb
 80175d4:	2003cfd8 	.word	0x2003cfd8
 80175d8:	080456c0 	.word	0x080456c0
 80175dc:	0802e8c8 	.word	0x0802e8c8
 80175e0:	20004e24 	.word	0x20004e24
 80175e4:	200139e0 	.word	0x200139e0
 80175e8:	20004e28 	.word	0x20004e28
 80175ec:	080450c0 	.word	0x080450c0
 80175f0:	0802ea48 	.word	0x0802ea48
 80175f4:	20004e1c 	.word	0x20004e1c
 80175f8:	20019fe0 	.word	0x20019fe0
for(int i = 0; i < 384; i++) v12_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_1_bias_QAS[i]);
 80175fc:	ecb6 7a01 	vldmia	r6!, {s14}
 8017600:	ecf0 7a01 	vldmia	r0!, {s15}
 8017604:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017608:	45b4      	cmp	ip, r6
 801760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801760e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017616:	ee17 3a90 	vmov	r3, s15
 801761a:	eba2 0303 	sub.w	r3, r2, r3
 801761e:	600b      	str	r3, [r1, #0]
 8017620:	d1ec      	bne.n	80175fc <invoke+0x1f2c>
/* layer 117:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight((float*)&buffer0[27296],4,4,384,v12_conv_1_weight,NULL,(float*)&buffer0[27296],4,4,384,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 8017622:	4bca      	ldr	r3, [pc, #808]	; (801794c <invoke+0x227c>)
 8017624:	2004      	movs	r0, #4
 8017626:	2200      	movs	r2, #0
 8017628:	2101      	movs	r1, #1
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	f44f 76c0 	mov.w	r6, #384	; 0x180
 8017630:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017632:	9300      	str	r3, [sp, #0]
 8017634:	4633      	mov	r3, r6
 8017636:	9208      	str	r2, [sp, #32]
 8017638:	9201      	str	r2, [sp, #4]
 801763a:	4602      	mov	r2, r0
 801763c:	9107      	str	r1, [sp, #28]
 801763e:	4601      	mov	r1, r0
 8017640:	9003      	str	r0, [sp, #12]
 8017642:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8017950 <invoke+0x2280>
 8017646:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8017954 <invoke+0x2284>
 801764a:	9406      	str	r4, [sp, #24]
 801764c:	9502      	str	r5, [sp, #8]
 801764e:	e9cd 0604 	strd	r0, r6, [sp, #16]
 8017652:	48c1      	ldr	r0, [pc, #772]	; (8017958 <invoke+0x2288>)
 8017654:	f00b f838 	bl	80226c8 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight>
/* layer 118:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[25760],6144,(float*)&buffer0[27296]);
 8017658:	4abf      	ldr	r2, [pc, #764]	; (8017958 <invoke+0x2288>)
 801765a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801765e:	f5a2 60c0 	sub.w	r0, r2, #1536	; 0x600
 8017662:	f00c f867 	bl	8023734 <where_zeros_inplace_bit>
/* layer 119:MUL */
fptr = &buffer0[27296];
fptr2 = scales33;
 8017666:	4abd      	ldr	r2, [pc, #756]	; (801795c <invoke+0x228c>)
 8017668:	4bbd      	ldr	r3, [pc, #756]	; (8017960 <invoke+0x2290>)
 801766a:	48bb      	ldr	r0, [pc, #748]	; (8017958 <invoke+0x2288>)
 801766c:	f502 61c0 	add.w	r1, r2, #1536	; 0x600
 8017670:	601a      	str	r2, [r3, #0]
 8017672:	4602      	mov	r2, r0
 8017674:	4bb9      	ldr	r3, [pc, #740]	; (801795c <invoke+0x228c>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 384; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017676:	ecb3 7a01 	vldmia	r3!, {s14}
 801767a:	edd2 7a00 	vldr	s15, [r2]
 801767e:	4299      	cmp	r1, r3
 8017680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017684:	ece2 7a01 	vstmia	r2!, {s15}
 8017688:	d1f5      	bne.n	8017676 <invoke+0x1fa6>
 801768a:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
for(int hw = 0; hw < 16; hw++){
 801768e:	42b8      	cmp	r0, r7
 8017690:	d1ef      	bne.n	8017672 <invoke+0x1fa2>
}
/* layer 120:SUM */
sum_4D_exclude((float*)&buffer0[27296],1,4,4,384,3,(float*)&buffer0[25760]);
 8017692:	49b4      	ldr	r1, [pc, #720]	; (8017964 <invoke+0x2294>)
 8017694:	2304      	movs	r3, #4
 8017696:	2203      	movs	r2, #3
 8017698:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801769c:	460d      	mov	r5, r1
 801769e:	9102      	str	r1, [sp, #8]
 80176a0:	9201      	str	r2, [sp, #4]
 80176a2:	2101      	movs	r1, #1
 80176a4:	461a      	mov	r2, r3
 80176a6:	9000      	str	r0, [sp, #0]
 80176a8:	f505 60c0 	add.w	r0, r5, #1536	; 0x600
 80176ac:	f8cb 7000 	str.w	r7, [fp]
 80176b0:	f00a fd6e 	bl	8022190 <sum_4D_exclude>
/* layer 121:BIAS_UPDATE */
const float v12_conv_0_bias_QAS[384] = {1136575600.0,2040391300.0,2077056500.0,2034187500.0,1762718600.0,4030772000.0,1841896700.0,4868980000.0,1223189600.0,1855291100.0,1855523200.0,3676532500.0,1970145400.0,2469937000.0,2392775000.0,2519624000.0,2854075400.0,2423968300.0,760267900.0,5027346000.0,4503358500.0,1429835600.0,3663342300.0,1.414174e+19,3816206300.0,1325406200.0,8.8113815e+19,2976416300.0,1733192800.0,1434732300.0,782286460.0,2227346200.0,4872456000.0,3428042800.0,2447028200.0,1980633300.0,2227741000.0,3073567200.0,7238564000.0,4010009600.0,1443874400.0,410462080.0,1775979600.0,2390324000.0,580735600.0,544239170.0,2499269000.0,3330869500.0,2497517600.0,2299572000.0,2718046000.0,1005498300.0,2906264800.0,3471911700.0,4416064500.0,3095418600.0,3148722400.0,8.8113815e+19,3172754400.0,3532102400.0,2870269200.0,1747743600.0,2380882000.0,1762658200.0,3077239000.0,6241826000.0,2263849200.0,3058511400.0,6129932300.0,1897562600.0,8758495000.0,1303848400.0,2934238500.0,2373533000.0,4151177200.0,2698813700.0,3304121300.0,762728960.0,3338361600.0,1505353500.0,1392591500.0,1656505900.0,2924376000.0,4903783000.0,4029962200.0,1769380100.0,3164936700.0,2771395000.0,2660365800.0,2499306200.0,1624377100.0,4389154000.0,1937759700.0,2379855400.0,3833679000.0,1713832400.0,1485755300.0,2333414000.0,3169743000.0,2130247800.0,1956648400.0,2667801300.0,5128366600.0,3131886600.0,2291237000.0,4662625000.0,1979318900.0,1634104600.0,3756548900.0,3228822000.0,3146427600.0,3918374100.0,2717204000.0,2857095200.0,3966231300.0,2318577400.0,5743175700.0,3425646000.0,6293124600.0,2843192800.0,2063824100.0,2927118000.0,1884325900.0,1201014100.0,1751600000.0,4625455600.0,2307460400.0,1284116100.0,3823057200.0,7206434000.0,8.8113815e+19,4447265300.0,4632884700.0,3661992200.0,3819077600.0,2375221200.0,1862547200.0,1889320300.0,3660316700.0,2989126700.0,1493039000.0,1350058500.0,4466152400.0,2041081000.0,2735890000.0,3136133000.0,4380225500.0,2851763700.0,1898354300.0,1009307400.0,3465992700.0,2761323000.0,4866060000.0,1901852300.0,1173971500.0,2203420000.0,2309187000.0,3274329600.0,3855246000.0,1714944400.0,4915921400.0,6548325000.0,4011662800.0,1752499700.0,1874903300.0,3256849000.0,2060328600.0,2163943400.0,1094807300.0,581742200.0,3934632400.0,2134150000.0,1923486600.0,2534842000.0,3439737000.0,1238613200.0,2056313100.0,2582986000.0,8.8113815e+19,1863412100.0,528128540000000.0,8.8113815e+19,2872774700.0,8466160600.0,5928300500.0,2717336300.0,3401440300.0,3856140500.0,3914721800.0,2104371200.0,1990977300.0,3405599700.0,5130124000.0,2366169000.0,3541358800.0,2688096000.0,3265794800.0,1783130000.0,2650924300.0,1261207300.0,4682307600.0,3081187000.0,2707812900.0,2596061000.0,2295762400.0,2629182000.0,3681562400.0,2543694300.0,1627785000.0,2219639600.0,4145208600.0,4756674600.0,2342796000.0,1561126700.0,1436840000.0,2991830500.0,4516881400.0,2437973000.0,1290355200.0,3283809500.0,2447767300.0,2737169000.0,4966438000.0,2080336100.0,1527180200.0,2588113400.0,1862272100.0,3410946000.0,2668299000.0,2924319700.0,2127849600.0,1219165400.0,3750990000.0,3799396600.0,3683312600.0,2547699200.0,6100801500.0,3608704300.0,6309693400.0,1869943200.0,1850927900.0,2413370400.0,3068627000.0,681319400.0,2761030400.0,2762016300.0,2912139000.0,1644817500.0,3241364000.0,2965952500.0,1935296000.0,3653041400.0,2225739800.0,2837288700.0,3625133300.0,2091304400.0,2949881000.0,2271578000.0,3289326300.0,3900763400.0,2080940500.0,1170342400.0,1292553000.0,1089360100.0,1113356700.0,3509231400.0,4747642000.0,1259681200.0,1960991000.0,2714619000.0,3296077600.0,2383403000.0,2179476500.0,4312972000.0,3278589200.0,2652623400.0,2396380200.0,2584977000.0,5060705300.0,3805407700.0,1840800000.0,2255761400.0,763654000.0,3137983500.0,2626940000.0,1784982800.0,1252439800.0,2642950000.0,1560280800.0,3793649200.0,1352926700.0,1214307200.0,2483907600.0,1796537000.0,3180281600.0,2236206000.0,3039899600.0,2374835200.0,1302292200.0,675244740.0,2864737500.0,1171753700.0,1691885000.0,2689620200.0,1480941700.0,4048308200.0,4948261400.0,2745933800.0,3590229500.0,3132125200.0,3124607200.0,1831060900.0,1525987500.0,4083542500.0,4281650700.0,2174200800.0,1382750300.0,2559254800.0,4717650000.0,3676210400.0,2112444000.0,4803199500.0,2491967000.0,1378465300.0,1641825500.0,3807953200.0,3102254800.0,3595002600.0,2529469700.0,3847278800.0,1468933500.0,2812613400.0,1803215900.0,2365023200.0,4257348600.0,4070236000.0,1069724700.0,4381073400.0,4806052000.0,2516518400.0,6788170000.0,3516757500.0,4790797300.0,2993356500.0,2051949200.0,2777829600.0,4020414200.0,2064716800.0,673274200.0,2796632800.0,3958022000.0,1399611300.0,3323319800.0,2259803100.0,2583358700.0,2891336400.0,3667634700.0,1400531000.0,1970075400.0,2867299800.0,1892139800.0,2224057900.0,6168770600.0,2657283000.0,2892859000.0,2627104300.0,2858930700.0,7726923000.0,2281465600.0,1650249900.0,1063661500.0,1463866600.0,5651028500.0,3708549600.0,3168868400.0,812855700.0,1546151200.0,5128070700.0,1893806800.0,2192931800.0,3263515100.0,2940796000.0,1373262100.0,4371444700.0,};
 80176b4:	f643 10e0 	movw	r0, #14816	; 0x39e0
 80176b8:	49ab      	ldr	r1, [pc, #684]	; (8017968 <invoke+0x2298>)
 80176ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80176be:	4468      	add	r0, sp
 80176c0:	f643 16e0 	movw	r6, #14816	; 0x39e0
 80176c4:	f011 fbff 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[25760];//gradients
for(int i = 0; i < 384; i++) v12_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_0_bias_QAS[i]);
 80176c8:	4ba8      	ldr	r3, [pc, #672]	; (801796c <invoke+0x229c>)
 80176ca:	4628      	mov	r0, r5
 80176cc:	446e      	add	r6, sp
 80176ce:	6819      	ldr	r1, [r3, #0]
 80176d0:	f505 6cc0 	add.w	ip, r5, #1536	; 0x600
 80176d4:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8017970 <invoke+0x22a0>
 80176d8:	3904      	subs	r1, #4
fptr = (float*)&buffer0[25760];//gradients
 80176da:	f8cb 5000 	str.w	r5, [fp]
for(int i = 0; i < 384; i++) v12_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v12_conv_0_bias_QAS[i]);
 80176de:	ecb0 7a01 	vldmia	r0!, {s14}
 80176e2:	ecf6 7a01 	vldmia	r6!, {s15}
 80176e6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80176ea:	4584      	cmp	ip, r0
 80176ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80176f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80176f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176f8:	ee17 3a90 	vmov	r3, s15
 80176fc:	eba2 0303 	sub.w	r3, r2, r3
 8017700:	600b      	str	r3, [r1, #0]
 8017702:	d1ec      	bne.n	80176de <invoke+0x200e>
/* layer 122:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[27296],4,4,384,(q7_t*)v12_conv_0_weight,NULL,(float*)&buffer0[51872],4,4,96,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017704:	4a9b      	ldr	r2, [pc, #620]	; (8017974 <invoke+0x22a4>)
 8017706:	2004      	movs	r0, #4
 8017708:	2101      	movs	r1, #1
 801770a:	2360      	movs	r3, #96	; 0x60
 801770c:	6812      	ldr	r2, [r2, #0]
 801770e:	2600      	movs	r6, #0
 8017710:	9107      	str	r1, [sp, #28]
 8017712:	4601      	mov	r1, r0
 8017714:	9200      	str	r2, [sp, #0]
 8017716:	4602      	mov	r2, r0
 8017718:	9305      	str	r3, [sp, #20]
 801771a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801771e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8017950 <invoke+0x2280>
 8017722:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8017954 <invoke+0x2284>
 8017726:	9406      	str	r4, [sp, #24]
 8017728:	9702      	str	r7, [sp, #8]
 801772a:	9601      	str	r6, [sp, #4]
 801772c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8017730:	4889      	ldr	r0, [pc, #548]	; (8017958 <invoke+0x2288>)
 8017732:	f007 fc45 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 123:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[25568],1536,(float*)&buffer0[51872]);
 8017736:	4a90      	ldr	r2, [pc, #576]	; (8017978 <invoke+0x22a8>)
 8017738:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801773c:	488f      	ldr	r0, [pc, #572]	; (801797c <invoke+0x22ac>)
 801773e:	f00b fff9 	bl	8023734 <where_zeros_inplace_bit>
/* layer 124:MUL */
fptr = &buffer0[51872];
fptr2 = scales32;
 8017742:	4a8f      	ldr	r2, [pc, #572]	; (8017980 <invoke+0x22b0>)
 8017744:	4b86      	ldr	r3, [pc, #536]	; (8017960 <invoke+0x2290>)
 8017746:	488c      	ldr	r0, [pc, #560]	; (8017978 <invoke+0x22a8>)
 8017748:	f502 71c0 	add.w	r1, r2, #384	; 0x180
 801774c:	601a      	str	r2, [r3, #0]
 801774e:	4602      	mov	r2, r0
 8017750:	4b8b      	ldr	r3, [pc, #556]	; (8017980 <invoke+0x22b0>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 96; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017752:	ecb3 7a01 	vldmia	r3!, {s14}
 8017756:	edd2 7a00 	vldr	s15, [r2]
 801775a:	4299      	cmp	r1, r3
 801775c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017760:	ece2 7a01 	vstmia	r2!, {s15}
 8017764:	d1f5      	bne.n	8017752 <invoke+0x2082>
 8017766:	f500 70c0 	add.w	r0, r0, #384	; 0x180
for(int hw = 0; hw < 16; hw++){
 801776a:	4540      	cmp	r0, r8
 801776c:	d1ef      	bne.n	801774e <invoke+0x207e>
}
/* layer 125:SUM */
sum_4D_exclude((float*)&buffer0[51872],1,4,4,96,3,(float*)&buffer0[25568]);
 801776e:	2304      	movs	r3, #4
 8017770:	4f82      	ldr	r7, [pc, #520]	; (801797c <invoke+0x22ac>)
 8017772:	2203      	movs	r2, #3
 8017774:	2160      	movs	r1, #96	; 0x60
 8017776:	f50d 65cc 	add.w	r5, sp, #1632	; 0x660
 801777a:	f507 76c0 	add.w	r6, r7, #384	; 0x180
 801777e:	9100      	str	r1, [sp, #0]
 8017780:	2101      	movs	r1, #1
 8017782:	e9cd 2701 	strd	r2, r7, [sp, #4]
 8017786:	461a      	mov	r2, r3
 8017788:	f8cb 0000 	str.w	r0, [fp]
 801778c:	487a      	ldr	r0, [pc, #488]	; (8017978 <invoke+0x22a8>)
 801778e:	f00a fcff 	bl	8022190 <sum_4D_exclude>
/* layer 126:BIAS_UPDATE */
const float v11_conv_2_bias_QAS[96] = {432550300.0,375101700.0,437156060.0,581787100.0,525189470.0,579265300.0,650508200.0,571823600.0,713535500.0,617111200.0,325618500.0,356919550.0,278525500.0,347964160.0,582282900.0,245331860.0,499914270.0,541437300.0,437642700.0,395421700.0,398489000.0,379602430.0,534114940.0,675364740.0,338407420.0,484193920.0,306952420.0,348372770.0,539177300.0,337501440.0,257014050.0,555452100.0,461507170.0,321952800.0,597713600.0,476133950.0,427873060.0,492571620.0,307989630.0,488513340.0,521551070.0,537259500.0,568293000.0,409705540.0,246441150.0,376149150.0,414129730.0,384527500.0,471164220.0,434883870.0,528346430.0,185190740.0,403773700.0,408318600.0,514284540.0,653932000.0,610370600.0,387412000.0,360227840.0,478465060.0,668778430.0,619559300.0,407304800.0,381928700.0,433998000.0,531015840.0,637770800.0,597956100.0,795642300.0,328686560.0,419181920.0,547983600.0,508011330.0,242219650.0,477589950.0,317062080.0,421132260.0,442602600.0,452089120.0,376861700.0,706227400.0,490516320.0,308305180.0,422310750.0,427676000.0,388494500.0,391234880.0,488454620.0,536344900.0,764594750.0,466583170.0,355003200.0,361732580.0,373656800.0,524078200.0,281078370.0,};
 8017792:	497c      	ldr	r1, [pc, #496]	; (8017984 <invoke+0x22b4>)
 8017794:	f50d 60cc 	add.w	r0, sp, #1632	; 0x660
 8017798:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801779c:	f011 fb93 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[25568];//gradients
for(int i = 0; i < 96; i++) v11_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_2_bias_QAS[i]);
 80177a0:	4b79      	ldr	r3, [pc, #484]	; (8017988 <invoke+0x22b8>)
 80177a2:	4638      	mov	r0, r7
 80177a4:	eddf 6a72 	vldr	s13, [pc, #456]	; 8017970 <invoke+0x22a0>
 80177a8:	6819      	ldr	r1, [r3, #0]
fptr = (float*)&buffer0[25568];//gradients
 80177aa:	f8cb 7000 	str.w	r7, [fp]
 80177ae:	3904      	subs	r1, #4
for(int i = 0; i < 96; i++) v11_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_2_bias_QAS[i]);
 80177b0:	ecb0 7a01 	vldmia	r0!, {s14}
 80177b4:	ecf5 7a01 	vldmia	r5!, {s15}
 80177b8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80177bc:	4286      	cmp	r6, r0
 80177be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80177c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80177c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80177ca:	ee17 3a90 	vmov	r3, s15
 80177ce:	eba2 0303 	sub.w	r3, r2, r3
 80177d2:	600b      	str	r3, [r1, #0]
 80177d4:	d1ec      	bne.n	80177b0 <invoke+0x20e0>
/* layer 127:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[51872],4,4,96,(q7_t*)v11_conv_2_weight,NULL,(float*)&buffer0[86528],4,4,240,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80177d6:	4a6d      	ldr	r2, [pc, #436]	; (801798c <invoke+0x22bc>)
 80177d8:	2004      	movs	r0, #4
 80177da:	4d6d      	ldr	r5, [pc, #436]	; (8017990 <invoke+0x22c0>)
 80177dc:	2101      	movs	r1, #1
 80177de:	6812      	ldr	r2, [r2, #0]
 80177e0:	23f0      	movs	r3, #240	; 0xf0
 80177e2:	2600      	movs	r6, #0
 80177e4:	9107      	str	r1, [sp, #28]
 80177e6:	9200      	str	r2, [sp, #0]
 80177e8:	4601      	mov	r1, r0
 80177ea:	4602      	mov	r2, r0
 80177ec:	9305      	str	r3, [sp, #20]
 80177ee:	eddf 0a58 	vldr	s1, [pc, #352]	; 8017950 <invoke+0x2280>
 80177f2:	2360      	movs	r3, #96	; 0x60
 80177f4:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8017954 <invoke+0x2284>
 80177f8:	9406      	str	r4, [sp, #24]
/* layer 128:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[25088],3840,(float*)&buffer0[86528]);
/* layer 129:MUL */
fptr = &buffer0[86528];
fptr2 = scales31;
 80177fa:	9511      	str	r5, [sp, #68]	; 0x44
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[51872],4,4,96,(q7_t*)v11_conv_2_weight,NULL,(float*)&buffer0[86528],4,4,240,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80177fc:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8017800:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8017804:	485c      	ldr	r0, [pc, #368]	; (8017978 <invoke+0x22a8>)
 8017806:	f007 fbdb 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
where_zeros_inplace_bit((bool*)&buffer0[25088],3840,(float*)&buffer0[86528]);
 801780a:	462a      	mov	r2, r5
 801780c:	f5a5 4070 	sub.w	r0, r5, #61440	; 0xf000
 8017810:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8017814:	f00b ff8e 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales31;
 8017818:	4a5e      	ldr	r2, [pc, #376]	; (8017994 <invoke+0x22c4>)
 801781a:	4b51      	ldr	r3, [pc, #324]	; (8017960 <invoke+0x2290>)
 801781c:	4628      	mov	r0, r5
 801781e:	f502 7170 	add.w	r1, r2, #960	; 0x3c0
 8017822:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8017826:	601a      	str	r2, [r3, #0]
 8017828:	4602      	mov	r2, r0
 801782a:	4b5a      	ldr	r3, [pc, #360]	; (8017994 <invoke+0x22c4>)
for(int hw = 0; hw < 16; hw++){
for(int i = 0; i < 240; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 801782c:	ecb3 7a01 	vldmia	r3!, {s14}
 8017830:	edd2 7a00 	vldr	s15, [r2]
 8017834:	4299      	cmp	r1, r3
 8017836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801783a:	ece2 7a01 	vstmia	r2!, {s15}
 801783e:	d1f5      	bne.n	801782c <invoke+0x215c>
 8017840:	f500 7070 	add.w	r0, r0, #960	; 0x3c0
for(int hw = 0; hw < 16; hw++){
 8017844:	42a8      	cmp	r0, r5
 8017846:	d1ef      	bne.n	8017828 <invoke+0x2158>
}
/* layer 130:SUM */
sum_4D_exclude((float*)&buffer0[86528],1,4,4,240,3,(float*)&buffer0[25088]);
 8017848:	4f53      	ldr	r7, [pc, #332]	; (8017998 <invoke+0x22c8>)
 801784a:	2304      	movs	r3, #4
 801784c:	2203      	movs	r2, #3
 801784e:	21f0      	movs	r1, #240	; 0xf0
 8017850:	f50d 55e5 	add.w	r5, sp, #7328	; 0x1ca0
 8017854:	f507 7670 	add.w	r6, r7, #960	; 0x3c0
 8017858:	9100      	str	r1, [sp, #0]
 801785a:	2101      	movs	r1, #1
 801785c:	e9cd 2701 	strd	r2, r7, [sp, #4]
 8017860:	461a      	mov	r2, r3
 8017862:	f8cb 0000 	str.w	r0, [fp]
 8017866:	f507 4070 	add.w	r0, r7, #61440	; 0xf000
 801786a:	f00a fc91 	bl	8022190 <sum_4D_exclude>
/* layer 131:BIAS_UPDATE */
const float v11_conv_1_bias_QAS[240] = {176854110.0,147088780.0,98894730.0,154173280.0,120978744.0,110749630.0,85150220.0,87416744.0,76360824.0,182378500.0,84360850.0,110915370.0,372390370.0,119287890.0,180645870.0,792535200.0,96971060.0,93952740.0,120224230.0,333828200.0,107680370.0,252133620.0,200577920.0,93724936.0,140804700.0,165764480.0,124706240.0,175792910.0,117854070.0,114314376.0,33995524.0,84359820.0,85569940.0,340773100.0,89224950.0,82249224.0,116825580.0,93757290.0,101293930.0,86161970.0,126940500.0,103337390.0,84285220.0,245931570.0,111383970.0,153373120.0,143879070.0,67805640.0,100072390.0,77325030.0,144503660.0,116583420.0,235600800.0,751139800.0,466777400.0,113541370.0,122336530.0,348951500.0,104526360.0,63396948.0,57517988.0,140818690.0,95306520.0,81721170.0,117096000.0,322184030.0,100322950.0,93083250.0,56282944.0,82163250.0,107621480.0,153793470.0,78120830.0,166910620.0,201587620.0,105373780.0,110673730.0,45338730.0,131914070.0,1906639100.0,158487740.0,112157760.0,125367740.0,136941630.0,95518184.0,227501840.0,64020650.0,151728160.0,81904936.0,93160216.0,99449350.0,125387304.0,332069980.0,84223860.0,135165070.0,145589760.0,89583630.0,100572030.0,100823280.0,84184250.0,60865700.0,90351120.0,362819700.0,87650880.0,87846640.0,56651360.0,107920850.0,76796216.0,110930990.0,514935460.0,103876504.0,93186580.0,116479710.0,300237280.0,46850948.0,143543410.0,122639730.0,126919660.0,133438990.0,328854370.0,127010170.0,78943870.0,275756670.0,108456770.0,251999470.0,224582880.0,65074616.0,104979590.0,122542310.0,103600230.0,101624230.0,114799900.0,247452210.0,137358100.0,125727200.0,138057550.0,104491070.0,70584660.0,77253380.0,112826780.0,120639590.0,128703840.0,93863544.0,159654450.0,141452350.0,274409950.0,102693560.0,226816100.0,214489520.0,84627384.0,63941132.0,83276696.0,59306416.0,95793350.0,97138530.0,109930670.0,81163130.0,71914344.0,129095450.0,94769256.0,57460800.0,100512170.0,70987496.0,85093360.0,86233260.0,99843176.0,101501390.0,143300300.0,64805096.0,122478130.0,22592322.0,70645440.0,330577060.0,173949550.0,89555320.0,114850640.0,64686964.0,75196870.0,122780230.0,105577896.0,108401380.0,79986860.0,124280240.0,143060580.0,176160100.0,166410270.0,100347416.0,118310856.0,140926720.0,352116500.0,320394880.0,686043700.0,155510910.0,94487490.0,81552350.0,130098490.0,103792170.0,35842748.0,232687410.0,45229960.0,192181660.0,122861816.0,107111960.0,363504320.0,111834100.0,122364530.0,153787380.0,113546840.0,113141250.0,320554050.0,378002940.0,80382440.0,153116420.0,70618480.0,157710820.0,102684430.0,108095380.0,137134880.0,117507750.0,152732460.0,102970370.0,92666184.0,694961400.0,86364936.0,107402696.0,97384520.0,150793780.0,92713144.0,130695256.0,85760200.0,89749550.0,6196774000.0,68428830.0,84317520.0,197643500.0,48946260.0,109050030.0,126658664.0,113251020.0,115429760.0,};
 801786e:	494b      	ldr	r1, [pc, #300]	; (801799c <invoke+0x22cc>)
 8017870:	f50d 50e5 	add.w	r0, sp, #7328	; 0x1ca0
 8017874:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8017878:	f011 fb25 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[25088];//gradients
for(int i = 0; i < 240; i++) v11_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_1_bias_QAS[i]);
 801787c:	4b48      	ldr	r3, [pc, #288]	; (80179a0 <invoke+0x22d0>)
 801787e:	4638      	mov	r0, r7
 8017880:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8017970 <invoke+0x22a0>
 8017884:	6819      	ldr	r1, [r3, #0]
fptr = (float*)&buffer0[25088];//gradients
 8017886:	f8cb 7000 	str.w	r7, [fp]
 801788a:	3904      	subs	r1, #4
for(int i = 0; i < 240; i++) v11_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_1_bias_QAS[i]);
 801788c:	ecb0 7a01 	vldmia	r0!, {s14}
 8017890:	ecf5 7a01 	vldmia	r5!, {s15}
 8017894:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017898:	42b0      	cmp	r0, r6
 801789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801789e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80178a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178a6:	ee17 3a90 	vmov	r3, s15
 80178aa:	eba2 0303 	sub.w	r3, r2, r3
 80178ae:	600b      	str	r3, [r1, #0]
 80178b0:	d1ec      	bne.n	801788c <invoke+0x21bc>
/* layer 132:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight((float*)&buffer0[86528],4,4,240,v11_conv_1_weight,NULL,(float*)&buffer0[25088],8,8,240,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 80178b2:	4b3c      	ldr	r3, [pc, #240]	; (80179a4 <invoke+0x22d4>)
 80178b4:	25f0      	movs	r5, #240	; 0xf0
 80178b6:	4f38      	ldr	r7, [pc, #224]	; (8017998 <invoke+0x22c8>)
 80178b8:	2008      	movs	r0, #8
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	2204      	movs	r2, #4
 80178be:	2600      	movs	r6, #0
 80178c0:	2101      	movs	r1, #1
 80178c2:	9300      	str	r3, [sp, #0]
 80178c4:	462b      	mov	r3, r5
 80178c6:	9107      	str	r1, [sp, #28]
 80178c8:	4611      	mov	r1, r2
 80178ca:	9003      	str	r0, [sp, #12]
 80178cc:	eddf 0a20 	vldr	s1, [pc, #128]	; 8017950 <invoke+0x2280>
 80178d0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8017954 <invoke+0x2284>
 80178d4:	9406      	str	r4, [sp, #24]
 80178d6:	9702      	str	r7, [sp, #8]
 80178d8:	9608      	str	r6, [sp, #32]
 80178da:	9601      	str	r6, [sp, #4]
 80178dc:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80178e0:	f507 4070 	add.w	r0, r7, #61440	; 0xf000
 80178e4:	f00b f99a 	bl	8022c1c <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight>
/* layer 133:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[23168],15360,(float*)&buffer0[25088]);
 80178e8:	463a      	mov	r2, r7
 80178ea:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80178ee:	f5a7 60f0 	sub.w	r0, r7, #1920	; 0x780
 80178f2:	f00b ff1f 	bl	8023734 <where_zeros_inplace_bit>
/* layer 134:MUL */
fptr = &buffer0[25088];
fptr2 = scales30;
 80178f6:	4a2c      	ldr	r2, [pc, #176]	; (80179a8 <invoke+0x22d8>)
 80178f8:	4b19      	ldr	r3, [pc, #100]	; (8017960 <invoke+0x2290>)
 80178fa:	4638      	mov	r0, r7
 80178fc:	f502 7170 	add.w	r1, r2, #960	; 0x3c0
 8017900:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017902:	601a      	str	r2, [r3, #0]
 8017904:	4602      	mov	r2, r0
 8017906:	4b28      	ldr	r3, [pc, #160]	; (80179a8 <invoke+0x22d8>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 240; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017908:	ecb3 7a01 	vldmia	r3!, {s14}
 801790c:	edd2 7a00 	vldr	s15, [r2]
 8017910:	4299      	cmp	r1, r3
 8017912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017916:	ece2 7a01 	vstmia	r2!, {s15}
 801791a:	d1f5      	bne.n	8017908 <invoke+0x2238>
 801791c:	f500 7070 	add.w	r0, r0, #960	; 0x3c0
for(int hw = 0; hw < 64; hw++){
 8017920:	42a8      	cmp	r0, r5
 8017922:	d1ef      	bne.n	8017904 <invoke+0x2234>
}
/* layer 135:SUM */
sum_4D_exclude((float*)&buffer0[25088],1,8,8,240,3,(float*)&buffer0[23168]);
 8017924:	4f21      	ldr	r7, [pc, #132]	; (80179ac <invoke+0x22dc>)
 8017926:	2308      	movs	r3, #8
 8017928:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801792a:	2203      	movs	r2, #3
 801792c:	20f0      	movs	r0, #240	; 0xf0
 801792e:	9702      	str	r7, [sp, #8]
 8017930:	9201      	str	r2, [sp, #4]
 8017932:	2101      	movs	r1, #1
 8017934:	461a      	mov	r2, r3
 8017936:	9000      	str	r0, [sp, #0]
 8017938:	f8cb 5000 	str.w	r5, [fp]
 801793c:	f507 60f0 	add.w	r0, r7, #1920	; 0x780
 8017940:	f00a fc26 	bl	8022190 <sum_4D_exclude>
/* layer 136:BIAS_UPDATE */
const float v11_conv_0_bias_QAS[240] = {222053550.0,238249230.0,42329590.0,334853570.0,244787970.0,187087220.0,252697920.0,214233280.0,244313620.0,216889570.0,550981060.0,157574820.0,376055800.0,169615070.0,633696800.0,183249020.0,173189730.0,156033260.0,451611300.0,717515900.0,233444640.0,120407730.0,264770880.0,210556210.0,277143550.0,222676300.0,467064580.0,260657680.0,515243970.0,334925600.0,63610550.0,191211940.0,322718080.0,282833630.0,356672160.0,503605920.0,379796740.0,264762100.0,303439940.0,168188670.0,946538050.0,246090620.0,255942770.0,433751040.0,194935890.0,447735900.0,335057900.0,190451890.0,175017390.0,594128300.0,278718900.0,202936320.0,161872020.0,109231010.0,375647140.0,2194942000.0,167079700.0,406403970.0,374617540.0,128290840.0,197049180.0,291071870.0,299988450.0,232603550.0,395654620.0,496277120.0,183359900.0,287347700.0,190623520.0,342361060.0,107304770.0,225165010.0,234340910.0,1113314000.0,311237950.0,260575700.0,60788068.0,124534180.0,174860020.0,273796320.0,188689420.0,186112640.0,293580060.0,251349010.0,150670850.0,150847970.0,101516240.0,415562530.0,248355820.0,239681020.0,69158320.0,365116900.0,238008820.0,178186620.0,114276780.0,291710270.0,389046300.0,236874450.0,209619100.0,481769150.0,100649240.0,323922140.0,363505920.0,345436540.0,238355440.0,138547300.0,191461700.0,290883040.0,353903780.0,409517400.0,357018530.0,107448344.0,154399970.0,300423330.0,114199710.0,317265540.0,140985090.0,361069100.0,85341464.0,728871900.0,517906530.0,160144880.0,479543970.0,195112770.0,558428000.0,401075230.0,132034840.0,148002030.0,344508220.0,212592830.0,369757500.0,214354340.0,362561020.0,292036860.0,364706600.0,459363970.0,376638620.0,179853820.0,198257420.0,139451140.0,270904420.0,394561800.0,298892900.0,188446560.0,259890580.0,296260860.0,441818560.0,61723972.0,182898480.0,128629410.0,154542020.0,192442610.0,274891940.0,531862140.0,261821000.0,178555650.0,185288380.0,134832880.0,558778940.0,760331140.0,188252060.0,215739570.0,250051870.0,439624130.0,283744030.0,223087940.0,224839870.0,184522850.0,232627410.0,375074600.0,129570296.0,232125470.0,409374340.0,278790460.0,222788240.0,294334460.0,168461860.0,196347580.0,122758456.0,174988850.0,338849120.0,203318580.0,219040940.0,249616060.0,254826530.0,123540730.0,148026110.0,222169070.0,322438340.0,318081180.0,279756450.0,249204690.0,263394930.0,277079500.0,286754080.0,316824350.0,151333900.0,1401044400.0,654861760.0,338289120.0,567904900.0,119817010.0,251501280.0,306107400.0,381583300.0,534466880.0,326682370.0,499156540.0,255604020.0,223444800.0,218008660.0,210210370.0,267794180.0,457032100.0,227650420.0,445688830.0,86923090.0,234123620.0,548293760.0,258038320.0,223319740.0,195635200.0,733549900.0,109024990.0,303095500.0,379993820.0,211956530.0,252265330.0,408614100.0,392735700.0,242124930.0,1553785600.0,112253300.0,136019570.0,504035550.0,114972200.0,270072700.0,426348930.0,303208580.0,214769120.0,};
 8017944:	f242 0060 	movw	r0, #8288	; 0x2060
 8017948:	e032      	b.n	80179b0 <invoke+0x22e0>
 801794a:	bf00      	nop
 801794c:	20004e20 	.word	0x20004e20
 8017950:	7f7fffff 	.word	0x7f7fffff
 8017954:	ff7fffff 	.word	0xff7fffff
 8017958:	200139e0 	.word	0x200139e0
 801795c:	08044ac0 	.word	0x08044ac0
 8017960:	2003cfcc 	.word	0x2003cfcc
 8017964:	200133e0 	.word	0x200133e0
 8017968:	0802f048 	.word	0x0802f048
 801796c:	20004e14 	.word	0x20004e14
 8017970:	39d1b717 	.word	0x39d1b717
 8017974:	20004e18 	.word	0x20004e18
 8017978:	200199e0 	.word	0x200199e0
 801797c:	20013320 	.word	0x20013320
 8017980:	08044940 	.word	0x08044940
 8017984:	0802f648 	.word	0x0802f648
 8017988:	20004e0c 	.word	0x20004e0c
 801798c:	20004e10 	.word	0x20004e10
 8017990:	20022140 	.word	0x20022140
 8017994:	08044580 	.word	0x08044580
 8017998:	20013140 	.word	0x20013140
 801799c:	0802f7c8 	.word	0x0802f7c8
 80179a0:	20004e04 	.word	0x20004e04
 80179a4:	20004e08 	.word	0x20004e08
 80179a8:	080441c0 	.word	0x080441c0
 80179ac:	200129c0 	.word	0x200129c0
 80179b0:	49c7      	ldr	r1, [pc, #796]	; (8017cd0 <invoke+0x2600>)
 80179b2:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80179b6:	4468      	add	r0, sp
 80179b8:	f242 0560 	movw	r5, #8288	; 0x2060
 80179bc:	f011 fa83 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[23168];//gradients
for(int i = 0; i < 240; i++) v11_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_0_bias_QAS[i]);
 80179c0:	4bc4      	ldr	r3, [pc, #784]	; (8017cd4 <invoke+0x2604>)
 80179c2:	4638      	mov	r0, r7
 80179c4:	446d      	add	r5, sp
 80179c6:	6819      	ldr	r1, [r3, #0]
 80179c8:	f507 7670 	add.w	r6, r7, #960	; 0x3c0
 80179cc:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8017cd8 <invoke+0x2608>
 80179d0:	3904      	subs	r1, #4
fptr = (float*)&buffer0[23168];//gradients
 80179d2:	f8cb 7000 	str.w	r7, [fp]
for(int i = 0; i < 240; i++) v11_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v11_conv_0_bias_QAS[i]);
 80179d6:	ecb0 7a01 	vldmia	r0!, {s14}
 80179da:	ecf5 7a01 	vldmia	r5!, {s15}
 80179de:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80179e2:	4286      	cmp	r6, r0
 80179e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80179e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80179ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179f0:	ee17 3a90 	vmov	r3, s15
 80179f4:	eba2 0303 	sub.w	r3, r2, r3
 80179f8:	600b      	str	r3, [r1, #0]
 80179fa:	d1ec      	bne.n	80179d6 <invoke+0x2306>
/* layer 137:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[25088],8,8,240,(q7_t*)v11_conv_0_weight,(q7_t*)v11_conv_0_weightFlash,24,NULL,(float*)&buffer0[86528],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80179fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80179fe:	2008      	movs	r0, #8
 8017a00:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8017d00 <invoke+0x2630>
 8017a04:	2301      	movs	r3, #1
 8017a06:	9104      	str	r1, [sp, #16]
 8017a08:	2630      	movs	r6, #48	; 0x30
 8017a0a:	4ab4      	ldr	r2, [pc, #720]	; (8017cdc <invoke+0x260c>)
 8017a0c:	2500      	movs	r5, #0
 8017a0e:	49b4      	ldr	r1, [pc, #720]	; (8017ce0 <invoke+0x2610>)
 8017a10:	2718      	movs	r7, #24
 8017a12:	6812      	ldr	r2, [r2, #0]
 8017a14:	f508 5940 	add.w	r9, r8, #12288	; 0x3000
 8017a18:	6809      	ldr	r1, [r1, #0]
 8017a1a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8017ce4 <invoke+0x2614>
/* layer 138:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[20096],3072,(float*)&buffer0[86528]);
 8017a1e:	46ca      	mov	sl, r9
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[25088],8,8,240,(q7_t*)v11_conv_0_weight,(q7_t*)v11_conv_0_weightFlash,24,NULL,(float*)&buffer0[86528],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017a20:	9201      	str	r2, [sp, #4]
 8017a22:	4602      	mov	r2, r0
 8017a24:	9100      	str	r1, [sp, #0]
 8017a26:	4601      	mov	r1, r0
 8017a28:	9309      	str	r3, [sp, #36]	; 0x24
 8017a2a:	23f0      	movs	r3, #240	; 0xf0
 8017a2c:	9005      	str	r0, [sp, #20]
 8017a2e:	9503      	str	r5, [sp, #12]
where_zeros_inplace_bit((bool*)&buffer0[20096],3072,(float*)&buffer0[86528]);
 8017a30:	4645      	mov	r5, r8
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[25088],8,8,240,(q7_t*)v11_conv_0_weight,(q7_t*)v11_conv_0_weightFlash,24,NULL,(float*)&buffer0[86528],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017a32:	9702      	str	r7, [sp, #8]
 8017a34:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8017ce8 <invoke+0x2618>
 8017a38:	9408      	str	r4, [sp, #32]
where_zeros_inplace_bit((bool*)&buffer0[20096],3072,(float*)&buffer0[86528]);
 8017a3a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[25088],8,8,240,(q7_t*)v11_conv_0_weight,(q7_t*)v11_conv_0_weightFlash,24,NULL,(float*)&buffer0[86528],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017a3e:	e9cd 0606 	strd	r0, r6, [sp, #24]
 8017a42:	f5a8 4070 	sub.w	r0, r8, #61440	; 0xf000
 8017a46:	f008 f871 	bl	801fb2c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol>
where_zeros_inplace_bit((bool*)&buffer0[20096],3072,(float*)&buffer0[86528]);
 8017a4a:	4642      	mov	r2, r8
 8017a4c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017a50:	48a6      	ldr	r0, [pc, #664]	; (8017cec <invoke+0x261c>)
 8017a52:	f00b fe6f 	bl	8023734 <where_zeros_inplace_bit>
/* layer 139:DIV */
fptr3 = (float*)&buffer0[98816]; fptr2 = (float*)&buffer0[86528];
for(int i = 0; i < 3072; i++) *fptr3++ = *fptr2++ / 0.054952241480350494;
 8017a56:	a79c      	add	r7, pc, #624	; (adr r7, 8017cc8 <invoke+0x25f8>)
 8017a58:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017a5c:	f855 0b04 	ldr.w	r0, [r5], #4
 8017a60:	f7ef fb0c 	bl	800707c <__aeabi_f2d>
 8017a64:	463b      	mov	r3, r7
 8017a66:	4632      	mov	r2, r6
 8017a68:	f7ef fb60 	bl	800712c <__aeabi_dmul>
 8017a6c:	f7ef fe36 	bl	80076dc <__aeabi_d2f>
 8017a70:	4b9f      	ldr	r3, [pc, #636]	; (8017cf0 <invoke+0x2620>)
 8017a72:	f84a 0b04 	str.w	r0, [sl], #4
 8017a76:	42ab      	cmp	r3, r5
 8017a78:	d1f0      	bne.n	8017a5c <invoke+0x238c>
 8017a7a:	4a9d      	ldr	r2, [pc, #628]	; (8017cf0 <invoke+0x2620>)
/* layer 140:MUL */
fptr = (float*)&buffer0[98816];fptr3 = (float*)&buffer0[86528];for(int i = 0; i < 3072; i++) fptr3[i] = 0.0381767563521862 * fptr[i];
 8017a7c:	464b      	mov	r3, r9
 8017a7e:	499d      	ldr	r1, [pc, #628]	; (8017cf4 <invoke+0x2624>)
 8017a80:	f8cb 2000 	str.w	r2, [fp]
 8017a84:	600a      	str	r2, [r1, #0]
 8017a86:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8017cf8 <invoke+0x2628>
 8017a8a:	4a9c      	ldr	r2, [pc, #624]	; (8017cfc <invoke+0x262c>)
 8017a8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017a8e:	6011      	str	r1, [r2, #0]
 8017a90:	ecf3 7a01 	vldmia	r3!, {s15}
 8017a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017a98:	ece8 7a01 	vstmia	r8!, {s15}
 8017a9c:	4545      	cmp	r5, r8
 8017a9e:	d1f7      	bne.n	8017a90 <invoke+0x23c0>
/* layer 141:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[19712],3072,(float*)&buffer0[86528]);
 8017aa0:	4a97      	ldr	r2, [pc, #604]	; (8017d00 <invoke+0x2630>)
 8017aa2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017aa6:	4897      	ldr	r0, [pc, #604]	; (8017d04 <invoke+0x2634>)
 8017aa8:	f00b fe44 	bl	8023734 <where_zeros_inplace_bit>
/* layer 142:MUL */
fptr = &buffer0[86528];
fptr2 = scales29;
 8017aac:	4a96      	ldr	r2, [pc, #600]	; (8017d08 <invoke+0x2638>)
 8017aae:	4b91      	ldr	r3, [pc, #580]	; (8017cf4 <invoke+0x2624>)
 8017ab0:	4893      	ldr	r0, [pc, #588]	; (8017d00 <invoke+0x2630>)
 8017ab2:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
 8017ab6:	601a      	str	r2, [r3, #0]
 8017ab8:	4602      	mov	r2, r0
 8017aba:	4b93      	ldr	r3, [pc, #588]	; (8017d08 <invoke+0x2638>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017abc:	ecb3 7a01 	vldmia	r3!, {s14}
 8017ac0:	edd2 7a00 	vldr	s15, [r2]
 8017ac4:	4299      	cmp	r1, r3
 8017ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017aca:	ece2 7a01 	vstmia	r2!, {s15}
 8017ace:	d1f5      	bne.n	8017abc <invoke+0x23ec>
 8017ad0:	30c0      	adds	r0, #192	; 0xc0
for(int hw = 0; hw < 64; hw++){
 8017ad2:	4b87      	ldr	r3, [pc, #540]	; (8017cf0 <invoke+0x2620>)
 8017ad4:	4298      	cmp	r0, r3
 8017ad6:	d1ef      	bne.n	8017ab8 <invoke+0x23e8>
}
/* layer 143:SUM */
sum_4D_exclude((float*)&buffer0[86528],1,8,8,48,3,(float*)&buffer0[19712]);
 8017ad8:	2030      	movs	r0, #48	; 0x30
 8017ada:	2308      	movs	r3, #8
 8017adc:	2203      	movs	r2, #3
 8017ade:	4989      	ldr	r1, [pc, #548]	; (8017d04 <invoke+0x2634>)
 8017ae0:	9000      	str	r0, [sp, #0]
 8017ae2:	4887      	ldr	r0, [pc, #540]	; (8017d00 <invoke+0x2630>)
 8017ae4:	9102      	str	r1, [sp, #8]
 8017ae6:	2101      	movs	r1, #1
 8017ae8:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 8017aec:	9201      	str	r2, [sp, #4]
 8017aee:	461a      	mov	r2, r3
 8017af0:	f8cb 5000 	str.w	r5, [fp]
 8017af4:	ad48      	add	r5, sp, #288	; 0x120
 8017af6:	f00a fb4b 	bl	8022190 <sum_4D_exclude>
/* layer 144:BIAS_UPDATE */
const float v10_conv_2_bias_QAS[48] = {576984500.0,389407400.0,59698172.0,257143000.0,163044690.0,395011680.0,497028600.0,342989300.0,379091260.0,276234370.0,121533540.0,131055270.0,55527044.0,83971040.0,51497524.0,200109470.0,186422500.0,71635896.0,512487360.0,66350476.0,412828100.0,127238440.0,75970530.0,729505400.0,290650850.0,356379070.0,305478050.0,364946430.0,79329816.0,28634610.0,304265300.0,137598180.0,449954780.0,41008460.0,66146290.0,151813570.0,632065300.0,296810370.0,201276270.0,138420270.0,258529490.0,316172670.0,228946190.0,59856908.0,421134560.0,118707160.0,213282690.0,46290260.0,};
 8017afa:	4984      	ldr	r1, [pc, #528]	; (8017d0c <invoke+0x263c>)
 8017afc:	a848      	add	r0, sp, #288	; 0x120
 8017afe:	22c0      	movs	r2, #192	; 0xc0
 8017b00:	f011 f9e1 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[19712];//gradients
for(int i = 0; i < 48; i++) v10_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_2_bias_QAS[i]);
 8017b04:	4b82      	ldr	r3, [pc, #520]	; (8017d10 <invoke+0x2640>)
 8017b06:	487f      	ldr	r0, [pc, #508]	; (8017d04 <invoke+0x2634>)
 8017b08:	6819      	ldr	r1, [r3, #0]
 8017b0a:	f100 06c0 	add.w	r6, r0, #192	; 0xc0
 8017b0e:	eddf 6a72 	vldr	s13, [pc, #456]	; 8017cd8 <invoke+0x2608>
 8017b12:	3904      	subs	r1, #4
 8017b14:	ecb0 7a01 	vldmia	r0!, {s14}
 8017b18:	ecf5 7a01 	vldmia	r5!, {s15}
 8017b1c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017b20:	4286      	cmp	r6, r0
 8017b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b2e:	ee17 3a90 	vmov	r3, s15
 8017b32:	eba2 0303 	sub.w	r3, r2, r3
 8017b36:	600b      	str	r3, [r1, #0]
 8017b38:	d1ec      	bne.n	8017b14 <invoke+0x2444>
/* layer 145:CAST */
fptr = (float*)&buffer0[98816];
int8ptr = (int8_t*)&buffer0[16640];
 8017b3a:	4d76      	ldr	r5, [pc, #472]	; (8017d14 <invoke+0x2644>)
fptr = (float*)&buffer0[98816];
 8017b3c:	4b6c      	ldr	r3, [pc, #432]	; (8017cf0 <invoke+0x2620>)
int8ptr = (int8_t*)&buffer0[16640];
 8017b3e:	4976      	ldr	r1, [pc, #472]	; (8017d18 <invoke+0x2648>)
 8017b40:	f605 32ff 	addw	r2, r5, #3071	; 0xbff
fptr = (float*)&buffer0[98816];
 8017b44:	f8cb 3000 	str.w	r3, [fp]
 8017b48:	1e6b      	subs	r3, r5, #1
int8ptr = (int8_t*)&buffer0[16640];
 8017b4a:	600d      	str	r5, [r1, #0]
for(int i = 0; i < 3072; i++) fptr[i] = (float)int8ptr[i];
 8017b4c:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 8017b50:	ee07 1a90 	vmov	s15, r1
 8017b54:	429a      	cmp	r2, r3
 8017b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b5a:	ece9 7a01 	vstmia	r9!, {s15}
 8017b5e:	d1f5      	bne.n	8017b4c <invoke+0x247c>
/* layer 146:STRIDED_SLICE */
const uint16_t begin0[] = {0, 0, 0, 0};
 8017b60:	f245 12e0 	movw	r2, #20960	; 0x51e0
const uint16_t end0[] = {1, 24, 8, 8};
const uint16_t strides0[] = {1};
 8017b64:	f245 1ee0 	movw	lr, #20960	; 0x51e0
const uint16_t begin0[] = {0, 0, 0, 0};
 8017b68:	496c      	ldr	r1, [pc, #432]	; (8017d1c <invoke+0x264c>)
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017b6a:	2608      	movs	r6, #8
const uint16_t end0[] = {1, 24, 8, 8};
 8017b6c:	4b6c      	ldr	r3, [pc, #432]	; (8017d20 <invoke+0x2650>)
const uint16_t begin0[] = {0, 0, 0, 0};
 8017b6e:	446a      	add	r2, sp
const uint16_t strides0[] = {1};
 8017b70:	486c      	ldr	r0, [pc, #432]	; (8017d24 <invoke+0x2654>)
 8017b72:	44ee      	add	lr, sp
 8017b74:	2701      	movs	r7, #1
const uint16_t begin0[] = {0, 0, 0, 0};
 8017b76:	eb02 0c01 	add.w	ip, r2, r1
 8017b7a:	f04f 0800 	mov.w	r8, #0
const uint16_t end0[] = {1, 24, 8, 8};
 8017b7e:	441a      	add	r2, r3
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017b80:	f04f 0918 	mov.w	r9, #24
const uint16_t strides0[] = {1};
 8017b84:	4486      	add	lr, r0
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017b86:	9504      	str	r5, [sp, #16]
/* layer 147:GROUP_CONV */
const float v11_conv_0_weight_QAS[240] = {670546.0,719452.8,127824.73,1011173.6,739198.1,564956.4,763084.2,646930.75,737765.94,654952.06,1663824.4,475836.38,1135594.0,512194.9,1913605.2,553366.06,522989.47,471181.28,1363752.8,2166717.8,704944.2,363601.1,799541.56,635826.94,836904.0,672426.6,1410417.8,787120.8,1555907.4,1011391.1,192087.9,577412.06,974527.6,854086.44,1077060.4,1520763.4,1146890.6,799515.06,916312.5,507887.53,2858307.5,743131.9,772882.94,1309819.2,588657.44,1352049.9,1011790.5,575116.75,528508.56,1794118.4,841661.06,612816.75,488812.84,329850.2,1134360.0,6628174.0,504538.7,1227237.9,1131250.9,387406.12,595039.0,878963.94,905889.8,702404.3,1194777.6,1498632.2,553700.9,867717.94,575635.1,1033844.3,324033.44,679941.75,707650.7,3361929.0,939860.4,786873.25,183564.7,376061.94,528033.4,826796.06,569794.7,562013.44,886537.94,759010.9,454988.1,455522.97,306553.56,1254894.5,749972.2,723776.44,208840.78,1102561.2,718726.9,538078.8,345087.2,880891.7,1174822.0,715301.3,632997.0,1454821.9,303935.44,978163.5,1097696.6,1043131.56,719773.56,418378.0,578166.2,878393.6,1068700.5,1236639.6,1078106.2,324467.0,466249.2,907203.0,344854.44,958062.25,425739.53,1090337.9,257709.8,2201009.8,1563947.8,483597.34,1448102.4,589191.56,1686312.6,1211146.5,398712.06,446928.97,1040328.25,641976.94,1116574.9,647296.3,1094843.2,881877.94,1101322.4,1387163.8,1137354.1,543113.3,598687.6,421107.44,818063.3,1191477.5,902581.56,569061.4,784804.25,894633.44,1334181.1,186390.89,552307.44,388428.53,466678.06,581128.4,830104.6,1606090.1,790633.6,539193.25,559524.44,407161.47,1687372.0,2296009.0,568473.94,651479.4,755093.94,1327554.4,856835.8,673669.5,678960.0,557212.7,702476.4,1132631.0,391269.75,700960.6,1236207.8,841877.2,672764.5,888816.2,508712.5,592920.44,370699.66,528422.4,1023239.4,613971.06,661448.6,753777.9,769512.06,373061.97,447001.66,670894.75,973682.8,960525.2,844794.25,752535.56,795386.56,836710.44,865925.25,956729.94,456990.38,4230802.0,1977518.0,1021548.2,1714930.2,361817.28,759470.7,924367.44,1152285.9,1613955.8,986498.7,1507327.5,771859.8,674747.2,658331.4,634782.5,808671.2,1380122.1,687447.0,1345868.2,262485.9,706994.56,1655709.5,779210.94,674369.5,590769.1,2215136.5,329228.1,915272.25,1147485.9,640055.5,761777.9,1233912.0,1185963.1,731156.44,4692042.5,338976.75,410744.97,1522060.9,347187.2,815551.8,1287466.9,915613.8,648548.7,};
 8017b88:	f242 4a20 	movw	sl, #9248	; 0x2420
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017b8c:	f8cd e00c 	str.w	lr, [sp, #12]
const uint16_t end0[] = {1, 24, 8, 8};
 8017b90:	f04f 1e08 	mov.w	lr, #524296	; 0x80008
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017b94:	9705      	str	r7, [sp, #20]
const float v11_conv_0_weight_QAS[240] = {670546.0,719452.8,127824.73,1011173.6,739198.1,564956.4,763084.2,646930.75,737765.94,654952.06,1663824.4,475836.38,1135594.0,512194.9,1913605.2,553366.06,522989.47,471181.28,1363752.8,2166717.8,704944.2,363601.1,799541.56,635826.94,836904.0,672426.6,1410417.8,787120.8,1555907.4,1011391.1,192087.9,577412.06,974527.6,854086.44,1077060.4,1520763.4,1146890.6,799515.06,916312.5,507887.53,2858307.5,743131.9,772882.94,1309819.2,588657.44,1352049.9,1011790.5,575116.75,528508.56,1794118.4,841661.06,612816.75,488812.84,329850.2,1134360.0,6628174.0,504538.7,1227237.9,1131250.9,387406.12,595039.0,878963.94,905889.8,702404.3,1194777.6,1498632.2,553700.9,867717.94,575635.1,1033844.3,324033.44,679941.75,707650.7,3361929.0,939860.4,786873.25,183564.7,376061.94,528033.4,826796.06,569794.7,562013.44,886537.94,759010.9,454988.1,455522.97,306553.56,1254894.5,749972.2,723776.44,208840.78,1102561.2,718726.9,538078.8,345087.2,880891.7,1174822.0,715301.3,632997.0,1454821.9,303935.44,978163.5,1097696.6,1043131.56,719773.56,418378.0,578166.2,878393.6,1068700.5,1236639.6,1078106.2,324467.0,466249.2,907203.0,344854.44,958062.25,425739.53,1090337.9,257709.8,2201009.8,1563947.8,483597.34,1448102.4,589191.56,1686312.6,1211146.5,398712.06,446928.97,1040328.25,641976.94,1116574.9,647296.3,1094843.2,881877.94,1101322.4,1387163.8,1137354.1,543113.3,598687.6,421107.44,818063.3,1191477.5,902581.56,569061.4,784804.25,894633.44,1334181.1,186390.89,552307.44,388428.53,466678.06,581128.4,830104.6,1606090.1,790633.6,539193.25,559524.44,407161.47,1687372.0,2296009.0,568473.94,651479.4,755093.94,1327554.4,856835.8,673669.5,678960.0,557212.7,702476.4,1132631.0,391269.75,700960.6,1236207.8,841877.2,672764.5,888816.2,508712.5,592920.44,370699.66,528422.4,1023239.4,613971.06,661448.6,753777.9,769512.06,373061.97,447001.66,670894.75,973682.8,960525.2,844794.25,752535.56,795386.56,836710.44,865925.25,956729.94,456990.38,4230802.0,1977518.0,1021548.2,1714930.2,361817.28,759470.7,924367.44,1152285.9,1613955.8,986498.7,1507327.5,771859.8,674747.2,658331.4,634782.5,808671.2,1380122.1,687447.0,1345868.2,262485.9,706994.56,1655709.5,779210.94,674369.5,590769.1,2215136.5,329228.1,915272.25,1147485.9,640055.5,761777.9,1233912.0,1185963.1,731156.44,4692042.5,338976.75,410744.97,1522060.9,347187.2,815551.8,1287466.9,915613.8,648548.7,};
 8017b96:	44ea      	add	sl, sp
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017b98:	9600      	str	r6, [sp, #0]
 8017b9a:	f8cd 9018 	str.w	r9, [sp, #24]
 8017b9e:	e9cd c201 	strd	ip, r2, [sp, #4]
 8017ba2:	e9cd 6607 	strd	r6, r6, [sp, #28]
const uint16_t begin0[] = {0, 0, 0, 0};
 8017ba6:	f8cc 8004 	str.w	r8, [ip, #4]
 8017baa:	f245 1ce0 	movw	ip, #20960	; 0x51e0
const uint16_t end0[] = {1, 24, 8, 8};
 8017bae:	f8c2 e004 	str.w	lr, [r2, #4]
 8017bb2:	f245 12e0 	movw	r2, #20960	; 0x51e0
const uint16_t begin0[] = {0, 0, 0, 0};
 8017bb6:	44ec      	add	ip, sp
const uint16_t end0[] = {1, 24, 8, 8};
 8017bb8:	446a      	add	r2, sp
const uint16_t begin0[] = {0, 0, 0, 0};
 8017bba:	f84c 8001 	str.w	r8, [ip, r1]
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017bbe:	4639      	mov	r1, r7
const uint16_t end0[] = {1, 24, 8, 8};
 8017bc0:	f8df c180 	ldr.w	ip, [pc, #384]	; 8017d44 <invoke+0x2674>
 8017bc4:	f842 c003 	str.w	ip, [r2, r3]
const uint16_t strides0[] = {1};
 8017bc8:	f245 1ce0 	movw	ip, #20960	; 0x51e0
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017bcc:	4633      	mov	r3, r6
 8017bce:	2230      	movs	r2, #48	; 0x30
const uint16_t strides0[] = {1};
 8017bd0:	44ec      	add	ip, sp
 8017bd2:	f82c 7000 	strh.w	r7, [ip, r0]
strided_slice_4Dto4D((float*)&buffer0[98816],1,48,8,8,begin0,end0,strides0,(float*)&buffer0[16640],1,24,8,8);
 8017bd6:	4846      	ldr	r0, [pc, #280]	; (8017cf0 <invoke+0x2620>)
 8017bd8:	f00a f984 	bl	8021ee4 <strided_slice_4Dto4D>
const float v11_conv_0_weight_QAS[240] = {670546.0,719452.8,127824.73,1011173.6,739198.1,564956.4,763084.2,646930.75,737765.94,654952.06,1663824.4,475836.38,1135594.0,512194.9,1913605.2,553366.06,522989.47,471181.28,1363752.8,2166717.8,704944.2,363601.1,799541.56,635826.94,836904.0,672426.6,1410417.8,787120.8,1555907.4,1011391.1,192087.9,577412.06,974527.6,854086.44,1077060.4,1520763.4,1146890.6,799515.06,916312.5,507887.53,2858307.5,743131.9,772882.94,1309819.2,588657.44,1352049.9,1011790.5,575116.75,528508.56,1794118.4,841661.06,612816.75,488812.84,329850.2,1134360.0,6628174.0,504538.7,1227237.9,1131250.9,387406.12,595039.0,878963.94,905889.8,702404.3,1194777.6,1498632.2,553700.9,867717.94,575635.1,1033844.3,324033.44,679941.75,707650.7,3361929.0,939860.4,786873.25,183564.7,376061.94,528033.4,826796.06,569794.7,562013.44,886537.94,759010.9,454988.1,455522.97,306553.56,1254894.5,749972.2,723776.44,208840.78,1102561.2,718726.9,538078.8,345087.2,880891.7,1174822.0,715301.3,632997.0,1454821.9,303935.44,978163.5,1097696.6,1043131.56,719773.56,418378.0,578166.2,878393.6,1068700.5,1236639.6,1078106.2,324467.0,466249.2,907203.0,344854.44,958062.25,425739.53,1090337.9,257709.8,2201009.8,1563947.8,483597.34,1448102.4,589191.56,1686312.6,1211146.5,398712.06,446928.97,1040328.25,641976.94,1116574.9,647296.3,1094843.2,881877.94,1101322.4,1387163.8,1137354.1,543113.3,598687.6,421107.44,818063.3,1191477.5,902581.56,569061.4,784804.25,894633.44,1334181.1,186390.89,552307.44,388428.53,466678.06,581128.4,830104.6,1606090.1,790633.6,539193.25,559524.44,407161.47,1687372.0,2296009.0,568473.94,651479.4,755093.94,1327554.4,856835.8,673669.5,678960.0,557212.7,702476.4,1132631.0,391269.75,700960.6,1236207.8,841877.2,672764.5,888816.2,508712.5,592920.44,370699.66,528422.4,1023239.4,613971.06,661448.6,753777.9,769512.06,373061.97,447001.66,670894.75,973682.8,960525.2,844794.25,752535.56,795386.56,836710.44,865925.25,956729.94,456990.38,4230802.0,1977518.0,1021548.2,1714930.2,361817.28,759470.7,924367.44,1152285.9,1613955.8,986498.7,1507327.5,771859.8,674747.2,658331.4,634782.5,808671.2,1380122.1,687447.0,1345868.2,262485.9,706994.56,1655709.5,779210.94,674369.5,590769.1,2215136.5,329228.1,915272.25,1147485.9,640055.5,761777.9,1233912.0,1185963.1,731156.44,4692042.5,338976.75,410744.97,1522060.9,347187.2,815551.8,1287466.9,915613.8,648548.7,};
 8017bdc:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8017be0:	4951      	ldr	r1, [pc, #324]	; (8017d28 <invoke+0x2658>)
 8017be2:	4650      	mov	r0, sl
 8017be4:	f011 f96f 	bl	8028ec6 <memcpy>
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[16640],8,8,24,weight_fp57,NULL,v11_conv_0_weight,1,1,5760,-FLT_MAX,FLT_MAX,(float*)sbuf,1,24, v11_conv_0_weight_QAS, lr);
 8017be8:	4a3d      	ldr	r2, [pc, #244]	; (8017ce0 <invoke+0x2610>)
 8017bea:	4b50      	ldr	r3, [pc, #320]	; (8017d2c <invoke+0x265c>)
 8017bec:	f44f 50b4 	mov.w	r0, #5760	; 0x1680
 8017bf0:	6812      	ldr	r2, [r2, #0]
 8017bf2:	4631      	mov	r1, r6
 8017bf4:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8017d30 <invoke+0x2660>
 8017bf8:	9202      	str	r2, [sp, #8]
 8017bfa:	4632      	mov	r2, r6
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	eddf 0a39 	vldr	s1, [pc, #228]	; 8017ce4 <invoke+0x2614>
 8017c02:	9300      	str	r3, [sp, #0]
 8017c04:	464b      	mov	r3, r9
 8017c06:	9707      	str	r7, [sp, #28]
 8017c08:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8017ce8 <invoke+0x2618>
 8017c0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017c10:	f8cd 9020 	str.w	r9, [sp, #32]
 8017c14:	f8cd 8004 	str.w	r8, [sp, #4]
 8017c18:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8017c1c:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8017c20:	483c      	ldr	r0, [pc, #240]	; (8017d14 <invoke+0x2644>)
 8017c22:	f002 fafd 	bl	801a220 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>
/* layer 148:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[86528],8,8,48,(q7_t*)v10_conv_2_weight,NULL,(float*)&buffer0[16640],8,8,192,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017c26:	4b43      	ldr	r3, [pc, #268]	; (8017d34 <invoke+0x2664>)
 8017c28:	20c0      	movs	r0, #192	; 0xc0
 8017c2a:	9707      	str	r7, [sp, #28]
 8017c2c:	681f      	ldr	r7, [r3, #0]
 8017c2e:	4632      	mov	r2, r6
 8017c30:	4631      	mov	r1, r6
 8017c32:	2330      	movs	r3, #48	; 0x30
 8017c34:	9604      	str	r6, [sp, #16]
 8017c36:	9603      	str	r6, [sp, #12]
 8017c38:	9502      	str	r5, [sp, #8]
 8017c3a:	9005      	str	r0, [sp, #20]
 8017c3c:	eddf 0a29 	vldr	s1, [pc, #164]	; 8017ce4 <invoke+0x2614>
 8017c40:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8017ce8 <invoke+0x2618>
 8017c44:	f8cd 8004 	str.w	r8, [sp, #4]
 8017c48:	9406      	str	r4, [sp, #24]
 8017c4a:	9700      	str	r7, [sp, #0]
 8017c4c:	482c      	ldr	r0, [pc, #176]	; (8017d00 <invoke+0x2630>)
 8017c4e:	f007 f9b7 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 149:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[15104],12288,(float*)&buffer0[16640]);
 8017c52:	4a30      	ldr	r2, [pc, #192]	; (8017d14 <invoke+0x2644>)
 8017c54:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8017c58:	f5a2 60c0 	sub.w	r0, r2, #1536	; 0x600
/* layer 150:MUL */
fptr = &buffer0[16640];
fptr2 = scales28;
 8017c5c:	4615      	mov	r5, r2
where_zeros_inplace_bit((bool*)&buffer0[15104],12288,(float*)&buffer0[16640]);
 8017c5e:	f00b fd69 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales28;
 8017c62:	4a35      	ldr	r2, [pc, #212]	; (8017d38 <invoke+0x2668>)
 8017c64:	f505 4640 	add.w	r6, r5, #49152	; 0xc000
 8017c68:	4b22      	ldr	r3, [pc, #136]	; (8017cf4 <invoke+0x2624>)
 8017c6a:	4628      	mov	r0, r5
 8017c6c:	f502 7140 	add.w	r1, r2, #768	; 0x300
 8017c70:	9611      	str	r6, [sp, #68]	; 0x44
 8017c72:	601a      	str	r2, [r3, #0]
 8017c74:	4602      	mov	r2, r0
 8017c76:	4b30      	ldr	r3, [pc, #192]	; (8017d38 <invoke+0x2668>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 192; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017c78:	ecb3 7a01 	vldmia	r3!, {s14}
 8017c7c:	edd2 7a00 	vldr	s15, [r2]
 8017c80:	4299      	cmp	r1, r3
 8017c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017c86:	ece2 7a01 	vstmia	r2!, {s15}
 8017c8a:	d1f5      	bne.n	8017c78 <invoke+0x25a8>
 8017c8c:	f500 7040 	add.w	r0, r0, #768	; 0x300
for(int hw = 0; hw < 64; hw++){
 8017c90:	42b0      	cmp	r0, r6
 8017c92:	d1ef      	bne.n	8017c74 <invoke+0x25a4>
}
/* layer 151:SUM */
sum_4D_exclude((float*)&buffer0[16640],1,8,8,192,3,(float*)&buffer0[15104]);
 8017c94:	2308      	movs	r3, #8
 8017c96:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017c98:	2203      	movs	r2, #3
 8017c9a:	20c0      	movs	r0, #192	; 0xc0
 8017c9c:	4927      	ldr	r1, [pc, #156]	; (8017d3c <invoke+0x266c>)
 8017c9e:	9201      	str	r2, [sp, #4]
 8017ca0:	461a      	mov	r2, r3
 8017ca2:	9102      	str	r1, [sp, #8]
 8017ca4:	2101      	movs	r1, #1
 8017ca6:	9000      	str	r0, [sp, #0]
 8017ca8:	f8cb 6000 	str.w	r6, [fp]
 8017cac:	f50d 569d 	add.w	r6, sp, #5024	; 0x13a0
 8017cb0:	4818      	ldr	r0, [pc, #96]	; (8017d14 <invoke+0x2644>)
 8017cb2:	f00a fa6d 	bl	8022190 <sum_4D_exclude>
/* layer 152:BIAS_UPDATE */
const float v10_conv_1_bias_QAS[192] = {91498020.0,21703900.0,74548910.0,20367418.0,50317540.0,26126268.0,31789870.0,77352670.0,330807140.0,43109310.0,150408320.0,100646870.0,15095056.0,16704816.0,101405064.0,40953732.0,50770456.0,849581600.0,138668300.0,95600460.0,58561360.0,34244264.0,76390696.0,74299656.0,26127668.0,75969860.0,37016710.0,57564930.0,38139796.0,59333450.0,41273180.0,539932400.0,27564568.0,44924940.0,141521250.0,525426720.0,24957830.0,44320736.0,52234388.0,128723410.0,54619016.0,95084080.0,59555890.0,10127654.0,49914844.0,35753790.0,25564582.0,7.926462e+20,71134616.0,219250260.0,20063882.0,23685664.0,19783332.0,41921616.0,147659570.0,325859620.0,26529076.0,93842320.0,31472068.0,319382270.0,19002686.0,13319471.0,39225170.0,100210230.0,24215364.0,41917136.0,95148664.0,94530310.0,488316830.0,281061600.0,35070600.0,286875360.0,7.926462e+20,102254584.0,26417842.0,139680050.0,113340260.0,258821170.0,43446600.0,110207010.0,228261840.0,97286390.0,33967580.0,3.3137846e+18,96405100.0,225125940.0,23332618.0,37959870.0,17261586.0,414961470.0,46180284.0,64573024.0,34286850.0,96981620.0,674039500.0,18024324.0,98657020.0,76273630.0,99349336.0,26751442.0,35259310.0,30420076.0,43048730.0,190223440.0,61141180.0,22132840.0,7.926462e+20,14033916.0,54909504.0,1.2152945e+19,60782644.0,153244180.0,214885660.0,95203530.0,28061244.0,62447444.0,64206444.0,175626880.0,81514450.0,45761340.0,68010504.0,85956600.0,48007340.0,87339700.0,20565010.0,87345360.0,384014600.0,41866216.0,24324360.0,310756640.0,35422428.0,190334430.0,14539075.0,279499500.0,183014900.0,91942710.0,30690068.0,50796080.0,45597960.0,62931570.0,80521384.0,72409110.0,160230800.0,7.926462e+20,16303242.0,80481736.0,186633810.0,114596830.0,106177800.0,345116030.0,54160856.0,72475890.0,94240830.0,58295276.0,150437180.0,17037896.0,20385790.0,42254908.0,24926226.0,53126660.0,64769964.0,75218770.0,83778950.0,110935520.0,97568930.0,15854546.0,66931852.0,22687206.0,1226601700.0,52244000.0,14805831.0,591243970.0,98504376.0,90397460.0,34641444.0,42985644.0,126322130.0,31645788.0,465370240.0,7.926462e+20,55217080.0,63158904.0,236222200.0,29223000.0,66637012.0,68148130.0,44197010.0,70664260.0,30163060.0,146203980.0,15988247.0,73750160.0,};
 8017cb6:	4922      	ldr	r1, [pc, #136]	; (8017d40 <invoke+0x2670>)
 8017cb8:	f50d 509d 	add.w	r0, sp, #5024	; 0x13a0
 8017cbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8017cc0:	f011 f901 	bl	8028ec6 <memcpy>
 8017cc4:	e040      	b.n	8017d48 <invoke+0x2678>
 8017cc6:	bf00      	nop
 8017cc8:	36cc46dc 	.word	0x36cc46dc
 8017ccc:	40323297 	.word	0x40323297
 8017cd0:	0802fb88 	.word	0x0802fb88
 8017cd4:	20004df8 	.word	0x20004df8
 8017cd8:	39d1b717 	.word	0x39d1b717
 8017cdc:	20004e00 	.word	0x20004e00
 8017ce0:	20004dfc 	.word	0x20004dfc
 8017ce4:	7f7fffff 	.word	0x7f7fffff
 8017ce8:	ff7fffff 	.word	0xff7fffff
 8017cec:	20011dc0 	.word	0x20011dc0
 8017cf0:	20025140 	.word	0x20025140
 8017cf4:	2003cfcc 	.word	0x2003cfcc
 8017cf8:	3d1c5f3b 	.word	0x3d1c5f3b
 8017cfc:	2003cfd8 	.word	0x2003cfd8
 8017d00:	20022140 	.word	0x20022140
 8017d04:	20011c40 	.word	0x20011c40
 8017d08:	08044080 	.word	0x08044080
 8017d0c:	0802ff48 	.word	0x0802ff48
 8017d10:	20004df0 	.word	0x20004df0
 8017d14:	20011040 	.word	0x20011040
 8017d18:	2003cfdc 	.word	0x2003cfdc
 8017d1c:	ffffaec0 	.word	0xffffaec0
 8017d20:	ffffaec8 	.word	0xffffaec8
 8017d24:	ffffaeb4 	.word	0xffffaeb4
 8017d28:	08030008 	.word	0x08030008
 8017d2c:	20008410 	.word	0x20008410
 8017d30:	3a51b717 	.word	0x3a51b717
 8017d34:	20004df4 	.word	0x20004df4
 8017d38:	08043d80 	.word	0x08043d80
 8017d3c:	20010a40 	.word	0x20010a40
 8017d40:	080303c8 	.word	0x080303c8
 8017d44:	00180001 	.word	0x00180001
fptr = (float*)&buffer0[15104];//gradients
for(int i = 0; i < 192; i++) v10_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_1_bias_QAS[i]);
 8017d48:	4bc9      	ldr	r3, [pc, #804]	; (8018070 <invoke+0x29a0>)
 8017d4a:	48ca      	ldr	r0, [pc, #808]	; (8018074 <invoke+0x29a4>)
 8017d4c:	6819      	ldr	r1, [r3, #0]
 8017d4e:	f500 7740 	add.w	r7, r0, #768	; 0x300
 8017d52:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8018078 <invoke+0x29a8>
 8017d56:	3904      	subs	r1, #4
fptr = (float*)&buffer0[15104];//gradients
 8017d58:	f8cb 0000 	str.w	r0, [fp]
for(int i = 0; i < 192; i++) v10_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_1_bias_QAS[i]);
 8017d5c:	ecb0 7a01 	vldmia	r0!, {s14}
 8017d60:	ecf6 7a01 	vldmia	r6!, {s15}
 8017d64:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017d68:	4287      	cmp	r7, r0
 8017d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d76:	ee17 3a90 	vmov	r3, s15
 8017d7a:	eba2 0303 	sub.w	r3, r2, r3
 8017d7e:	600b      	str	r3, [r1, #0]
 8017d80:	d1ec      	bne.n	8017d5c <invoke+0x268c>
/* layer 153:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight((float*)&buffer0[16640],8,8,192,v10_conv_1_weight,NULL,(float*)&buffer0[16640],8,8,192,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 8017d82:	4bbe      	ldr	r3, [pc, #760]	; (801807c <invoke+0x29ac>)
 8017d84:	2008      	movs	r0, #8
 8017d86:	2200      	movs	r2, #0
 8017d88:	2101      	movs	r1, #1
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	26c0      	movs	r6, #192	; 0xc0
 8017d8e:	9502      	str	r5, [sp, #8]
 8017d90:	9300      	str	r3, [sp, #0]
 8017d92:	4633      	mov	r3, r6
 8017d94:	9208      	str	r2, [sp, #32]
 8017d96:	9201      	str	r2, [sp, #4]
 8017d98:	4602      	mov	r2, r0
 8017d9a:	9107      	str	r1, [sp, #28]
 8017d9c:	4601      	mov	r1, r0
 8017d9e:	9003      	str	r0, [sp, #12]
 8017da0:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8018080 <invoke+0x29b0>
 8017da4:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8018084 <invoke+0x29b4>
 8017da8:	9406      	str	r4, [sp, #24]
 8017daa:	e9cd 0604 	strd	r0, r6, [sp, #16]
 8017dae:	48b6      	ldr	r0, [pc, #728]	; (8018088 <invoke+0x29b8>)
 8017db0:	f00a faea 	bl	8022388 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>
/* layer 154:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[13568],12288,(float*)&buffer0[16640]);
 8017db4:	4ab4      	ldr	r2, [pc, #720]	; (8018088 <invoke+0x29b8>)
 8017db6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8017dba:	f5a2 6040 	sub.w	r0, r2, #3072	; 0xc00
 8017dbe:	f00b fcb9 	bl	8023734 <where_zeros_inplace_bit>
/* layer 155:MUL */
fptr = &buffer0[16640];
fptr2 = scales27;
 8017dc2:	4ab2      	ldr	r2, [pc, #712]	; (801808c <invoke+0x29bc>)
 8017dc4:	4bb2      	ldr	r3, [pc, #712]	; (8018090 <invoke+0x29c0>)
 8017dc6:	48b0      	ldr	r0, [pc, #704]	; (8018088 <invoke+0x29b8>)
 8017dc8:	f502 7140 	add.w	r1, r2, #768	; 0x300
 8017dcc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017dce:	601a      	str	r2, [r3, #0]
 8017dd0:	4602      	mov	r2, r0
 8017dd2:	4bae      	ldr	r3, [pc, #696]	; (801808c <invoke+0x29bc>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 192; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017dd4:	ecb3 7a01 	vldmia	r3!, {s14}
 8017dd8:	edd2 7a00 	vldr	s15, [r2]
 8017ddc:	4299      	cmp	r1, r3
 8017dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017de2:	ece2 7a01 	vstmia	r2!, {s15}
 8017de6:	d1f5      	bne.n	8017dd4 <invoke+0x2704>
 8017de8:	f500 7040 	add.w	r0, r0, #768	; 0x300
for(int hw = 0; hw < 64; hw++){
 8017dec:	42a8      	cmp	r0, r5
 8017dee:	d1ef      	bne.n	8017dd0 <invoke+0x2700>
}
/* layer 156:SUM */
sum_4D_exclude((float*)&buffer0[16640],1,8,8,192,3,(float*)&buffer0[13568]);
 8017df0:	4fa8      	ldr	r7, [pc, #672]	; (8018094 <invoke+0x29c4>)
 8017df2:	2308      	movs	r3, #8
 8017df4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017df6:	2203      	movs	r2, #3
 8017df8:	20c0      	movs	r0, #192	; 0xc0
 8017dfa:	9702      	str	r7, [sp, #8]
 8017dfc:	9201      	str	r2, [sp, #4]
 8017dfe:	2101      	movs	r1, #1
 8017e00:	461a      	mov	r2, r3
 8017e02:	9000      	str	r0, [sp, #0]
 8017e04:	f8cb 5000 	str.w	r5, [fp]
 8017e08:	f507 6040 	add.w	r0, r7, #3072	; 0xc00
 8017e0c:	f00a f9c0 	bl	8022190 <sum_4D_exclude>
/* layer 157:BIAS_UPDATE */
const float v10_conv_0_bias_QAS[192] = {1475223700.0,1030703360.0,816994900.0,512779230.0,2347524000.0,660836200.0,531277100.0,1150393100.0,1093105800.0,930657660.0,1174644100.0,1569000400.0,614608400.0,238872670.0,687180860.0,1450896600.0,1165788900.0,631683600.0,331118600.0,2059191600.0,576453700.0,1783982700.0,1080919000.0,1134233300.0,1000822700.0,706217660.0,2038128300.0,877797100.0,420611420.0,540037000.0,1291300400.0,1069388500.0,3233160200.0,1426606800.0,1734019000.0,793607800.0,1705975700.0,820450200.0,1467972600.0,1563580800.0,1639382700.0,1207545900.0,527852260.0,1098293100.0,1192724600.0,427076130.0,1026932500.0,4.2190073e+19,2782907000.0,379147230.0,747813440.0,2024572700.0,732507460.0,3235556400.0,1616138000.0,647234370.0,501706100.0,1485312600.0,93479270.0,855545300.0,662285060.0,689683200.0,1878082300.0,391809820.0,1131090600.0,1391837400.0,1121582500.0,1456275000.0,1049894140.0,898902800.0,647960100.0,1042980860.0,4.2190073e+19,1154471300.0,944551500.0,1879237600.0,1525937700.0,1369606500.0,723569400.0,1031477060.0,1823601200.0,334616930.0,508839520.0,1.0062653e+19,3225643000.0,1678289000.0,1146084500.0,1116367900.0,1023416960.0,240773890.0,851186600.0,768675300.0,2167447800.0,319047840.0,1249289700.0,1149507500.0,761708900.0,713539840.0,400350180.0,2352317400.0,1594127900.0,4629730000.0,1047818050.0,1866290800.0,1265541600.0,773695740.0,4.2190073e+19,2732557800.0,1945134000.0,9.496834e+18,1106979300.0,171058960.0,950375230.0,1286682500.0,727137600.0,1664550100.0,1629387900.0,1219778400.0,494477500.0,854450750.0,930129700.0,981427000.0,989852160.0,1155484500.0,453677760.0,651104640.0,673504200.0,1487471100.0,1002485300.0,1187815000.0,1635459100.0,1182514200.0,854215230.0,968733600.0,679369500.0,3393553000.0,1513275100.0,2469444900.0,983279400.0,183170540.0,638984400.0,1627245000.0,149853440.0,4.2190073e+19,780821600.0,1578438500.0,1005550300.0,387958200.0,818162500.0,616344400.0,685506200.0,519065180.0,682904450.0,1482624500.0,1451357200.0,891735040.0,472708900.0,1093981600.0,1768975600.0,1353452900.0,2043813400.0,1133310100.0,903940000.0,1340711300.0,77990610.0,464214430.0,2339695000.0,1046356900.0,830976640.0,822072200.0,869157760.0,722591300.0,661153200.0,636663740.0,1315949400.0,1828656500.0,565251140.0,628219800.0,1262477200.0,4.2190073e+19,993717060.0,2325293000.0,1867443300.0,155855520.0,1347042400.0,4613281000.0,1599269500.0,758371700.0,1108067000.0,1495697800.0,671200600.0,378001060.0,};
 8017e10:	49a1      	ldr	r1, [pc, #644]	; (8018098 <invoke+0x29c8>)
 8017e12:	f50d 50b5 	add.w	r0, sp, #5792	; 0x16a0
 8017e16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8017e1a:	f011 f854 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[13568];//gradients
for(int i = 0; i < 192; i++) v10_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_0_bias_QAS[i]);
 8017e1e:	4b9f      	ldr	r3, [pc, #636]	; (801809c <invoke+0x29cc>)
 8017e20:	4638      	mov	r0, r7
 8017e22:	f50d 55b5 	add.w	r5, sp, #5792	; 0x16a0
 8017e26:	6819      	ldr	r1, [r3, #0]
 8017e28:	f507 7640 	add.w	r6, r7, #768	; 0x300
 8017e2c:	eddf 6a92 	vldr	s13, [pc, #584]	; 8018078 <invoke+0x29a8>
 8017e30:	3904      	subs	r1, #4
fptr = (float*)&buffer0[13568];//gradients
 8017e32:	f8cb 7000 	str.w	r7, [fp]
for(int i = 0; i < 192; i++) v10_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v10_conv_0_bias_QAS[i]);
 8017e36:	ecb0 7a01 	vldmia	r0!, {s14}
 8017e3a:	ecf5 7a01 	vldmia	r5!, {s15}
 8017e3e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017e42:	4286      	cmp	r6, r0
 8017e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e50:	ee17 3a90 	vmov	r3, s15
 8017e54:	eba2 0303 	sub.w	r3, r2, r3
 8017e58:	600b      	str	r3, [r1, #0]
 8017e5a:	d1ec      	bne.n	8017e36 <invoke+0x2766>
/* layer 158:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[16640],8,8,192,(q7_t*)v10_conv_0_weight,(q7_t*)v10_conv_0_weightFlash,24,NULL,(float*)&buffer0[65792],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017e5c:	4a90      	ldr	r2, [pc, #576]	; (80180a0 <invoke+0x29d0>)
 8017e5e:	2008      	movs	r0, #8
 8017e60:	4b90      	ldr	r3, [pc, #576]	; (80180a4 <invoke+0x29d4>)
 8017e62:	2601      	movs	r6, #1
 8017e64:	6812      	ldr	r2, [r2, #0]
 8017e66:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	f04f 0c18 	mov.w	ip, #24
 8017e70:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80180bc <invoke+0x29ec>
 8017e74:	4615      	mov	r5, r2
 8017e76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017e78:	2700      	movs	r7, #0
 8017e7a:	4602      	mov	r2, r0
 8017e7c:	9301      	str	r3, [sp, #4]
 8017e7e:	9104      	str	r1, [sp, #16]
 8017e80:	23c0      	movs	r3, #192	; 0xc0
 8017e82:	4601      	mov	r1, r0
 8017e84:	9500      	str	r5, [sp, #0]
 8017e86:	9609      	str	r6, [sp, #36]	; 0x24
 8017e88:	f508 5940 	add.w	r9, r8, #12288	; 0x3000
 8017e8c:	9005      	str	r0, [sp, #20]
/* layer 159:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[10496],3072,(float*)&buffer0[65792]);
 8017e8e:	4645      	mov	r5, r8
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[16640],8,8,192,(q7_t*)v10_conv_0_weight,(q7_t*)v10_conv_0_weightFlash,24,NULL,(float*)&buffer0[65792],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017e90:	9408      	str	r4, [sp, #32]
where_zeros_inplace_bit((bool*)&buffer0[10496],3072,(float*)&buffer0[65792]);
 8017e92:	46ca      	mov	sl, r9
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[16640],8,8,192,(q7_t*)v10_conv_0_weight,(q7_t*)v10_conv_0_weightFlash,24,NULL,(float*)&buffer0[65792],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017e94:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8018080 <invoke+0x29b0>
 8017e98:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8018084 <invoke+0x29b4>
where_zeros_inplace_bit((bool*)&buffer0[10496],3072,(float*)&buffer0[65792]);
 8017e9c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8017ea0:	4e81      	ldr	r6, [pc, #516]	; (80180a8 <invoke+0x29d8>)
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol((float*)&buffer0[16640],8,8,192,(q7_t*)v10_conv_0_weight,(q7_t*)v10_conv_0_weightFlash,24,NULL,(float*)&buffer0[65792],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8017ea2:	e9cd 0e06 	strd	r0, lr, [sp, #24]
 8017ea6:	e9cd c702 	strd	ip, r7, [sp, #8]
 8017eaa:	f5a8 4040 	sub.w	r0, r8, #49152	; 0xc000
 8017eae:	f007 fe3d 	bl	801fb2c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol>
 8017eb2:	4b7e      	ldr	r3, [pc, #504]	; (80180ac <invoke+0x29dc>)
where_zeros_inplace_bit((bool*)&buffer0[10496],3072,(float*)&buffer0[65792]);
 8017eb4:	4642      	mov	r2, r8
 8017eb6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017eba:	f5a8 4058 	sub.w	r0, r8, #55296	; 0xd800
 8017ebe:	441e      	add	r6, r3
 8017ec0:	f00b fc38 	bl	8023734 <where_zeros_inplace_bit>
/* layer 160:DIV */
fptr3 = (float*)&buffer0[78080]; fptr2 = (float*)&buffer0[65792];
for(int i = 0; i < 3072; i++) *fptr3++ = *fptr2++ / 0.03910466656088829;
 8017ec4:	f855 0b04 	ldr.w	r0, [r5], #4
 8017ec8:	f7ef f8d8 	bl	800707c <__aeabi_f2d>
 8017ecc:	a366      	add	r3, pc, #408	; (adr r3, 8018068 <invoke+0x2998>)
 8017ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed2:	f7ef f92b 	bl	800712c <__aeabi_dmul>
 8017ed6:	f7ef fc01 	bl	80076dc <__aeabi_d2f>
 8017eda:	42ae      	cmp	r6, r5
 8017edc:	f84a 0b04 	str.w	r0, [sl], #4
 8017ee0:	d1f0      	bne.n	8017ec4 <invoke+0x27f4>
 8017ee2:	4a73      	ldr	r2, [pc, #460]	; (80180b0 <invoke+0x29e0>)
/* layer 161:MUL */
fptr = (float*)&buffer0[78080];fptr3 = (float*)&buffer0[65792];for(int i = 0; i < 3072; i++) fptr3[i] = 0.027072276920080185 * fptr[i];
 8017ee4:	464b      	mov	r3, r9
 8017ee6:	496a      	ldr	r1, [pc, #424]	; (8018090 <invoke+0x29c0>)
 8017ee8:	f8cb 2000 	str.w	r2, [fp]
 8017eec:	600a      	str	r2, [r1, #0]
 8017eee:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80180b4 <invoke+0x29e4>
 8017ef2:	4a71      	ldr	r2, [pc, #452]	; (80180b8 <invoke+0x29e8>)
 8017ef4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017ef6:	6011      	str	r1, [r2, #0]
 8017ef8:	ecf3 7a01 	vldmia	r3!, {s15}
 8017efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017f00:	ece8 7a01 	vstmia	r8!, {s15}
 8017f04:	4545      	cmp	r5, r8
 8017f06:	d1f7      	bne.n	8017ef8 <invoke+0x2828>
/* layer 162:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[10112],3072,(float*)&buffer0[65792]);
 8017f08:	4a6c      	ldr	r2, [pc, #432]	; (80180bc <invoke+0x29ec>)
 8017f0a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017f0e:	486c      	ldr	r0, [pc, #432]	; (80180c0 <invoke+0x29f0>)
 8017f10:	f00b fc10 	bl	8023734 <where_zeros_inplace_bit>
/* layer 163:MUL */
fptr = &buffer0[65792];
fptr2 = scales26;
 8017f14:	4a6b      	ldr	r2, [pc, #428]	; (80180c4 <invoke+0x29f4>)
 8017f16:	4b5e      	ldr	r3, [pc, #376]	; (8018090 <invoke+0x29c0>)
 8017f18:	4868      	ldr	r0, [pc, #416]	; (80180bc <invoke+0x29ec>)
 8017f1a:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
 8017f1e:	601a      	str	r2, [r3, #0]
 8017f20:	4602      	mov	r2, r0
 8017f22:	4b68      	ldr	r3, [pc, #416]	; (80180c4 <invoke+0x29f4>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8017f24:	ecb3 7a01 	vldmia	r3!, {s14}
 8017f28:	edd2 7a00 	vldr	s15, [r2]
 8017f2c:	4299      	cmp	r1, r3
 8017f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f32:	ece2 7a01 	vstmia	r2!, {s15}
 8017f36:	d1f5      	bne.n	8017f24 <invoke+0x2854>
 8017f38:	30c0      	adds	r0, #192	; 0xc0
for(int hw = 0; hw < 64; hw++){
 8017f3a:	4b5d      	ldr	r3, [pc, #372]	; (80180b0 <invoke+0x29e0>)
 8017f3c:	4298      	cmp	r0, r3
 8017f3e:	d1ef      	bne.n	8017f20 <invoke+0x2850>
}
/* layer 164:SUM */
sum_4D_exclude((float*)&buffer0[65792],1,8,8,48,3,(float*)&buffer0[10112]);
 8017f40:	2030      	movs	r0, #48	; 0x30
 8017f42:	2308      	movs	r3, #8
 8017f44:	2203      	movs	r2, #3
 8017f46:	495e      	ldr	r1, [pc, #376]	; (80180c0 <invoke+0x29f0>)
 8017f48:	9000      	str	r0, [sp, #0]
 8017f4a:	485c      	ldr	r0, [pc, #368]	; (80180bc <invoke+0x29ec>)
 8017f4c:	9102      	str	r1, [sp, #8]
 8017f4e:	2101      	movs	r1, #1
 8017f50:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 8017f54:	9201      	str	r2, [sp, #4]
 8017f56:	461a      	mov	r2, r3
 8017f58:	f8cb 5000 	str.w	r5, [fp]
 8017f5c:	ad78      	add	r5, sp, #480	; 0x1e0
 8017f5e:	f00a f917 	bl	8022190 <sum_4D_exclude>
/* layer 165:BIAS_UPDATE */
const float v9_conv_2_bias_QAS[48] = {467422080.0,906110300.0,82031630.0,386175900.0,249515620.0,371799900.0,425080700.0,675390660.0,224327490.0,402949300.0,109860504.0,97970264.0,85090110.0,262435360.0,86668800.0,151615570.0,437346000.0,219043950.0,263517820.0,68615010.0,533205400.0,122905176.0,102954950.0,404755840.0,390545180.0,400670660.0,408666100.0,411500480.0,175263620.0,26112552.0,305699200.0,187931660.0,501943400.0,65524750.0,89183896.0,138039250.0,543368060.0,315859260.0,501618660.0,135876560.0,551759040.0,556720200.0,591731840.0,105087570.0,467634000.0,163005580.0,555435100.0,121024410.0,};
 8017f62:	4959      	ldr	r1, [pc, #356]	; (80180c8 <invoke+0x29f8>)
 8017f64:	a878      	add	r0, sp, #480	; 0x1e0
 8017f66:	22c0      	movs	r2, #192	; 0xc0
 8017f68:	f010 ffad 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[10112];//gradients
for(int i = 0; i < 48; i++) v9_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_2_bias_QAS[i]);
 8017f6c:	4b57      	ldr	r3, [pc, #348]	; (80180cc <invoke+0x29fc>)
 8017f6e:	4854      	ldr	r0, [pc, #336]	; (80180c0 <invoke+0x29f0>)
 8017f70:	6819      	ldr	r1, [r3, #0]
 8017f72:	f100 06c0 	add.w	r6, r0, #192	; 0xc0
 8017f76:	eddf 6a40 	vldr	s13, [pc, #256]	; 8018078 <invoke+0x29a8>
 8017f7a:	3904      	subs	r1, #4
 8017f7c:	ecb0 7a01 	vldmia	r0!, {s14}
 8017f80:	ecf5 7a01 	vldmia	r5!, {s15}
 8017f84:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017f88:	4286      	cmp	r6, r0
 8017f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f96:	ee17 3a90 	vmov	r3, s15
 8017f9a:	eba2 0303 	sub.w	r3, r2, r3
 8017f9e:	600b      	str	r3, [r1, #0]
 8017fa0:	d1ec      	bne.n	8017f7c <invoke+0x28ac>
/* layer 166:CAST */
fptr = (float*)&buffer0[78080];
int8ptr = (int8_t*)&buffer0[7040];
 8017fa2:	4d4b      	ldr	r5, [pc, #300]	; (80180d0 <invoke+0x2a00>)
fptr = (float*)&buffer0[78080];
 8017fa4:	4b42      	ldr	r3, [pc, #264]	; (80180b0 <invoke+0x29e0>)
int8ptr = (int8_t*)&buffer0[7040];
 8017fa6:	494b      	ldr	r1, [pc, #300]	; (80180d4 <invoke+0x2a04>)
 8017fa8:	f605 32ff 	addw	r2, r5, #3071	; 0xbff
fptr = (float*)&buffer0[78080];
 8017fac:	f8cb 3000 	str.w	r3, [fp]
 8017fb0:	1e6b      	subs	r3, r5, #1
int8ptr = (int8_t*)&buffer0[7040];
 8017fb2:	600d      	str	r5, [r1, #0]
for(int i = 0; i < 3072; i++) fptr[i] = (float)int8ptr[i];
 8017fb4:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 8017fb8:	ee07 1a90 	vmov	s15, r1
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fc2:	ece9 7a01 	vstmia	r9!, {s15}
 8017fc6:	d1f5      	bne.n	8017fb4 <invoke+0x28e4>
/* layer 167:STRIDED_SLICE */
const uint16_t begin1[] = {0, 0, 0, 0};
 8017fc8:	f245 12e0 	movw	r2, #20960	; 0x51e0
const uint16_t end1[] = {1, 24, 8, 8};
const uint16_t strides1[] = {1};
 8017fcc:	f245 1ee0 	movw	lr, #20960	; 0x51e0
const uint16_t begin1[] = {0, 0, 0, 0};
 8017fd0:	4941      	ldr	r1, [pc, #260]	; (80180d8 <invoke+0x2a08>)
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8017fd2:	2608      	movs	r6, #8
const uint16_t end1[] = {1, 24, 8, 8};
 8017fd4:	4b41      	ldr	r3, [pc, #260]	; (80180dc <invoke+0x2a0c>)
const uint16_t begin1[] = {0, 0, 0, 0};
 8017fd6:	446a      	add	r2, sp
const uint16_t strides1[] = {1};
 8017fd8:	4841      	ldr	r0, [pc, #260]	; (80180e0 <invoke+0x2a10>)
 8017fda:	44ee      	add	lr, sp
 8017fdc:	2701      	movs	r7, #1
const uint16_t begin1[] = {0, 0, 0, 0};
 8017fde:	eb02 0c01 	add.w	ip, r2, r1
 8017fe2:	f04f 0800 	mov.w	r8, #0
const uint16_t end1[] = {1, 24, 8, 8};
 8017fe6:	441a      	add	r2, r3
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8017fe8:	f04f 0918 	mov.w	r9, #24
const uint16_t strides1[] = {1};
 8017fec:	4486      	add	lr, r0
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8017fee:	9504      	str	r5, [sp, #16]
/* layer 168:GROUP_CONV */
const float v10_conv_0_weight_QAS[192] = {2255875.2,1576125.8,1249328.0,784129.2,3589775.5,1010534.2,812415.56,1759152.5,1671550.0,1423138.5,1796236.4,2399276.0,939843.6,365278.12,1050819.8,2218675.0,1782695.5,965954.6,506338.25,3148864.5,881498.6,2728021.8,1652914.4,1734441.2,1530433.0,1079930.4,3116655.0,1342305.5,643188.44,825810.94,1974624.0,1635282.0,4944067.5,2181531.2,2651618.2,1213565.1,2608735.5,1254611.9,2244787.0,2390988.5,2506902.8,1846548.9,807178.56,1679482.1,1823884.4,653074.1,1570359.5,6.4516005e+16,4255552.0,579782.44,1143537.6,3095926.0,1120132.0,4947732.0,2471357.5,989734.5,767196.4,2271302.8,142946.16,1308278.5,1012749.75,1054646.4,2871916.5,599145.7,1729635.5,2128362.8,1715095.8,2226899.2,1605471.9,1374579.6,990844.4,1594900.4,6.4516005e+16,1765388.9,1444384.5,2873683.2,2333425.8,2094367.8,1106464.2,1577309.0,2788605.0,511687.84,778104.7,1.5387559e+16,4932572.5,2566397.5,1752563.8,1707121.8,1564983.6,368185.4,1301613.4,1175439.1,3314407.0,487880.0,1910382.6,1757798.1,1164786.2,1091127.1,612205.44,3597104.8,2437700.2,7079667.5,1602297.1,2853885.2,1935234.8,1183116.1,6.4516005e+16,4178559.2,2974450.2,1.452232e+16,1692765.0,261579.1,1453290.1,1967562.6,1111920.5,2545388.2,2491619.0,1865254.4,756142.56,1306604.8,1422331.1,1500773.5,1513657.1,1766937.9,693752.75,995652.94,1029905.8,2274603.5,1532975.5,1816376.9,2500903.2,1808271.2,1306244.5,1481363.0,1038874.8,5189336.0,2314062.5,3776212.8,1503606.1,280099.8,977118.8,2488342.5,229152.12,6.4516005e+16,1194013.0,2413708.5,1537662.2,593255.94,1251113.6,942498.44,1048258.9,793741.5,1044280.3,2267192.2,2219379.0,1363619.0,722854.56,1672889.1,2705073.0,2069666.2,3125348.5,1733029.6,1382282.2,2050182.1,119261.28,709865.0,3577803.2,1600062.8,1270708.8,1257092.1,1329094.2,1104968.5,1011018.8,973570.3,2012316.8,2796335.8,864368.0,960657.8,1930548.4,6.4516005e+16,1519567.2,3555780.0,2855647.8,238330.36,2059863.2,7054513.5,2445563.0,1159683.0,1694428.2,2287183.5,1026383.1,578029.75,};
 8017ff0:	f50d 5acd 	add.w	sl, sp, #6560	; 0x19a0
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8017ff4:	f8cd e00c 	str.w	lr, [sp, #12]
const uint16_t end1[] = {1, 24, 8, 8};
 8017ff8:	f04f 1e08 	mov.w	lr, #524296	; 0x80008
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8017ffc:	9705      	str	r7, [sp, #20]
 8017ffe:	9600      	str	r6, [sp, #0]
 8018000:	f8cd 9018 	str.w	r9, [sp, #24]
 8018004:	e9cd c201 	strd	ip, r2, [sp, #4]
 8018008:	e9cd 6607 	strd	r6, r6, [sp, #28]
const uint16_t begin1[] = {0, 0, 0, 0};
 801800c:	f8cc 8004 	str.w	r8, [ip, #4]
 8018010:	f245 1ce0 	movw	ip, #20960	; 0x51e0
const uint16_t end1[] = {1, 24, 8, 8};
 8018014:	f8c2 e004 	str.w	lr, [r2, #4]
 8018018:	f245 12e0 	movw	r2, #20960	; 0x51e0
const uint16_t begin1[] = {0, 0, 0, 0};
 801801c:	44ec      	add	ip, sp
const uint16_t end1[] = {1, 24, 8, 8};
 801801e:	446a      	add	r2, sp
const uint16_t begin1[] = {0, 0, 0, 0};
 8018020:	f84c 8001 	str.w	r8, [ip, r1]
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8018024:	4639      	mov	r1, r7
const uint16_t end1[] = {1, 24, 8, 8};
 8018026:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80180f0 <invoke+0x2a20>
 801802a:	f842 c003 	str.w	ip, [r2, r3]
const uint16_t strides1[] = {1};
 801802e:	f245 1ce0 	movw	ip, #20960	; 0x51e0
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 8018032:	4633      	mov	r3, r6
 8018034:	2230      	movs	r2, #48	; 0x30
const uint16_t strides1[] = {1};
 8018036:	44ec      	add	ip, sp
 8018038:	f82c 7000 	strh.w	r7, [ip, r0]
strided_slice_4Dto4D((float*)&buffer0[78080],1,48,8,8,begin1,end1,strides1,(float*)&buffer0[7040],1,24,8,8);
 801803c:	481c      	ldr	r0, [pc, #112]	; (80180b0 <invoke+0x29e0>)
 801803e:	f009 ff51 	bl	8021ee4 <strided_slice_4Dto4D>
const float v10_conv_0_weight_QAS[192] = {2255875.2,1576125.8,1249328.0,784129.2,3589775.5,1010534.2,812415.56,1759152.5,1671550.0,1423138.5,1796236.4,2399276.0,939843.6,365278.12,1050819.8,2218675.0,1782695.5,965954.6,506338.25,3148864.5,881498.6,2728021.8,1652914.4,1734441.2,1530433.0,1079930.4,3116655.0,1342305.5,643188.44,825810.94,1974624.0,1635282.0,4944067.5,2181531.2,2651618.2,1213565.1,2608735.5,1254611.9,2244787.0,2390988.5,2506902.8,1846548.9,807178.56,1679482.1,1823884.4,653074.1,1570359.5,6.4516005e+16,4255552.0,579782.44,1143537.6,3095926.0,1120132.0,4947732.0,2471357.5,989734.5,767196.4,2271302.8,142946.16,1308278.5,1012749.75,1054646.4,2871916.5,599145.7,1729635.5,2128362.8,1715095.8,2226899.2,1605471.9,1374579.6,990844.4,1594900.4,6.4516005e+16,1765388.9,1444384.5,2873683.2,2333425.8,2094367.8,1106464.2,1577309.0,2788605.0,511687.84,778104.7,1.5387559e+16,4932572.5,2566397.5,1752563.8,1707121.8,1564983.6,368185.4,1301613.4,1175439.1,3314407.0,487880.0,1910382.6,1757798.1,1164786.2,1091127.1,612205.44,3597104.8,2437700.2,7079667.5,1602297.1,2853885.2,1935234.8,1183116.1,6.4516005e+16,4178559.2,2974450.2,1.452232e+16,1692765.0,261579.1,1453290.1,1967562.6,1111920.5,2545388.2,2491619.0,1865254.4,756142.56,1306604.8,1422331.1,1500773.5,1513657.1,1766937.9,693752.75,995652.94,1029905.8,2274603.5,1532975.5,1816376.9,2500903.2,1808271.2,1306244.5,1481363.0,1038874.8,5189336.0,2314062.5,3776212.8,1503606.1,280099.8,977118.8,2488342.5,229152.12,6.4516005e+16,1194013.0,2413708.5,1537662.2,593255.94,1251113.6,942498.44,1048258.9,793741.5,1044280.3,2267192.2,2219379.0,1363619.0,722854.56,1672889.1,2705073.0,2069666.2,3125348.5,1733029.6,1382282.2,2050182.1,119261.28,709865.0,3577803.2,1600062.8,1270708.8,1257092.1,1329094.2,1104968.5,1011018.8,973570.3,2012316.8,2796335.8,864368.0,960657.8,1930548.4,6.4516005e+16,1519567.2,3555780.0,2855647.8,238330.36,2059863.2,7054513.5,2445563.0,1159683.0,1694428.2,2287183.5,1026383.1,578029.75,};
 8018042:	f44f 7240 	mov.w	r2, #768	; 0x300
 8018046:	4927      	ldr	r1, [pc, #156]	; (80180e4 <invoke+0x2a14>)
 8018048:	4650      	mov	r0, sl
 801804a:	f010 ff3c 	bl	8028ec6 <memcpy>
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[7040],8,8,24,weight_fp61,NULL,v10_conv_0_weight,1,1,4608,-FLT_MAX,FLT_MAX,(float*)sbuf,1,24, v10_conv_0_weight_QAS, lr);
 801804e:	4a14      	ldr	r2, [pc, #80]	; (80180a0 <invoke+0x29d0>)
 8018050:	4b25      	ldr	r3, [pc, #148]	; (80180e8 <invoke+0x2a18>)
 8018052:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8018056:	6812      	ldr	r2, [r2, #0]
 8018058:	4631      	mov	r1, r6
 801805a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80180ec <invoke+0x2a1c>
 801805e:	9202      	str	r2, [sp, #8]
 8018060:	4632      	mov	r2, r6
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	e04a      	b.n	80180fc <invoke+0x2a2c>
 8018066:	bf00      	nop
 8018068:	8349c4fc 	.word	0x8349c4fc
 801806c:	40399288 	.word	0x40399288
 8018070:	20004de8 	.word	0x20004de8
 8018074:	20010a40 	.word	0x20010a40
 8018078:	39d1b717 	.word	0x39d1b717
 801807c:	20004dec 	.word	0x20004dec
 8018080:	7f7fffff 	.word	0x7f7fffff
 8018084:	ff7fffff 	.word	0xff7fffff
 8018088:	20011040 	.word	0x20011040
 801808c:	08043a80 	.word	0x08043a80
 8018090:	2003cfcc 	.word	0x2003cfcc
 8018094:	20010440 	.word	0x20010440
 8018098:	080306c8 	.word	0x080306c8
 801809c:	20004ddc 	.word	0x20004ddc
 80180a0:	20004de0 	.word	0x20004de0
 80180a4:	20004de4 	.word	0x20004de4
 80180a8:	00013100 	.word	0x00013100
 80180ac:	2000cf40 	.word	0x2000cf40
 80180b0:	20020040 	.word	0x20020040
 80180b4:	3cddc6ae 	.word	0x3cddc6ae
 80180b8:	2003cfd8 	.word	0x2003cfd8
 80180bc:	2001d040 	.word	0x2001d040
 80180c0:	2000f6c0 	.word	0x2000f6c0
 80180c4:	080439c0 	.word	0x080439c0
 80180c8:	080309c8 	.word	0x080309c8
 80180cc:	20004e84 	.word	0x20004e84
 80180d0:	2000eac0 	.word	0x2000eac0
 80180d4:	2003cfdc 	.word	0x2003cfdc
 80180d8:	ffffaed0 	.word	0xffffaed0
 80180dc:	ffffaed8 	.word	0xffffaed8
 80180e0:	ffffaeb8 	.word	0xffffaeb8
 80180e4:	08030a88 	.word	0x08030a88
 80180e8:	20008414 	.word	0x20008414
 80180ec:	3a51b717 	.word	0x3a51b717
 80180f0:	00180001 	.word	0x00180001
 80180f4:	7f7fffff 	.word	0x7f7fffff
 80180f8:	ff7fffff 	.word	0xff7fffff
 80180fc:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 80180f4 <invoke+0x2a24>
 8018100:	9300      	str	r3, [sp, #0]
 8018102:	464b      	mov	r3, r9
 8018104:	9707      	str	r7, [sp, #28]
 8018106:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 80180f8 <invoke+0x2a28>
 801810a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801810e:	f8cd 9020 	str.w	r9, [sp, #32]
 8018112:	f8cd 8004 	str.w	r8, [sp, #4]
 8018116:	e9cd 7703 	strd	r7, r7, [sp, #12]
 801811a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801811e:	48c7      	ldr	r0, [pc, #796]	; (801843c <invoke+0x2d6c>)
 8018120:	f002 f87e 	bl	801a220 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>
/* layer 169:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[65792],8,8,48,(q7_t*)v9_conv_2_weight,NULL,(float*)&buffer0[7040],8,8,144,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8018124:	4bc6      	ldr	r3, [pc, #792]	; (8018440 <invoke+0x2d70>)
 8018126:	2090      	movs	r0, #144	; 0x90
 8018128:	9707      	str	r7, [sp, #28]
 801812a:	681f      	ldr	r7, [r3, #0]
 801812c:	4632      	mov	r2, r6
 801812e:	4631      	mov	r1, r6
 8018130:	2330      	movs	r3, #48	; 0x30
 8018132:	9604      	str	r6, [sp, #16]
 8018134:	9603      	str	r6, [sp, #12]
 8018136:	9502      	str	r5, [sp, #8]
 8018138:	9005      	str	r0, [sp, #20]
 801813a:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8018444 <invoke+0x2d74>
 801813e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8018448 <invoke+0x2d78>
 8018142:	f8cd 8004 	str.w	r8, [sp, #4]
 8018146:	9406      	str	r4, [sp, #24]
 8018148:	9700      	str	r7, [sp, #0]
 801814a:	48c0      	ldr	r0, [pc, #768]	; (801844c <invoke+0x2d7c>)
 801814c:	f006 ff38 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 170:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[5888],9216,(float*)&buffer0[7040]);
 8018150:	4aba      	ldr	r2, [pc, #744]	; (801843c <invoke+0x2d6c>)
 8018152:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8018156:	f5a2 6090 	sub.w	r0, r2, #1152	; 0x480
/* layer 171:MUL */
fptr = &buffer0[7040];
fptr2 = scales25;
 801815a:	4615      	mov	r5, r2
where_zeros_inplace_bit((bool*)&buffer0[5888],9216,(float*)&buffer0[7040]);
 801815c:	f00b faea 	bl	8023734 <where_zeros_inplace_bit>
fptr2 = scales25;
 8018160:	4abb      	ldr	r2, [pc, #748]	; (8018450 <invoke+0x2d80>)
 8018162:	4bbc      	ldr	r3, [pc, #752]	; (8018454 <invoke+0x2d84>)
 8018164:	f505 4610 	add.w	r6, r5, #36864	; 0x9000
 8018168:	4628      	mov	r0, r5
 801816a:	f502 7110 	add.w	r1, r2, #576	; 0x240
 801816e:	601a      	str	r2, [r3, #0]
 8018170:	4602      	mov	r2, r0
 8018172:	4bb7      	ldr	r3, [pc, #732]	; (8018450 <invoke+0x2d80>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 144; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8018174:	ecb3 7a01 	vldmia	r3!, {s14}
 8018178:	edd2 7a00 	vldr	s15, [r2]
 801817c:	428b      	cmp	r3, r1
 801817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018182:	ece2 7a01 	vstmia	r2!, {s15}
 8018186:	d1f5      	bne.n	8018174 <invoke+0x2aa4>
 8018188:	f500 7010 	add.w	r0, r0, #576	; 0x240
for(int hw = 0; hw < 64; hw++){
 801818c:	42b0      	cmp	r0, r6
 801818e:	d1ef      	bne.n	8018170 <invoke+0x2aa0>
}
/* layer 172:SUM */
sum_4D_exclude((float*)&buffer0[7040],1,8,8,144,3,(float*)&buffer0[5888]);
 8018190:	2308      	movs	r3, #8
 8018192:	2203      	movs	r2, #3
 8018194:	2090      	movs	r0, #144	; 0x90
 8018196:	49b0      	ldr	r1, [pc, #704]	; (8018458 <invoke+0x2d88>)
 8018198:	9201      	str	r2, [sp, #4]
 801819a:	461a      	mov	r2, r3
 801819c:	9102      	str	r1, [sp, #8]
 801819e:	2101      	movs	r1, #1
 80181a0:	9000      	str	r0, [sp, #0]
 80181a2:	f50d 67fc 	add.w	r7, sp, #2016	; 0x7e0
 80181a6:	48a5      	ldr	r0, [pc, #660]	; (801843c <invoke+0x2d6c>)
 80181a8:	f8cb 6000 	str.w	r6, [fp]
 80181ac:	f009 fff0 	bl	8022190 <sum_4D_exclude>
/* layer 173:BIAS_UPDATE */
const float v9_conv_1_bias_QAS[144] = {54733956.0,173848220.0,45967984.0,126531840.0,79768470.0,53002120.0,27056624.0,60511692.0,133232910.0,52591820.0,23713302.0,243218420.0,22146126.0,116369490.0,22752058.0,17828302.0,97626120.0,346548600.0,23582536.0,252146660.0,238443440.0,19840076.0,572430300.0,110761224.0,51954850.0,334852130.0,112444800.0,94147880.0,155927550.0,68164310.0,26532762.0,96081256.0,111518630.0,55589960.0,51408240.0,24390004.0,140507840.0,34851656.0,233304720.0,57837670.0,61995772.0,38087830.0,69655540.0,42229236.0,44804470.0,340878080.0,308601570.0,32050590.0,92793220.0,9848095.0,283077800.0,15825534.0,258542540.0,66199556.0,5.5373517e+20,32202730.0,70831980.0,113073910.0,23426098.0,1714624.6,166929950.0,112203640.0,66385076.0,239498160.0,20507924.0,16852454.0,352472740.0,209239580.0,31675186.0,16464575.0,25834670.0,72434936.0,33462174.0,229740400.0,38104464.0,270421630.0,46964056.0,25496292.0,232958240.0,203855060.0,19192378.0,1206516900.0,67821540.0,226746670.0,38211356.0,14218684.0,38653424.0,148065630.0,101594664.0,47311370.0,14660140.0,61906380.0,20851062.0,969217200.0,185440430.0,12016323.0,261744140.0,31165548.0,453362530.0,252500340.0,11567396.0,41422756.0,40687388.0,35611936.0,16170318.0,41552930.0,123760720.0,157315200.0,52242944.0,86846910.0,22653770.0,202114220.0,301359940.0,168026030.0,60349610.0,238831660.0,16336067.0,45832524.0,199273950.0,264016270.0,24149638.0,186845980.0,196863360.0,63264904.0,83816350.0,195107700.0,195357070.0,23637384.0,38084650.0,42718620.0,13965792.0,11136773.0,70307080.0,81381490.0,31760066.0,36261950.0,89230140.0,23538300.0,465251100.0,23585384.0,151535980.0,100698000.0,153223950.0,22549854.0,};
 80181b0:	49aa      	ldr	r1, [pc, #680]	; (801845c <invoke+0x2d8c>)
 80181b2:	f50d 60fc 	add.w	r0, sp, #2016	; 0x7e0
 80181b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80181ba:	f010 fe84 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[5888];//gradients
for(int i = 0; i < 144; i++) v9_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_1_bias_QAS[i]);
 80181be:	4ba8      	ldr	r3, [pc, #672]	; (8018460 <invoke+0x2d90>)
 80181c0:	48a5      	ldr	r0, [pc, #660]	; (8018458 <invoke+0x2d88>)
 80181c2:	6819      	ldr	r1, [r3, #0]
 80181c4:	f500 7c10 	add.w	ip, r0, #576	; 0x240
 80181c8:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8018464 <invoke+0x2d94>
 80181cc:	3904      	subs	r1, #4
fptr = (float*)&buffer0[5888];//gradients
 80181ce:	f8cb 0000 	str.w	r0, [fp]
for(int i = 0; i < 144; i++) v9_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_1_bias_QAS[i]);
 80181d2:	ecb0 7a01 	vldmia	r0!, {s14}
 80181d6:	ecf7 7a01 	vldmia	r7!, {s15}
 80181da:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80181de:	4560      	cmp	r0, ip
 80181e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80181e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80181e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80181ec:	ee17 3a90 	vmov	r3, s15
 80181f0:	eba2 0303 	sub.w	r3, r2, r3
 80181f4:	600b      	str	r3, [r1, #0]
 80181f6:	d1ec      	bne.n	80181d2 <invoke+0x2b02>
/* layer 174:TRANSPOSE_CONV_2D */
transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight((float*)&buffer0[7040],8,8,144,v9_conv_1_weight,NULL,(float*)&buffer0[7040],8,8,144,-FLT_MAX,FLT_MAX,(float*)sbuf,1,0);
 80181f8:	4b9b      	ldr	r3, [pc, #620]	; (8018468 <invoke+0x2d98>)
 80181fa:	2008      	movs	r0, #8
 80181fc:	2200      	movs	r2, #0
 80181fe:	2101      	movs	r1, #1
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2790      	movs	r7, #144	; 0x90
 8018204:	9208      	str	r2, [sp, #32]
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	463b      	mov	r3, r7
 801820a:	9201      	str	r2, [sp, #4]
 801820c:	4602      	mov	r2, r0
 801820e:	9107      	str	r1, [sp, #28]
 8018210:	4601      	mov	r1, r0
 8018212:	9003      	str	r0, [sp, #12]
 8018214:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8018444 <invoke+0x2d74>
 8018218:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8018448 <invoke+0x2d78>
 801821c:	9406      	str	r4, [sp, #24]
 801821e:	9502      	str	r5, [sp, #8]
 8018220:	e9cd 0704 	strd	r0, r7, [sp, #16]
 8018224:	4885      	ldr	r0, [pc, #532]	; (801843c <invoke+0x2d6c>)
 8018226:	f00a f8af 	bl	8022388 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>
/* layer 175:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[4736],9216,(float*)&buffer0[7040]);
 801822a:	4a84      	ldr	r2, [pc, #528]	; (801843c <invoke+0x2d6c>)
 801822c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8018230:	f5a2 6010 	sub.w	r0, r2, #2304	; 0x900
 8018234:	f00b fa7e 	bl	8023734 <where_zeros_inplace_bit>
/* layer 176:MUL */
fptr = &buffer0[7040];
fptr2 = scales24;
 8018238:	4a8c      	ldr	r2, [pc, #560]	; (801846c <invoke+0x2d9c>)
 801823a:	4b86      	ldr	r3, [pc, #536]	; (8018454 <invoke+0x2d84>)
 801823c:	487f      	ldr	r0, [pc, #508]	; (801843c <invoke+0x2d6c>)
 801823e:	f502 7110 	add.w	r1, r2, #576	; 0x240
 8018242:	601a      	str	r2, [r3, #0]
 8018244:	4602      	mov	r2, r0
 8018246:	4b89      	ldr	r3, [pc, #548]	; (801846c <invoke+0x2d9c>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 144; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8018248:	ecb3 7a01 	vldmia	r3!, {s14}
 801824c:	edd2 7a00 	vldr	s15, [r2]
 8018250:	428b      	cmp	r3, r1
 8018252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018256:	ece2 7a01 	vstmia	r2!, {s15}
 801825a:	d1f5      	bne.n	8018248 <invoke+0x2b78>
 801825c:	f500 7010 	add.w	r0, r0, #576	; 0x240
for(int hw = 0; hw < 64; hw++){
 8018260:	42b0      	cmp	r0, r6
 8018262:	d1ef      	bne.n	8018244 <invoke+0x2b74>
}
/* layer 177:SUM */
sum_4D_exclude((float*)&buffer0[7040],1,8,8,144,3,(float*)&buffer0[4736]);
 8018264:	2308      	movs	r3, #8
 8018266:	2203      	movs	r2, #3
 8018268:	2090      	movs	r0, #144	; 0x90
 801826a:	4981      	ldr	r1, [pc, #516]	; (8018470 <invoke+0x2da0>)
 801826c:	9201      	str	r2, [sp, #4]
 801826e:	461a      	mov	r2, r3
 8018270:	9102      	str	r1, [sp, #8]
 8018272:	2101      	movs	r1, #1
 8018274:	9000      	str	r0, [sp, #0]
 8018276:	f50d 6522 	add.w	r5, sp, #2592	; 0xa20
 801827a:	4870      	ldr	r0, [pc, #448]	; (801843c <invoke+0x2d6c>)
 801827c:	f8cb 6000 	str.w	r6, [fp]
 8018280:	f009 ff86 	bl	8022190 <sum_4D_exclude>
/* layer 178:BIAS_UPDATE */
const float v9_conv_0_bias_QAS[144] = {852220540.0,924375360.0,1224374300.0,644542700.0,936913900.0,642362500.0,752038500.0,2478320600.0,591012700.0,1420872800.0,1467748200.0,1267579900.0,1201380600.0,822313860.0,1657994100.0,1281687300.0,1004208300.0,888644300.0,1197253900.0,1327166500.0,610892300.0,2114835700.0,1555972900.0,1024112960.0,1028692350.0,482174300.0,401786430.0,587585000.0,237098750.0,1290291600.0,1407533800.0,904460200.0,719896640.0,1445117400.0,1099168600.0,764090000.0,999069200.0,969456100.0,1392124000.0,520202430.0,715481900.0,1880075600.0,1313654500.0,1183720200.0,590511600.0,317668100.0,498569600.0,622813100.0,783516600.0,558696200.0,804609500.0,1353362000.0,694475800.0,891263700.0,5.4547726e+19,1856706400.0,456388670.0,225544260.0,319649920.0,807483000.0,777442700.0,891791300.0,1552675800.0,753179100.0,353785500.0,595058600.0,387562560.0,941138750.0,1109761500.0,1540620300.0,818860800.0,237001300.0,770516200.0,1243588200.0,826524100.0,540467100.0,1037076860.0,1355780400.0,1282261000.0,1109464600.0,1227879800.0,218033940.0,1266410500.0,1232285000.0,481644830.0,385651840.0,413922100.0,961494850.0,674703170.0,1210070900.0,858774200.0,518209380.0,2374035700.0,858949300.0,814067100.0,2049135000.0,545253060.0,1780161900.0,1056487740.0,673625860.0,460882500.0,660758000.0,1113948700.0,1040494800.0,673070460.0,1957374200.0,1697148700.0,859047700.0,3588628200.0,2130695600.0,402939840.0,1072150200.0,1303001500.0,1274725800.0,709652540.0,1075671600.0,1084890900.0,934434240.0,1195866100.0,690687800.0,1962665600.0,1149564500.0,620770200.0,892396350.0,1285760800.0,927599940.0,902138600.0,379901900.0,740688500.0,1154740200.0,513176350.0,1065783600.0,1793318800.0,2540098300.0,3273737500.0,1108104100.0,827858500.0,2157512400.0,1211117400.0,971802500.0,996423900.0,990253250.0,765563140.0,373902200.0,};
 8018284:	497b      	ldr	r1, [pc, #492]	; (8018474 <invoke+0x2da4>)
 8018286:	f50d 6022 	add.w	r0, sp, #2592	; 0xa20
 801828a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801828e:	f010 fe1a 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[4736];//gradients
for(int i = 0; i < 144; i++) v9_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_0_bias_QAS[i]);
 8018292:	4b79      	ldr	r3, [pc, #484]	; (8018478 <invoke+0x2da8>)
 8018294:	4876      	ldr	r0, [pc, #472]	; (8018470 <invoke+0x2da0>)
 8018296:	6819      	ldr	r1, [r3, #0]
 8018298:	f500 7710 	add.w	r7, r0, #576	; 0x240
 801829c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8018464 <invoke+0x2d94>
 80182a0:	3904      	subs	r1, #4
fptr = (float*)&buffer0[4736];//gradients
 80182a2:	f8cb 0000 	str.w	r0, [fp]
for(int i = 0; i < 144; i++) v9_conv_0_bias[i] -= (int32_t)(fptr[i] * blr * v9_conv_0_bias_QAS[i]);
 80182a6:	ecb0 7a01 	vldmia	r0!, {s14}
 80182aa:	ecf5 7a01 	vldmia	r5!, {s15}
 80182ae:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80182b2:	42b8      	cmp	r0, r7
 80182b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80182b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80182bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182c0:	ee17 3a90 	vmov	r3, s15
 80182c4:	eba2 0303 	sub.w	r3, r2, r3
 80182c8:	600b      	str	r3, [r1, #0]
 80182ca:	d1ec      	bne.n	80182a6 <invoke+0x2bd6>
/* layer 179:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol((float*)&buffer0[7040],8,8,144,(q7_t*)v9_conv_0_weight,(q7_t*)v9_conv_0_weightFlash,12,NULL,(float*)&buffer0[43904],8,8,48,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80182cc:	4b6b      	ldr	r3, [pc, #428]	; (801847c <invoke+0x2dac>)
 80182ce:	2201      	movs	r2, #1
 80182d0:	4d6b      	ldr	r5, [pc, #428]	; (8018480 <invoke+0x2db0>)
 80182d2:	2130      	movs	r1, #48	; 0x30
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	200c      	movs	r0, #12
 80182d8:	9408      	str	r4, [sp, #32]
 80182da:	2700      	movs	r7, #0
 80182dc:	9301      	str	r3, [sp, #4]
 80182de:	2308      	movs	r3, #8
 80182e0:	9604      	str	r6, [sp, #16]
 80182e2:	682e      	ldr	r6, [r5, #0]
 80182e4:	eddf 0a57 	vldr	s1, [pc, #348]	; 8018444 <invoke+0x2d74>
 80182e8:	9209      	str	r2, [sp, #36]	; 0x24
 80182ea:	461a      	mov	r2, r3
 80182ec:	9600      	str	r6, [sp, #0]
 80182ee:	9107      	str	r1, [sp, #28]
 80182f0:	4619      	mov	r1, r3
 80182f2:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8018448 <invoke+0x2d78>
 80182f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80182fa:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80182fe:	2390      	movs	r3, #144	; 0x90
 8018300:	484e      	ldr	r0, [pc, #312]	; (801843c <invoke+0x2d6c>)
 8018302:	f008 ff3b 	bl	802117c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol>
/* layer 180:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[4352],3072,(float*)&buffer0[43904]);
 8018306:	4a5f      	ldr	r2, [pc, #380]	; (8018484 <invoke+0x2db4>)
 8018308:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 801830c:	485e      	ldr	r0, [pc, #376]	; (8018488 <invoke+0x2db8>)
 801830e:	f00b fa11 	bl	8023734 <where_zeros_inplace_bit>
/* layer 181:MUL */
fptr = &buffer0[43904];
fptr2 = scales23;
 8018312:	4a5e      	ldr	r2, [pc, #376]	; (801848c <invoke+0x2dbc>)
 8018314:	485b      	ldr	r0, [pc, #364]	; (8018484 <invoke+0x2db4>)
 8018316:	4b4f      	ldr	r3, [pc, #316]	; (8018454 <invoke+0x2d84>)
 8018318:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
 801831c:	f500 5640 	add.w	r6, r0, #12288	; 0x3000
 8018320:	601a      	str	r2, [r3, #0]
 8018322:	4602      	mov	r2, r0
 8018324:	4b59      	ldr	r3, [pc, #356]	; (801848c <invoke+0x2dbc>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 48; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8018326:	ecb3 7a01 	vldmia	r3!, {s14}
 801832a:	edd2 7a00 	vldr	s15, [r2]
 801832e:	428b      	cmp	r3, r1
 8018330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018334:	ece2 7a01 	vstmia	r2!, {s15}
 8018338:	d1f5      	bne.n	8018326 <invoke+0x2c56>
 801833a:	30c0      	adds	r0, #192	; 0xc0
for(int hw = 0; hw < 64; hw++){
 801833c:	42b0      	cmp	r0, r6
 801833e:	d1f0      	bne.n	8018322 <invoke+0x2c52>
}
/* layer 182:SUM */
sum_4D_exclude((float*)&buffer0[43904],1,8,8,48,3,(float*)&buffer0[4352]);
 8018340:	2308      	movs	r3, #8
 8018342:	2203      	movs	r2, #3
 8018344:	2030      	movs	r0, #48	; 0x30
 8018346:	4950      	ldr	r1, [pc, #320]	; (8018488 <invoke+0x2db8>)
 8018348:	9201      	str	r2, [sp, #4]
 801834a:	461a      	mov	r2, r3
 801834c:	9102      	str	r1, [sp, #8]
 801834e:	2101      	movs	r1, #1
 8018350:	9000      	str	r0, [sp, #0]
 8018352:	afa8      	add	r7, sp, #672	; 0x2a0
 8018354:	484b      	ldr	r0, [pc, #300]	; (8018484 <invoke+0x2db4>)
 8018356:	f8cb 6000 	str.w	r6, [fp]
 801835a:	f009 ff19 	bl	8022190 <sum_4D_exclude>
/* layer 183:BIAS_UPDATE */
const float v8_conv_2_bias_QAS[48] = {284621660.0,304217000.0,503038000.0,391473180.0,252154510.0,297123100.0,263391630.0,310499800.0,359126900.0,420800000.0,206491170.0,458631100.0,271088160.0,370546300.0,407529000.0,202315120.0,325050460.0,376422430.0,507360160.0,376447260.0,466791140.0,383453700.0,443895200.0,274529820.0,177055120.0,257525200.0,318709300.0,191143300.0,346373630.0,294000900.0,372293020.0,414550200.0,135013070.0,362483000.0,375941950.0,355319100.0,259267520.0,214808140.0,379836960.0,142551970.0,342445470.0,370095940.0,171951800.0,321280540.0,368954600.0,371790980.0,335280960.0,350077150.0,};
 801835e:	494c      	ldr	r1, [pc, #304]	; (8018490 <invoke+0x2dc0>)
 8018360:	a8a8      	add	r0, sp, #672	; 0x2a0
 8018362:	22c0      	movs	r2, #192	; 0xc0
 8018364:	f010 fdaf 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[4352];//gradients
for(int i = 0; i < 48; i++) v8_conv_2_bias[i] -= (int32_t)(fptr[i] * blr * v8_conv_2_bias_QAS[i]);
 8018368:	4b4a      	ldr	r3, [pc, #296]	; (8018494 <invoke+0x2dc4>)
 801836a:	4847      	ldr	r0, [pc, #284]	; (8018488 <invoke+0x2db8>)
 801836c:	6819      	ldr	r1, [r3, #0]
 801836e:	f100 0cc0 	add.w	ip, r0, #192	; 0xc0
 8018372:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8018464 <invoke+0x2d94>
 8018376:	3904      	subs	r1, #4
 8018378:	ecb0 7a01 	vldmia	r0!, {s14}
 801837c:	ecf7 7a01 	vldmia	r7!, {s15}
 8018380:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8018384:	4560      	cmp	r0, ip
 8018386:	ee67 7a27 	vmul.f32	s15, s14, s15
 801838a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801838e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018392:	ee17 3a90 	vmov	r3, s15
 8018396:	eba2 0303 	sub.w	r3, r2, r3
 801839a:	600b      	str	r3, [r1, #0]
 801839c:	d1ec      	bne.n	8018378 <invoke+0x2ca8>
 801839e:	4b3e      	ldr	r3, [pc, #248]	; (8018498 <invoke+0x2dc8>)
/* layer 184:CAST */
fptr = (float*)&buffer0[56192];
 80183a0:	f8cb 6000 	str.w	r6, [fp]
 80183a4:	f503 6140 	add.w	r1, r3, #3072	; 0xc00
int8ptr = (int8_t*)&buffer0[1280];
 80183a8:	483c      	ldr	r0, [pc, #240]	; (801849c <invoke+0x2dcc>)
 80183aa:	4a3d      	ldr	r2, [pc, #244]	; (80184a0 <invoke+0x2dd0>)
 80183ac:	f6a1 36ff 	subw	r6, r1, #3071	; 0xbff
 80183b0:	6006      	str	r6, [r0, #0]
for(int i = 0; i < 3072; i++) fptr[i] = (float)int8ptr[i];
 80183b2:	f913 0f01 	ldrsb.w	r0, [r3, #1]!
 80183b6:	ee07 0a90 	vmov	s15, r0
 80183ba:	428b      	cmp	r3, r1
 80183bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183c0:	ece2 7a01 	vstmia	r2!, {s15}
 80183c4:	d1f5      	bne.n	80183b2 <invoke+0x2ce2>
/* layer 185:STRIDED_SLICE */
const uint16_t begin2[] = {0, 0, 0, 0};
 80183c6:	f245 13e0 	movw	r3, #20960	; 0x51e0
 80183ca:	4936      	ldr	r1, [pc, #216]	; (80184a4 <invoke+0x2dd4>)
const uint16_t end2[] = {1, 12, 8, 8};
const uint16_t strides2[] = {1};
 80183cc:	4836      	ldr	r0, [pc, #216]	; (80184a8 <invoke+0x2dd8>)
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 80183ce:	2608      	movs	r6, #8
const uint16_t begin2[] = {0, 0, 0, 0};
 80183d0:	446b      	add	r3, sp
const uint16_t end2[] = {1, 12, 8, 8};
 80183d2:	4a36      	ldr	r2, [pc, #216]	; (80184ac <invoke+0x2ddc>)
const uint16_t strides2[] = {1};
 80183d4:	2701      	movs	r7, #1
const uint16_t begin2[] = {0, 0, 0, 0};
 80183d6:	f04f 0800 	mov.w	r8, #0
 80183da:	eb03 0c01 	add.w	ip, r3, r1
const uint16_t end2[] = {1, 12, 8, 8};
 80183de:	189a      	adds	r2, r3, r2
const uint16_t strides2[] = {1};
 80183e0:	eb03 0e00 	add.w	lr, r3, r0
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 80183e4:	f04f 090c 	mov.w	r9, #12
 80183e8:	4b31      	ldr	r3, [pc, #196]	; (80184b0 <invoke+0x2de0>)
/* layer 186:GROUP_CONV */
const float v9_conv_0_weight_QAS[144] = {1007958.94,1093299.5,1448121.4,762328.94,1108129.4,759750.4,889469.2,2931218.8,699016.75,1680528.9,1735970.4,1499222.4,1420925.8,972586.75,1960982.8,1515908.0,1187721.4,1051038.8,1416044.9,1569698.0,722529.2,2501309.0,1840317.5,1211263.5,1216679.6,570288.8,475210.53,694962.6,280427.12,1526084.6,1664752.2,1069744.9,851453.5,1709204.0,1300035.0,903722.8,1181643.0,1146618.5,1646526.5,615266.3,846232.06,2223648.5,1553717.0,1400037.9,698424.1,375720.03,589680.25,736628.44,926699.56,660794.6,951647.06,1600680.9,821387.06,1054136.8,6.4515992e+16,2196008.2,539791.0,266761.16,378064.06,955045.8,919515.75,1054760.9,1836418.1,890818.0,418437.7,703802.06,458387.25,1113126.2,1312563.8,1822159.5,968502.56,280311.84,911323.56,1470846.5,977566.44,639234.25,1226596.5,1603540.9,1516586.6,1312212.8,1452267.4,257878.34,1497839.4,1457477.9,569662.5,456127.4,489563.94,1137202.2,798001.0,1431204.2,1015710.06,612909.0,2807876.8,1015917.25,962832.94,2423602.2,644894.75,2105475.8,1249554.5,796727.06,545106.0,781507.56,1317516.1,1230639.1,796070.1,2315072.8,2007292.5,1016033.3,4244428.5,2520067.2,476574.7,1268079.2,1541117.2,1507674.2,839337.3,1272244.0,1283148.1,1105196.5,1414403.4,816907.0,2321330.8,1359640.4,734212.25,1055476.5,1520725.9,1097113.4,1066999.0,449326.7,876044.94,1365762.1,606956.2,1260549.1,2121037.2,3004286.0,3871993.5,1310603.5,979144.75,2551785.0,1432441.9,1149393.6,1178514.4,1171216.2,905465.25,442230.6,};
 80183ea:	f50d 6a46 	add.w	sl, sp, #3168	; 0xc60
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 80183ee:	f8cd e00c 	str.w	lr, [sp, #12]
const uint16_t end2[] = {1, 12, 8, 8};
 80183f2:	f04f 1e08 	mov.w	lr, #524296	; 0x80008
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 80183f6:	9304      	str	r3, [sp, #16]
 80183f8:	9705      	str	r7, [sp, #20]
 80183fa:	9600      	str	r6, [sp, #0]
 80183fc:	f8cd 9018 	str.w	r9, [sp, #24]
const uint16_t end2[] = {1, 12, 8, 8};
 8018400:	4b2a      	ldr	r3, [pc, #168]	; (80184ac <invoke+0x2ddc>)
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 8018402:	e9cd c201 	strd	ip, r2, [sp, #4]
 8018406:	e9cd 6607 	strd	r6, r6, [sp, #28]
const uint16_t begin2[] = {0, 0, 0, 0};
 801840a:	f8cc 8004 	str.w	r8, [ip, #4]
 801840e:	f245 1ce0 	movw	ip, #20960	; 0x51e0
const uint16_t end2[] = {1, 12, 8, 8};
 8018412:	f8c2 e004 	str.w	lr, [r2, #4]
 8018416:	f245 12e0 	movw	r2, #20960	; 0x51e0
const uint16_t begin2[] = {0, 0, 0, 0};
 801841a:	44ec      	add	ip, sp
const uint16_t end2[] = {1, 12, 8, 8};
 801841c:	446a      	add	r2, sp
const uint16_t begin2[] = {0, 0, 0, 0};
 801841e:	f84c 8001 	str.w	r8, [ip, r1]
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 8018422:	4639      	mov	r1, r7
const uint16_t end2[] = {1, 12, 8, 8};
 8018424:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80184b4 <invoke+0x2de4>
 8018428:	f842 c003 	str.w	ip, [r2, r3]
const uint16_t strides2[] = {1};
 801842c:	f245 1ce0 	movw	ip, #20960	; 0x51e0
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 8018430:	4633      	mov	r3, r6
 8018432:	2230      	movs	r2, #48	; 0x30
const uint16_t strides2[] = {1};
 8018434:	44ec      	add	ip, sp
 8018436:	f82c 7000 	strh.w	r7, [ip, r0]
 801843a:	e03d      	b.n	80184b8 <invoke+0x2de8>
 801843c:	2000eac0 	.word	0x2000eac0
 8018440:	20004e88 	.word	0x20004e88
 8018444:	7f7fffff 	.word	0x7f7fffff
 8018448:	ff7fffff 	.word	0xff7fffff
 801844c:	2001d040 	.word	0x2001d040
 8018450:	08043780 	.word	0x08043780
 8018454:	2003cfcc 	.word	0x2003cfcc
 8018458:	2000e640 	.word	0x2000e640
 801845c:	08030d88 	.word	0x08030d88
 8018460:	20004e7c 	.word	0x20004e7c
 8018464:	39d1b717 	.word	0x39d1b717
 8018468:	20004e80 	.word	0x20004e80
 801846c:	08043540 	.word	0x08043540
 8018470:	2000e1c0 	.word	0x2000e1c0
 8018474:	08030fc8 	.word	0x08030fc8
 8018478:	20004e70 	.word	0x20004e70
 801847c:	20004e78 	.word	0x20004e78
 8018480:	20004e74 	.word	0x20004e74
 8018484:	20017ac0 	.word	0x20017ac0
 8018488:	2000e040 	.word	0x2000e040
 801848c:	08043480 	.word	0x08043480
 8018490:	08031208 	.word	0x08031208
 8018494:	20004e68 	.word	0x20004e68
 8018498:	2000d43f 	.word	0x2000d43f
 801849c:	2003cfdc 	.word	0x2003cfdc
 80184a0:	2001aac0 	.word	0x2001aac0
 80184a4:	ffffaee0 	.word	0xffffaee0
 80184a8:	ffffaebc 	.word	0xffffaebc
 80184ac:	ffffaee8 	.word	0xffffaee8
 80184b0:	2000d440 	.word	0x2000d440
 80184b4:	000c0001 	.word	0x000c0001
strided_slice_4Dto4D((float*)&buffer0[56192],1,48,8,8,begin2,end2,strides2,(float*)&buffer0[1280],1,12,8,8);
 80184b8:	484c      	ldr	r0, [pc, #304]	; (80185ec <invoke+0x2f1c>)
 80184ba:	f009 fd13 	bl	8021ee4 <strided_slice_4Dto4D>
const float v9_conv_0_weight_QAS[144] = {1007958.94,1093299.5,1448121.4,762328.94,1108129.4,759750.4,889469.2,2931218.8,699016.75,1680528.9,1735970.4,1499222.4,1420925.8,972586.75,1960982.8,1515908.0,1187721.4,1051038.8,1416044.9,1569698.0,722529.2,2501309.0,1840317.5,1211263.5,1216679.6,570288.8,475210.53,694962.6,280427.12,1526084.6,1664752.2,1069744.9,851453.5,1709204.0,1300035.0,903722.8,1181643.0,1146618.5,1646526.5,615266.3,846232.06,2223648.5,1553717.0,1400037.9,698424.1,375720.03,589680.25,736628.44,926699.56,660794.6,951647.06,1600680.9,821387.06,1054136.8,6.4515992e+16,2196008.2,539791.0,266761.16,378064.06,955045.8,919515.75,1054760.9,1836418.1,890818.0,418437.7,703802.06,458387.25,1113126.2,1312563.8,1822159.5,968502.56,280311.84,911323.56,1470846.5,977566.44,639234.25,1226596.5,1603540.9,1516586.6,1312212.8,1452267.4,257878.34,1497839.4,1457477.9,569662.5,456127.4,489563.94,1137202.2,798001.0,1431204.2,1015710.06,612909.0,2807876.8,1015917.25,962832.94,2423602.2,644894.75,2105475.8,1249554.5,796727.06,545106.0,781507.56,1317516.1,1230639.1,796070.1,2315072.8,2007292.5,1016033.3,4244428.5,2520067.2,476574.7,1268079.2,1541117.2,1507674.2,839337.3,1272244.0,1283148.1,1105196.5,1414403.4,816907.0,2321330.8,1359640.4,734212.25,1055476.5,1520725.9,1097113.4,1066999.0,449326.7,876044.94,1365762.1,606956.2,1260549.1,2121037.2,3004286.0,3871993.5,1310603.5,979144.75,2551785.0,1432441.9,1149393.6,1178514.4,1171216.2,905465.25,442230.6,};
 80184be:	f44f 7210 	mov.w	r2, #576	; 0x240
 80184c2:	494b      	ldr	r1, [pc, #300]	; (80185f0 <invoke+0x2f20>)
 80184c4:	4650      	mov	r0, sl
 80184c6:	f010 fcfe 	bl	8028ec6 <memcpy>
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[1280],8,8,12,weight_fp65,NULL,v9_conv_0_weight,1,1,1728,-FLT_MAX,FLT_MAX,(float*)sbuf,1,12, v9_conv_0_weight_QAS, lr);
 80184ca:	682a      	ldr	r2, [r5, #0]
 80184cc:	4b49      	ldr	r3, [pc, #292]	; (80185f4 <invoke+0x2f24>)
 80184ce:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80184d2:	9202      	str	r2, [sp, #8]
 80184d4:	4631      	mov	r1, r6
 80184d6:	681d      	ldr	r5, [r3, #0]
 80184d8:	4632      	mov	r2, r6
 80184da:	ed9f 1a47 	vldr	s2, [pc, #284]	; 80185f8 <invoke+0x2f28>
 80184de:	464b      	mov	r3, r9
 80184e0:	9406      	str	r4, [sp, #24]
 80184e2:	9500      	str	r5, [sp, #0]
/* layer 187:TRANSPOSE_CONV_2D */
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[43904],8,8,48,(q7_t*)v8_conv_2_weight,NULL,(float*)&buffer0[1280],8,8,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 80184e4:	25a0      	movs	r5, #160	; 0xa0
group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace((float*)&buffer0[1280],8,8,12,weight_fp65,NULL,v9_conv_0_weight,1,1,1728,-FLT_MAX,FLT_MAX,(float*)sbuf,1,12, v9_conv_0_weight_QAS, lr);
 80184e6:	9005      	str	r0, [sp, #20]
 80184e8:	eddf 0a44 	vldr	s1, [pc, #272]	; 80185fc <invoke+0x2f2c>
 80184ec:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8018600 <invoke+0x2f30>
 80184f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80184f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80184f8:	9707      	str	r7, [sp, #28]
 80184fa:	f8cd 8004 	str.w	r8, [sp, #4]
 80184fe:	4841      	ldr	r0, [pc, #260]	; (8018604 <invoke+0x2f34>)
 8018500:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8018504:	f001 fe8c 	bl	801a220 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>
pointwise_conv_fp_4row4col_IOHW_int8weight((float*)&buffer0[43904],8,8,48,(q7_t*)v8_conv_2_weight,NULL,(float*)&buffer0[1280],8,8,160,-FLT_MAX,FLT_MAX,(float*)sbuf, 1);
 8018508:	4b3f      	ldr	r3, [pc, #252]	; (8018608 <invoke+0x2f38>)
 801850a:	9707      	str	r7, [sp, #28]
 801850c:	4632      	mov	r2, r6
 801850e:	6818      	ldr	r0, [r3, #0]
 8018510:	4631      	mov	r1, r6
 8018512:	9406      	str	r4, [sp, #24]
 8018514:	2330      	movs	r3, #48	; 0x30
 8018516:	4c3b      	ldr	r4, [pc, #236]	; (8018604 <invoke+0x2f34>)
 8018518:	9000      	str	r0, [sp, #0]
 801851a:	9402      	str	r4, [sp, #8]
 801851c:	eddf 0a37 	vldr	s1, [pc, #220]	; 80185fc <invoke+0x2f2c>
 8018520:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8018600 <invoke+0x2f30>
 8018524:	9604      	str	r6, [sp, #16]
 8018526:	9603      	str	r6, [sp, #12]
 8018528:	f8cd 8004 	str.w	r8, [sp, #4]
 801852c:	9505      	str	r5, [sp, #20]
 801852e:	4837      	ldr	r0, [pc, #220]	; (801860c <invoke+0x2f3c>)
 8018530:	f006 fd46 	bl	801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>
/* layer 188:WHERE */
where_zeros_inplace_bit((bool*)&buffer0[0],10240,(float*)&buffer0[1280]);
 8018534:	4622      	mov	r2, r4
 8018536:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 801853a:	f5a4 60a0 	sub.w	r0, r4, #1280	; 0x500
 801853e:	f00b f8f9 	bl	8023734 <where_zeros_inplace_bit>
/* layer 189:MUL */
fptr = &buffer0[1280];
fptr2 = scales22;
 8018542:	4a33      	ldr	r2, [pc, #204]	; (8018610 <invoke+0x2f40>)
 8018544:	4620      	mov	r0, r4
 8018546:	4b33      	ldr	r3, [pc, #204]	; (8018614 <invoke+0x2f44>)
 8018548:	f504 4420 	add.w	r4, r4, #40960	; 0xa000
 801854c:	f502 7120 	add.w	r1, r2, #640	; 0x280
 8018550:	601a      	str	r2, [r3, #0]
 8018552:	4602      	mov	r2, r0
 8018554:	4b2e      	ldr	r3, [pc, #184]	; (8018610 <invoke+0x2f40>)
for(int hw = 0; hw < 64; hw++){
for(int i = 0; i < 160; i++){float f = *fptr; *fptr++ = fptr2[i] * f;};
 8018556:	ecb3 7a01 	vldmia	r3!, {s14}
 801855a:	edd2 7a00 	vldr	s15, [r2]
 801855e:	4299      	cmp	r1, r3
 8018560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018564:	ece2 7a01 	vstmia	r2!, {s15}
 8018568:	d1f5      	bne.n	8018556 <invoke+0x2e86>
 801856a:	f500 7020 	add.w	r0, r0, #640	; 0x280
for(int hw = 0; hw < 64; hw++){
 801856e:	42a0      	cmp	r0, r4
 8018570:	d1ef      	bne.n	8018552 <invoke+0x2e82>
}
/* layer 190:SUM */
sum_4D_exclude((float*)&buffer0[1280],1,8,8,160,3,(float*)&buffer0[0]);
 8018572:	4d29      	ldr	r5, [pc, #164]	; (8018618 <invoke+0x2f48>)
 8018574:	2308      	movs	r3, #8
 8018576:	2203      	movs	r2, #3
 8018578:	21a0      	movs	r1, #160	; 0xa0
 801857a:	f505 7420 	add.w	r4, r5, #640	; 0x280
 801857e:	9100      	str	r1, [sp, #0]
 8018580:	2101      	movs	r1, #1
 8018582:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8018586:	461a      	mov	r2, r3
 8018588:	f8cb 0000 	str.w	r0, [fp]
 801858c:	f505 60a0 	add.w	r0, r5, #1280	; 0x500
 8018590:	f009 fdfe 	bl	8022190 <sum_4D_exclude>
/* layer 191:BIAS_UPDATE */
const float v8_conv_1_bias_QAS[160] = {16137858.0,21563212.0,17260780.0,19358254.0,85725336.0,33789212.0,87651250.0,129334264.0,23150988.0,10156647.0,9286422.0,96499970.0,14149087.0,9804269.0,98743520.0,122095640.0,78369370.0,641424640.0,1016768600.0,20491758.0,10820261.0,27643276.0,20118490.0,37235176.0,21393282.0,31142066.0,29143482.0,36604060.0,37118268.0,16852376.0,40395450.0,50074420.0,46187970.0,24318626.0,34987732.0,15055983.0,156139940.0,13900276.0,287718200.0,94021310.0,77745270.0,25076366.0,21461828.0,15808157.0,27553990.0,52639372.0,36149160.0,11912032.0,73517130.0,16688680.0,14647817.0,14833902.0,30187674.0,17689720.0,20490418.0,19732992.0,30331836.0,116014240.0,24800180.0,99221550.0,117609064.0,67965130.0,120788790.0,26541078.0,14351439.0,75435660.0,102417570.0,14907382.0,20590766.0,27743390.0,55593564.0,25558178.0,18602302.0,27266332.0,10372916.0,23559026.0,26499844.0,15164472.0,106913590.0,48212860.0,14899516.0,45411452.0,17687664.0,12014631.0,18187292.0,25949242.0,109078120.0,34975864.0,17286376.0,12618020.0,25405754.0,68174200.0,11508190.0,10044020.0,12724026.0,29111284.0,25417826.0,38384540.0,24790836.0,69157430.0,21329336.0,701059840.0,170437420.0,19408258.0,17462722.0,27765084.0,18686548.0,41932252.0,179844830.0,13777060.0,22109226.0,19915148.0,25485912.0,78485290.0,61120388.0,33603380.0,106835870.0,154430500.0,20483004.0,41761750.0,106555330.0,19261402.0,27825842.0,23659052.0,15481597.0,40501756.0,29392850.0,36432090.0,14451499.0,19813580.0,21005486.0,39491684.0,43298570.0,36051500.0,13100440.0,22853044.0,57596644.0,87464056.0,26415088.0,29372180.0,23250260.0,15249762.0,47648196.0,11787393.0,19602600.0,16057196.0,19414158.0,23625946.0,22028952.0,14835767.0,22446486.0,13891527.0,25069606.0,27408362.0,34857084.0,129458870.0,14183018.0,28107708.0,40581596.0,27977578.0,};
 8018594:	4921      	ldr	r1, [pc, #132]	; (801861c <invoke+0x2f4c>)
 8018596:	f50d 5089 	add.w	r0, sp, #4384	; 0x1120
 801859a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801859e:	f010 fc92 	bl	8028ec6 <memcpy>
fptr = (float*)&buffer0[0];//gradients
for(int i = 0; i < 160; i++) v8_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v8_conv_1_bias_QAS[i]);
 80185a2:	4b1f      	ldr	r3, [pc, #124]	; (8018620 <invoke+0x2f50>)
fptr = (float*)&buffer0[0];//gradients
 80185a4:	f8cb 5000 	str.w	r5, [fp]
 80185a8:	f50d 5089 	add.w	r0, sp, #4384	; 0x1120
 80185ac:	6819      	ldr	r1, [r3, #0]
for(int i = 0; i < 160; i++) v8_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v8_conv_1_bias_QAS[i]);
 80185ae:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8018624 <invoke+0x2f54>
 80185b2:	3904      	subs	r1, #4
fptr = (float*)&buffer0[0];//gradients
 80185b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
for(int i = 0; i < 160; i++) v8_conv_1_bias[i] -= (int32_t)(fptr[i] * blr * v8_conv_1_bias_QAS[i]);
 80185b6:	ecb5 7a01 	vldmia	r5!, {s14}
 80185ba:	ecf0 7a01 	vldmia	r0!, {s15}
 80185be:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80185c2:	42a5      	cmp	r5, r4
 80185c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80185c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80185cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80185d0:	ee17 3a90 	vmov	r3, s15
 80185d4:	eba2 0303 	sub.w	r3, r2, r3
 80185d8:	600b      	str	r3, [r1, #0]
 80185da:	d1ec      	bne.n	80185b6 <invoke+0x2ee6>
}
 80185dc:	f50d 4da3 	add.w	sp, sp, #20864	; 0x5180
 80185e0:	b019      	add	sp, #100	; 0x64
 80185e2:	ecbd 8b02 	vpop	{d8}
 80185e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ea:	bf00      	nop
 80185ec:	2001aac0 	.word	0x2001aac0
 80185f0:	080312c8 	.word	0x080312c8
 80185f4:	20008418 	.word	0x20008418
 80185f8:	3a51b717 	.word	0x3a51b717
 80185fc:	7f7fffff 	.word	0x7f7fffff
 8018600:	ff7fffff 	.word	0xff7fffff
 8018604:	2000d440 	.word	0x2000d440
 8018608:	20004e6c 	.word	0x20004e6c
 801860c:	20017ac0 	.word	0x20017ac0
 8018610:	08043200 	.word	0x08043200
 8018614:	2003cfcc 	.word	0x2003cfcc
 8018618:	2000cf40 	.word	0x2000cf40
 801861c:	08031508 	.word	0x08031508
 8018620:	20004e64 	.word	0x20004e64
 8018624:	39d1b717 	.word	0x39d1b717

08018628 <invoke_inf>:
void invoke_inf(){
 8018628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 801862c:	f8df b3e0 	ldr.w	fp, [pc, #992]	; 8018a10 <invoke_inf+0x3e8>
 8018630:	2500      	movs	r5, #0
 8018632:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 8018636:	f04f 097f 	mov.w	r9, #127	; 0x7f
 801863a:	f50b 3ae0 	add.w	sl, fp, #114688	; 0x1c000
 801863e:	2740      	movs	r7, #64	; 0x40
 8018640:	f8df e3d0 	ldr.w	lr, [pc, #976]	; 8018a14 <invoke_inf+0x3ec>
 8018644:	2280      	movs	r2, #128	; 0x80
 8018646:	f8df c3d0 	ldr.w	ip, [pc, #976]	; 8018a18 <invoke_inf+0x3f0>
 801864a:	f5ab 3380 	sub.w	r3, fp, #65536	; 0x10000
 801864e:	f8df 83cc 	ldr.w	r8, [pc, #972]	; 8018a1c <invoke_inf+0x3f4>
 8018652:	4611      	mov	r1, r2
 8018654:	4eda      	ldr	r6, [pc, #872]	; (80189c0 <invoke_inf+0x398>)
 8018656:	4658      	mov	r0, fp
void invoke_inf(){
 8018658:	ed2d 8b04 	vpush	{d8-d9}
 801865c:	b093      	sub	sp, #76	; 0x4c
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
/* layer 8:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
/* layer 9:ADD */
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 801865e:	ed9f 8ad9 	vldr	s16, [pc, #868]	; 80189c4 <invoke_inf+0x39c>
/* layer 28:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
/* layer 29:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
/* layer 30:ADD */
add_fpreq_bitmask(3072, &buffer0[1280],0.034391046,2,&buffer0[19712],0.027072277,17,0.039104667,6,&buffer0[7040],&buffer0[10496]);
 8018662:	ed9f 9ad9 	vldr	s18, [pc, #868]	; 80189c8 <invoke_inf+0x3a0>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 8018666:	950d      	str	r5, [sp, #52]	; 0x34
 8018668:	9504      	str	r5, [sp, #16]
 801866a:	2510      	movs	r5, #16
 801866c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018670:	9307      	str	r3, [sp, #28]
 8018672:	2303      	movs	r3, #3
 8018674:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 8018678:	f04f 0808 	mov.w	r8, #8
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 801867c:	9708      	str	r7, [sp, #32]
/* layer 39:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
/* layer 40:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) weight35,bias35,scales35,-16,128,-128,127,&buffer0[30560],&buffer0[27296],4,4,96,sbuf);
/* layer 41:ADD */
add_fpreq_bitmask(1536, &buffer0[29024],0.027058998,-1,&buffer0[30560],0.022201976,-16,0.031616762,-1,&buffer0[32288],&buffer0[27488]);
 801867e:	eddf 8ad3 	vldr	s17, [pc, #844]	; 80189cc <invoke_inf+0x3a4>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[65536],128,128,3,(const q7_t*) weight0,bias0,scales0,-128,0,-128,127,&buffer0[0],64,64,16,sbuf,kbuf,0);
 8018682:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
 8018686:	e9cd ce00 	strd	ip, lr, [sp]
 801868a:	e9cd 6402 	strd	r6, r4, [sp, #8]
 801868e:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018692:	f00c f95b 	bl	802494c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 8018696:	f8df e388 	ldr.w	lr, [pc, #904]	; 8018a20 <invoke_inf+0x3f8>
 801869a:	f8df c388 	ldr.w	ip, [pc, #904]	; 8018a24 <invoke_inf+0x3fc>
 801869e:	f5aa 3030 	sub.w	r0, sl, #180224	; 0x2c000
 80186a2:	462b      	mov	r3, r5
 80186a4:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80186a8:	463a      	mov	r2, r7
 80186aa:	4639      	mov	r1, r7
 80186ac:	9709      	str	r7, [sp, #36]	; 0x24
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 80186ae:	2620      	movs	r6, #32
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],64,64,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],64,64,16,sbuf,-128);
 80186b0:	9008      	str	r0, [sp, #32]
 80186b2:	940d      	str	r4, [sp, #52]	; 0x34
 80186b4:	9404      	str	r4, [sp, #16]
 80186b6:	e9cd 750a 	strd	r7, r5, [sp, #40]	; 0x28
 80186ba:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80186be:	2580      	movs	r5, #128	; 0x80
 80186c0:	f8df e364 	ldr.w	lr, [pc, #868]	; 8018a28 <invoke_inf+0x400>
 80186c4:	f8df c364 	ldr.w	ip, [pc, #868]	; 8018a2c <invoke_inf+0x404>
 80186c8:	9505      	str	r5, [sp, #20]
 80186ca:	e9cd ce00 	strd	ip, lr, [sp]
 80186ce:	e9cd 4906 	strd	r4, r9, [sp, #24]
 80186d2:	f7f9 fbcf 	bl	8011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[0],64,64,16,(const q7_t*) weight2,bias2,scales2,-6,128,-128,127,&buffer0[147456],64,64,8,sbuf);
 80186d6:	f5aa 3030 	sub.w	r0, sl, #180224	; 0x2c000
 80186da:	9504      	str	r5, [sp, #16]
 80186dc:	463a      	mov	r2, r7
 80186de:	f500 3510 	add.w	r5, r0, #147456	; 0x24000
 80186e2:	f8df c34c 	ldr.w	ip, [pc, #844]	; 8018a30 <invoke_inf+0x408>
 80186e6:	f8df e34c 	ldr.w	lr, [pc, #844]	; 8018a34 <invoke_inf+0x40c>
 80186ea:	4639      	mov	r1, r7
 80186ec:	9507      	str	r5, [sp, #28]
 80186ee:	f06f 0505 	mvn.w	r5, #5
 80186f2:	f8cd c004 	str.w	ip, [sp, #4]
 80186f6:	2310      	movs	r3, #16
 80186f8:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8018a38 <invoke_inf+0x410>
 80186fc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018700:	9709      	str	r7, [sp, #36]	; 0x24
 8018702:	9708      	str	r7, [sp, #32]
 8018704:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018708:	f8cd c000 	str.w	ip, [sp]
 801870c:	e9cd e502 	strd	lr, r5, [sp, #8]
 8018710:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018714:	f00b f8f8 	bl	8023908 <convolve_1x1_s8_ch16_fpreq>
convolve_1x1_s8_ch8_fpreq(&buffer0[147456],64,64,8,(const q7_t*) weight3,bias3,scales3,-128,6,-128,127,&buffer0[16384],64,64,32,sbuf);
 8018718:	f5aa 4000 	sub.w	r0, sl, #32768	; 0x8000
 801871c:	f04f 0e06 	mov.w	lr, #6
 8018720:	f8df c318 	ldr.w	ip, [pc, #792]	; 8018a3c <invoke_inf+0x414>
 8018724:	f5a0 3500 	sub.w	r5, r0, #131072	; 0x20000
 8018728:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801872c:	f8cd e010 	str.w	lr, [sp, #16]
 8018730:	4643      	mov	r3, r8
 8018732:	f8cd c008 	str.w	ip, [sp, #8]
 8018736:	463a      	mov	r2, r7
 8018738:	f8df e304 	ldr.w	lr, [pc, #772]	; 8018a40 <invoke_inf+0x418>
 801873c:	4639      	mov	r1, r7
 801873e:	f8df c304 	ldr.w	ip, [pc, #772]	; 8018a44 <invoke_inf+0x41c>
 8018742:	9709      	str	r7, [sp, #36]	; 0x24
 8018744:	9708      	str	r7, [sp, #32]
 8018746:	9507      	str	r5, [sp, #28]
 8018748:	960a      	str	r6, [sp, #40]	; 0x28
 801874a:	9403      	str	r4, [sp, #12]
 801874c:	e9cd ce00 	strd	ip, lr, [sp]
 8018750:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018754:	f00b fb78 	bl	8023e48 <convolve_1x1_s8_ch8_fpreq>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[16384],64,64,32,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[16384],32,32,32,sbuf,-128);
 8018758:	f8df e2ec 	ldr.w	lr, [pc, #748]	; 8018a48 <invoke_inf+0x420>
 801875c:	463a      	mov	r2, r7
 801875e:	4639      	mov	r1, r7
 8018760:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8018a4c <invoke_inf+0x424>
 8018764:	2780      	movs	r7, #128	; 0x80
 8018766:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801876a:	4633      	mov	r3, r6
 801876c:	9508      	str	r5, [sp, #32]
 801876e:	4628      	mov	r0, r5
 8018770:	9609      	str	r6, [sp, #36]	; 0x24
 8018772:	940d      	str	r4, [sp, #52]	; 0x34
 8018774:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8018778:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801877c:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 8018a50 <invoke_inf+0x428>
 8018780:	4f93      	ldr	r7, [pc, #588]	; (80189d0 <invoke_inf+0x3a8>)
 8018782:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8018786:	e9cd 7c00 	strd	r7, ip, [sp]
 801878a:	e9cd 4906 	strd	r4, r9, [sp, #24]
 801878e:	f7fa fa27 	bl	8012be0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 8018792:	4f90      	ldr	r7, [pc, #576]	; (80189d4 <invoke_inf+0x3ac>)
 8018794:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8018798:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8018a54 <invoke_inf+0x42c>
 801879c:	f5a5 4280 	sub.w	r2, r5, #16384	; 0x4000
 80187a0:	9701      	str	r7, [sp, #4]
 80187a2:	f8cd e010 	str.w	lr, [sp, #16]
 80187a6:	2110      	movs	r1, #16
 80187a8:	f04f 0e00 	mov.w	lr, #0
 80187ac:	4f8a      	ldr	r7, [pc, #552]	; (80189d8 <invoke_inf+0x3b0>)
 80187ae:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80187b2:	4633      	mov	r3, r6
 80187b4:	9207      	str	r2, [sp, #28]
 80187b6:	4628      	mov	r0, r5
 80187b8:	4632      	mov	r2, r6
 80187ba:	910a      	str	r1, [sp, #40]	; 0x28
 80187bc:	9700      	str	r7, [sp, #0]
 80187be:	4631      	mov	r1, r6
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 80187c0:	4f86      	ldr	r7, [pc, #536]	; (80189dc <invoke_inf+0x3b4>)
convolve_1x1_s8_fpreq(&buffer0[16384],32,32,32,(const q7_t*) weight5,bias5,scales5,0,128,-128,127,&buffer0[0],32,32,16,sbuf);
 80187c2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80187c6:	e9cd 6608 	strd	r6, r6, [sp, #32]
 80187ca:	e9cd 4905 	strd	r4, r9, [sp, #20]
 80187ce:	f00b fc1b 	bl	8024008 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 80187d2:	f8df c284 	ldr.w	ip, [pc, #644]	; 8018a58 <invoke_inf+0x430>
 80187d6:	f5aa 3030 	sub.w	r0, sl, #180224	; 0x2c000
 80187da:	f04f 0e00 	mov.w	lr, #0
 80187de:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80187e2:	4632      	mov	r2, r6
 80187e4:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
 80187e8:	9609      	str	r6, [sp, #36]	; 0x24
 80187ea:	4631      	mov	r1, r6
 80187ec:	9608      	str	r6, [sp, #32]
 80187ee:	9507      	str	r5, [sp, #28]
 80187f0:	2310      	movs	r3, #16
 80187f2:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 80187f6:	e9cd 4e03 	strd	r4, lr, [sp, #12]
 80187fa:	4f79      	ldr	r7, [pc, #484]	; (80189e0 <invoke_inf+0x3b8>)
 80187fc:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8018800:	9700      	str	r7, [sp, #0]
 8018802:	4675      	mov	r5, lr
 8018804:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 8018808:	4f76      	ldr	r7, [pc, #472]	; (80189e4 <invoke_inf+0x3bc>)
convolve_1x1_s8_ch16_fpreq(&buffer0[0],32,32,16,(const q7_t*) weight6,bias6,scales6,-128,0,-128,127,&buffer0[16384],32,32,48,sbuf);
 801880a:	e9cd 4905 	strd	r4, r9, [sp, #20]
 801880e:	f00b f87b 	bl	8023908 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[16384],32,32,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[16384],32,32,48,sbuf,-128);
 8018812:	f8df c248 	ldr.w	ip, [pc, #584]	; 8018a5c <invoke_inf+0x434>
 8018816:	462b      	mov	r3, r5
 8018818:	f5aa 3020 	sub.w	r0, sl, #163840	; 0x28000
 801881c:	2580      	movs	r5, #128	; 0x80
 801881e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8018822:	4632      	mov	r2, r6
 8018824:	4631      	mov	r1, r6
 8018826:	9609      	str	r6, [sp, #36]	; 0x24
 8018828:	9008      	str	r0, [sp, #32]
 801882a:	940d      	str	r4, [sp, #52]	; 0x34
 801882c:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 8018830:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8018a60 <invoke_inf+0x438>
 8018834:	4f6c      	ldr	r7, [pc, #432]	; (80189e8 <invoke_inf+0x3c0>)
 8018836:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 801883a:	e9cd 7c00 	strd	r7, ip, [sp]
 801883e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018842:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018846:	f7f9 fb15 	bl	8011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[16384],32,32,48,(const q7_t*) weight8,bias8,scales8,14,128,-128,127,&buffer0[65536],32,32,16,sbuf);
 801884a:	4f68      	ldr	r7, [pc, #416]	; (80189ec <invoke_inf+0x3c4>)
 801884c:	f04f 0c0e 	mov.w	ip, #14
 8018850:	2210      	movs	r2, #16
 8018852:	9702      	str	r7, [sp, #8]
 8018854:	4631      	mov	r1, r6
 8018856:	4f66      	ldr	r7, [pc, #408]	; (80189f0 <invoke_inf+0x3c8>)
 8018858:	f5aa 3020 	sub.w	r0, sl, #163840	; 0x28000
 801885c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018860:	2330      	movs	r3, #48	; 0x30
 8018862:	920a      	str	r2, [sp, #40]	; 0x28
 8018864:	4632      	mov	r2, r6
 8018866:	9609      	str	r6, [sp, #36]	; 0x24
 8018868:	e9cd c503 	strd	ip, r5, [sp, #12]
 801886c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8018a64 <invoke_inf+0x43c>
 8018870:	e9cd b607 	strd	fp, r6, [sp, #28]
 8018874:	e9cd 7c00 	strd	r7, ip, [sp]
 8018878:	e9cd 4905 	strd	r4, r9, [sp, #20]
 801887c:	f00b fa04 	bl	8023c88 <convolve_1x1_s8_ch48_fpreq>
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 8018880:	f5aa 3130 	sub.w	r1, sl, #180224	; 0x2c000
 8018884:	eef0 0a48 	vmov.f32	s1, s16
 8018888:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80189f4 <invoke_inf+0x3cc>
 801888c:	eef2 2a08 	vmov.f32	s5, #40	; 0x41400000  12.0
 8018890:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80189f8 <invoke_inf+0x3d0>
 8018894:	eef2 1a0c 	vmov.f32	s3, #44	; 0x41600000  14.0
 8018898:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80189fc <invoke_inf+0x3d4>
 801889c:	f501 33a0 	add.w	r3, r1, #81920	; 0x14000
 80188a0:	465a      	mov	r2, fp
 80188a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 80188a6:	2778      	movs	r7, #120	; 0x78
add_fpreq(16384, &buffer0[0],0.057521824,0,&buffer0[65536],0.10736182,14,0.10652236,12,&buffer0[81920]);
 80188a8:	f00a ff6a 	bl	8023780 <add_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[81920],32,32,16,(const q7_t*) weight9,bias9,scales9,-128,-12,-128,127,&buffer0[6144],32,32,48,sbuf);
 80188ac:	f5aa 30c0 	sub.w	r0, sl, #98304	; 0x18000
 80188b0:	f06f 0e0b 	mvn.w	lr, #11
 80188b4:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8018a68 <invoke_inf+0x440>
 80188b8:	f5a0 3594 	sub.w	r5, r0, #75776	; 0x12800
 80188bc:	2130      	movs	r1, #48	; 0x30
 80188be:	f8cd e010 	str.w	lr, [sp, #16]
 80188c2:	4632      	mov	r2, r6
 80188c4:	f8cd c008 	str.w	ip, [sp, #8]
 80188c8:	2310      	movs	r3, #16
 80188ca:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8018a6c <invoke_inf+0x444>
 80188ce:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8018a70 <invoke_inf+0x448>
 80188d2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80188d6:	910a      	str	r1, [sp, #40]	; 0x28
 80188d8:	4631      	mov	r1, r6
 80188da:	9609      	str	r6, [sp, #36]	; 0x24
 80188dc:	9608      	str	r6, [sp, #32]
 80188de:	9507      	str	r5, [sp, #28]
 80188e0:	9403      	str	r4, [sp, #12]
 80188e2:	e9cd ce00 	strd	ip, lr, [sp]
 80188e6:	e9cd 4905 	strd	r4, r9, [sp, #20]
 80188ea:	f00b f80d 	bl	8023908 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 80188ee:	4632      	mov	r2, r6
 80188f0:	4631      	mov	r1, r6
 80188f2:	2610      	movs	r6, #16
 80188f4:	f8df e17c 	ldr.w	lr, [pc, #380]	; 8018a74 <invoke_inf+0x44c>
 80188f8:	2330      	movs	r3, #48	; 0x30
 80188fa:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8018a78 <invoke_inf+0x450>
 80188fe:	4628      	mov	r0, r5
 8018900:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8018904:	9508      	str	r5, [sp, #32]
 8018906:	930b      	str	r3, [sp, #44]	; 0x2c
 8018908:	940d      	str	r4, [sp, #52]	; 0x34
 801890a:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 801890e:	2680      	movs	r6, #128	; 0x80
 8018910:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8018914:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8018918:	f8df c160 	ldr.w	ip, [pc, #352]	; 8018a7c <invoke_inf+0x454>
 801891c:	4e38      	ldr	r6, [pc, #224]	; (8018a00 <invoke_inf+0x3d8>)
 801891e:	e9cd 6c00 	strd	r6, ip, [sp]
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 8018922:	2680      	movs	r6, #128	; 0x80
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[6144],32,32,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[6144],16,16,48,sbuf,-128);
 8018924:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018928:	f7fc f866 	bl	80149f8 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[6144],16,16,48,(const q7_t*) weight11,bias11,scales11,-5,128,-128,127,&buffer0[0],16,16,24,sbuf);
 801892c:	f8df e150 	ldr.w	lr, [pc, #336]	; 8018a80 <invoke_inf+0x458>
 8018930:	f5a5 52c0 	sub.w	r2, r5, #6144	; 0x1800
 8018934:	9604      	str	r6, [sp, #16]
 8018936:	f06f 0c04 	mvn.w	ip, #4
 801893a:	2618      	movs	r6, #24
 801893c:	9207      	str	r2, [sp, #28]
 801893e:	2210      	movs	r2, #16
 8018940:	960a      	str	r6, [sp, #40]	; 0x28
 8018942:	4628      	mov	r0, r5
 8018944:	4e2f      	ldr	r6, [pc, #188]	; (8018a04 <invoke_inf+0x3dc>)
 8018946:	4611      	mov	r1, r2
 8018948:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801894c:	2330      	movs	r3, #48	; 0x30
 801894e:	9209      	str	r2, [sp, #36]	; 0x24
 8018950:	9208      	str	r2, [sp, #32]
 8018952:	e9cd ec02 	strd	lr, ip, [sp, #8]
 8018956:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8018a84 <invoke_inf+0x45c>
 801895a:	e9cd 4905 	strd	r4, r9, [sp, #20]
 801895e:	e9cd 6c00 	strd	r6, ip, [sp]
 8018962:	f00b f991 	bl	8023c88 <convolve_1x1_s8_ch48_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[0],16,16,24,(const q7_t*) weight12,bias12,scales12,-128,5,-128,127,&buffer0[6144],16,16,120,sbuf);
 8018966:	f04f 0c05 	mov.w	ip, #5
 801896a:	2210      	movs	r2, #16
 801896c:	f8df e118 	ldr.w	lr, [pc, #280]	; 8018a88 <invoke_inf+0x460>
 8018970:	f8cd c010 	str.w	ip, [sp, #16]
 8018974:	f5a5 50c0 	sub.w	r0, r5, #6144	; 0x1800
 8018978:	f8df c110 	ldr.w	ip, [pc, #272]	; 8018a8c <invoke_inf+0x464>
 801897c:	4611      	mov	r1, r2
 801897e:	4e22      	ldr	r6, [pc, #136]	; (8018a08 <invoke_inf+0x3e0>)
 8018980:	2318      	movs	r3, #24
 8018982:	f8cd e008 	str.w	lr, [sp, #8]
 8018986:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801898a:	9507      	str	r5, [sp, #28]
 801898c:	9209      	str	r2, [sp, #36]	; 0x24
 801898e:	9208      	str	r2, [sp, #32]
 8018990:	970a      	str	r7, [sp, #40]	; 0x28
 8018992:	9403      	str	r4, [sp, #12]
 8018994:	e9cd 6c00 	strd	r6, ip, [sp]
 8018998:	e9cd 4905 	strd	r4, r9, [sp, #20]
 801899c:	f00b f894 	bl	8023ac8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[6144],16,16,120,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[6144],16,16,120,sbuf,-128);
 80189a0:	4e1a      	ldr	r6, [pc, #104]	; (8018a0c <invoke_inf+0x3e4>)
 80189a2:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8018a90 <invoke_inf+0x468>
 80189a6:	2210      	movs	r2, #16
 80189a8:	9508      	str	r5, [sp, #32]
 80189aa:	4628      	mov	r0, r5
 80189ac:	2580      	movs	r5, #128	; 0x80
 80189ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80189b2:	463b      	mov	r3, r7
 80189b4:	4611      	mov	r1, r2
 80189b6:	970b      	str	r7, [sp, #44]	; 0x2c
 80189b8:	940d      	str	r4, [sp, #52]	; 0x34
 80189ba:	e9cd 6c02 	strd	r6, ip, [sp, #8]
 80189be:	e069      	b.n	8018a94 <invoke_inf+0x46c>
 80189c0:	08041fa0 	.word	0x08041fa0
 80189c4:	00000000 	.word	0x00000000
 80189c8:	3d202c37 	.word	0x3d202c37
 80189cc:	3d018094 	.word	0x3d018094
 80189d0:	0803e9f0 	.word	0x0803e9f0
 80189d4:	08040ca0 	.word	0x08040ca0
 80189d8:	080b1198 	.word	0x080b1198
 80189dc:	08040ce0 	.word	0x08040ce0
 80189e0:	080b1398 	.word	0x080b1398
 80189e4:	08041ee0 	.word	0x08041ee0
 80189e8:	0803ff50 	.word	0x0803ff50
 80189ec:	08047ca8 	.word	0x08047ca8
 80189f0:	080b1698 	.word	0x080b1698
 80189f4:	3dda2865 	.word	0x3dda2865
 80189f8:	3ddbe084 	.word	0x3ddbe084
 80189fc:	3d6b9c01 	.word	0x3d6b9c01
 8018a00:	08032550 	.word	0x08032550
 8018a04:	08047f58 	.word	0x08047f58
 8018a08:	080483d8 	.word	0x080483d8
 8018a0c:	08041820 	.word	0x08041820
 8018a10:	2001cf40 	.word	0x2001cf40
 8018a14:	08040100 	.word	0x08040100
 8018a18:	08047da8 	.word	0x08047da8
 8018a1c:	2003b148 	.word	0x2003b148
 8018a20:	08041fe0 	.word	0x08041fe0
 8018a24:	08041720 	.word	0x08041720
 8018a28:	08040ea0 	.word	0x08040ea0
 8018a2c:	080324c0 	.word	0x080324c0
 8018a30:	080408e0 	.word	0x080408e0
 8018a34:	08042ec0 	.word	0x08042ec0
 8018a38:	0804d158 	.word	0x0804d158
 8018a3c:	08044140 	.word	0x08044140
 8018a40:	08040c20 	.word	0x08040c20
 8018a44:	080592e8 	.word	0x080592e8
 8018a48:	08046ec0 	.word	0x08046ec0
 8018a4c:	08041e60 	.word	0x08041e60
 8018a50:	080415e0 	.word	0x080415e0
 8018a54:	08047ae8 	.word	0x08047ae8
 8018a58:	08047b28 	.word	0x08047b28
 8018a5c:	08047be8 	.word	0x08047be8
 8018a60:	08041660 	.word	0x08041660
 8018a64:	08040da0 	.word	0x08040da0
 8018a68:	08047ce8 	.word	0x08047ce8
 8018a6c:	08040de0 	.word	0x08040de0
 8018a70:	080b1998 	.word	0x080b1998
 8018a74:	08042020 	.word	0x08042020
 8018a78:	08041760 	.word	0x08041760
 8018a7c:	08040ee0 	.word	0x08040ee0
 8018a80:	080420e0 	.word	0x080420e0
 8018a84:	08040140 	.word	0x08040140
 8018a88:	08042140 	.word	0x08042140
 8018a8c:	080401a0 	.word	0x080401a0
 8018a90:	08042320 	.word	0x08042320
 8018a94:	f8df c3cc 	ldr.w	ip, [pc, #972]	; 8018e64 <invoke_inf+0x83c>
 8018a98:	4ee1      	ldr	r6, [pc, #900]	; (8018e20 <invoke_inf+0x7f8>)
 8018a9a:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 8018a9e:	e9cd 6c00 	strd	r6, ip, [sp]
 8018aa2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018aa6:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018aaa:	f7f9 f9e3 	bl	8011e74 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8018aae:	2580      	movs	r5, #128	; 0x80
 8018ab0:	f5ab 4068 	sub.w	r0, fp, #59392	; 0xe800
 8018ab4:	f06f 0e21 	mvn.w	lr, #33	; 0x21
 8018ab8:	f8df c3ac 	ldr.w	ip, [pc, #940]	; 8018e68 <invoke_inf+0x840>
 8018abc:	2210      	movs	r2, #16
 8018abe:	9504      	str	r5, [sp, #16]
 8018ac0:	2118      	movs	r1, #24
 8018ac2:	f500 45f0 	add.w	r5, r0, #30720	; 0x7800
add_fpreq(6144, &buffer0[0],0.04381648,-5,&buffer0[36864],0.05460287,-34,0.06156369,-11,&buffer0[43008]);
 8018ac6:	f5ab 46b0 	sub.w	r6, fp, #22528	; 0x5800
convolve_1x1_s8_fpreq(&buffer0[6144],16,16,120,(const q7_t*) weight14,bias14,scales14,-34,128,-128,127,&buffer0[36864],16,16,24,sbuf);
 8018aca:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018ace:	463b      	mov	r3, r7
 8018ad0:	910a      	str	r1, [sp, #40]	; 0x28
 8018ad2:	4611      	mov	r1, r2
 8018ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8018ad6:	9208      	str	r2, [sp, #32]
 8018ad8:	9507      	str	r5, [sp, #28]
 8018ada:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8018ade:	f8df e38c 	ldr.w	lr, [pc, #908]	; 8018e6c <invoke_inf+0x844>
 8018ae2:	f8df c38c 	ldr.w	ip, [pc, #908]	; 8018e70 <invoke_inf+0x848>
 8018ae6:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018aea:	e9cd ce00 	strd	ip, lr, [sp]
 8018aee:	f00b fa8b 	bl	8024008 <convolve_1x1_s8_fpreq>
add_fpreq(6144, &buffer0[0],0.04381648,-5,&buffer0[36864],0.05460287,-34,0.06156369,-11,&buffer0[43008]);
 8018af2:	eefa 2a06 	vmov.f32	s5, #166	; 0xc1300000 -11.0
 8018af6:	ed9f 2acb 	vldr	s4, [pc, #812]	; 8018e24 <invoke_inf+0x7fc>
 8018afa:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 8018afe:	eddf 1aca 	vldr	s3, [pc, #808]	; 8018e28 <invoke_inf+0x800>
 8018b02:	462a      	mov	r2, r5
 8018b04:	ed9f 1ac9 	vldr	s2, [pc, #804]	; 8018e2c <invoke_inf+0x804>
 8018b08:	f5a5 4110 	sub.w	r1, r5, #36864	; 0x9000
 8018b0c:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8018e30 <invoke_inf+0x808>
 8018b10:	4633      	mov	r3, r6
 8018b12:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8018b16:	f5a6 451e 	sub.w	r5, r6, #40448	; 0x9e00
add_fpreq(6144, &buffer0[0],0.04381648,-5,&buffer0[36864],0.05460287,-34,0.06156369,-11,&buffer0[43008]);
 8018b1a:	f00a fe31 	bl	8023780 <add_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[43008],16,16,24,(const q7_t*) weight15,bias15,scales15,-128,11,-128,127,&buffer0[2560],16,16,120,sbuf);
 8018b1e:	f8df c354 	ldr.w	ip, [pc, #852]	; 8018e74 <invoke_inf+0x84c>
 8018b22:	2210      	movs	r2, #16
 8018b24:	f04f 0e0b 	mov.w	lr, #11
 8018b28:	f8cd c008 	str.w	ip, [sp, #8]
 8018b2c:	4630      	mov	r0, r6
 8018b2e:	f8df c348 	ldr.w	ip, [pc, #840]	; 8018e78 <invoke_inf+0x850>
 8018b32:	4611      	mov	r1, r2
 8018b34:	4ebf      	ldr	r6, [pc, #764]	; (8018e34 <invoke_inf+0x80c>)
 8018b36:	2318      	movs	r3, #24
 8018b38:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018b3c:	970a      	str	r7, [sp, #40]	; 0x28
 8018b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8018b40:	9208      	str	r2, [sp, #32]
 8018b42:	9507      	str	r5, [sp, #28]
 8018b44:	f8cd e010 	str.w	lr, [sp, #16]
 8018b48:	9403      	str	r4, [sp, #12]
 8018b4a:	e9cd 6c00 	strd	r6, ip, [sp]
 8018b4e:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018b52:	f00a ffb9 	bl	8023ac8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[2560],16,16,120,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[2560],8,8,120,sbuf,-128);
 8018b56:	f8df e324 	ldr.w	lr, [pc, #804]	; 8018e7c <invoke_inf+0x854>
 8018b5a:	f8df c324 	ldr.w	ip, [pc, #804]	; 8018e80 <invoke_inf+0x858>
 8018b5e:	2210      	movs	r2, #16
 8018b60:	9508      	str	r5, [sp, #32]
 8018b62:	4628      	mov	r0, r5
 8018b64:	2680      	movs	r6, #128	; 0x80
 8018b66:	4db4      	ldr	r5, [pc, #720]	; (8018e38 <invoke_inf+0x810>)
 8018b68:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8018b6c:	463b      	mov	r3, r7
 8018b6e:	4611      	mov	r1, r2
 8018b70:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8018b74:	940d      	str	r4, [sp, #52]	; 0x34
 8018b76:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8018b7a:	f8df c308 	ldr.w	ip, [pc, #776]	; 8018e84 <invoke_inf+0x85c>
 8018b7e:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
 8018b82:	e9cd 5c00 	strd	r5, ip, [sp]
 8018b86:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8018b8a:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018b8e:	f7fa f827 	bl	8012be0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8018b92:	2680      	movs	r6, #128	; 0x80
 8018b94:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 8018e88 <invoke_inf+0x860>
 8018b98:	463b      	mov	r3, r7
 8018b9a:	f5ab 4076 	sub.w	r0, fp, #62976	; 0xf600
 8018b9e:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8018e8c <invoke_inf+0x864>
 8018ba2:	2700      	movs	r7, #0
 8018ba4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018ba8:	f5a0 6220 	sub.w	r2, r0, #2560	; 0xa00
 8018bac:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8018bb0:	4641      	mov	r1, r8
 8018bb2:	f8cd 8020 	str.w	r8, [sp, #32]
 8018bb6:	9207      	str	r2, [sp, #28]
 8018bb8:	4642      	mov	r2, r8
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8018bba:	f5ab 454e 	sub.w	r5, fp, #52736	; 0xce00
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8018bbe:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018bc2:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8018bc6:	2628      	movs	r6, #40	; 0x28
 8018bc8:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8018e90 <invoke_inf+0x868>
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 8018bcc:	f5ab 4744 	sub.w	r7, fp, #50176	; 0xc400
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,120,(const q7_t*) weight17,bias17,scales17,0,128,-128,127,&buffer0[0],8,8,40,sbuf);
 8018bd0:	960a      	str	r6, [sp, #40]	; 0x28
 8018bd2:	f8cd c000 	str.w	ip, [sp]
 8018bd6:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018bda:	f00b fa15 	bl	8024008 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],8,8,40,(const q7_t*) weight18,bias18,scales18,-128,0,-128,127,&buffer0[2560],8,8,160,sbuf);
 8018bde:	f5ab 4376 	sub.w	r3, fp, #62976	; 0xf600
 8018be2:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8018e94 <invoke_inf+0x86c>
 8018be6:	4642      	mov	r2, r8
 8018be8:	9307      	str	r3, [sp, #28]
 8018bea:	4633      	mov	r3, r6
 8018bec:	2600      	movs	r6, #0
 8018bee:	f8cd c008 	str.w	ip, [sp, #8]
 8018bf2:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8018e98 <invoke_inf+0x870>
 8018bf6:	4641      	mov	r1, r8
 8018bf8:	9604      	str	r6, [sp, #16]
 8018bfa:	26a0      	movs	r6, #160	; 0xa0
 8018bfc:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8018e9c <invoke_inf+0x874>
 8018c00:	f5ab 3080 	sub.w	r0, fp, #65536	; 0x10000
 8018c04:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018c08:	960a      	str	r6, [sp, #40]	; 0x28
 8018c0a:	9403      	str	r4, [sp, #12]
 8018c0c:	9405      	str	r4, [sp, #20]
 8018c0e:	f8cd 9018 	str.w	r9, [sp, #24]
 8018c12:	e9cd ce00 	strd	ip, lr, [sp]
 8018c16:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8018c1a:	f00b f9f5 	bl	8024008 <convolve_1x1_s8_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[2560],8,8,160,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[2560],8,8,160,sbuf,-128);
 8018c1e:	f8df c280 	ldr.w	ip, [pc, #640]	; 8018ea0 <invoke_inf+0x878>
 8018c22:	f5ab 4376 	sub.w	r3, fp, #62976	; 0xf600
 8018c26:	f8df e27c 	ldr.w	lr, [pc, #636]	; 8018ea4 <invoke_inf+0x87c>
 8018c2a:	f8cd c00c 	str.w	ip, [sp, #12]
 8018c2e:	4642      	mov	r2, r8
 8018c30:	f8df c274 	ldr.w	ip, [pc, #628]	; 8018ea8 <invoke_inf+0x880>
 8018c34:	4618      	mov	r0, r3
 8018c36:	9308      	str	r3, [sp, #32]
 8018c38:	4633      	mov	r3, r6
 8018c3a:	960b      	str	r6, [sp, #44]	; 0x2c
 8018c3c:	2680      	movs	r6, #128	; 0x80
 8018c3e:	4641      	mov	r1, r8
 8018c40:	9404      	str	r4, [sp, #16]
 8018c42:	9605      	str	r6, [sp, #20]
 8018c44:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8018c48:	f8df c260 	ldr.w	ip, [pc, #608]	; 8018eac <invoke_inf+0x884>
 8018c4c:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8018c50:	e9cd a40c 	strd	sl, r4, [sp, #48]	; 0x30
 8018c54:	f8cd c000 	str.w	ip, [sp]
 8018c58:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018c5c:	f7fb f9fa 	bl	8014054 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[2560],8,8,160,(const q7_t*) weight20,bias20,scales20,22,128,-128,127,&buffer0[12800],8,8,40,sbuf);
 8018c60:	f04f 0e16 	mov.w	lr, #22
 8018c64:	f8df c248 	ldr.w	ip, [pc, #584]	; 8018eb0 <invoke_inf+0x888>
 8018c68:	2328      	movs	r3, #40	; 0x28
 8018c6a:	9604      	str	r6, [sp, #16]
 8018c6c:	4642      	mov	r2, r8
 8018c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8018c70:	4641      	mov	r1, r8
 8018c72:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018c76:	f5ab 4076 	sub.w	r0, fp, #62976	; 0xf600
 8018c7a:	9507      	str	r5, [sp, #28]
 8018c7c:	23a0      	movs	r3, #160	; 0xa0
 8018c7e:	9405      	str	r4, [sp, #20]
 8018c80:	f8cd 9018 	str.w	r9, [sp, #24]
 8018c84:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8018c88:	f8df e228 	ldr.w	lr, [pc, #552]	; 8018eb4 <invoke_inf+0x88c>
 8018c8c:	f8df c228 	ldr.w	ip, [pc, #552]	; 8018eb8 <invoke_inf+0x890>
 8018c90:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8018c94:	e9cd ce00 	strd	ip, lr, [sp]
 8018c98:	f00b f9b6 	bl	8024008 <convolve_1x1_s8_fpreq>
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 8018c9c:	eef0 0a48 	vmov.f32	s1, s16
 8018ca0:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 8018ca4:	ed9f 2a65 	vldr	s4, [pc, #404]	; 8018e3c <invoke_inf+0x814>
 8018ca8:	eef3 1a06 	vmov.f32	s3, #54	; 0x41b00000  22.0
 8018cac:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8018e40 <invoke_inf+0x818>
 8018cb0:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8018e44 <invoke_inf+0x81c>
 8018cb4:	462a      	mov	r2, r5
 8018cb6:	f5a5 5148 	sub.w	r1, r5, #12800	; 0x3200
 8018cba:	463b      	mov	r3, r7
 8018cbc:	f44f 6020 	mov.w	r0, #2560	; 0xa00
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8018cc0:	4d61      	ldr	r5, [pc, #388]	; (8018e48 <invoke_inf+0x820>)
add_fpreq(2560, &buffer0[0],0.036471475,0,&buffer0[12800],0.031147331,22,0.0372383,3,&buffer0[15360]);
 8018cc2:	f00a fd5d 	bl	8023780 <add_fpreq>
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8018cc6:	4638      	mov	r0, r7
 8018cc8:	f06f 0c02 	mvn.w	ip, #2
 8018ccc:	4f5f      	ldr	r7, [pc, #380]	; (8018e4c <invoke_inf+0x824>)
 8018cce:	f5a0 5626 	sub.w	r6, r0, #10624	; 0x2980
 8018cd2:	22a0      	movs	r2, #160	; 0xa0
 8018cd4:	f8cd c010 	str.w	ip, [sp, #16]
 8018cd8:	4641      	mov	r1, r8
 8018cda:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8018ebc <invoke_inf+0x894>
 8018cde:	2328      	movs	r3, #40	; 0x28
 8018ce0:	920a      	str	r2, [sp, #40]	; 0x28
 8018ce2:	4642      	mov	r2, r8
 8018ce4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8018ce8:	9607      	str	r6, [sp, #28]
 8018cea:	9502      	str	r5, [sp, #8]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8018cec:	f5ab 4557 	sub.w	r5, fp, #55040	; 0xd700
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8018cf0:	9701      	str	r7, [sp, #4]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8018cf2:	2790      	movs	r7, #144	; 0x90
convolve_1x1_s8_fpreq(&buffer0[15360],8,8,40,(const q7_t*) weight21,bias21,scales21,-128,-3,-128,127,&buffer0[4736],8,8,160,sbuf);
 8018cf4:	f8cd c000 	str.w	ip, [sp]
 8018cf8:	9403      	str	r4, [sp, #12]
 8018cfa:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8018cfe:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018d02:	f00b f981 	bl	8024008 <convolve_1x1_s8_fpreq>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[4736],&buffer0[0],8,8,160,sbuf,-128);
 8018d06:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8018d0a:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8018ec0 <invoke_inf+0x898>
 8018d0e:	f5a6 5194 	sub.w	r1, r6, #4736	; 0x1280
 8018d12:	9608      	str	r6, [sp, #32]
 8018d14:	4630      	mov	r0, r6
 8018d16:	f8cd c00c 	str.w	ip, [sp, #12]
 8018d1a:	4676      	mov	r6, lr
 8018d1c:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8018ec4 <invoke_inf+0x89c>
 8018d20:	23a0      	movs	r3, #160	; 0xa0
 8018d22:	4642      	mov	r2, r8
 8018d24:	9109      	str	r1, [sp, #36]	; 0x24
 8018d26:	940e      	str	r4, [sp, #56]	; 0x38
 8018d28:	4641      	mov	r1, r8
 8018d2a:	e9cd 4e04 	strd	r4, lr, [sp, #16]
 8018d2e:	f8df e198 	ldr.w	lr, [pc, #408]	; 8018ec8 <invoke_inf+0x8a0>
 8018d32:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8018d36:	f8df c194 	ldr.w	ip, [pc, #404]	; 8018ecc <invoke_inf+0x8a4>
 8018d3a:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 8018d3e:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
 8018d42:	f8cd c000 	str.w	ip, [sp]
 8018d46:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018d4a:	f7fa fa55 	bl	80131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8018d4e:	f5ab 416f 	sub.w	r1, fp, #61184	; 0xef00
 8018d52:	2030      	movs	r0, #48	; 0x30
 8018d54:	f04f 0e02 	mov.w	lr, #2
 8018d58:	9604      	str	r6, [sp, #16]
 8018d5a:	4642      	mov	r2, r8
 8018d5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8018d5e:	f501 70c0 	add.w	r0, r1, #384	; 0x180
 8018d62:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8018ed0 <invoke_inf+0x8a8>
 8018d66:	23a0      	movs	r3, #160	; 0xa0
 8018d68:	f5a0 6658 	sub.w	r6, r0, #3456	; 0xd80
 8018d6c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8018d70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018d74:	9607      	str	r6, [sp, #28]
 8018d76:	4e36      	ldr	r6, [pc, #216]	; (8018e50 <invoke_inf+0x828>)
 8018d78:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8018d7c:	9108      	str	r1, [sp, #32]
 8018d7e:	4641      	mov	r1, r8
 8018d80:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8018d84:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8018ed4 <invoke_inf+0x8ac>
 8018d88:	e9cd 6c00 	strd	r6, ip, [sp]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8018d8c:	4e31      	ldr	r6, [pc, #196]	; (8018e54 <invoke_inf+0x82c>)
convolve_1x1_s8_fpreq_bitmask(&buffer0[4736],8,8,160,(const q7_t*) weight23,bias23,scales23,2,128,-128,127,&buffer0[1280],&buffer0[4352],8,8,48,sbuf);
 8018d8e:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018d92:	f00b fa1d 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[1280],8,8,48,(const q7_t*)weight24,(const q7_t*)weight24Flash,12,bias24,scales24,-128,-2,-128,127,&buffer0[10496],&buffer0[4736],8,8,144,sbuf);
 8018d96:	f5ab 407b 	sub.w	r0, fp, #64256	; 0xfb00
 8018d9a:	f04f 0e0c 	mov.w	lr, #12
 8018d9e:	9604      	str	r6, [sp, #16]
 8018da0:	f06f 0c01 	mvn.w	ip, #1
 8018da4:	4e2c      	ldr	r6, [pc, #176]	; (8018e58 <invoke_inf+0x830>)
 8018da6:	f500 6358 	add.w	r3, r0, #3456	; 0xd80
 8018daa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018dae:	f8cd c018 	str.w	ip, [sp, #24]
 8018db2:	4642      	mov	r2, r8
 8018db4:	f8df c120 	ldr.w	ip, [pc, #288]	; 8018ed8 <invoke_inf+0x8b0>
 8018db8:	4641      	mov	r1, r8
 8018dba:	930a      	str	r3, [sp, #40]	; 0x28
 8018dbc:	2330      	movs	r3, #48	; 0x30
 8018dbe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018dc2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8018dc6:	9509      	str	r5, [sp, #36]	; 0x24
 8018dc8:	970d      	str	r7, [sp, #52]	; 0x34
 8018dca:	9405      	str	r4, [sp, #20]
 8018dcc:	e9cd e602 	strd	lr, r6, [sp, #8]
 8018dd0:	4e22      	ldr	r6, [pc, #136]	; (8018e5c <invoke_inf+0x834>)
 8018dd2:	e9cd 4907 	strd	r4, r9, [sp, #28]
 8018dd6:	e9cd 6c00 	strd	r6, ip, [sp]
 8018dda:	f00b fb1b 	bl	8024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[10496],&buffer0[5888],8,8,144,sbuf,-128);
 8018dde:	2680      	movs	r6, #128	; 0x80
 8018de0:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8018edc <invoke_inf+0x8b4>
 8018de4:	f5ab 4169 	sub.w	r1, fp, #59648	; 0xe900
 8018de8:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8018ee0 <invoke_inf+0x8b8>
 8018dec:	463b      	mov	r3, r7
 8018dee:	9508      	str	r5, [sp, #32]
 8018df0:	4642      	mov	r2, r8
 8018df2:	9109      	str	r1, [sp, #36]	; 0x24
 8018df4:	4628      	mov	r0, r5
 8018df6:	4641      	mov	r1, r8
 8018df8:	940e      	str	r4, [sp, #56]	; 0x38
 8018dfa:	e9cd ec02 	strd	lr, ip, [sp, #8]
 8018dfe:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8018e02:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8018ee4 <invoke_inf+0x8bc>
 8018e06:	4e16      	ldr	r6, [pc, #88]	; (8018e60 <invoke_inf+0x838>)
 8018e08:	e9cd 7a0c 	strd	r7, sl, [sp, #48]	; 0x30
 8018e0c:	e9cd 6c00 	strd	r6, ip, [sp]
 8018e10:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
 8018e14:	e9cd 4906 	strd	r4, r9, [sp, #24]
 8018e18:	f7f9 fcea 	bl	80127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[10496],8,8,144,(const q7_t*) weight26,bias26,scales26,17,128,-128,127,&buffer0[19712],&buffer0[10112],8,8,48,sbuf);
 8018e1c:	463b      	mov	r3, r7
 8018e1e:	e063      	b.n	8018ee8 <invoke_inf+0x8c0>
 8018e20:	08032e80 	.word	0x08032e80
 8018e24:	3d7c2a35 	.word	0x3d7c2a35
 8018e28:	c2080000 	.word	0xc2080000
 8018e2c:	3d5fa742 	.word	0x3d5fa742
 8018e30:	3d3378e9 	.word	0x3d3378e9
 8018e34:	08049a58 	.word	0x08049a58
 8018e38:	080332b8 	.word	0x080332b8
 8018e3c:	3d188730 	.word	0x3d188730
 8018e40:	3cff28b0 	.word	0x3cff28b0
 8018e44:	3d15631d 	.word	0x3d15631d
 8018e48:	08042f80 	.word	0x08042f80
 8018e4c:	080409a0 	.word	0x080409a0
 8018e50:	080503d8 	.word	0x080503d8
 8018e54:	08043540 	.word	0x08043540
 8018e58:	200000dc 	.word	0x200000dc
 8018e5c:	20004e8c 	.word	0x20004e8c
 8018e60:	08036530 	.word	0x08036530
 8018e64:	08040fa0 	.word	0x08040fa0
 8018e68:	08042500 	.word	0x08042500
 8018e6c:	08040380 	.word	0x08040380
 8018e70:	08048f18 	.word	0x08048f18
 8018e74:	08042560 	.word	0x08042560
 8018e78:	080403e0 	.word	0x080403e0
 8018e7c:	08042740 	.word	0x08042740
 8018e80:	08041a00 	.word	0x08041a00
 8018e84:	08041180 	.word	0x08041180
 8018e88:	08042920 	.word	0x08042920
 8018e8c:	080405c0 	.word	0x080405c0
 8018e90:	0804a598 	.word	0x0804a598
 8018e94:	080429c0 	.word	0x080429c0
 8018e98:	08040660 	.word	0x08040660
 8018e9c:	0804b858 	.word	0x0804b858
 8018ea0:	08042c40 	.word	0x08042c40
 8018ea4:	08041be0 	.word	0x08041be0
 8018ea8:	08041360 	.word	0x08041360
 8018eac:	080336f0 	.word	0x080336f0
 8018eb0:	08042ee0 	.word	0x08042ee0
 8018eb4:	08040900 	.word	0x08040900
 8018eb8:	0804d1d8 	.word	0x0804d1d8
 8018ebc:	0804ead8 	.word	0x0804ead8
 8018ec0:	08043200 	.word	0x08043200
 8018ec4:	2000275c 	.word	0x2000275c
 8018ec8:	2003b4a8 	.word	0x2003b4a8
 8018ecc:	08035590 	.word	0x08035590
 8018ed0:	08043480 	.word	0x08043480
 8018ed4:	2000001c 	.word	0x2000001c
 8018ed8:	080521d8 	.word	0x080521d8
 8018edc:	2003b728 	.word	0x2003b728
 8018ee0:	08043780 	.word	0x08043780
 8018ee4:	200029dc 	.word	0x200029dc
 8018ee8:	2780      	movs	r7, #128	; 0x80
 8018eea:	f04f 0c11 	mov.w	ip, #17
 8018eee:	4edb      	ldr	r6, [pc, #876]	; (801925c <invoke_inf+0xc34>)
 8018ef0:	f5a5 71c0 	sub.w	r1, r5, #384	; 0x180
 8018ef4:	9704      	str	r7, [sp, #16]
 8018ef6:	f505 5710 	add.w	r7, r5, #9216	; 0x2400
 8018efa:	2230      	movs	r2, #48	; 0x30
 8018efc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8018f00:	9707      	str	r7, [sp, #28]
 8018f02:	4628      	mov	r0, r5
 8018f04:	4fd6      	ldr	r7, [pc, #856]	; (8019260 <invoke_inf+0xc38>)
 8018f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8018f08:	4642      	mov	r2, r8
 8018f0a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018f0e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8018f12:	9108      	str	r1, [sp, #32]
 8018f14:	4641      	mov	r1, r8
 8018f16:	e9cd 6c02 	strd	r6, ip, [sp, #8]
 8018f1a:	4ed2      	ldr	r6, [pc, #840]	; (8019264 <invoke_inf+0xc3c>)
 8018f1c:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8018f20:	e9cd 6700 	strd	r6, r7, [sp]
 8018f24:	f00b f954 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(3072, &buffer0[1280],0.034391046,2,&buffer0[19712],0.027072277,17,0.039104667,6,&buffer0[7040],&buffer0[10496]);
 8018f28:	f5ab 417b 	sub.w	r1, fp, #64256	; 0xfb00
 8018f2c:	eeb0 2a49 	vmov.f32	s4, s18
 8018f30:	ed9f 1acd 	vldr	s2, [pc, #820]	; 8019268 <invoke_inf+0xc40>
 8018f34:	eef1 2a08 	vmov.f32	s5, #24	; 0x40c00000  6.0
 8018f38:	ed9f 0acc 	vldr	s0, [pc, #816]	; 801926c <invoke_inf+0xc44>
 8018f3c:	eef3 1a01 	vmov.f32	s3, #49	; 0x41880000  17.0
 8018f40:	9500      	str	r5, [sp, #0]
 8018f42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018f46:	f501 53b4 	add.w	r3, r1, #5760	; 0x1680
 8018f4a:	f501 4290 	add.w	r2, r1, #18432	; 0x4800
 8018f4e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018f52:	f00a fc63 	bl	802381c <add_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8018f56:	2518      	movs	r5, #24
 8018f58:	f5ab 414b 	sub.w	r1, fp, #51968	; 0xcb00
 8018f5c:	4fc4      	ldr	r7, [pc, #784]	; (8019270 <invoke_inf+0xc48>)
 8018f5e:	9502      	str	r5, [sp, #8]
 8018f60:	f06f 0505 	mvn.w	r5, #5
 8018f64:	f5a1 50cc 	sub.w	r0, r1, #6528	; 0x1980
 8018f68:	f8df c334 	ldr.w	ip, [pc, #820]	; 80192a0 <invoke_inf+0xc78>
 8018f6c:	f8df e334 	ldr.w	lr, [pc, #820]	; 80192a4 <invoke_inf+0xc7c>
 8018f70:	26c0      	movs	r6, #192	; 0xc0
 8018f72:	9506      	str	r5, [sp, #24]
 8018f74:	f500 554c 	add.w	r5, r0, #13056	; 0x3300
 8018f78:	9701      	str	r7, [sp, #4]
 8018f7a:	4642      	mov	r2, r8
 8018f7c:	4fbd      	ldr	r7, [pc, #756]	; (8019274 <invoke_inf+0xc4c>)
 8018f7e:	2330      	movs	r3, #48	; 0x30
 8018f80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018f84:	960d      	str	r6, [sp, #52]	; 0x34
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8018f86:	f5a0 56dc 	sub.w	r6, r0, #7040	; 0x1b80
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8018f8a:	9700      	str	r7, [sp, #0]
 8018f8c:	9407      	str	r4, [sp, #28]
 8018f8e:	9405      	str	r4, [sp, #20]
 8018f90:	f8cd 9020 	str.w	r9, [sp, #32]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8018f94:	4fb8      	ldr	r7, [pc, #736]	; (8019278 <invoke_inf+0xc50>)
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[7040],8,8,48,(const q7_t*)weight27,(const q7_t*)weight27Flash,24,bias27,scales27,-128,-6,-128,127,&buffer0[20096],&buffer0[13568],8,8,192,sbuf);
 8018f96:	e9cd 5109 	strd	r5, r1, [sp, #36]	; 0x24
 8018f9a:	e9cd ec03 	strd	lr, ip, [sp, #12]
 8018f9e:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
 8018fa2:	4641      	mov	r1, r8
 8018fa4:	f00b fa36 	bl	8024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8018fa8:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 80192a8 <invoke_inf+0xc80>
 8018fac:	f5ab 4145 	sub.w	r1, fp, #50432	; 0xc500
 8018fb0:	23c0      	movs	r3, #192	; 0xc0
 8018fb2:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8018fb6:	9508      	str	r5, [sp, #32]
 8018fb8:	4642      	mov	r2, r8
 8018fba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018fbe:	f8cd e014 	str.w	lr, [sp, #20]
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8018fc8:	f04f 0b30 	mov.w	fp, #48	; 0x30
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8018fcc:	9109      	str	r1, [sp, #36]	; 0x24
 8018fce:	4641      	mov	r1, r8
 8018fd0:	940e      	str	r4, [sp, #56]	; 0x38
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 8018fd2:	2504      	movs	r5, #4
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[20096],&buffer0[15104],8,8,192,sbuf,-128);
 8018fd4:	9406      	str	r4, [sp, #24]
 8018fd6:	9404      	str	r4, [sp, #16]
 8018fd8:	f8cd 901c 	str.w	r9, [sp, #28]
 8018fdc:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 8018fe0:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 80192ac <invoke_inf+0xc84>
 8018fe4:	4fa5      	ldr	r7, [pc, #660]	; (801927c <invoke_inf+0xc54>)
 8018fe6:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 8018fea:	e9cd 7c00 	strd	r7, ip, [sp]
 8018fee:	f7f9 fbff 	bl	80127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 8018ff2:	4fa3      	ldr	r7, [pc, #652]	; (8019280 <invoke_inf+0xc58>)
 8018ff4:	f506 409d 	add.w	r0, r6, #20096	; 0x4e80
 8018ff8:	f06f 0e07 	mvn.w	lr, #7
 8018ffc:	f506 46fd 	add.w	r6, r6, #32384	; 0x7e80
 8019000:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 80192b0 <invoke_inf+0xc88>
 8019004:	f5a0 72c0 	sub.w	r2, r0, #384	; 0x180
 8019008:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801900c:	9701      	str	r7, [sp, #4]
 801900e:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8019012:	4f9c      	ldr	r7, [pc, #624]	; (8019284 <invoke_inf+0xc5c>)
 8019014:	4641      	mov	r1, r8
 8019016:	9208      	str	r2, [sp, #32]
 8019018:	23c0      	movs	r3, #192	; 0xc0
 801901a:	4642      	mov	r2, r8
 801901c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8019020:	9607      	str	r6, [sp, #28]
 8019022:	9700      	str	r7, [sp, #0]
 8019024:	f8cd 9018 	str.w	r9, [sp, #24]
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 8019028:	4f97      	ldr	r7, [pc, #604]	; (8019288 <invoke_inf+0xc60>)
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 801902a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 801902e:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8019032:	e9cd b404 	strd	fp, r4, [sp, #16]
 8019036:	f00b f8cb 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
 801903a:	f5a6 5340 	sub.w	r3, r6, #12288	; 0x3000
 801903e:	eef0 2a48 	vmov.f32	s5, s16
 8019042:	ed9f 2a92 	vldr	s4, [pc, #584]	; 801928c <invoke_inf+0xc64>
 8019046:	eeb0 0a49 	vmov.f32	s0, s18
 801904a:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8019290 <invoke_inf+0xc68>
 801904e:	eefa 1a00 	vmov.f32	s3, #160	; 0xc1000000 -8.0
 8019052:	9300      	str	r3, [sp, #0]
 8019054:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8019058:	4632      	mov	r2, r6
 801905a:	f5a6 41c6 	sub.w	r1, r6, #25344	; 0x6300
 801905e:	f5a6 5376 	sub.w	r3, r6, #15744	; 0x3d80
 8019062:	f44f 6040 	mov.w	r0, #3072	; 0xc00
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 8019066:	f5a6 5b10 	sub.w	fp, r6, #9216	; 0x2400
add_fpreq_bitmask(3072, &buffer0[7040],0.039104667,6,&buffer0[32384],0.038176756,-8,0.05495224,0,&buffer0[16640],&buffer0[20096]);
 801906a:	f00a fbd7 	bl	802381c <add_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 801906e:	f5a6 5076 	sub.w	r0, r6, #15744	; 0x3d80
 8019072:	2600      	movs	r6, #0
 8019074:	f8df e23c 	ldr.w	lr, [pc, #572]	; 80192b4 <invoke_inf+0xc8c>
 8019078:	f8df c23c 	ldr.w	ip, [pc, #572]	; 80192b8 <invoke_inf+0xc90>
 801907c:	2218      	movs	r2, #24
 801907e:	9606      	str	r6, [sp, #24]
 8019080:	26f0      	movs	r6, #240	; 0xf0
 8019082:	9202      	str	r2, [sp, #8]
 8019084:	4641      	mov	r1, r8
 8019086:	960d      	str	r6, [sp, #52]	; 0x34
 8019088:	f50b 56e7 	add.w	r6, fp, #7392	; 0x1ce0
 801908c:	4642      	mov	r2, r8
 801908e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8019092:	9609      	str	r6, [sp, #36]	; 0x24
 8019094:	2330      	movs	r3, #48	; 0x30
 8019096:	4e7f      	ldr	r6, [pc, #508]	; (8019294 <invoke_inf+0xc6c>)
 8019098:	9704      	str	r7, [sp, #16]
 801909a:	9603      	str	r6, [sp, #12]
convolve_1x1_s8_fpreq_bitmask(&buffer0[20096],8,8,192,(const q7_t*) weight29,bias29,scales29,-8,128,-128,127,&buffer0[32384],&buffer0[19712],8,8,48,sbuf);
 801909c:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_fpreq_bitmask_partialCH(&buffer0[16640],8,8,48,(const q7_t*)weight30,(const q7_t*)weight30Flash,24,bias30,scales30,-128,0,-128,127,&buffer0[30560],&buffer0[23168],8,8,240,sbuf);
 801909e:	f8cd e004 	str.w	lr, [sp, #4]
 80190a2:	f8cd c000 	str.w	ip, [sp]
 80190a6:	9407      	str	r4, [sp, #28]
 80190a8:	9405      	str	r4, [sp, #20]
 80190aa:	f8cd 9020 	str.w	r9, [sp, #32]
 80190ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80190b2:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
 80190b6:	f00b f9ad 	bl	8024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 80190ba:	f5aa 3130 	sub.w	r1, sl, #180224	; 0x2c000
 80190be:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80192bc <invoke_inf+0xc94>
 80190c2:	23f0      	movs	r3, #240	; 0xf0
 80190c4:	f501 40c4 	add.w	r0, r1, #25088	; 0x6200
 80190c8:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 80192c0 <invoke_inf+0xc98>
 80190cc:	4642      	mov	r2, r8
 80190ce:	930c      	str	r3, [sp, #48]	; 0x30
 80190d0:	f500 57ab 	add.w	r7, r0, #5472	; 0x1560
 80190d4:	4641      	mov	r1, r8
 80190d6:	9605      	str	r6, [sp, #20]
 80190d8:	9708      	str	r7, [sp, #32]
 80190da:	4637      	mov	r7, r6
 80190dc:	9009      	str	r0, [sp, #36]	; 0x24
 80190de:	f500 50ab 	add.w	r0, r0, #5472	; 0x1560
 80190e2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80190e6:	940e      	str	r4, [sp, #56]	; 0x38
 80190e8:	9406      	str	r4, [sp, #24]
 80190ea:	9404      	str	r4, [sp, #16]
 80190ec:	f8cd 901c 	str.w	r9, [sp, #28]
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 80190f0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80192c4 <invoke_inf+0xc9c>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask(&buffer0[30560],8,8,240,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[30560],&buffer0[25088],4,4,240,sbuf,-128);
 80190f4:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80190f8:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80192c8 <invoke_inf+0xca0>
 80190fc:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 80192cc <invoke_inf+0xca4>
 8019100:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8019104:	e9cd ce00 	strd	ip, lr, [sp]
 8019108:	f7fc f9b8 	bl	801547c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,240,(const q7_t*) weight32,bias32,scales32,-1,128,-128,127,&buffer0[29024],&buffer0[25568],4,4,96,sbuf);
 801910c:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80192d0 <invoke_inf+0xca8>
 8019110:	f50b 6016 	add.w	r0, fp, #2400	; 0x960
 8019114:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80192d4 <invoke_inf+0xcac>
 8019118:	f8cd c004 	str.w	ip, [sp, #4]
 801911c:	462a      	mov	r2, r5
 801911e:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80192d8 <invoke_inf+0xcb0>
 8019122:	4629      	mov	r1, r5
 8019124:	950a      	str	r5, [sp, #40]	; 0x28
 8019126:	23f0      	movs	r3, #240	; 0xf0
 8019128:	9509      	str	r5, [sp, #36]	; 0x24
 801912a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801912e:	9008      	str	r0, [sp, #32]
 8019130:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8019134:	f8cd 801c 	str.w	r8, [sp, #28]
 8019138:	f8cd c000 	str.w	ip, [sp]
 801913c:	f8cd 9018 	str.w	r9, [sp, #24]
 8019140:	e9cd 6404 	strd	r6, r4, [sp, #16]
 8019144:	2660      	movs	r6, #96	; 0x60
 8019146:	960b      	str	r6, [sp, #44]	; 0x2c
 8019148:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801914c:	e9cd e602 	strd	lr, r6, [sp, #8]
 8019150:	f00b f83e 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[29024],4,4,96,(const q7_t*) weight33,bias33,scales33,-128,1,-128,127,&buffer0[30560],&buffer0[25760],4,4,384,sbuf);
 8019154:	f50b 6022 	add.w	r0, fp, #2592	; 0xa20
 8019158:	f8df c180 	ldr.w	ip, [pc, #384]	; 80192dc <invoke_inf+0xcb4>
 801915c:	f04f 0e01 	mov.w	lr, #1
 8019160:	f500 5696 	add.w	r6, r0, #4800	; 0x12c0
 8019164:	950a      	str	r5, [sp, #40]	; 0x28
 8019166:	f8cd e010 	str.w	lr, [sp, #16]
 801916a:	462a      	mov	r2, r5
 801916c:	9607      	str	r6, [sp, #28]
 801916e:	f44f 76c0 	mov.w	r6, #384	; 0x180
 8019172:	f8cd c008 	str.w	ip, [sp, #8]
 8019176:	4629      	mov	r1, r5
 8019178:	f8df e164 	ldr.w	lr, [pc, #356]	; 80192e0 <invoke_inf+0xcb8>
 801917c:	2360      	movs	r3, #96	; 0x60
 801917e:	f8df c164 	ldr.w	ip, [pc, #356]	; 80192e4 <invoke_inf+0xcbc>
 8019182:	9509      	str	r5, [sp, #36]	; 0x24
 8019184:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8019188:	9008      	str	r0, [sp, #32]
 801918a:	4640      	mov	r0, r8
 801918c:	960b      	str	r6, [sp, #44]	; 0x2c
 801918e:	9405      	str	r4, [sp, #20]
 8019190:	9403      	str	r4, [sp, #12]
 8019192:	f8cd 9018 	str.w	r9, [sp, #24]
 8019196:	e9cd ce00 	strd	ip, lr, [sp]
 801919a:	f00b f819 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[30560],&buffer0[26528],4,4,384,sbuf,-128);
 801919e:	f8df c148 	ldr.w	ip, [pc, #328]	; 80192e8 <invoke_inf+0xcc0>
 80191a2:	f50b 6052 	add.w	r0, fp, #3360	; 0xd20
 80191a6:	f8df e144 	ldr.w	lr, [pc, #324]	; 80192ec <invoke_inf+0xcc4>
 80191aa:	f8cd c00c 	str.w	ip, [sp, #12]
 80191ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80191b2:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80192f0 <invoke_inf+0xcc8>
 80191b6:	f500 667c 	add.w	r6, r0, #4032	; 0xfc0
 80191ba:	930c      	str	r3, [sp, #48]	; 0x30
 80191bc:	462a      	mov	r2, r5
 80191be:	950b      	str	r5, [sp, #44]	; 0x2c
 80191c0:	4629      	mov	r1, r5
 80191c2:	950a      	str	r5, [sp, #40]	; 0x28
 80191c4:	9608      	str	r6, [sp, #32]
 80191c6:	9705      	str	r7, [sp, #20]
 80191c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80191cc:	9009      	str	r0, [sp, #36]	; 0x24
 80191ce:	f500 607c 	add.w	r0, r0, #4032	; 0xfc0
 80191d2:	940e      	str	r4, [sp, #56]	; 0x38
 80191d4:	9406      	str	r4, [sp, #24]
 80191d6:	9404      	str	r4, [sp, #16]
 80191d8:	f8cd 901c 	str.w	r9, [sp, #28]
 80191dc:	e9cd ce01 	strd	ip, lr, [sp, #4]
 80191e0:	f8df c110 	ldr.w	ip, [pc, #272]	; 80192f4 <invoke_inf+0xccc>
 80191e4:	f8cd c000 	str.w	ip, [sp]
 80191e8:	f7fa f806 	bl	80131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[30560],4,4,384,(const q7_t*) weight35,bias35,scales35,-16,128,-128,127,&buffer0[30560],&buffer0[27296],4,4,96,sbuf);
 80191ec:	f06f 0c0f 	mvn.w	ip, #15
 80191f0:	f50b 5081 	add.w	r0, fp, #4128	; 0x1020
 80191f4:	f8df e100 	ldr.w	lr, [pc, #256]	; 80192f8 <invoke_inf+0xcd0>
 80191f8:	f8cd c00c 	str.w	ip, [sp, #12]
 80191fc:	2360      	movs	r3, #96	; 0x60
 80191fe:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80192fc <invoke_inf+0xcd4>
 8019202:	f500 614c 	add.w	r1, r0, #3264	; 0xcc0
 8019206:	9509      	str	r5, [sp, #36]	; 0x24
 8019208:	462a      	mov	r2, r5
 801920a:	9107      	str	r1, [sp, #28]
 801920c:	4629      	mov	r1, r5
 801920e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8019212:	9008      	str	r0, [sp, #32]
 8019214:	f500 604c 	add.w	r0, r0, #3264	; 0xcc0
 8019218:	f8cd 9018 	str.w	r9, [sp, #24]
 801921c:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8019220:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8019300 <invoke_inf+0xcd8>
 8019224:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
 8019228:	f8cd c000 	str.w	ip, [sp]
 801922c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8019230:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8019234:	f00a ffcc 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(1536, &buffer0[29024],0.027058998,-1,&buffer0[30560],0.022201976,-16,0.031616762,-1,&buffer0[32288],&buffer0[27488]);
 8019238:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
 801923c:	f50b 5387 	add.w	r3, fp, #4320	; 0x10e0
 8019240:	eeb0 2a68 	vmov.f32	s4, s17
 8019244:	eefb 1a00 	vmov.f32	s3, #176	; 0xc1800000 -16.0
 8019248:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8019298 <invoke_inf+0xc70>
 801924c:	eef0 0a62 	vmov.f32	s1, s5
 8019250:	ed9f 0a12 	vldr	s0, [pc, #72]	; 801929c <invoke_inf+0xc74>
 8019254:	f503 6240 	add.w	r2, r3, #3072	; 0xc00
 8019258:	e054      	b.n	8019304 <invoke_inf+0xcdc>
 801925a:	bf00      	nop
 801925c:	080439c0 	.word	0x080439c0
 8019260:	2000031c 	.word	0x2000031c
 8019264:	08053b28 	.word	0x08053b28
 8019268:	3cddc6ae 	.word	0x3cddc6ae
 801926c:	3d0cdda0 	.word	0x3d0cdda0
 8019270:	08055628 	.word	0x08055628
 8019274:	2000554c 	.word	0x2000554c
 8019278:	2003b968 	.word	0x2003b968
 801927c:	08036a40 	.word	0x08036a40
 8019280:	200006dc 	.word	0x200006dc
 8019284:	08056ee8 	.word	0x08056ee8
 8019288:	080441c0 	.word	0x080441c0
 801928c:	3d61159a 	.word	0x3d61159a
 8019290:	3d1c5f3b 	.word	0x3d1c5f3b
 8019294:	2000079c 	.word	0x2000079c
 8019298:	3cb5e0eb 	.word	0x3cb5e0eb
 801929c:	3cddaad5 	.word	0x3cddaad5
 80192a0:	08043a80 	.word	0x08043a80
 80192a4:	200003dc 	.word	0x200003dc
 80192a8:	08043d80 	.word	0x08043d80
 80192ac:	20002c1c 	.word	0x20002c1c
 80192b0:	08044080 	.word	0x08044080
 80192b4:	080593e8 	.word	0x080593e8
 80192b8:	2000674c 	.word	0x2000674c
 80192bc:	08044580 	.word	0x08044580
 80192c0:	2003bc68 	.word	0x2003bc68
 80192c4:	200140a0 	.word	0x200140a0
 80192c8:	20002f1c 	.word	0x20002f1c
 80192cc:	08037100 	.word	0x08037100
 80192d0:	20000b5c 	.word	0x20000b5c
 80192d4:	08044940 	.word	0x08044940
 80192d8:	0805d858 	.word	0x0805d858
 80192dc:	08044ac0 	.word	0x08044ac0
 80192e0:	20000cdc 	.word	0x20000cdc
 80192e4:	08063258 	.word	0x08063258
 80192e8:	080450c0 	.word	0x080450c0
 80192ec:	2003c028 	.word	0x2003c028
 80192f0:	200032dc 	.word	0x200032dc
 80192f4:	08039ef0 	.word	0x08039ef0
 80192f8:	080456c0 	.word	0x080456c0
 80192fc:	200012dc 	.word	0x200012dc
 8019300:	0806e7d8 	.word	0x0806e7d8
 8019304:	4641      	mov	r1, r8
 8019306:	9300      	str	r3, [sp, #0]
 8019308:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801930c:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8019310:	f00a fa84 	bl	802381c <add_fpreq_bitmask>
/* layer 42:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[32288],4,4,96,(const q7_t*) weight36,bias36,scales36,-128,1,-128,127,&buffer0[33824],&buffer0[29024],4,4,384,sbuf);
 8019314:	f508 604c 	add.w	r0, r8, #3264	; 0xcc0
 8019318:	f8df c274 	ldr.w	ip, [pc, #628]	; 8019590 <invoke_inf+0xf68>
 801931c:	f04f 0e01 	mov.w	lr, #1
 8019320:	f500 66c0 	add.w	r6, r0, #1536	; 0x600
 8019324:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8019328:	f8cd c008 	str.w	ip, [sp, #8]
 801932c:	4629      	mov	r1, r5
 801932e:	f8df c264 	ldr.w	ip, [pc, #612]	; 8019594 <invoke_inf+0xf6c>
 8019332:	2360      	movs	r3, #96	; 0x60
 8019334:	920b      	str	r2, [sp, #44]	; 0x2c
 8019336:	462a      	mov	r2, r5
 8019338:	950a      	str	r5, [sp, #40]	; 0x28
 801933a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801933e:	9607      	str	r6, [sp, #28]
 8019340:	9403      	str	r4, [sp, #12]
 8019342:	f8cd 9018 	str.w	r9, [sp, #24]
 8019346:	e9cd e404 	strd	lr, r4, [sp, #16]
 801934a:	f8df e24c 	ldr.w	lr, [pc, #588]	; 8019598 <invoke_inf+0xf70>
 801934e:	e9cd 8508 	strd	r8, r5, [sp, #32]
 8019352:	e9cd ce00 	strd	ip, lr, [sp]
 8019356:	f00a ff3b 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
/* layer 43:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 801935a:	f8df e240 	ldr.w	lr, [pc, #576]	; 801959c <invoke_inf+0xf74>
 801935e:	f8df c240 	ldr.w	ip, [pc, #576]	; 80195a0 <invoke_inf+0xf78>
 8019362:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8019366:	f508 5096 	add.w	r0, r8, #4800	; 0x12c0
 801936a:	f508 7840 	add.w	r8, r8, #768	; 0x300
 801936e:	950a      	str	r5, [sp, #40]	; 0x28
 8019370:	462a      	mov	r2, r5
 8019372:	9608      	str	r6, [sp, #32]
 8019374:	4629      	mov	r1, r5
 8019376:	9705      	str	r7, [sp, #20]
 8019378:	463e      	mov	r6, r7
 801937a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801937e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8019382:	940e      	str	r4, [sp, #56]	; 0x38
 8019384:	9406      	str	r4, [sp, #24]
 8019386:	9404      	str	r4, [sp, #16]
 8019388:	f8cd 901c 	str.w	r9, [sp, #28]
/* layer 44:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 801938c:	4f78      	ldr	r7, [pc, #480]	; (8019570 <invoke_inf+0xf48>)
depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[33824],&buffer0[29792],4,4,384,sbuf,-128);
 801938e:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8019392:	f8df e210 	ldr.w	lr, [pc, #528]	; 80195a4 <invoke_inf+0xf7c>
 8019396:	f8df c210 	ldr.w	ip, [pc, #528]	; 80195a8 <invoke_inf+0xf80>
 801939a:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
 801939e:	e9cd ce00 	strd	ip, lr, [sp]
 80193a2:	f7f9 ff29 	bl	80131f8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 80193a6:	f508 607c 	add.w	r0, r8, #4032	; 0xfc0
 80193aa:	2160      	movs	r1, #96	; 0x60
 80193ac:	f508 581f 	add.w	r8, r8, #10176	; 0x27c0
 80193b0:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 80195ac <invoke_inf+0xf84>
 80193b4:	462a      	mov	r2, r5
 80193b6:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80195b0 <invoke_inf+0xf88>
 80193ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80193be:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80193c2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80193c6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80193ca:	f8cd e000 	str.w	lr, [sp]
 80193ce:	9604      	str	r6, [sp, #16]
 80193d0:	9509      	str	r5, [sp, #36]	; 0x24
 80193d2:	f8cd a00c 	str.w	sl, [sp, #12]
/* layer 47:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
/* layer 48:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
/* layer 49:AVERAGE_POOL_2D */
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 80193d6:	f5a8 5aa8 	sub.w	sl, r8, #5376	; 0x1500
convolve_1x1_s8_fpreq_bitmask(&buffer0[33824],4,4,384,(const q7_t*) weight38,bias38,scales38,-1,128,-128,127,&buffer0[39968],&buffer0[30560],4,4,96,sbuf);
 80193da:	f8cd 801c 	str.w	r8, [sp, #28]
 80193de:	9611      	str	r6, [sp, #68]	; 0x44
 80193e0:	e9cd 510a 	strd	r5, r1, [sp, #40]	; 0x28
 80193e4:	f5a0 614c 	sub.w	r1, r0, #3264	; 0xcc0
 80193e8:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 80193ec:	9108      	str	r1, [sp, #32]
 80193ee:	4629      	mov	r1, r5
 80193f0:	e9cd 4905 	strd	r4, r9, [sp, #20]
 80193f4:	f00a feec 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
add_fpreq_bitmask(1536, &buffer0[32288],0.031616762,-1,&buffer0[39968],0.032814495,-1,0.04403092,4,&buffer0[44288],&buffer0[30752]);
 80193f8:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80193fc:	f5a8 5110 	sub.w	r1, r8, #9216	; 0x2400
 8019400:	eeb0 0a68 	vmov.f32	s0, s17
 8019404:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 8019574 <invoke_inf+0xf4c>
 8019408:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
 801940c:	eef0 0a61 	vmov.f32	s1, s3
 8019410:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8019578 <invoke_inf+0xf50>
 8019414:	f508 5387 	add.w	r3, r8, #4320	; 0x10e0
 8019418:	4642      	mov	r2, r8
 801941a:	9100      	str	r1, [sp, #0]
 801941c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8019420:	f5a8 51f0 	sub.w	r1, r8, #7680	; 0x1e00
 8019424:	f00a f9fa 	bl	802381c <add_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[44288],4,4,96,(const q7_t*) weight39,bias39,scales39,-128,-4,-128,127,&buffer0[35072],&buffer0[32288],4,4,576,sbuf);
 8019428:	f508 5087 	add.w	r0, r8, #4320	; 0x10e0
 801942c:	f8df c184 	ldr.w	ip, [pc, #388]	; 80195b4 <invoke_inf+0xf8c>
 8019430:	f06f 0e03 	mvn.w	lr, #3
 8019434:	f5a0 5710 	sub.w	r7, r0, #9216	; 0x2400
 8019438:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801943a:	f5a8 51f0 	sub.w	r1, r8, #7680	; 0x1e00
 801943e:	f8cd c008 	str.w	ip, [sp, #8]
 8019442:	9707      	str	r7, [sp, #28]
 8019444:	f44f 7710 	mov.w	r7, #576	; 0x240
 8019448:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80195b8 <invoke_inf+0xf90>
 801944c:	462a      	mov	r2, r5
 801944e:	970b      	str	r7, [sp, #44]	; 0x2c
 8019450:	2360      	movs	r3, #96	; 0x60
 8019452:	4f4a      	ldr	r7, [pc, #296]	; (801957c <invoke_inf+0xf54>)
 8019454:	960c      	str	r6, [sp, #48]	; 0x30
 8019456:	9108      	str	r1, [sp, #32]
 8019458:	4629      	mov	r1, r5
 801945a:	f8cd e010 	str.w	lr, [sp, #16]
 801945e:	9403      	str	r4, [sp, #12]
 8019460:	e9cd c700 	strd	ip, r7, [sp]
 8019464:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 8019468:	e9cd 4905 	strd	r4, r9, [sp, #20]
 801946c:	f00a feb0 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 8019470:	9610      	str	r6, [sp, #64]	; 0x40
 8019472:	f44f 7310 	mov.w	r3, #576	; 0x240
 8019476:	f5a8 51cc 	sub.w	r1, r8, #6528	; 0x1980
 801947a:	f5a8 5099 	sub.w	r0, r8, #4896	; 0x1320
 801947e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80195bc <invoke_inf+0xf94>
 8019482:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80195c0 <invoke_inf+0xf98>
 8019486:	462a      	mov	r2, r5
 8019488:	4f3d      	ldr	r7, [pc, #244]	; (8019580 <invoke_inf+0xf58>)
 801948a:	4698      	mov	r8, r3
 801948c:	9008      	str	r0, [sp, #32]
 801948e:	9700      	str	r7, [sp, #0]
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 8019490:	4f3c      	ldr	r7, [pc, #240]	; (8019584 <invoke_inf+0xf5c>)
depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[35072],&buffer0[33440],4,4,576,sbuf,-128);
 8019492:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
 8019496:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019498:	e9cd 4604 	strd	r4, r6, [sp, #16]
 801949c:	4e3a      	ldr	r6, [pc, #232]	; (8019588 <invoke_inf+0xf60>)
 801949e:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
 80194a2:	e9cd 1509 	strd	r1, r5, [sp, #36]	; 0x24
 80194a6:	e9cd ce01 	strd	ip, lr, [sp, #4]
 80194aa:	4629      	mov	r1, r5
 80194ac:	9603      	str	r6, [sp, #12]
 80194ae:	e9cd 4906 	strd	r4, r9, [sp, #24]
 80194b2:	f7f9 f99d 	bl	80127f0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq_bitmask>
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 80194b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80194b8:	f50b 5e35 	add.w	lr, fp, #11584	; 0x2d40
 80194bc:	f50a 70f0 	add.w	r0, sl, #480	; 0x1e0
 80194c0:	960c      	str	r6, [sp, #48]	; 0x30
 80194c2:	4643      	mov	r3, r8
 80194c4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80194c6:	f500 5110 	add.w	r1, r0, #9216	; 0x2400
 80194ca:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80195c4 <invoke_inf+0xf9c>
 80194ce:	462a      	mov	r2, r5
 80194d0:	f8cd e020 	str.w	lr, [sp, #32]
 80194d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80194d8:	9604      	str	r6, [sp, #16]
 80194da:	26a0      	movs	r6, #160	; 0xa0
 80194dc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80195c8 <invoke_inf+0xfa0>
 80194e0:	f8cd e00c 	str.w	lr, [sp, #12]
 80194e4:	9107      	str	r1, [sp, #28]
 80194e6:	4629      	mov	r1, r5
 80194e8:	960b      	str	r6, [sp, #44]	; 0x2c
 80194ea:	9700      	str	r7, [sp, #0]
/* layer 50:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 80194ec:	f06f 0721 	mvn.w	r7, #33	; 0x21
convolve_1x1_s8_fpreq_bitmask(&buffer0[35072],4,4,576,(const q7_t*) weight41,bias41,scales41,-1,128,-128,127,&buffer0[44288],&buffer0[34752],4,4,160,sbuf);
 80194f0:	e9cd 8c01 	strd	r8, ip, [sp, #4]
 80194f4:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 80194f8:	e9cd 4905 	strd	r4, r9, [sp, #20]
 80194fc:	f00a fe68 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 8019500:	f04f 0c01 	mov.w	ip, #1
 8019504:	f8cd a018 	str.w	sl, [sp, #24]
 8019508:	4633      	mov	r3, r6
 801950a:	462a      	mov	r2, r5
 801950c:	4629      	mov	r1, r5
 801950e:	f50b 40a5 	add.w	r0, fp, #21120	; 0x5280
 8019512:	f8cd 9014 	str.w	r9, [sp, #20]
 8019516:	9404      	str	r4, [sp, #16]
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 8019518:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80195cc <invoke_inf+0xfa4>
avg_pooling(&buffer0[44288],4,4,160,4,4,1,1,-128,127,&buffer0[34592]);
 801951c:	e9cd cc02 	strd	ip, ip, [sp, #8]
 8019520:	e9cd 5500 	strd	r5, r5, [sp]
 8019524:	f00d fa22 	bl	802696c <avg_pooling>
convolve_1x1_s8_fpreq_bitmask(&buffer0[34592],1,1,160,(const q7_t*) weight42,bias42,scales42,-34,1,-128,127,&buffer0[35076],&buffer0[35072],1,1,10,sbuf);
 8019528:	4650      	mov	r0, sl
 801952a:	2201      	movs	r2, #1
 801952c:	f50a 7cf2 	add.w	ip, sl, #484	; 0x1e4
 8019530:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
 8019534:	f04f 0e0a 	mov.w	lr, #10
 8019538:	4633      	mov	r3, r6
 801953a:	4d14      	ldr	r5, [pc, #80]	; (801958c <invoke_inf+0xf64>)
 801953c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801953e:	f8df a090 	ldr.w	sl, [pc, #144]	; 80195d0 <invoke_inf+0xfa8>
 8019542:	9108      	str	r1, [sp, #32]
 8019544:	4611      	mov	r1, r2
 8019546:	960c      	str	r6, [sp, #48]	; 0x30
 8019548:	9204      	str	r2, [sp, #16]
 801954a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801954e:	f8cd c01c 	str.w	ip, [sp, #28]
 8019552:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8019556:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 801955a:	e9cd 5702 	strd	r5, r7, [sp, #8]
 801955e:	e9cd a800 	strd	sl, r8, [sp]
 8019562:	f00a fe35 	bl	80241d0 <convolve_1x1_s8_fpreq_bitmask>
}
 8019566:	b013      	add	sp, #76	; 0x4c
 8019568:	ecbd 8b04 	vpop	{d8-d9}
 801956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019570:	20001a5c 	.word	0x20001a5c
 8019574:	3d3459c4 	.word	0x3d3459c4
 8019578:	3d06687e 	.word	0x3d06687e
 801957c:	20001bdc 	.word	0x20001bdc
 8019580:	0803eb10 	.word	0x0803eb10
 8019584:	0809a998 	.word	0x0809a998
 8019588:	08046f40 	.word	0x08046f40
 801958c:	08047ac0 	.word	0x08047ac0
 8019590:	08045840 	.word	0x08045840
 8019594:	080777d8 	.word	0x080777d8
 8019598:	2000145c 	.word	0x2000145c
 801959c:	08045e40 	.word	0x08045e40
 80195a0:	200047dc 	.word	0x200047dc
 80195a4:	200038dc 	.word	0x200038dc
 80195a8:	0803c470 	.word	0x0803c470
 80195ac:	08046440 	.word	0x08046440
 80195b0:	08082d58 	.word	0x08082d58
 80195b4:	080465c0 	.word	0x080465c0
 80195b8:	0808bd58 	.word	0x0808bd58
 80195bc:	2003c628 	.word	0x2003c628
 80195c0:	20003edc 	.word	0x20003edc
 80195c4:	08047840 	.word	0x08047840
 80195c8:	200024dc 	.word	0x200024dc
 80195cc:	2000cf18 	.word	0x2000cf18
 80195d0:	20007dcc 	.word	0x20007dcc

080195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>:
    *sum_3 += tmp;
}

static inline void group_mac_kernel8_4row_fp_uniweight_reuse_output_input(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
           const float* input_0, const float* input_1, const float* input_2, const float* input_3,
           const float* filter) {
 80195d4:	b4f0      	push	{r4, r5, r6, r7}
 80195d6:	ed2d 8b04 	vpush	{d8-d9}
 80195da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80195dc:	f8dd c020 	ldr.w	ip, [sp, #32]
    float tmp;
    tmp = 0;
    tmp += input_0[0] * filter[0];
    tmp += input_0[1] * filter[1];
 80195e0:	ed94 7a01 	vldr	s14, [r4, #4]
 80195e4:	eddc 7a01 	vldr	s15, [ip, #4]
 80195e8:	eddc 5a00 	vldr	s11, [ip]
 80195ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80195f0:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_0[59] * filter[59];
    tmp += input_0[60] * filter[60];
    tmp += input_0[61] * filter[61];
    tmp += input_0[62] * filter[62];
    tmp += input_0[63] * filter[63];
    *sum_0 += tmp;
 80195f4:	ed90 6a00 	vldr	s12, [r0]
 80195f8:	eddc 6a02 	vldr	s13, [ip, #8]
    tmp += input_0[1] * filter[1];
 80195fc:	eee5 7a87 	vfma.f32	s15, s11, s14
    *sum_0 += tmp;
 8019600:	ed94 7a02 	vldr	s14, [r4, #8]
 8019604:	eddc 2a03 	vldr	s5, [ip, #12]
 8019608:	ed94 3a03 	vldr	s6, [r4, #12]
 801960c:	ed94 4a04 	vldr	s8, [r4, #16]
 8019610:	eddc 3a04 	vldr	s7, [ip, #16]
 8019614:	ed94 5a05 	vldr	s10, [r4, #20]
 8019618:	ee77 7a86 	vadd.f32	s15, s15, s12
 801961c:	eddc 4a05 	vldr	s9, [ip, #20]
 8019620:	edd4 5a06 	vldr	s11, [r4, #24]
 8019624:	eddc 8a06 	vldr	s17, [ip, #24]
 8019628:	eee6 7a87 	vfma.f32	s15, s13, s14
 801962c:	ed94 6a07 	vldr	s12, [r4, #28]
 8019630:	ed9c 8a07 	vldr	s16, [ip, #28]
 8019634:	edd4 6a08 	vldr	s13, [r4, #32]
 8019638:	ed9c 0a08 	vldr	s0, [ip, #32]
 801963c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8019640:	eddc 0a09 	vldr	s1, [ip, #36]	; 0x24
 8019644:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019648:	edd4 1a0a 	vldr	s3, [r4, #40]	; 0x28
 801964c:	ed9c 1a0a 	vldr	s2, [ip, #40]	; 0x28
 8019650:	edd4 2a0b 	vldr	s5, [r4, #44]	; 0x2c
 8019654:	ed9c 2a0b 	vldr	s4, [ip, #44]	; 0x2c
           const float* filter) {
 8019658:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    *sum_0 += tmp;
 801965a:	eee3 7a84 	vfma.f32	s15, s7, s8
           const float* filter) {
 801965e:	e9dd 7609 	ldrd	r7, r6, [sp, #36]	; 0x24
    *sum_0 += tmp;
 8019662:	ed9c 3a0c 	vldr	s6, [ip, #48]	; 0x30
 8019666:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
 801966a:	ed9c 4a0d 	vldr	s8, [ip, #52]	; 0x34
 801966e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019672:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8019676:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 801967a:	eddc 9a0e 	vldr	s19, [ip, #56]	; 0x38
 801967e:	ed9c 9a0f 	vldr	s18, [ip, #60]	; 0x3c
 8019682:	eee8 7aa5 	vfma.f32	s15, s17, s11
 8019686:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 801968a:	eddc 8a10 	vldr	s17, [ip, #64]	; 0x40
 801968e:	eee8 7a06 	vfma.f32	s15, s16, s12
 8019692:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 8019696:	ed9c 8a11 	vldr	s16, [ip, #68]	; 0x44
 801969a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801969e:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 80196a2:	ed9c 0a12 	vldr	s0, [ip, #72]	; 0x48
 80196a6:	eee0 7a87 	vfma.f32	s15, s1, s14
 80196aa:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80196ae:	eddc 0a13 	vldr	s1, [ip, #76]	; 0x4c
 80196b2:	eee1 7a21 	vfma.f32	s15, s2, s3
 80196b6:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 80196ba:	eddc 1a14 	vldr	s3, [ip, #80]	; 0x50
 80196be:	eee2 7a22 	vfma.f32	s15, s4, s5
 80196c2:	ed94 2a14 	vldr	s4, [r4, #80]	; 0x50
 80196c6:	eddc 2a15 	vldr	s5, [ip, #84]	; 0x54
 80196ca:	eee3 7a23 	vfma.f32	s15, s6, s7
 80196ce:	ed94 3a15 	vldr	s6, [r4, #84]	; 0x54
 80196d2:	eddc 3a16 	vldr	s7, [ip, #88]	; 0x58
 80196d6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80196da:	ed94 4a16 	vldr	s8, [r4, #88]	; 0x58
 80196de:	eddc 4a17 	vldr	s9, [ip, #92]	; 0x5c
 80196e2:	eee9 7a85 	vfma.f32	s15, s19, s10
 80196e6:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 80196ea:	eddc 9a18 	vldr	s19, [ip, #96]	; 0x60
 80196ee:	eee9 7a25 	vfma.f32	s15, s18, s11
 80196f2:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 80196f6:	ed9c 9a19 	vldr	s18, [ip, #100]	; 0x64
 80196fa:	eee8 7a86 	vfma.f32	s15, s17, s12
 80196fe:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
 8019702:	eddc 8a1a 	vldr	s17, [ip, #104]	; 0x68
 8019706:	eee8 7a26 	vfma.f32	s15, s16, s13
 801970a:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
 801970e:	ed9c 8a1b 	vldr	s16, [ip, #108]	; 0x6c
 8019712:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019716:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 801971a:	ed9c 0a1c 	vldr	s0, [ip, #112]	; 0x70
 801971e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019722:	edd4 0a1c 	vldr	s1, [r4, #112]	; 0x70
 8019726:	ed9c 1a1d 	vldr	s2, [ip, #116]	; 0x74
 801972a:	eee1 7a82 	vfma.f32	s15, s3, s4
 801972e:	edd4 1a1d 	vldr	s3, [r4, #116]	; 0x74
 8019732:	ed9c 2a1e 	vldr	s4, [ip, #120]	; 0x78
 8019736:	eee2 7a83 	vfma.f32	s15, s5, s6
 801973a:	edd4 2a1e 	vldr	s5, [r4, #120]	; 0x78
 801973e:	ed9c 3a1f 	vldr	s6, [ip, #124]	; 0x7c
 8019742:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019746:	edd4 3a1f 	vldr	s7, [r4, #124]	; 0x7c
 801974a:	ed9c 4a20 	vldr	s8, [ip, #128]	; 0x80
 801974e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019752:	edd4 4a20 	vldr	s9, [r4, #128]	; 0x80
 8019756:	ed9c 5a21 	vldr	s10, [ip, #132]	; 0x84
 801975a:	eee9 7aa5 	vfma.f32	s15, s19, s11
 801975e:	edd4 5a21 	vldr	s11, [r4, #132]	; 0x84
 8019762:	eddc 9a22 	vldr	s19, [ip, #136]	; 0x88
 8019766:	eee9 7a06 	vfma.f32	s15, s18, s12
 801976a:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
 801976e:	ed9c 9a23 	vldr	s18, [ip, #140]	; 0x8c
 8019772:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8019776:	edd4 6a23 	vldr	s13, [r4, #140]	; 0x8c
 801977a:	eddc 8a24 	vldr	s17, [ip, #144]	; 0x90
 801977e:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019782:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8019786:	ed9c 8a25 	vldr	s16, [ip, #148]	; 0x94
 801978a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801978e:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
 8019792:	eddc 0a26 	vldr	s1, [ip, #152]	; 0x98
 8019796:	eee1 7a21 	vfma.f32	s15, s2, s3
 801979a:	ed94 1a26 	vldr	s2, [r4, #152]	; 0x98
 801979e:	eddc 1a27 	vldr	s3, [ip, #156]	; 0x9c
 80197a2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80197a6:	ed94 2a27 	vldr	s4, [r4, #156]	; 0x9c
 80197aa:	eddc 2a28 	vldr	s5, [ip, #160]	; 0xa0
 80197ae:	eee3 7a23 	vfma.f32	s15, s6, s7
 80197b2:	ed94 3a28 	vldr	s6, [r4, #160]	; 0xa0
 80197b6:	eddc 3a29 	vldr	s7, [ip, #164]	; 0xa4
 80197ba:	eee4 7a24 	vfma.f32	s15, s8, s9
 80197be:	ed94 4a29 	vldr	s8, [r4, #164]	; 0xa4
 80197c2:	eddc 4a2a 	vldr	s9, [ip, #168]	; 0xa8
 80197c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80197ca:	ed94 5a2a 	vldr	s10, [r4, #168]	; 0xa8
 80197ce:	eddc 5a2b 	vldr	s11, [ip, #172]	; 0xac
 80197d2:	eee9 7a86 	vfma.f32	s15, s19, s12
 80197d6:	ed94 6a2b 	vldr	s12, [r4, #172]	; 0xac
 80197da:	eddc 9a2c 	vldr	s19, [ip, #176]	; 0xb0
 80197de:	eee9 7a26 	vfma.f32	s15, s18, s13
 80197e2:	edd4 6a2c 	vldr	s13, [r4, #176]	; 0xb0
 80197e6:	ed9c 9a2d 	vldr	s18, [ip, #180]	; 0xb4
 80197ea:	eee8 7a87 	vfma.f32	s15, s17, s14
 80197ee:	ed94 7a2d 	vldr	s14, [r4, #180]	; 0xb4
 80197f2:	eddc 8a2e 	vldr	s17, [ip, #184]	; 0xb8
 80197f6:	eee8 7a00 	vfma.f32	s15, s16, s0
 80197fa:	ed94 8a2e 	vldr	s16, [r4, #184]	; 0xb8
 80197fe:	ed9c 0a2f 	vldr	s0, [ip, #188]	; 0xbc
 8019802:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019806:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 801980a:	ed9c 1a30 	vldr	s2, [ip, #192]	; 0xc0
 801980e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019812:	edd4 1a30 	vldr	s3, [r4, #192]	; 0xc0
 8019816:	ed9c 2a31 	vldr	s4, [ip, #196]	; 0xc4
 801981a:	eee2 7a83 	vfma.f32	s15, s5, s6
 801981e:	edd4 2a31 	vldr	s5, [r4, #196]	; 0xc4
 8019822:	ed9c 3a32 	vldr	s6, [ip, #200]	; 0xc8
 8019826:	eee3 7a84 	vfma.f32	s15, s7, s8
 801982a:	edd4 3a32 	vldr	s7, [r4, #200]	; 0xc8
 801982e:	ed9c 4a33 	vldr	s8, [ip, #204]	; 0xcc
 8019832:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019836:	edd4 4a33 	vldr	s9, [r4, #204]	; 0xcc
 801983a:	ed9c 5a34 	vldr	s10, [ip, #208]	; 0xd0
 801983e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019842:	edd4 5a34 	vldr	s11, [r4, #208]	; 0xd0
 8019846:	ed9c 6a35 	vldr	s12, [ip, #212]	; 0xd4
 801984a:	eee9 7aa6 	vfma.f32	s15, s19, s13
 801984e:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8019852:	eddc 9a36 	vldr	s19, [ip, #216]	; 0xd8
 8019856:	eee9 7a07 	vfma.f32	s15, s18, s14
 801985a:	ed94 7a36 	vldr	s14, [r4, #216]	; 0xd8
 801985e:	ed9c 9a37 	vldr	s18, [ip, #220]	; 0xdc
 8019862:	eee8 7a88 	vfma.f32	s15, s17, s16
 8019866:	edd4 8a37 	vldr	s17, [r4, #220]	; 0xdc
 801986a:	ed9c 8a38 	vldr	s16, [ip, #224]	; 0xe0
 801986e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8019872:	ed94 0a38 	vldr	s0, [r4, #224]	; 0xe0
 8019876:	eddc 0a39 	vldr	s1, [ip, #228]	; 0xe4
 801987a:	eee1 7a21 	vfma.f32	s15, s2, s3
 801987e:	ed94 1a39 	vldr	s2, [r4, #228]	; 0xe4
 8019882:	eddc 1a3a 	vldr	s3, [ip, #232]	; 0xe8
 8019886:	eee2 7a22 	vfma.f32	s15, s4, s5
 801988a:	ed94 2a3a 	vldr	s4, [r4, #232]	; 0xe8
 801988e:	eddc 2a3b 	vldr	s5, [ip, #236]	; 0xec
 8019892:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019896:	ed94 3a3b 	vldr	s6, [r4, #236]	; 0xec
 801989a:	eddc 3a3c 	vldr	s7, [ip, #240]	; 0xf0
 801989e:	eee4 7a24 	vfma.f32	s15, s8, s9
 80198a2:	ed94 4a3c 	vldr	s8, [r4, #240]	; 0xf0
 80198a6:	eddc 4a3d 	vldr	s9, [ip, #244]	; 0xf4
 80198aa:	eee5 7a25 	vfma.f32	s15, s10, s11
 80198ae:	ed94 5a3d 	vldr	s10, [r4, #244]	; 0xf4
 80198b2:	eddc 5a3e 	vldr	s11, [ip, #248]	; 0xf8
 80198b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80198ba:	ed94 6a3e 	vldr	s12, [r4, #248]	; 0xf8
 80198be:	eddc 6a3f 	vldr	s13, [ip, #252]	; 0xfc
 80198c2:	eee9 7a87 	vfma.f32	s15, s19, s14
 80198c6:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
 80198ca:	eee9 7a28 	vfma.f32	s15, s18, s17
 80198ce:	eee8 7a00 	vfma.f32	s15, s16, s0
 80198d2:	eee0 7a81 	vfma.f32	s15, s1, s2
 80198d6:	eee1 7a82 	vfma.f32	s15, s3, s4
 80198da:	eee2 7a83 	vfma.f32	s15, s5, s6
 80198de:	eee3 7a84 	vfma.f32	s15, s7, s8
 80198e2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80198e6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80198ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80198ee:	edc0 7a00 	vstr	s15, [r0]
    tmp = 0;
    tmp += input_1[0] * filter[0];
    tmp += input_1[1] * filter[1];
 80198f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80198f6:	ed94 7a01 	vldr	s14, [r4, #4]
 80198fa:	edd7 5a00 	vldr	s11, [r7]
 80198fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019902:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_1[59] * filter[59];
    tmp += input_1[60] * filter[60];
    tmp += input_1[61] * filter[61];
    tmp += input_1[62] * filter[62];
    tmp += input_1[63] * filter[63];
    *sum_1 += tmp;
 8019906:	ed91 6a00 	vldr	s12, [r1]
 801990a:	edd7 6a02 	vldr	s13, [r7, #8]
    tmp += input_1[1] * filter[1];
 801990e:	eee5 7a87 	vfma.f32	s15, s11, s14
    *sum_1 += tmp;
 8019912:	ed94 7a02 	vldr	s14, [r4, #8]
 8019916:	ed97 3a03 	vldr	s6, [r7, #12]
 801991a:	edd4 3a03 	vldr	s7, [r4, #12]
 801991e:	ed97 4a04 	vldr	s8, [r7, #16]
 8019922:	edd4 4a04 	vldr	s9, [r4, #16]
 8019926:	ed97 9a05 	vldr	s18, [r7, #20]
 801992a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801992e:	ed94 5a05 	vldr	s10, [r4, #20]
 8019932:	edd7 8a06 	vldr	s17, [r7, #24]
 8019936:	edd4 5a06 	vldr	s11, [r4, #24]
 801993a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801993e:	ed97 8a07 	vldr	s16, [r7, #28]
 8019942:	ed94 6a07 	vldr	s12, [r4, #28]
 8019946:	ed97 0a08 	vldr	s0, [r7, #32]
 801994a:	edd4 6a08 	vldr	s13, [r4, #32]
 801994e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8019952:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8019956:	eee3 7a23 	vfma.f32	s15, s6, s7
 801995a:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 801995e:	edd4 1a0a 	vldr	s3, [r4, #40]	; 0x28
 8019962:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 8019966:	edd4 2a0b 	vldr	s5, [r4, #44]	; 0x2c
 801996a:	ed97 3a0c 	vldr	s6, [r7, #48]	; 0x30
 801996e:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
 8019972:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019976:	ed97 4a0d 	vldr	s8, [r7, #52]	; 0x34
 801997a:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 801997e:	edd7 9a0e 	vldr	s19, [r7, #56]	; 0x38
 8019982:	eee9 7a05 	vfma.f32	s15, s18, s10
 8019986:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 801998a:	ed97 9a0f 	vldr	s18, [r7, #60]	; 0x3c
 801998e:	eee8 7aa5 	vfma.f32	s15, s17, s11
 8019992:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 8019996:	edd7 8a10 	vldr	s17, [r7, #64]	; 0x40
 801999a:	eee8 7a06 	vfma.f32	s15, s16, s12
 801999e:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 80199a2:	ed97 8a11 	vldr	s16, [r7, #68]	; 0x44
 80199a6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80199aa:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 80199ae:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80199b2:	eee0 7a87 	vfma.f32	s15, s1, s14
 80199b6:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80199ba:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80199be:	eee1 7a21 	vfma.f32	s15, s2, s3
 80199c2:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 80199c6:	edd7 1a14 	vldr	s3, [r7, #80]	; 0x50
 80199ca:	eee2 7a22 	vfma.f32	s15, s4, s5
 80199ce:	ed94 2a14 	vldr	s4, [r4, #80]	; 0x50
 80199d2:	edd7 2a15 	vldr	s5, [r7, #84]	; 0x54
 80199d6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80199da:	ed94 3a15 	vldr	s6, [r4, #84]	; 0x54
 80199de:	edd7 3a16 	vldr	s7, [r7, #88]	; 0x58
 80199e2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80199e6:	ed94 4a16 	vldr	s8, [r4, #88]	; 0x58
 80199ea:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 80199ee:	eee9 7a85 	vfma.f32	s15, s19, s10
 80199f2:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 80199f6:	edd7 9a18 	vldr	s19, [r7, #96]	; 0x60
 80199fa:	eee9 7a25 	vfma.f32	s15, s18, s11
 80199fe:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8019a02:	ed97 9a19 	vldr	s18, [r7, #100]	; 0x64
 8019a06:	eee8 7a86 	vfma.f32	s15, s17, s12
 8019a0a:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
 8019a0e:	edd7 8a1a 	vldr	s17, [r7, #104]	; 0x68
 8019a12:	eee8 7a26 	vfma.f32	s15, s16, s13
 8019a16:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
 8019a1a:	ed97 8a1b 	vldr	s16, [r7, #108]	; 0x6c
 8019a1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019a22:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 8019a26:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8019a2a:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019a2e:	edd4 0a1c 	vldr	s1, [r4, #112]	; 0x70
 8019a32:	ed97 1a1d 	vldr	s2, [r7, #116]	; 0x74
 8019a36:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019a3a:	edd4 1a1d 	vldr	s3, [r4, #116]	; 0x74
 8019a3e:	ed97 2a1e 	vldr	s4, [r7, #120]	; 0x78
 8019a42:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019a46:	edd4 2a1e 	vldr	s5, [r4, #120]	; 0x78
 8019a4a:	ed97 3a1f 	vldr	s6, [r7, #124]	; 0x7c
 8019a4e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019a52:	edd4 3a1f 	vldr	s7, [r4, #124]	; 0x7c
 8019a56:	ed97 4a20 	vldr	s8, [r7, #128]	; 0x80
 8019a5a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019a5e:	edd4 4a20 	vldr	s9, [r4, #128]	; 0x80
 8019a62:	ed97 5a21 	vldr	s10, [r7, #132]	; 0x84
 8019a66:	eee9 7aa5 	vfma.f32	s15, s19, s11
 8019a6a:	edd4 5a21 	vldr	s11, [r4, #132]	; 0x84
 8019a6e:	edd7 9a22 	vldr	s19, [r7, #136]	; 0x88
 8019a72:	eee9 7a06 	vfma.f32	s15, s18, s12
 8019a76:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
 8019a7a:	ed97 9a23 	vldr	s18, [r7, #140]	; 0x8c
 8019a7e:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8019a82:	edd4 6a23 	vldr	s13, [r4, #140]	; 0x8c
 8019a86:	edd7 8a24 	vldr	s17, [r7, #144]	; 0x90
 8019a8a:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019a8e:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8019a92:	ed97 8a25 	vldr	s16, [r7, #148]	; 0x94
 8019a96:	eee0 7a20 	vfma.f32	s15, s0, s1
 8019a9a:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
 8019a9e:	edd7 0a26 	vldr	s1, [r7, #152]	; 0x98
 8019aa2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019aa6:	ed94 1a26 	vldr	s2, [r4, #152]	; 0x98
 8019aaa:	edd7 1a27 	vldr	s3, [r7, #156]	; 0x9c
 8019aae:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019ab2:	ed94 2a27 	vldr	s4, [r4, #156]	; 0x9c
 8019ab6:	edd7 2a28 	vldr	s5, [r7, #160]	; 0xa0
 8019aba:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019abe:	ed94 3a28 	vldr	s6, [r4, #160]	; 0xa0
 8019ac2:	edd7 3a29 	vldr	s7, [r7, #164]	; 0xa4
 8019ac6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019aca:	ed94 4a29 	vldr	s8, [r4, #164]	; 0xa4
 8019ace:	edd7 4a2a 	vldr	s9, [r7, #168]	; 0xa8
 8019ad2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019ad6:	ed94 5a2a 	vldr	s10, [r4, #168]	; 0xa8
 8019ada:	edd7 5a2b 	vldr	s11, [r7, #172]	; 0xac
 8019ade:	eee9 7a86 	vfma.f32	s15, s19, s12
 8019ae2:	ed94 6a2b 	vldr	s12, [r4, #172]	; 0xac
 8019ae6:	edd7 9a2c 	vldr	s19, [r7, #176]	; 0xb0
 8019aea:	eee9 7a26 	vfma.f32	s15, s18, s13
 8019aee:	edd4 6a2c 	vldr	s13, [r4, #176]	; 0xb0
 8019af2:	ed97 9a2d 	vldr	s18, [r7, #180]	; 0xb4
 8019af6:	eee8 7a87 	vfma.f32	s15, s17, s14
 8019afa:	ed94 7a2d 	vldr	s14, [r4, #180]	; 0xb4
 8019afe:	edd7 8a2e 	vldr	s17, [r7, #184]	; 0xb8
 8019b02:	eee8 7a00 	vfma.f32	s15, s16, s0
 8019b06:	ed94 8a2e 	vldr	s16, [r4, #184]	; 0xb8
 8019b0a:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 8019b0e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019b12:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 8019b16:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 8019b1a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019b1e:	edd4 1a30 	vldr	s3, [r4, #192]	; 0xc0
 8019b22:	ed97 2a31 	vldr	s4, [r7, #196]	; 0xc4
 8019b26:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019b2a:	edd4 2a31 	vldr	s5, [r4, #196]	; 0xc4
 8019b2e:	ed97 3a32 	vldr	s6, [r7, #200]	; 0xc8
 8019b32:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019b36:	edd4 3a32 	vldr	s7, [r4, #200]	; 0xc8
 8019b3a:	ed97 4a33 	vldr	s8, [r7, #204]	; 0xcc
 8019b3e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019b42:	edd4 4a33 	vldr	s9, [r4, #204]	; 0xcc
 8019b46:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8019b4a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019b4e:	edd4 5a34 	vldr	s11, [r4, #208]	; 0xd0
 8019b52:	ed97 6a35 	vldr	s12, [r7, #212]	; 0xd4
 8019b56:	eee9 7aa6 	vfma.f32	s15, s19, s13
 8019b5a:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8019b5e:	edd7 9a36 	vldr	s19, [r7, #216]	; 0xd8
 8019b62:	eee9 7a07 	vfma.f32	s15, s18, s14
 8019b66:	ed94 7a36 	vldr	s14, [r4, #216]	; 0xd8
 8019b6a:	ed97 9a37 	vldr	s18, [r7, #220]	; 0xdc
 8019b6e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8019b72:	edd4 8a37 	vldr	s17, [r4, #220]	; 0xdc
 8019b76:	ed97 8a38 	vldr	s16, [r7, #224]	; 0xe0
 8019b7a:	eee0 7a20 	vfma.f32	s15, s0, s1
 8019b7e:	ed94 0a38 	vldr	s0, [r4, #224]	; 0xe0
 8019b82:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 8019b86:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019b8a:	ed94 1a39 	vldr	s2, [r4, #228]	; 0xe4
 8019b8e:	edd7 1a3a 	vldr	s3, [r7, #232]	; 0xe8
 8019b92:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019b96:	ed94 2a3a 	vldr	s4, [r4, #232]	; 0xe8
 8019b9a:	edd7 2a3b 	vldr	s5, [r7, #236]	; 0xec
 8019b9e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019ba2:	ed94 3a3b 	vldr	s6, [r4, #236]	; 0xec
 8019ba6:	edd7 3a3c 	vldr	s7, [r7, #240]	; 0xf0
 8019baa:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019bae:	ed94 4a3c 	vldr	s8, [r4, #240]	; 0xf0
 8019bb2:	edd7 4a3d 	vldr	s9, [r7, #244]	; 0xf4
 8019bb6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019bba:	ed94 5a3d 	vldr	s10, [r4, #244]	; 0xf4
 8019bbe:	edd7 5a3e 	vldr	s11, [r7, #248]	; 0xf8
 8019bc2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019bc6:	ed94 6a3e 	vldr	s12, [r4, #248]	; 0xf8
 8019bca:	edd7 6a3f 	vldr	s13, [r7, #252]	; 0xfc
 8019bce:	eee9 7a87 	vfma.f32	s15, s19, s14
 8019bd2:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
 8019bd6:	eee9 7a28 	vfma.f32	s15, s18, s17
 8019bda:	eee8 7a00 	vfma.f32	s15, s16, s0
 8019bde:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019be2:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019be6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019bea:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019bee:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019bf2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019bf6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019bfa:	edc1 7a00 	vstr	s15, [r1]
    tmp = 0;
    tmp += input_2[0] * filter[0];
    tmp += input_2[1] * filter[1];
 8019bfe:	ed94 7a01 	vldr	s14, [r4, #4]
 8019c02:	edd6 7a01 	vldr	s15, [r6, #4]
 8019c06:	edd6 5a00 	vldr	s11, [r6]
 8019c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c0e:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_2[59] * filter[59];
    tmp += input_2[60] * filter[60];
    tmp += input_2[61] * filter[61];
    tmp += input_2[62] * filter[62];
    tmp += input_2[63] * filter[63];
    *sum_2 += tmp;
 8019c12:	ed92 6a00 	vldr	s12, [r2]
 8019c16:	edd6 6a02 	vldr	s13, [r6, #8]
    tmp += input_2[1] * filter[1];
 8019c1a:	eee5 7a87 	vfma.f32	s15, s11, s14
    *sum_2 += tmp;
 8019c1e:	ed94 7a02 	vldr	s14, [r4, #8]
 8019c22:	ed96 3a03 	vldr	s6, [r6, #12]
 8019c26:	edd4 3a03 	vldr	s7, [r4, #12]
 8019c2a:	ed96 4a04 	vldr	s8, [r6, #16]
 8019c2e:	edd4 4a04 	vldr	s9, [r4, #16]
 8019c32:	ed96 9a05 	vldr	s18, [r6, #20]
 8019c36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019c3a:	ed94 5a05 	vldr	s10, [r4, #20]
 8019c3e:	edd6 8a06 	vldr	s17, [r6, #24]
 8019c42:	edd4 5a06 	vldr	s11, [r4, #24]
 8019c46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019c4a:	ed96 8a07 	vldr	s16, [r6, #28]
 8019c4e:	ed94 6a07 	vldr	s12, [r4, #28]
 8019c52:	ed96 0a08 	vldr	s0, [r6, #32]
 8019c56:	edd4 6a08 	vldr	s13, [r4, #32]
 8019c5a:	edd6 0a09 	vldr	s1, [r6, #36]	; 0x24
 8019c5e:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8019c62:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019c66:	ed96 1a0a 	vldr	s2, [r6, #40]	; 0x28
 8019c6a:	edd4 1a0a 	vldr	s3, [r4, #40]	; 0x28
 8019c6e:	ed96 2a0b 	vldr	s4, [r6, #44]	; 0x2c
 8019c72:	edd4 2a0b 	vldr	s5, [r4, #44]	; 0x2c
 8019c76:	ed96 3a0c 	vldr	s6, [r6, #48]	; 0x30
 8019c7a:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
 8019c7e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019c82:	ed96 4a0d 	vldr	s8, [r6, #52]	; 0x34
 8019c86:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8019c8a:	edd6 9a0e 	vldr	s19, [r6, #56]	; 0x38
 8019c8e:	eee9 7a05 	vfma.f32	s15, s18, s10
 8019c92:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 8019c96:	ed96 9a0f 	vldr	s18, [r6, #60]	; 0x3c
 8019c9a:	eee8 7aa5 	vfma.f32	s15, s17, s11
 8019c9e:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 8019ca2:	edd6 8a10 	vldr	s17, [r6, #64]	; 0x40
 8019ca6:	eee8 7a06 	vfma.f32	s15, s16, s12
 8019caa:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 8019cae:	ed96 8a11 	vldr	s16, [r6, #68]	; 0x44
 8019cb2:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019cb6:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 8019cba:	ed96 0a12 	vldr	s0, [r6, #72]	; 0x48
 8019cbe:	eee0 7a87 	vfma.f32	s15, s1, s14
 8019cc2:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8019cc6:	edd6 0a13 	vldr	s1, [r6, #76]	; 0x4c
 8019cca:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019cce:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 8019cd2:	edd6 1a14 	vldr	s3, [r6, #80]	; 0x50
 8019cd6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019cda:	ed94 2a14 	vldr	s4, [r4, #80]	; 0x50
 8019cde:	edd6 2a15 	vldr	s5, [r6, #84]	; 0x54
 8019ce2:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019ce6:	ed94 3a15 	vldr	s6, [r4, #84]	; 0x54
 8019cea:	edd6 3a16 	vldr	s7, [r6, #88]	; 0x58
 8019cee:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019cf2:	ed94 4a16 	vldr	s8, [r4, #88]	; 0x58
 8019cf6:	edd6 4a17 	vldr	s9, [r6, #92]	; 0x5c
 8019cfa:	eee9 7a85 	vfma.f32	s15, s19, s10
 8019cfe:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8019d02:	edd6 9a18 	vldr	s19, [r6, #96]	; 0x60
 8019d06:	eee9 7a25 	vfma.f32	s15, s18, s11
 8019d0a:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8019d0e:	ed96 9a19 	vldr	s18, [r6, #100]	; 0x64
 8019d12:	eee8 7a86 	vfma.f32	s15, s17, s12
 8019d16:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
 8019d1a:	edd6 8a1a 	vldr	s17, [r6, #104]	; 0x68
 8019d1e:	eee8 7a26 	vfma.f32	s15, s16, s13
 8019d22:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
 8019d26:	ed96 8a1b 	vldr	s16, [r6, #108]	; 0x6c
 8019d2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019d2e:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 8019d32:	ed96 0a1c 	vldr	s0, [r6, #112]	; 0x70
 8019d36:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019d3a:	edd4 0a1c 	vldr	s1, [r4, #112]	; 0x70
 8019d3e:	ed96 1a1d 	vldr	s2, [r6, #116]	; 0x74
 8019d42:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019d46:	edd4 1a1d 	vldr	s3, [r4, #116]	; 0x74
 8019d4a:	ed96 2a1e 	vldr	s4, [r6, #120]	; 0x78
 8019d4e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019d52:	edd4 2a1e 	vldr	s5, [r4, #120]	; 0x78
 8019d56:	ed96 3a1f 	vldr	s6, [r6, #124]	; 0x7c
 8019d5a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019d5e:	edd4 3a1f 	vldr	s7, [r4, #124]	; 0x7c
 8019d62:	ed96 4a20 	vldr	s8, [r6, #128]	; 0x80
 8019d66:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019d6a:	edd4 4a20 	vldr	s9, [r4, #128]	; 0x80
 8019d6e:	ed96 5a21 	vldr	s10, [r6, #132]	; 0x84
 8019d72:	eee9 7aa5 	vfma.f32	s15, s19, s11
 8019d76:	edd4 5a21 	vldr	s11, [r4, #132]	; 0x84
 8019d7a:	edd6 9a22 	vldr	s19, [r6, #136]	; 0x88
 8019d7e:	eee9 7a06 	vfma.f32	s15, s18, s12
 8019d82:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
 8019d86:	ed96 9a23 	vldr	s18, [r6, #140]	; 0x8c
 8019d8a:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8019d8e:	edd4 6a23 	vldr	s13, [r4, #140]	; 0x8c
 8019d92:	edd6 8a24 	vldr	s17, [r6, #144]	; 0x90
 8019d96:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019d9a:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8019d9e:	ed96 8a25 	vldr	s16, [r6, #148]	; 0x94
 8019da2:	eee0 7a20 	vfma.f32	s15, s0, s1
 8019da6:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
 8019daa:	edd6 0a26 	vldr	s1, [r6, #152]	; 0x98
 8019dae:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019db2:	ed94 1a26 	vldr	s2, [r4, #152]	; 0x98
 8019db6:	edd6 1a27 	vldr	s3, [r6, #156]	; 0x9c
 8019dba:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019dbe:	ed94 2a27 	vldr	s4, [r4, #156]	; 0x9c
 8019dc2:	edd6 2a28 	vldr	s5, [r6, #160]	; 0xa0
 8019dc6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019dca:	ed94 3a28 	vldr	s6, [r4, #160]	; 0xa0
 8019dce:	edd6 3a29 	vldr	s7, [r6, #164]	; 0xa4
 8019dd2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019dd6:	ed94 4a29 	vldr	s8, [r4, #164]	; 0xa4
 8019dda:	edd6 4a2a 	vldr	s9, [r6, #168]	; 0xa8
 8019dde:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019de2:	ed94 5a2a 	vldr	s10, [r4, #168]	; 0xa8
 8019de6:	edd6 5a2b 	vldr	s11, [r6, #172]	; 0xac
 8019dea:	eee9 7a86 	vfma.f32	s15, s19, s12
 8019dee:	ed94 6a2b 	vldr	s12, [r4, #172]	; 0xac
 8019df2:	edd6 9a2c 	vldr	s19, [r6, #176]	; 0xb0
 8019df6:	eee9 7a26 	vfma.f32	s15, s18, s13
 8019dfa:	edd4 6a2c 	vldr	s13, [r4, #176]	; 0xb0
 8019dfe:	ed96 9a2d 	vldr	s18, [r6, #180]	; 0xb4
 8019e02:	eee8 7a87 	vfma.f32	s15, s17, s14
 8019e06:	ed94 7a2d 	vldr	s14, [r4, #180]	; 0xb4
 8019e0a:	edd6 8a2e 	vldr	s17, [r6, #184]	; 0xb8
 8019e0e:	eee8 7a00 	vfma.f32	s15, s16, s0
 8019e12:	ed94 8a2e 	vldr	s16, [r4, #184]	; 0xb8
 8019e16:	ed96 0a2f 	vldr	s0, [r6, #188]	; 0xbc
 8019e1a:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019e1e:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 8019e22:	ed96 1a30 	vldr	s2, [r6, #192]	; 0xc0
 8019e26:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019e2a:	edd4 1a30 	vldr	s3, [r4, #192]	; 0xc0
 8019e2e:	ed96 2a31 	vldr	s4, [r6, #196]	; 0xc4
 8019e32:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019e36:	edd4 2a31 	vldr	s5, [r4, #196]	; 0xc4
 8019e3a:	ed96 3a32 	vldr	s6, [r6, #200]	; 0xc8
 8019e3e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019e42:	edd4 3a32 	vldr	s7, [r4, #200]	; 0xc8
 8019e46:	ed96 4a33 	vldr	s8, [r6, #204]	; 0xcc
 8019e4a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019e4e:	edd4 4a33 	vldr	s9, [r4, #204]	; 0xcc
 8019e52:	ed96 5a34 	vldr	s10, [r6, #208]	; 0xd0
 8019e56:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019e5a:	edd4 5a34 	vldr	s11, [r4, #208]	; 0xd0
 8019e5e:	ed96 6a35 	vldr	s12, [r6, #212]	; 0xd4
 8019e62:	eee9 7aa6 	vfma.f32	s15, s19, s13
 8019e66:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8019e6a:	edd6 9a36 	vldr	s19, [r6, #216]	; 0xd8
 8019e6e:	eee9 7a07 	vfma.f32	s15, s18, s14
 8019e72:	ed94 7a36 	vldr	s14, [r4, #216]	; 0xd8
 8019e76:	ed96 9a37 	vldr	s18, [r6, #220]	; 0xdc
 8019e7a:	eee8 7a88 	vfma.f32	s15, s17, s16
 8019e7e:	edd4 8a37 	vldr	s17, [r4, #220]	; 0xdc
 8019e82:	ed96 8a38 	vldr	s16, [r6, #224]	; 0xe0
 8019e86:	eee0 7a20 	vfma.f32	s15, s0, s1
 8019e8a:	ed94 0a38 	vldr	s0, [r4, #224]	; 0xe0
 8019e8e:	edd6 0a39 	vldr	s1, [r6, #228]	; 0xe4
 8019e92:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019e96:	ed94 1a39 	vldr	s2, [r4, #228]	; 0xe4
 8019e9a:	edd6 1a3a 	vldr	s3, [r6, #232]	; 0xe8
 8019e9e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019ea2:	ed94 2a3a 	vldr	s4, [r4, #232]	; 0xe8
 8019ea6:	edd6 2a3b 	vldr	s5, [r6, #236]	; 0xec
 8019eaa:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019eae:	ed94 3a3b 	vldr	s6, [r4, #236]	; 0xec
 8019eb2:	edd6 3a3c 	vldr	s7, [r6, #240]	; 0xf0
 8019eb6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019eba:	ed94 4a3c 	vldr	s8, [r4, #240]	; 0xf0
 8019ebe:	edd6 4a3d 	vldr	s9, [r6, #244]	; 0xf4
 8019ec2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019ec6:	ed94 5a3d 	vldr	s10, [r4, #244]	; 0xf4
 8019eca:	edd6 5a3e 	vldr	s11, [r6, #248]	; 0xf8
 8019ece:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019ed2:	ed94 6a3e 	vldr	s12, [r4, #248]	; 0xf8
 8019ed6:	edd6 6a3f 	vldr	s13, [r6, #252]	; 0xfc
 8019eda:	eee9 7a87 	vfma.f32	s15, s19, s14
 8019ede:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
 8019ee2:	eee9 7a28 	vfma.f32	s15, s18, s17
 8019ee6:	eee8 7a00 	vfma.f32	s15, s16, s0
 8019eea:	eee0 7a81 	vfma.f32	s15, s1, s2
 8019eee:	eee1 7a82 	vfma.f32	s15, s3, s4
 8019ef2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8019ef6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8019efa:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019efe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019f02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019f06:	edc2 7a00 	vstr	s15, [r2]
    tmp = 0;
    tmp += input_3[0] * filter[0];
    tmp += input_3[1] * filter[1];
 8019f0a:	ed94 7a01 	vldr	s14, [r4, #4]
 8019f0e:	edd5 7a01 	vldr	s15, [r5, #4]
 8019f12:	edd5 5a00 	vldr	s11, [r5]
 8019f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f1a:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_3[59] * filter[59];
    tmp += input_3[60] * filter[60];
    tmp += input_3[61] * filter[61];
    tmp += input_3[62] * filter[62];
    tmp += input_3[63] * filter[63];
    *sum_3 += tmp;
 8019f1e:	ed93 6a00 	vldr	s12, [r3]
 8019f22:	edd5 6a02 	vldr	s13, [r5, #8]
    tmp += input_3[1] * filter[1];
 8019f26:	eee5 7a87 	vfma.f32	s15, s11, s14
    *sum_3 += tmp;
 8019f2a:	ed94 7a02 	vldr	s14, [r4, #8]
 8019f2e:	ed95 3a03 	vldr	s6, [r5, #12]
 8019f32:	edd4 3a03 	vldr	s7, [r4, #12]
 8019f36:	ed95 4a04 	vldr	s8, [r5, #16]
 8019f3a:	edd4 4a04 	vldr	s9, [r4, #16]
 8019f3e:	ed95 9a05 	vldr	s18, [r5, #20]
 8019f42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019f46:	ed94 5a05 	vldr	s10, [r4, #20]
 8019f4a:	edd5 8a06 	vldr	s17, [r5, #24]
 8019f4e:	edd4 5a06 	vldr	s11, [r4, #24]
 8019f52:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019f56:	ed95 8a07 	vldr	s16, [r5, #28]
 8019f5a:	ed94 6a07 	vldr	s12, [r4, #28]
 8019f5e:	ed95 0a08 	vldr	s0, [r5, #32]
 8019f62:	edd4 6a08 	vldr	s13, [r4, #32]
 8019f66:	edd5 0a09 	vldr	s1, [r5, #36]	; 0x24
 8019f6a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8019f6e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019f72:	ed95 1a0a 	vldr	s2, [r5, #40]	; 0x28
 8019f76:	edd4 1a0a 	vldr	s3, [r4, #40]	; 0x28
 8019f7a:	ed95 2a0b 	vldr	s4, [r5, #44]	; 0x2c
 8019f7e:	edd4 2a0b 	vldr	s5, [r4, #44]	; 0x2c
 8019f82:	ed95 3a0c 	vldr	s6, [r5, #48]	; 0x30
 8019f86:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
 8019f8a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019f8e:	ed95 4a0d 	vldr	s8, [r5, #52]	; 0x34
 8019f92:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8019f96:	edd5 9a0e 	vldr	s19, [r5, #56]	; 0x38
 8019f9a:	eee9 7a05 	vfma.f32	s15, s18, s10
 8019f9e:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 8019fa2:	ed95 9a0f 	vldr	s18, [r5, #60]	; 0x3c
 8019fa6:	eee8 7aa5 	vfma.f32	s15, s17, s11
 8019faa:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 8019fae:	edd5 8a10 	vldr	s17, [r5, #64]	; 0x40
 8019fb2:	eee8 7a06 	vfma.f32	s15, s16, s12
 8019fb6:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 8019fba:	ed95 8a11 	vldr	s16, [r5, #68]	; 0x44
 8019fbe:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019fc2:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 8019fc6:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
 8019fca:	eee0 7a87 	vfma.f32	s15, s1, s14
 8019fce:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8019fd2:	edd5 0a13 	vldr	s1, [r5, #76]	; 0x4c
 8019fd6:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019fda:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 8019fde:	edd5 1a14 	vldr	s3, [r5, #80]	; 0x50
 8019fe2:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019fe6:	ed94 2a14 	vldr	s4, [r4, #80]	; 0x50
 8019fea:	edd5 2a15 	vldr	s5, [r5, #84]	; 0x54
 8019fee:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019ff2:	ed94 3a15 	vldr	s6, [r4, #84]	; 0x54
 8019ff6:	edd5 3a16 	vldr	s7, [r5, #88]	; 0x58
 8019ffa:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019ffe:	ed94 4a16 	vldr	s8, [r4, #88]	; 0x58
 801a002:	edd5 4a17 	vldr	s9, [r5, #92]	; 0x5c
 801a006:	eee9 7a85 	vfma.f32	s15, s19, s10
 801a00a:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 801a00e:	edd5 9a18 	vldr	s19, [r5, #96]	; 0x60
 801a012:	eee9 7a25 	vfma.f32	s15, s18, s11
 801a016:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 801a01a:	ed95 9a19 	vldr	s18, [r5, #100]	; 0x64
 801a01e:	eee8 7a86 	vfma.f32	s15, s17, s12
 801a022:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
 801a026:	edd5 8a1a 	vldr	s17, [r5, #104]	; 0x68
 801a02a:	eee8 7a26 	vfma.f32	s15, s16, s13
 801a02e:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
 801a032:	ed95 8a1b 	vldr	s16, [r5, #108]	; 0x6c
 801a036:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a03a:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 801a03e:	ed95 0a1c 	vldr	s0, [r5, #112]	; 0x70
 801a042:	eee0 7a81 	vfma.f32	s15, s1, s2
 801a046:	edd4 0a1c 	vldr	s1, [r4, #112]	; 0x70
 801a04a:	ed95 1a1d 	vldr	s2, [r5, #116]	; 0x74
 801a04e:	eee1 7a82 	vfma.f32	s15, s3, s4
 801a052:	edd4 1a1d 	vldr	s3, [r4, #116]	; 0x74
 801a056:	ed95 2a1e 	vldr	s4, [r5, #120]	; 0x78
 801a05a:	eee2 7a83 	vfma.f32	s15, s5, s6
 801a05e:	edd4 2a1e 	vldr	s5, [r4, #120]	; 0x78
 801a062:	ed95 3a1f 	vldr	s6, [r5, #124]	; 0x7c
 801a066:	eee3 7a84 	vfma.f32	s15, s7, s8
 801a06a:	edd4 3a1f 	vldr	s7, [r4, #124]	; 0x7c
 801a06e:	ed95 4a20 	vldr	s8, [r5, #128]	; 0x80
 801a072:	eee4 7a85 	vfma.f32	s15, s9, s10
 801a076:	edd4 4a20 	vldr	s9, [r4, #128]	; 0x80
 801a07a:	ed95 5a21 	vldr	s10, [r5, #132]	; 0x84
 801a07e:	eee9 7aa5 	vfma.f32	s15, s19, s11
 801a082:	edd4 5a21 	vldr	s11, [r4, #132]	; 0x84
 801a086:	edd5 9a22 	vldr	s19, [r5, #136]	; 0x88
 801a08a:	eee9 7a06 	vfma.f32	s15, s18, s12
 801a08e:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
 801a092:	ed95 9a23 	vldr	s18, [r5, #140]	; 0x8c
 801a096:	eee8 7aa6 	vfma.f32	s15, s17, s13
 801a09a:	edd4 6a23 	vldr	s13, [r4, #140]	; 0x8c
 801a09e:	edd5 8a24 	vldr	s17, [r5, #144]	; 0x90
 801a0a2:	eee8 7a07 	vfma.f32	s15, s16, s14
 801a0a6:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 801a0aa:	ed95 8a25 	vldr	s16, [r5, #148]	; 0x94
 801a0ae:	eee0 7a20 	vfma.f32	s15, s0, s1
 801a0b2:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
 801a0b6:	edd5 0a26 	vldr	s1, [r5, #152]	; 0x98
 801a0ba:	eee1 7a21 	vfma.f32	s15, s2, s3
 801a0be:	ed94 1a26 	vldr	s2, [r4, #152]	; 0x98
 801a0c2:	edd5 1a27 	vldr	s3, [r5, #156]	; 0x9c
 801a0c6:	eee2 7a22 	vfma.f32	s15, s4, s5
 801a0ca:	ed94 2a27 	vldr	s4, [r4, #156]	; 0x9c
 801a0ce:	edd5 2a28 	vldr	s5, [r5, #160]	; 0xa0
 801a0d2:	eee3 7a23 	vfma.f32	s15, s6, s7
 801a0d6:	ed94 3a28 	vldr	s6, [r4, #160]	; 0xa0
 801a0da:	edd5 3a29 	vldr	s7, [r5, #164]	; 0xa4
 801a0de:	eee4 7a24 	vfma.f32	s15, s8, s9
 801a0e2:	ed94 4a29 	vldr	s8, [r4, #164]	; 0xa4
 801a0e6:	edd5 4a2a 	vldr	s9, [r5, #168]	; 0xa8
 801a0ea:	eee5 7a25 	vfma.f32	s15, s10, s11
 801a0ee:	ed94 5a2a 	vldr	s10, [r4, #168]	; 0xa8
 801a0f2:	edd5 5a2b 	vldr	s11, [r5, #172]	; 0xac
 801a0f6:	eee9 7a86 	vfma.f32	s15, s19, s12
 801a0fa:	ed94 6a2b 	vldr	s12, [r4, #172]	; 0xac
 801a0fe:	edd5 9a2c 	vldr	s19, [r5, #176]	; 0xb0
 801a102:	eee9 7a26 	vfma.f32	s15, s18, s13
 801a106:	edd4 6a2c 	vldr	s13, [r4, #176]	; 0xb0
 801a10a:	ed95 9a2d 	vldr	s18, [r5, #180]	; 0xb4
 801a10e:	eee8 7a87 	vfma.f32	s15, s17, s14
 801a112:	ed94 7a2d 	vldr	s14, [r4, #180]	; 0xb4
 801a116:	edd5 8a2e 	vldr	s17, [r5, #184]	; 0xb8
 801a11a:	eee8 7a00 	vfma.f32	s15, s16, s0
 801a11e:	ed94 8a2e 	vldr	s16, [r4, #184]	; 0xb8
 801a122:	ed95 0a2f 	vldr	s0, [r5, #188]	; 0xbc
 801a126:	eee0 7a81 	vfma.f32	s15, s1, s2
 801a12a:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 801a12e:	ed95 1a30 	vldr	s2, [r5, #192]	; 0xc0
 801a132:	eee1 7a82 	vfma.f32	s15, s3, s4
 801a136:	edd4 1a30 	vldr	s3, [r4, #192]	; 0xc0
 801a13a:	ed95 2a31 	vldr	s4, [r5, #196]	; 0xc4
 801a13e:	eee2 7a83 	vfma.f32	s15, s5, s6
 801a142:	edd4 2a31 	vldr	s5, [r4, #196]	; 0xc4
 801a146:	ed95 3a32 	vldr	s6, [r5, #200]	; 0xc8
 801a14a:	eee3 7a84 	vfma.f32	s15, s7, s8
 801a14e:	edd4 3a32 	vldr	s7, [r4, #200]	; 0xc8
 801a152:	ed95 4a33 	vldr	s8, [r5, #204]	; 0xcc
 801a156:	eee4 7a85 	vfma.f32	s15, s9, s10
 801a15a:	edd4 4a33 	vldr	s9, [r4, #204]	; 0xcc
 801a15e:	ed95 5a34 	vldr	s10, [r5, #208]	; 0xd0
 801a162:	eee5 7a86 	vfma.f32	s15, s11, s12
 801a166:	edd4 5a34 	vldr	s11, [r4, #208]	; 0xd0
 801a16a:	ed95 6a35 	vldr	s12, [r5, #212]	; 0xd4
 801a16e:	eee9 7aa6 	vfma.f32	s15, s19, s13
 801a172:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 801a176:	edd5 9a36 	vldr	s19, [r5, #216]	; 0xd8
 801a17a:	eee9 7a07 	vfma.f32	s15, s18, s14
 801a17e:	ed94 7a36 	vldr	s14, [r4, #216]	; 0xd8
 801a182:	ed95 9a37 	vldr	s18, [r5, #220]	; 0xdc
 801a186:	eee8 7a88 	vfma.f32	s15, s17, s16
 801a18a:	edd4 8a37 	vldr	s17, [r4, #220]	; 0xdc
 801a18e:	ed95 8a38 	vldr	s16, [r5, #224]	; 0xe0
 801a192:	eee0 7a20 	vfma.f32	s15, s0, s1
 801a196:	ed94 0a38 	vldr	s0, [r4, #224]	; 0xe0
 801a19a:	edd5 0a39 	vldr	s1, [r5, #228]	; 0xe4
 801a19e:	eee1 7a21 	vfma.f32	s15, s2, s3
 801a1a2:	ed94 1a39 	vldr	s2, [r4, #228]	; 0xe4
 801a1a6:	edd5 1a3a 	vldr	s3, [r5, #232]	; 0xe8
 801a1aa:	eee2 7a22 	vfma.f32	s15, s4, s5
 801a1ae:	ed94 2a3a 	vldr	s4, [r4, #232]	; 0xe8
 801a1b2:	edd5 2a3b 	vldr	s5, [r5, #236]	; 0xec
 801a1b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 801a1ba:	ed94 3a3b 	vldr	s6, [r4, #236]	; 0xec
 801a1be:	edd5 3a3c 	vldr	s7, [r5, #240]	; 0xf0
 801a1c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 801a1c6:	ed94 4a3c 	vldr	s8, [r4, #240]	; 0xf0
 801a1ca:	edd5 4a3d 	vldr	s9, [r5, #244]	; 0xf4
 801a1ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 801a1d2:	ed94 5a3d 	vldr	s10, [r4, #244]	; 0xf4
 801a1d6:	edd5 5a3e 	vldr	s11, [r5, #248]	; 0xf8
 801a1da:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a1de:	ed94 6a3e 	vldr	s12, [r4, #248]	; 0xf8
 801a1e2:	edd5 6a3f 	vldr	s13, [r5, #252]	; 0xfc
 801a1e6:	eee9 7a87 	vfma.f32	s15, s19, s14
 801a1ea:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
 801a1ee:	eee9 7a28 	vfma.f32	s15, s18, s17
 801a1f2:	eee8 7a00 	vfma.f32	s15, s16, s0
}
 801a1f6:	ecbd 8b04 	vpop	{d8-d9}
 801a1fa:	bcf0      	pop	{r4, r5, r6, r7}
    *sum_3 += tmp;
 801a1fc:	eee0 7a81 	vfma.f32	s15, s1, s2
 801a200:	eee1 7a82 	vfma.f32	s15, s3, s4
 801a204:	eee2 7a83 	vfma.f32	s15, s5, s6
 801a208:	eee3 7a84 	vfma.f32	s15, s7, s8
 801a20c:	eee4 7a85 	vfma.f32	s15, s9, s10
 801a210:	eee5 7a86 	vfma.f32	s15, s11, s12
 801a214:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a218:	edc3 7a00 	vstr	s15, [r3]
}
 801a21c:	4770      	bx	lr
 801a21e:	bf00      	nop

0801a220 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace>:
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const float* filter_data, const float* bias_data, 
                 int8_t* output_weight_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const uint16_t groups,
                 const float* scales, const float learning_rate) {
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	ed2d 8b10 	vpush	{d8-d15}
 801a228:	f6ad 2d14 	subw	sp, sp, #2580	; 0xa14
 801a22c:	f8bd 6a8c 	ldrh.w	r6, [sp, #2700]	; 0xa8c
 801a230:	f8bd 5a98 	ldrh.w	r5, [sp, #2712]	; 0xa98
 801a234:	f8dd 4a80 	ldr.w	r4, [sp, #2688]	; 0xa80
 801a238:	f8dd 7a90 	ldr.w	r7, [sp, #2704]	; 0xa90
  int i_output_depth, i , j;
  int output_depth_per_group = output_depth / groups;
 801a23c:	fbb6 f6f5 	udiv	r6, r6, r5

  for (i_output_depth = 0; i_output_depth < output_depth_per_group; i_output_depth += 16) {
 801a240:	2e00      	cmp	r6, #0
 801a242:	f004 80f5 	beq.w	801e430 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x4210>
 801a246:	469b      	mov	fp, r3
 801a248:	911c      	str	r1, [sp, #112]	; 0x70
 801a24a:	1d23      	adds	r3, r4, #4
 801a24c:	0069      	lsls	r1, r5, #1
 801a24e:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 801a252:	f8cd 28bc 	str.w	r2, [sp, #2236]	; 0x8bc
 801a256:	f8cd 38b8 	str.w	r3, [sp, #2232]	; 0x8b8
 801a25a:	012a      	lsls	r2, r5, #4
 801a25c:	194b      	adds	r3, r1, r5
 801a25e:	9106      	str	r1, [sp, #24]
 801a260:	eb0e 0805 	add.w	r8, lr, r5
    int8_t* out_14 = &output_weight_data[(i_output_depth + 14) * groups]; int8_t* out_15 = &output_weight_data[(i_output_depth + 15) * groups];

    const float* input = input_data;

    /* Calculate 4 rows(input channels) at a time */
    uint16_t group_cnt = groups >> 2;
 801a264:	08a9      	lsrs	r1, r5, #2
 801a266:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801a26a:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
 801a26e:	4610      	mov	r0, r2
 801a270:	ea4f 0948 	mov.w	r9, r8, lsl #1
 801a274:	f8cd 18c0 	str.w	r1, [sp, #2240]	; 0x8c0
 801a278:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
 801a27c:	f8cd 2904 	str.w	r2, [sp, #2308]	; 0x904
    while (group_cnt--) {
 801a280:	1e4a      	subs	r2, r1, #1
 801a282:	1b41      	subs	r1, r0, r5
 801a284:	eb0c 0005 	add.w	r0, ip, r5
 801a288:	44a4      	add	ip, r4
 801a28a:	b292      	uxth	r2, r2
 801a28c:	9008      	str	r0, [sp, #32]
 801a28e:	eb09 0005 	add.w	r0, r9, r5
 801a292:	f8cd c8d0 	str.w	ip, [sp, #2256]	; 0x8d0
 801a296:	eb04 0c0e 	add.w	ip, r4, lr
 801a29a:	9007      	str	r0, [sp, #28]
      src_3 = input++;

      for (i = 0; i < input_height; i++) {
        for (j = 0; j < input_width; j++) {
          *two_column_buffer_0++ = *src_0;
          src_0 += input_depth;
 801a29c:	2000      	movs	r0, #0
 801a29e:	f8cd c8f0 	str.w	ip, [sp, #2288]	; 0x8f0
 801a2a2:	eb04 0c08 	add.w	ip, r4, r8
 801a2a6:	f8cd 08a8 	str.w	r0, [sp, #2216]	; 0x8a8
 801a2aa:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 801a2ae:	9806      	ldr	r0, [sp, #24]
 801a2b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801a2b4:	920a      	str	r2, [sp, #40]	; 0x28
 801a2b6:	eeb0 9a41 	vmov.f32	s18, s2
 801a2ba:	4420      	add	r0, r4
 801a2bc:	f8cd c8ec 	str.w	ip, [sp, #2284]	; 0x8ec
 801a2c0:	eb04 0c09 	add.w	ip, r4, r9
 801a2c4:	9109      	str	r1, [sp, #36]	; 0x24
 801a2c6:	f8cd 08f8 	str.w	r0, [sp, #2296]	; 0x8f8
 801a2ca:	00e9      	lsls	r1, r5, #3
 801a2cc:	9808      	ldr	r0, [sp, #32]
 801a2ce:	eef0 8a60 	vmov.f32	s17, s1
 801a2d2:	f8cd c8d8 	str.w	ip, [sp, #2264]	; 0x8d8
 801a2d6:	1b4a      	subs	r2, r1, r5
 801a2d8:	1820      	adds	r0, r4, r0
 801a2da:	eeb0 8a40 	vmov.f32	s16, s0
 801a2de:	f8cd 08cc 	str.w	r0, [sp, #2252]	; 0x8cc
 801a2e2:	9807      	ldr	r0, [sp, #28]
 801a2e4:	1820      	adds	r0, r4, r0
 801a2e6:	f8cd 08d4 	str.w	r0, [sp, #2260]	; 0x8d4
 801a2ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a2ec:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 801a2f0:	18e0      	adds	r0, r4, r3
 801a2f2:	f8cd c8fc 	str.w	ip, [sp, #2300]	; 0x8fc
 801a2f6:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 801a2fa:	f8cd 08f4 	str.w	r0, [sp, #2292]	; 0x8f4
 801a2fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a300:	f8cd c8e8 	str.w	ip, [sp, #2280]	; 0x8e8
 801a304:	f10a 0c01 	add.w	ip, sl, #1
 801a308:	1823      	adds	r3, r4, r0
 801a30a:	2000      	movs	r0, #0
 801a30c:	f8cd c900 	str.w	ip, [sp, #2304]	; 0x900
 801a310:	eb04 0c42 	add.w	ip, r4, r2, lsl #1
 801a314:	f8cd 38c4 	str.w	r3, [sp, #2244]	; 0x8c4
 801a318:	18a3      	adds	r3, r4, r2
 801a31a:	194a      	adds	r2, r1, r5
 801a31c:	1861      	adds	r1, r4, r1
 801a31e:	f8cd 38e4 	str.w	r3, [sp, #2276]	; 0x8e4
 801a322:	46ba      	mov	sl, r7
 801a324:	18a2      	adds	r2, r4, r2
 801a326:	f8cd c8c8 	str.w	ip, [sp, #2248]	; 0x8c8
 801a32a:	f8cd 28dc 	str.w	r2, [sp, #2268]	; 0x8dc
 801a32e:	f8cd 18e0 	str.w	r1, [sp, #2272]	; 0x8e0
 801a332:	f8dd 38b8 	ldr.w	r3, [sp, #2232]	; 0x8b8
 801a336:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
 801a33a:	f241 0004 	movw	r0, #4100	; 0x1004
 801a33e:	1959      	adds	r1, r3, r5
 801a340:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
        *two_column_buffer_0++ = *src_0; src_0 += output_depth_per_group;
 801a344:	00b5      	lsls	r5, r6, #2
 801a346:	fb03 f20b 	mul.w	r2, r3, fp
 801a34a:	009b      	lsls	r3, r3, #2
 801a34c:	f8cd 1908 	str.w	r1, [sp, #2312]	; 0x908
 801a350:	921d      	str	r2, [sp, #116]	; 0x74
 801a352:	183a      	adds	r2, r7, r0
 801a354:	931e      	str	r3, [sp, #120]	; 0x78
 801a356:	f8cd 28a4 	str.w	r2, [sp, #2212]	; 0x8a4
 801a35a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801a35e:	462f      	mov	r7, r5
 801a360:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
 801a364:	0172      	lsls	r2, r6, #5
 801a366:	f8dd 6a9c 	ldr.w	r6, [sp, #2716]	; 0xa9c
 801a36a:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
 801a36e:	46b1      	mov	r9, r6
 801a370:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a374:	4639      	mov	r1, r7
 801a376:	3308      	adds	r3, #8
 801a378:	932c      	str	r3, [sp, #176]	; 0xb0
 801a37a:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a37e:	330c      	adds	r3, #12
 801a380:	931f      	str	r3, [sp, #124]	; 0x7c
 801a382:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a386:	3310      	adds	r3, #16
 801a388:	9320      	str	r3, [sp, #128]	; 0x80
 801a38a:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a38e:	3314      	adds	r3, #20
 801a390:	9321      	str	r3, [sp, #132]	; 0x84
 801a392:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a396:	3318      	adds	r3, #24
 801a398:	9322      	str	r3, [sp, #136]	; 0x88
 801a39a:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a39e:	331c      	adds	r3, #28
 801a3a0:	9323      	str	r3, [sp, #140]	; 0x8c
 801a3a2:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3a6:	3320      	adds	r3, #32
 801a3a8:	9324      	str	r3, [sp, #144]	; 0x90
 801a3aa:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3ae:	3324      	adds	r3, #36	; 0x24
 801a3b0:	9325      	str	r3, [sp, #148]	; 0x94
 801a3b2:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3b6:	3328      	adds	r3, #40	; 0x28
 801a3b8:	9326      	str	r3, [sp, #152]	; 0x98
 801a3ba:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3be:	332c      	adds	r3, #44	; 0x2c
 801a3c0:	9327      	str	r3, [sp, #156]	; 0x9c
 801a3c2:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3c6:	3330      	adds	r3, #48	; 0x30
 801a3c8:	9328      	str	r3, [sp, #160]	; 0xa0
 801a3ca:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3ce:	3334      	adds	r3, #52	; 0x34
 801a3d0:	9329      	str	r3, [sp, #164]	; 0xa4
 801a3d2:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3d6:	3338      	adds	r3, #56	; 0x38
 801a3d8:	932a      	str	r3, [sp, #168]	; 0xa8
 801a3da:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3de:	333c      	adds	r3, #60	; 0x3c
 801a3e0:	932b      	str	r3, [sp, #172]	; 0xac
 801a3e2:	f8dd 3a78 	ldr.w	r3, [sp, #2680]	; 0xa78
 801a3e6:	3340      	adds	r3, #64	; 0x40
 801a3e8:	f8cd 38b0 	str.w	r3, [sp, #2224]	; 0x8b0
          src_0 += input_depth;
 801a3ec:	4653      	mov	r3, sl
 801a3ee:	e9cd b92d 	strd	fp, r9, [sp, #180]	; 0xb4
 801a3f2:	f8cd aa90 	str.w	sl, [sp, #2704]	; 0xa90
 801a3f6:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a3f8:	f8dd 2a78 	ldr.w	r2, [sp, #2680]	; 0xa78
 801a3fc:	9009      	str	r0, [sp, #36]	; 0x24
 801a3fe:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801a400:	3204      	adds	r2, #4
 801a402:	9008      	str	r0, [sp, #32]
 801a404:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801a408:	9018      	str	r0, [sp, #96]	; 0x60
 801a40a:	f503 7000 	add.w	r0, r3, #512	; 0x200
 801a40e:	9017      	str	r0, [sp, #92]	; 0x5c
 801a410:	f503 7040 	add.w	r0, r3, #768	; 0x300
 801a414:	9016      	str	r0, [sp, #88]	; 0x58
 801a416:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 801a41a:	9015      	str	r0, [sp, #84]	; 0x54
 801a41c:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
 801a420:	9014      	str	r0, [sp, #80]	; 0x50
 801a422:	f503 60c0 	add.w	r0, r3, #1536	; 0x600
 801a426:	9013      	str	r0, [sp, #76]	; 0x4c
 801a428:	f503 60e0 	add.w	r0, r3, #1792	; 0x700
 801a42c:	9012      	str	r0, [sp, #72]	; 0x48
 801a42e:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 801a432:	9011      	str	r0, [sp, #68]	; 0x44
 801a434:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 801a438:	9010      	str	r0, [sp, #64]	; 0x40
 801a43a:	f503 6020 	add.w	r0, r3, #2560	; 0xa00
 801a43e:	900f      	str	r0, [sp, #60]	; 0x3c
 801a440:	f503 6030 	add.w	r0, r3, #2816	; 0xb00
 801a444:	900e      	str	r0, [sp, #56]	; 0x38
 801a446:	f503 6040 	add.w	r0, r3, #3072	; 0xc00
 801a44a:	900d      	str	r0, [sp, #52]	; 0x34
 801a44c:	f503 6050 	add.w	r0, r3, #3328	; 0xd00
 801a450:	900c      	str	r0, [sp, #48]	; 0x30
 801a452:	f503 6060 	add.w	r0, r3, #3584	; 0xe00
 801a456:	900b      	str	r0, [sp, #44]	; 0x2c
 801a458:	f503 6070 	add.w	r0, r3, #3840	; 0xf00
 801a45c:	900a      	str	r0, [sp, #40]	; 0x28
 801a45e:	f103 0020 	add.w	r0, r3, #32
 801a462:	901b      	str	r0, [sp, #108]	; 0x6c
 801a464:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801a466:	9007      	str	r0, [sp, #28]
 801a468:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801a46a:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
 801a46e:	9006      	str	r0, [sp, #24]
 801a470:	e9dd 8924 	ldrd	r8, r9, [sp, #144]	; 0x90
 801a474:	e9dd ce22 	ldrd	ip, lr, [sp, #136]	; 0x88
 801a478:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 801a47c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801a47e:	f8dd 0a78 	ldr.w	r0, [sp, #2680]	; 0xa78
 801a482:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801a484:	e9cd 0219 	strd	r0, r2, [sp, #100]	; 0x64
 801a488:	4620      	mov	r0, r4
 801a48a:	461c      	mov	r4, r3
        *two_column_buffer_0++ = *src_0; src_0 += output_depth_per_group;
 801a48c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a48e:	edd3 7a00 	vldr	s15, [r3]
 801a492:	440b      	add	r3, r1
 801a494:	9319      	str	r3, [sp, #100]	; 0x64
        *two_column_buffer_1++ = *src_1; src_1 += output_depth_per_group;
 801a496:	9b1a      	ldr	r3, [sp, #104]	; 0x68
        *two_column_buffer_0++ = *src_0; src_0 += output_depth_per_group;
 801a498:	ece4 7a01 	vstmia	r4!, {s15}
        *two_column_buffer_1++ = *src_1; src_1 += output_depth_per_group;
 801a49c:	edd3 7a00 	vldr	s15, [r3]
 801a4a0:	440b      	add	r3, r1
 801a4a2:	931a      	str	r3, [sp, #104]	; 0x68
 801a4a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a4a6:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_2++ = *src_2; src_2 += output_depth_per_group;
 801a4aa:	edd0 7a00 	vldr	s15, [r0]
 801a4ae:	4408      	add	r0, r1
        *two_column_buffer_1++ = *src_1; src_1 += output_depth_per_group;
 801a4b0:	9318      	str	r3, [sp, #96]	; 0x60
        *two_column_buffer_2++ = *src_2; src_2 += output_depth_per_group;
 801a4b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a4b4:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_3++ = *src_3; src_3 += output_depth_per_group;
 801a4b8:	edd5 7a00 	vldr	s15, [r5]
 801a4bc:	440d      	add	r5, r1
        *two_column_buffer_2++ = *src_2; src_2 += output_depth_per_group;
 801a4be:	9317      	str	r3, [sp, #92]	; 0x5c
        *two_column_buffer_3++ = *src_3; src_3 += output_depth_per_group;
 801a4c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a4c2:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_4++ = *src_4; src_4 += output_depth_per_group;
 801a4c6:	edd6 7a00 	vldr	s15, [r6]
 801a4ca:	440e      	add	r6, r1
        *two_column_buffer_3++ = *src_3; src_3 += output_depth_per_group;
 801a4cc:	9316      	str	r3, [sp, #88]	; 0x58
        *two_column_buffer_4++ = *src_4; src_4 += output_depth_per_group;
 801a4ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a4d0:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_5++ = *src_5; src_5 += output_depth_per_group;
 801a4d4:	edd7 7a00 	vldr	s15, [r7]
 801a4d8:	440f      	add	r7, r1
        *two_column_buffer_4++ = *src_4; src_4 += output_depth_per_group;
 801a4da:	9315      	str	r3, [sp, #84]	; 0x54
        *two_column_buffer_5++ = *src_5; src_5 += output_depth_per_group;
 801a4dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a4de:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_6++ = *src_6; src_6 += output_depth_per_group;
 801a4e2:	eddc 7a00 	vldr	s15, [ip]
 801a4e6:	448c      	add	ip, r1
        *two_column_buffer_5++ = *src_5; src_5 += output_depth_per_group;
 801a4e8:	9314      	str	r3, [sp, #80]	; 0x50
        *two_column_buffer_6++ = *src_6; src_6 += output_depth_per_group;
 801a4ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a4ec:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_7++ = *src_7; src_7 += output_depth_per_group;
 801a4f0:	edde 7a00 	vldr	s15, [lr]
 801a4f4:	448e      	add	lr, r1
        *two_column_buffer_6++ = *src_6; src_6 += output_depth_per_group;
 801a4f6:	9313      	str	r3, [sp, #76]	; 0x4c
        *two_column_buffer_7++ = *src_7; src_7 += output_depth_per_group;
 801a4f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a4fa:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_8++ = *src_8; src_8 += output_depth_per_group;
 801a4fe:	edd8 7a00 	vldr	s15, [r8]
 801a502:	4488      	add	r8, r1
        *two_column_buffer_7++ = *src_7; src_7 += output_depth_per_group;
 801a504:	9312      	str	r3, [sp, #72]	; 0x48
        *two_column_buffer_8++ = *src_8; src_8 += output_depth_per_group;
 801a506:	9b11      	ldr	r3, [sp, #68]	; 0x44
        *two_column_buffer_12++ = *src_12; src_12 += output_depth_per_group;
 801a508:	9a06      	ldr	r2, [sp, #24]
        *two_column_buffer_8++ = *src_8; src_8 += output_depth_per_group;
 801a50a:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_9++ = *src_9; src_9 += output_depth_per_group;
 801a50e:	edd9 7a00 	vldr	s15, [r9]
 801a512:	4489      	add	r9, r1
        *two_column_buffer_8++ = *src_8; src_8 += output_depth_per_group;
 801a514:	9311      	str	r3, [sp, #68]	; 0x44
        *two_column_buffer_9++ = *src_9; src_9 += output_depth_per_group;
 801a516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a518:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_10++ = *src_10; src_10 += output_depth_per_group;
 801a51c:	edda 7a00 	vldr	s15, [sl]
 801a520:	448a      	add	sl, r1
        *two_column_buffer_9++ = *src_9; src_9 += output_depth_per_group;
 801a522:	9310      	str	r3, [sp, #64]	; 0x40
        *two_column_buffer_10++ = *src_10; src_10 += output_depth_per_group;
 801a524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a526:	ece3 7a01 	vstmia	r3!, {s15}
        *two_column_buffer_11++ = *src_11; src_11 += output_depth_per_group;
 801a52a:	eddb 7a00 	vldr	s15, [fp]
 801a52e:	448b      	add	fp, r1
        *two_column_buffer_10++ = *src_10; src_10 += output_depth_per_group;
 801a530:	930f      	str	r3, [sp, #60]	; 0x3c
        *two_column_buffer_11++ = *src_11; src_11 += output_depth_per_group;
 801a532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a534:	ece3 7a01 	vstmia	r3!, {s15}
 801a538:	930e      	str	r3, [sp, #56]	; 0x38
        *two_column_buffer_12++ = *src_12; src_12 += output_depth_per_group;
 801a53a:	4613      	mov	r3, r2
 801a53c:	edd2 7a00 	vldr	s15, [r2]
 801a540:	440b      	add	r3, r1
 801a542:	9306      	str	r3, [sp, #24]
 801a544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a546:	ece3 7a01 	vstmia	r3!, {s15}
 801a54a:	930d      	str	r3, [sp, #52]	; 0x34
        *two_column_buffer_13++ = *src_13; src_13 += output_depth_per_group;
 801a54c:	9b07      	ldr	r3, [sp, #28]
 801a54e:	edd3 7a00 	vldr	s15, [r3]
 801a552:	440b      	add	r3, r1
 801a554:	9307      	str	r3, [sp, #28]
 801a556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a558:	ece3 7a01 	vstmia	r3!, {s15}
 801a55c:	930c      	str	r3, [sp, #48]	; 0x30
        *two_column_buffer_14++ = *src_14; src_14 += output_depth_per_group;
 801a55e:	9b08      	ldr	r3, [sp, #32]
 801a560:	edd3 7a00 	vldr	s15, [r3]
 801a564:	440b      	add	r3, r1
 801a566:	9308      	str	r3, [sp, #32]
 801a568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a56a:	ece3 7a01 	vstmia	r3!, {s15}
 801a56e:	930b      	str	r3, [sp, #44]	; 0x2c
        *two_column_buffer_15++ = *src_15; src_15 += output_depth_per_group;
 801a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a572:	edd3 7a00 	vldr	s15, [r3]
 801a576:	440b      	add	r3, r1
 801a578:	9309      	str	r3, [sp, #36]	; 0x24
 801a57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a57c:	ece3 7a01 	vstmia	r3!, {s15}
 801a580:	930a      	str	r3, [sp, #40]	; 0x28
      for (j = 0; j < DIM_KER_Y; j++) {
 801a582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a584:	42a3      	cmp	r3, r4
 801a586:	d181      	bne.n	801a48c <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x26c>
 801a588:	f8dd 2a78 	ldr.w	r2, [sp, #2680]	; 0xa78
 801a58c:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 801a590:	4610      	mov	r0, r2
 801a592:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a594:	4418      	add	r0, r3
 801a596:	f8cd 0a78 	str.w	r0, [sp, #2680]	; 0xa78
 801a59a:	4610      	mov	r0, r2
 801a59c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a59e:	4418      	add	r0, r3
 801a5a0:	902c      	str	r0, [sp, #176]	; 0xb0
 801a5a2:	4610      	mov	r0, r2
 801a5a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a5a6:	4418      	add	r0, r3
 801a5a8:	901f      	str	r0, [sp, #124]	; 0x7c
 801a5aa:	4610      	mov	r0, r2
 801a5ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a5ae:	4418      	add	r0, r3
 801a5b0:	9020      	str	r0, [sp, #128]	; 0x80
 801a5b2:	4610      	mov	r0, r2
 801a5b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801a5b6:	4418      	add	r0, r3
 801a5b8:	9021      	str	r0, [sp, #132]	; 0x84
 801a5ba:	4610      	mov	r0, r2
 801a5bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801a5be:	4418      	add	r0, r3
 801a5c0:	9022      	str	r0, [sp, #136]	; 0x88
 801a5c2:	4610      	mov	r0, r2
 801a5c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a5c6:	4418      	add	r0, r3
 801a5c8:	9023      	str	r0, [sp, #140]	; 0x8c
 801a5ca:	4610      	mov	r0, r2
 801a5cc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a5ce:	4418      	add	r0, r3
 801a5d0:	9024      	str	r0, [sp, #144]	; 0x90
 801a5d2:	4610      	mov	r0, r2
 801a5d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801a5d6:	4418      	add	r0, r3
 801a5d8:	9025      	str	r0, [sp, #148]	; 0x94
 801a5da:	4610      	mov	r0, r2
 801a5dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a5de:	4418      	add	r0, r3
 801a5e0:	9026      	str	r0, [sp, #152]	; 0x98
 801a5e2:	4610      	mov	r0, r2
 801a5e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a5e6:	4418      	add	r0, r3
 801a5e8:	9027      	str	r0, [sp, #156]	; 0x9c
 801a5ea:	4610      	mov	r0, r2
 801a5ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a5ee:	4418      	add	r0, r3
 801a5f0:	9028      	str	r0, [sp, #160]	; 0xa0
 801a5f2:	4610      	mov	r0, r2
 801a5f4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a5f6:	4418      	add	r0, r3
 801a5f8:	9029      	str	r0, [sp, #164]	; 0xa4
 801a5fa:	4610      	mov	r0, r2
 801a5fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a5fe:	4418      	add	r0, r3
 801a600:	441a      	add	r2, r3
 801a602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a604:	902a      	str	r0, [sp, #168]	; 0xa8
 801a606:	922b      	str	r2, [sp, #172]	; 0xac
    for (i = 0; i < DIM_KER_X; i++) {
 801a608:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
 801a60c:	4293      	cmp	r3, r2
 801a60e:	f47f aef2 	bne.w	801a3f6 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x1d6>
    while (group_cnt--) {
 801a612:	f8dd 38c0 	ldr.w	r3, [sp, #2240]	; 0x8c0
 801a616:	460f      	mov	r7, r1
 801a618:	f8dd aa90 	ldr.w	sl, [sp, #2704]	; 0xa90
 801a61c:	e9dd b92d 	ldrd	fp, r9, [sp, #180]	; 0xb4
 801a620:	2b00      	cmp	r3, #0
 801a622:	f003 86ee 	beq.w	801e402 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x41e2>
 801a626:	f8dd 38f8 	ldr.w	r3, [sp, #2296]	; 0x8f8
 801a62a:	f8dd 28e0 	ldr.w	r2, [sp, #2272]	; 0x8e0
 801a62e:	1d1d      	adds	r5, r3, #4
 801a630:	f8dd 38f4 	ldr.w	r3, [sp, #2292]	; 0x8f4
 801a634:	1d16      	adds	r6, r2, #4
 801a636:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
 801a63a:	1d1c      	adds	r4, r3, #4
 801a63c:	f8dd 38f0 	ldr.w	r3, [sp, #2288]	; 0x8f0
 801a640:	f102 0c04 	add.w	ip, r2, #4
 801a644:	f8dd 28d4 	ldr.w	r2, [sp, #2260]	; 0x8d4
 801a648:	1d18      	adds	r0, r3, #4
 801a64a:	f8dd 38ec 	ldr.w	r3, [sp, #2284]	; 0x8ec
 801a64e:	f102 0e04 	add.w	lr, r2, #4
 801a652:	f8dd 28d0 	ldr.w	r2, [sp, #2256]	; 0x8d0
 801a656:	1d19      	adds	r1, r3, #4
 801a658:	f8dd 38e8 	ldr.w	r3, [sp, #2280]	; 0x8e8
 801a65c:	f102 0804 	add.w	r8, r2, #4
 801a660:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
 801a664:	3304      	adds	r3, #4
 801a666:	4415      	add	r5, r2
 801a668:	4411      	add	r1, r2
 801a66a:	9306      	str	r3, [sp, #24]
 801a66c:	4414      	add	r4, r2
 801a66e:	f8dd 38e4 	ldr.w	r3, [sp, #2276]	; 0x8e4
 801a672:	4410      	add	r0, r2
 801a674:	95fc      	str	r5, [sp, #1008]	; 0x3f0
 801a676:	4615      	mov	r5, r2
 801a678:	3304      	adds	r3, #4
 801a67a:	91f9      	str	r1, [sp, #996]	; 0x3e4
 801a67c:	9a06      	ldr	r2, [sp, #24]
 801a67e:	1959      	adds	r1, r3, r5
 801a680:	90fa      	str	r0, [sp, #1000]	; 0x3e8
 801a682:	1950      	adds	r0, r2, r5
 801a684:	94fb      	str	r4, [sp, #1004]	; 0x3ec
 801a686:	9110      	str	r1, [sp, #64]	; 0x40
 801a688:	1971      	adds	r1, r6, r5
 801a68a:	9011      	str	r0, [sp, #68]	; 0x44
 801a68c:	462a      	mov	r2, r5
 801a68e:	910f      	str	r1, [sp, #60]	; 0x3c
 801a690:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
 801a694:	1d0b      	adds	r3, r1, #4
 801a696:	1959      	adds	r1, r3, r5
 801a698:	910e      	str	r1, [sp, #56]	; 0x38
 801a69a:	eb0c 0105 	add.w	r1, ip, r5
 801a69e:	910d      	str	r1, [sp, #52]	; 0x34
 801a6a0:	eb0e 0105 	add.w	r1, lr, r5
 801a6a4:	910c      	str	r1, [sp, #48]	; 0x30
 801a6a6:	eb08 0105 	add.w	r1, r8, r5
 801a6aa:	910b      	str	r1, [sp, #44]	; 0x2c
 801a6ac:	f8dd 18cc 	ldr.w	r1, [sp, #2252]	; 0x8cc
 801a6b0:	1d0b      	adds	r3, r1, #4
 801a6b2:	1959      	adds	r1, r3, r5
 801a6b4:	910a      	str	r1, [sp, #40]	; 0x28
 801a6b6:	f8dd 18c8 	ldr.w	r1, [sp, #2248]	; 0x8c8
 801a6ba:	1d0b      	adds	r3, r1, #4
 801a6bc:	1959      	adds	r1, r3, r5
 801a6be:	9109      	str	r1, [sp, #36]	; 0x24
 801a6c0:	f8dd 18c4 	ldr.w	r1, [sp, #2244]	; 0x8c4
 801a6c4:	1d0b      	adds	r3, r1, #4
 801a6c6:	1959      	adds	r1, r3, r5
 801a6c8:	9108      	str	r1, [sp, #32]
 801a6ca:	f8dd 18fc 	ldr.w	r1, [sp, #2300]	; 0x8fc
 801a6ce:	f101 0308 	add.w	r3, r1, #8
 801a6d2:	1959      	adds	r1, r3, r5
 801a6d4:	f241 0308 	movw	r3, #4104	; 0x1008
 801a6d8:	f8cd 17e0 	str.w	r1, [sp, #2016]	; 0x7e0
 801a6dc:	eb0a 0103 	add.w	r1, sl, r3
 801a6e0:	f241 030c 	movw	r3, #4108	; 0x100c
 801a6e4:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
 801a6e8:	eb0a 0103 	add.w	r1, sl, r3
 801a6ec:	f241 0310 	movw	r3, #4112	; 0x1010
 801a6f0:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
 801a6f4:	eb0a 0103 	add.w	r1, sl, r3
 801a6f8:	f241 0314 	movw	r3, #4116	; 0x1014
 801a6fc:	f8cd 1568 	str.w	r1, [sp, #1384]	; 0x568
 801a700:	eb0a 0103 	add.w	r1, sl, r3
 801a704:	f241 0318 	movw	r3, #4120	; 0x1018
 801a708:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
 801a70c:	eb0a 0103 	add.w	r1, sl, r3
 801a710:	f241 031c 	movw	r3, #4124	; 0x101c
 801a714:	f8cd 1570 	str.w	r1, [sp, #1392]	; 0x570
 801a718:	eb0a 0103 	add.w	r1, sl, r3
 801a71c:	f241 0324 	movw	r3, #4132	; 0x1024
 801a720:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
 801a724:	eb0a 0103 	add.w	r1, sl, r3
 801a728:	f241 0328 	movw	r3, #4136	; 0x1028
 801a72c:	f8cd 157c 	str.w	r1, [sp, #1404]	; 0x57c
 801a730:	eb0a 0103 	add.w	r1, sl, r3
 801a734:	f241 032c 	movw	r3, #4140	; 0x102c
 801a738:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
 801a73c:	eb0a 0103 	add.w	r1, sl, r3
 801a740:	f241 0330 	movw	r3, #4144	; 0x1030
 801a744:	f8cd 1584 	str.w	r1, [sp, #1412]	; 0x584
 801a748:	eb0a 0103 	add.w	r1, sl, r3
 801a74c:	f241 0334 	movw	r3, #4148	; 0x1034
 801a750:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
 801a754:	eb0a 0103 	add.w	r1, sl, r3
 801a758:	f241 0338 	movw	r3, #4152	; 0x1038
 801a75c:	f8cd 1590 	str.w	r1, [sp, #1424]	; 0x590
 801a760:	eb0a 0103 	add.w	r1, sl, r3
 801a764:	f241 033c 	movw	r3, #4156	; 0x103c
 801a768:	f8cd 1598 	str.w	r1, [sp, #1432]	; 0x598
 801a76c:	eb0a 0103 	add.w	r1, sl, r3
 801a770:	f241 0344 	movw	r3, #4164	; 0x1044
 801a774:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
 801a778:	eb0a 0103 	add.w	r1, sl, r3
 801a77c:	f241 0348 	movw	r3, #4168	; 0x1048
 801a780:	f8cd 15a8 	str.w	r1, [sp, #1448]	; 0x5a8
 801a784:	eb0a 0103 	add.w	r1, sl, r3
 801a788:	f241 034c 	movw	r3, #4172	; 0x104c
 801a78c:	f8cd 15b0 	str.w	r1, [sp, #1456]	; 0x5b0
 801a790:	eb0a 0103 	add.w	r1, sl, r3
 801a794:	f241 0350 	movw	r3, #4176	; 0x1050
 801a798:	f8cd 15b8 	str.w	r1, [sp, #1464]	; 0x5b8
 801a79c:	eb0a 0103 	add.w	r1, sl, r3
 801a7a0:	f241 0354 	movw	r3, #4180	; 0x1054
 801a7a4:	f8cd 15c0 	str.w	r1, [sp, #1472]	; 0x5c0
 801a7a8:	eb0a 0103 	add.w	r1, sl, r3
 801a7ac:	f241 0358 	movw	r3, #4184	; 0x1058
 801a7b0:	f8cd 15c8 	str.w	r1, [sp, #1480]	; 0x5c8
 801a7b4:	eb0a 0103 	add.w	r1, sl, r3
 801a7b8:	f241 035c 	movw	r3, #4188	; 0x105c
 801a7bc:	f8cd 15d0 	str.w	r1, [sp, #1488]	; 0x5d0
 801a7c0:	eb0a 0103 	add.w	r1, sl, r3
 801a7c4:	f241 0364 	movw	r3, #4196	; 0x1064
 801a7c8:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
 801a7cc:	eb0a 0103 	add.w	r1, sl, r3
 801a7d0:	f241 0368 	movw	r3, #4200	; 0x1068
 801a7d4:	f8cd 15e0 	str.w	r1, [sp, #1504]	; 0x5e0
 801a7d8:	eb0a 0103 	add.w	r1, sl, r3
 801a7dc:	f241 036c 	movw	r3, #4204	; 0x106c
 801a7e0:	f8cd 15e8 	str.w	r1, [sp, #1512]	; 0x5e8
 801a7e4:	eb0a 0103 	add.w	r1, sl, r3
 801a7e8:	f241 0370 	movw	r3, #4208	; 0x1070
 801a7ec:	f8cd 15f0 	str.w	r1, [sp, #1520]	; 0x5f0
 801a7f0:	eb0a 0103 	add.w	r1, sl, r3
 801a7f4:	f241 0374 	movw	r3, #4212	; 0x1074
 801a7f8:	f8cd 15f8 	str.w	r1, [sp, #1528]	; 0x5f8
 801a7fc:	eb0a 0103 	add.w	r1, sl, r3
 801a800:	f241 0378 	movw	r3, #4216	; 0x1078
 801a804:	f8cd 1600 	str.w	r1, [sp, #1536]	; 0x600
 801a808:	eb0a 0103 	add.w	r1, sl, r3
 801a80c:	f241 037c 	movw	r3, #4220	; 0x107c
 801a810:	f8cd 1608 	str.w	r1, [sp, #1544]	; 0x608
 801a814:	eb0a 0103 	add.w	r1, sl, r3
 801a818:	f241 0384 	movw	r3, #4228	; 0x1084
 801a81c:	f8cd 160c 	str.w	r1, [sp, #1548]	; 0x60c
 801a820:	eb0a 0103 	add.w	r1, sl, r3
 801a824:	f241 0388 	movw	r3, #4232	; 0x1088
 801a828:	f8cd 1618 	str.w	r1, [sp, #1560]	; 0x618
 801a82c:	eb0a 0103 	add.w	r1, sl, r3
 801a830:	f241 038c 	movw	r3, #4236	; 0x108c
 801a834:	f8cd 1620 	str.w	r1, [sp, #1568]	; 0x620
 801a838:	eb0a 0103 	add.w	r1, sl, r3
 801a83c:	f241 0390 	movw	r3, #4240	; 0x1090
 801a840:	f8cd 1628 	str.w	r1, [sp, #1576]	; 0x628
 801a844:	eb0a 0103 	add.w	r1, sl, r3
 801a848:	f241 0394 	movw	r3, #4244	; 0x1094
 801a84c:	f8cd 1630 	str.w	r1, [sp, #1584]	; 0x630
 801a850:	eb0a 0103 	add.w	r1, sl, r3
 801a854:	f241 0398 	movw	r3, #4248	; 0x1098
 801a858:	f8cd 1638 	str.w	r1, [sp, #1592]	; 0x638
 801a85c:	eb0a 0103 	add.w	r1, sl, r3
 801a860:	f241 039c 	movw	r3, #4252	; 0x109c
 801a864:	f8cd 1640 	str.w	r1, [sp, #1600]	; 0x640
 801a868:	eb0a 0103 	add.w	r1, sl, r3
 801a86c:	f241 03a4 	movw	r3, #4260	; 0x10a4
 801a870:	f8cd 1644 	str.w	r1, [sp, #1604]	; 0x644
 801a874:	eb0a 0103 	add.w	r1, sl, r3
 801a878:	f241 03a8 	movw	r3, #4264	; 0x10a8
 801a87c:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650
 801a880:	eb0a 0103 	add.w	r1, sl, r3
 801a884:	f241 03ac 	movw	r3, #4268	; 0x10ac
 801a888:	f8cd 1658 	str.w	r1, [sp, #1624]	; 0x658
 801a88c:	eb0a 0103 	add.w	r1, sl, r3
 801a890:	f241 03b0 	movw	r3, #4272	; 0x10b0
 801a894:	f8cd 1660 	str.w	r1, [sp, #1632]	; 0x660
 801a898:	eb0a 0103 	add.w	r1, sl, r3
 801a89c:	f241 03b4 	movw	r3, #4276	; 0x10b4
 801a8a0:	f8cd 1668 	str.w	r1, [sp, #1640]	; 0x668
 801a8a4:	eb0a 0103 	add.w	r1, sl, r3
 801a8a8:	f241 03b8 	movw	r3, #4280	; 0x10b8
 801a8ac:	f8cd 1670 	str.w	r1, [sp, #1648]	; 0x670
 801a8b0:	eb0a 0103 	add.w	r1, sl, r3
 801a8b4:	f241 03bc 	movw	r3, #4284	; 0x10bc
 801a8b8:	f8cd 1678 	str.w	r1, [sp, #1656]	; 0x678
 801a8bc:	eb0a 0103 	add.w	r1, sl, r3
 801a8c0:	f241 03c4 	movw	r3, #4292	; 0x10c4
 801a8c4:	f8cd 167c 	str.w	r1, [sp, #1660]	; 0x67c
 801a8c8:	eb0a 0103 	add.w	r1, sl, r3
 801a8cc:	f241 03c8 	movw	r3, #4296	; 0x10c8
 801a8d0:	f8cd 1688 	str.w	r1, [sp, #1672]	; 0x688
 801a8d4:	eb0a 0103 	add.w	r1, sl, r3
 801a8d8:	f241 03cc 	movw	r3, #4300	; 0x10cc
 801a8dc:	f8cd 1690 	str.w	r1, [sp, #1680]	; 0x690
 801a8e0:	eb0a 0103 	add.w	r1, sl, r3
 801a8e4:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801a8e8:	f8cd 1698 	str.w	r1, [sp, #1688]	; 0x698
 801a8ec:	eb0a 0103 	add.w	r1, sl, r3
 801a8f0:	f241 03d4 	movw	r3, #4308	; 0x10d4
 801a8f4:	f8cd 16a0 	str.w	r1, [sp, #1696]	; 0x6a0
 801a8f8:	f241 118c 	movw	r1, #4492	; 0x118c
 801a8fc:	eb0a 0003 	add.w	r0, sl, r3
 801a900:	f241 03d8 	movw	r3, #4312	; 0x10d8
 801a904:	4451      	add	r1, sl
 801a906:	eb0a 0403 	add.w	r4, sl, r3
 801a90a:	f241 03dc 	movw	r3, #4316	; 0x10dc
 801a90e:	f8cd 06a8 	str.w	r0, [sp, #1704]	; 0x6a8
 801a912:	f241 1090 	movw	r0, #4496	; 0x1190
 801a916:	eb0a 0503 	add.w	r5, sl, r3
 801a91a:	f241 03e4 	movw	r3, #4324	; 0x10e4
 801a91e:	f8cd 46b0 	str.w	r4, [sp, #1712]	; 0x6b0
 801a922:	f241 1494 	movw	r4, #4500	; 0x1194
 801a926:	eb0a 0603 	add.w	r6, sl, r3
 801a92a:	f241 03e8 	movw	r3, #4328	; 0x10e8
 801a92e:	f8cd 56b4 	str.w	r5, [sp, #1716]	; 0x6b4
 801a932:	4454      	add	r4, sl
 801a934:	eb0a 0c03 	add.w	ip, sl, r3
 801a938:	f241 03ec 	movw	r3, #4332	; 0x10ec
 801a93c:	f8cd 66b8 	str.w	r6, [sp, #1720]	; 0x6b8
 801a940:	f241 1598 	movw	r5, #4504	; 0x1198
 801a944:	f8cd c6bc 	str.w	ip, [sp, #1724]	; 0x6bc
 801a948:	eb0a 0c03 	add.w	ip, sl, r3
 801a94c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 801a950:	f241 169c 	movw	r6, #4508	; 0x119c
 801a954:	f8cd c6c0 	str.w	ip, [sp, #1728]	; 0x6c0
 801a958:	4450      	add	r0, sl
 801a95a:	eb0a 0c03 	add.w	ip, sl, r3
 801a95e:	f241 03f4 	movw	r3, #4340	; 0x10f4
 801a962:	f8cd c6c4 	str.w	ip, [sp, #1732]	; 0x6c4
 801a966:	eb0a 0c03 	add.w	ip, sl, r3
 801a96a:	f241 03f8 	movw	r3, #4344	; 0x10f8
 801a96e:	f8cd c6c8 	str.w	ip, [sp, #1736]	; 0x6c8
 801a972:	eb0a 0c03 	add.w	ip, sl, r3
 801a976:	f241 03fc 	movw	r3, #4348	; 0x10fc
 801a97a:	f8cd c6cc 	str.w	ip, [sp, #1740]	; 0x6cc
 801a97e:	eb0a 0c03 	add.w	ip, sl, r3
 801a982:	f241 1304 	movw	r3, #4356	; 0x1104
 801a986:	f8cd c6d0 	str.w	ip, [sp, #1744]	; 0x6d0
 801a98a:	eb0a 0c03 	add.w	ip, sl, r3
 801a98e:	f241 1308 	movw	r3, #4360	; 0x1108
 801a992:	f8cd c6d4 	str.w	ip, [sp, #1748]	; 0x6d4
 801a996:	eb0a 0c03 	add.w	ip, sl, r3
 801a99a:	f241 130c 	movw	r3, #4364	; 0x110c
 801a99e:	f8cd c6d8 	str.w	ip, [sp, #1752]	; 0x6d8
 801a9a2:	eb0a 0c03 	add.w	ip, sl, r3
 801a9a6:	f241 1310 	movw	r3, #4368	; 0x1110
 801a9aa:	f8cd c6dc 	str.w	ip, [sp, #1756]	; 0x6dc
 801a9ae:	eb0a 0c03 	add.w	ip, sl, r3
 801a9b2:	f241 1314 	movw	r3, #4372	; 0x1114
 801a9b6:	f8cd c6e0 	str.w	ip, [sp, #1760]	; 0x6e0
 801a9ba:	eb0a 0c03 	add.w	ip, sl, r3
 801a9be:	f241 1318 	movw	r3, #4376	; 0x1118
 801a9c2:	f8cd c6e4 	str.w	ip, [sp, #1764]	; 0x6e4
 801a9c6:	eb0a 0c03 	add.w	ip, sl, r3
 801a9ca:	f241 131c 	movw	r3, #4380	; 0x111c
 801a9ce:	f8cd c6e8 	str.w	ip, [sp, #1768]	; 0x6e8
 801a9d2:	eb0a 0c03 	add.w	ip, sl, r3
 801a9d6:	f241 1324 	movw	r3, #4388	; 0x1124
 801a9da:	f8cd c6ec 	str.w	ip, [sp, #1772]	; 0x6ec
 801a9de:	eb0a 0c03 	add.w	ip, sl, r3
 801a9e2:	f241 1328 	movw	r3, #4392	; 0x1128
 801a9e6:	f8cd c6f0 	str.w	ip, [sp, #1776]	; 0x6f0
 801a9ea:	eb0a 0c03 	add.w	ip, sl, r3
 801a9ee:	f241 132c 	movw	r3, #4396	; 0x112c
 801a9f2:	f8cd c6f4 	str.w	ip, [sp, #1780]	; 0x6f4
 801a9f6:	eb0a 0c03 	add.w	ip, sl, r3
 801a9fa:	f241 1330 	movw	r3, #4400	; 0x1130
 801a9fe:	f8cd c6f8 	str.w	ip, [sp, #1784]	; 0x6f8
 801aa02:	eb0a 0c03 	add.w	ip, sl, r3
 801aa06:	f241 1334 	movw	r3, #4404	; 0x1134
 801aa0a:	f8cd c6fc 	str.w	ip, [sp, #1788]	; 0x6fc
 801aa0e:	eb0a 0c03 	add.w	ip, sl, r3
 801aa12:	f241 1338 	movw	r3, #4408	; 0x1138
 801aa16:	f8cd c700 	str.w	ip, [sp, #1792]	; 0x700
 801aa1a:	eb0a 0c03 	add.w	ip, sl, r3
 801aa1e:	f241 133c 	movw	r3, #4412	; 0x113c
 801aa22:	f8cd c704 	str.w	ip, [sp, #1796]	; 0x704
 801aa26:	eb0a 0c03 	add.w	ip, sl, r3
 801aa2a:	f241 1344 	movw	r3, #4420	; 0x1144
 801aa2e:	f8cd c708 	str.w	ip, [sp, #1800]	; 0x708
 801aa32:	eb0a 0c03 	add.w	ip, sl, r3
 801aa36:	f241 1348 	movw	r3, #4424	; 0x1148
 801aa3a:	f8cd c70c 	str.w	ip, [sp, #1804]	; 0x70c
 801aa3e:	eb0a 0c03 	add.w	ip, sl, r3
 801aa42:	f241 134c 	movw	r3, #4428	; 0x114c
 801aa46:	f8cd c710 	str.w	ip, [sp, #1808]	; 0x710
 801aa4a:	eb0a 0c03 	add.w	ip, sl, r3
 801aa4e:	f241 1350 	movw	r3, #4432	; 0x1150
 801aa52:	f8cd c714 	str.w	ip, [sp, #1812]	; 0x714
 801aa56:	eb0a 0c03 	add.w	ip, sl, r3
 801aa5a:	f241 1354 	movw	r3, #4436	; 0x1154
 801aa5e:	f8cd c718 	str.w	ip, [sp, #1816]	; 0x718
 801aa62:	eb0a 0c03 	add.w	ip, sl, r3
 801aa66:	f241 1358 	movw	r3, #4440	; 0x1158
 801aa6a:	f8cd c71c 	str.w	ip, [sp, #1820]	; 0x71c
 801aa6e:	eb0a 0c03 	add.w	ip, sl, r3
 801aa72:	f241 135c 	movw	r3, #4444	; 0x115c
 801aa76:	f8cd c720 	str.w	ip, [sp, #1824]	; 0x720
 801aa7a:	eb0a 0c03 	add.w	ip, sl, r3
 801aa7e:	f241 1364 	movw	r3, #4452	; 0x1164
 801aa82:	f8cd c724 	str.w	ip, [sp, #1828]	; 0x724
 801aa86:	eb0a 0c03 	add.w	ip, sl, r3
 801aa8a:	f241 1368 	movw	r3, #4456	; 0x1168
 801aa8e:	f8cd c728 	str.w	ip, [sp, #1832]	; 0x728
 801aa92:	eb0a 0c03 	add.w	ip, sl, r3
 801aa96:	f241 136c 	movw	r3, #4460	; 0x116c
 801aa9a:	f8cd c72c 	str.w	ip, [sp, #1836]	; 0x72c
 801aa9e:	eb0a 0c03 	add.w	ip, sl, r3
 801aaa2:	f241 1370 	movw	r3, #4464	; 0x1170
 801aaa6:	f8cd c730 	str.w	ip, [sp, #1840]	; 0x730
 801aaaa:	eb0a 0c03 	add.w	ip, sl, r3
 801aaae:	f241 1374 	movw	r3, #4468	; 0x1174
 801aab2:	f8cd c734 	str.w	ip, [sp, #1844]	; 0x734
 801aab6:	eb0a 0c03 	add.w	ip, sl, r3
 801aaba:	f241 1378 	movw	r3, #4472	; 0x1178
 801aabe:	f8cd c738 	str.w	ip, [sp, #1848]	; 0x738
 801aac2:	eb0a 0c03 	add.w	ip, sl, r3
 801aac6:	f241 137c 	movw	r3, #4476	; 0x117c
 801aaca:	f8cd c73c 	str.w	ip, [sp, #1852]	; 0x73c
 801aace:	eb0a 0c03 	add.w	ip, sl, r3
 801aad2:	f241 1384 	movw	r3, #4484	; 0x1184
 801aad6:	f8cd c740 	str.w	ip, [sp, #1856]	; 0x740
 801aada:	eb0a 0c03 	add.w	ip, sl, r3
 801aade:	f241 1388 	movw	r3, #4488	; 0x1188
 801aae2:	f8cd c744 	str.w	ip, [sp, #1860]	; 0x744
 801aae6:	eb0a 0c03 	add.w	ip, sl, r3
 801aaea:	f8cd c748 	str.w	ip, [sp, #1864]	; 0x748
 801aaee:	f50a 5c80 	add.w	ip, sl, #4096	; 0x1000
 801aaf2:	f8cd c3e0 	str.w	ip, [sp, #992]	; 0x3e0
 801aaf6:	f50a 5c88 	add.w	ip, sl, #4352	; 0x1100
 801aafa:	f8cd c86c 	str.w	ip, [sp, #2156]	; 0x86c
 801aafe:	f50a 5c90 	add.w	ip, sl, #4608	; 0x1200
 801ab02:	f8cd c8a0 	str.w	ip, [sp, #2208]	; 0x8a0
 801ab06:	f50a 5c98 	add.w	ip, sl, #4864	; 0x1300
 801ab0a:	f8cd c818 	str.w	ip, [sp, #2072]	; 0x818
 801ab0e:	f50a 7c00 	add.w	ip, sl, #512	; 0x200
 801ab12:	f8cd c7a8 	str.w	ip, [sp, #1960]	; 0x7a8
 801ab16:	f50a 7c40 	add.w	ip, sl, #768	; 0x300
 801ab1a:	f8cd c7ac 	str.w	ip, [sp, #1964]	; 0x7ac
 801ab1e:	f50a 6c80 	add.w	ip, sl, #1024	; 0x400
 801ab22:	f8cd c7b0 	str.w	ip, [sp, #1968]	; 0x7b0
 801ab26:	f50a 6ca0 	add.w	ip, sl, #1280	; 0x500
 801ab2a:	f8cd c7b4 	str.w	ip, [sp, #1972]	; 0x7b4
 801ab2e:	f50a 6cc0 	add.w	ip, sl, #1536	; 0x600
 801ab32:	f8cd c7b8 	str.w	ip, [sp, #1976]	; 0x7b8
 801ab36:	f50a 6ce0 	add.w	ip, sl, #1792	; 0x700
 801ab3a:	f8cd c7bc 	str.w	ip, [sp, #1980]	; 0x7bc
 801ab3e:	f50a 6c00 	add.w	ip, sl, #2048	; 0x800
 801ab42:	f8cd c7c0 	str.w	ip, [sp, #1984]	; 0x7c0
 801ab46:	f50a 6c10 	add.w	ip, sl, #2304	; 0x900
 801ab4a:	f8cd c7c4 	str.w	ip, [sp, #1988]	; 0x7c4
 801ab4e:	f50a 6c20 	add.w	ip, sl, #2560	; 0xa00
 801ab52:	f8cd c7c8 	str.w	ip, [sp, #1992]	; 0x7c8
 801ab56:	f50a 6c30 	add.w	ip, sl, #2816	; 0xb00
 801ab5a:	f8cd c7cc 	str.w	ip, [sp, #1996]	; 0x7cc
 801ab5e:	f50a 6c40 	add.w	ip, sl, #3072	; 0xc00
 801ab62:	f8dd 38b8 	ldr.w	r3, [sp, #2232]	; 0x8b8
 801ab66:	f8cd c7d0 	str.w	ip, [sp, #2000]	; 0x7d0
 801ab6a:	f50a 6c50 	add.w	ip, sl, #3328	; 0xd00
 801ab6e:	4413      	add	r3, r2
 801ab70:	f8cd 4888 	str.w	r4, [sp, #2184]	; 0x888
 801ab74:	eb0a 0405 	add.w	r4, sl, r5
 801ab78:	f8cd c7d4 	str.w	ip, [sp, #2004]	; 0x7d4
 801ab7c:	9314      	str	r3, [sp, #80]	; 0x50
 801ab7e:	f50a 6c60 	add.w	ip, sl, #3584	; 0xe00
 801ab82:	f8dd 3908 	ldr.w	r3, [sp, #2312]	; 0x908
 801ab86:	f241 2570 	movw	r5, #4720	; 0x1270
 801ab8a:	f8cd 488c 	str.w	r4, [sp, #2188]	; 0x88c
 801ab8e:	eb0a 0406 	add.w	r4, sl, r6
 801ab92:	189a      	adds	r2, r3, r2
 801ab94:	f241 13a4 	movw	r3, #4516	; 0x11a4
 801ab98:	f8cd c7d8 	str.w	ip, [sp, #2008]	; 0x7d8
 801ab9c:	f50a 6c70 	add.w	ip, sl, #3840	; 0xf00
 801aba0:	eb0a 0603 	add.w	r6, sl, r3
 801aba4:	f241 13a8 	movw	r3, #4520	; 0x11a8
 801aba8:	f8cd c7dc 	str.w	ip, [sp, #2012]	; 0x7dc
 801abac:	f8cd 674c 	str.w	r6, [sp, #1868]	; 0x74c
 801abb0:	eb0a 0603 	add.w	r6, sl, r3
 801abb4:	f241 13ac 	movw	r3, #4524	; 0x11ac
 801abb8:	92fd      	str	r2, [sp, #1012]	; 0x3f4
 801abba:	f8cd 1880 	str.w	r1, [sp, #2176]	; 0x880
 801abbe:	f241 225c 	movw	r2, #4700	; 0x125c
 801abc2:	eb0a 0c03 	add.w	ip, sl, r3
 801abc6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 801abca:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
 801abce:	f241 2164 	movw	r1, #4708	; 0x1264
 801abd2:	f8cd c754 	str.w	ip, [sp, #1876]	; 0x754
 801abd6:	eb0a 0c03 	add.w	ip, sl, r3
 801abda:	f241 13b4 	movw	r3, #4532	; 0x11b4
 801abde:	f8cd 4890 	str.w	r4, [sp, #2192]	; 0x890
 801abe2:	f8cd c758 	str.w	ip, [sp, #1880]	; 0x758
 801abe6:	f241 246c 	movw	r4, #4716	; 0x126c
 801abea:	eb0a 0c03 	add.w	ip, sl, r3
 801abee:	f241 13b8 	movw	r3, #4536	; 0x11b8
 801abf2:	f8cd 6750 	str.w	r6, [sp, #1872]	; 0x750
 801abf6:	4454      	add	r4, sl
 801abf8:	f8cd c75c 	str.w	ip, [sp, #1884]	; 0x75c
 801abfc:	eb0a 0c03 	add.w	ip, sl, r3
 801ac00:	f241 13bc 	movw	r3, #4540	; 0x11bc
 801ac04:	f241 2068 	movw	r0, #4712	; 0x1268
 801ac08:	f8cd c760 	str.w	ip, [sp, #1888]	; 0x760
 801ac0c:	f241 2674 	movw	r6, #4724	; 0x1274
 801ac10:	eb0a 0c03 	add.w	ip, sl, r3
 801ac14:	f241 13c4 	movw	r3, #4548	; 0x11c4
 801ac18:	4452      	add	r2, sl
 801ac1a:	4451      	add	r1, sl
 801ac1c:	f8cd c764 	str.w	ip, [sp, #1892]	; 0x764
 801ac20:	eb0a 0c03 	add.w	ip, sl, r3
 801ac24:	f241 13c8 	movw	r3, #4552	; 0x11c8
 801ac28:	4450      	add	r0, sl
 801ac2a:	f8cd c768 	str.w	ip, [sp, #1896]	; 0x768
 801ac2e:	eb0a 0c03 	add.w	ip, sl, r3
 801ac32:	f241 13cc 	movw	r3, #4556	; 0x11cc
 801ac36:	f8cd c76c 	str.w	ip, [sp, #1900]	; 0x76c
 801ac3a:	eb0a 0c03 	add.w	ip, sl, r3
    const float* input = input_data;
 801ac3e:	f8dd 390c 	ldr.w	r3, [sp, #2316]	; 0x90c
 801ac42:	f8cd c770 	str.w	ip, [sp, #1904]	; 0x770
 801ac46:	9312      	str	r3, [sp, #72]	; 0x48
 801ac48:	f241 13d0 	movw	r3, #4560	; 0x11d0
 801ac4c:	eb0a 0c03 	add.w	ip, sl, r3
 801ac50:	f241 13d4 	movw	r3, #4564	; 0x11d4
 801ac54:	f8cd c774 	str.w	ip, [sp, #1908]	; 0x774
 801ac58:	eb0a 0c03 	add.w	ip, sl, r3
 801ac5c:	f241 13d8 	movw	r3, #4568	; 0x11d8
 801ac60:	f8cd c778 	str.w	ip, [sp, #1912]	; 0x778
 801ac64:	eb0a 0c03 	add.w	ip, sl, r3
 801ac68:	f241 13dc 	movw	r3, #4572	; 0x11dc
 801ac6c:	f8cd c77c 	str.w	ip, [sp, #1916]	; 0x77c
 801ac70:	eb0a 0c03 	add.w	ip, sl, r3
 801ac74:	f241 13e4 	movw	r3, #4580	; 0x11e4
 801ac78:	f8cd c780 	str.w	ip, [sp, #1920]	; 0x780
 801ac7c:	eb0a 0c03 	add.w	ip, sl, r3
 801ac80:	f241 13e8 	movw	r3, #4584	; 0x11e8
 801ac84:	f8cd c784 	str.w	ip, [sp, #1924]	; 0x784
 801ac88:	eb0a 0c03 	add.w	ip, sl, r3
 801ac8c:	f241 13ec 	movw	r3, #4588	; 0x11ec
 801ac90:	f8cd c788 	str.w	ip, [sp, #1928]	; 0x788
 801ac94:	f50a 5c81 	add.w	ip, sl, #4128	; 0x1020
 801ac98:	f8cd c830 	str.w	ip, [sp, #2096]	; 0x830
 801ac9c:	eb0a 0c03 	add.w	ip, sl, r3
 801aca0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801aca4:	f8cd c78c 	str.w	ip, [sp, #1932]	; 0x78c
 801aca8:	eb0a 0c03 	add.w	ip, sl, r3
 801acac:	f241 13f4 	movw	r3, #4596	; 0x11f4
 801acb0:	f8cd 47fc 	str.w	r4, [sp, #2044]	; 0x7fc
 801acb4:	eb0a 0405 	add.w	r4, sl, r5
 801acb8:	f8cd c790 	str.w	ip, [sp, #1936]	; 0x790
 801acbc:	eb0a 0c03 	add.w	ip, sl, r3
 801acc0:	f241 13f8 	movw	r3, #4600	; 0x11f8
 801acc4:	f8cd 27ec 	str.w	r2, [sp, #2028]	; 0x7ec
 801acc8:	f8cd c794 	str.w	ip, [sp, #1940]	; 0x794
 801accc:	f241 3238 	movw	r2, #4920	; 0x1338
 801acd0:	eb0a 0c03 	add.w	ip, sl, r3
 801acd4:	f241 13fc 	movw	r3, #4604	; 0x11fc
 801acd8:	f8cd 17f4 	str.w	r1, [sp, #2036]	; 0x7f4
 801acdc:	4452      	add	r2, sl
 801acde:	f8cd c798 	str.w	ip, [sp, #1944]	; 0x798
 801ace2:	eb0a 0c03 	add.w	ip, sl, r3
 801ace6:	f241 2304 	movw	r3, #4612	; 0x1204
 801acea:	f8cd 07f8 	str.w	r0, [sp, #2040]	; 0x7f8
 801acee:	f8cd c79c 	str.w	ip, [sp, #1948]	; 0x79c
 801acf2:	f241 313c 	movw	r1, #4924	; 0x133c
 801acf6:	eb0a 0c03 	add.w	ip, sl, r3
 801acfa:	f241 2308 	movw	r3, #4616	; 0x1208
 801acfe:	f241 3044 	movw	r0, #4932	; 0x1344
 801ad02:	f241 3550 	movw	r5, #4944	; 0x1350
 801ad06:	f8cd c7a0 	str.w	ip, [sp, #1952]	; 0x7a0
 801ad0a:	eb0a 0c03 	add.w	ip, sl, r3
 801ad0e:	f241 230c 	movw	r3, #4620	; 0x120c
 801ad12:	f8cd c7a4 	str.w	ip, [sp, #1956]	; 0x7a4
 801ad16:	f50a 5c82 	add.w	ip, sl, #4160	; 0x1040
 801ad1a:	f8cd c844 	str.w	ip, [sp, #2116]	; 0x844
 801ad1e:	eb0a 0c03 	add.w	ip, sl, r3
 801ad22:	f241 2310 	movw	r3, #4624	; 0x1210
 801ad26:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
 801ad2a:	eb0a 0c03 	add.w	ip, sl, r3
 801ad2e:	f241 2314 	movw	r3, #4628	; 0x1214
 801ad32:	f8cd c474 	str.w	ip, [sp, #1140]	; 0x474
 801ad36:	eb0a 0c03 	add.w	ip, sl, r3
 801ad3a:	f241 2318 	movw	r3, #4632	; 0x1218
 801ad3e:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
 801ad42:	eb0a 0c03 	add.w	ip, sl, r3
 801ad46:	f241 231c 	movw	r3, #4636	; 0x121c
 801ad4a:	f8cd c47c 	str.w	ip, [sp, #1148]	; 0x47c
 801ad4e:	eb0a 0c03 	add.w	ip, sl, r3
 801ad52:	f241 2324 	movw	r3, #4644	; 0x1224
 801ad56:	f8cd c480 	str.w	ip, [sp, #1152]	; 0x480
 801ad5a:	eb0a 0c03 	add.w	ip, sl, r3
 801ad5e:	f241 2328 	movw	r3, #4648	; 0x1228
 801ad62:	f8cd c484 	str.w	ip, [sp, #1156]	; 0x484
 801ad66:	eb0a 0c03 	add.w	ip, sl, r3
 801ad6a:	f241 232c 	movw	r3, #4652	; 0x122c
 801ad6e:	f8cd c488 	str.w	ip, [sp, #1160]	; 0x488
 801ad72:	f50a 5c83 	add.w	ip, sl, #4192	; 0x1060
 801ad76:	f8cd c84c 	str.w	ip, [sp, #2124]	; 0x84c
 801ad7a:	eb0a 0c03 	add.w	ip, sl, r3
 801ad7e:	f241 2330 	movw	r3, #4656	; 0x1230
 801ad82:	f8cd c48c 	str.w	ip, [sp, #1164]	; 0x48c
 801ad86:	eb0a 0c03 	add.w	ip, sl, r3
 801ad8a:	f241 2334 	movw	r3, #4660	; 0x1234
 801ad8e:	f8cd c490 	str.w	ip, [sp, #1168]	; 0x490
 801ad92:	eb0a 0c03 	add.w	ip, sl, r3
 801ad96:	f241 2338 	movw	r3, #4664	; 0x1238
 801ad9a:	f8cd c494 	str.w	ip, [sp, #1172]	; 0x494
 801ad9e:	eb0a 0c03 	add.w	ip, sl, r3
 801ada2:	f241 233c 	movw	r3, #4668	; 0x123c
 801ada6:	f8cd c498 	str.w	ip, [sp, #1176]	; 0x498
 801adaa:	eb0a 0c03 	add.w	ip, sl, r3
 801adae:	f241 2344 	movw	r3, #4676	; 0x1244
 801adb2:	f8cd c49c 	str.w	ip, [sp, #1180]	; 0x49c
 801adb6:	eb0a 0c03 	add.w	ip, sl, r3
 801adba:	f241 2348 	movw	r3, #4680	; 0x1248
 801adbe:	f8cd c4a0 	str.w	ip, [sp, #1184]	; 0x4a0
 801adc2:	eb0a 0c03 	add.w	ip, sl, r3
 801adc6:	f241 234c 	movw	r3, #4684	; 0x124c
 801adca:	f8cd c4a4 	str.w	ip, [sp, #1188]	; 0x4a4
 801adce:	f50a 5c84 	add.w	ip, sl, #4224	; 0x1080
 801add2:	f8cd c854 	str.w	ip, [sp, #2132]	; 0x854
 801add6:	eb0a 0c03 	add.w	ip, sl, r3
 801adda:	f241 2350 	movw	r3, #4688	; 0x1250
 801adde:	f8cd c4a8 	str.w	ip, [sp, #1192]	; 0x4a8
 801ade2:	eb0a 0c03 	add.w	ip, sl, r3
 801ade6:	f241 2354 	movw	r3, #4692	; 0x1254
 801adea:	f8cd c4ac 	str.w	ip, [sp, #1196]	; 0x4ac
 801adee:	eb0a 0c03 	add.w	ip, sl, r3
 801adf2:	f241 2358 	movw	r3, #4696	; 0x1258
 801adf6:	f8cd c4b0 	str.w	ip, [sp, #1200]	; 0x4b0
 801adfa:	eb0a 0c03 	add.w	ip, sl, r3
 801adfe:	f241 2378 	movw	r3, #4728	; 0x1278
 801ae02:	f8cd c4b4 	str.w	ip, [sp, #1204]	; 0x4b4
 801ae06:	f50a 5c85 	add.w	ip, sl, #4256	; 0x10a0
 801ae0a:	f8cd c85c 	str.w	ip, [sp, #2140]	; 0x85c
 801ae0e:	f8cd 4800 	str.w	r4, [sp, #2048]	; 0x800
 801ae12:	eb0a 0406 	add.w	r4, sl, r6
 801ae16:	eb0a 0603 	add.w	r6, sl, r3
 801ae1a:	f241 237c 	movw	r3, #4732	; 0x127c
 801ae1e:	f8cd 4804 	str.w	r4, [sp, #2052]	; 0x804
 801ae22:	f241 344c 	movw	r4, #4940	; 0x134c
 801ae26:	f8cd 64b8 	str.w	r6, [sp, #1208]	; 0x4b8
 801ae2a:	eb0a 0603 	add.w	r6, sl, r3
 801ae2e:	f241 2384 	movw	r3, #4740	; 0x1284
 801ae32:	f8cd 64bc 	str.w	r6, [sp, #1212]	; 0x4bc
 801ae36:	f241 3654 	movw	r6, #4948	; 0x1354
 801ae3a:	eb0a 0c03 	add.w	ip, sl, r3
 801ae3e:	f241 2388 	movw	r3, #4744	; 0x1288
 801ae42:	f8cd c4c0 	str.w	ip, [sp, #1216]	; 0x4c0
 801ae46:	eb0a 0c03 	add.w	ip, sl, r3
 801ae4a:	f241 238c 	movw	r3, #4748	; 0x128c
 801ae4e:	f8cd c4c4 	str.w	ip, [sp, #1220]	; 0x4c4
 801ae52:	f50a 5c86 	add.w	ip, sl, #4288	; 0x10c0
 801ae56:	f8cd c864 	str.w	ip, [sp, #2148]	; 0x864
 801ae5a:	eb0a 0c03 	add.w	ip, sl, r3
 801ae5e:	f241 2390 	movw	r3, #4752	; 0x1290
 801ae62:	f8cd c4c8 	str.w	ip, [sp, #1224]	; 0x4c8
 801ae66:	eb0a 0c03 	add.w	ip, sl, r3
 801ae6a:	f241 2394 	movw	r3, #4756	; 0x1294
 801ae6e:	f8cd c4cc 	str.w	ip, [sp, #1228]	; 0x4cc
 801ae72:	eb0a 0c03 	add.w	ip, sl, r3
 801ae76:	f241 2398 	movw	r3, #4760	; 0x1298
 801ae7a:	f8cd c4d0 	str.w	ip, [sp, #1232]	; 0x4d0
 801ae7e:	eb0a 0c03 	add.w	ip, sl, r3
 801ae82:	f241 239c 	movw	r3, #4764	; 0x129c
 801ae86:	f8cd c4d4 	str.w	ip, [sp, #1236]	; 0x4d4
 801ae8a:	eb0a 0c03 	add.w	ip, sl, r3
 801ae8e:	f241 23a4 	movw	r3, #4772	; 0x12a4
 801ae92:	f8cd c4d8 	str.w	ip, [sp, #1240]	; 0x4d8
 801ae96:	eb0a 0c03 	add.w	ip, sl, r3
 801ae9a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801ae9e:	f8cd c4dc 	str.w	ip, [sp, #1244]	; 0x4dc
 801aea2:	eb0a 0c03 	add.w	ip, sl, r3
 801aea6:	f241 23ac 	movw	r3, #4780	; 0x12ac
 801aeaa:	f8cd c4e0 	str.w	ip, [sp, #1248]	; 0x4e0
 801aeae:	f50a 5c87 	add.w	ip, sl, #4320	; 0x10e0
 801aeb2:	f8cd c868 	str.w	ip, [sp, #2152]	; 0x868
 801aeb6:	eb0a 0c03 	add.w	ip, sl, r3
 801aeba:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801aebe:	f8cd c4e4 	str.w	ip, [sp, #1252]	; 0x4e4
 801aec2:	eb0a 0c03 	add.w	ip, sl, r3
 801aec6:	f241 23b4 	movw	r3, #4788	; 0x12b4
 801aeca:	f8cd c4e8 	str.w	ip, [sp, #1256]	; 0x4e8
 801aece:	eb0a 0c03 	add.w	ip, sl, r3
 801aed2:	f241 23b8 	movw	r3, #4792	; 0x12b8
 801aed6:	f8cd c4ec 	str.w	ip, [sp, #1260]	; 0x4ec
 801aeda:	eb0a 0c03 	add.w	ip, sl, r3
 801aede:	f241 23bc 	movw	r3, #4796	; 0x12bc
 801aee2:	f8cd c4f0 	str.w	ip, [sp, #1264]	; 0x4f0
 801aee6:	eb0a 0c03 	add.w	ip, sl, r3
 801aeea:	f241 23c4 	movw	r3, #4804	; 0x12c4
 801aeee:	f8cd c4f4 	str.w	ip, [sp, #1268]	; 0x4f4
 801aef2:	eb0a 0c03 	add.w	ip, sl, r3
 801aef6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 801aefa:	f8cd c4f8 	str.w	ip, [sp, #1272]	; 0x4f8
 801aefe:	eb0a 0c03 	add.w	ip, sl, r3
 801af02:	f241 23cc 	movw	r3, #4812	; 0x12cc
 801af06:	f8cd c4fc 	str.w	ip, [sp, #1276]	; 0x4fc
 801af0a:	eb0a 0c03 	add.w	ip, sl, r3
 801af0e:	f241 23d0 	movw	r3, #4816	; 0x12d0
 801af12:	f8cd c500 	str.w	ip, [sp, #1280]	; 0x500
 801af16:	eb0a 0c03 	add.w	ip, sl, r3
 801af1a:	f241 23d4 	movw	r3, #4820	; 0x12d4
 801af1e:	f8cd c504 	str.w	ip, [sp, #1284]	; 0x504
 801af22:	eb0a 0c03 	add.w	ip, sl, r3
 801af26:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801af2a:	f8cd c508 	str.w	ip, [sp, #1288]	; 0x508
 801af2e:	eb0a 0c03 	add.w	ip, sl, r3
 801af32:	f241 23dc 	movw	r3, #4828	; 0x12dc
 801af36:	f8cd c50c 	str.w	ip, [sp, #1292]	; 0x50c
 801af3a:	eb0a 0c03 	add.w	ip, sl, r3
 801af3e:	f241 23e4 	movw	r3, #4836	; 0x12e4
 801af42:	f8cd c510 	str.w	ip, [sp, #1296]	; 0x510
 801af46:	eb0a 0c03 	add.w	ip, sl, r3
 801af4a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 801af4e:	f8cd c514 	str.w	ip, [sp, #1300]	; 0x514
 801af52:	eb0a 0c03 	add.w	ip, sl, r3
 801af56:	f241 23ec 	movw	r3, #4844	; 0x12ec
 801af5a:	f8cd c518 	str.w	ip, [sp, #1304]	; 0x518
 801af5e:	f50a 5c89 	add.w	ip, sl, #4384	; 0x1120
 801af62:	f8cd c870 	str.w	ip, [sp, #2160]	; 0x870
 801af66:	eb0a 0c03 	add.w	ip, sl, r3
 801af6a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 801af6e:	f8cd c51c 	str.w	ip, [sp, #1308]	; 0x51c
 801af72:	eb0a 0c03 	add.w	ip, sl, r3
 801af76:	f241 23f4 	movw	r3, #4852	; 0x12f4
 801af7a:	f8cd c520 	str.w	ip, [sp, #1312]	; 0x520
 801af7e:	eb0a 0c03 	add.w	ip, sl, r3
 801af82:	f241 23f8 	movw	r3, #4856	; 0x12f8
 801af86:	f8cd c524 	str.w	ip, [sp, #1316]	; 0x524
 801af8a:	eb0a 0c03 	add.w	ip, sl, r3
 801af8e:	f241 23fc 	movw	r3, #4860	; 0x12fc
 801af92:	f8cd c528 	str.w	ip, [sp, #1320]	; 0x528
 801af96:	eb0a 0c03 	add.w	ip, sl, r3
 801af9a:	f241 3304 	movw	r3, #4868	; 0x1304
 801af9e:	f8cd 2820 	str.w	r2, [sp, #2080]	; 0x820
 801afa2:	f8cd c52c 	str.w	ip, [sp, #1324]	; 0x52c
 801afa6:	eb0a 0201 	add.w	r2, sl, r1
 801afaa:	eb0a 0c03 	add.w	ip, sl, r3
 801afae:	f241 3308 	movw	r3, #4872	; 0x1308
 801afb2:	f8cd 2824 	str.w	r2, [sp, #2084]	; 0x824
 801afb6:	eb0a 0200 	add.w	r2, sl, r0
 801afba:	f8cd c530 	str.w	ip, [sp, #1328]	; 0x530
 801afbe:	eb0a 0c03 	add.w	ip, sl, r3
 801afc2:	f241 330c 	movw	r3, #4876	; 0x130c
 801afc6:	f8cd 282c 	str.w	r2, [sp, #2092]	; 0x82c
 801afca:	f8cd c534 	str.w	ip, [sp, #1332]	; 0x534
 801afce:	f50a 5c8a 	add.w	ip, sl, #4416	; 0x1140
 801afd2:	f8cd c874 	str.w	ip, [sp, #2164]	; 0x874
 801afd6:	eb0a 0c03 	add.w	ip, sl, r3
 801afda:	f241 3310 	movw	r3, #4880	; 0x1310
 801afde:	f8cd c538 	str.w	ip, [sp, #1336]	; 0x538
 801afe2:	eb0a 0c03 	add.w	ip, sl, r3
 801afe6:	f241 3314 	movw	r3, #4884	; 0x1314
 801afea:	f8cd c53c 	str.w	ip, [sp, #1340]	; 0x53c
 801afee:	eb0a 0c03 	add.w	ip, sl, r3
 801aff2:	f241 3318 	movw	r3, #4888	; 0x1318
 801aff6:	f8cd c540 	str.w	ip, [sp, #1344]	; 0x540
 801affa:	eb0a 0c03 	add.w	ip, sl, r3
 801affe:	f241 331c 	movw	r3, #4892	; 0x131c
 801b002:	f8cd c544 	str.w	ip, [sp, #1348]	; 0x544
 801b006:	eb0a 0c03 	add.w	ip, sl, r3
 801b00a:	f241 3324 	movw	r3, #4900	; 0x1324
 801b00e:	f8cd c548 	str.w	ip, [sp, #1352]	; 0x548
 801b012:	eb0a 0c03 	add.w	ip, sl, r3
 801b016:	f241 3328 	movw	r3, #4904	; 0x1328
 801b01a:	f8cd c54c 	str.w	ip, [sp, #1356]	; 0x54c
 801b01e:	eb0a 0c03 	add.w	ip, sl, r3
 801b022:	f241 332c 	movw	r3, #4908	; 0x132c
 801b026:	f8cd c550 	str.w	ip, [sp, #1360]	; 0x550
 801b02a:	f50a 5c8b 	add.w	ip, sl, #4448	; 0x1160
 801b02e:	f8cd c878 	str.w	ip, [sp, #2168]	; 0x878
 801b032:	eb0a 0c03 	add.w	ip, sl, r3
 801b036:	f241 3330 	movw	r3, #4912	; 0x1330
 801b03a:	f8cd c554 	str.w	ip, [sp, #1364]	; 0x554
 801b03e:	eb0a 0c03 	add.w	ip, sl, r3
 801b042:	f241 3334 	movw	r3, #4916	; 0x1334
 801b046:	f8cd c55c 	str.w	ip, [sp, #1372]	; 0x55c
 801b04a:	eb0a 0c03 	add.w	ip, sl, r3
 801b04e:	f241 3348 	movw	r3, #4936	; 0x1348
 801b052:	f8cd c564 	str.w	ip, [sp, #1380]	; 0x564
 801b056:	eb0a 0203 	add.w	r2, sl, r3
 801b05a:	f241 3358 	movw	r3, #4952	; 0x1358
 801b05e:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
 801b062:	f50a 528c 	add.w	r2, sl, #4480	; 0x1180
 801b066:	f8cd 287c 	str.w	r2, [sp, #2172]	; 0x87c
 801b06a:	eb0a 0204 	add.w	r2, sl, r4
 801b06e:	f8cd 2834 	str.w	r2, [sp, #2100]	; 0x834
 801b072:	eb0a 0205 	add.w	r2, sl, r5
 801b076:	f8cd 2838 	str.w	r2, [sp, #2104]	; 0x838
 801b07a:	eb0a 0206 	add.w	r2, sl, r6
 801b07e:	f8cd 283c 	str.w	r2, [sp, #2108]	; 0x83c
 801b082:	eb0a 0203 	add.w	r2, sl, r3
 801b086:	f241 335c 	movw	r3, #4956	; 0x135c
 801b08a:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
 801b08e:	eb0a 0203 	add.w	r2, sl, r3
 801b092:	f241 3364 	movw	r3, #4964	; 0x1364
 801b096:	f8cd 2594 	str.w	r2, [sp, #1428]	; 0x594
 801b09a:	eb0a 0203 	add.w	r2, sl, r3
 801b09e:	f241 3368 	movw	r3, #4968	; 0x1368
 801b0a2:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
 801b0a6:	eb0a 0203 	add.w	r2, sl, r3
 801b0aa:	f241 336c 	movw	r3, #4972	; 0x136c
 801b0ae:	f8cd 25a4 	str.w	r2, [sp, #1444]	; 0x5a4
 801b0b2:	f50a 528d 	add.w	r2, sl, #4512	; 0x11a0
 801b0b6:	f8cd 2894 	str.w	r2, [sp, #2196]	; 0x894
 801b0ba:	eb0a 0203 	add.w	r2, sl, r3
 801b0be:	f241 3370 	movw	r3, #4976	; 0x1370
 801b0c2:	f8cd 25ac 	str.w	r2, [sp, #1452]	; 0x5ac
 801b0c6:	eb0a 0203 	add.w	r2, sl, r3
 801b0ca:	f241 3374 	movw	r3, #4980	; 0x1374
 801b0ce:	f8cd 25b4 	str.w	r2, [sp, #1460]	; 0x5b4
 801b0d2:	eb0a 0203 	add.w	r2, sl, r3
 801b0d6:	f241 3378 	movw	r3, #4984	; 0x1378
 801b0da:	f8cd 25bc 	str.w	r2, [sp, #1468]	; 0x5bc
 801b0de:	eb0a 0203 	add.w	r2, sl, r3
 801b0e2:	f241 337c 	movw	r3, #4988	; 0x137c
 801b0e6:	f8cd 25c4 	str.w	r2, [sp, #1476]	; 0x5c4
 801b0ea:	eb0a 0203 	add.w	r2, sl, r3
 801b0ee:	f241 3384 	movw	r3, #4996	; 0x1384
 801b0f2:	f8cd 25cc 	str.w	r2, [sp, #1484]	; 0x5cc
 801b0f6:	eb0a 0203 	add.w	r2, sl, r3
 801b0fa:	f241 3388 	movw	r3, #5000	; 0x1388
 801b0fe:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
 801b102:	eb0a 0203 	add.w	r2, sl, r3
 801b106:	f241 338c 	movw	r3, #5004	; 0x138c
 801b10a:	f8cd 25dc 	str.w	r2, [sp, #1500]	; 0x5dc
 801b10e:	f50a 528e 	add.w	r2, sl, #4544	; 0x11c0
 801b112:	f8cd 2898 	str.w	r2, [sp, #2200]	; 0x898
 801b116:	eb0a 0203 	add.w	r2, sl, r3
 801b11a:	f241 3390 	movw	r3, #5008	; 0x1390
 801b11e:	f8cd 25e4 	str.w	r2, [sp, #1508]	; 0x5e4
 801b122:	eb0a 0203 	add.w	r2, sl, r3
 801b126:	f241 3394 	movw	r3, #5012	; 0x1394
 801b12a:	f8cd 25ec 	str.w	r2, [sp, #1516]	; 0x5ec
 801b12e:	eb0a 0203 	add.w	r2, sl, r3
 801b132:	f241 3398 	movw	r3, #5016	; 0x1398
 801b136:	f8cd 25f4 	str.w	r2, [sp, #1524]	; 0x5f4
 801b13a:	eb0a 0203 	add.w	r2, sl, r3
 801b13e:	f241 339c 	movw	r3, #5020	; 0x139c
 801b142:	f8cd 25fc 	str.w	r2, [sp, #1532]	; 0x5fc
 801b146:	eb0a 0203 	add.w	r2, sl, r3
 801b14a:	f241 33a4 	movw	r3, #5028	; 0x13a4
 801b14e:	f8cd 2604 	str.w	r2, [sp, #1540]	; 0x604
 801b152:	eb0a 0203 	add.w	r2, sl, r3
 801b156:	f241 33a8 	movw	r3, #5032	; 0x13a8
 801b15a:	f8cd 2610 	str.w	r2, [sp, #1552]	; 0x610
 801b15e:	eb0a 0203 	add.w	r2, sl, r3
 801b162:	f241 33ac 	movw	r3, #5036	; 0x13ac
 801b166:	f8cd 2614 	str.w	r2, [sp, #1556]	; 0x614
 801b16a:	f50a 528f 	add.w	r2, sl, #4576	; 0x11e0
 801b16e:	f8cd 289c 	str.w	r2, [sp, #2204]	; 0x89c
 801b172:	eb0a 0203 	add.w	r2, sl, r3
 801b176:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801b17a:	f8cd 261c 	str.w	r2, [sp, #1564]	; 0x61c
 801b17e:	eb0a 0203 	add.w	r2, sl, r3
 801b182:	f241 33b4 	movw	r3, #5044	; 0x13b4
 801b186:	f8cd 2624 	str.w	r2, [sp, #1572]	; 0x624
 801b18a:	eb0a 0203 	add.w	r2, sl, r3
 801b18e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801b192:	f8cd 262c 	str.w	r2, [sp, #1580]	; 0x62c
 801b196:	eb0a 0203 	add.w	r2, sl, r3
 801b19a:	f241 33bc 	movw	r3, #5052	; 0x13bc
 801b19e:	f8cd 2634 	str.w	r2, [sp, #1588]	; 0x634
 801b1a2:	eb0a 0203 	add.w	r2, sl, r3
 801b1a6:	f241 33c4 	movw	r3, #5060	; 0x13c4
 801b1aa:	f8cd 263c 	str.w	r2, [sp, #1596]	; 0x63c
 801b1ae:	eb0a 0203 	add.w	r2, sl, r3
 801b1b2:	f241 33c8 	movw	r3, #5064	; 0x13c8
 801b1b6:	f8cd 2648 	str.w	r2, [sp, #1608]	; 0x648
 801b1ba:	eb0a 0203 	add.w	r2, sl, r3
 801b1be:	f241 33cc 	movw	r3, #5068	; 0x13cc
 801b1c2:	f8cd 264c 	str.w	r2, [sp, #1612]	; 0x64c
 801b1c6:	eb0a 0203 	add.w	r2, sl, r3
 801b1ca:	f241 33d0 	movw	r3, #5072	; 0x13d0
 801b1ce:	f8cd 2654 	str.w	r2, [sp, #1620]	; 0x654
 801b1d2:	eb0a 0203 	add.w	r2, sl, r3
 801b1d6:	f241 33d4 	movw	r3, #5076	; 0x13d4
 801b1da:	f8cd 265c 	str.w	r2, [sp, #1628]	; 0x65c
 801b1de:	eb0a 0203 	add.w	r2, sl, r3
 801b1e2:	f241 33d8 	movw	r3, #5080	; 0x13d8
 801b1e6:	f8cd 2664 	str.w	r2, [sp, #1636]	; 0x664
 801b1ea:	eb0a 0203 	add.w	r2, sl, r3
 801b1ee:	f241 33dc 	movw	r3, #5084	; 0x13dc
 801b1f2:	f8cd 266c 	str.w	r2, [sp, #1644]	; 0x66c
 801b1f6:	eb0a 0203 	add.w	r2, sl, r3
 801b1fa:	f241 33e4 	movw	r3, #5092	; 0x13e4
 801b1fe:	f8cd 2674 	str.w	r2, [sp, #1652]	; 0x674
 801b202:	eb0a 0203 	add.w	r2, sl, r3
 801b206:	f241 33e8 	movw	r3, #5096	; 0x13e8
 801b20a:	f8cd 2680 	str.w	r2, [sp, #1664]	; 0x680
 801b20e:	eb0a 0203 	add.w	r2, sl, r3
 801b212:	f241 33ec 	movw	r3, #5100	; 0x13ec
 801b216:	f8cd 2684 	str.w	r2, [sp, #1668]	; 0x684
 801b21a:	f50a 5291 	add.w	r2, sl, #4640	; 0x1220
 801b21e:	f8cd 27e4 	str.w	r2, [sp, #2020]	; 0x7e4
 801b222:	eb0a 0203 	add.w	r2, sl, r3
 801b226:	f241 33f0 	movw	r3, #5104	; 0x13f0
 801b22a:	f8cd 268c 	str.w	r2, [sp, #1676]	; 0x68c
 801b22e:	eb0a 0203 	add.w	r2, sl, r3
 801b232:	f241 33f4 	movw	r3, #5108	; 0x13f4
 801b236:	f8cd 2694 	str.w	r2, [sp, #1684]	; 0x694
 801b23a:	eb0a 0203 	add.w	r2, sl, r3
 801b23e:	f241 33f8 	movw	r3, #5112	; 0x13f8
 801b242:	f8cd 269c 	str.w	r2, [sp, #1692]	; 0x69c
 801b246:	eb0a 0203 	add.w	r2, sl, r3
 801b24a:	f241 33fc 	movw	r3, #5116	; 0x13fc
 801b24e:	4453      	add	r3, sl
 801b250:	f8cd 26a4 	str.w	r2, [sp, #1700]	; 0x6a4
 801b254:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac
 801b258:	f50a 5392 	add.w	r3, sl, #4672	; 0x1240
 801b25c:	f8cd 37e8 	str.w	r3, [sp, #2024]	; 0x7e8
 801b260:	f50a 5393 	add.w	r3, sl, #4704	; 0x1260
 801b264:	f8cd 37f0 	str.w	r3, [sp, #2032]	; 0x7f0
 801b268:	f50a 5394 	add.w	r3, sl, #4736	; 0x1280
 801b26c:	f8dd 88bc 	ldr.w	r8, [sp, #2236]	; 0x8bc
 801b270:	f8cd 3808 	str.w	r3, [sp, #2056]	; 0x808
 801b274:	f50a 5395 	add.w	r3, sl, #4768	; 0x12a0
 801b278:	f8cd 78b4 	str.w	r7, [sp, #2228]	; 0x8b4
 801b27c:	f8cd 380c 	str.w	r3, [sp, #2060]	; 0x80c
 801b280:	f50a 5396 	add.w	r3, sl, #4800	; 0x12c0
 801b284:	f8cd 3810 	str.w	r3, [sp, #2064]	; 0x810
 801b288:	f50a 5397 	add.w	r3, sl, #4832	; 0x12e0
 801b28c:	f8cd 3814 	str.w	r3, [sp, #2068]	; 0x814
 801b290:	f50a 5399 	add.w	r3, sl, #4896	; 0x1320
 801b294:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
 801b298:	f50a 539a 	add.w	r3, sl, #4928	; 0x1340
 801b29c:	f8cd 3828 	str.w	r3, [sp, #2088]	; 0x828
 801b2a0:	f50a 539b 	add.w	r3, sl, #4960	; 0x1360
 801b2a4:	f8cd 3840 	str.w	r3, [sp, #2112]	; 0x840
 801b2a8:	f50a 539c 	add.w	r3, sl, #4992	; 0x1380
 801b2ac:	f8cd 3848 	str.w	r3, [sp, #2120]	; 0x848
 801b2b0:	f50a 539d 	add.w	r3, sl, #5024	; 0x13a0
 801b2b4:	f8cd 3850 	str.w	r3, [sp, #2128]	; 0x850
 801b2b8:	f50a 539e 	add.w	r3, sl, #5056	; 0x13c0
 801b2bc:	f8cd 3858 	str.w	r3, [sp, #2136]	; 0x858
 801b2c0:	f50a 539f 	add.w	r3, sl, #5088	; 0x13e0
 801b2c4:	f8cd 3860 	str.w	r3, [sp, #2144]	; 0x860
 801b2c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b2ca:	461a      	mov	r2, r3
 801b2cc:	3208      	adds	r2, #8
 801b2ce:	9206      	str	r2, [sp, #24]
 801b2d0:	461a      	mov	r2, r3
 801b2d2:	3310      	adds	r3, #16
 801b2d4:	320c      	adds	r2, #12
 801b2d6:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464
      for (i = 0; i < input_height; i++) {
 801b2da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d045      	beq.n	801b36c <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x114c>
 801b2e0:	f1b8 0f00 	cmp.w	r8, #0
 801b2e4:	d042      	beq.n	801b36c <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x114c>
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801b2ec:	f8cd aa90 	str.w	sl, [sp, #2704]	; 0xa90
 801b2f0:	4692      	mov	sl, r2
      two_column_buffer_0 = &im2col_data[DIM_KER_X * DIM_KER_Y * 16];
 801b2f2:	f8dd e3e0 	ldr.w	lr, [sp, #992]	; 0x3e0
      for (i = 0; i < input_height; i++) {
 801b2f6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 801b2fa:	9906      	ldr	r1, [sp, #24]
 801b2fc:	9307      	str	r3, [sp, #28]
 801b2fe:	f109 0404 	add.w	r4, r9, #4
 801b302:	f50e 7c40 	add.w	ip, lr, #768	; 0x300
 801b306:	f50e 7700 	add.w	r7, lr, #512	; 0x200
 801b30a:	f50e 7680 	add.w	r6, lr, #256	; 0x100
    const float* input = input_data;
 801b30e:	4650      	mov	r0, sl
 801b310:	464a      	mov	r2, r9
 801b312:	4675      	mov	r5, lr
        for (j = 0; j < input_width; j++) {
 801b314:	2300      	movs	r3, #0
          *two_column_buffer_0++ = *src_0;
 801b316:	edd2 7a00 	vldr	s15, [r2]
        for (j = 0; j < input_width; j++) {
 801b31a:	3301      	adds	r3, #1
          src_0 += input_depth;
 801b31c:	445a      	add	r2, fp
          *two_column_buffer_0++ = *src_0;
 801b31e:	ece5 7a01 	vstmia	r5!, {s15}
        for (j = 0; j < input_width; j++) {
 801b322:	4543      	cmp	r3, r8
          *two_column_buffer_1++ = *src_1;
 801b324:	edd4 7a00 	vldr	s15, [r4]
          src_1 += input_depth;
 801b328:	445c      	add	r4, fp
          *two_column_buffer_1++ = *src_1;
 801b32a:	ece6 7a01 	vstmia	r6!, {s15}
          *two_column_buffer_2++ = *src_2;
 801b32e:	edd1 7a00 	vldr	s15, [r1]
          src_2 += input_depth;
 801b332:	4459      	add	r1, fp
          *two_column_buffer_2++ = *src_2;
 801b334:	ece7 7a01 	vstmia	r7!, {s15}
          *two_column_buffer_3++ = *src_3;
 801b338:	edd0 7a00 	vldr	s15, [r0]
          src_3 += input_depth;
 801b33c:	4458      	add	r0, fp
          *two_column_buffer_3++ = *src_3;
 801b33e:	ecec 7a01 	vstmia	ip!, {s15}
        for (j = 0; j < input_width; j++) {
 801b342:	d1e8      	bne.n	801b316 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x10f6>
 801b344:	9906      	ldr	r1, [sp, #24]
 801b346:	9a1e      	ldr	r2, [sp, #120]	; 0x78
      for (i = 0; i < input_height; i++) {
 801b348:	9b07      	ldr	r3, [sp, #28]
 801b34a:	4608      	mov	r0, r1
 801b34c:	4496      	add	lr, r2
 801b34e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b350:	3301      	adds	r3, #1
 801b352:	4410      	add	r0, r2
 801b354:	4491      	add	r9, r2
 801b356:	4492      	add	sl, r2
 801b358:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b35a:	9307      	str	r3, [sp, #28]
 801b35c:	4601      	mov	r1, r0
 801b35e:	4293      	cmp	r3, r2
 801b360:	9006      	str	r0, [sp, #24]
 801b362:	d1cc      	bne.n	801b2fe <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x10de>
 801b364:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 801b368:	f8dd aa90 	ldr.w	sl, [sp, #2704]	; 0xa90
      const float* input_3 = &im2col_data[DIM_KER_X * DIM_KER_Y * 19];

      const float* filter = im2col_data;

      // We assume bias_data as zeros.
      float sum_0[16] = {};
 801b36c:	2240      	movs	r2, #64	; 0x40
 801b36e:	2100      	movs	r1, #0
 801b370:	f50d 6011 	add.w	r0, sp, #2320	; 0x910
 801b374:	f00d fdcb 	bl	8028f0e <memset>
      float sum_1[16] = {};
 801b378:	2240      	movs	r2, #64	; 0x40
 801b37a:	2100      	movs	r1, #0
 801b37c:	f50d 6015 	add.w	r0, sp, #2384	; 0x950
 801b380:	f00d fdc5 	bl	8028f0e <memset>
      float sum_2[16] = {};
 801b384:	2240      	movs	r2, #64	; 0x40
 801b386:	2100      	movs	r1, #0
 801b388:	f50d 6019 	add.w	r0, sp, #2448	; 0x990
 801b38c:	f00d fdbf 	bl	8028f0e <memset>
      float sum_3[16] = {};
 801b390:	2240      	movs	r2, #64	; 0x40
 801b392:	2100      	movs	r1, #0
 801b394:	f50d 601d 	add.w	r0, sp, #2512	; 0x9d0
 801b398:	f00d fdb9 	bl	8028f0e <memset>
    tmp += input_0[3] * filter[3];
 801b39c:	f8dd 4560 	ldr.w	r4, [sp, #1376]	; 0x560
    tmp += input_0[2] * filter[2];
 801b3a0:	f8dd 1558 	ldr.w	r1, [sp, #1368]	; 0x558
    *sum_1 += tmp;
 801b3a4:	f60d 1c54 	addw	ip, sp, #2388	; 0x954
    tmp += input_0[3] * filter[3];
 801b3a8:	ed94 5a00 	vldr	s10, [r4]
      /* Group Conv Computation */
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[0], &sum_1[0], &sum_2[0], &sum_3[0], input_0, input_1, input_2, input_3, filter);
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[1], &sum_1[1], &sum_2[1], &sum_3[1], input_0, input_1, input_2, input_3, filter);
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[2], &sum_1[2], &sum_2[2], &sum_3[2], input_0, input_1, input_2, input_3, filter);
 801b3ac:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    tmp += input_0[4] * filter[4];
 801b3b0:	f8dd 4568 	ldr.w	r4, [sp, #1384]	; 0x568
    tmp += input_0[2] * filter[2];
 801b3b4:	edd1 5a00 	vldr	s11, [r1]
 801b3b8:	f60d 1158 	addw	r1, sp, #2392	; 0x958
    tmp += input_0[4] * filter[4];
 801b3bc:	edd4 3a00 	vldr	s7, [r4]
    tmp += input_0[5] * filter[5];
 801b3c0:	f8dd 456c 	ldr.w	r4, [sp, #1388]	; 0x56c
    tmp += input_0[1] * filter[1];
 801b3c4:	f8dd 38a4 	ldr.w	r3, [sp, #2212]	; 0x8a4
    tmp += input_0[5] * filter[5];
 801b3c8:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_0[2] * filter[2];
 801b3cc:	f50d 6480 	add.w	r4, sp, #1024	; 0x400
    tmp += input_0[0] * filter[0];
 801b3d0:	9af8      	ldr	r2, [sp, #992]	; 0x3e0
    tmp += input_0[2] * filter[2];
 801b3d2:	edc4 5a00 	vstr	s11, [r4]
    tmp += input_0[6] * filter[6];
 801b3d6:	f8dd 4570 	ldr.w	r4, [sp, #1392]	; 0x570
    tmp += input_0[0] * filter[0];
 801b3da:	ed92 6a00 	vldr	s12, [r2]
 801b3de:	f60d 1298 	addw	r2, sp, #2456	; 0x998
    tmp += input_0[6] * filter[6];
 801b3e2:	edd4 2a00 	vldr	s5, [r4]
    tmp += input_0[7] * filter[7];
 801b3e6:	f8dd 4574 	ldr.w	r4, [sp, #1396]	; 0x574
    tmp += input_0[1] * filter[1];
 801b3ea:	ed93 7a00 	vldr	s14, [r3]
 801b3ee:	f60d 13d8 	addw	r3, sp, #2520	; 0x9d8
    tmp += input_0[7] * filter[7];
 801b3f2:	edd4 6a00 	vldr	s13, [r4]
    tmp += input_0[8] * filter[8];
 801b3f6:	f8dd 4830 	ldr.w	r4, [sp, #2096]	; 0x830
    tmp += input_0[1] * filter[1];
 801b3fa:	edda 7a01 	vldr	s15, [sl, #4]
    tmp += input_0[8] * filter[8];
 801b3fe:	edd4 4a00 	vldr	s9, [r4]
    tmp += input_0[3] * filter[3];
 801b402:	f20d 4404 	addw	r4, sp, #1028	; 0x404
    tmp += input_0[0] * filter[0];
 801b406:	edda fa00 	vldr	s31, [sl]
    tmp += input_0[2] * filter[2];
 801b40a:	ed9a fa02 	vldr	s30, [sl, #8]
    tmp += input_0[3] * filter[3];
 801b40e:	edda ea03 	vldr	s29, [sl, #12]
    tmp += input_0[4] * filter[4];
 801b412:	ed9a ea04 	vldr	s28, [sl, #16]
    tmp += input_0[5] * filter[5];
 801b416:	edda da05 	vldr	s27, [sl, #20]
    tmp += input_0[7] * filter[7];
 801b41a:	edda ca07 	vldr	s25, [sl, #28]
    tmp += input_0[8] * filter[8];
 801b41e:	ed9a ca08 	vldr	s24, [sl, #32]
    tmp += input_0[6] * filter[6];
 801b422:	ed9a da06 	vldr	s26, [sl, #24]
    tmp += input_0[1] * filter[1];
 801b426:	ed8d 7aff 	vstr	s14, [sp, #1020]	; 0x3fc
 801b42a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b42e:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 801b432:	ed8d 6afe 	vstr	s12, [sp, #1016]	; 0x3f8
    tmp += input_0[3] * filter[3];
 801b436:	ed84 5a00 	vstr	s10, [r4]
    tmp += input_0[1] * filter[1];
 801b43a:	eea6 7a2f 	vfma.f32	s14, s12, s31
    tmp += input_0[9] * filter[9];
 801b43e:	f8dd 457c 	ldr.w	r4, [sp, #1404]	; 0x57c
    tmp += input_0[8] * filter[8];
 801b442:	eeb0 6a64 	vmov.f32	s12, s9
    tmp += input_0[9] * filter[9];
 801b446:	edda ba09 	vldr	s23, [sl, #36]	; 0x24
 801b44a:	ed94 2a00 	vldr	s4, [r4]
    tmp += input_0[10] * filter[10];
 801b44e:	f8dd 4580 	ldr.w	r4, [sp, #1408]	; 0x580
    tmp += input_0[9] * filter[9];
 801b452:	eef0 7a42 	vmov.f32	s15, s4
    tmp += input_0[10] * filter[10];
 801b456:	ed9a ba0a 	vldr	s22, [sl, #40]	; 0x28
 801b45a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[2] * filter[2];
 801b45e:	eea5 7a8f 	vfma.f32	s14, s11, s30
    tmp += input_0[11] * filter[11];
 801b462:	f8dd 4584 	ldr.w	r4, [sp, #1412]	; 0x584
 801b466:	edda aa0b 	vldr	s21, [sl, #44]	; 0x2c
 801b46a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_0[4] * filter[4];
 801b46e:	f50d 6481 	add.w	r4, sp, #1032	; 0x408
    tmp += input_0[12] * filter[12];
 801b472:	ed9a aa0c 	vldr	s20, [sl, #48]	; 0x30
    tmp += input_0[4] * filter[4];
 801b476:	edc4 3a00 	vstr	s7, [r4]
    tmp += input_0[12] * filter[12];
 801b47a:	f8dd 4588 	ldr.w	r4, [sp, #1416]	; 0x588
    tmp += input_0[3] * filter[3];
 801b47e:	eea5 7a2e 	vfma.f32	s14, s10, s29
    tmp += input_0[13] * filter[13];
 801b482:	edda 9a0d 	vldr	s19, [sl, #52]	; 0x34
    tmp += input_0[12] * filter[12];
 801b486:	edd4 0a00 	vldr	s1, [r4]
    tmp += input_0[13] * filter[13];
 801b48a:	f8dd 4590 	ldr.w	r4, [sp, #1424]	; 0x590
    tmp += input_0[10] * filter[10];
 801b48e:	edcd 1a15 	vstr	s3, [sp, #84]	; 0x54
    tmp += input_0[13] * filter[13];
 801b492:	ed94 0a00 	vldr	s0, [r4]
    tmp += input_0[14] * filter[14];
 801b496:	f8dd 4598 	ldr.w	r4, [sp, #1432]	; 0x598
    tmp += input_0[4] * filter[4];
 801b49a:	eea3 7a8e 	vfma.f32	s14, s7, s28
    tmp += input_0[12] * filter[12];
 801b49e:	edcd 0a17 	vstr	s1, [sp, #92]	; 0x5c
    tmp += input_0[14] * filter[14];
 801b4a2:	edd4 4a00 	vldr	s9, [r4]
    tmp += input_0[5] * filter[5];
 801b4a6:	f20d 440c 	addw	r4, sp, #1036	; 0x40c
    tmp += input_0[15] * filter[15];
 801b4aa:	edda 0a0f 	vldr	s1, [sl, #60]	; 0x3c
    tmp += input_0[5] * filter[5];
 801b4ae:	ed84 3a00 	vstr	s6, [r4]
    tmp += input_0[15] * filter[15];
 801b4b2:	f8dd 459c 	ldr.w	r4, [sp, #1436]	; 0x59c
    tmp += input_0[13] * filter[13];
 801b4b6:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
    tmp += input_0[5] * filter[5];
 801b4ba:	eea3 7a2d 	vfma.f32	s14, s6, s27
    tmp += input_0[15] * filter[15];
 801b4be:	ed94 4a00 	vldr	s8, [r4]
    tmp += input_0[16] * filter[16];
 801b4c2:	f8dd 4844 	ldr.w	r4, [sp, #2116]	; 0x844
    tmp += input_0[14] * filter[14];
 801b4c6:	ed9a 0a0e 	vldr	s0, [sl, #56]	; 0x38
    tmp += input_0[16] * filter[16];
 801b4ca:	ed94 2a00 	vldr	s4, [r4]
    tmp += input_0[14] * filter[14];
 801b4ce:	edcd 4a19 	vstr	s9, [sp, #100]	; 0x64
    tmp += input_0[15] * filter[15];
 801b4d2:	ed8d 4a1a 	vstr	s8, [sp, #104]	; 0x68
    tmp += input_0[6] * filter[6];
 801b4d6:	eea2 7a8d 	vfma.f32	s14, s5, s26
    tmp += input_0[16] * filter[16];
 801b4da:	ed8d 2a1b 	vstr	s4, [sp, #108]	; 0x6c
    tmp += input_0[11] * filter[11];
 801b4de:	ed8d 1a16 	vstr	s2, [sp, #88]	; 0x58
    tmp += input_0[16] * filter[16];
 801b4e2:	ed9a 1a10 	vldr	s2, [sl, #64]	; 0x40
    tmp += input_0[17] * filter[17];
 801b4e6:	f8dd 45a8 	ldr.w	r4, [sp, #1448]	; 0x5a8
    tmp += input_0[16] * filter[16];
 801b4ea:	ed8d 1a06 	vstr	s2, [sp, #24]
    tmp += input_0[17] * filter[17];
 801b4ee:	edd4 5a00 	vldr	s11, [r4]
    tmp += input_0[6] * filter[6];
 801b4f2:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
    tmp += input_0[17] * filter[17];
 801b4f6:	ed9a 1a11 	vldr	s2, [sl, #68]	; 0x44
    tmp += input_0[7] * filter[7];
 801b4fa:	eea6 7aac 	vfma.f32	s14, s13, s25
    tmp += input_0[6] * filter[6];
 801b4fe:	edc4 2a00 	vstr	s5, [r4]
    tmp += input_0[18] * filter[18];
 801b502:	f8dd 45b0 	ldr.w	r4, [sp, #1456]	; 0x5b0
    tmp += input_0[17] * filter[17];
 801b506:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
    tmp += input_0[18] * filter[18];
 801b50a:	ed94 5a00 	vldr	s10, [r4]
    tmp += input_0[19] * filter[19];
 801b50e:	f8dd 45b8 	ldr.w	r4, [sp, #1464]	; 0x5b8
    tmp += input_0[18] * filter[18];
 801b512:	ed8d 5a20 	vstr	s10, [sp, #128]	; 0x80
    tmp += input_0[8] * filter[8];
 801b516:	eea6 7a0c 	vfma.f32	s14, s12, s24
    tmp += input_0[19] * filter[19];
 801b51a:	edd4 4a00 	vldr	s9, [r4]
    tmp += input_0[20] * filter[20];
 801b51e:	f8dd 45c0 	ldr.w	r4, [sp, #1472]	; 0x5c0
    tmp += input_0[19] * filter[19];
 801b522:	edcd 4a21 	vstr	s9, [sp, #132]	; 0x84
    tmp += input_0[20] * filter[20];
 801b526:	ed94 4a00 	vldr	s8, [r4]
    tmp += input_0[7] * filter[7];
 801b52a:	f20d 4414 	addw	r4, sp, #1044	; 0x414
    tmp += input_0[18] * filter[18];
 801b52e:	ed9a 2a12 	vldr	s4, [sl, #72]	; 0x48
    tmp += input_0[7] * filter[7];
 801b532:	edc4 6a00 	vstr	s13, [r4]
    tmp += input_0[9] * filter[9];
 801b536:	eea7 7aab 	vfma.f32	s14, s15, s23
    tmp += input_0[21] * filter[21];
 801b53a:	f8dd 45c8 	ldr.w	r4, [sp, #1480]	; 0x5c8
    tmp += input_0[19] * filter[19];
 801b53e:	edda 2a13 	vldr	s5, [sl, #76]	; 0x4c
    tmp += input_0[21] * filter[21];
 801b542:	edd4 5a00 	vldr	s11, [r4]
    tmp += input_0[22] * filter[22];
 801b546:	f8dd 45d0 	ldr.w	r4, [sp, #1488]	; 0x5d0
    tmp += input_0[20] * filter[20];
 801b54a:	ed9a 3a14 	vldr	s6, [sl, #80]	; 0x50
    tmp += input_0[22] * filter[22];
 801b54e:	ed94 5a00 	vldr	s10, [r4]
    tmp += input_0[23] * filter[23];
 801b552:	f8dd 45d4 	ldr.w	r4, [sp, #1492]	; 0x5d4
    tmp += input_0[21] * filter[21];
 801b556:	edda 3a15 	vldr	s7, [sl, #84]	; 0x54
    tmp += input_0[23] * filter[23];
 801b55a:	edd4 4a00 	vldr	s9, [r4]
    tmp += input_0[8] * filter[8];
 801b55e:	f50d 6483 	add.w	r4, sp, #1048	; 0x418
    tmp += input_0[17] * filter[17];
 801b562:	ed8d 1a07 	vstr	s2, [sp, #28]
    tmp += input_0[6] * filter[6];
 801b566:	ed8d da13 	vstr	s26, [sp, #76]	; 0x4c
    tmp += input_0[20] * filter[20];
 801b56a:	eeb0 da44 	vmov.f32	s26, s8
    tmp += input_0[21] * filter[21];
 801b56e:	edcd 5a49 	vstr	s11, [sp, #292]	; 0x124
    tmp += input_0[22] * filter[22];
 801b572:	ed9a 4a16 	vldr	s8, [sl, #88]	; 0x58
 801b576:	ed8d 5a22 	vstr	s10, [sp, #136]	; 0x88
    tmp += input_0[23] * filter[23];
 801b57a:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 801b57e:	edda 4a17 	vldr	s9, [sl, #92]	; 0x5c
    tmp += input_0[8] * filter[8];
 801b582:	ed84 6a00 	vstr	s12, [r4]
    tmp += input_0[24] * filter[24];
 801b586:	f8dd 484c 	ldr.w	r4, [sp, #2124]	; 0x84c
 801b58a:	ed9a 5a18 	vldr	s10, [sl, #96]	; 0x60
 801b58e:	edd4 6a00 	vldr	s13, [r4]
    tmp += input_0[25] * filter[25];
 801b592:	f8dd 45e0 	ldr.w	r4, [sp, #1504]	; 0x5e0
    tmp += input_0[24] * filter[24];
 801b596:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
    tmp += input_0[25] * filter[25];
 801b59a:	ed94 6a00 	vldr	s12, [r4]
    tmp += input_0[26] * filter[26];
 801b59e:	f8dd 45e8 	ldr.w	r4, [sp, #1512]	; 0x5e8
    tmp += input_0[25] * filter[25];
 801b5a2:	edda 5a19 	vldr	s11, [sl, #100]	; 0x64
    tmp += input_0[26] * filter[26];
 801b5a6:	edd4 6a00 	vldr	s13, [r4]
    tmp += input_0[9] * filter[9];
 801b5aa:	f20d 441c 	addw	r4, sp, #1052	; 0x41c
    tmp += input_0[25] * filter[25];
 801b5ae:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
    tmp += input_0[9] * filter[9];
 801b5b2:	edc4 7a00 	vstr	s15, [r4]
    tmp += input_0[27] * filter[27];
 801b5b6:	f8dd 45f0 	ldr.w	r4, [sp, #1520]	; 0x5f0
    tmp += input_0[26] * filter[26];
 801b5ba:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
    tmp += input_0[27] * filter[27];
 801b5be:	edd4 6a00 	vldr	s13, [r4]
    tmp += input_0[28] * filter[28];
 801b5c2:	f8dd 45f8 	ldr.w	r4, [sp, #1528]	; 0x5f8
    tmp += input_0[26] * filter[26];
 801b5c6:	ed9a 6a1a 	vldr	s12, [sl, #104]	; 0x68
    tmp += input_0[28] * filter[28];
 801b5ca:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[29] * filter[29];
 801b5ce:	f8dd 4600 	ldr.w	r4, [sp, #1536]	; 0x600
    tmp += input_0[28] * filter[28];
 801b5d2:	eef0 7a61 	vmov.f32	s15, s3
    tmp += input_0[27] * filter[27];
 801b5d6:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
    tmp += input_0[29] * filter[29];
 801b5da:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[30] * filter[30];
 801b5de:	f8dd 4608 	ldr.w	r4, [sp, #1544]	; 0x608
    tmp += input_0[29] * filter[29];
 801b5e2:	edcd 1a28 	vstr	s3, [sp, #160]	; 0xa0
    tmp += input_0[10] * filter[10];
 801b5e6:	eddd 1a15 	vldr	s3, [sp, #84]	; 0x54
    tmp += input_0[27] * filter[27];
 801b5ea:	edda 6a1b 	vldr	s13, [sl, #108]	; 0x6c
    tmp += input_0[10] * filter[10];
 801b5ee:	eea1 7a8b 	vfma.f32	s14, s3, s22
    tmp += input_0[30] * filter[30];
 801b5f2:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[31] * filter[31];
 801b5f6:	f8dd 460c 	ldr.w	r4, [sp, #1548]	; 0x60c
    tmp += input_0[30] * filter[30];
 801b5fa:	edcd 1a29 	vstr	s3, [sp, #164]	; 0xa4
    tmp += input_0[31] * filter[31];
 801b5fe:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[32] * filter[32];
 801b602:	f8dd 4854 	ldr.w	r4, [sp, #2132]	; 0x854
    tmp += input_0[31] * filter[31];
 801b606:	edcd 1a2a 	vstr	s3, [sp, #168]	; 0xa8
    tmp += input_0[32] * filter[32];
 801b60a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[33] * filter[33];
 801b60e:	f8dd 4618 	ldr.w	r4, [sp, #1560]	; 0x618
    tmp += input_0[32] * filter[32];
 801b612:	edcd 1a2b 	vstr	s3, [sp, #172]	; 0xac
    tmp += input_0[11] * filter[11];
 801b616:	eddd 1a16 	vldr	s3, [sp, #88]	; 0x58
 801b61a:	eea1 7aaa 	vfma.f32	s14, s3, s21
    tmp += input_0[33] * filter[33];
 801b61e:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[34] * filter[34];
 801b622:	f8dd 4620 	ldr.w	r4, [sp, #1568]	; 0x620
    tmp += input_0[33] * filter[33];
 801b626:	edcd 1a2c 	vstr	s3, [sp, #176]	; 0xb0
    tmp += input_0[34] * filter[34];
 801b62a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[35] * filter[35];
 801b62e:	f8dd 4628 	ldr.w	r4, [sp, #1576]	; 0x628
    tmp += input_0[34] * filter[34];
 801b632:	edcd 1a2d 	vstr	s3, [sp, #180]	; 0xb4
    tmp += input_0[35] * filter[35];
 801b636:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[36] * filter[36];
 801b63a:	f8dd 4630 	ldr.w	r4, [sp, #1584]	; 0x630
    tmp += input_0[35] * filter[35];
 801b63e:	edcd 1a2e 	vstr	s3, [sp, #184]	; 0xb8
    tmp += input_0[12] * filter[12];
 801b642:	eddd 1a17 	vldr	s3, [sp, #92]	; 0x5c
 801b646:	eea1 7a8a 	vfma.f32	s14, s3, s20
    tmp += input_0[36] * filter[36];
 801b64a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[37] * filter[37];
 801b64e:	f8dd 4638 	ldr.w	r4, [sp, #1592]	; 0x638
    tmp += input_0[36] * filter[36];
 801b652:	edcd 1a2f 	vstr	s3, [sp, #188]	; 0xbc
    tmp += input_0[37] * filter[37];
 801b656:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[38] * filter[38];
 801b65a:	f8dd 4640 	ldr.w	r4, [sp, #1600]	; 0x640
    tmp += input_0[37] * filter[37];
 801b65e:	edcd 1a30 	vstr	s3, [sp, #192]	; 0xc0
    tmp += input_0[38] * filter[38];
 801b662:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[39] * filter[39];
 801b666:	f8dd 4644 	ldr.w	r4, [sp, #1604]	; 0x644
    tmp += input_0[38] * filter[38];
 801b66a:	edcd 1a31 	vstr	s3, [sp, #196]	; 0xc4
    tmp += input_0[13] * filter[13];
 801b66e:	eddd 1a18 	vldr	s3, [sp, #96]	; 0x60
 801b672:	eea1 7aa9 	vfma.f32	s14, s3, s19
    tmp += input_0[39] * filter[39];
 801b676:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[40] * filter[40];
 801b67a:	f8dd 485c 	ldr.w	r4, [sp, #2140]	; 0x85c
    tmp += input_0[39] * filter[39];
 801b67e:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
    tmp += input_0[40] * filter[40];
 801b682:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[41] * filter[41];
 801b686:	f8dd 4650 	ldr.w	r4, [sp, #1616]	; 0x650
    tmp += input_0[40] * filter[40];
 801b68a:	edcd 1a33 	vstr	s3, [sp, #204]	; 0xcc
    tmp += input_0[41] * filter[41];
 801b68e:	edd4 1a00 	vldr	s3, [r4]
 801b692:	edcd 1a34 	vstr	s3, [sp, #208]	; 0xd0
    tmp += input_0[14] * filter[14];
 801b696:	eddd 1a19 	vldr	s3, [sp, #100]	; 0x64
    tmp += input_0[42] * filter[42];
 801b69a:	f8dd 4658 	ldr.w	r4, [sp, #1624]	; 0x658
    tmp += input_0[14] * filter[14];
 801b69e:	eea1 7a80 	vfma.f32	s14, s3, s0
    tmp += input_0[16] * filter[16];
 801b6a2:	ed9d 1a06 	vldr	s2, [sp, #24]
    tmp += input_0[42] * filter[42];
 801b6a6:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[43] * filter[43];
 801b6aa:	f8dd 4660 	ldr.w	r4, [sp, #1632]	; 0x660
    tmp += input_0[42] * filter[42];
 801b6ae:	edcd 1a35 	vstr	s3, [sp, #212]	; 0xd4
    tmp += input_0[43] * filter[43];
 801b6b2:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[44] * filter[44];
 801b6b6:	f8dd 4668 	ldr.w	r4, [sp, #1640]	; 0x668
    tmp += input_0[43] * filter[43];
 801b6ba:	edcd 1a36 	vstr	s3, [sp, #216]	; 0xd8
    tmp += input_0[44] * filter[44];
 801b6be:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[45] * filter[45];
 801b6c2:	f8dd 4670 	ldr.w	r4, [sp, #1648]	; 0x670
    tmp += input_0[44] * filter[44];
 801b6c6:	edcd 1a37 	vstr	s3, [sp, #220]	; 0xdc
    tmp += input_0[15] * filter[15];
 801b6ca:	eddd 1a1a 	vldr	s3, [sp, #104]	; 0x68
 801b6ce:	eea1 7aa0 	vfma.f32	s14, s3, s1
    tmp += input_0[45] * filter[45];
 801b6d2:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[46] * filter[46];
 801b6d6:	f8dd 4678 	ldr.w	r4, [sp, #1656]	; 0x678
    tmp += input_0[45] * filter[45];
 801b6da:	edcd 1a38 	vstr	s3, [sp, #224]	; 0xe0
    tmp += input_0[46] * filter[46];
 801b6de:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[47] * filter[47];
 801b6e2:	f8dd 467c 	ldr.w	r4, [sp, #1660]	; 0x67c
    tmp += input_0[46] * filter[46];
 801b6e6:	edcd 1a39 	vstr	s3, [sp, #228]	; 0xe4
    tmp += input_0[47] * filter[47];
 801b6ea:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[48] * filter[48];
 801b6ee:	f8dd 4864 	ldr.w	r4, [sp, #2148]	; 0x864
    tmp += input_0[47] * filter[47];
 801b6f2:	edcd 1a3a 	vstr	s3, [sp, #232]	; 0xe8
    tmp += input_0[16] * filter[16];
 801b6f6:	eddd 1a1b 	vldr	s3, [sp, #108]	; 0x6c
 801b6fa:	eea1 7a81 	vfma.f32	s14, s3, s2
    tmp += input_0[48] * filter[48];
 801b6fe:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[49] * filter[49];
 801b702:	f8dd 4688 	ldr.w	r4, [sp, #1672]	; 0x688
    tmp += input_0[48] * filter[48];
 801b706:	edcd 1a3b 	vstr	s3, [sp, #236]	; 0xec
    tmp += input_0[49] * filter[49];
 801b70a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[50] * filter[50];
 801b70e:	f8dd 4690 	ldr.w	r4, [sp, #1680]	; 0x690
    tmp += input_0[49] * filter[49];
 801b712:	edcd 1a3c 	vstr	s3, [sp, #240]	; 0xf0
    tmp += input_0[50] * filter[50];
 801b716:	edd4 1a00 	vldr	s3, [r4]
 801b71a:	edcd 1a3d 	vstr	s3, [sp, #244]	; 0xf4
    tmp += input_0[17] * filter[17];
 801b71e:	eddd 1a1f 	vldr	s3, [sp, #124]	; 0x7c
 801b722:	ed9d 1a07 	vldr	s2, [sp, #28]
    tmp += input_0[51] * filter[51];
 801b726:	f8dd 4698 	ldr.w	r4, [sp, #1688]	; 0x698
    tmp += input_0[17] * filter[17];
 801b72a:	eea1 7a81 	vfma.f32	s14, s3, s2
    tmp += input_0[51] * filter[51];
 801b72e:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[52] * filter[52];
 801b732:	f8dd 46a0 	ldr.w	r4, [sp, #1696]	; 0x6a0
    tmp += input_0[51] * filter[51];
 801b736:	edcd 1a3e 	vstr	s3, [sp, #248]	; 0xf8
    tmp += input_0[52] * filter[52];
 801b73a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[53] * filter[53];
 801b73e:	f8dd 46a8 	ldr.w	r4, [sp, #1704]	; 0x6a8
    tmp += input_0[52] * filter[52];
 801b742:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
    tmp += input_0[53] * filter[53];
 801b746:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[54] * filter[54];
 801b74a:	f8dd 46b0 	ldr.w	r4, [sp, #1712]	; 0x6b0
    tmp += input_0[53] * filter[53];
 801b74e:	edcd 1a40 	vstr	s3, [sp, #256]	; 0x100
    tmp += input_0[18] * filter[18];
 801b752:	eddd 1a20 	vldr	s3, [sp, #128]	; 0x80
 801b756:	eea1 7a82 	vfma.f32	s14, s3, s4
    tmp += input_0[54] * filter[54];
 801b75a:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[55] * filter[55];
 801b75e:	f8dd 46b4 	ldr.w	r4, [sp, #1716]	; 0x6b4
    tmp += input_0[54] * filter[54];
 801b762:	edcd 1a41 	vstr	s3, [sp, #260]	; 0x104
    tmp += input_0[55] * filter[55];
 801b766:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[56] * filter[56];
 801b76a:	f8dd 4868 	ldr.w	r4, [sp, #2152]	; 0x868
    tmp += input_0[55] * filter[55];
 801b76e:	edcd 1a42 	vstr	s3, [sp, #264]	; 0x108
    tmp += input_0[56] * filter[56];
 801b772:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[57] * filter[57];
 801b776:	f8dd 46b8 	ldr.w	r4, [sp, #1720]	; 0x6b8
    tmp += input_0[56] * filter[56];
 801b77a:	edcd 1a43 	vstr	s3, [sp, #268]	; 0x10c
    tmp += input_0[19] * filter[19];
 801b77e:	eddd 1a21 	vldr	s3, [sp, #132]	; 0x84
 801b782:	eea1 7aa2 	vfma.f32	s14, s3, s5
    tmp += input_0[57] * filter[57];
 801b786:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[58] * filter[58];
 801b78a:	f8dd 46bc 	ldr.w	r4, [sp, #1724]	; 0x6bc
    tmp += input_0[57] * filter[57];
 801b78e:	edcd 1a44 	vstr	s3, [sp, #272]	; 0x110
    tmp += input_0[58] * filter[58];
 801b792:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[59] * filter[59];
 801b796:	f8dd 46c0 	ldr.w	r4, [sp, #1728]	; 0x6c0
    tmp += input_0[58] * filter[58];
 801b79a:	edcd 1a45 	vstr	s3, [sp, #276]	; 0x114
    tmp += input_0[59] * filter[59];
 801b79e:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[20] * filter[20];
 801b7a2:	f50d 6484 	add.w	r4, sp, #1056	; 0x420
 801b7a6:	eead 7a03 	vfma.f32	s14, s26, s6
 801b7aa:	ed84 da00 	vstr	s26, [r4]
    tmp += input_0[60] * filter[60];
 801b7ae:	f8dd 46c4 	ldr.w	r4, [sp, #1732]	; 0x6c4
    tmp += input_0[59] * filter[59];
 801b7b2:	edcd 1a46 	vstr	s3, [sp, #280]	; 0x118
    tmp += input_0[60] * filter[60];
 801b7b6:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[61] * filter[61];
 801b7ba:	f8dd 46c8 	ldr.w	r4, [sp, #1736]	; 0x6c8
    tmp += input_0[60] * filter[60];
 801b7be:	edcd 1a47 	vstr	s3, [sp, #284]	; 0x11c
    tmp += input_0[61] * filter[61];
 801b7c2:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[62] * filter[62];
 801b7c6:	f8dd 46cc 	ldr.w	r4, [sp, #1740]	; 0x6cc
    tmp += input_0[61] * filter[61];
 801b7ca:	edcd 1a48 	vstr	s3, [sp, #288]	; 0x120
    tmp += input_0[62] * filter[62];
 801b7ce:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[21] * filter[21];
 801b7d2:	f20d 4424 	addw	r4, sp, #1060	; 0x424
    tmp += input_0[62] * filter[62];
 801b7d6:	eeb0 da61 	vmov.f32	s26, s3
    tmp += input_0[21] * filter[21];
 801b7da:	eddd 1a49 	vldr	s3, [sp, #292]	; 0x124
 801b7de:	edc4 1a00 	vstr	s3, [r4]
 801b7e2:	eea1 7aa3 	vfma.f32	s14, s3, s7
    tmp += input_0[63] * filter[63];
 801b7e6:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801b7ea:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_0[28] * filter[28];
 801b7ee:	f50d 6485 	add.w	r4, sp, #1064	; 0x428
    tmp += input_0[63] * filter[63];
 801b7f2:	eeb0 1a61 	vmov.f32	s2, s3
    tmp += input_0[22] * filter[22];
 801b7f6:	eddd 1a22 	vldr	s3, [sp, #136]	; 0x88
    tmp += input_0[28] * filter[28];
 801b7fa:	edc4 7a00 	vstr	s15, [r4]
    tmp += input_0[62] * filter[62];
 801b7fe:	f20d 442c 	addw	r4, sp, #1068	; 0x42c
    tmp += input_0[22] * filter[22];
 801b802:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp += input_0[23] * filter[23];
 801b806:	eddd 1a23 	vldr	s3, [sp, #140]	; 0x8c
 801b80a:	eea1 7aa4 	vfma.f32	s14, s3, s9
    tmp += input_0[24] * filter[24];
 801b80e:	eddd 1a24 	vldr	s3, [sp, #144]	; 0x90
 801b812:	eea1 7a85 	vfma.f32	s14, s3, s10
    tmp += input_0[25] * filter[25];
 801b816:	eddd 1a25 	vldr	s3, [sp, #148]	; 0x94
 801b81a:	eea1 7aa5 	vfma.f32	s14, s3, s11
    tmp += input_0[26] * filter[26];
 801b81e:	eddd 1a26 	vldr	s3, [sp, #152]	; 0x98
 801b822:	eea1 7a86 	vfma.f32	s14, s3, s12
    tmp += input_0[27] * filter[27];
 801b826:	eddd 1a27 	vldr	s3, [sp, #156]	; 0x9c
 801b82a:	eea1 7aa6 	vfma.f32	s14, s3, s13
    tmp += input_0[28] * filter[28];
 801b82e:	eef0 1a67 	vmov.f32	s3, s15
 801b832:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
 801b836:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[29] * filter[29];
 801b83a:	eddd 1a28 	vldr	s3, [sp, #160]	; 0xa0
 801b83e:	edda 7a1d 	vldr	s15, [sl, #116]	; 0x74
 801b842:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[30] * filter[30];
 801b846:	eddd 1a29 	vldr	s3, [sp, #164]	; 0xa4
 801b84a:	edda 7a1e 	vldr	s15, [sl, #120]	; 0x78
 801b84e:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[31] * filter[31];
 801b852:	eddd 1a2a 	vldr	s3, [sp, #168]	; 0xa8
 801b856:	edda 7a1f 	vldr	s15, [sl, #124]	; 0x7c
 801b85a:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[32] * filter[32];
 801b85e:	eddd 1a2b 	vldr	s3, [sp, #172]	; 0xac
 801b862:	edda 7a20 	vldr	s15, [sl, #128]	; 0x80
 801b866:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[33] * filter[33];
 801b86a:	eddd 1a2c 	vldr	s3, [sp, #176]	; 0xb0
 801b86e:	edda 7a21 	vldr	s15, [sl, #132]	; 0x84
 801b872:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[34] * filter[34];
 801b876:	eddd 1a2d 	vldr	s3, [sp, #180]	; 0xb4
 801b87a:	edda 7a22 	vldr	s15, [sl, #136]	; 0x88
 801b87e:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[35] * filter[35];
 801b882:	eddd 1a2e 	vldr	s3, [sp, #184]	; 0xb8
 801b886:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 801b88a:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[36] * filter[36];
 801b88e:	eddd 1a2f 	vldr	s3, [sp, #188]	; 0xbc
 801b892:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 801b896:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[37] * filter[37];
 801b89a:	eddd 1a30 	vldr	s3, [sp, #192]	; 0xc0
 801b89e:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 801b8a2:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[38] * filter[38];
 801b8a6:	eddd 1a31 	vldr	s3, [sp, #196]	; 0xc4
 801b8aa:	edda 7a26 	vldr	s15, [sl, #152]	; 0x98
 801b8ae:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[39] * filter[39];
 801b8b2:	eddd 1a32 	vldr	s3, [sp, #200]	; 0xc8
 801b8b6:	edda 7a27 	vldr	s15, [sl, #156]	; 0x9c
 801b8ba:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[40] * filter[40];
 801b8be:	eddd 1a33 	vldr	s3, [sp, #204]	; 0xcc
 801b8c2:	edda 7a28 	vldr	s15, [sl, #160]	; 0xa0
 801b8c6:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[41] * filter[41];
 801b8ca:	eddd 1a34 	vldr	s3, [sp, #208]	; 0xd0
 801b8ce:	edda 7a29 	vldr	s15, [sl, #164]	; 0xa4
 801b8d2:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[42] * filter[42];
 801b8d6:	eddd 1a35 	vldr	s3, [sp, #212]	; 0xd4
 801b8da:	edda 7a2a 	vldr	s15, [sl, #168]	; 0xa8
 801b8de:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[43] * filter[43];
 801b8e2:	eddd 1a36 	vldr	s3, [sp, #216]	; 0xd8
 801b8e6:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 801b8ea:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[44] * filter[44];
 801b8ee:	eddd 1a37 	vldr	s3, [sp, #220]	; 0xdc
 801b8f2:	edda 7a2c 	vldr	s15, [sl, #176]	; 0xb0
 801b8f6:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[45] * filter[45];
 801b8fa:	eddd 1a38 	vldr	s3, [sp, #224]	; 0xe0
 801b8fe:	edda 7a2d 	vldr	s15, [sl, #180]	; 0xb4
 801b902:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[46] * filter[46];
 801b906:	eddd 1a39 	vldr	s3, [sp, #228]	; 0xe4
 801b90a:	edda 7a2e 	vldr	s15, [sl, #184]	; 0xb8
 801b90e:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[47] * filter[47];
 801b912:	eddd 1a3a 	vldr	s3, [sp, #232]	; 0xe8
 801b916:	edda 7a2f 	vldr	s15, [sl, #188]	; 0xbc
 801b91a:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[48] * filter[48];
 801b91e:	eddd 1a3b 	vldr	s3, [sp, #236]	; 0xec
 801b922:	edda 7a30 	vldr	s15, [sl, #192]	; 0xc0
 801b926:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[49] * filter[49];
 801b92a:	eddd 1a3c 	vldr	s3, [sp, #240]	; 0xf0
 801b92e:	edda 7a31 	vldr	s15, [sl, #196]	; 0xc4
 801b932:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[50] * filter[50];
 801b936:	eddd 1a3d 	vldr	s3, [sp, #244]	; 0xf4
 801b93a:	edda 7a32 	vldr	s15, [sl, #200]	; 0xc8
 801b93e:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[51] * filter[51];
 801b942:	eddd 1a3e 	vldr	s3, [sp, #248]	; 0xf8
 801b946:	edda 7a33 	vldr	s15, [sl, #204]	; 0xcc
    tmp += input_0[62] * filter[62];
 801b94a:	ed84 da00 	vstr	s26, [r4]
    tmp += input_0[63] * filter[63];
 801b94e:	f50d 6486 	add.w	r4, sp, #1072	; 0x430
    tmp += input_1[0] * filter[0];
 801b952:	f8dd 586c 	ldr.w	r5, [sp, #2156]	; 0x86c
    tmp += input_0[63] * filter[63];
 801b956:	ed84 1a00 	vstr	s2, [r4]
    *sum_0 += tmp;
 801b95a:	f50d 6411 	add.w	r4, sp, #2320	; 0x910
    tmp += input_0[51] * filter[51];
 801b95e:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[52] * filter[52];
 801b962:	eddd 1a3f 	vldr	s3, [sp, #252]	; 0xfc
 801b966:	edda 7a34 	vldr	s15, [sl, #208]	; 0xd0
 801b96a:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[53] * filter[53];
 801b96e:	eddd 1a40 	vldr	s3, [sp, #256]	; 0x100
 801b972:	edda 7a35 	vldr	s15, [sl, #212]	; 0xd4
 801b976:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[54] * filter[54];
 801b97a:	eddd 1a41 	vldr	s3, [sp, #260]	; 0x104
 801b97e:	edda 7a36 	vldr	s15, [sl, #216]	; 0xd8
 801b982:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[55] * filter[55];
 801b986:	eddd 1a42 	vldr	s3, [sp, #264]	; 0x108
 801b98a:	edda 7a37 	vldr	s15, [sl, #220]	; 0xdc
 801b98e:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[56] * filter[56];
 801b992:	eddd 1a43 	vldr	s3, [sp, #268]	; 0x10c
 801b996:	edda 7a38 	vldr	s15, [sl, #224]	; 0xe0
 801b99a:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[57] * filter[57];
 801b99e:	eddd 1a44 	vldr	s3, [sp, #272]	; 0x110
 801b9a2:	edda 7a39 	vldr	s15, [sl, #228]	; 0xe4
 801b9a6:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[58] * filter[58];
 801b9aa:	eddd 1a45 	vldr	s3, [sp, #276]	; 0x114
 801b9ae:	edda 7a3a 	vldr	s15, [sl, #232]	; 0xe8
 801b9b2:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[59] * filter[59];
 801b9b6:	eddd 1a46 	vldr	s3, [sp, #280]	; 0x118
 801b9ba:	edda 7a3b 	vldr	s15, [sl, #236]	; 0xec
 801b9be:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[60] * filter[60];
 801b9c2:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 801b9c6:	edda 7a3c 	vldr	s15, [sl, #240]	; 0xf0
 801b9ca:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[61] * filter[61];
 801b9ce:	eddd 1a48 	vldr	s3, [sp, #288]	; 0x120
 801b9d2:	edda 7a3d 	vldr	s15, [sl, #244]	; 0xf4
 801b9d6:	eea1 7aa7 	vfma.f32	s14, s3, s15
    tmp += input_0[62] * filter[62];
 801b9da:	edda 7a3e 	vldr	s15, [sl, #248]	; 0xf8
    tmp += input_1[0] * filter[0];
 801b9de:	edd5 1a00 	vldr	s3, [r5]
    tmp += input_0[62] * filter[62];
 801b9e2:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_0[63] * filter[63];
 801b9e6:	edda 7a3f 	vldr	s15, [sl, #252]	; 0xfc
    tmp += input_1[0] * filter[0];
 801b9ea:	eeb0 da61 	vmov.f32	s26, s3
    tmp += input_0[63] * filter[63];
 801b9ee:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[1] * filter[1];
 801b9f2:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
    *sum_0 += tmp;
 801b9f6:	ed84 7a00 	vstr	s14, [r4]
    tmp += input_1[1] * filter[1];
 801b9fa:	f8dd 46d4 	ldr.w	r4, [sp, #1748]	; 0x6d4
 801b9fe:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_1[2] * filter[2];
 801ba02:	f8dd 46d8 	ldr.w	r4, [sp, #1752]	; 0x6d8
    tmp += input_1[1] * filter[1];
 801ba06:	eef0 1a47 	vmov.f32	s3, s14
 801ba0a:	ee27 7a87 	vmul.f32	s14, s15, s14
    tmp += input_1[2] * filter[2];
 801ba0e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[3] * filter[3];
 801ba12:	f8dd 46dc 	ldr.w	r4, [sp, #1756]	; 0x6dc
    tmp += input_1[2] * filter[2];
 801ba16:	edcd 7a49 	vstr	s15, [sp, #292]	; 0x124
    tmp += input_1[3] * filter[3];
 801ba1a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[1] * filter[1];
 801ba1e:	eeaf 7a8d 	vfma.f32	s14, s31, s26
    tmp += input_1[4] * filter[4];
 801ba22:	f8dd 46e0 	ldr.w	r4, [sp, #1760]	; 0x6e0
    tmp += input_1[3] * filter[3];
 801ba26:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
    tmp += input_1[4] * filter[4];
 801ba2a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[1] * filter[1];
 801ba2e:	f20d 4434 	addw	r4, sp, #1076	; 0x434
 801ba32:	ed84 da00 	vstr	s26, [r4]
    tmp += input_1[4] * filter[4];
 801ba36:	eeb0 1a67 	vmov.f32	s2, s15
    tmp += input_1[5] * filter[5];
 801ba3a:	f8dd 46e4 	ldr.w	r4, [sp, #1764]	; 0x6e4
 801ba3e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[6] * filter[6];
 801ba42:	f8dd 46e8 	ldr.w	r4, [sp, #1768]	; 0x6e8
    tmp += input_1[5] * filter[5];
 801ba46:	edcd 7a4b 	vstr	s15, [sp, #300]	; 0x12c
    tmp += input_1[6] * filter[6];
 801ba4a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[7] * filter[7];
 801ba4e:	f8dd 46ec 	ldr.w	r4, [sp, #1772]	; 0x6ec
    tmp += input_1[6] * filter[6];
 801ba52:	edcd 7a4c 	vstr	s15, [sp, #304]	; 0x130
    tmp += input_1[7] * filter[7];
 801ba56:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[8] * filter[8];
 801ba5a:	f8dd 4870 	ldr.w	r4, [sp, #2160]	; 0x870
    tmp += input_1[7] * filter[7];
 801ba5e:	edcd 7a4d 	vstr	s15, [sp, #308]	; 0x134
    tmp += input_1[8] * filter[8];
 801ba62:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[9] * filter[9];
 801ba66:	f8dd 46f0 	ldr.w	r4, [sp, #1776]	; 0x6f0
    tmp += input_1[8] * filter[8];
 801ba6a:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
    tmp += input_1[9] * filter[9];
 801ba6e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[10] * filter[10];
 801ba72:	f8dd 46f4 	ldr.w	r4, [sp, #1780]	; 0x6f4
    tmp += input_1[9] * filter[9];
 801ba76:	edcd 7a4f 	vstr	s15, [sp, #316]	; 0x13c
    tmp += input_1[10] * filter[10];
 801ba7a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[11] * filter[11];
 801ba7e:	f8dd 46f8 	ldr.w	r4, [sp, #1784]	; 0x6f8
    tmp += input_1[10] * filter[10];
 801ba82:	eeb0 da67 	vmov.f32	s26, s15
    tmp += input_1[2] * filter[2];
 801ba86:	eddd 7a49 	vldr	s15, [sp, #292]	; 0x124
 801ba8a:	eeaf 7a27 	vfma.f32	s14, s30, s15
    tmp += input_1[11] * filter[11];
 801ba8e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[12] * filter[12];
 801ba92:	f8dd 46fc 	ldr.w	r4, [sp, #1788]	; 0x6fc
    tmp += input_1[11] * filter[11];
 801ba96:	edcd 7a50 	vstr	s15, [sp, #320]	; 0x140
    tmp += input_1[12] * filter[12];
 801ba9a:	edd4 7a00 	vldr	s15, [r4]
 801ba9e:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
    tmp += input_1[13] * filter[13];
 801baa2:	f8dd 4700 	ldr.w	r4, [sp, #1792]	; 0x700
 801baa6:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[14] * filter[14];
 801baaa:	f8dd 4704 	ldr.w	r4, [sp, #1796]	; 0x704
    tmp += input_1[13] * filter[13];
 801baae:	edcd 7a52 	vstr	s15, [sp, #328]	; 0x148
    tmp += input_1[14] * filter[14];
 801bab2:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[15] * filter[15];
 801bab6:	f8dd 4708 	ldr.w	r4, [sp, #1800]	; 0x708
    tmp += input_1[14] * filter[14];
 801baba:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
    tmp += input_1[15] * filter[15];
 801babe:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[16] * filter[16];
 801bac2:	f8dd 4874 	ldr.w	r4, [sp, #2164]	; 0x874
    tmp += input_1[15] * filter[15];
 801bac6:	edcd 7a54 	vstr	s15, [sp, #336]	; 0x150
    tmp += input_1[16] * filter[16];
 801baca:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[17] * filter[17];
 801bace:	f8dd 470c 	ldr.w	r4, [sp, #1804]	; 0x70c
    tmp += input_1[16] * filter[16];
 801bad2:	edcd 7a55 	vstr	s15, [sp, #340]	; 0x154
    tmp += input_1[3] * filter[3];
 801bad6:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 801bada:	eeae 7aa7 	vfma.f32	s14, s29, s15
    tmp += input_1[17] * filter[17];
 801bade:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[18] * filter[18];
 801bae2:	f8dd 4710 	ldr.w	r4, [sp, #1808]	; 0x710
    tmp += input_1[17] * filter[17];
 801bae6:	edcd 7a56 	vstr	s15, [sp, #344]	; 0x158
    tmp += input_1[18] * filter[18];
 801baea:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[19] * filter[19];
 801baee:	f8dd 4714 	ldr.w	r4, [sp, #1812]	; 0x714
    tmp += input_1[18] * filter[18];
 801baf2:	edcd 7a57 	vstr	s15, [sp, #348]	; 0x15c
    tmp += input_1[19] * filter[19];
 801baf6:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[4] * filter[4];
 801bafa:	eeae 7a01 	vfma.f32	s14, s28, s2
    tmp += input_1[20] * filter[20];
 801bafe:	f8dd 4718 	ldr.w	r4, [sp, #1816]	; 0x718
    tmp += input_1[19] * filter[19];
 801bb02:	edcd 7a58 	vstr	s15, [sp, #352]	; 0x160
    tmp += input_1[20] * filter[20];
 801bb06:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[21] * filter[21];
 801bb0a:	f8dd 471c 	ldr.w	r4, [sp, #1820]	; 0x71c
    tmp += input_1[20] * filter[20];
 801bb0e:	edcd 7a59 	vstr	s15, [sp, #356]	; 0x164
    tmp += input_1[21] * filter[21];
 801bb12:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[22] * filter[22];
 801bb16:	f8dd 4720 	ldr.w	r4, [sp, #1824]	; 0x720
    tmp += input_1[21] * filter[21];
 801bb1a:	edcd 7a5a 	vstr	s15, [sp, #360]	; 0x168
    tmp += input_1[22] * filter[22];
 801bb1e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[4] * filter[4];
 801bb22:	f50d 6487 	add.w	r4, sp, #1080	; 0x438
    tmp += input_1[22] * filter[22];
 801bb26:	edcd 7a5b 	vstr	s15, [sp, #364]	; 0x16c
    tmp += input_1[4] * filter[4];
 801bb2a:	ed84 1a00 	vstr	s2, [r4]
    tmp += input_1[23] * filter[23];
 801bb2e:	f8dd 4724 	ldr.w	r4, [sp, #1828]	; 0x724
 801bb32:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[24] * filter[24];
 801bb36:	f8dd 4878 	ldr.w	r4, [sp, #2168]	; 0x878
    tmp += input_1[23] * filter[23];
 801bb3a:	edcd 7a5c 	vstr	s15, [sp, #368]	; 0x170
    tmp += input_1[24] * filter[24];
 801bb3e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[25] * filter[25];
 801bb42:	f8dd 4728 	ldr.w	r4, [sp, #1832]	; 0x728
    tmp += input_1[24] * filter[24];
 801bb46:	edcd 7a5d 	vstr	s15, [sp, #372]	; 0x174
    tmp += input_1[25] * filter[25];
 801bb4a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[26] * filter[26];
 801bb4e:	f8dd 472c 	ldr.w	r4, [sp, #1836]	; 0x72c
    tmp += input_1[25] * filter[25];
 801bb52:	edcd 7a5e 	vstr	s15, [sp, #376]	; 0x178
    tmp += input_1[26] * filter[26];
 801bb56:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[27] * filter[27];
 801bb5a:	f8dd 4730 	ldr.w	r4, [sp, #1840]	; 0x730
    tmp += input_1[26] * filter[26];
 801bb5e:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
    tmp += input_1[27] * filter[27];
 801bb62:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[28] * filter[28];
 801bb66:	f8dd 4734 	ldr.w	r4, [sp, #1844]	; 0x734
    tmp += input_1[27] * filter[27];
 801bb6a:	edcd 7a83 	vstr	s15, [sp, #524]	; 0x20c
    tmp += input_1[28] * filter[28];
 801bb6e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[29] * filter[29];
 801bb72:	f8dd 4738 	ldr.w	r4, [sp, #1848]	; 0x738
    tmp += input_1[28] * filter[28];
 801bb76:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
    tmp += input_1[5] * filter[5];
 801bb7a:	eddd 7a4b 	vldr	s15, [sp, #300]	; 0x12c
 801bb7e:	eead 7aa7 	vfma.f32	s14, s27, s15
    tmp += input_1[29] * filter[29];
 801bb82:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[30] * filter[30];
 801bb86:	f8dd 473c 	ldr.w	r4, [sp, #1852]	; 0x73c
    tmp += input_1[29] * filter[29];
 801bb8a:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
    tmp += input_1[30] * filter[30];
 801bb8e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[31] * filter[31];
 801bb92:	f8dd 4740 	ldr.w	r4, [sp, #1856]	; 0x740
    tmp += input_1[30] * filter[30];
 801bb96:	edcd 7a62 	vstr	s15, [sp, #392]	; 0x188
    tmp += input_1[31] * filter[31];
 801bb9a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[32] * filter[32];
 801bb9e:	f8dd 487c 	ldr.w	r4, [sp, #2172]	; 0x87c
    tmp += input_1[31] * filter[31];
 801bba2:	edcd 7a63 	vstr	s15, [sp, #396]	; 0x18c
    tmp += input_1[32] * filter[32];
 801bba6:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[33] * filter[33];
 801bbaa:	f8dd 4744 	ldr.w	r4, [sp, #1860]	; 0x744
    tmp += input_1[32] * filter[32];
 801bbae:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
    tmp += input_1[33] * filter[33];
 801bbb2:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[34] * filter[34];
 801bbb6:	f8dd 4748 	ldr.w	r4, [sp, #1864]	; 0x748
    tmp += input_1[33] * filter[33];
 801bbba:	edcd 7a65 	vstr	s15, [sp, #404]	; 0x194
    tmp += input_1[34] * filter[34];
 801bbbe:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[6] * filter[6];
 801bbc2:	ed9d 1a13 	vldr	s2, [sp, #76]	; 0x4c
    tmp += input_1[35] * filter[35];
 801bbc6:	f8dd 4880 	ldr.w	r4, [sp, #2176]	; 0x880
    tmp += input_1[34] * filter[34];
 801bbca:	edcd 7a66 	vstr	s15, [sp, #408]	; 0x198
    tmp += input_1[6] * filter[6];
 801bbce:	eddd 7a4c 	vldr	s15, [sp, #304]	; 0x130
 801bbd2:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[35] * filter[35];
 801bbd6:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[36] * filter[36];
 801bbda:	f8dd 4884 	ldr.w	r4, [sp, #2180]	; 0x884
    tmp += input_1[35] * filter[35];
 801bbde:	edcd 7a67 	vstr	s15, [sp, #412]	; 0x19c
    tmp += input_1[36] * filter[36];
 801bbe2:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[37] * filter[37];
 801bbe6:	f8dd 4888 	ldr.w	r4, [sp, #2184]	; 0x888
    tmp += input_1[36] * filter[36];
 801bbea:	edcd 7a68 	vstr	s15, [sp, #416]	; 0x1a0
    tmp += input_1[37] * filter[37];
 801bbee:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[38] * filter[38];
 801bbf2:	f8dd 488c 	ldr.w	r4, [sp, #2188]	; 0x88c
    tmp += input_1[37] * filter[37];
 801bbf6:	edcd 7a69 	vstr	s15, [sp, #420]	; 0x1a4
    tmp += input_1[38] * filter[38];
 801bbfa:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[39] * filter[39];
 801bbfe:	f8dd 4890 	ldr.w	r4, [sp, #2192]	; 0x890
    tmp += input_1[38] * filter[38];
 801bc02:	edcd 7a6a 	vstr	s15, [sp, #424]	; 0x1a8
    tmp += input_1[39] * filter[39];
 801bc06:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[40] * filter[40];
 801bc0a:	f8dd 4894 	ldr.w	r4, [sp, #2196]	; 0x894
    tmp += input_1[39] * filter[39];
 801bc0e:	edcd 7a6b 	vstr	s15, [sp, #428]	; 0x1ac
    tmp += input_1[40] * filter[40];
 801bc12:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[41] * filter[41];
 801bc16:	f8dd 474c 	ldr.w	r4, [sp, #1868]	; 0x74c
    tmp += input_1[40] * filter[40];
 801bc1a:	edcd 7a6c 	vstr	s15, [sp, #432]	; 0x1b0
    tmp += input_1[7] * filter[7];
 801bc1e:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 801bc22:	eeac 7aa7 	vfma.f32	s14, s25, s15
    tmp += input_1[41] * filter[41];
 801bc26:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[42] * filter[42];
 801bc2a:	f8dd 4750 	ldr.w	r4, [sp, #1872]	; 0x750
    tmp += input_1[41] * filter[41];
 801bc2e:	edcd 7a6d 	vstr	s15, [sp, #436]	; 0x1b4
    tmp += input_1[42] * filter[42];
 801bc32:	edd4 7a00 	vldr	s15, [r4]
 801bc36:	edcd 7a6e 	vstr	s15, [sp, #440]	; 0x1b8
    tmp += input_1[43] * filter[43];
 801bc3a:	f8dd 4754 	ldr.w	r4, [sp, #1876]	; 0x754
 801bc3e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[44] * filter[44];
 801bc42:	f8dd 4758 	ldr.w	r4, [sp, #1880]	; 0x758
    tmp += input_1[43] * filter[43];
 801bc46:	edcd 7a6f 	vstr	s15, [sp, #444]	; 0x1bc
    tmp += input_1[44] * filter[44];
 801bc4a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[45] * filter[45];
 801bc4e:	f8dd 475c 	ldr.w	r4, [sp, #1884]	; 0x75c
    tmp += input_1[44] * filter[44];
 801bc52:	edcd 7a70 	vstr	s15, [sp, #448]	; 0x1c0
    tmp += input_1[45] * filter[45];
 801bc56:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[46] * filter[46];
 801bc5a:	f8dd 4760 	ldr.w	r4, [sp, #1888]	; 0x760
    tmp += input_1[45] * filter[45];
 801bc5e:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
    tmp += input_1[46] * filter[46];
 801bc62:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[47] * filter[47];
 801bc66:	f8dd 4764 	ldr.w	r4, [sp, #1892]	; 0x764
    tmp += input_1[46] * filter[46];
 801bc6a:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
    tmp += input_1[8] * filter[8];
 801bc6e:	eddd 7a4e 	vldr	s15, [sp, #312]	; 0x138
 801bc72:	eeac 7a27 	vfma.f32	s14, s24, s15
    tmp += input_1[47] * filter[47];
 801bc76:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[48] * filter[48];
 801bc7a:	f8dd 4898 	ldr.w	r4, [sp, #2200]	; 0x898
    tmp += input_1[47] * filter[47];
 801bc7e:	edcd 7a73 	vstr	s15, [sp, #460]	; 0x1cc
    tmp += input_1[48] * filter[48];
 801bc82:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[49] * filter[49];
 801bc86:	f8dd 4768 	ldr.w	r4, [sp, #1896]	; 0x768
    tmp += input_1[48] * filter[48];
 801bc8a:	edcd 7a74 	vstr	s15, [sp, #464]	; 0x1d0
    tmp += input_1[49] * filter[49];
 801bc8e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[50] * filter[50];
 801bc92:	f8dd 476c 	ldr.w	r4, [sp, #1900]	; 0x76c
    tmp += input_1[49] * filter[49];
 801bc96:	edcd 7a75 	vstr	s15, [sp, #468]	; 0x1d4
    tmp += input_1[50] * filter[50];
 801bc9a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[51] * filter[51];
 801bc9e:	f8dd 4770 	ldr.w	r4, [sp, #1904]	; 0x770
    tmp += input_1[50] * filter[50];
 801bca2:	edcd 7a76 	vstr	s15, [sp, #472]	; 0x1d8
    tmp += input_1[51] * filter[51];
 801bca6:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[52] * filter[52];
 801bcaa:	f8dd 4774 	ldr.w	r4, [sp, #1908]	; 0x774
    tmp += input_1[51] * filter[51];
 801bcae:	edcd 7a77 	vstr	s15, [sp, #476]	; 0x1dc
    tmp += input_1[52] * filter[52];
 801bcb2:	edd4 7a00 	vldr	s15, [r4]
 801bcb6:	edcd 7a78 	vstr	s15, [sp, #480]	; 0x1e0
    tmp += input_1[9] * filter[9];
 801bcba:	eddd 7a4f 	vldr	s15, [sp, #316]	; 0x13c
    tmp += input_1[53] * filter[53];
 801bcbe:	f8dd 4778 	ldr.w	r4, [sp, #1912]	; 0x778
    tmp += input_1[9] * filter[9];
 801bcc2:	eeab 7aa7 	vfma.f32	s14, s23, s15
    tmp += input_1[53] * filter[53];
 801bcc6:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[54] * filter[54];
 801bcca:	f8dd 477c 	ldr.w	r4, [sp, #1916]	; 0x77c
    tmp += input_1[53] * filter[53];
 801bcce:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
    tmp += input_1[54] * filter[54];
 801bcd2:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[55] * filter[55];
 801bcd6:	f8dd 4780 	ldr.w	r4, [sp, #1920]	; 0x780
    tmp += input_1[54] * filter[54];
 801bcda:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
    tmp += input_1[10] * filter[10];
 801bcde:	eeab 7a0d 	vfma.f32	s14, s22, s26
    tmp += input_1[55] * filter[55];
 801bce2:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[56] * filter[56];
 801bce6:	f8dd 489c 	ldr.w	r4, [sp, #2204]	; 0x89c
    tmp += input_1[55] * filter[55];
 801bcea:	edcd 7a7b 	vstr	s15, [sp, #492]	; 0x1ec
    tmp += input_1[56] * filter[56];
 801bcee:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[57] * filter[57];
 801bcf2:	f8dd 4784 	ldr.w	r4, [sp, #1924]	; 0x784
    tmp += input_1[56] * filter[56];
 801bcf6:	edcd 7a7c 	vstr	s15, [sp, #496]	; 0x1f0
    tmp += input_1[57] * filter[57];
 801bcfa:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[58] * filter[58];
 801bcfe:	f8dd 4788 	ldr.w	r4, [sp, #1928]	; 0x788
    tmp += input_1[57] * filter[57];
 801bd02:	edcd 7a7d 	vstr	s15, [sp, #500]	; 0x1f4
    tmp += input_1[58] * filter[58];
 801bd06:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[10] * filter[10];
 801bd0a:	f20d 443c 	addw	r4, sp, #1084	; 0x43c
 801bd0e:	ed84 da00 	vstr	s26, [r4]
    tmp += input_1[59] * filter[59];
 801bd12:	f8dd 478c 	ldr.w	r4, [sp, #1932]	; 0x78c
    tmp += input_1[58] * filter[58];
 801bd16:	edcd 7a7e 	vstr	s15, [sp, #504]	; 0x1f8
    tmp += input_1[59] * filter[59];
 801bd1a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[60] * filter[60];
 801bd1e:	f8dd 4790 	ldr.w	r4, [sp, #1936]	; 0x790
    tmp += input_1[59] * filter[59];
 801bd22:	edcd 7a7f 	vstr	s15, [sp, #508]	; 0x1fc
    tmp += input_1[60] * filter[60];
 801bd26:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[61] * filter[61];
 801bd2a:	f8dd 4794 	ldr.w	r4, [sp, #1940]	; 0x794
    tmp += input_1[60] * filter[60];
 801bd2e:	edcd 7a80 	vstr	s15, [sp, #512]	; 0x200
    tmp += input_1[61] * filter[61];
 801bd32:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[62] * filter[62];
 801bd36:	f8dd 4798 	ldr.w	r4, [sp, #1944]	; 0x798
    tmp += input_1[61] * filter[61];
 801bd3a:	edcd 7a81 	vstr	s15, [sp, #516]	; 0x204
    tmp += input_1[62] * filter[62];
 801bd3e:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[63] * filter[63];
 801bd42:	f8dd 479c 	ldr.w	r4, [sp, #1948]	; 0x79c
    tmp += input_1[62] * filter[62];
 801bd46:	edcd 7a82 	vstr	s15, [sp, #520]	; 0x208
    tmp += input_1[63] * filter[63];
 801bd4a:	edd4 7a00 	vldr	s15, [r4]
    tmp += input_1[27] * filter[27];
 801bd4e:	f50d 6488 	add.w	r4, sp, #1088	; 0x440
    tmp += input_1[16] * filter[16];
 801bd52:	ed9d 1a06 	vldr	s2, [sp, #24]
    tmp += input_1[63] * filter[63];
 801bd56:	eeb0 da67 	vmov.f32	s26, s15
    tmp += input_1[11] * filter[11];
 801bd5a:	eddd 7a50 	vldr	s15, [sp, #320]	; 0x140
 801bd5e:	eeaa 7aa7 	vfma.f32	s14, s21, s15
    tmp += input_1[12] * filter[12];
 801bd62:	eddd 7a51 	vldr	s15, [sp, #324]	; 0x144
 801bd66:	eeaa 7a27 	vfma.f32	s14, s20, s15
    tmp += input_1[13] * filter[13];
 801bd6a:	eddd 7a52 	vldr	s15, [sp, #328]	; 0x148
 801bd6e:	eea9 7aa7 	vfma.f32	s14, s19, s15
    tmp += input_1[14] * filter[14];
 801bd72:	eddd 7a53 	vldr	s15, [sp, #332]	; 0x14c
 801bd76:	eea0 7a27 	vfma.f32	s14, s0, s15
    tmp += input_1[15] * filter[15];
 801bd7a:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 801bd7e:	eea0 7aa7 	vfma.f32	s14, s1, s15
    tmp += input_1[16] * filter[16];
 801bd82:	eddd 7a55 	vldr	s15, [sp, #340]	; 0x154
 801bd86:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[17] * filter[17];
 801bd8a:	eddd 7a56 	vldr	s15, [sp, #344]	; 0x158
 801bd8e:	ed9d 1a07 	vldr	s2, [sp, #28]
 801bd92:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[18] * filter[18];
 801bd96:	eddd 7a57 	vldr	s15, [sp, #348]	; 0x15c
    tmp += input_1[28] * filter[28];
 801bd9a:	ed9a 1a1c 	vldr	s2, [sl, #112]	; 0x70
    tmp += input_1[18] * filter[18];
 801bd9e:	eea2 7a27 	vfma.f32	s14, s4, s15
    tmp += input_1[19] * filter[19];
 801bda2:	eddd 7a58 	vldr	s15, [sp, #352]	; 0x160
 801bda6:	eea2 7aa7 	vfma.f32	s14, s5, s15
    tmp += input_1[20] * filter[20];
 801bdaa:	eddd 7a59 	vldr	s15, [sp, #356]	; 0x164
 801bdae:	eea3 7a27 	vfma.f32	s14, s6, s15
    tmp += input_1[21] * filter[21];
 801bdb2:	eddd 7a5a 	vldr	s15, [sp, #360]	; 0x168
 801bdb6:	eea3 7aa7 	vfma.f32	s14, s7, s15
    tmp += input_1[22] * filter[22];
 801bdba:	eddd 7a5b 	vldr	s15, [sp, #364]	; 0x16c
 801bdbe:	eea4 7a27 	vfma.f32	s14, s8, s15
    tmp += input_1[23] * filter[23];
 801bdc2:	eddd 7a5c 	vldr	s15, [sp, #368]	; 0x170
 801bdc6:	eea4 7aa7 	vfma.f32	s14, s9, s15
    tmp += input_1[24] * filter[24];
 801bdca:	eddd 7a5d 	vldr	s15, [sp, #372]	; 0x174
 801bdce:	eea5 7a27 	vfma.f32	s14, s10, s15
    tmp += input_1[25] * filter[25];
 801bdd2:	eddd 7a5e 	vldr	s15, [sp, #376]	; 0x178
 801bdd6:	eea5 7aa7 	vfma.f32	s14, s11, s15
    tmp += input_1[26] * filter[26];
 801bdda:	eddd 7a5f 	vldr	s15, [sp, #380]	; 0x17c
 801bdde:	eea6 7a27 	vfma.f32	s14, s12, s15
    tmp += input_1[27] * filter[27];
 801bde2:	eddd 7a83 	vldr	s15, [sp, #524]	; 0x20c
 801bde6:	edc4 7a00 	vstr	s15, [r4]
    tmp += input_1[63] * filter[63];
 801bdea:	f20d 4444 	addw	r4, sp, #1092	; 0x444
    tmp += input_1[27] * filter[27];
 801bdee:	eea6 7aa7 	vfma.f32	s14, s13, s15
    tmp += input_1[28] * filter[28];
 801bdf2:	eddd 7a60 	vldr	s15, [sp, #384]	; 0x180
 801bdf6:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[29] * filter[29];
 801bdfa:	ed9a 1a1d 	vldr	s2, [sl, #116]	; 0x74
 801bdfe:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 801be02:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[30] * filter[30];
 801be06:	ed9a 1a1e 	vldr	s2, [sl, #120]	; 0x78
 801be0a:	eddd 7a62 	vldr	s15, [sp, #392]	; 0x188
 801be0e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[31] * filter[31];
 801be12:	ed9a 1a1f 	vldr	s2, [sl, #124]	; 0x7c
 801be16:	eddd 7a63 	vldr	s15, [sp, #396]	; 0x18c
 801be1a:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[32] * filter[32];
 801be1e:	ed9a 1a20 	vldr	s2, [sl, #128]	; 0x80
 801be22:	eddd 7a64 	vldr	s15, [sp, #400]	; 0x190
 801be26:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[33] * filter[33];
 801be2a:	ed9a 1a21 	vldr	s2, [sl, #132]	; 0x84
 801be2e:	eddd 7a65 	vldr	s15, [sp, #404]	; 0x194
 801be32:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[34] * filter[34];
 801be36:	ed9a 1a22 	vldr	s2, [sl, #136]	; 0x88
 801be3a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 801be3e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[35] * filter[35];
 801be42:	ed9a 1a23 	vldr	s2, [sl, #140]	; 0x8c
 801be46:	eddd 7a67 	vldr	s15, [sp, #412]	; 0x19c
 801be4a:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[36] * filter[36];
 801be4e:	ed9a 1a24 	vldr	s2, [sl, #144]	; 0x90
 801be52:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 801be56:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[37] * filter[37];
 801be5a:	ed9a 1a25 	vldr	s2, [sl, #148]	; 0x94
 801be5e:	eddd 7a69 	vldr	s15, [sp, #420]	; 0x1a4
 801be62:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[38] * filter[38];
 801be66:	ed9a 1a26 	vldr	s2, [sl, #152]	; 0x98
 801be6a:	eddd 7a6a 	vldr	s15, [sp, #424]	; 0x1a8
 801be6e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[39] * filter[39];
 801be72:	ed9a 1a27 	vldr	s2, [sl, #156]	; 0x9c
 801be76:	eddd 7a6b 	vldr	s15, [sp, #428]	; 0x1ac
 801be7a:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[40] * filter[40];
 801be7e:	ed9a 1a28 	vldr	s2, [sl, #160]	; 0xa0
 801be82:	eddd 7a6c 	vldr	s15, [sp, #432]	; 0x1b0
 801be86:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[41] * filter[41];
 801be8a:	ed9a 1a29 	vldr	s2, [sl, #164]	; 0xa4
 801be8e:	eddd 7a6d 	vldr	s15, [sp, #436]	; 0x1b4
 801be92:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[42] * filter[42];
 801be96:	ed9a 1a2a 	vldr	s2, [sl, #168]	; 0xa8
 801be9a:	eddd 7a6e 	vldr	s15, [sp, #440]	; 0x1b8
 801be9e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[43] * filter[43];
 801bea2:	ed9a 1a2b 	vldr	s2, [sl, #172]	; 0xac
 801bea6:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 801beaa:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[44] * filter[44];
 801beae:	ed9a 1a2c 	vldr	s2, [sl, #176]	; 0xb0
 801beb2:	eddd 7a70 	vldr	s15, [sp, #448]	; 0x1c0
 801beb6:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[45] * filter[45];
 801beba:	ed9a 1a2d 	vldr	s2, [sl, #180]	; 0xb4
 801bebe:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 801bec2:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[46] * filter[46];
 801bec6:	ed9a 1a2e 	vldr	s2, [sl, #184]	; 0xb8
 801beca:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 801bece:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[47] * filter[47];
 801bed2:	ed9a 1a2f 	vldr	s2, [sl, #188]	; 0xbc
 801bed6:	eddd 7a73 	vldr	s15, [sp, #460]	; 0x1cc
 801beda:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[48] * filter[48];
 801bede:	ed9a 1a30 	vldr	s2, [sl, #192]	; 0xc0
 801bee2:	eddd 7a74 	vldr	s15, [sp, #464]	; 0x1d0
 801bee6:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[49] * filter[49];
 801beea:	ed9a 1a31 	vldr	s2, [sl, #196]	; 0xc4
 801beee:	eddd 7a75 	vldr	s15, [sp, #468]	; 0x1d4
    tmp += input_1[63] * filter[63];
 801bef2:	ed84 da00 	vstr	s26, [r4]
    *sum_1 += tmp;
 801bef6:	f50d 6415 	add.w	r4, sp, #2384	; 0x950
    tmp += input_1[49] * filter[49];
 801befa:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[50] * filter[50];
 801befe:	ed9a 1a32 	vldr	s2, [sl, #200]	; 0xc8
 801bf02:	eddd 7a76 	vldr	s15, [sp, #472]	; 0x1d8
 801bf06:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[51] * filter[51];
 801bf0a:	ed9a 1a33 	vldr	s2, [sl, #204]	; 0xcc
 801bf0e:	eddd 7a77 	vldr	s15, [sp, #476]	; 0x1dc
 801bf12:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[52] * filter[52];
 801bf16:	ed9a 1a34 	vldr	s2, [sl, #208]	; 0xd0
 801bf1a:	eddd 7a78 	vldr	s15, [sp, #480]	; 0x1e0
 801bf1e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[53] * filter[53];
 801bf22:	ed9a 1a35 	vldr	s2, [sl, #212]	; 0xd4
 801bf26:	eddd 7a79 	vldr	s15, [sp, #484]	; 0x1e4
 801bf2a:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[54] * filter[54];
 801bf2e:	ed9a 1a36 	vldr	s2, [sl, #216]	; 0xd8
 801bf32:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 801bf36:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[55] * filter[55];
 801bf3a:	ed9a 1a37 	vldr	s2, [sl, #220]	; 0xdc
 801bf3e:	eddd 7a7b 	vldr	s15, [sp, #492]	; 0x1ec
 801bf42:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[56] * filter[56];
 801bf46:	ed9a 1a38 	vldr	s2, [sl, #224]	; 0xe0
 801bf4a:	eddd 7a7c 	vldr	s15, [sp, #496]	; 0x1f0
 801bf4e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[57] * filter[57];
 801bf52:	ed9a 1a39 	vldr	s2, [sl, #228]	; 0xe4
 801bf56:	eddd 7a7d 	vldr	s15, [sp, #500]	; 0x1f4
 801bf5a:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[58] * filter[58];
 801bf5e:	ed9a 1a3a 	vldr	s2, [sl, #232]	; 0xe8
 801bf62:	eddd 7a7e 	vldr	s15, [sp, #504]	; 0x1f8
 801bf66:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[59] * filter[59];
 801bf6a:	ed9a 1a3b 	vldr	s2, [sl, #236]	; 0xec
 801bf6e:	eddd 7a7f 	vldr	s15, [sp, #508]	; 0x1fc
 801bf72:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[60] * filter[60];
 801bf76:	ed9a 1a3c 	vldr	s2, [sl, #240]	; 0xf0
 801bf7a:	eddd 7a80 	vldr	s15, [sp, #512]	; 0x200
 801bf7e:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[61] * filter[61];
 801bf82:	ed9a 1a3d 	vldr	s2, [sl, #244]	; 0xf4
 801bf86:	eddd 7a81 	vldr	s15, [sp, #516]	; 0x204
 801bf8a:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[62] * filter[62];
 801bf8e:	ed9a 1a3e 	vldr	s2, [sl, #248]	; 0xf8
 801bf92:	eddd 7a82 	vldr	s15, [sp, #520]	; 0x208
 801bf96:	eea1 7a27 	vfma.f32	s14, s2, s15
    tmp += input_1[63] * filter[63];
 801bf9a:	ed9a 1a3f 	vldr	s2, [sl, #252]	; 0xfc
 801bf9e:	eea1 7a0d 	vfma.f32	s14, s2, s26
    *sum_1 += tmp;
 801bfa2:	ed84 7a00 	vstr	s14, [r4]
    tmp += input_2[1] * filter[1];
 801bfa6:	f8dd 47a0 	ldr.w	r4, [sp, #1952]	; 0x7a0
 801bfaa:	ed94 7a00 	vldr	s14, [r4]
 801bfae:	f20d 444c 	addw	r4, sp, #1100	; 0x44c
    tmp += input_2[0] * filter[0];
 801bfb2:	f8dd 68a0 	ldr.w	r6, [sp, #2208]	; 0x8a0
    tmp += input_2[1] * filter[1];
 801bfb6:	ed84 7a00 	vstr	s14, [r4]
    tmp += input_2[2] * filter[2];
 801bfba:	f8dd 47a4 	ldr.w	r4, [sp, #1956]	; 0x7a4
    tmp += input_2[0] * filter[0];
 801bfbe:	edd6 7a00 	vldr	s15, [r6]
    tmp += input_2[2] * filter[2];
 801bfc2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[3] * filter[3];
 801bfc6:	f8dd 4470 	ldr.w	r4, [sp, #1136]	; 0x470
    tmp += input_2[2] * filter[2];
 801bfca:	ed8d 1a83 	vstr	s2, [sp, #524]	; 0x20c
    tmp += input_2[3] * filter[3];
 801bfce:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[4] * filter[4];
 801bfd2:	f8dd 4474 	ldr.w	r4, [sp, #1140]	; 0x474
    tmp += input_2[3] * filter[3];
 801bfd6:	ed8d 1a84 	vstr	s2, [sp, #528]	; 0x210
    tmp += input_2[4] * filter[4];
 801bfda:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[1] * filter[1];
 801bfde:	f50d 6489 	add.w	r4, sp, #1096	; 0x448
 801bfe2:	ed9d da12 	vldr	s26, [sp, #72]	; 0x48
 801bfe6:	edc4 7a00 	vstr	s15, [r4]
    tmp += input_2[5] * filter[5];
 801bfea:	f8dd 4478 	ldr.w	r4, [sp, #1144]	; 0x478
    tmp += input_2[1] * filter[1];
 801bfee:	ee2d 7a07 	vmul.f32	s14, s26, s14
    tmp += input_2[4] * filter[4];
 801bff2:	eeb0 da41 	vmov.f32	s26, s2
    tmp += input_2[5] * filter[5];
 801bff6:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[6] * filter[6];
 801bffa:	f8dd 447c 	ldr.w	r4, [sp, #1148]	; 0x47c
    tmp += input_2[1] * filter[1];
 801bffe:	eeaf 7aa7 	vfma.f32	s14, s31, s15
    tmp += input_2[5] * filter[5];
 801c002:	eef0 7a41 	vmov.f32	s15, s2
    tmp += input_2[6] * filter[6];
 801c006:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[7] * filter[7];
 801c00a:	f8dd 4480 	ldr.w	r4, [sp, #1152]	; 0x480
    tmp += input_2[6] * filter[6];
 801c00e:	ed8d 1a85 	vstr	s2, [sp, #532]	; 0x214
    tmp += input_2[7] * filter[7];
 801c012:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[8] * filter[8];
 801c016:	f8dd 47e4 	ldr.w	r4, [sp, #2020]	; 0x7e4
    tmp += input_2[7] * filter[7];
 801c01a:	ed8d 1a86 	vstr	s2, [sp, #536]	; 0x218
    tmp += input_2[8] * filter[8];
 801c01e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[9] * filter[9];
 801c022:	f8dd 4484 	ldr.w	r4, [sp, #1156]	; 0x484
    tmp += input_2[8] * filter[8];
 801c026:	ed8d 1a87 	vstr	s2, [sp, #540]	; 0x21c
    tmp += input_2[9] * filter[9];
 801c02a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[10] * filter[10];
 801c02e:	f8dd 4488 	ldr.w	r4, [sp, #1160]	; 0x488
    tmp += input_2[9] * filter[9];
 801c032:	ed8d 1a88 	vstr	s2, [sp, #544]	; 0x220
    tmp += input_2[10] * filter[10];
 801c036:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[11] * filter[11];
 801c03a:	f8dd 448c 	ldr.w	r4, [sp, #1164]	; 0x48c
    tmp += input_2[10] * filter[10];
 801c03e:	ed8d 1a89 	vstr	s2, [sp, #548]	; 0x224
    tmp += input_2[2] * filter[2];
 801c042:	ed9d 1a83 	vldr	s2, [sp, #524]	; 0x20c
 801c046:	eeaf 7a01 	vfma.f32	s14, s30, s2
    tmp += input_2[11] * filter[11];
 801c04a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[12] * filter[12];
 801c04e:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
    tmp += input_2[11] * filter[11];
 801c052:	ed8d 1a8a 	vstr	s2, [sp, #552]	; 0x228
    tmp += input_2[12] * filter[12];
 801c056:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[13] * filter[13];
 801c05a:	f8dd 4494 	ldr.w	r4, [sp, #1172]	; 0x494
    tmp += input_2[12] * filter[12];
 801c05e:	ed8d 1a8b 	vstr	s2, [sp, #556]	; 0x22c
    tmp += input_2[13] * filter[13];
 801c062:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[14] * filter[14];
 801c066:	f8dd 4498 	ldr.w	r4, [sp, #1176]	; 0x498
    tmp += input_2[13] * filter[13];
 801c06a:	ed8d 1a8c 	vstr	s2, [sp, #560]	; 0x230
    tmp += input_2[14] * filter[14];
 801c06e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[15] * filter[15];
 801c072:	f8dd 449c 	ldr.w	r4, [sp, #1180]	; 0x49c
    tmp += input_2[14] * filter[14];
 801c076:	ed8d 1a8d 	vstr	s2, [sp, #564]	; 0x234
    tmp += input_2[15] * filter[15];
 801c07a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[16] * filter[16];
 801c07e:	f8dd 47e8 	ldr.w	r4, [sp, #2024]	; 0x7e8
    tmp += input_2[15] * filter[15];
 801c082:	ed8d 1a8e 	vstr	s2, [sp, #568]	; 0x238
    tmp += input_2[16] * filter[16];
 801c086:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[17] * filter[17];
 801c08a:	f8dd 44a0 	ldr.w	r4, [sp, #1184]	; 0x4a0
    tmp += input_2[16] * filter[16];
 801c08e:	ed8d 1a8f 	vstr	s2, [sp, #572]	; 0x23c
    tmp += input_2[3] * filter[3];
 801c092:	ed9d 1a84 	vldr	s2, [sp, #528]	; 0x210
 801c096:	eeae 7a81 	vfma.f32	s14, s29, s2
    tmp += input_2[17] * filter[17];
 801c09a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[18] * filter[18];
 801c09e:	f8dd 44a4 	ldr.w	r4, [sp, #1188]	; 0x4a4
    tmp += input_2[17] * filter[17];
 801c0a2:	ed8d 1a90 	vstr	s2, [sp, #576]	; 0x240
    tmp += input_2[18] * filter[18];
 801c0a6:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[19] * filter[19];
 801c0aa:	f8dd 44a8 	ldr.w	r4, [sp, #1192]	; 0x4a8
    tmp += input_2[18] * filter[18];
 801c0ae:	ed8d 1a91 	vstr	s2, [sp, #580]	; 0x244
    tmp += input_2[19] * filter[19];
 801c0b2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[4] * filter[4];
 801c0b6:	eeae 7a0d 	vfma.f32	s14, s28, s26
    tmp += input_2[20] * filter[20];
 801c0ba:	f8dd 44ac 	ldr.w	r4, [sp, #1196]	; 0x4ac
    tmp += input_2[19] * filter[19];
 801c0be:	ed8d 1a92 	vstr	s2, [sp, #584]	; 0x248
    tmp += input_2[20] * filter[20];
 801c0c2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[21] * filter[21];
 801c0c6:	f8dd 44b0 	ldr.w	r4, [sp, #1200]	; 0x4b0
    tmp += input_2[20] * filter[20];
 801c0ca:	ed8d 1a93 	vstr	s2, [sp, #588]	; 0x24c
    tmp += input_2[21] * filter[21];
 801c0ce:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[5] * filter[5];
 801c0d2:	eead 7aa7 	vfma.f32	s14, s27, s15
    tmp += input_2[21] * filter[21];
 801c0d6:	ed8d 1a94 	vstr	s2, [sp, #592]	; 0x250
    tmp += input_2[22] * filter[22];
 801c0da:	f8dd 44b4 	ldr.w	r4, [sp, #1204]	; 0x4b4
 801c0de:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[4] * filter[4];
 801c0e2:	f50d 648a 	add.w	r4, sp, #1104	; 0x450
 801c0e6:	ed84 da00 	vstr	s26, [r4]
    tmp += input_2[23] * filter[23];
 801c0ea:	f8dd 47ec 	ldr.w	r4, [sp, #2028]	; 0x7ec
    tmp += input_2[22] * filter[22];
 801c0ee:	ed8d 1a95 	vstr	s2, [sp, #596]	; 0x254
    tmp += input_2[23] * filter[23];
 801c0f2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[24] * filter[24];
 801c0f6:	f8dd 47f0 	ldr.w	r4, [sp, #2032]	; 0x7f0
    tmp += input_2[23] * filter[23];
 801c0fa:	ed8d 1a96 	vstr	s2, [sp, #600]	; 0x258
    tmp += input_2[24] * filter[24];
 801c0fe:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[25] * filter[25];
 801c102:	f8dd 47f4 	ldr.w	r4, [sp, #2036]	; 0x7f4
    tmp += input_2[24] * filter[24];
 801c106:	ed8d 1a97 	vstr	s2, [sp, #604]	; 0x25c
    tmp += input_2[25] * filter[25];
 801c10a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[26] * filter[26];
 801c10e:	f8dd 47f8 	ldr.w	r4, [sp, #2040]	; 0x7f8
    tmp += input_2[25] * filter[25];
 801c112:	ed8d 1a98 	vstr	s2, [sp, #608]	; 0x260
    tmp += input_2[26] * filter[26];
 801c116:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[27] * filter[27];
 801c11a:	f8dd 47fc 	ldr.w	r4, [sp, #2044]	; 0x7fc
    tmp += input_2[26] * filter[26];
 801c11e:	ed8d 1a99 	vstr	s2, [sp, #612]	; 0x264
    tmp += input_2[27] * filter[27];
 801c122:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[28] * filter[28];
 801c126:	f8dd 4800 	ldr.w	r4, [sp, #2048]	; 0x800
    tmp += input_2[27] * filter[27];
 801c12a:	eeb0 da41 	vmov.f32	s26, s2
    tmp += input_2[28] * filter[28];
 801c12e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[5] * filter[5];
 801c132:	f20d 4454 	addw	r4, sp, #1108	; 0x454
 801c136:	edc4 7a00 	vstr	s15, [r4]
    tmp += input_2[29] * filter[29];
 801c13a:	f8dd 4804 	ldr.w	r4, [sp, #2052]	; 0x804
    tmp += input_2[28] * filter[28];
 801c13e:	ed8d 1a9a 	vstr	s2, [sp, #616]	; 0x268
    tmp += input_2[29] * filter[29];
 801c142:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[30] * filter[30];
 801c146:	f8dd 44b8 	ldr.w	r4, [sp, #1208]	; 0x4b8
    tmp += input_2[29] * filter[29];
 801c14a:	ed8d 1abd 	vstr	s2, [sp, #756]	; 0x2f4
    tmp += input_2[30] * filter[30];
 801c14e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[31] * filter[31];
 801c152:	f8dd 44bc 	ldr.w	r4, [sp, #1212]	; 0x4bc
    tmp += input_2[30] * filter[30];
 801c156:	ed8d 1a9b 	vstr	s2, [sp, #620]	; 0x26c
    tmp += input_2[31] * filter[31];
 801c15a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[32] * filter[32];
 801c15e:	f8dd 4808 	ldr.w	r4, [sp, #2056]	; 0x808
    tmp += input_2[31] * filter[31];
 801c162:	ed8d 1a9c 	vstr	s2, [sp, #624]	; 0x270
    tmp += input_2[32] * filter[32];
 801c166:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[33] * filter[33];
 801c16a:	f8dd 44c0 	ldr.w	r4, [sp, #1216]	; 0x4c0
    tmp += input_2[32] * filter[32];
 801c16e:	ed8d 1a9d 	vstr	s2, [sp, #628]	; 0x274
    tmp += input_2[33] * filter[33];
 801c172:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[34] * filter[34];
 801c176:	f8dd 44c4 	ldr.w	r4, [sp, #1220]	; 0x4c4
    tmp += input_2[33] * filter[33];
 801c17a:	ed8d 1a9e 	vstr	s2, [sp, #632]	; 0x278
    tmp += input_2[34] * filter[34];
 801c17e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[6] * filter[6];
 801c182:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
    tmp += input_2[35] * filter[35];
 801c186:	f8dd 44c8 	ldr.w	r4, [sp, #1224]	; 0x4c8
    tmp += input_2[34] * filter[34];
 801c18a:	ed8d 1a9f 	vstr	s2, [sp, #636]	; 0x27c
    tmp += input_2[6] * filter[6];
 801c18e:	ed9d 1a85 	vldr	s2, [sp, #532]	; 0x214
 801c192:	eea7 7a81 	vfma.f32	s14, s15, s2
    tmp += input_2[35] * filter[35];
 801c196:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[36] * filter[36];
 801c19a:	f8dd 44cc 	ldr.w	r4, [sp, #1228]	; 0x4cc
    tmp += input_2[35] * filter[35];
 801c19e:	ed8d 1aa0 	vstr	s2, [sp, #640]	; 0x280
    tmp += input_2[36] * filter[36];
 801c1a2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[37] * filter[37];
 801c1a6:	f8dd 44d0 	ldr.w	r4, [sp, #1232]	; 0x4d0
    tmp += input_2[36] * filter[36];
 801c1aa:	ed8d 1aa1 	vstr	s2, [sp, #644]	; 0x284
    tmp += input_2[37] * filter[37];
 801c1ae:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[38] * filter[38];
 801c1b2:	f8dd 44d4 	ldr.w	r4, [sp, #1236]	; 0x4d4
    tmp += input_2[37] * filter[37];
 801c1b6:	ed8d 1aa2 	vstr	s2, [sp, #648]	; 0x288
    tmp += input_2[38] * filter[38];
 801c1ba:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[39] * filter[39];
 801c1be:	f8dd 44d8 	ldr.w	r4, [sp, #1240]	; 0x4d8
    tmp += input_2[38] * filter[38];
 801c1c2:	ed8d 1aa3 	vstr	s2, [sp, #652]	; 0x28c
    tmp += input_2[39] * filter[39];
 801c1c6:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[40] * filter[40];
 801c1ca:	f8dd 480c 	ldr.w	r4, [sp, #2060]	; 0x80c
    tmp += input_2[39] * filter[39];
 801c1ce:	ed8d 1aa4 	vstr	s2, [sp, #656]	; 0x290
    tmp += input_2[40] * filter[40];
 801c1d2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[41] * filter[41];
 801c1d6:	f8dd 44dc 	ldr.w	r4, [sp, #1244]	; 0x4dc
    tmp += input_2[40] * filter[40];
 801c1da:	ed8d 1aa5 	vstr	s2, [sp, #660]	; 0x294
    tmp += input_2[7] * filter[7];
 801c1de:	ed9d 1a86 	vldr	s2, [sp, #536]	; 0x218
 801c1e2:	eeac 7a81 	vfma.f32	s14, s25, s2
    tmp += input_2[41] * filter[41];
 801c1e6:	ed94 1a00 	vldr	s2, [r4]
 801c1ea:	ed8d 1aa6 	vstr	s2, [sp, #664]	; 0x298
    tmp += input_2[42] * filter[42];
 801c1ee:	f8dd 44e0 	ldr.w	r4, [sp, #1248]	; 0x4e0
 801c1f2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[43] * filter[43];
 801c1f6:	f8dd 44e4 	ldr.w	r4, [sp, #1252]	; 0x4e4
    tmp += input_2[42] * filter[42];
 801c1fa:	ed8d 1aa7 	vstr	s2, [sp, #668]	; 0x29c
    tmp += input_2[43] * filter[43];
 801c1fe:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[44] * filter[44];
 801c202:	f8dd 44e8 	ldr.w	r4, [sp, #1256]	; 0x4e8
    tmp += input_2[43] * filter[43];
 801c206:	ed8d 1aa8 	vstr	s2, [sp, #672]	; 0x2a0
    tmp += input_2[44] * filter[44];
 801c20a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[45] * filter[45];
 801c20e:	f8dd 44ec 	ldr.w	r4, [sp, #1260]	; 0x4ec
    tmp += input_2[44] * filter[44];
 801c212:	ed8d 1aa9 	vstr	s2, [sp, #676]	; 0x2a4
    tmp += input_2[45] * filter[45];
 801c216:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[46] * filter[46];
 801c21a:	f8dd 44f0 	ldr.w	r4, [sp, #1264]	; 0x4f0
    tmp += input_2[45] * filter[45];
 801c21e:	ed8d 1aaa 	vstr	s2, [sp, #680]	; 0x2a8
    tmp += input_2[46] * filter[46];
 801c222:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[47] * filter[47];
 801c226:	f8dd 44f4 	ldr.w	r4, [sp, #1268]	; 0x4f4
    tmp += input_2[46] * filter[46];
 801c22a:	ed8d 1aab 	vstr	s2, [sp, #684]	; 0x2ac
    tmp += input_2[8] * filter[8];
 801c22e:	ed9d 1a87 	vldr	s2, [sp, #540]	; 0x21c
 801c232:	eeac 7a01 	vfma.f32	s14, s24, s2
    tmp += input_2[47] * filter[47];
 801c236:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[48] * filter[48];
 801c23a:	f8dd 4810 	ldr.w	r4, [sp, #2064]	; 0x810
    tmp += input_2[47] * filter[47];
 801c23e:	ed8d 1aac 	vstr	s2, [sp, #688]	; 0x2b0
    tmp += input_2[48] * filter[48];
 801c242:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[49] * filter[49];
 801c246:	f8dd 44f8 	ldr.w	r4, [sp, #1272]	; 0x4f8
    tmp += input_2[48] * filter[48];
 801c24a:	ed8d 1aad 	vstr	s2, [sp, #692]	; 0x2b4
    tmp += input_2[49] * filter[49];
 801c24e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[50] * filter[50];
 801c252:	f8dd 44fc 	ldr.w	r4, [sp, #1276]	; 0x4fc
    tmp += input_2[49] * filter[49];
 801c256:	ed8d 1aae 	vstr	s2, [sp, #696]	; 0x2b8
    tmp += input_2[50] * filter[50];
 801c25a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[51] * filter[51];
 801c25e:	f8dd 4500 	ldr.w	r4, [sp, #1280]	; 0x500
    tmp += input_2[50] * filter[50];
 801c262:	ed8d 1aaf 	vstr	s2, [sp, #700]	; 0x2bc
    tmp += input_2[51] * filter[51];
 801c266:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[52] * filter[52];
 801c26a:	f8dd 4504 	ldr.w	r4, [sp, #1284]	; 0x504
    tmp += input_2[51] * filter[51];
 801c26e:	ed8d 1ab0 	vstr	s2, [sp, #704]	; 0x2c0
    tmp += input_2[52] * filter[52];
 801c272:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[53] * filter[53];
 801c276:	f8dd 4508 	ldr.w	r4, [sp, #1288]	; 0x508
    tmp += input_2[52] * filter[52];
 801c27a:	ed8d 1ab1 	vstr	s2, [sp, #708]	; 0x2c4
    tmp += input_2[9] * filter[9];
 801c27e:	ed9d 1a88 	vldr	s2, [sp, #544]	; 0x220
 801c282:	eeab 7a81 	vfma.f32	s14, s23, s2
    tmp += input_2[53] * filter[53];
 801c286:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[54] * filter[54];
 801c28a:	f8dd 450c 	ldr.w	r4, [sp, #1292]	; 0x50c
    tmp += input_2[53] * filter[53];
 801c28e:	ed8d 1ab2 	vstr	s2, [sp, #712]	; 0x2c8
    tmp += input_2[54] * filter[54];
 801c292:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[55] * filter[55];
 801c296:	f8dd 4510 	ldr.w	r4, [sp, #1296]	; 0x510
    tmp += input_2[54] * filter[54];
 801c29a:	ed8d 1ab3 	vstr	s2, [sp, #716]	; 0x2cc
    tmp += input_2[55] * filter[55];
 801c29e:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[56] * filter[56];
 801c2a2:	f8dd 4814 	ldr.w	r4, [sp, #2068]	; 0x814
    tmp += input_2[55] * filter[55];
 801c2a6:	ed8d 1ab4 	vstr	s2, [sp, #720]	; 0x2d0
    tmp += input_2[56] * filter[56];
 801c2aa:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[57] * filter[57];
 801c2ae:	f8dd 4514 	ldr.w	r4, [sp, #1300]	; 0x514
    tmp += input_2[56] * filter[56];
 801c2b2:	ed8d 1ab5 	vstr	s2, [sp, #724]	; 0x2d4
    tmp += input_2[57] * filter[57];
 801c2b6:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[58] * filter[58];
 801c2ba:	f8dd 4518 	ldr.w	r4, [sp, #1304]	; 0x518
    tmp += input_2[57] * filter[57];
 801c2be:	ed8d 1ab6 	vstr	s2, [sp, #728]	; 0x2d8
    tmp += input_2[58] * filter[58];
 801c2c2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[59] * filter[59];
 801c2c6:	f8dd 451c 	ldr.w	r4, [sp, #1308]	; 0x51c
    tmp += input_2[58] * filter[58];
 801c2ca:	ed8d 1ab7 	vstr	s2, [sp, #732]	; 0x2dc
    tmp += input_2[10] * filter[10];
 801c2ce:	ed9d 1a89 	vldr	s2, [sp, #548]	; 0x224
 801c2d2:	eeab 7a01 	vfma.f32	s14, s22, s2
    tmp += input_2[59] * filter[59];
 801c2d6:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[60] * filter[60];
 801c2da:	f8dd 4520 	ldr.w	r4, [sp, #1312]	; 0x520
    tmp += input_2[59] * filter[59];
 801c2de:	ed8d 1ab8 	vstr	s2, [sp, #736]	; 0x2e0
    tmp += input_2[60] * filter[60];
 801c2e2:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[61] * filter[61];
 801c2e6:	f8dd 4524 	ldr.w	r4, [sp, #1316]	; 0x524
    tmp += input_2[60] * filter[60];
 801c2ea:	ed8d 1ab9 	vstr	s2, [sp, #740]	; 0x2e4
    tmp += input_2[61] * filter[61];
 801c2ee:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[62] * filter[62];
 801c2f2:	f8dd 4528 	ldr.w	r4, [sp, #1320]	; 0x528
    tmp += input_2[61] * filter[61];
 801c2f6:	ed8d 1aba 	vstr	s2, [sp, #744]	; 0x2e8
    tmp += input_2[62] * filter[62];
 801c2fa:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[63] * filter[63];
 801c2fe:	f8dd 452c 	ldr.w	r4, [sp, #1324]	; 0x52c
    tmp += input_2[62] * filter[62];
 801c302:	ed8d 1abb 	vstr	s2, [sp, #748]	; 0x2ec
    tmp += input_2[63] * filter[63];
 801c306:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_2[27] * filter[27];
 801c30a:	f50d 648b 	add.w	r4, sp, #1112	; 0x458
    tmp += input_2[16] * filter[16];
 801c30e:	eddd 7a06 	vldr	s15, [sp, #24]
    tmp += input_2[63] * filter[63];
 801c312:	ed8d 1abc 	vstr	s2, [sp, #752]	; 0x2f0
    tmp += input_2[11] * filter[11];
 801c316:	ed9d 1a8a 	vldr	s2, [sp, #552]	; 0x228
    tmp += input_2[27] * filter[27];
 801c31a:	ed84 da00 	vstr	s26, [r4]
    tmp += input_2[29] * filter[29];
 801c31e:	f20d 445c 	addw	r4, sp, #1116	; 0x45c
    tmp += input_2[11] * filter[11];
 801c322:	eeaa 7a81 	vfma.f32	s14, s21, s2
    tmp += input_2[12] * filter[12];
 801c326:	ed9d 1a8b 	vldr	s2, [sp, #556]	; 0x22c
 801c32a:	eeaa 7a01 	vfma.f32	s14, s20, s2
    tmp += input_2[13] * filter[13];
 801c32e:	ed9d 1a8c 	vldr	s2, [sp, #560]	; 0x230
 801c332:	eea9 7a81 	vfma.f32	s14, s19, s2
    tmp += input_2[14] * filter[14];
 801c336:	ed9d 1a8d 	vldr	s2, [sp, #564]	; 0x234
 801c33a:	eea0 7a01 	vfma.f32	s14, s0, s2
    tmp += input_2[15] * filter[15];
 801c33e:	ed9d 1a8e 	vldr	s2, [sp, #568]	; 0x238
 801c342:	eea0 7a81 	vfma.f32	s14, s1, s2
    tmp += input_2[16] * filter[16];
 801c346:	ed9d 1a8f 	vldr	s2, [sp, #572]	; 0x23c
 801c34a:	eea7 7a81 	vfma.f32	s14, s15, s2
    tmp += input_2[17] * filter[17];
 801c34e:	ed9d 1a90 	vldr	s2, [sp, #576]	; 0x240
 801c352:	eddd 7a07 	vldr	s15, [sp, #28]
 801c356:	eea7 7a81 	vfma.f32	s14, s15, s2
    tmp += input_2[18] * filter[18];
 801c35a:	ed9d 1a91 	vldr	s2, [sp, #580]	; 0x244
    tmp += input_2[29] * filter[29];
 801c35e:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 801c362:	edc4 7a00 	vstr	s15, [r4]
    *sum_2 += tmp;
 801c366:	f50d 6419 	add.w	r4, sp, #2448	; 0x990
    tmp += input_2[18] * filter[18];
 801c36a:	eea2 7a01 	vfma.f32	s14, s4, s2
    tmp += input_2[19] * filter[19];
 801c36e:	ed9d 1a92 	vldr	s2, [sp, #584]	; 0x248
 801c372:	eea2 7a81 	vfma.f32	s14, s5, s2
    tmp += input_2[20] * filter[20];
 801c376:	ed9d 1a93 	vldr	s2, [sp, #588]	; 0x24c
 801c37a:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[21] * filter[21];
 801c37e:	ed9d 1a94 	vldr	s2, [sp, #592]	; 0x250
 801c382:	eea3 7a81 	vfma.f32	s14, s7, s2
    tmp += input_2[22] * filter[22];
 801c386:	ed9d 1a95 	vldr	s2, [sp, #596]	; 0x254
 801c38a:	eea4 7a01 	vfma.f32	s14, s8, s2
    tmp += input_2[23] * filter[23];
 801c38e:	ed9d 1a96 	vldr	s2, [sp, #600]	; 0x258
 801c392:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[24] * filter[24];
 801c396:	ed9d 1a97 	vldr	s2, [sp, #604]	; 0x25c
 801c39a:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[25] * filter[25];
 801c39e:	ed9d 1a98 	vldr	s2, [sp, #608]	; 0x260
 801c3a2:	eea5 7a81 	vfma.f32	s14, s11, s2
    tmp += input_2[26] * filter[26];
 801c3a6:	ed9d 1a99 	vldr	s2, [sp, #612]	; 0x264
 801c3aa:	eea6 7a01 	vfma.f32	s14, s12, s2
    tmp += input_2[28] * filter[28];
 801c3ae:	ed9d 1a9a 	vldr	s2, [sp, #616]	; 0x268
    tmp += input_2[27] * filter[27];
 801c3b2:	eea6 7a8d 	vfma.f32	s14, s13, s26
    tmp += input_2[28] * filter[28];
 801c3b6:	ed9a da1c 	vldr	s26, [sl, #112]	; 0x70
 801c3ba:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[29] * filter[29];
 801c3be:	ed9a da1d 	vldr	s26, [sl, #116]	; 0x74
    tmp += input_2[30] * filter[30];
 801c3c2:	ed9d 1a9b 	vldr	s2, [sp, #620]	; 0x26c
    tmp += input_2[29] * filter[29];
 801c3c6:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[30] * filter[30];
 801c3ca:	ed9a da1e 	vldr	s26, [sl, #120]	; 0x78
 801c3ce:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[31] * filter[31];
 801c3d2:	ed9a da1f 	vldr	s26, [sl, #124]	; 0x7c
 801c3d6:	ed9d 1a9c 	vldr	s2, [sp, #624]	; 0x270
 801c3da:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[32] * filter[32];
 801c3de:	ed9a da20 	vldr	s26, [sl, #128]	; 0x80
 801c3e2:	ed9d 1a9d 	vldr	s2, [sp, #628]	; 0x274
 801c3e6:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[33] * filter[33];
 801c3ea:	ed9a da21 	vldr	s26, [sl, #132]	; 0x84
 801c3ee:	ed9d 1a9e 	vldr	s2, [sp, #632]	; 0x278
 801c3f2:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[34] * filter[34];
 801c3f6:	ed9a da22 	vldr	s26, [sl, #136]	; 0x88
 801c3fa:	ed9d 1a9f 	vldr	s2, [sp, #636]	; 0x27c
 801c3fe:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[35] * filter[35];
 801c402:	ed9a da23 	vldr	s26, [sl, #140]	; 0x8c
 801c406:	ed9d 1aa0 	vldr	s2, [sp, #640]	; 0x280
 801c40a:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[36] * filter[36];
 801c40e:	ed9a da24 	vldr	s26, [sl, #144]	; 0x90
 801c412:	ed9d 1aa1 	vldr	s2, [sp, #644]	; 0x284
 801c416:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[37] * filter[37];
 801c41a:	ed9a da25 	vldr	s26, [sl, #148]	; 0x94
 801c41e:	ed9d 1aa2 	vldr	s2, [sp, #648]	; 0x288
 801c422:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[38] * filter[38];
 801c426:	ed9a da26 	vldr	s26, [sl, #152]	; 0x98
 801c42a:	ed9d 1aa3 	vldr	s2, [sp, #652]	; 0x28c
 801c42e:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[39] * filter[39];
 801c432:	ed9a da27 	vldr	s26, [sl, #156]	; 0x9c
 801c436:	ed9d 1aa4 	vldr	s2, [sp, #656]	; 0x290
 801c43a:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[40] * filter[40];
 801c43e:	ed9a da28 	vldr	s26, [sl, #160]	; 0xa0
 801c442:	ed9d 1aa5 	vldr	s2, [sp, #660]	; 0x294
 801c446:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[41] * filter[41];
 801c44a:	ed9a da29 	vldr	s26, [sl, #164]	; 0xa4
 801c44e:	ed9d 1aa6 	vldr	s2, [sp, #664]	; 0x298
 801c452:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[42] * filter[42];
 801c456:	ed9a da2a 	vldr	s26, [sl, #168]	; 0xa8
 801c45a:	ed9d 1aa7 	vldr	s2, [sp, #668]	; 0x29c
 801c45e:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[43] * filter[43];
 801c462:	ed9a da2b 	vldr	s26, [sl, #172]	; 0xac
 801c466:	ed9d 1aa8 	vldr	s2, [sp, #672]	; 0x2a0
 801c46a:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[44] * filter[44];
 801c46e:	ed9a da2c 	vldr	s26, [sl, #176]	; 0xb0
 801c472:	ed9d 1aa9 	vldr	s2, [sp, #676]	; 0x2a4
 801c476:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[45] * filter[45];
 801c47a:	ed9a da2d 	vldr	s26, [sl, #180]	; 0xb4
 801c47e:	ed9d 1aaa 	vldr	s2, [sp, #680]	; 0x2a8
 801c482:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[46] * filter[46];
 801c486:	ed9a da2e 	vldr	s26, [sl, #184]	; 0xb8
 801c48a:	ed9d 1aab 	vldr	s2, [sp, #684]	; 0x2ac
 801c48e:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[47] * filter[47];
 801c492:	ed9a da2f 	vldr	s26, [sl, #188]	; 0xbc
 801c496:	ed9d 1aac 	vldr	s2, [sp, #688]	; 0x2b0
    tmp += input_2[49] * filter[49];
 801c49a:	eddd 7aae 	vldr	s15, [sp, #696]	; 0x2b8
    tmp += input_2[47] * filter[47];
 801c49e:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[48] * filter[48];
 801c4a2:	ed9a da30 	vldr	s26, [sl, #192]	; 0xc0
 801c4a6:	ed9d 1aad 	vldr	s2, [sp, #692]	; 0x2b4
 801c4aa:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_2[49] * filter[49];
 801c4ae:	ed9a da31 	vldr	s26, [sl, #196]	; 0xc4
 801c4b2:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[50] * filter[50];
 801c4b6:	ed9a da32 	vldr	s26, [sl, #200]	; 0xc8
 801c4ba:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 801c4be:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[51] * filter[51];
 801c4c2:	ed9a da33 	vldr	s26, [sl, #204]	; 0xcc
 801c4c6:	eddd 7ab0 	vldr	s15, [sp, #704]	; 0x2c0
 801c4ca:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[52] * filter[52];
 801c4ce:	ed9a da34 	vldr	s26, [sl, #208]	; 0xd0
 801c4d2:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 801c4d6:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[53] * filter[53];
 801c4da:	ed9a da35 	vldr	s26, [sl, #212]	; 0xd4
 801c4de:	eddd 7ab2 	vldr	s15, [sp, #712]	; 0x2c8
 801c4e2:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[54] * filter[54];
 801c4e6:	ed9a da36 	vldr	s26, [sl, #216]	; 0xd8
 801c4ea:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 801c4ee:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[55] * filter[55];
 801c4f2:	ed9a da37 	vldr	s26, [sl, #220]	; 0xdc
 801c4f6:	eddd 7ab4 	vldr	s15, [sp, #720]	; 0x2d0
 801c4fa:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[56] * filter[56];
 801c4fe:	ed9a da38 	vldr	s26, [sl, #224]	; 0xe0
 801c502:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 801c506:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[57] * filter[57];
 801c50a:	ed9a da39 	vldr	s26, [sl, #228]	; 0xe4
 801c50e:	eddd 7ab6 	vldr	s15, [sp, #728]	; 0x2d8
 801c512:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[58] * filter[58];
 801c516:	ed9a da3a 	vldr	s26, [sl, #232]	; 0xe8
 801c51a:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 801c51e:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[59] * filter[59];
 801c522:	ed9a da3b 	vldr	s26, [sl, #236]	; 0xec
 801c526:	eddd 7ab8 	vldr	s15, [sp, #736]	; 0x2e0
 801c52a:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[60] * filter[60];
 801c52e:	ed9a da3c 	vldr	s26, [sl, #240]	; 0xf0
 801c532:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 801c536:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[61] * filter[61];
 801c53a:	ed9a da3d 	vldr	s26, [sl, #244]	; 0xf4
 801c53e:	eddd 7aba 	vldr	s15, [sp, #744]	; 0x2e8
 801c542:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[62] * filter[62];
 801c546:	ed9a da3e 	vldr	s26, [sl, #248]	; 0xf8
 801c54a:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 801c54e:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_2[63] * filter[63];
 801c552:	ed9a da3f 	vldr	s26, [sl, #252]	; 0xfc
 801c556:	eddd 7abc 	vldr	s15, [sp, #752]	; 0x2f0
    tmp += input_3[0] * filter[0];
 801c55a:	f8dd 7818 	ldr.w	r7, [sp, #2072]	; 0x818
    tmp += input_2[63] * filter[63];
 801c55e:	eead 7a27 	vfma.f32	s14, s26, s15
    tmp += input_3[0] * filter[0];
 801c562:	edd7 7a00 	vldr	s15, [r7]
    tmp += input_3[1] * filter[1];
 801c566:	ed9d da12 	vldr	s26, [sp, #72]	; 0x48
    tmp += input_3[0] * filter[0];
 801c56a:	eeb0 1a67 	vmov.f32	s2, s15
    *sum_2 += tmp;
 801c56e:	ed84 7a00 	vstr	s14, [r4]
    tmp += input_3[1] * filter[1];
 801c572:	f8dd 4530 	ldr.w	r4, [sp, #1328]	; 0x530
 801c576:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_3[2] * filter[2];
 801c57a:	f8dd 4534 	ldr.w	r4, [sp, #1332]	; 0x534
    tmp += input_3[1] * filter[1];
 801c57e:	ee6d 7a07 	vmul.f32	s15, s26, s14
    tmp += input_3[2] * filter[2];
 801c582:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[3] * filter[3];
 801c586:	f8dd 4538 	ldr.w	r4, [sp, #1336]	; 0x538
    tmp += input_3[2] * filter[2];
 801c58a:	ed8d da12 	vstr	s26, [sp, #72]	; 0x48
    tmp += input_3[1] * filter[1];
 801c58e:	eeef 7a81 	vfma.f32	s15, s31, s2
    tmp += input_3[3] * filter[3];
 801c592:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[4] * filter[4];
 801c596:	f8dd 453c 	ldr.w	r4, [sp, #1340]	; 0x53c
    tmp += input_3[3] * filter[3];
 801c59a:	ed8d dabd 	vstr	s26, [sp, #756]	; 0x2f4
    tmp += input_3[4] * filter[4];
 801c59e:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[5] * filter[5];
 801c5a2:	f8dd 4540 	ldr.w	r4, [sp, #1344]	; 0x540
    tmp += input_3[4] * filter[4];
 801c5a6:	ed8d dabe 	vstr	s26, [sp, #760]	; 0x2f8
    tmp += input_3[5] * filter[5];
 801c5aa:	edd4 fa00 	vldr	s31, [r4]
    tmp += input_3[6] * filter[6];
 801c5ae:	f8dd 4544 	ldr.w	r4, [sp, #1348]	; 0x544
 801c5b2:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[7] * filter[7];
 801c5b6:	f8dd 4548 	ldr.w	r4, [sp, #1352]	; 0x548
    tmp += input_3[6] * filter[6];
 801c5ba:	ed8d dabf 	vstr	s26, [sp, #764]	; 0x2fc
    tmp += input_3[7] * filter[7];
 801c5be:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[8] * filter[8];
 801c5c2:	f8dd 481c 	ldr.w	r4, [sp, #2076]	; 0x81c
    tmp += input_3[7] * filter[7];
 801c5c6:	ed8d dac0 	vstr	s26, [sp, #768]	; 0x300
    tmp += input_3[8] * filter[8];
 801c5ca:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[9] * filter[9];
 801c5ce:	f8dd 454c 	ldr.w	r4, [sp, #1356]	; 0x54c
    tmp += input_3[8] * filter[8];
 801c5d2:	ed8d dac1 	vstr	s26, [sp, #772]	; 0x304
    tmp += input_3[9] * filter[9];
 801c5d6:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[10] * filter[10];
 801c5da:	f8dd 4550 	ldr.w	r4, [sp, #1360]	; 0x550
    tmp += input_3[9] * filter[9];
 801c5de:	ed8d dac2 	vstr	s26, [sp, #776]	; 0x308
    tmp += input_3[10] * filter[10];
 801c5e2:	ed94 da00 	vldr	s26, [r4]
 801c5e6:	ed8d dac3 	vstr	s26, [sp, #780]	; 0x30c
    tmp += input_3[2] * filter[2];
 801c5ea:	ed9d da12 	vldr	s26, [sp, #72]	; 0x48
    tmp += input_3[11] * filter[11];
 801c5ee:	f8dd 4554 	ldr.w	r4, [sp, #1364]	; 0x554
    tmp += input_3[2] * filter[2];
 801c5f2:	eeef 7a0d 	vfma.f32	s15, s30, s26
    tmp += input_3[11] * filter[11];
 801c5f6:	ed94 fa00 	vldr	s30, [r4]
    tmp += input_3[12] * filter[12];
 801c5fa:	f8dd 455c 	ldr.w	r4, [sp, #1372]	; 0x55c
    tmp += input_3[11] * filter[11];
 801c5fe:	ed8d fac4 	vstr	s30, [sp, #784]	; 0x310
    tmp += input_3[12] * filter[12];
 801c602:	ed94 fa00 	vldr	s30, [r4]
    tmp += input_3[13] * filter[13];
 801c606:	f8dd 4564 	ldr.w	r4, [sp, #1380]	; 0x564
    tmp += input_3[12] * filter[12];
 801c60a:	ed8d fac5 	vstr	s30, [sp, #788]	; 0x314
    tmp += input_3[13] * filter[13];
 801c60e:	ed94 fa00 	vldr	s30, [r4]
    tmp += input_3[14] * filter[14];
 801c612:	f8dd 4820 	ldr.w	r4, [sp, #2080]	; 0x820
    tmp += input_3[13] * filter[13];
 801c616:	ed8d fac6 	vstr	s30, [sp, #792]	; 0x318
    tmp += input_3[14] * filter[14];
 801c61a:	ed94 fa00 	vldr	s30, [r4]
    tmp += input_3[15] * filter[15];
 801c61e:	f8dd 4824 	ldr.w	r4, [sp, #2084]	; 0x824
    tmp += input_3[14] * filter[14];
 801c622:	ed8d fac7 	vstr	s30, [sp, #796]	; 0x31c
    tmp += input_3[15] * filter[15];
 801c626:	ed94 fa00 	vldr	s30, [r4]
    tmp += input_3[16] * filter[16];
 801c62a:	f8dd 4828 	ldr.w	r4, [sp, #2088]	; 0x828
    tmp += input_3[15] * filter[15];
 801c62e:	ed8d fac8 	vstr	s30, [sp, #800]	; 0x320
    tmp += input_3[16] * filter[16];
 801c632:	ed94 fa00 	vldr	s30, [r4]
    tmp += input_3[17] * filter[17];
 801c636:	f8dd 482c 	ldr.w	r4, [sp, #2092]	; 0x82c
    tmp += input_3[16] * filter[16];
 801c63a:	ed8d fac9 	vstr	s30, [sp, #804]	; 0x324
    tmp += input_3[3] * filter[3];
 801c63e:	ed9d fabd 	vldr	s30, [sp, #756]	; 0x2f4
 801c642:	eeee 7a8f 	vfma.f32	s15, s29, s30
    tmp += input_3[17] * filter[17];
 801c646:	edd4 ea00 	vldr	s29, [r4]
    tmp += input_3[18] * filter[18];
 801c64a:	f8dd 4578 	ldr.w	r4, [sp, #1400]	; 0x578
    tmp += input_3[17] * filter[17];
 801c64e:	edcd eaca 	vstr	s29, [sp, #808]	; 0x328
    tmp += input_3[18] * filter[18];
 801c652:	edd4 ea00 	vldr	s29, [r4]
    tmp += input_3[19] * filter[19];
 801c656:	f8dd 4834 	ldr.w	r4, [sp, #2100]	; 0x834
    tmp += input_3[18] * filter[18];
 801c65a:	edcd eacb 	vstr	s29, [sp, #812]	; 0x32c
    tmp += input_3[19] * filter[19];
 801c65e:	edd4 ea00 	vldr	s29, [r4]
    tmp += input_3[20] * filter[20];
 801c662:	f8dd 4838 	ldr.w	r4, [sp, #2104]	; 0x838
    tmp += input_3[19] * filter[19];
 801c666:	edcd eacc 	vstr	s29, [sp, #816]	; 0x330
    tmp += input_3[20] * filter[20];
 801c66a:	edd4 ea00 	vldr	s29, [r4]
 801c66e:	edcd eacd 	vstr	s29, [sp, #820]	; 0x334
    tmp += input_3[21] * filter[21];
 801c672:	f8dd 483c 	ldr.w	r4, [sp, #2108]	; 0x83c
 801c676:	edd4 ea00 	vldr	s29, [r4]
    tmp += input_3[22] * filter[22];
 801c67a:	f8dd 458c 	ldr.w	r4, [sp, #1420]	; 0x58c
    tmp += input_3[21] * filter[21];
 801c67e:	edcd eace 	vstr	s29, [sp, #824]	; 0x338
    tmp += input_3[22] * filter[22];
 801c682:	edd4 ea00 	vldr	s29, [r4]
    tmp += input_3[23] * filter[23];
 801c686:	f8dd 4594 	ldr.w	r4, [sp, #1428]	; 0x594
    tmp += input_3[22] * filter[22];
 801c68a:	edcd eacf 	vstr	s29, [sp, #828]	; 0x33c
    tmp += input_3[4] * filter[4];
 801c68e:	eddd eabe 	vldr	s29, [sp, #760]	; 0x2f8
 801c692:	eeee 7a2e 	vfma.f32	s15, s28, s29
    tmp += input_3[23] * filter[23];
 801c696:	ed94 ea00 	vldr	s28, [r4]
    tmp += input_3[24] * filter[24];
 801c69a:	f8dd 4840 	ldr.w	r4, [sp, #2112]	; 0x840
    tmp += input_3[23] * filter[23];
 801c69e:	ed8d ead0 	vstr	s28, [sp, #832]	; 0x340
    tmp += input_3[24] * filter[24];
 801c6a2:	ed94 ea00 	vldr	s28, [r4]
    tmp += input_3[25] * filter[25];
 801c6a6:	f8dd 45a0 	ldr.w	r4, [sp, #1440]	; 0x5a0
    tmp += input_3[24] * filter[24];
 801c6aa:	ed8d ead1 	vstr	s28, [sp, #836]	; 0x344
    tmp += input_3[25] * filter[25];
 801c6ae:	ed94 ea00 	vldr	s28, [r4]
    tmp += input_3[5] * filter[5];
 801c6b2:	eeed 7aaf 	vfma.f32	s15, s27, s31
    tmp += input_3[26] * filter[26];
 801c6b6:	f8dd 45a4 	ldr.w	r4, [sp, #1444]	; 0x5a4
    tmp += input_3[25] * filter[25];
 801c6ba:	ed8d ead2 	vstr	s28, [sp, #840]	; 0x348
    tmp += input_3[26] * filter[26];
 801c6be:	ed94 ea00 	vldr	s28, [r4]
    tmp += input_3[27] * filter[27];
 801c6c2:	f8dd 45ac 	ldr.w	r4, [sp, #1452]	; 0x5ac
    tmp += input_3[26] * filter[26];
 801c6c6:	ed8d ead3 	vstr	s28, [sp, #844]	; 0x34c
    tmp += input_3[27] * filter[27];
 801c6ca:	ed94 ea00 	vldr	s28, [r4]
    tmp += input_3[28] * filter[28];
 801c6ce:	f8dd 45b4 	ldr.w	r4, [sp, #1460]	; 0x5b4
    tmp += input_3[27] * filter[27];
 801c6d2:	ed8d ead4 	vstr	s28, [sp, #848]	; 0x350
    tmp += input_3[28] * filter[28];
 801c6d6:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[5] * filter[5];
 801c6da:	f50d 648c 	add.w	r4, sp, #1120	; 0x460
 801c6de:	edc4 fa00 	vstr	s31, [r4]
    tmp += input_3[29] * filter[29];
 801c6e2:	f8dd 45bc 	ldr.w	r4, [sp, #1468]	; 0x5bc
    tmp += input_3[28] * filter[28];
 801c6e6:	ed8d dad5 	vstr	s26, [sp, #852]	; 0x354
    tmp += input_3[29] * filter[29];
 801c6ea:	edd4 da00 	vldr	s27, [r4]
    tmp += input_3[30] * filter[30];
 801c6ee:	f8dd 45c4 	ldr.w	r4, [sp, #1476]	; 0x5c4
    tmp += input_3[29] * filter[29];
 801c6f2:	edcd dad6 	vstr	s27, [sp, #856]	; 0x358
    tmp += input_3[30] * filter[30];
 801c6f6:	edd4 fa00 	vldr	s31, [r4]
 801c6fa:	edcd fad7 	vstr	s31, [sp, #860]	; 0x35c
    tmp += input_3[31] * filter[31];
 801c6fe:	f8dd 45cc 	ldr.w	r4, [sp, #1484]	; 0x5cc
    tmp += input_3[6] * filter[6];
 801c702:	ed9d da13 	vldr	s26, [sp, #76]	; 0x4c
    tmp += input_3[31] * filter[31];
 801c706:	edd4 da00 	vldr	s27, [r4]
    tmp += input_3[32] * filter[32];
 801c70a:	f8dd 4848 	ldr.w	r4, [sp, #2120]	; 0x848
    tmp += input_3[31] * filter[31];
 801c70e:	edcd dad8 	vstr	s27, [sp, #864]	; 0x360
    tmp += input_3[32] * filter[32];
 801c712:	edd4 fa00 	vldr	s31, [r4]
    tmp += input_3[33] * filter[33];
 801c716:	f8dd 45d8 	ldr.w	r4, [sp, #1496]	; 0x5d8
    tmp += input_3[32] * filter[32];
 801c71a:	edcd fad9 	vstr	s31, [sp, #868]	; 0x364
    tmp += input_3[33] * filter[33];
 801c71e:	edd4 da00 	vldr	s27, [r4]
    tmp += input_3[34] * filter[34];
 801c722:	f8dd 45dc 	ldr.w	r4, [sp, #1500]	; 0x5dc
    tmp += input_3[33] * filter[33];
 801c726:	edcd dada 	vstr	s27, [sp, #872]	; 0x368
    tmp += input_3[34] * filter[34];
 801c72a:	edd4 fa00 	vldr	s31, [r4]
    tmp += input_3[35] * filter[35];
 801c72e:	f8dd 45e4 	ldr.w	r4, [sp, #1508]	; 0x5e4
    tmp += input_3[34] * filter[34];
 801c732:	edcd fadb 	vstr	s31, [sp, #876]	; 0x36c
    tmp += input_3[35] * filter[35];
 801c736:	edd4 da00 	vldr	s27, [r4]
    tmp += input_3[36] * filter[36];
 801c73a:	f8dd 45ec 	ldr.w	r4, [sp, #1516]	; 0x5ec
    tmp += input_3[35] * filter[35];
 801c73e:	edcd da13 	vstr	s27, [sp, #76]	; 0x4c
    tmp += input_3[36] * filter[36];
 801c742:	edd4 fa00 	vldr	s31, [r4]
    tmp += input_3[37] * filter[37];
 801c746:	f8dd 45f4 	ldr.w	r4, [sp, #1524]	; 0x5f4
    tmp += input_3[6] * filter[6];
 801c74a:	ed9d eabf 	vldr	s28, [sp, #764]	; 0x2fc
    tmp += input_3[37] * filter[37];
 801c74e:	edd4 da00 	vldr	s27, [r4]
    tmp += input_3[38] * filter[38];
 801c752:	f8dd 45fc 	ldr.w	r4, [sp, #1532]	; 0x5fc
    tmp += input_3[6] * filter[6];
 801c756:	eeed 7a0e 	vfma.f32	s15, s26, s28
    tmp += input_3[36] * filter[36];
 801c75a:	edcd fadc 	vstr	s31, [sp, #880]	; 0x370
    tmp += input_3[38] * filter[38];
 801c75e:	edd4 fa00 	vldr	s31, [r4]
    tmp += input_3[39] * filter[39];
 801c762:	f8dd 4604 	ldr.w	r4, [sp, #1540]	; 0x604
    tmp += input_3[37] * filter[37];
 801c766:	edcd dadd 	vstr	s27, [sp, #884]	; 0x374
    tmp += input_3[39] * filter[39];
 801c76a:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[40] * filter[40];
 801c76e:	f8dd 4850 	ldr.w	r4, [sp, #2128]	; 0x850
    tmp += input_3[38] * filter[38];
 801c772:	edcd fade 	vstr	s31, [sp, #888]	; 0x378
    tmp += input_3[40] * filter[40];
 801c776:	ed94 ea00 	vldr	s28, [r4]
    tmp += input_3[39] * filter[39];
 801c77a:	ed8d dadf 	vstr	s26, [sp, #892]	; 0x37c
    tmp += input_3[40] * filter[40];
 801c77e:	ed8d eae0 	vstr	s28, [sp, #896]	; 0x380
    tmp += input_3[7] * filter[7];
 801c782:	ed9d eac0 	vldr	s28, [sp, #768]	; 0x300
    tmp += input_3[41] * filter[41];
 801c786:	f8dd 4610 	ldr.w	r4, [sp, #1552]	; 0x610
    tmp += input_3[7] * filter[7];
 801c78a:	eeec 7a8e 	vfma.f32	s15, s25, s28
    tmp += input_3[8] * filter[8];
 801c78e:	eddd eac1 	vldr	s29, [sp, #772]	; 0x304
    tmp += input_3[41] * filter[41];
 801c792:	edd4 ca00 	vldr	s25, [r4]
    tmp += input_3[42] * filter[42];
 801c796:	f8dd 4614 	ldr.w	r4, [sp, #1556]	; 0x614
    tmp += input_3[41] * filter[41];
 801c79a:	edcd cae1 	vstr	s25, [sp, #900]	; 0x384
    tmp += input_3[42] * filter[42];
 801c79e:	edd4 ca00 	vldr	s25, [r4]
    tmp += input_3[43] * filter[43];
 801c7a2:	f8dd 461c 	ldr.w	r4, [sp, #1564]	; 0x61c
    tmp += input_3[42] * filter[42];
 801c7a6:	edcd cae2 	vstr	s25, [sp, #904]	; 0x388
    tmp += input_3[8] * filter[8];
 801c7aa:	eeec 7a2e 	vfma.f32	s15, s24, s29
    tmp += input_3[43] * filter[43];
 801c7ae:	edd4 ca00 	vldr	s25, [r4]
    tmp += input_3[44] * filter[44];
 801c7b2:	f8dd 4624 	ldr.w	r4, [sp, #1572]	; 0x624
    tmp += input_3[43] * filter[43];
 801c7b6:	edcd cae3 	vstr	s25, [sp, #908]	; 0x38c
    tmp += input_3[44] * filter[44];
 801c7ba:	edd4 ca00 	vldr	s25, [r4]
    tmp += input_3[45] * filter[45];
 801c7be:	f8dd 462c 	ldr.w	r4, [sp, #1580]	; 0x62c
    tmp += input_3[44] * filter[44];
 801c7c2:	edcd cae4 	vstr	s25, [sp, #912]	; 0x390
    tmp += input_3[45] * filter[45];
 801c7c6:	edd4 ca00 	vldr	s25, [r4]
    tmp += input_3[46] * filter[46];
 801c7ca:	f8dd 4634 	ldr.w	r4, [sp, #1588]	; 0x634
    tmp += input_3[45] * filter[45];
 801c7ce:	edcd cae5 	vstr	s25, [sp, #916]	; 0x394
    tmp += input_3[46] * filter[46];
 801c7d2:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[47] * filter[47];
 801c7d6:	f8dd 463c 	ldr.w	r4, [sp, #1596]	; 0x63c
    tmp += input_3[46] * filter[46];
 801c7da:	ed8d dae6 	vstr	s26, [sp, #920]	; 0x398
    tmp += input_3[47] * filter[47];
 801c7de:	ed94 ca00 	vldr	s24, [r4]
    tmp += input_3[48] * filter[48];
 801c7e2:	f8dd 4858 	ldr.w	r4, [sp, #2136]	; 0x858
    tmp += input_3[47] * filter[47];
 801c7e6:	ed8d cae7 	vstr	s24, [sp, #924]	; 0x39c
    tmp += input_3[48] * filter[48];
 801c7ea:	ed94 ca00 	vldr	s24, [r4]
    tmp += input_3[49] * filter[49];
 801c7ee:	f8dd 4648 	ldr.w	r4, [sp, #1608]	; 0x648
    tmp += input_3[48] * filter[48];
 801c7f2:	ed8d cae8 	vstr	s24, [sp, #928]	; 0x3a0
    tmp += input_3[49] * filter[49];
 801c7f6:	ed94 ca00 	vldr	s24, [r4]
    tmp += input_3[50] * filter[50];
 801c7fa:	f8dd 464c 	ldr.w	r4, [sp, #1612]	; 0x64c
    tmp += input_3[49] * filter[49];
 801c7fe:	ed8d cae9 	vstr	s24, [sp, #932]	; 0x3a4
    tmp += input_3[50] * filter[50];
 801c802:	ed94 ca00 	vldr	s24, [r4]
 801c806:	ed8d caea 	vstr	s24, [sp, #936]	; 0x3a8
    tmp += input_3[51] * filter[51];
 801c80a:	f8dd 4654 	ldr.w	r4, [sp, #1620]	; 0x654
    tmp += input_3[9] * filter[9];
 801c80e:	ed9d fac2 	vldr	s30, [sp, #776]	; 0x308
    tmp += input_3[51] * filter[51];
 801c812:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[52] * filter[52];
 801c816:	f8dd 465c 	ldr.w	r4, [sp, #1628]	; 0x65c
    tmp += input_3[9] * filter[9];
 801c81a:	eeeb 7a8f 	vfma.f32	s15, s23, s30
    tmp += input_3[51] * filter[51];
 801c81e:	ed8d daeb 	vstr	s26, [sp, #940]	; 0x3ac
    tmp += input_3[52] * filter[52];
 801c822:	edd4 da00 	vldr	s27, [r4]
    tmp += input_3[53] * filter[53];
 801c826:	f8dd 4664 	ldr.w	r4, [sp, #1636]	; 0x664
    tmp += input_3[52] * filter[52];
 801c82a:	edcd daec 	vstr	s27, [sp, #944]	; 0x3b0
    tmp += input_3[53] * filter[53];
 801c82e:	edd4 ba00 	vldr	s23, [r4]
    tmp += input_3[54] * filter[54];
 801c832:	f8dd 466c 	ldr.w	r4, [sp, #1644]	; 0x66c
    tmp += input_3[53] * filter[53];
 801c836:	edcd baed 	vstr	s23, [sp, #948]	; 0x3b4
    tmp += input_3[54] * filter[54];
 801c83a:	edd4 ba00 	vldr	s23, [r4]
    tmp += input_3[55] * filter[55];
 801c83e:	f8dd 4674 	ldr.w	r4, [sp, #1652]	; 0x674
    tmp += input_3[54] * filter[54];
 801c842:	edcd baee 	vstr	s23, [sp, #952]	; 0x3b8
    tmp += input_3[55] * filter[55];
 801c846:	edd4 ba00 	vldr	s23, [r4]
    tmp += input_3[56] * filter[56];
 801c84a:	f8dd 4860 	ldr.w	r4, [sp, #2144]	; 0x860
    tmp += input_3[55] * filter[55];
 801c84e:	edcd baef 	vstr	s23, [sp, #956]	; 0x3bc
    tmp += input_3[56] * filter[56];
 801c852:	edd4 ba00 	vldr	s23, [r4]
    tmp += input_3[57] * filter[57];
 801c856:	f8dd 4680 	ldr.w	r4, [sp, #1664]	; 0x680
    tmp += input_3[56] * filter[56];
 801c85a:	edcd baf0 	vstr	s23, [sp, #960]	; 0x3c0
    tmp += input_3[57] * filter[57];
 801c85e:	edd4 ba00 	vldr	s23, [r4]
    tmp += input_3[58] * filter[58];
 801c862:	f8dd 4684 	ldr.w	r4, [sp, #1668]	; 0x684
    tmp += input_3[57] * filter[57];
 801c866:	edcd baf1 	vstr	s23, [sp, #964]	; 0x3c4
    tmp += input_3[58] * filter[58];
 801c86a:	ed94 da00 	vldr	s26, [r4]
    tmp += input_3[59] * filter[59];
 801c86e:	f8dd 468c 	ldr.w	r4, [sp, #1676]	; 0x68c
    tmp += input_3[58] * filter[58];
 801c872:	ed8d daf2 	vstr	s26, [sp, #968]	; 0x3c8
    tmp += input_3[10] * filter[10];
 801c876:	ed9d dac3 	vldr	s26, [sp, #780]	; 0x30c
 801c87a:	eeeb 7a0d 	vfma.f32	s15, s22, s26
    tmp += input_3[59] * filter[59];
 801c87e:	ed94 ba00 	vldr	s22, [r4]
    tmp += input_3[60] * filter[60];
 801c882:	f8dd 4694 	ldr.w	r4, [sp, #1684]	; 0x694
    tmp += input_3[59] * filter[59];
 801c886:	ed8d baf3 	vstr	s22, [sp, #972]	; 0x3cc
    tmp += input_3[60] * filter[60];
 801c88a:	ed94 ba00 	vldr	s22, [r4]
 801c88e:	ed8d baf4 	vstr	s22, [sp, #976]	; 0x3d0
    tmp += input_3[61] * filter[61];
 801c892:	f8dd 469c 	ldr.w	r4, [sp, #1692]	; 0x69c
    tmp += input_3[11] * filter[11];
 801c896:	ed9d fac4 	vldr	s30, [sp, #784]	; 0x310
    tmp += input_3[17] * filter[17];
 801c89a:	eddd eaca 	vldr	s29, [sp, #808]	; 0x328
    tmp += input_3[11] * filter[11];
 801c89e:	eeea 7a8f 	vfma.f32	s15, s21, s30
    tmp += input_3[12] * filter[12];
 801c8a2:	eddd aac5 	vldr	s21, [sp, #788]	; 0x314
    tmp += input_3[18] * filter[18];
 801c8a6:	eddd dacb 	vldr	s27, [sp, #812]	; 0x32c
    tmp += input_3[19] * filter[19];
 801c8aa:	ed9d eacc 	vldr	s28, [sp, #816]	; 0x330
    tmp += input_3[21] * filter[21];
 801c8ae:	eddd face 	vldr	s31, [sp, #824]	; 0x338
    tmp += input_3[61] * filter[61];
 801c8b2:	ed94 ba00 	vldr	s22, [r4]
    tmp += input_3[62] * filter[62];
 801c8b6:	f8dd 46a4 	ldr.w	r4, [sp, #1700]	; 0x6a4
    tmp += input_3[12] * filter[12];
 801c8ba:	eeea 7a2a 	vfma.f32	s15, s20, s21
    tmp += input_3[13] * filter[13];
 801c8be:	ed9d aac6 	vldr	s20, [sp, #792]	; 0x318
    tmp += input_3[61] * filter[61];
 801c8c2:	ed8d baf5 	vstr	s22, [sp, #980]	; 0x3d4
    tmp += input_3[62] * filter[62];
 801c8c6:	ed94 ba00 	vldr	s22, [r4]
    tmp += input_3[63] * filter[63];
 801c8ca:	f8dd 46ac 	ldr.w	r4, [sp, #1708]	; 0x6ac
    tmp += input_3[62] * filter[62];
 801c8ce:	ed8d baf6 	vstr	s22, [sp, #984]	; 0x3d8
    tmp += input_3[63] * filter[63];
 801c8d2:	ed94 ba00 	vldr	s22, [r4]
    *sum_3 += tmp;
 801c8d6:	f50d 641d 	add.w	r4, sp, #2512	; 0x9d0
    tmp += input_3[13] * filter[13];
 801c8da:	eee9 7a8a 	vfma.f32	s15, s19, s20
    tmp += input_3[14] * filter[14];
 801c8de:	eddd 9ac7 	vldr	s19, [sp, #796]	; 0x31c
    tmp += input_3[63] * filter[63];
 801c8e2:	ed8d baf7 	vstr	s22, [sp, #988]	; 0x3dc
    tmp += input_3[25] * filter[25];
 801c8e6:	ed9d bad2 	vldr	s22, [sp, #840]	; 0x348
    tmp += input_3[26] * filter[26];
 801c8ea:	eddd bad3 	vldr	s23, [sp, #844]	; 0x34c
    tmp += input_3[27] * filter[27];
 801c8ee:	ed9d cad4 	vldr	s24, [sp, #848]	; 0x350
    tmp += input_3[28] * filter[28];
 801c8f2:	ed9a fa1c 	vldr	s30, [sl, #112]	; 0x70
    tmp += input_3[14] * filter[14];
 801c8f6:	eee0 7a29 	vfma.f32	s15, s0, s19
    tmp += input_3[15] * filter[15];
 801c8fa:	ed9d 0ac8 	vldr	s0, [sp, #800]	; 0x320
    tmp += input_3[28] * filter[28];
 801c8fe:	ed9d dad5 	vldr	s26, [sp, #852]	; 0x354
    tmp += input_3[15] * filter[15];
 801c902:	eee0 7a80 	vfma.f32	s15, s1, s0
    tmp += input_3[16] * filter[16];
 801c906:	eddd 0ac9 	vldr	s1, [sp, #804]	; 0x324
 801c90a:	ed9d 0a06 	vldr	s0, [sp, #24]
 801c90e:	eee0 7a20 	vfma.f32	s15, s0, s1
    tmp += input_3[17] * filter[17];
 801c912:	eddd 0a07 	vldr	s1, [sp, #28]
 801c916:	eee0 7aae 	vfma.f32	s15, s1, s29
    tmp += input_3[18] * filter[18];
 801c91a:	eee2 7a2d 	vfma.f32	s15, s4, s27
    tmp += input_3[29] * filter[29];
 801c91e:	eddd dad6 	vldr	s27, [sp, #856]	; 0x358
    tmp += input_3[19] * filter[19];
 801c922:	eee2 7a8e 	vfma.f32	s15, s5, s28
    tmp += input_3[20] * filter[20];
 801c926:	eddd 2acd 	vldr	s5, [sp, #820]	; 0x334
    tmp += input_3[23] * filter[23];
 801c92a:	ed9d ead0 	vldr	s28, [sp, #832]	; 0x340
    tmp += input_3[20] * filter[20];
 801c92e:	eee3 7a22 	vfma.f32	s15, s6, s5
    tmp += input_3[22] * filter[22];
 801c932:	eddd 2acf 	vldr	s5, [sp, #828]	; 0x33c
    tmp += input_3[21] * filter[21];
 801c936:	eee3 7aaf 	vfma.f32	s15, s7, s31
    tmp += input_3[22] * filter[22];
 801c93a:	eee4 7a22 	vfma.f32	s15, s8, s5
    tmp += input_3[23] * filter[23];
 801c93e:	eee4 7a8e 	vfma.f32	s15, s9, s28
    tmp += input_3[24] * filter[24];
 801c942:	eddd 4ad1 	vldr	s9, [sp, #836]	; 0x344
 801c946:	eee5 7a24 	vfma.f32	s15, s10, s9
    tmp += input_3[25] * filter[25];
 801c94a:	eee5 7a8b 	vfma.f32	s15, s11, s22
    tmp += input_3[26] * filter[26];
 801c94e:	eee6 7a2b 	vfma.f32	s15, s12, s23
    tmp += input_3[27] * filter[27];
 801c952:	eee6 7a8c 	vfma.f32	s15, s13, s24
    tmp += input_3[28] * filter[28];
 801c956:	eeef 7a0d 	vfma.f32	s15, s30, s26
    tmp += input_3[29] * filter[29];
 801c95a:	ed9a fa1d 	vldr	s30, [sl, #116]	; 0x74
 801c95e:	eeef 7a2d 	vfma.f32	s15, s30, s27
    tmp += input_3[30] * filter[30];
 801c962:	ed9a fa1e 	vldr	s30, [sl, #120]	; 0x78
 801c966:	eddd fad7 	vldr	s31, [sp, #860]	; 0x35c
    tmp += input_3[31] * filter[31];
 801c96a:	eddd cad8 	vldr	s25, [sp, #864]	; 0x360
    tmp += input_3[32] * filter[32];
 801c96e:	eddd ead9 	vldr	s29, [sp, #868]	; 0x364
    tmp += input_3[33] * filter[33];
 801c972:	edda 4a21 	vldr	s9, [sl, #132]	; 0x84
    tmp += input_3[34] * filter[34];
 801c976:	eddd 3adb 	vldr	s7, [sp, #876]	; 0x36c
    tmp += input_3[30] * filter[30];
 801c97a:	eeef 7a2f 	vfma.f32	s15, s30, s31
    tmp += input_3[31] * filter[31];
 801c97e:	ed9a fa1f 	vldr	s30, [sl, #124]	; 0x7c
    tmp += input_3[35] * filter[35];
 801c982:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
    tmp += input_3[36] * filter[36];
 801c986:	eddd 9adc 	vldr	s19, [sp, #880]	; 0x370
    tmp += input_3[37] * filter[37];
 801c98a:	ed9d aadd 	vldr	s20, [sp, #884]	; 0x374
    tmp += input_3[38] * filter[38];
 801c98e:	eddd aade 	vldr	s21, [sp, #888]	; 0x378
    tmp += input_3[39] * filter[39];
 801c992:	ed9d dadf 	vldr	s26, [sp, #892]	; 0x37c
    tmp += input_3[31] * filter[31];
 801c996:	eeef 7a2c 	vfma.f32	s15, s30, s25
    tmp += input_3[32] * filter[32];
 801c99a:	ed9a fa20 	vldr	s30, [sl, #128]	; 0x80
    tmp += input_3[40] * filter[40];
 801c99e:	ed9d 6ae0 	vldr	s12, [sp, #896]	; 0x380
    tmp += input_3[43] * filter[43];
 801c9a2:	edda 2a2b 	vldr	s5, [sl, #172]	; 0xac
    tmp += input_3[44] * filter[44];
 801c9a6:	ed9a 2a2c 	vldr	s4, [sl, #176]	; 0xb0
    tmp += input_3[45] * filter[45];
 801c9aa:	edda 6a2d 	vldr	s13, [sl, #180]	; 0xb4
    tmp += input_3[32] * filter[32];
 801c9ae:	eeef 7a2e 	vfma.f32	s15, s30, s29
    tmp += input_3[33] * filter[33];
 801c9b2:	ed9d fada 	vldr	s30, [sp, #872]	; 0x368
    tmp += input_3[42] * filter[42];
 801c9b6:	eddd eae2 	vldr	s29, [sp, #904]	; 0x388
    tmp += input_3[33] * filter[33];
 801c9ba:	eee4 7a8f 	vfma.f32	s15, s9, s30
    tmp += input_3[34] * filter[34];
 801c9be:	edda 4a22 	vldr	s9, [sl, #136]	; 0x88
    tmp += input_3[41] * filter[41];
 801c9c2:	ed9a fa29 	vldr	s30, [sl, #164]	; 0xa4
    tmp += input_3[34] * filter[34];
 801c9c6:	eee4 7aa3 	vfma.f32	s15, s9, s7
    tmp += input_3[35] * filter[35];
 801c9ca:	edda 4a23 	vldr	s9, [sl, #140]	; 0x8c
 801c9ce:	eee4 7a80 	vfma.f32	s15, s9, s0
    tmp += input_3[36] * filter[36];
 801c9d2:	edda 4a24 	vldr	s9, [sl, #144]	; 0x90
 801c9d6:	eee4 7aa9 	vfma.f32	s15, s9, s19
    tmp += input_3[37] * filter[37];
 801c9da:	edda 4a25 	vldr	s9, [sl, #148]	; 0x94
 801c9de:	eee4 7a8a 	vfma.f32	s15, s9, s20
    tmp += input_3[38] * filter[38];
 801c9e2:	edda 4a26 	vldr	s9, [sl, #152]	; 0x98
 801c9e6:	eee4 7aaa 	vfma.f32	s15, s9, s21
    tmp += input_3[39] * filter[39];
 801c9ea:	edda 4a27 	vldr	s9, [sl, #156]	; 0x9c
 801c9ee:	eee4 7a8d 	vfma.f32	s15, s9, s26
    tmp += input_3[40] * filter[40];
 801c9f2:	edda 4a28 	vldr	s9, [sl, #160]	; 0xa0
 801c9f6:	eee4 7a86 	vfma.f32	s15, s9, s12
    tmp += input_3[41] * filter[41];
 801c9fa:	eddd 4ae1 	vldr	s9, [sp, #900]	; 0x384
 801c9fe:	eeef 7a24 	vfma.f32	s15, s30, s9
    tmp += input_3[42] * filter[42];
 801ca02:	ed9a fa2a 	vldr	s30, [sl, #168]	; 0xa8
 801ca06:	eeef 7a2e 	vfma.f32	s15, s30, s29
    tmp += input_3[43] * filter[43];
 801ca0a:	ed9d fae3 	vldr	s30, [sp, #908]	; 0x38c
 801ca0e:	eee2 7a8f 	vfma.f32	s15, s5, s30
    tmp += input_3[44] * filter[44];
 801ca12:	eddd 2ae4 	vldr	s5, [sp, #912]	; 0x390
 801ca16:	eee2 7a22 	vfma.f32	s15, s4, s5
    tmp += input_3[45] * filter[45];
 801ca1a:	ed9d 2ae5 	vldr	s4, [sp, #916]	; 0x394
 801ca1e:	eee6 7a82 	vfma.f32	s15, s13, s4
    tmp += input_3[46] * filter[46];
 801ca22:	edda 6a2e 	vldr	s13, [sl, #184]	; 0xb8
 801ca26:	ed9d bae6 	vldr	s22, [sp, #920]	; 0x398
    tmp += input_3[47] * filter[47];
 801ca2a:	ed9d cae7 	vldr	s24, [sp, #924]	; 0x39c
    tmp += input_3[48] * filter[48];
 801ca2e:	eddd bae8 	vldr	s23, [sp, #928]	; 0x3a0
    tmp += input_3[49] * filter[49];
 801ca32:	ed9a 6a31 	vldr	s12, [sl, #196]	; 0xc4
    tmp += input_3[50] * filter[50];
 801ca36:	edda 4a32 	vldr	s9, [sl, #200]	; 0xc8
    tmp += input_3[46] * filter[46];
 801ca3a:	eee6 7a8b 	vfma.f32	s15, s13, s22
    tmp += input_3[47] * filter[47];
 801ca3e:	edda 6a2f 	vldr	s13, [sl, #188]	; 0xbc
    tmp += input_3[51] * filter[51];
 801ca42:	eddd eaeb 	vldr	s29, [sp, #940]	; 0x3ac
    tmp += input_3[52] * filter[52];
 801ca46:	eddd daec 	vldr	s27, [sp, #944]	; 0x3b0
    tmp += input_3[53] * filter[53];
 801ca4a:	ed9d 4aed 	vldr	s8, [sp, #948]	; 0x3b4
    tmp += input_3[54] * filter[54];
 801ca4e:	eddd 3aee 	vldr	s7, [sp, #952]	; 0x3b8
    tmp += input_3[55] * filter[55];
 801ca52:	eddd 0aef 	vldr	s1, [sp, #956]	; 0x3bc
    tmp += input_3[47] * filter[47];
 801ca56:	eee6 7a8c 	vfma.f32	s15, s13, s24
    tmp += input_3[48] * filter[48];
 801ca5a:	edda 6a30 	vldr	s13, [sl, #192]	; 0xc0
    tmp += input_3[56] * filter[56];
 801ca5e:	ed9d 0af0 	vldr	s0, [sp, #960]	; 0x3c0
    tmp += input_3[57] * filter[57];
 801ca62:	eddd 9af1 	vldr	s19, [sp, #964]	; 0x3c4
    tmp += input_3[58] * filter[58];
 801ca66:	ed9d aaf2 	vldr	s20, [sp, #968]	; 0x3c8
    tmp += input_3[59] * filter[59];
 801ca6a:	eddd aaf3 	vldr	s21, [sp, #972]	; 0x3cc
    tmp += input_3[60] * filter[60];
 801ca6e:	ed9d eaf4 	vldr	s28, [sp, #976]	; 0x3d0
    tmp += input_3[48] * filter[48];
 801ca72:	eee6 7aab 	vfma.f32	s15, s13, s23
    tmp += input_3[49] * filter[49];
 801ca76:	eddd 6ae9 	vldr	s13, [sp, #932]	; 0x3a4
    tmp += input_3[61] * filter[61];
 801ca7a:	eddd faf5 	vldr	s31, [sp, #980]	; 0x3d4
    tmp += input_3[49] * filter[49];
 801ca7e:	eee6 7a26 	vfma.f32	s15, s12, s13
    tmp += input_3[50] * filter[50];
 801ca82:	ed9d 6aea 	vldr	s12, [sp, #936]	; 0x3a8
 801ca86:	eee4 7a86 	vfma.f32	s15, s9, s12
    tmp += input_3[51] * filter[51];
 801ca8a:	edda 4a33 	vldr	s9, [sl, #204]	; 0xcc
 801ca8e:	eee4 7aae 	vfma.f32	s15, s9, s29
    tmp += input_3[52] * filter[52];
 801ca92:	edda 4a34 	vldr	s9, [sl, #208]	; 0xd0
 801ca96:	eee4 7aad 	vfma.f32	s15, s9, s27
    tmp += input_3[53] * filter[53];
 801ca9a:	edda 4a35 	vldr	s9, [sl, #212]	; 0xd4
 801ca9e:	eee4 7a84 	vfma.f32	s15, s9, s8
    tmp += input_3[54] * filter[54];
 801caa2:	edda 4a36 	vldr	s9, [sl, #216]	; 0xd8
 801caa6:	eee4 7aa3 	vfma.f32	s15, s9, s7
    tmp += input_3[55] * filter[55];
 801caaa:	edda 4a37 	vldr	s9, [sl, #220]	; 0xdc
 801caae:	eee4 7aa0 	vfma.f32	s15, s9, s1
    tmp += input_3[56] * filter[56];
 801cab2:	edda 4a38 	vldr	s9, [sl, #224]	; 0xe0
 801cab6:	eee4 7a80 	vfma.f32	s15, s9, s0
    tmp += input_3[57] * filter[57];
 801caba:	edda 4a39 	vldr	s9, [sl, #228]	; 0xe4
 801cabe:	eee4 7aa9 	vfma.f32	s15, s9, s19
    tmp += input_3[58] * filter[58];
 801cac2:	edda 4a3a 	vldr	s9, [sl, #232]	; 0xe8
 801cac6:	eee4 7a8a 	vfma.f32	s15, s9, s20
    tmp += input_3[59] * filter[59];
 801caca:	edda 4a3b 	vldr	s9, [sl, #236]	; 0xec
 801cace:	eee4 7aaa 	vfma.f32	s15, s9, s21
    tmp += input_3[60] * filter[60];
 801cad2:	edda 4a3c 	vldr	s9, [sl, #240]	; 0xf0
 801cad6:	eee4 7a8e 	vfma.f32	s15, s9, s28
    tmp += input_3[61] * filter[61];
 801cada:	edda 4a3d 	vldr	s9, [sl, #244]	; 0xf4
 801cade:	eee4 7aaf 	vfma.f32	s15, s9, s31
    tmp += input_3[62] * filter[62];
 801cae2:	edda 4a3e 	vldr	s9, [sl, #248]	; 0xf8
 801cae6:	eddd 6af6 	vldr	s13, [sp, #984]	; 0x3d8
    tmp += input_3[63] * filter[63];
 801caea:	ed9d 6af7 	vldr	s12, [sp, #988]	; 0x3dc
    tmp += input_0[0] * filter[0];
 801caee:	ed9a 4a40 	vldr	s8, [sl, #256]	; 0x100
    tmp += input_0[3] * filter[3];
 801caf2:	ed9a 5a43 	vldr	s10, [sl, #268]	; 0x10c
    tmp += input_0[4] * filter[4];
 801caf6:	edda 5a44 	vldr	s11, [sl, #272]	; 0x110
    tmp += input_3[62] * filter[62];
 801cafa:	eee4 7aa6 	vfma.f32	s15, s9, s13
    tmp += input_3[63] * filter[63];
 801cafe:	edda 4a3f 	vldr	s9, [sl, #252]	; 0xfc
    tmp += input_0[1] * filter[1];
 801cb02:	eddd 6aff 	vldr	s13, [sp, #1020]	; 0x3fc
    tmp += input_0[5] * filter[5];
 801cb06:	edda fa45 	vldr	s31, [sl, #276]	; 0x114
    tmp += input_0[6] * filter[6];
 801cb0a:	ed9a fa46 	vldr	s30, [sl, #280]	; 0x118
    tmp += input_0[7] * filter[7];
 801cb0e:	edda ea47 	vldr	s29, [sl, #284]	; 0x11c
    tmp += input_0[8] * filter[8];
 801cb12:	ed9a ea48 	vldr	s28, [sl, #288]	; 0x120
    tmp += input_3[63] * filter[63];
 801cb16:	eee4 7a86 	vfma.f32	s15, s9, s12
    tmp += input_0[2] * filter[2];
 801cb1a:	edda 4a42 	vldr	s9, [sl, #264]	; 0x108
    tmp += input_0[9] * filter[9];
 801cb1e:	edda da49 	vldr	s27, [sl, #292]	; 0x124
    tmp += input_0[10] * filter[10];
 801cb22:	ed9a da4a 	vldr	s26, [sl, #296]	; 0x128
    tmp += input_0[11] * filter[11];
 801cb26:	edda ca4b 	vldr	s25, [sl, #300]	; 0x12c
    tmp += input_0[12] * filter[12];
 801cb2a:	ed9a ca4c 	vldr	s24, [sl, #304]	; 0x130
    tmp += input_0[13] * filter[13];
 801cb2e:	edda ba4d 	vldr	s23, [sl, #308]	; 0x134
    *sum_3 += tmp;
 801cb32:	edc4 7a00 	vstr	s15, [r4]
    tmp += input_2[1] * filter[1];
 801cb36:	f20d 444c 	addw	r4, sp, #1100	; 0x44c
    tmp += input_0[1] * filter[1];
 801cb3a:	edda 7a41 	vldr	s15, [sl, #260]	; 0x104
    tmp += input_2[1] * filter[1];
 801cb3e:	ed94 2a00 	vldr	s4, [r4]
    tmp += input_1[1] * filter[1];
 801cb42:	f20d 4434 	addw	r4, sp, #1076	; 0x434
    tmp += input_0[1] * filter[1];
 801cb46:	ee27 6aa6 	vmul.f32	s12, s15, s13
    tmp += input_0[14] * filter[14];
 801cb4a:	ed9a ba4e 	vldr	s22, [sl, #312]	; 0x138
    tmp += input_2[1] * filter[1];
 801cb4e:	ee67 3a82 	vmul.f32	s7, s15, s4
    tmp += input_0[15] * filter[15];
 801cb52:	edda aa4f 	vldr	s21, [sl, #316]	; 0x13c
    tmp += input_1[1] * filter[1];
 801cb56:	ee67 6aa1 	vmul.f32	s13, s15, s3
    tmp += input_0[16] * filter[16];
 801cb5a:	ed9a aa50 	vldr	s20, [sl, #320]	; 0x140
    tmp += input_3[1] * filter[1];
 801cb5e:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp += input_0[1] * filter[1];
 801cb62:	ed9d 7afe 	vldr	s14, [sp, #1016]	; 0x3f8
    tmp += input_0[17] * filter[17];
 801cb66:	edda 9a51 	vldr	s19, [sl, #324]	; 0x144
    tmp += input_0[1] * filter[1];
 801cb6a:	eea4 6a07 	vfma.f32	s12, s8, s14
    tmp += input_1[1] * filter[1];
 801cb6e:	ed94 7a00 	vldr	s14, [r4]
    tmp += input_2[1] * filter[1];
 801cb72:	f50d 6489 	add.w	r4, sp, #1096	; 0x448
    tmp += input_3[1] * filter[1];
 801cb76:	eee4 7a01 	vfma.f32	s15, s8, s2
    tmp += input_1[1] * filter[1];
 801cb7a:	eee4 6a07 	vfma.f32	s13, s8, s14
    tmp += input_2[2] * filter[2];
 801cb7e:	ed9d 1a83 	vldr	s2, [sp, #524]	; 0x20c
    tmp += input_2[1] * filter[1];
 801cb82:	eeb0 7a63 	vmov.f32	s14, s7
 801cb86:	ed94 2a00 	vldr	s4, [r4]
    tmp += input_0[2] * filter[2];
 801cb8a:	f50d 6480 	add.w	r4, sp, #1024	; 0x400
    tmp += input_2[1] * filter[1];
 801cb8e:	eea4 7a02 	vfma.f32	s14, s8, s4
    tmp += input_0[2] * filter[2];
 801cb92:	ed94 4a00 	vldr	s8, [r4]
    tmp += input_3[2] * filter[2];
 801cb96:	ed9d 2a12 	vldr	s4, [sp, #72]	; 0x48
    tmp += input_0[3] * filter[3];
 801cb9a:	f20d 4404 	addw	r4, sp, #1028	; 0x404
    tmp += input_0[2] * filter[2];
 801cb9e:	eea4 6a84 	vfma.f32	s12, s9, s8
    tmp += input_1[2] * filter[2];
 801cba2:	ed9d 4a49 	vldr	s8, [sp, #292]	; 0x124
    tmp += input_3[2] * filter[2];
 801cba6:	eee4 7a82 	vfma.f32	s15, s9, s4
    tmp += input_1[2] * filter[2];
 801cbaa:	eee4 6a84 	vfma.f32	s13, s9, s8
    tmp += input_2[2] * filter[2];
 801cbae:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_0[3] * filter[3];
 801cbb2:	edd4 4a00 	vldr	s9, [r4]
    tmp += input_1[3] * filter[3];
 801cbb6:	ed9d 4a4a 	vldr	s8, [sp, #296]	; 0x128
    tmp += input_0[4] * filter[4];
 801cbba:	f50d 6481 	add.w	r4, sp, #1032	; 0x408
    tmp += input_0[3] * filter[3];
 801cbbe:	eea5 6a24 	vfma.f32	s12, s10, s9
    tmp += input_2[3] * filter[3];
 801cbc2:	ed9d 1a84 	vldr	s2, [sp, #528]	; 0x210
    tmp += input_0[4] * filter[4];
 801cbc6:	edd4 3a00 	vldr	s7, [r4]
    tmp += input_1[4] * filter[4];
 801cbca:	f50d 6487 	add.w	r4, sp, #1080	; 0x438
    tmp += input_1[3] * filter[3];
 801cbce:	eee5 6a04 	vfma.f32	s13, s10, s8
    tmp += input_3[3] * filter[3];
 801cbd2:	ed9d 2abd 	vldr	s4, [sp, #756]	; 0x2f4
    tmp += input_1[4] * filter[4];
 801cbd6:	ed94 4a00 	vldr	s8, [r4]
    tmp += input_2[4] * filter[4];
 801cbda:	f50d 648a 	add.w	r4, sp, #1104	; 0x450
    tmp += input_2[3] * filter[3];
 801cbde:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_0[24] * filter[24];
 801cbe2:	ed9a 3a58 	vldr	s6, [sl, #352]	; 0x160
    tmp += input_3[3] * filter[3];
 801cbe6:	eee5 7a02 	vfma.f32	s15, s10, s4
    tmp += input_3[4] * filter[4];
 801cbea:	ed9d 5abe 	vldr	s10, [sp, #760]	; 0x2f8
    tmp += input_0[4] * filter[4];
 801cbee:	eea5 6aa3 	vfma.f32	s12, s11, s7
    tmp += input_0[24] * filter[24];
 801cbf2:	ed8d 3a06 	vstr	s6, [sp, #24]
    tmp += input_0[18] * filter[18];
 801cbf6:	ed9a 0a52 	vldr	s0, [sl, #328]	; 0x148
    tmp += input_1[4] * filter[4];
 801cbfa:	eee5 6a84 	vfma.f32	s13, s11, s8
    tmp += input_2[4] * filter[4];
 801cbfe:	ed94 4a00 	vldr	s8, [r4]
    tmp += input_0[5] * filter[5];
 801cc02:	f20d 440c 	addw	r4, sp, #1036	; 0x40c
    tmp += input_0[19] * filter[19];
 801cc06:	edda 0a53 	vldr	s1, [sl, #332]	; 0x14c
    tmp += input_2[4] * filter[4];
 801cc0a:	eea5 7a84 	vfma.f32	s14, s11, s8
    tmp += input_0[20] * filter[20];
 801cc0e:	ed9a 1a54 	vldr	s2, [sl, #336]	; 0x150
    tmp += input_0[5] * filter[5];
 801cc12:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_3[4] * filter[4];
 801cc16:	eee5 7a85 	vfma.f32	s15, s11, s10
    tmp += input_2[5] * filter[5];
 801cc1a:	f20d 4454 	addw	r4, sp, #1108	; 0x454
    tmp += input_0[21] * filter[21];
 801cc1e:	edda 1a55 	vldr	s3, [sl, #340]	; 0x154
    tmp += input_0[5] * filter[5];
 801cc22:	eeaf 6a83 	vfma.f32	s12, s31, s6
    tmp += input_1[5] * filter[5];
 801cc26:	ed9d 3a4b 	vldr	s6, [sp, #300]	; 0x12c
    tmp += input_0[22] * filter[22];
 801cc2a:	ed9a 2a56 	vldr	s4, [sl, #344]	; 0x158
    tmp += input_1[5] * filter[5];
 801cc2e:	eeef 6a83 	vfma.f32	s13, s31, s6
    tmp += input_2[5] * filter[5];
 801cc32:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_3[5] * filter[5];
 801cc36:	f50d 648c 	add.w	r4, sp, #1120	; 0x460
    tmp += input_0[23] * filter[23];
 801cc3a:	edda 2a57 	vldr	s5, [sl, #348]	; 0x15c
    tmp += input_2[5] * filter[5];
 801cc3e:	eeaf 7a83 	vfma.f32	s14, s31, s6
    tmp += input_0[25] * filter[25];
 801cc42:	edda 3a59 	vldr	s7, [sl, #356]	; 0x164
    tmp += input_3[5] * filter[5];
 801cc46:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_0[6] * filter[6];
 801cc4a:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
    tmp += input_0[26] * filter[26];
 801cc4e:	ed9a 4a5a 	vldr	s8, [sl, #360]	; 0x168
    tmp += input_3[5] * filter[5];
 801cc52:	eeef 7a83 	vfma.f32	s15, s31, s6
    tmp += input_0[6] * filter[6];
 801cc56:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_0[7] * filter[7];
 801cc5a:	f20d 4414 	addw	r4, sp, #1044	; 0x414
    tmp += input_0[27] * filter[27];
 801cc5e:	edda 4a5b 	vldr	s9, [sl, #364]	; 0x16c
    tmp += input_0[6] * filter[6];
 801cc62:	eeaf 6a03 	vfma.f32	s12, s30, s6
    tmp += input_1[6] * filter[6];
 801cc66:	ed9d 3a4c 	vldr	s6, [sp, #304]	; 0x130
    tmp += input_0[28] * filter[28];
 801cc6a:	ed9a 5a5c 	vldr	s10, [sl, #368]	; 0x170
    tmp += input_1[6] * filter[6];
 801cc6e:	eeef 6a03 	vfma.f32	s13, s30, s6
    tmp += input_2[6] * filter[6];
 801cc72:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
    tmp += input_0[29] * filter[29];
 801cc76:	edda 5a5d 	vldr	s11, [sl, #372]	; 0x174
    tmp += input_2[6] * filter[6];
 801cc7a:	eeaf 7a03 	vfma.f32	s14, s30, s6
    tmp += input_3[6] * filter[6];
 801cc7e:	ed9d 3abf 	vldr	s6, [sp, #764]	; 0x2fc
    tmp += input_0[33] * filter[33];
 801cc82:	edda fa61 	vldr	s31, [sl, #388]	; 0x184
    tmp += input_3[6] * filter[6];
 801cc86:	eeef 7a03 	vfma.f32	s15, s30, s6
    tmp += input_0[7] * filter[7];
 801cc8a:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_0[39] * filter[39];
 801cc8e:	ed9a fa67 	vldr	s30, [sl, #412]	; 0x19c
    tmp += input_0[8] * filter[8];
 801cc92:	f50d 6483 	add.w	r4, sp, #1048	; 0x418
    tmp += input_0[7] * filter[7];
 801cc96:	eeae 6a83 	vfma.f32	s12, s29, s6
    tmp += input_1[7] * filter[7];
 801cc9a:	ed9d 3a4d 	vldr	s6, [sp, #308]	; 0x134
 801cc9e:	eeee 6a83 	vfma.f32	s13, s29, s6
    tmp += input_2[7] * filter[7];
 801cca2:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 801cca6:	eeae 7a83 	vfma.f32	s14, s29, s6
    tmp += input_3[7] * filter[7];
 801ccaa:	ed9d 3ac0 	vldr	s6, [sp, #768]	; 0x300
 801ccae:	eeee 7a83 	vfma.f32	s15, s29, s6
    tmp += input_0[8] * filter[8];
 801ccb2:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_0[9] * filter[9];
 801ccb6:	f20d 441c 	addw	r4, sp, #1052	; 0x41c
    tmp += input_0[45] * filter[45];
 801ccba:	edda ea6d 	vldr	s29, [sl, #436]	; 0x1b4
    tmp += input_0[8] * filter[8];
 801ccbe:	eeae 6a03 	vfma.f32	s12, s28, s6
    tmp += input_1[8] * filter[8];
 801ccc2:	ed9d 3a4e 	vldr	s6, [sp, #312]	; 0x138
 801ccc6:	eeee 6a03 	vfma.f32	s13, s28, s6
    tmp += input_2[8] * filter[8];
 801ccca:	ed9d 3a87 	vldr	s6, [sp, #540]	; 0x21c
 801ccce:	eeae 7a03 	vfma.f32	s14, s28, s6
    tmp += input_3[8] * filter[8];
 801ccd2:	ed9d 3ac1 	vldr	s6, [sp, #772]	; 0x304
 801ccd6:	eeee 7a03 	vfma.f32	s15, s28, s6
    tmp += input_0[9] * filter[9];
 801ccda:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_1[10] * filter[10];
 801ccde:	f20d 443c 	addw	r4, sp, #1084	; 0x43c
    tmp += input_0[51] * filter[51];
 801cce2:	ed9a ea73 	vldr	s28, [sl, #460]	; 0x1cc
    tmp += input_0[9] * filter[9];
 801cce6:	eead 6a83 	vfma.f32	s12, s27, s6
    tmp += input_1[9] * filter[9];
 801ccea:	ed9d 3a4f 	vldr	s6, [sp, #316]	; 0x13c
 801ccee:	eeed 6a83 	vfma.f32	s13, s27, s6
    tmp += input_2[9] * filter[9];
 801ccf2:	ed9d 3a88 	vldr	s6, [sp, #544]	; 0x220
 801ccf6:	eead 7a83 	vfma.f32	s14, s27, s6
    tmp += input_3[9] * filter[9];
 801ccfa:	ed9d 3ac2 	vldr	s6, [sp, #776]	; 0x308
 801ccfe:	eeed 7a83 	vfma.f32	s15, s27, s6
    tmp += input_0[10] * filter[10];
 801cd02:	ed9d 3a15 	vldr	s6, [sp, #84]	; 0x54
    tmp += input_1[10] * filter[10];
 801cd06:	edd4 da00 	vldr	s27, [r4]
    tmp += input_0[20] * filter[20];
 801cd0a:	f50d 6484 	add.w	r4, sp, #1056	; 0x420
    tmp += input_0[10] * filter[10];
 801cd0e:	eead 6a03 	vfma.f32	s12, s26, s6
    tmp += input_3[10] * filter[10];
 801cd12:	ed9d 3ac3 	vldr	s6, [sp, #780]	; 0x30c
    tmp += input_1[10] * filter[10];
 801cd16:	eeed 6a2d 	vfma.f32	s13, s26, s27
    tmp += input_2[10] * filter[10];
 801cd1a:	eddd da89 	vldr	s27, [sp, #548]	; 0x224
 801cd1e:	eead 7a2d 	vfma.f32	s14, s26, s27
    tmp += input_0[62] * filter[62];
 801cd22:	edda da7e 	vldr	s27, [sl, #504]	; 0x1f8
    tmp += input_3[10] * filter[10];
 801cd26:	eeed 7a03 	vfma.f32	s15, s26, s6
    tmp += input_0[11] * filter[11];
 801cd2a:	ed9d 3a16 	vldr	s6, [sp, #88]	; 0x58
    tmp += input_0[63] * filter[63];
 801cd2e:	ed9a da7f 	vldr	s26, [sl, #508]	; 0x1fc
    tmp += input_0[11] * filter[11];
 801cd32:	eeac 6a83 	vfma.f32	s12, s25, s6
    tmp += input_1[11] * filter[11];
 801cd36:	ed9d 3a50 	vldr	s6, [sp, #320]	; 0x140
 801cd3a:	eeec 6a83 	vfma.f32	s13, s25, s6
    tmp += input_2[11] * filter[11];
 801cd3e:	ed9d 3a8a 	vldr	s6, [sp, #552]	; 0x228
 801cd42:	eeac 7a83 	vfma.f32	s14, s25, s6
    tmp += input_3[11] * filter[11];
 801cd46:	ed9d 3ac4 	vldr	s6, [sp, #784]	; 0x310
 801cd4a:	eeec 7a83 	vfma.f32	s15, s25, s6
    tmp += input_0[12] * filter[12];
 801cd4e:	ed9d 3a17 	vldr	s6, [sp, #92]	; 0x5c
    tmp += input_1[12] * filter[12];
 801cd52:	eddd ca51 	vldr	s25, [sp, #324]	; 0x144
    tmp += input_0[12] * filter[12];
 801cd56:	eeac 6a03 	vfma.f32	s12, s24, s6
    tmp += input_0[13] * filter[13];
 801cd5a:	ed9d 3a18 	vldr	s6, [sp, #96]	; 0x60
    tmp += input_1[12] * filter[12];
 801cd5e:	eeec 6a2c 	vfma.f32	s13, s24, s25
    tmp += input_2[12] * filter[12];
 801cd62:	eddd ca8b 	vldr	s25, [sp, #556]	; 0x22c
 801cd66:	eeac 7a2c 	vfma.f32	s14, s24, s25
    tmp += input_3[12] * filter[12];
 801cd6a:	eddd cac5 	vldr	s25, [sp, #788]	; 0x314
 801cd6e:	eeec 7a2c 	vfma.f32	s15, s24, s25
    tmp += input_1[13] * filter[13];
 801cd72:	ed9d ca52 	vldr	s24, [sp, #328]	; 0x148
    tmp += input_0[13] * filter[13];
 801cd76:	eeab 6a83 	vfma.f32	s12, s23, s6
    tmp += input_0[14] * filter[14];
 801cd7a:	ed9d 3a19 	vldr	s6, [sp, #100]	; 0x64
    tmp += input_1[13] * filter[13];
 801cd7e:	eeeb 6a8c 	vfma.f32	s13, s23, s24
    tmp += input_2[13] * filter[13];
 801cd82:	ed9d ca8c 	vldr	s24, [sp, #560]	; 0x230
 801cd86:	eeab 7a8c 	vfma.f32	s14, s23, s24
    tmp += input_3[13] * filter[13];
 801cd8a:	ed9d cac6 	vldr	s24, [sp, #792]	; 0x318
 801cd8e:	eeeb 7a8c 	vfma.f32	s15, s23, s24
    tmp += input_1[14] * filter[14];
 801cd92:	eddd ba53 	vldr	s23, [sp, #332]	; 0x14c
    tmp += input_0[14] * filter[14];
 801cd96:	eeab 6a03 	vfma.f32	s12, s22, s6
    tmp += input_0[15] * filter[15];
 801cd9a:	ed9d 3a1a 	vldr	s6, [sp, #104]	; 0x68
    tmp += input_1[14] * filter[14];
 801cd9e:	eeeb 6a2b 	vfma.f32	s13, s22, s23
    tmp += input_2[14] * filter[14];
 801cda2:	eddd ba8d 	vldr	s23, [sp, #564]	; 0x234
 801cda6:	eeab 7a2b 	vfma.f32	s14, s22, s23
    tmp += input_3[14] * filter[14];
 801cdaa:	eddd bac7 	vldr	s23, [sp, #796]	; 0x31c
 801cdae:	eeeb 7a2b 	vfma.f32	s15, s22, s23
    tmp += input_1[15] * filter[15];
 801cdb2:	ed9d ba54 	vldr	s22, [sp, #336]	; 0x150
    tmp += input_0[15] * filter[15];
 801cdb6:	eeaa 6a83 	vfma.f32	s12, s21, s6
    tmp += input_0[16] * filter[16];
 801cdba:	ed9d 3a1b 	vldr	s6, [sp, #108]	; 0x6c
    tmp += input_1[15] * filter[15];
 801cdbe:	eeea 6a8b 	vfma.f32	s13, s21, s22
    tmp += input_2[15] * filter[15];
 801cdc2:	ed9d ba8e 	vldr	s22, [sp, #568]	; 0x238
 801cdc6:	eeaa 7a8b 	vfma.f32	s14, s21, s22
    tmp += input_3[15] * filter[15];
 801cdca:	ed9d bac8 	vldr	s22, [sp, #800]	; 0x320
 801cdce:	eeea 7a8b 	vfma.f32	s15, s21, s22
    tmp += input_1[16] * filter[16];
 801cdd2:	eddd aa55 	vldr	s21, [sp, #340]	; 0x154
    tmp += input_0[16] * filter[16];
 801cdd6:	eeaa 6a03 	vfma.f32	s12, s20, s6
    tmp += input_0[17] * filter[17];
 801cdda:	ed9d 3a1f 	vldr	s6, [sp, #124]	; 0x7c
    tmp += input_1[16] * filter[16];
 801cdde:	eeea 6a2a 	vfma.f32	s13, s20, s21
    tmp += input_2[16] * filter[16];
 801cde2:	eddd aa8f 	vldr	s21, [sp, #572]	; 0x23c
 801cde6:	eeaa 7a2a 	vfma.f32	s14, s20, s21
    tmp += input_3[16] * filter[16];
 801cdea:	eddd aac9 	vldr	s21, [sp, #804]	; 0x324
 801cdee:	eeea 7a2a 	vfma.f32	s15, s20, s21
    tmp += input_1[17] * filter[17];
 801cdf2:	ed9d aa56 	vldr	s20, [sp, #344]	; 0x158
    tmp += input_0[17] * filter[17];
 801cdf6:	eea9 6a83 	vfma.f32	s12, s19, s6
    tmp += input_0[18] * filter[18];
 801cdfa:	ed9d 3a20 	vldr	s6, [sp, #128]	; 0x80
    tmp += input_1[17] * filter[17];
 801cdfe:	eee9 6a8a 	vfma.f32	s13, s19, s20
    tmp += input_2[17] * filter[17];
 801ce02:	ed9d aa90 	vldr	s20, [sp, #576]	; 0x240
 801ce06:	eea9 7a8a 	vfma.f32	s14, s19, s20
    tmp += input_3[17] * filter[17];
 801ce0a:	ed9d aaca 	vldr	s20, [sp, #808]	; 0x328
 801ce0e:	eee9 7a8a 	vfma.f32	s15, s19, s20
    tmp += input_1[18] * filter[18];
 801ce12:	eddd 9a57 	vldr	s19, [sp, #348]	; 0x15c
    tmp += input_0[18] * filter[18];
 801ce16:	eea0 6a03 	vfma.f32	s12, s0, s6
    tmp += input_0[19] * filter[19];
 801ce1a:	ed9d 3a21 	vldr	s6, [sp, #132]	; 0x84
    tmp += input_1[18] * filter[18];
 801ce1e:	eee0 6a29 	vfma.f32	s13, s0, s19
    tmp += input_2[18] * filter[18];
 801ce22:	eddd 9a91 	vldr	s19, [sp, #580]	; 0x244
 801ce26:	eea0 7a29 	vfma.f32	s14, s0, s19
    tmp += input_3[18] * filter[18];
 801ce2a:	eddd 9acb 	vldr	s19, [sp, #812]	; 0x32c
 801ce2e:	eee0 7a29 	vfma.f32	s15, s0, s19
    tmp += input_1[19] * filter[19];
 801ce32:	ed9d 0a58 	vldr	s0, [sp, #352]	; 0x160
    tmp += input_0[19] * filter[19];
 801ce36:	eea0 6a83 	vfma.f32	s12, s1, s6
    tmp += input_0[20] * filter[20];
 801ce3a:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_1[19] * filter[19];
 801ce3e:	eee0 6a80 	vfma.f32	s13, s1, s0
    tmp += input_2[19] * filter[19];
 801ce42:	ed9d 0a92 	vldr	s0, [sp, #584]	; 0x248
    tmp += input_0[21] * filter[21];
 801ce46:	f20d 4424 	addw	r4, sp, #1060	; 0x424
    tmp += input_2[19] * filter[19];
 801ce4a:	eea0 7a80 	vfma.f32	s14, s1, s0
    tmp += input_3[19] * filter[19];
 801ce4e:	ed9d 0acc 	vldr	s0, [sp, #816]	; 0x330
 801ce52:	eee0 7a80 	vfma.f32	s15, s1, s0
    tmp += input_1[20] * filter[20];
 801ce56:	eddd 0a59 	vldr	s1, [sp, #356]	; 0x164
    tmp += input_0[20] * filter[20];
 801ce5a:	eea1 6a03 	vfma.f32	s12, s2, s6
    tmp += input_0[21] * filter[21];
 801ce5e:	ed94 3a00 	vldr	s6, [r4]
    tmp += input_1[20] * filter[20];
 801ce62:	eee1 6a20 	vfma.f32	s13, s2, s1
    tmp += input_2[20] * filter[20];
 801ce66:	eddd 0a93 	vldr	s1, [sp, #588]	; 0x24c
    tmp += input_1[27] * filter[27];
 801ce6a:	f50d 6488 	add.w	r4, sp, #1088	; 0x440
    tmp += input_2[20] * filter[20];
 801ce6e:	eea1 7a20 	vfma.f32	s14, s2, s1
    tmp += input_3[20] * filter[20];
 801ce72:	eddd 0acd 	vldr	s1, [sp, #820]	; 0x334
 801ce76:	eee1 7a20 	vfma.f32	s15, s2, s1
    tmp += input_2[21] * filter[21];
 801ce7a:	ed9d 1a94 	vldr	s2, [sp, #592]	; 0x250
    tmp += input_0[21] * filter[21];
 801ce7e:	eea1 6a83 	vfma.f32	s12, s3, s6
    tmp += input_1[21] * filter[21];
 801ce82:	ed9d 3a5a 	vldr	s6, [sp, #360]	; 0x168
    tmp += input_3[21] * filter[21];
 801ce86:	eddd 0ace 	vldr	s1, [sp, #824]	; 0x338
    tmp += input_1[21] * filter[21];
 801ce8a:	eee1 6a83 	vfma.f32	s13, s3, s6
    tmp += input_2[21] * filter[21];
 801ce8e:	eea1 7a81 	vfma.f32	s14, s3, s2
    tmp += input_3[21] * filter[21];
 801ce92:	eee1 7aa0 	vfma.f32	s15, s3, s1
    tmp += input_0[22] * filter[22];
 801ce96:	eddd 1a22 	vldr	s3, [sp, #136]	; 0x88
    tmp += input_1[22] * filter[22];
 801ce9a:	ed9d 3a5b 	vldr	s6, [sp, #364]	; 0x16c
    tmp += input_0[22] * filter[22];
 801ce9e:	eea2 6a21 	vfma.f32	s12, s4, s3
    tmp += input_2[22] * filter[22];
 801cea2:	ed9d 1a95 	vldr	s2, [sp, #596]	; 0x254
    tmp += input_1[22] * filter[22];
 801cea6:	eee2 6a03 	vfma.f32	s13, s4, s6
    tmp += input_3[22] * filter[22];
 801ceaa:	eddd 0acf 	vldr	s1, [sp, #828]	; 0x33c
    tmp += input_2[22] * filter[22];
 801ceae:	eea2 7a01 	vfma.f32	s14, s4, s2
    tmp += input_0[23] * filter[23];
 801ceb2:	eddd 1a23 	vldr	s3, [sp, #140]	; 0x8c
    tmp += input_1[23] * filter[23];
 801ceb6:	ed9d 3a5c 	vldr	s6, [sp, #368]	; 0x170
    tmp += input_3[22] * filter[22];
 801ceba:	eee2 7a20 	vfma.f32	s15, s4, s1
    tmp += input_2[23] * filter[23];
 801cebe:	ed9d 1a96 	vldr	s2, [sp, #600]	; 0x258
    tmp += input_3[23] * filter[23];
 801cec2:	ed9d 2ad0 	vldr	s4, [sp, #832]	; 0x340
    tmp += input_0[23] * filter[23];
 801cec6:	eea2 6aa1 	vfma.f32	s12, s5, s3
    tmp += input_0[24] * filter[24];
 801ceca:	eddd 1a24 	vldr	s3, [sp, #144]	; 0x90
    tmp += input_1[23] * filter[23];
 801cece:	eee2 6a83 	vfma.f32	s13, s5, s6
    tmp += input_1[24] * filter[24];
 801ced2:	ed9d 3a5d 	vldr	s6, [sp, #372]	; 0x174
    tmp += input_2[23] * filter[23];
 801ced6:	eea2 7a81 	vfma.f32	s14, s5, s2
    tmp += input_2[24] * filter[24];
 801ceda:	ed9d 1a97 	vldr	s2, [sp, #604]	; 0x25c
    tmp += input_3[25] * filter[25];
 801cede:	ed9d bad2 	vldr	s22, [sp, #840]	; 0x348
    tmp += input_3[23] * filter[23];
 801cee2:	eee2 7a82 	vfma.f32	s15, s5, s4
    tmp += input_0[24] * filter[24];
 801cee6:	eddd 2a06 	vldr	s5, [sp, #24]
    tmp += input_3[26] * filter[26];
 801ceea:	eddd bad3 	vldr	s23, [sp, #844]	; 0x34c
    tmp += input_0[24] * filter[24];
 801ceee:	eea2 6aa1 	vfma.f32	s12, s5, s3
    tmp += input_0[25] * filter[25];
 801cef2:	eddd 1a25 	vldr	s3, [sp, #148]	; 0x94
    tmp += input_1[24] * filter[24];
 801cef6:	eee2 6a83 	vfma.f32	s13, s5, s6
    tmp += input_3[27] * filter[27];
 801cefa:	ed9d cad4 	vldr	s24, [sp, #848]	; 0x350
    tmp += input_2[24] * filter[24];
 801cefe:	eeb0 3a62 	vmov.f32	s6, s5
 801cf02:	eea2 7a81 	vfma.f32	s14, s5, s2
    tmp += input_3[24] * filter[24];
 801cf06:	eddd 2ad1 	vldr	s5, [sp, #836]	; 0x344
    tmp += input_2[25] * filter[25];
 801cf0a:	ed9d 1a98 	vldr	s2, [sp, #608]	; 0x260
    tmp += input_3[24] * filter[24];
 801cf0e:	eee3 7a22 	vfma.f32	s15, s6, s5
    tmp += input_1[25] * filter[25];
 801cf12:	ed9d 3a5e 	vldr	s6, [sp, #376]	; 0x178
    tmp += input_0[25] * filter[25];
 801cf16:	eea3 6aa1 	vfma.f32	s12, s7, s3
    tmp += input_0[26] * filter[26];
 801cf1a:	eddd 1a26 	vldr	s3, [sp, #152]	; 0x98
    tmp += input_1[25] * filter[25];
 801cf1e:	eee3 6a83 	vfma.f32	s13, s7, s6
    tmp += input_2[25] * filter[25];
 801cf22:	eea3 7a81 	vfma.f32	s14, s7, s2
    tmp += input_2[26] * filter[26];
 801cf26:	ed9d 1a99 	vldr	s2, [sp, #612]	; 0x264
    tmp += input_3[25] * filter[25];
 801cf2a:	eee3 7a8b 	vfma.f32	s15, s7, s22
    tmp += input_1[26] * filter[26];
 801cf2e:	eddd 3a5f 	vldr	s7, [sp, #380]	; 0x17c
    tmp += input_0[26] * filter[26];
 801cf32:	eea4 6a21 	vfma.f32	s12, s8, s3
    tmp += input_0[27] * filter[27];
 801cf36:	eddd 1a27 	vldr	s3, [sp, #156]	; 0x9c
    tmp += input_1[26] * filter[26];
 801cf3a:	eee4 6a23 	vfma.f32	s13, s8, s7
    tmp += input_2[26] * filter[26];
 801cf3e:	eea4 7a01 	vfma.f32	s14, s8, s2
    tmp += input_3[26] * filter[26];
 801cf42:	eee4 7a2b 	vfma.f32	s15, s8, s23
    tmp += input_1[27] * filter[27];
 801cf46:	ed94 4a00 	vldr	s8, [r4]
    tmp += input_0[27] * filter[27];
 801cf4a:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_2[27] * filter[27];
 801cf4e:	f50d 648b 	add.w	r4, sp, #1112	; 0x458
    tmp += input_1[27] * filter[27];
 801cf52:	eee4 6a84 	vfma.f32	s13, s9, s8
    tmp += input_2[27] * filter[27];
 801cf56:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_0[28] * filter[28];
 801cf5a:	f50d 6485 	add.w	r4, sp, #1064	; 0x428
    tmp += input_2[27] * filter[27];
 801cf5e:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_0[28] * filter[28];
 801cf62:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_3[27] * filter[27];
 801cf66:	eee4 7a8c 	vfma.f32	s15, s9, s24
    tmp += input_1[28] * filter[28];
 801cf6a:	eddd 4a60 	vldr	s9, [sp, #384]	; 0x180
    tmp += input_0[28] * filter[28];
 801cf6e:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_2[28] * filter[28];
 801cf72:	ed9d 1a9a 	vldr	s2, [sp, #616]	; 0x268
    tmp += input_1[28] * filter[28];
 801cf76:	eee5 6a24 	vfma.f32	s13, s10, s9
    tmp += input_3[28] * filter[28];
 801cf7a:	eddd 4ad5 	vldr	s9, [sp, #852]	; 0x354
    tmp += input_0[29] * filter[29];
 801cf7e:	eddd 1a28 	vldr	s3, [sp, #160]	; 0xa0
    tmp += input_2[29] * filter[29];
 801cf82:	f20d 445c 	addw	r4, sp, #1116	; 0x45c
    tmp += input_2[28] * filter[28];
 801cf86:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[29] * filter[29];
 801cf8a:	ed94 1a00 	vldr	s2, [r4]
    tmp += input_3[28] * filter[28];
 801cf8e:	eee5 7a24 	vfma.f32	s15, s10, s9
    tmp += input_1[29] * filter[29];
 801cf92:	ed9d 5a61 	vldr	s10, [sp, #388]	; 0x184
    tmp += input_0[29] * filter[29];
 801cf96:	eea5 6aa1 	vfma.f32	s12, s11, s3
    tmp += input_0[62] * filter[62];
 801cf9a:	f20d 442c 	addw	r4, sp, #1068	; 0x42c
    tmp += input_1[29] * filter[29];
 801cf9e:	eee5 6a85 	vfma.f32	s13, s11, s10
    tmp += input_3[29] * filter[29];
 801cfa2:	ed9d 5ad6 	vldr	s10, [sp, #856]	; 0x358
    tmp += input_0[30] * filter[30];
 801cfa6:	ed9a 3a5e 	vldr	s6, [sl, #376]	; 0x178
 801cfaa:	eddd 1a29 	vldr	s3, [sp, #164]	; 0xa4
    tmp += input_2[29] * filter[29];
 801cfae:	eea5 7a81 	vfma.f32	s14, s11, s2
    tmp += input_2[30] * filter[30];
 801cfb2:	ed9d 1a9b 	vldr	s2, [sp, #620]	; 0x26c
    tmp += input_3[29] * filter[29];
 801cfb6:	eee5 7a85 	vfma.f32	s15, s11, s10
    tmp += input_1[30] * filter[30];
 801cfba:	eddd 5a62 	vldr	s11, [sp, #392]	; 0x188
    tmp += input_0[30] * filter[30];
 801cfbe:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_3[30] * filter[30];
 801cfc2:	ed9d 5ad7 	vldr	s10, [sp, #860]	; 0x35c
    tmp += input_1[30] * filter[30];
 801cfc6:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_0[31] * filter[31];
 801cfca:	eddd 1a2a 	vldr	s3, [sp, #168]	; 0xa8
    tmp += input_1[31] * filter[31];
 801cfce:	eddd 5a63 	vldr	s11, [sp, #396]	; 0x18c
    tmp += input_3[31] * filter[31];
 801cfd2:	eddd cad8 	vldr	s25, [sp, #864]	; 0x360
    tmp += input_2[30] * filter[30];
 801cfd6:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[31] * filter[31];
 801cfda:	ed9d 1a9c 	vldr	s2, [sp, #624]	; 0x270
    tmp += input_3[30] * filter[30];
 801cfde:	eee3 7a05 	vfma.f32	s15, s6, s10
    tmp += input_0[31] * filter[31];
 801cfe2:	ed9a 3a5f 	vldr	s6, [sl, #380]	; 0x17c
    tmp += input_3[32] * filter[32];
 801cfe6:	ed9d 5ad9 	vldr	s10, [sp, #868]	; 0x364
    tmp += input_0[31] * filter[31];
 801cfea:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[32] * filter[32];
 801cfee:	eddd 1a2b 	vldr	s3, [sp, #172]	; 0xac
    tmp += input_1[31] * filter[31];
 801cff2:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[32] * filter[32];
 801cff6:	eddd 5a64 	vldr	s11, [sp, #400]	; 0x190
    tmp += input_3[34] * filter[34];
 801cffa:	eddd 3adb 	vldr	s7, [sp, #876]	; 0x36c
    tmp += input_2[31] * filter[31];
 801cffe:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[32] * filter[32];
 801d002:	ed9d 1a9d 	vldr	s2, [sp, #628]	; 0x274
    tmp += input_3[31] * filter[31];
 801d006:	eee3 7a2c 	vfma.f32	s15, s6, s25
    tmp += input_0[32] * filter[32];
 801d00a:	ed9a 3a60 	vldr	s6, [sl, #384]	; 0x180
    tmp += input_3[35] * filter[35];
 801d00e:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
    tmp += input_0[32] * filter[32];
 801d012:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[33] * filter[33];
 801d016:	eddd 1a2c 	vldr	s3, [sp, #176]	; 0xb0
    tmp += input_1[32] * filter[32];
 801d01a:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[33] * filter[33];
 801d01e:	eddd 5a65 	vldr	s11, [sp, #404]	; 0x194
    tmp += input_2[32] * filter[32];
 801d022:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[33] * filter[33];
 801d026:	ed9d 1a9e 	vldr	s2, [sp, #632]	; 0x278
    tmp += input_3[32] * filter[32];
 801d02a:	eee3 7a05 	vfma.f32	s15, s6, s10
    tmp += input_3[33] * filter[33];
 801d02e:	ed9d 5ada 	vldr	s10, [sp, #872]	; 0x368
    tmp += input_0[34] * filter[34];
 801d032:	ed9a 3a62 	vldr	s6, [sl, #392]	; 0x188
    tmp += input_0[33] * filter[33];
 801d036:	eeaf 6aa1 	vfma.f32	s12, s31, s3
    tmp += input_0[34] * filter[34];
 801d03a:	eddd 1a2d 	vldr	s3, [sp, #180]	; 0xb4
    tmp += input_1[33] * filter[33];
 801d03e:	eeef 6aa5 	vfma.f32	s13, s31, s11
    tmp += input_1[34] * filter[34];
 801d042:	eddd 5a66 	vldr	s11, [sp, #408]	; 0x198
    tmp += input_2[33] * filter[33];
 801d046:	eeaf 7a81 	vfma.f32	s14, s31, s2
    tmp += input_2[34] * filter[34];
 801d04a:	ed9d 1a9f 	vldr	s2, [sp, #636]	; 0x27c
    tmp += input_3[33] * filter[33];
 801d04e:	eeef 7a85 	vfma.f32	s15, s31, s10
    tmp += input_0[34] * filter[34];
 801d052:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[35] * filter[35];
 801d056:	eddd 1a2e 	vldr	s3, [sp, #184]	; 0xb8
    tmp += input_1[34] * filter[34];
 801d05a:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[35] * filter[35];
 801d05e:	eddd 5a67 	vldr	s11, [sp, #412]	; 0x19c
    tmp += input_2[34] * filter[34];
 801d062:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[35] * filter[35];
 801d066:	ed9d 1aa0 	vldr	s2, [sp, #640]	; 0x280
    tmp += input_3[34] * filter[34];
 801d06a:	eee3 7a23 	vfma.f32	s15, s6, s7
    tmp += input_0[35] * filter[35];
 801d06e:	ed9a 3a63 	vldr	s6, [sl, #396]	; 0x18c
 801d072:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[36] * filter[36];
 801d076:	eddd 1a2f 	vldr	s3, [sp, #188]	; 0xbc
    tmp += input_1[35] * filter[35];
 801d07a:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[36] * filter[36];
 801d07e:	eddd 5a68 	vldr	s11, [sp, #416]	; 0x1a0
    tmp += input_2[35] * filter[35];
 801d082:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_3[35] * filter[35];
 801d086:	eee3 7a00 	vfma.f32	s15, s6, s0
    tmp += input_0[36] * filter[36];
 801d08a:	ed9a 3a64 	vldr	s6, [sl, #400]	; 0x190
    tmp += input_2[36] * filter[36];
 801d08e:	ed9d 1aa1 	vldr	s2, [sp, #644]	; 0x284
    tmp += input_0[36] * filter[36];
 801d092:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_3[36] * filter[36];
 801d096:	eddd 9adc 	vldr	s19, [sp, #880]	; 0x370
    tmp += input_1[36] * filter[36];
 801d09a:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_0[37] * filter[37];
 801d09e:	eddd 1a30 	vldr	s3, [sp, #192]	; 0xc0
    tmp += input_1[37] * filter[37];
 801d0a2:	eddd 5a69 	vldr	s11, [sp, #420]	; 0x1a4
    tmp += input_2[36] * filter[36];
 801d0a6:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_3[37] * filter[37];
 801d0aa:	ed9d aadd 	vldr	s20, [sp, #884]	; 0x374
    tmp += input_3[36] * filter[36];
 801d0ae:	eee3 7a29 	vfma.f32	s15, s6, s19
    tmp += input_0[37] * filter[37];
 801d0b2:	ed9a 3a65 	vldr	s6, [sl, #404]	; 0x194
    tmp += input_2[37] * filter[37];
 801d0b6:	ed9d 1aa2 	vldr	s2, [sp, #648]	; 0x288
    tmp += input_0[37] * filter[37];
 801d0ba:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[38] * filter[38];
 801d0be:	eddd 1a31 	vldr	s3, [sp, #196]	; 0xc4
    tmp += input_1[37] * filter[37];
 801d0c2:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_3[38] * filter[38];
 801d0c6:	eddd aade 	vldr	s21, [sp, #888]	; 0x378
    tmp += input_1[38] * filter[38];
 801d0ca:	eddd 5a6a 	vldr	s11, [sp, #424]	; 0x1a8
    tmp += input_2[37] * filter[37];
 801d0ce:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[38] * filter[38];
 801d0d2:	ed9d 1aa3 	vldr	s2, [sp, #652]	; 0x28c
    tmp += input_3[37] * filter[37];
 801d0d6:	eee3 7a0a 	vfma.f32	s15, s6, s20
    tmp += input_0[38] * filter[38];
 801d0da:	ed9a 3a66 	vldr	s6, [sl, #408]	; 0x198
    tmp += input_3[39] * filter[39];
 801d0de:	ed9d 5adf 	vldr	s10, [sp, #892]	; 0x37c
    tmp += input_0[38] * filter[38];
 801d0e2:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[39] * filter[39];
 801d0e6:	eddd 1a32 	vldr	s3, [sp, #200]	; 0xc8
    tmp += input_1[38] * filter[38];
 801d0ea:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[39] * filter[39];
 801d0ee:	eddd 5a6b 	vldr	s11, [sp, #428]	; 0x1ac
    tmp += input_3[41] * filter[41];
 801d0f2:	eddd 4ae1 	vldr	s9, [sp, #900]	; 0x384
    tmp += input_2[38] * filter[38];
 801d0f6:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[39] * filter[39];
 801d0fa:	ed9d 1aa4 	vldr	s2, [sp, #656]	; 0x290
    tmp += input_3[38] * filter[38];
 801d0fe:	eee3 7a2a 	vfma.f32	s15, s6, s21
    tmp += input_0[40] * filter[40];
 801d102:	ed9a 3a68 	vldr	s6, [sl, #416]	; 0x1a0
    tmp += input_3[42] * filter[42];
 801d106:	eddd cae2 	vldr	s25, [sp, #904]	; 0x388
    tmp += input_0[39] * filter[39];
 801d10a:	eeaf 6a21 	vfma.f32	s12, s30, s3
    tmp += input_0[40] * filter[40];
 801d10e:	eddd 1a33 	vldr	s3, [sp, #204]	; 0xcc
    tmp += input_1[39] * filter[39];
 801d112:	eeef 6a25 	vfma.f32	s13, s30, s11
    tmp += input_1[40] * filter[40];
 801d116:	eddd 5a6c 	vldr	s11, [sp, #432]	; 0x1b0
    tmp += input_2[39] * filter[39];
 801d11a:	eeaf 7a01 	vfma.f32	s14, s30, s2
    tmp += input_2[40] * filter[40];
 801d11e:	ed9d 1aa5 	vldr	s2, [sp, #660]	; 0x294
    tmp += input_3[39] * filter[39];
 801d122:	eeef 7a05 	vfma.f32	s15, s30, s10
    tmp += input_3[40] * filter[40];
 801d126:	ed9d 5ae0 	vldr	s10, [sp, #896]	; 0x380
    tmp += input_0[40] * filter[40];
 801d12a:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[41] * filter[41];
 801d12e:	eddd 1a34 	vldr	s3, [sp, #208]	; 0xd0
    tmp += input_1[40] * filter[40];
 801d132:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[41] * filter[41];
 801d136:	eddd 5a6d 	vldr	s11, [sp, #436]	; 0x1b4
    tmp += input_2[40] * filter[40];
 801d13a:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[41] * filter[41];
 801d13e:	ed9d 1aa6 	vldr	s2, [sp, #664]	; 0x298
    tmp += input_3[40] * filter[40];
 801d142:	eee3 7a05 	vfma.f32	s15, s6, s10
    tmp += input_0[41] * filter[41];
 801d146:	ed9a 3a69 	vldr	s6, [sl, #420]	; 0x1a4
 801d14a:	eea3 6a21 	vfma.f32	s12, s6, s3
    tmp += input_0[42] * filter[42];
 801d14e:	eddd 1a35 	vldr	s3, [sp, #212]	; 0xd4
    tmp += input_1[41] * filter[41];
 801d152:	eee3 6a25 	vfma.f32	s13, s6, s11
    tmp += input_1[42] * filter[42];
 801d156:	eddd 5a6e 	vldr	s11, [sp, #440]	; 0x1b8
    tmp += input_2[41] * filter[41];
 801d15a:	eea3 7a01 	vfma.f32	s14, s6, s2
    tmp += input_2[42] * filter[42];
 801d15e:	ed9d 1aa7 	vldr	s2, [sp, #668]	; 0x29c
    tmp += input_3[41] * filter[41];
 801d162:	eee3 7a24 	vfma.f32	s15, s6, s9
    tmp += input_0[42] * filter[42];
 801d166:	edda 4a6a 	vldr	s9, [sl, #424]	; 0x1a8
 801d16a:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_1[42] * filter[42];
 801d16e:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_2[42] * filter[42];
 801d172:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_3[42] * filter[42];
 801d176:	eee4 7aac 	vfma.f32	s15, s9, s25
    tmp += input_0[43] * filter[43];
 801d17a:	edda 4a6b 	vldr	s9, [sl, #428]	; 0x1ac
 801d17e:	eddd 1a36 	vldr	s3, [sp, #216]	; 0xd8
    tmp += input_1[43] * filter[43];
 801d182:	eddd 5a6f 	vldr	s11, [sp, #444]	; 0x1bc
    tmp += input_0[43] * filter[43];
 801d186:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_2[43] * filter[43];
 801d18a:	ed9d 1aa8 	vldr	s2, [sp, #672]	; 0x2a0
    tmp += input_3[43] * filter[43];
 801d18e:	ed9d fae3 	vldr	s30, [sp, #908]	; 0x38c
    tmp += input_1[43] * filter[43];
 801d192:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_2[43] * filter[43];
 801d196:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_0[44] * filter[44];
 801d19a:	eddd 1a37 	vldr	s3, [sp, #220]	; 0xdc
    tmp += input_3[43] * filter[43];
 801d19e:	eee4 7a8f 	vfma.f32	s15, s9, s30
    tmp += input_0[44] * filter[44];
 801d1a2:	edda 4a6c 	vldr	s9, [sl, #432]	; 0x1b0
    tmp += input_3[44] * filter[44];
 801d1a6:	eddd 2ae4 	vldr	s5, [sp, #912]	; 0x390
    tmp += input_1[44] * filter[44];
 801d1aa:	eddd 5a70 	vldr	s11, [sp, #448]	; 0x1c0
    tmp += input_0[44] * filter[44];
 801d1ae:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_2[44] * filter[44];
 801d1b2:	ed9d 1aa9 	vldr	s2, [sp, #676]	; 0x2a4
    tmp += input_1[44] * filter[44];
 801d1b6:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_0[45] * filter[45];
 801d1ba:	eddd 1a38 	vldr	s3, [sp, #224]	; 0xe0
    tmp += input_2[44] * filter[44];
 801d1be:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_3[45] * filter[45];
 801d1c2:	ed9d 2ae5 	vldr	s4, [sp, #916]	; 0x394
    tmp += input_3[44] * filter[44];
 801d1c6:	eee4 7aa2 	vfma.f32	s15, s9, s5
    tmp += input_1[45] * filter[45];
 801d1ca:	eddd 5a71 	vldr	s11, [sp, #452]	; 0x1c4
    tmp += input_2[45] * filter[45];
 801d1ce:	ed9d 1aaa 	vldr	s2, [sp, #680]	; 0x2a8
    tmp += input_0[46] * filter[46];
 801d1d2:	edda 4a6e 	vldr	s9, [sl, #440]	; 0x1b8
    tmp += input_0[45] * filter[45];
 801d1d6:	eeae 6aa1 	vfma.f32	s12, s29, s3
    tmp += input_0[46] * filter[46];
 801d1da:	eddd 1a39 	vldr	s3, [sp, #228]	; 0xe4
    tmp += input_1[45] * filter[45];
 801d1de:	eeee 6aa5 	vfma.f32	s13, s29, s11
    tmp += input_3[46] * filter[46];
 801d1e2:	ed9d bae6 	vldr	s22, [sp, #920]	; 0x398
    tmp += input_2[45] * filter[45];
 801d1e6:	eeae 7a81 	vfma.f32	s14, s29, s2
    tmp += input_1[46] * filter[46];
 801d1ea:	eddd 5a72 	vldr	s11, [sp, #456]	; 0x1c8
    tmp += input_3[45] * filter[45];
 801d1ee:	eeee 7a82 	vfma.f32	s15, s29, s4
    tmp += input_2[46] * filter[46];
 801d1f2:	ed9d 1aab 	vldr	s2, [sp, #684]	; 0x2ac
    tmp += input_3[47] * filter[47];
 801d1f6:	ed9d cae7 	vldr	s24, [sp, #924]	; 0x39c
    tmp += input_3[48] * filter[48];
 801d1fa:	eddd bae8 	vldr	s23, [sp, #928]	; 0x3a0
    tmp += input_0[46] * filter[46];
 801d1fe:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_0[47] * filter[47];
 801d202:	eddd 1a3a 	vldr	s3, [sp, #232]	; 0xe8
    tmp += input_1[46] * filter[46];
 801d206:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_1[47] * filter[47];
 801d20a:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
    tmp += input_2[46] * filter[46];
 801d20e:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[47] * filter[47];
 801d212:	ed9d 1aac 	vldr	s2, [sp, #688]	; 0x2b0
    tmp += input_3[46] * filter[46];
 801d216:	eee4 7a8b 	vfma.f32	s15, s9, s22
    tmp += input_0[47] * filter[47];
 801d21a:	edda 4a6f 	vldr	s9, [sl, #444]	; 0x1bc
 801d21e:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_0[48] * filter[48];
 801d222:	eddd 1a3b 	vldr	s3, [sp, #236]	; 0xec
    tmp += input_1[47] * filter[47];
 801d226:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_1[48] * filter[48];
 801d22a:	eddd 5a74 	vldr	s11, [sp, #464]	; 0x1d0
    tmp += input_2[47] * filter[47];
 801d22e:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[48] * filter[48];
 801d232:	ed9d 1aad 	vldr	s2, [sp, #692]	; 0x2b4
    tmp += input_3[47] * filter[47];
 801d236:	eee4 7a8c 	vfma.f32	s15, s9, s24
    tmp += input_0[48] * filter[48];
 801d23a:	edda 4a70 	vldr	s9, [sl, #448]	; 0x1c0
 801d23e:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_0[49] * filter[49];
 801d242:	eddd 1a3c 	vldr	s3, [sp, #240]	; 0xf0
    tmp += input_1[48] * filter[48];
 801d246:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_1[49] * filter[49];
 801d24a:	eddd 5a75 	vldr	s11, [sp, #468]	; 0x1d4
    tmp += input_2[48] * filter[48];
 801d24e:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[49] * filter[49];
 801d252:	ed9d 1aae 	vldr	s2, [sp, #696]	; 0x2b8
    tmp += input_3[48] * filter[48];
 801d256:	eee4 7aab 	vfma.f32	s15, s9, s23
    tmp += input_0[49] * filter[49];
 801d25a:	edda 4a71 	vldr	s9, [sl, #452]	; 0x1c4
    tmp += input_3[49] * filter[49];
 801d25e:	ed9d cae9 	vldr	s24, [sp, #932]	; 0x3a4
    tmp += input_3[51] * filter[51];
 801d262:	eddd eaeb 	vldr	s29, [sp, #940]	; 0x3ac
    tmp += input_0[49] * filter[49];
 801d266:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_0[50] * filter[50];
 801d26a:	eddd 1a3d 	vldr	s3, [sp, #244]	; 0xf4
    tmp += input_1[49] * filter[49];
 801d26e:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_1[50] * filter[50];
 801d272:	eddd 5a76 	vldr	s11, [sp, #472]	; 0x1d8
    tmp += input_2[49] * filter[49];
 801d276:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[50] * filter[50];
 801d27a:	ed9d 1aaf 	vldr	s2, [sp, #700]	; 0x2bc
    tmp += input_3[49] * filter[49];
 801d27e:	eee4 7a8c 	vfma.f32	s15, s9, s24
    tmp += input_0[50] * filter[50];
 801d282:	edda 4a72 	vldr	s9, [sl, #456]	; 0x1c8
    tmp += input_3[50] * filter[50];
 801d286:	ed9d caea 	vldr	s24, [sp, #936]	; 0x3a8
    tmp += input_3[52] * filter[52];
 801d28a:	ed9d 5aec 	vldr	s10, [sp, #944]	; 0x3b0
    tmp += input_0[50] * filter[50];
 801d28e:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_0[51] * filter[51];
 801d292:	eddd 1a3e 	vldr	s3, [sp, #248]	; 0xf8
    tmp += input_1[50] * filter[50];
 801d296:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_1[51] * filter[51];
 801d29a:	eddd 5a77 	vldr	s11, [sp, #476]	; 0x1dc
    tmp += input_2[50] * filter[50];
 801d29e:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[51] * filter[51];
 801d2a2:	ed9d 1ab0 	vldr	s2, [sp, #704]	; 0x2c0
    tmp += input_3[50] * filter[50];
 801d2a6:	eee4 7a8c 	vfma.f32	s15, s9, s24
    tmp += input_0[52] * filter[52];
 801d2aa:	edda 4a74 	vldr	s9, [sl, #464]	; 0x1d0
    tmp += input_3[53] * filter[53];
 801d2ae:	ed9d 4aed 	vldr	s8, [sp, #948]	; 0x3b4
    tmp += input_3[54] * filter[54];
 801d2b2:	eddd 3aee 	vldr	s7, [sp, #952]	; 0x3b8
    tmp += input_0[51] * filter[51];
 801d2b6:	eeae 6a21 	vfma.f32	s12, s28, s3
    tmp += input_0[52] * filter[52];
 801d2ba:	eddd 1a3f 	vldr	s3, [sp, #252]	; 0xfc
    tmp += input_1[51] * filter[51];
 801d2be:	eeee 6a25 	vfma.f32	s13, s28, s11
    tmp += input_1[52] * filter[52];
 801d2c2:	eddd 5a78 	vldr	s11, [sp, #480]	; 0x1e0
    tmp += input_2[51] * filter[51];
 801d2c6:	eeae 7a01 	vfma.f32	s14, s28, s2
    tmp += input_2[52] * filter[52];
 801d2ca:	ed9d 1ab1 	vldr	s2, [sp, #708]	; 0x2c4
    tmp += input_3[51] * filter[51];
 801d2ce:	eeee 7a2e 	vfma.f32	s15, s28, s29
    tmp += input_3[55] * filter[55];
 801d2d2:	eddd 0aef 	vldr	s1, [sp, #956]	; 0x3bc
    tmp += input_0[52] * filter[52];
 801d2d6:	eea4 6aa1 	vfma.f32	s12, s9, s3
    tmp += input_0[53] * filter[53];
 801d2da:	eddd 1a40 	vldr	s3, [sp, #256]	; 0x100
    tmp += input_1[52] * filter[52];
 801d2de:	eee4 6aa5 	vfma.f32	s13, s9, s11
    tmp += input_1[53] * filter[53];
 801d2e2:	eddd 5a79 	vldr	s11, [sp, #484]	; 0x1e4
    tmp += input_2[52] * filter[52];
 801d2e6:	eea4 7a81 	vfma.f32	s14, s9, s2
    tmp += input_2[53] * filter[53];
 801d2ea:	ed9d 1ab2 	vldr	s2, [sp, #712]	; 0x2c8
    tmp += input_3[52] * filter[52];
 801d2ee:	eee4 7a85 	vfma.f32	s15, s9, s10
    tmp += input_0[53] * filter[53];
 801d2f2:	ed9a 5a75 	vldr	s10, [sl, #468]	; 0x1d4
 801d2f6:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[54] * filter[54];
 801d2fa:	eddd 1a41 	vldr	s3, [sp, #260]	; 0x104
    tmp += input_1[53] * filter[53];
 801d2fe:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_1[54] * filter[54];
 801d302:	eddd 5a7a 	vldr	s11, [sp, #488]	; 0x1e8
    tmp += input_2[53] * filter[53];
 801d306:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[54] * filter[54];
 801d30a:	ed9d 1ab3 	vldr	s2, [sp, #716]	; 0x2cc
    tmp += input_3[53] * filter[53];
 801d30e:	eee5 7a04 	vfma.f32	s15, s10, s8
    tmp += input_0[54] * filter[54];
 801d312:	ed9a 5a76 	vldr	s10, [sl, #472]	; 0x1d8
 801d316:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[55] * filter[55];
 801d31a:	eddd 1a42 	vldr	s3, [sp, #264]	; 0x108
    tmp += input_1[54] * filter[54];
 801d31e:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_1[55] * filter[55];
 801d322:	eddd 5a7b 	vldr	s11, [sp, #492]	; 0x1ec
    tmp += input_2[54] * filter[54];
 801d326:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[55] * filter[55];
 801d32a:	ed9d 1ab4 	vldr	s2, [sp, #720]	; 0x2d0
    tmp += input_3[54] * filter[54];
 801d32e:	eee5 7a23 	vfma.f32	s15, s10, s7
    tmp += input_0[55] * filter[55];
 801d332:	ed9a 5a77 	vldr	s10, [sl, #476]	; 0x1dc
 801d336:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[56] * filter[56];
 801d33a:	eddd 1a43 	vldr	s3, [sp, #268]	; 0x10c
    tmp += input_1[55] * filter[55];
 801d33e:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_2[55] * filter[55];
 801d342:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_3[55] * filter[55];
 801d346:	eee5 7a20 	vfma.f32	s15, s10, s1
    tmp += input_0[56] * filter[56];
 801d34a:	ed9a 5a78 	vldr	s10, [sl, #480]	; 0x1e0
    tmp += input_1[56] * filter[56];
 801d34e:	eddd 5a7c 	vldr	s11, [sp, #496]	; 0x1f0
    tmp += input_3[56] * filter[56];
 801d352:	ed9d 0af0 	vldr	s0, [sp, #960]	; 0x3c0
    tmp += input_0[56] * filter[56];
 801d356:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_2[56] * filter[56];
 801d35a:	ed9d 1ab5 	vldr	s2, [sp, #724]	; 0x2d4
    tmp += input_1[56] * filter[56];
 801d35e:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_0[57] * filter[57];
 801d362:	eddd 1a44 	vldr	s3, [sp, #272]	; 0x110
    tmp += input_2[56] * filter[56];
 801d366:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_1[57] * filter[57];
 801d36a:	eddd 5a7d 	vldr	s11, [sp, #500]	; 0x1f4
    tmp += input_3[56] * filter[56];
 801d36e:	eee5 7a00 	vfma.f32	s15, s10, s0
    tmp += input_0[57] * filter[57];
 801d372:	ed9a 5a79 	vldr	s10, [sl, #484]	; 0x1e4
    tmp += input_2[57] * filter[57];
 801d376:	ed9d 1ab6 	vldr	s2, [sp, #728]	; 0x2d8
    tmp += input_3[57] * filter[57];
 801d37a:	eddd 9af1 	vldr	s19, [sp, #964]	; 0x3c4
    tmp += input_0[57] * filter[57];
 801d37e:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[58] * filter[58];
 801d382:	eddd 1a45 	vldr	s3, [sp, #276]	; 0x114
    tmp += input_1[57] * filter[57];
 801d386:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_3[58] * filter[58];
 801d38a:	ed9d aaf2 	vldr	s20, [sp, #968]	; 0x3c8
    tmp += input_2[57] * filter[57];
 801d38e:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_1[58] * filter[58];
 801d392:	eddd 5a7e 	vldr	s11, [sp, #504]	; 0x1f8
    tmp += input_3[57] * filter[57];
 801d396:	eee5 7a29 	vfma.f32	s15, s10, s19
    tmp += input_0[58] * filter[58];
 801d39a:	ed9a 5a7a 	vldr	s10, [sl, #488]	; 0x1e8
    tmp += input_2[58] * filter[58];
 801d39e:	ed9d 1ab7 	vldr	s2, [sp, #732]	; 0x2dc
    tmp += input_3[59] * filter[59];
 801d3a2:	eddd aaf3 	vldr	s21, [sp, #972]	; 0x3cc
    tmp += input_0[58] * filter[58];
 801d3a6:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[59] * filter[59];
 801d3aa:	eddd 1a46 	vldr	s3, [sp, #280]	; 0x118
    tmp += input_1[58] * filter[58];
 801d3ae:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_1[59] * filter[59];
 801d3b2:	eddd 5a7f 	vldr	s11, [sp, #508]	; 0x1fc
    tmp += input_2[58] * filter[58];
 801d3b6:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[59] * filter[59];
 801d3ba:	ed9d 1ab8 	vldr	s2, [sp, #736]	; 0x2e0
    tmp += input_3[58] * filter[58];
 801d3be:	eee5 7a0a 	vfma.f32	s15, s10, s20
    tmp += input_0[59] * filter[59];
 801d3c2:	ed9a 5a7b 	vldr	s10, [sl, #492]	; 0x1ec
    tmp += input_3[60] * filter[60];
 801d3c6:	ed9d eaf4 	vldr	s28, [sp, #976]	; 0x3d0
    tmp += input_3[61] * filter[61];
 801d3ca:	eddd faf5 	vldr	s31, [sp, #980]	; 0x3d4
    tmp += input_0[59] * filter[59];
 801d3ce:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[60] * filter[60];
 801d3d2:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
    tmp += input_1[59] * filter[59];
 801d3d6:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_1[60] * filter[60];
 801d3da:	eddd 5a80 	vldr	s11, [sp, #512]	; 0x200
    tmp += input_2[59] * filter[59];
 801d3de:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[60] * filter[60];
 801d3e2:	ed9d 1ab9 	vldr	s2, [sp, #740]	; 0x2e4
    tmp += input_3[59] * filter[59];
 801d3e6:	eee5 7a2a 	vfma.f32	s15, s10, s21
    tmp += input_0[60] * filter[60];
 801d3ea:	ed9a 5a7c 	vldr	s10, [sl, #496]	; 0x1f0
    tmp += input_3[62] * filter[62];
 801d3ee:	ed9d baf6 	vldr	s22, [sp, #984]	; 0x3d8
    tmp += input_0[60] * filter[60];
 801d3f2:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[61] * filter[61];
 801d3f6:	eddd 1a48 	vldr	s3, [sp, #288]	; 0x120
    tmp += input_1[60] * filter[60];
 801d3fa:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_1[61] * filter[61];
 801d3fe:	eddd 5a81 	vldr	s11, [sp, #516]	; 0x204
    tmp += input_2[60] * filter[60];
 801d402:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_2[61] * filter[61];
 801d406:	ed9d 1aba 	vldr	s2, [sp, #744]	; 0x2e8
    tmp += input_3[60] * filter[60];
 801d40a:	eee5 7a0e 	vfma.f32	s15, s10, s28
    tmp += input_0[61] * filter[61];
 801d40e:	ed9a 5a7d 	vldr	s10, [sl, #500]	; 0x1f4
 801d412:	eea5 6a21 	vfma.f32	s12, s10, s3
    tmp += input_0[62] * filter[62];
 801d416:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_1[61] * filter[61];
 801d41a:	eee5 6a25 	vfma.f32	s13, s10, s11
    tmp += input_0[63] * filter[63];
 801d41e:	f50d 6486 	add.w	r4, sp, #1072	; 0x430
    tmp += input_2[61] * filter[61];
 801d422:	eea5 7a01 	vfma.f32	s14, s10, s2
    tmp += input_1[62] * filter[62];
 801d426:	eddd 5a82 	vldr	s11, [sp, #520]	; 0x208
    tmp += input_3[61] * filter[61];
 801d42a:	eee5 7a2f 	vfma.f32	s15, s10, s31
    tmp += input_2[62] * filter[62];
 801d42e:	ed9d 1abb 	vldr	s2, [sp, #748]	; 0x2ec
    tmp += input_0[62] * filter[62];
 801d432:	eead 6aa1 	vfma.f32	s12, s27, s3
    tmp += input_0[63] * filter[63];
 801d436:	edd4 1a00 	vldr	s3, [r4]
    tmp += input_1[62] * filter[62];
 801d43a:	eeed 6aa5 	vfma.f32	s13, s27, s11
    tmp += input_1[63] * filter[63];
 801d43e:	f20d 4444 	addw	r4, sp, #1092	; 0x444
    tmp += input_2[62] * filter[62];
 801d442:	eead 7a81 	vfma.f32	s14, s27, s2
    tmp += input_2[63] * filter[63];
 801d446:	ed9d 1abc 	vldr	s2, [sp, #752]	; 0x2f0
    tmp += input_1[63] * filter[63];
 801d44a:	edd4 5a00 	vldr	s11, [r4]
    tmp += input_3[62] * filter[62];
 801d44e:	eeed 7a8b 	vfma.f32	s15, s27, s22
    *sum_0 += tmp;
 801d452:	f60d 1414 	addw	r4, sp, #2324	; 0x914
    tmp += input_3[63] * filter[63];
 801d456:	ed9d baf7 	vldr	s22, [sp, #988]	; 0x3dc
    tmp += input_0[63] * filter[63];
 801d45a:	eead 6a21 	vfma.f32	s12, s26, s3
    tmp += input_1[63] * filter[63];
 801d45e:	eeed 6a25 	vfma.f32	s13, s26, s11
    tmp += input_2[63] * filter[63];
 801d462:	eead 7a01 	vfma.f32	s14, s26, s2
    tmp += input_3[63] * filter[63];
 801d466:	eeed 7a0b 	vfma.f32	s15, s26, s22
    *sum_0 += tmp;
 801d46a:	ed84 6a00 	vstr	s12, [r4]
 801d46e:	f8dd 47a8 	ldr.w	r4, [sp, #1960]	; 0x7a8
 801d472:	e9cd 7403 	strd	r7, r4, [sp, #12]
 801d476:	9cf8      	ldr	r4, [sp, #992]	; 0x3e0
 801d478:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801d47c:	9400      	str	r4, [sp, #0]
    *sum_1 += tmp;
 801d47e:	edcc 6a00 	vstr	s13, [ip]
    *sum_2 += tmp;
 801d482:	f60d 1c94 	addw	ip, sp, #2452	; 0x994
 801d486:	ed8c 7a00 	vstr	s14, [ip]
    *sum_3 += tmp;
 801d48a:	f60d 1cd4 	addw	ip, sp, #2516	; 0x9d4
 801d48e:	edcc 7a00 	vstr	s15, [ip]
 801d492:	f7fc f89f 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[3], &sum_1[3], &sum_2[3], &sum_3[3], input_0, input_1, input_2, input_3, filter);
 801d496:	f8dd 37ac 	ldr.w	r3, [sp, #1964]	; 0x7ac
 801d49a:	9703      	str	r7, [sp, #12]
 801d49c:	f60d 129c 	addw	r2, sp, #2460	; 0x99c
 801d4a0:	9304      	str	r3, [sp, #16]
 801d4a2:	f60d 115c 	addw	r1, sp, #2396	; 0x95c
 801d4a6:	f60d 13dc 	addw	r3, sp, #2524	; 0x9dc
 801d4aa:	9602      	str	r6, [sp, #8]
 801d4ac:	9501      	str	r5, [sp, #4]
 801d4ae:	f60d 101c 	addw	r0, sp, #2332	; 0x91c
 801d4b2:	9400      	str	r4, [sp, #0]
 801d4b4:	f7fc f88e 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[4], &sum_1[4], &sum_2[4], &sum_3[4], input_0, input_1, input_2, input_3, filter);
 801d4b8:	f8dd 37b0 	ldr.w	r3, [sp, #1968]	; 0x7b0
 801d4bc:	9602      	str	r6, [sp, #8]
 801d4be:	f50d 621a 	add.w	r2, sp, #2464	; 0x9a0
 801d4c2:	9501      	str	r5, [sp, #4]
 801d4c4:	f50d 6116 	add.w	r1, sp, #2400	; 0x960
 801d4c8:	9400      	str	r4, [sp, #0]
 801d4ca:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 801d4ce:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d4d2:	f50d 631e 	add.w	r3, sp, #2528	; 0x9e0
 801d4d6:	f7fc f87d 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[5], &sum_1[5], &sum_2[5], &sum_3[5], input_0, input_1, input_2, input_3, filter);
 801d4da:	f8dd 37b4 	ldr.w	r3, [sp, #1972]	; 0x7b4
 801d4de:	9602      	str	r6, [sp, #8]
 801d4e0:	f60d 12a4 	addw	r2, sp, #2468	; 0x9a4
 801d4e4:	9501      	str	r5, [sp, #4]
 801d4e6:	f60d 1164 	addw	r1, sp, #2404	; 0x964
 801d4ea:	9400      	str	r4, [sp, #0]
 801d4ec:	f60d 1024 	addw	r0, sp, #2340	; 0x924
 801d4f0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d4f4:	f60d 13e4 	addw	r3, sp, #2532	; 0x9e4
 801d4f8:	f7fc f86c 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[6], &sum_1[6], &sum_2[6], &sum_3[6], input_0, input_1, input_2, input_3, filter);
 801d4fc:	f8dd 37b8 	ldr.w	r3, [sp, #1976]	; 0x7b8
 801d500:	9602      	str	r6, [sp, #8]
 801d502:	f60d 12a8 	addw	r2, sp, #2472	; 0x9a8
 801d506:	9501      	str	r5, [sp, #4]
 801d508:	f60d 1168 	addw	r1, sp, #2408	; 0x968
 801d50c:	9400      	str	r4, [sp, #0]
 801d50e:	f60d 1028 	addw	r0, sp, #2344	; 0x928
 801d512:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d516:	f60d 13e8 	addw	r3, sp, #2536	; 0x9e8
 801d51a:	f7fc f85b 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[7], &sum_1[7], &sum_2[7], &sum_3[7], input_0, input_1, input_2, input_3, filter);
 801d51e:	f8dd 37bc 	ldr.w	r3, [sp, #1980]	; 0x7bc
 801d522:	9602      	str	r6, [sp, #8]
 801d524:	f60d 12ac 	addw	r2, sp, #2476	; 0x9ac
 801d528:	9501      	str	r5, [sp, #4]
 801d52a:	f60d 116c 	addw	r1, sp, #2412	; 0x96c
 801d52e:	9400      	str	r4, [sp, #0]
 801d530:	f60d 102c 	addw	r0, sp, #2348	; 0x92c
 801d534:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d538:	f60d 13ec 	addw	r3, sp, #2540	; 0x9ec
 801d53c:	f7fc f84a 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[8], &sum_1[8], &sum_2[8], &sum_3[8], input_0, input_1, input_2, input_3, filter);
 801d540:	f8dd 37c0 	ldr.w	r3, [sp, #1984]	; 0x7c0
 801d544:	9602      	str	r6, [sp, #8]
 801d546:	f50d 621b 	add.w	r2, sp, #2480	; 0x9b0
 801d54a:	9501      	str	r5, [sp, #4]
 801d54c:	f50d 6117 	add.w	r1, sp, #2416	; 0x970
 801d550:	9400      	str	r4, [sp, #0]
 801d552:	f50d 6013 	add.w	r0, sp, #2352	; 0x930
 801d556:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d55a:	f50d 631f 	add.w	r3, sp, #2544	; 0x9f0
 801d55e:	f7fc f839 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[9], &sum_1[9], &sum_2[9], &sum_3[9], input_0, input_1, input_2, input_3, filter);
 801d562:	f8dd 37c4 	ldr.w	r3, [sp, #1988]	; 0x7c4
 801d566:	9602      	str	r6, [sp, #8]
 801d568:	f60d 12b4 	addw	r2, sp, #2484	; 0x9b4
 801d56c:	9501      	str	r5, [sp, #4]
 801d56e:	f60d 1174 	addw	r1, sp, #2420	; 0x974
 801d572:	9400      	str	r4, [sp, #0]
 801d574:	f60d 1034 	addw	r0, sp, #2356	; 0x934
 801d578:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d57c:	f60d 13f4 	addw	r3, sp, #2548	; 0x9f4
 801d580:	f7fc f828 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[10], &sum_1[10], &sum_2[10], &sum_3[10], input_0, input_1, input_2, input_3, filter);
 801d584:	f8dd 37c8 	ldr.w	r3, [sp, #1992]	; 0x7c8
 801d588:	9602      	str	r6, [sp, #8]
 801d58a:	f60d 12b8 	addw	r2, sp, #2488	; 0x9b8
 801d58e:	9501      	str	r5, [sp, #4]
 801d590:	f60d 1178 	addw	r1, sp, #2424	; 0x978
 801d594:	9400      	str	r4, [sp, #0]
 801d596:	f60d 1038 	addw	r0, sp, #2360	; 0x938
 801d59a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d59e:	f60d 13f8 	addw	r3, sp, #2552	; 0x9f8
 801d5a2:	f7fc f817 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[11], &sum_1[11], &sum_2[11], &sum_3[11], input_0, input_1, input_2, input_3, filter);
 801d5a6:	f8dd 37cc 	ldr.w	r3, [sp, #1996]	; 0x7cc
 801d5aa:	9602      	str	r6, [sp, #8]
 801d5ac:	f60d 12bc 	addw	r2, sp, #2492	; 0x9bc
 801d5b0:	9501      	str	r5, [sp, #4]
 801d5b2:	f60d 117c 	addw	r1, sp, #2428	; 0x97c
 801d5b6:	9400      	str	r4, [sp, #0]
 801d5b8:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
 801d5bc:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d5c0:	f60d 13fc 	addw	r3, sp, #2556	; 0x9fc
 801d5c4:	f7fc f806 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[12], &sum_1[12], &sum_2[12], &sum_3[12], input_0, input_1, input_2, input_3, filter);
 801d5c8:	f8dd 37d0 	ldr.w	r3, [sp, #2000]	; 0x7d0
 801d5cc:	9602      	str	r6, [sp, #8]
 801d5ce:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 801d5d2:	9501      	str	r5, [sp, #4]
 801d5d4:	f50d 6118 	add.w	r1, sp, #2432	; 0x980
 801d5d8:	9400      	str	r4, [sp, #0]
 801d5da:	f50d 6014 	add.w	r0, sp, #2368	; 0x940
 801d5de:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d5e2:	f50d 6320 	add.w	r3, sp, #2560	; 0xa00
 801d5e6:	f7fb fff5 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[13], &sum_1[13], &sum_2[13], &sum_3[13], input_0, input_1, input_2, input_3, filter);
 801d5ea:	f8dd 37d4 	ldr.w	r3, [sp, #2004]	; 0x7d4
 801d5ee:	9602      	str	r6, [sp, #8]
 801d5f0:	f60d 12c4 	addw	r2, sp, #2500	; 0x9c4
 801d5f4:	9501      	str	r5, [sp, #4]
 801d5f6:	f60d 1184 	addw	r1, sp, #2436	; 0x984
 801d5fa:	9400      	str	r4, [sp, #0]
 801d5fc:	f60d 1044 	addw	r0, sp, #2372	; 0x944
 801d600:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d604:	f60d 2304 	addw	r3, sp, #2564	; 0xa04
 801d608:	f7fb ffe4 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[14], &sum_1[14], &sum_2[14], &sum_3[14], input_0, input_1, input_2, input_3, filter);
 801d60c:	f8dd 37d8 	ldr.w	r3, [sp, #2008]	; 0x7d8
 801d610:	9602      	str	r6, [sp, #8]
 801d612:	f60d 12c8 	addw	r2, sp, #2504	; 0x9c8
 801d616:	9501      	str	r5, [sp, #4]
 801d618:	f60d 1188 	addw	r1, sp, #2440	; 0x988
 801d61c:	9400      	str	r4, [sp, #0]
 801d61e:	f60d 1048 	addw	r0, sp, #2376	; 0x948
 801d622:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d626:	f60d 2308 	addw	r3, sp, #2568	; 0xa08
 801d62a:	f7fb ffd3 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
      filter += DIM_KER_X * DIM_KER_Y;
      group_mac_kernel8_4row_fp_uniweight_reuse_output_input(&sum_0[15], &sum_1[15], &sum_2[15], &sum_3[15], input_0, input_1, input_2, input_3, filter);
 801d62e:	f8dd 37dc 	ldr.w	r3, [sp, #2012]	; 0x7dc
 801d632:	9602      	str	r6, [sp, #8]
 801d634:	f60d 12cc 	addw	r2, sp, #2508	; 0x9cc
 801d638:	9501      	str	r5, [sp, #4]
 801d63a:	f60d 118c 	addw	r1, sp, #2444	; 0x98c
 801d63e:	9400      	str	r4, [sp, #0]
 801d640:	f60d 104c 	addw	r0, sp, #2380	; 0x94c
 801d644:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d648:	f60d 230c 	addw	r3, sp, #2572	; 0xa0c
 801d64c:	f7fb ffc2 	bl	80195d4 <group_mac_kernel8_4row_fp_uniweight_reuse_output_input>
/* START: For Group Conv */
static inline void assign_sum_to_group_output_4row16col(int8_t* out_0, int8_t* out_1, int8_t* out_2, int8_t* out_3, int8_t* out_4, int8_t* out_5, int8_t* out_6, int8_t* out_7,
                      int8_t* out_8, int8_t* out_9, int8_t* out_10, int8_t* out_11, int8_t* out_12, int8_t* out_13, int8_t* out_14, int8_t* out_15,
                      const float* sum_0, const float* sum_1, const float* sum_2, const float* sum_3,
                      const float output_activation_min, const float output_activation_max, const float* scales, const float learning_rate, const int i_output_depth) {
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d652:	f50d 6311 	add.w	r3, sp, #2320	; 0x910
 801d656:	edd9 5a00 	vldr	s11, [r9]
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d65a:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d65c:	f60d 1124 	addw	r1, sp, #2340	; 0x924
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d660:	edd3 6a00 	vldr	s13, [r3]
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= TN_MIN(TN_MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= TN_MIN(TN_MAX(sum_0[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801d664:	f60d 1c44 	addw	ip, sp, #2372	; 0x944
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d668:	f912 3c04 	ldrsb.w	r3, [r2, #-4]
 801d66c:	3004      	adds	r0, #4
 801d66e:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
 801d672:	fec6 6ae8 	vminnm.f32	s13, s13, s17
 801d676:	ee07 3a90 	vmov	s15, r3
 801d67a:	ee66 6a89 	vmul.f32	s13, s13, s18
      src_3 = input++;
 801d67e:	f8dd 3464 	ldr.w	r3, [sp, #1124]	; 0x464
 801d682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d686:	9cfc      	ldr	r4, [sp, #1008]	; 0x3f0
 801d688:	9312      	str	r3, [sp, #72]	; 0x48
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d68a:	f60d 1314 	addw	r3, sp, #2324	; 0x914
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801d68e:	9dfb      	ldr	r5, [sp, #1004]	; 0x3ec
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d690:	eee5 7ae6 	vfms.f32	s15, s11, s13
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d694:	ed93 7a00 	vldr	s14, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d698:	f60d 1318 	addw	r3, sp, #2328	; 0x918
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d69c:	9efa      	ldr	r6, [sp, #1000]	; 0x3e8
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d69e:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801d6a2:	fe87 7a68 	vminnm.f32	s14, s14, s17
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d6a6:	ed93 6a00 	vldr	s12, [r3]
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801d6aa:	f60d 131c 	addw	r3, sp, #2332	; 0x91c
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d6ae:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d6b2:	9ff9      	ldr	r7, [sp, #996]	; 0x3e4
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801d6b4:	ed93 4a00 	vldr	s8, [r3]
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d6b8:	f50d 6312 	add.w	r3, sp, #2336	; 0x920
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d6bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d6c0:	fec8 6a06 	vmaxnm.f32	s13, s16, s12
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d6c4:	ed93 5a00 	vldr	s10, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d6c8:	fec6 6ae8 	vminnm.f32	s13, s13, s17
 801d6cc:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801d6d0:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d6d4:	ee17 3a90 	vmov	r3, s15
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801d6d8:	fe84 4a68 	vminnm.f32	s8, s8, s17
 801d6dc:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d6e0:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
  *out_0++ -= TN_MIN(TN_MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d6e4:	f802 3c04 	strb.w	r3, [r2, #-4]
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d6e8:	fe85 5a68 	vminnm.f32	s10, s10, s17
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d6ec:	f910 3c08 	ldrsb.w	r3, [r0, #-8]
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d6f0:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d6f4:	edd9 3a01 	vldr	s7, [r9, #4]
 801d6f8:	ee07 3a90 	vmov	s15, r3
  *out_7++ -= TN_MIN(TN_MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801d6fc:	f60d 132c 	addw	r3, sp, #2348	; 0x92c
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d700:	edd1 4a00 	vldr	s9, [r1]
  *out_6++ -= TN_MIN(TN_MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801d704:	f60d 1128 	addw	r1, sp, #2344	; 0x928
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_7++ -= TN_MIN(TN_MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801d70c:	ed93 6a00 	vldr	s12, [r3]
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d710:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 801d714:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 801d718:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_6++ -= TN_MIN(TN_MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801d71c:	edd1 5a00 	vldr	s11, [r1]
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d720:	eee3 7ac7 	vfms.f32	s15, s7, s14
  *out_7++ -= TN_MIN(TN_MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801d724:	fe88 7a06 	vmaxnm.f32	s14, s16, s12
  *out_6++ -= TN_MIN(TN_MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801d728:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
 801d72c:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801d730:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_7++ -= TN_MIN(TN_MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801d734:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801d738:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d73c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d740:	ee17 3a90 	vmov	r3, s15
 801d744:	f800 3c08 	strb.w	r3, [r0, #-8]
  *out_2++ -= TN_MIN(TN_MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d748:	f914 3c04 	ldrsb.w	r3, [r4, #-4]
 801d74c:	ed99 6a02 	vldr	s12, [r9, #8]
 801d750:	ee07 3a90 	vmov	s15, r3
 801d754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d758:	eee6 7a66 	vfms.f32	s15, s12, s13
 801d75c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d760:	ee17 3a90 	vmov	r3, s15
 801d764:	f804 3c04 	strb.w	r3, [r4, #-4]
  *out_3++ -= TN_MIN(TN_MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801d768:	f915 3c04 	ldrsb.w	r3, [r5, #-4]
 801d76c:	edd9 6a03 	vldr	s13, [r9, #12]
 801d770:	ee07 3a90 	vmov	s15, r3
 801d774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d778:	eee6 7ac4 	vfms.f32	s15, s13, s8
 801d77c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d780:	ee17 3a90 	vmov	r3, s15
 801d784:	f805 3c04 	strb.w	r3, [r5, #-4]
  *out_4++ -= TN_MIN(TN_MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801d788:	f916 3c04 	ldrsb.w	r3, [r6, #-4]
 801d78c:	edd9 6a04 	vldr	s13, [r9, #16]
 801d790:	ee07 3a90 	vmov	s15, r3
 801d794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d798:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801d79c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d7a0:	ee17 3a90 	vmov	r3, s15
 801d7a4:	f806 3c04 	strb.w	r3, [r6, #-4]
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d7a8:	f917 3c04 	ldrsb.w	r3, [r7, #-4]
 801d7ac:	edd9 6a05 	vldr	s13, [r9, #20]
 801d7b0:	ee07 3a90 	vmov	s15, r3
  *out_6++ -= TN_MIN(TN_MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801d7b4:	9911      	ldr	r1, [sp, #68]	; 0x44
  *out_13++ -= TN_MIN(TN_MAX(sum_0[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801d7b6:	ed9c 5a00 	vldr	s10, [ip]
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801d7ba:	f60d 1c48 	addw	ip, sp, #2376	; 0x948
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_13++ -= TN_MIN(TN_MAX(sum_0[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801d7c2:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
 801d7c6:	fe85 5a68 	vminnm.f32	s10, s10, s17
 801d7ca:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_5++ -= TN_MIN(TN_MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d7ce:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801d7d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d7d6:	ee17 3a90 	vmov	r3, s15
 801d7da:	f807 3c04 	strb.w	r3, [r7, #-4]
  *out_6++ -= TN_MIN(TN_MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801d7de:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d7e2:	edd9 6a06 	vldr	s13, [r9, #24]
 801d7e6:	ee07 3a90 	vmov	s15, r3
 801d7ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d7ee:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801d7f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d7f6:	ee17 3a90 	vmov	r3, s15
 801d7fa:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_7++ -= TN_MIN(TN_MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801d7fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d800:	edd9 6a07 	vldr	s13, [r9, #28]
 801d804:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d808:	ee07 3a90 	vmov	s15, r3
 801d80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d810:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801d814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d818:	ee17 3a90 	vmov	r3, s15
 801d81c:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801d820:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
 801d824:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d826:	ed93 7a00 	vldr	s14, [r3]
 801d82a:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d82e:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801d832:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801d836:	ee07 3a90 	vmov	s15, r3
 801d83a:	ee27 7a09 	vmul.f32	s14, s14, s18
 801d83e:	ed99 6a08 	vldr	s12, [r9, #32]
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d842:	f60d 1334 	addw	r3, sp, #2356	; 0x934
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801d846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d84a:	ed93 4a00 	vldr	s8, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801d84e:	f60d 1338 	addw	r3, sp, #2360	; 0x938
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801d852:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801d856:	edd3 6a00 	vldr	s13, [r3]
  *out_11++ -= TN_MIN(TN_MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801d85a:	f60d 133c 	addw	r3, sp, #2364	; 0x93c
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d85e:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801d862:	fe84 4a68 	vminnm.f32	s8, s8, s17
 801d866:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_11++ -= TN_MIN(TN_MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801d86a:	edd3 5a00 	vldr	s11, [r3]
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801d86e:	f50d 6314 	add.w	r3, sp, #2368	; 0x940
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801d872:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
 801d876:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801d87a:	edd3 4a00 	vldr	s9, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801d87e:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801d882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_11++ -= TN_MIN(TN_MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801d886:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
 801d88a:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801d88e:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801d892:	ed9c 6a00 	vldr	s12, [ip]
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801d896:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801d89a:	ee17 3a90 	vmov	r3, s15
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801d89e:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 801d8a2:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801d8a6:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
  *out_8++ -= TN_MIN(TN_MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801d8aa:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801d8ae:	fe86 6a68 	vminnm.f32	s12, s12, s17
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d8b2:	990e      	ldr	r1, [sp, #56]	; 0x38
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801d8b4:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d8b8:	edd9 3a09 	vldr	s7, [r9, #36]	; 0x24
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= TN_MIN(TN_MAX(sum_1[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801d8bc:	f60d 1c84 	addw	ip, sp, #2436	; 0x984
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d8c0:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d8c4:	ee07 3a90 	vmov	s15, r3
  *out_15++ -= TN_MIN(TN_MAX(sum_0[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801d8c8:	f60d 134c 	addw	r3, sp, #2380	; 0x94c
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d8cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_15++ -= TN_MIN(TN_MAX(sum_0[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801d8d0:	ed93 7a00 	vldr	s14, [r3]
 801d8d4:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801d8d8:	fe87 7a68 	vminnm.f32	s14, s14, s17
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d8dc:	eee3 7ac4 	vfms.f32	s15, s7, s8
  *out_15++ -= TN_MIN(TN_MAX(sum_0[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801d8e0:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801d8e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d8e8:	ee17 3a90 	vmov	r3, s15
 801d8ec:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_10++ -= TN_MIN(TN_MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801d8f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d8f2:	ed99 4a0a 	vldr	s8, [r9, #40]	; 0x28
 801d8f6:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d8fa:	ee07 3a90 	vmov	s15, r3
 801d8fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d902:	eee4 7a66 	vfms.f32	s15, s8, s13
 801d906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d90a:	ee17 3a90 	vmov	r3, s15
 801d90e:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_11++ -= TN_MIN(TN_MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801d912:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d914:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d918:	edd9 6a0b 	vldr	s13, [r9, #44]	; 0x2c
 801d91c:	ee07 3a90 	vmov	s15, r3
 801d920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d924:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801d928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d92c:	ee17 3a90 	vmov	r3, s15
 801d930:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_12++ -= TN_MIN(TN_MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801d934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d936:	edd9 6a0c 	vldr	s13, [r9, #48]	; 0x30
 801d93a:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d93e:	ee07 3a90 	vmov	s15, r3
 801d942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d946:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801d94a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d94e:	ee17 3a90 	vmov	r3, s15
 801d952:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_13++ -= TN_MIN(TN_MAX(sum_0[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801d956:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d958:	edd9 6a0d 	vldr	s13, [r9, #52]	; 0x34
 801d95c:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d960:	ee07 3a90 	vmov	s15, r3
 801d964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d968:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801d96c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d970:	ee17 3a90 	vmov	r3, s15
 801d974:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_14++ -= TN_MIN(TN_MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801d978:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d97a:	edd9 6a0e 	vldr	s13, [r9, #56]	; 0x38
 801d97e:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d982:	ee07 3a90 	vmov	s15, r3
 801d986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d98a:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801d98e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d992:	ee17 3a90 	vmov	r3, s15
 801d996:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_15++ -= TN_MIN(TN_MAX(sum_0[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801d99a:	9908      	ldr	r1, [sp, #32]
 801d99c:	edd9 6a0f 	vldr	s13, [r9, #60]	; 0x3c
 801d9a0:	f911 3c04 	ldrsb.w	r3, [r1, #-4]
 801d9a4:	ee07 3a90 	vmov	s15, r3
 801d9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9ac:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801d9b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d9b4:	ee17 3a90 	vmov	r3, s15
 801d9b8:	f801 3c04 	strb.w	r3, [r1, #-4]
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d9bc:	f50d 6315 	add.w	r3, sp, #2384	; 0x950
 801d9c0:	ed99 6a00 	vldr	s12, [r9]
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d9c4:	f60d 1164 	addw	r1, sp, #2404	; 0x964
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d9c8:	ed93 7a00 	vldr	s14, [r3]
 801d9cc:	f912 3c03 	ldrsb.w	r3, [r2, #-3]
 801d9d0:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801d9d4:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801d9d8:	ee07 3a90 	vmov	s15, r3
 801d9dc:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d9e0:	f60d 1354 	addw	r3, sp, #2388	; 0x954
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d9e4:	ed91 5a00 	vldr	s10, [r1]
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801d9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801d9ec:	f60d 1168 	addw	r1, sp, #2408	; 0x968
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801d9f0:	ed93 4a00 	vldr	s8, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801d9f4:	f60d 1358 	addw	r3, sp, #2392	; 0x958
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801d9f8:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
 801d9fc:	fe85 5a68 	vminnm.f32	s10, s10, s17
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801da00:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801da04:	edd3 6a00 	vldr	s13, [r3]
  *out_3++ -= TN_MIN(TN_MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801da08:	f60d 135c 	addw	r3, sp, #2396	; 0x95c
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da0c:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801da10:	fe84 4a68 	vminnm.f32	s8, s8, s17
 801da14:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_3++ -= TN_MIN(TN_MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801da18:	edd3 5a00 	vldr	s11, [r3]
  *out_4++ -= TN_MIN(TN_MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801da1c:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801da20:	ed91 6a00 	vldr	s12, [r1]
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801da24:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
  *out_4++ -= TN_MIN(TN_MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801da28:	edd3 4a00 	vldr	s9, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801da2c:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801da30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_3++ -= TN_MIN(TN_MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801da34:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801da38:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_3++ -= TN_MIN(TN_MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801da3c:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801da40:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_4++ -= TN_MIN(TN_MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801da44:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801da48:	ee17 3a90 	vmov	r3, s15
  *out_4++ -= TN_MIN(TN_MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801da4c:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 801da50:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801da54:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
  *out_0++ -= TN_MIN(TN_MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801da58:	f802 3c03 	strb.w	r3, [r2, #-3]
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801da5c:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da60:	f910 3c07 	ldrsb.w	r3, [r0, #-7]
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801da64:	fe86 6a68 	vminnm.f32	s12, s12, s17
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da68:	edd9 3a01 	vldr	s7, [r9, #4]
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801da6c:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da70:	ee07 3a90 	vmov	s15, r3
  *out_7++ -= TN_MIN(TN_MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801da74:	f60d 136c 	addw	r3, sp, #2412	; 0x96c
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_7++ -= TN_MIN(TN_MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801da7c:	ed93 7a00 	vldr	s14, [r3]
 801da80:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801da84:	fe87 7a68 	vminnm.f32	s14, s14, s17
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da88:	eee3 7ac4 	vfms.f32	s15, s7, s8
  *out_7++ -= TN_MIN(TN_MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801da8c:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801da90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801da94:	ee17 3a90 	vmov	r3, s15
 801da98:	f800 3c07 	strb.w	r3, [r0, #-7]
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801da9c:	f914 3c03 	ldrsb.w	r3, [r4, #-3]
 801daa0:	ed99 4a02 	vldr	s8, [r9, #8]
 801daa4:	ee07 3a90 	vmov	s15, r3
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801daa8:	9911      	ldr	r1, [sp, #68]	; 0x44
  *out_2++ -= TN_MIN(TN_MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801daaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801daae:	eee4 7a66 	vfms.f32	s15, s8, s13
 801dab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dab6:	ee17 3a90 	vmov	r3, s15
 801daba:	f804 3c03 	strb.w	r3, [r4, #-3]
  *out_3++ -= TN_MIN(TN_MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801dabe:	f915 3c03 	ldrsb.w	r3, [r5, #-3]
 801dac2:	edd9 6a03 	vldr	s13, [r9, #12]
 801dac6:	ee07 3a90 	vmov	s15, r3
 801daca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dace:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801dad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dad6:	ee17 3a90 	vmov	r3, s15
 801dada:	f805 3c03 	strb.w	r3, [r5, #-3]
  *out_4++ -= TN_MIN(TN_MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801dade:	f916 3c03 	ldrsb.w	r3, [r6, #-3]
 801dae2:	edd9 6a04 	vldr	s13, [r9, #16]
 801dae6:	ee07 3a90 	vmov	s15, r3
 801daea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801daee:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801daf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801daf6:	ee17 3a90 	vmov	r3, s15
 801dafa:	f806 3c03 	strb.w	r3, [r6, #-3]
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801dafe:	f917 3c03 	ldrsb.w	r3, [r7, #-3]
 801db02:	edd9 6a05 	vldr	s13, [r9, #20]
 801db06:	ee07 3a90 	vmov	s15, r3
 801db0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db0e:	eee6 7ac5 	vfms.f32	s15, s13, s10
  *out_13++ -= TN_MIN(TN_MAX(sum_1[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801db12:	ed9c 5a00 	vldr	s10, [ip]
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801db16:	f60d 1c88 	addw	ip, sp, #2440	; 0x988
  *out_13++ -= TN_MIN(TN_MAX(sum_1[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801db1a:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
 801db1e:	fe85 5a68 	vminnm.f32	s10, s10, s17
 801db22:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_5++ -= TN_MIN(TN_MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801db26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801db2a:	ee17 3a90 	vmov	r3, s15
 801db2e:	f807 3c03 	strb.w	r3, [r7, #-3]
  *out_6++ -= TN_MIN(TN_MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801db32:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801db36:	edd9 6a06 	vldr	s13, [r9, #24]
 801db3a:	ee07 3a90 	vmov	s15, r3
 801db3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db42:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801db46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801db4a:	ee17 3a90 	vmov	r3, s15
 801db4e:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_7++ -= TN_MIN(TN_MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801db52:	9910      	ldr	r1, [sp, #64]	; 0x40
 801db54:	edd9 6a07 	vldr	s13, [r9, #28]
 801db58:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801db5c:	ee07 3a90 	vmov	s15, r3
 801db60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db64:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801db68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801db6c:	ee17 3a90 	vmov	r3, s15
 801db70:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801db74:	f50d 6317 	add.w	r3, sp, #2416	; 0x970
 801db78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801db7a:	ed93 7a00 	vldr	s14, [r3]
 801db7e:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801db82:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801db86:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801db8a:	ee07 3a90 	vmov	s15, r3
 801db8e:	ee27 7a09 	vmul.f32	s14, s14, s18
 801db92:	ed99 6a08 	vldr	s12, [r9, #32]
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801db96:	f60d 1374 	addw	r3, sp, #2420	; 0x974
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801db9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801db9e:	ed93 4a00 	vldr	s8, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801dba2:	f60d 1378 	addw	r3, sp, #2424	; 0x978
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801dba6:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801dbaa:	edd3 6a00 	vldr	s13, [r3]
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801dbae:	f60d 137c 	addw	r3, sp, #2428	; 0x97c
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801dbb2:	ed9c 6a00 	vldr	s12, [ip]
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dbb6:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801dbba:	fe84 4a68 	vminnm.f32	s8, s8, s17
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801dbbe:	edd3 5a00 	vldr	s11, [r3]
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801dbc2:	f50d 6318 	add.w	r3, sp, #2432	; 0x980
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dbc6:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801dbca:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801dbce:	edd3 4a00 	vldr	s9, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801dbd2:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801dbd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801dbda:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801dbde:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801dbe2:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801dbe6:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801dbea:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801dbee:	ee17 3a90 	vmov	r3, s15
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801dbf2:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 801dbf6:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801dbfa:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
  *out_8++ -= TN_MIN(TN_MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801dbfe:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801dc02:	fe86 6a68 	vminnm.f32	s12, s12, s17
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dc06:	990e      	ldr	r1, [sp, #56]	; 0x38
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801dc08:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= TN_MIN(TN_MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= TN_MIN(TN_MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801dc0c:	f60d 1cc4 	addw	ip, sp, #2500	; 0x9c4
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dc10:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dc14:	edd9 3a09 	vldr	s7, [r9, #36]	; 0x24
 801dc18:	ee07 3a90 	vmov	s15, r3
  *out_15++ -= TN_MIN(TN_MAX(sum_1[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801dc1c:	f60d 138c 	addw	r3, sp, #2444	; 0x98c
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dc20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_15++ -= TN_MIN(TN_MAX(sum_1[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801dc24:	ed93 7a00 	vldr	s14, [r3]
 801dc28:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801dc2c:	fe87 7a68 	vminnm.f32	s14, s14, s17
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dc30:	eee3 7ac4 	vfms.f32	s15, s7, s8
  *out_15++ -= TN_MIN(TN_MAX(sum_1[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801dc34:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dc38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc3c:	ee17 3a90 	vmov	r3, s15
 801dc40:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_10++ -= TN_MIN(TN_MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801dc44:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dc46:	ed99 4a0a 	vldr	s8, [r9, #40]	; 0x28
 801dc4a:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dc4e:	ee07 3a90 	vmov	s15, r3
 801dc52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc56:	eee4 7a66 	vfms.f32	s15, s8, s13
 801dc5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc5e:	ee17 3a90 	vmov	r3, s15
 801dc62:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_11++ -= TN_MIN(TN_MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801dc66:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dc68:	edd9 6a0b 	vldr	s13, [r9, #44]	; 0x2c
 801dc6c:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dc70:	ee07 3a90 	vmov	s15, r3
 801dc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc78:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801dc7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc80:	ee17 3a90 	vmov	r3, s15
 801dc84:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_12++ -= TN_MIN(TN_MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801dc88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801dc8a:	edd9 6a0c 	vldr	s13, [r9, #48]	; 0x30
 801dc8e:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dc92:	ee07 3a90 	vmov	s15, r3
 801dc96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc9a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801dc9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dca2:	ee17 3a90 	vmov	r3, s15
 801dca6:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_13++ -= TN_MIN(TN_MAX(sum_1[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801dcaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dcac:	edd9 6a0d 	vldr	s13, [r9, #52]	; 0x34
 801dcb0:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dcb4:	ee07 3a90 	vmov	s15, r3
 801dcb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dcbc:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801dcc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dcc4:	ee17 3a90 	vmov	r3, s15
 801dcc8:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_14++ -= TN_MIN(TN_MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801dccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dcce:	edd9 6a0e 	vldr	s13, [r9, #56]	; 0x38
 801dcd2:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dcd6:	ee07 3a90 	vmov	s15, r3
 801dcda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dcde:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801dce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dce6:	ee17 3a90 	vmov	r3, s15
 801dcea:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_15++ -= TN_MIN(TN_MAX(sum_1[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801dcee:	9908      	ldr	r1, [sp, #32]
 801dcf0:	edd9 6a0f 	vldr	s13, [r9, #60]	; 0x3c
 801dcf4:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 801dcf8:	ee07 3a90 	vmov	s15, r3
 801dcfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd00:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801dd04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dd08:	ee17 3a90 	vmov	r3, s15
 801dd0c:	f801 3c03 	strb.w	r3, [r1, #-3]
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd10:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
 801dd14:	ed99 6a00 	vldr	s12, [r9]
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801dd18:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd1c:	ed93 7a00 	vldr	s14, [r3]
 801dd20:	f912 3c02 	ldrsb.w	r3, [r2, #-2]
 801dd24:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801dd28:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801dd2c:	ee07 3a90 	vmov	s15, r3
 801dd30:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801dd34:	f60d 1394 	addw	r3, sp, #2452	; 0x994
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801dd3c:	ed93 4a00 	vldr	s8, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801dd40:	f60d 1398 	addw	r3, sp, #2456	; 0x998
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd44:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_2++ -= TN_MIN(TN_MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801dd48:	edd3 6a00 	vldr	s13, [r3]
  *out_3++ -= TN_MIN(TN_MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801dd4c:	f60d 139c 	addw	r3, sp, #2460	; 0x99c
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801dd50:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801dd54:	fe84 4a68 	vminnm.f32	s8, s8, s17
 801dd58:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_3++ -= TN_MIN(TN_MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801dd5c:	edd3 5a00 	vldr	s11, [r3]
  *out_4++ -= TN_MIN(TN_MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801dd60:	f50d 631a 	add.w	r3, sp, #2464	; 0x9a0
  *out_2++ -= TN_MIN(TN_MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801dd64:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
 801dd68:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_4++ -= TN_MIN(TN_MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801dd6c:	edd3 4a00 	vldr	s9, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801dd70:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_3++ -= TN_MIN(TN_MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801dd78:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
 801dd7c:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801dd80:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_4++ -= TN_MIN(TN_MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801dd84:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 801dd88:	fec4 4ae8 	vminnm.f32	s9, s9, s17
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd8c:	ee17 3a90 	vmov	r3, s15
  *out_4++ -= TN_MIN(TN_MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801dd90:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801dd94:	ed91 5a00 	vldr	s10, [r1]
  *out_6++ -= TN_MIN(TN_MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801dd98:	f60d 11a8 	addw	r1, sp, #2472	; 0x9a8
  *out_0++ -= TN_MIN(TN_MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801dd9c:	f802 3c02 	strb.w	r3, [r2, #-2]
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801dda0:	f910 3c06 	ldrsb.w	r3, [r0, #-6]
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801dda4:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801dda8:	edd9 3a01 	vldr	s7, [r9, #4]
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801ddac:	fe85 5a68 	vminnm.f32	s10, s10, s17
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801ddb0:	ee07 3a90 	vmov	s15, r3
  *out_7++ -= TN_MIN(TN_MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801ddb4:	f60d 13ac 	addw	r3, sp, #2476	; 0x9ac
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801ddb8:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_6++ -= TN_MIN(TN_MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801ddbc:	ed91 6a00 	vldr	s12, [r1]
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801ddc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_7++ -= TN_MIN(TN_MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801ddc4:	ed93 7a00 	vldr	s14, [r3]
  *out_6++ -= TN_MIN(TN_MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801ddc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ddca:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
 801ddce:	fe86 6a68 	vminnm.f32	s12, s12, s17
 801ddd2:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801ddd6:	eee3 7ac4 	vfms.f32	s15, s7, s8
  *out_7++ -= TN_MIN(TN_MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801ddda:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801ddde:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801dde2:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801dde6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ddea:	ee17 3a90 	vmov	r3, s15
 801ddee:	f800 3c06 	strb.w	r3, [r0, #-6]
  *out_2++ -= TN_MIN(TN_MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801ddf2:	f914 3c02 	ldrsb.w	r3, [r4, #-2]
 801ddf6:	ed99 4a02 	vldr	s8, [r9, #8]
 801ddfa:	ee07 3a90 	vmov	s15, r3
 801ddfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de02:	eee4 7a66 	vfms.f32	s15, s8, s13
 801de06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de0a:	ee17 3a90 	vmov	r3, s15
 801de0e:	f804 3c02 	strb.w	r3, [r4, #-2]
  *out_3++ -= TN_MIN(TN_MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801de12:	f915 3c02 	ldrsb.w	r3, [r5, #-2]
 801de16:	edd9 6a03 	vldr	s13, [r9, #12]
 801de1a:	ee07 3a90 	vmov	s15, r3
 801de1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de22:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801de26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de2a:	ee17 3a90 	vmov	r3, s15
 801de2e:	f805 3c02 	strb.w	r3, [r5, #-2]
  *out_4++ -= TN_MIN(TN_MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801de32:	f916 3c02 	ldrsb.w	r3, [r6, #-2]
 801de36:	edd9 6a04 	vldr	s13, [r9, #16]
 801de3a:	ee07 3a90 	vmov	s15, r3
 801de3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de42:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801de46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de4a:	ee17 3a90 	vmov	r3, s15
 801de4e:	f806 3c02 	strb.w	r3, [r6, #-2]
  *out_5++ -= TN_MIN(TN_MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801de52:	f917 3c02 	ldrsb.w	r3, [r7, #-2]
 801de56:	edd9 6a05 	vldr	s13, [r9, #20]
 801de5a:	ee07 3a90 	vmov	s15, r3
 801de5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de62:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801de66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de6a:	ee17 3a90 	vmov	r3, s15
 801de6e:	f807 3c02 	strb.w	r3, [r7, #-2]
  *out_6++ -= TN_MIN(TN_MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801de72:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801de76:	edd9 6a06 	vldr	s13, [r9, #24]
 801de7a:	ee07 3a90 	vmov	s15, r3
 801de7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de82:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801de86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de8a:	ee17 3a90 	vmov	r3, s15
 801de8e:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_7++ -= TN_MIN(TN_MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801de92:	9910      	ldr	r1, [sp, #64]	; 0x40
 801de94:	edd9 6a07 	vldr	s13, [r9, #28]
 801de98:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801de9c:	ee07 3a90 	vmov	s15, r3
 801dea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dea4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801dea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801deac:	ee17 3a90 	vmov	r3, s15
 801deb0:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801deb4:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 801deb8:	ed99 6a08 	vldr	s12, [r9, #32]
 801debc:	ed93 7a00 	vldr	s14, [r3]
 801dec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801dec2:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801dec6:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801deca:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801dece:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_13++ -= TN_MIN(TN_MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801ded2:	ed9c 5a00 	vldr	s10, [ip]
  *out_14++ -= TN_MIN(TN_MAX(sum_2[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801ded6:	f60d 1cc8 	addw	ip, sp, #2504	; 0x9c8
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801deda:	ee07 3a90 	vmov	s15, r3
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801dede:	f60d 13b4 	addw	r3, sp, #2484	; 0x9b4
  *out_13++ -= TN_MIN(TN_MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801dee2:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
 801dee6:	fe85 5a68 	vminnm.f32	s10, s10, s17
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801deea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801deee:	ed93 4a00 	vldr	s8, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801def2:	f60d 13b8 	addw	r3, sp, #2488	; 0x9b8
  *out_13++ -= TN_MIN(TN_MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801def6:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801defa:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801defe:	fe84 4a68 	vminnm.f32	s8, s8, s17
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801df02:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801df06:	edd3 6a00 	vldr	s13, [r3]
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801df0a:	f60d 13bc 	addw	r3, sp, #2492	; 0x9bc
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801df0e:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801df12:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
 801df16:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801df1a:	edd3 5a00 	vldr	s11, [r3]
  *out_12++ -= TN_MIN(TN_MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801df1e:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801df22:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_14++ -= TN_MIN(TN_MAX(sum_2[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801df26:	ed9c 6a00 	vldr	s12, [ip]
  *out_12++ -= TN_MIN(TN_MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801df2a:	edd3 4a00 	vldr	s9, [r3]
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801df2e:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801df32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801df36:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801df3a:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_12++ -= TN_MIN(TN_MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801df3e:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 801df42:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 801df46:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801df4a:	ee17 3a90 	vmov	r3, s15
  *out_14++ -= TN_MIN(TN_MAX(sum_2[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801df4e:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
 801df52:	fe86 6a68 	vminnm.f32	s12, s12, s17
 801df56:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_8++ -= TN_MIN(TN_MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801df5a:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801df5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801df60:	edd9 3a09 	vldr	s7, [r9, #36]	; 0x24
 801df64:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801df68:	ee07 3a90 	vmov	s15, r3
  *out_15++ -= TN_MIN(TN_MAX(sum_2[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801df6c:	f60d 13cc 	addw	r3, sp, #2508	; 0x9cc
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801df70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_15++ -= TN_MIN(TN_MAX(sum_2[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801df74:	ed93 7a00 	vldr	s14, [r3]
 801df78:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801df7c:	fe87 7a68 	vminnm.f32	s14, s14, s17
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801df80:	eee3 7ac4 	vfms.f32	s15, s7, s8
  *out_15++ -= TN_MIN(TN_MAX(sum_2[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801df84:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801df88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801df8c:	ee17 3a90 	vmov	r3, s15
 801df90:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_10++ -= TN_MIN(TN_MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801df94:	990d      	ldr	r1, [sp, #52]	; 0x34
 801df96:	ed99 4a0a 	vldr	s8, [r9, #40]	; 0x28
 801df9a:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801df9e:	ee07 3a90 	vmov	s15, r3
 801dfa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfa6:	eee4 7a66 	vfms.f32	s15, s8, s13
 801dfaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dfae:	ee17 3a90 	vmov	r3, s15
 801dfb2:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_11++ -= TN_MIN(TN_MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801dfb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dfb8:	edd9 6a0b 	vldr	s13, [r9, #44]	; 0x2c
 801dfbc:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801dfc0:	ee07 3a90 	vmov	s15, r3
 801dfc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfc8:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801dfcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dfd0:	ee17 3a90 	vmov	r3, s15
 801dfd4:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_12++ -= TN_MIN(TN_MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801dfd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801dfda:	edd9 6a0c 	vldr	s13, [r9, #48]	; 0x30
 801dfde:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801dfe2:	ee07 3a90 	vmov	s15, r3
 801dfe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfea:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801dfee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dff2:	ee17 3a90 	vmov	r3, s15
 801dff6:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_13++ -= TN_MIN(TN_MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801dffa:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dffc:	edd9 6a0d 	vldr	s13, [r9, #52]	; 0x34
 801e000:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801e004:	ee07 3a90 	vmov	s15, r3
 801e008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e00c:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801e010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e014:	ee17 3a90 	vmov	r3, s15
 801e018:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_14++ -= TN_MIN(TN_MAX(sum_2[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801e01c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e01e:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801e022:	edd9 6a0e 	vldr	s13, [r9, #56]	; 0x38
 801e026:	ee07 3a90 	vmov	s15, r3
 801e02a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e02e:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801e032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e036:	ee17 3a90 	vmov	r3, s15
 801e03a:	f801 3c02 	strb.w	r3, [r1, #-2]
  *out_15++ -= TN_MIN(TN_MAX(sum_2[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801e03e:	9908      	ldr	r1, [sp, #32]
 801e040:	edd9 6a0f 	vldr	s13, [r9, #60]	; 0x3c
 801e044:	f911 3c02 	ldrsb.w	r3, [r1, #-2]
 801e048:	ee07 3a90 	vmov	s15, r3
 801e04c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e050:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801e054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e058:	ee17 3a90 	vmov	r3, s15
 801e05c:	f801 3c02 	strb.w	r3, [r1, #-2]

  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e060:	f50d 631d 	add.w	r3, sp, #2512	; 0x9d0
 801e064:	ed99 6a00 	vldr	s12, [r9]
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= TN_MIN(TN_MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e068:	f60d 11e4 	addw	r1, sp, #2532	; 0x9e4
  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e06c:	ed93 7a00 	vldr	s14, [r3]
 801e070:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
 801e074:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801e078:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801e07c:	ee07 3a90 	vmov	s15, r3
 801e080:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e084:	f60d 13d4 	addw	r3, sp, #2516	; 0x9d4
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e088:	ed91 5a00 	vldr	s10, [r1]
  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e090:	f60d 11e8 	addw	r1, sp, #2536	; 0x9e8
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e094:	ed93 4a00 	vldr	s8, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801e098:	f60d 13d8 	addw	r3, sp, #2520	; 0x9d8
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e09c:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
 801e0a0:	fe85 5a68 	vminnm.f32	s10, s10, s17
  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e0a4:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801e0a8:	edd3 6a00 	vldr	s13, [r3]
  *out_3++ -= TN_MIN(TN_MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801e0ac:	f60d 13dc 	addw	r3, sp, #2524	; 0x9dc
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e0b0:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801e0b4:	fe84 4a68 	vminnm.f32	s8, s8, s17
 801e0b8:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_3++ -= TN_MIN(TN_MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801e0bc:	edd3 5a00 	vldr	s11, [r3]
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801e0c0:	f50d 631e 	add.w	r3, sp, #2528	; 0x9e0
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801e0c4:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
 801e0c8:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801e0cc:	edd3 4a00 	vldr	s9, [r3]
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801e0d0:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e0d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_3++ -= TN_MIN(TN_MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801e0d8:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
 801e0dc:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801e0e0:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801e0e4:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 801e0e8:	fec4 4ae8 	vminnm.f32	s9, s9, s17
  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e0ec:	ee17 3a90 	vmov	r3, s15
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801e0f0:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e0f4:	ed91 6a00 	vldr	s12, [r1]
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e0f8:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_0++ -= TN_MIN(TN_MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
 801e0fc:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= TN_MIN(TN_MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= TN_MIN(TN_MAX(sum_3[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801e100:	f60d 2104 	addw	r1, sp, #2564	; 0xa04
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e104:	f910 3c05 	ldrsb.w	r3, [r0, #-5]
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e108:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e10c:	edd9 3a01 	vldr	s7, [r9, #4]
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e110:	fe86 6a68 	vminnm.f32	s12, s12, s17
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e114:	ee07 3a90 	vmov	s15, r3
  *out_7++ -= TN_MIN(TN_MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801e118:	f60d 13ec 	addw	r3, sp, #2540	; 0x9ec
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e11c:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_7++ -= TN_MIN(TN_MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801e124:	ed93 7a00 	vldr	s14, [r3]
 801e128:	1d13      	adds	r3, r2, #4
 801e12a:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801e12e:	fe87 7a68 	vminnm.f32	s14, s14, s17
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e132:	eee3 7ac4 	vfms.f32	s15, s7, s8
 801e136:	9314      	str	r3, [sp, #80]	; 0x50
  *out_7++ -= TN_MIN(TN_MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801e138:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_1++ -= TN_MIN(TN_MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
 801e13c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e140:	ee17 3a90 	vmov	r3, s15
 801e144:	f800 3c05 	strb.w	r3, [r0, #-5]
 801e148:	90fd      	str	r0, [sp, #1012]	; 0x3f4
  *out_2++ -= TN_MIN(TN_MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
 801e14a:	f914 0c01 	ldrsb.w	r0, [r4, #-1]
 801e14e:	ed99 4a02 	vldr	s8, [r9, #8]
 801e152:	ee07 0a90 	vmov	s15, r0
 801e156:	1d20      	adds	r0, r4, #4
 801e158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e15c:	90fc      	str	r0, [sp, #1008]	; 0x3f0
 801e15e:	eee4 7a66 	vfms.f32	s15, s8, s13
 801e162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e166:	ee17 3a90 	vmov	r3, s15
 801e16a:	f804 3c01 	strb.w	r3, [r4, #-1]
  *out_3++ -= TN_MIN(TN_MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
 801e16e:	f915 0c01 	ldrsb.w	r0, [r5, #-1]
 801e172:	edd9 6a03 	vldr	s13, [r9, #12]
 801e176:	ee07 0a90 	vmov	s15, r0
 801e17a:	1d28      	adds	r0, r5, #4
 801e17c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e180:	90fb      	str	r0, [sp, #1004]	; 0x3ec
 801e182:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801e186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e18a:	ee17 3a90 	vmov	r3, s15
 801e18e:	f805 3c01 	strb.w	r3, [r5, #-1]
  *out_4++ -= TN_MIN(TN_MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
 801e192:	f916 0c01 	ldrsb.w	r0, [r6, #-1]
 801e196:	edd9 6a04 	vldr	s13, [r9, #16]
 801e19a:	ee07 0a90 	vmov	s15, r0
 801e19e:	1d30      	adds	r0, r6, #4
 801e1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e1a4:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801e1a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e1ac:	ee17 3a90 	vmov	r3, s15
 801e1b0:	f806 3c01 	strb.w	r3, [r6, #-1]
 801e1b4:	90fa      	str	r0, [sp, #1000]	; 0x3e8
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e1b6:	f917 0c01 	ldrsb.w	r0, [r7, #-1]
 801e1ba:	edd9 6a05 	vldr	s13, [r9, #20]
 801e1be:	ee07 0a90 	vmov	s15, r0
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e1c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1c4:	1d38      	adds	r0, r7, #4
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e1c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e1ca:	90f9      	str	r0, [sp, #996]	; 0x3e4
 801e1cc:	eee6 7ac5 	vfms.f32	s15, s13, s10
  *out_13++ -= TN_MIN(TN_MAX(sum_3[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801e1d0:	ed91 5a00 	vldr	s10, [r1]
  *out_14++ -= TN_MIN(TN_MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801e1d4:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
  *out_13++ -= TN_MIN(TN_MAX(sum_3[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801e1d8:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
 801e1dc:	fe85 5a68 	vminnm.f32	s10, s10, s17
 801e1e0:	ee25 5a09 	vmul.f32	s10, s10, s18
  *out_5++ -= TN_MIN(TN_MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
 801e1e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e1e8:	ee17 3a90 	vmov	r3, s15
 801e1ec:	f807 3c01 	strb.w	r3, [r7, #-1]
  *out_6++ -= TN_MIN(TN_MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
 801e1f0:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e1f4:	edd9 6a06 	vldr	s13, [r9, #24]
 801e1f8:	ee07 0a90 	vmov	s15, r0
 801e1fc:	1d10      	adds	r0, r2, #4
 801e1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e202:	9011      	str	r0, [sp, #68]	; 0x44
 801e204:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801e208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e20c:	ee17 3a90 	vmov	r3, s15
 801e210:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_7++ -= TN_MIN(TN_MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
 801e214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e216:	edd9 6a07 	vldr	s13, [r9, #28]
 801e21a:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e21e:	ee07 0a90 	vmov	s15, r0
 801e222:	1d10      	adds	r0, r2, #4
 801e224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e228:	9010      	str	r0, [sp, #64]	; 0x40
 801e22a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801e22e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e232:	ee17 3a90 	vmov	r3, s15
 801e236:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801e23a:	f50d 631f 	add.w	r3, sp, #2544	; 0x9f0
 801e23e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e240:	ed93 7a00 	vldr	s14, [r3]
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e244:	f60d 13f4 	addw	r3, sp, #2548	; 0x9f4
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801e248:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e24c:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801e250:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801e254:	ee07 0a90 	vmov	s15, r0
 801e258:	ee27 7a09 	vmul.f32	s14, s14, s18
 801e25c:	ed99 6a08 	vldr	s12, [r9, #32]
 801e260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e264:	ed93 4a00 	vldr	s8, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801e268:	f60d 13f8 	addw	r3, sp, #2552	; 0x9f8
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e26c:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
 801e270:	fe84 4a68 	vminnm.f32	s8, s8, s17
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801e274:	eee6 7a47 	vfms.f32	s15, s12, s14
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801e278:	edd3 6a00 	vldr	s13, [r3]
  *out_11++ -= TN_MIN(TN_MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801e27c:	f60d 13fc 	addw	r3, sp, #2556	; 0x9fc
  *out_14++ -= TN_MIN(TN_MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801e280:	ed91 6a00 	vldr	s12, [r1]
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e284:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e286:	ee24 4a09 	vmul.f32	s8, s8, s18
  *out_11++ -= TN_MIN(TN_MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801e28a:	edd3 5a00 	vldr	s11, [r3]
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801e28e:	f50d 6320 	add.w	r3, sp, #2560	; 0xa00
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801e292:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
 801e296:	fec6 6ae8 	vminnm.f32	s13, s13, s17
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801e29a:	edd3 4a00 	vldr	s9, [r3]
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801e29e:	ee66 6a89 	vmul.f32	s13, s13, s18
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801e2a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *out_11++ -= TN_MIN(TN_MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801e2a6:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
 801e2aa:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 801e2ae:	ee65 5a89 	vmul.f32	s11, s11, s18
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801e2b2:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 801e2b6:	fec4 4ae8 	vminnm.f32	s9, s9, s17
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801e2ba:	ee17 3a90 	vmov	r3, s15
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801e2be:	ee64 4a89 	vmul.f32	s9, s9, s18
  *out_14++ -= TN_MIN(TN_MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801e2c2:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
 801e2c6:	fe86 6a68 	vminnm.f32	s12, s12, s17
  *out_8++ -= TN_MIN(TN_MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
 801e2ca:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_15++ -= TN_MIN(TN_MAX(sum_3[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801e2ce:	f60d 230c 	addw	r3, sp, #2572	; 0xa0c
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e2d2:	f911 0c01 	ldrsb.w	r0, [r1, #-1]
  *out_14++ -= TN_MIN(TN_MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801e2d6:	ee26 6a09 	vmul.f32	s12, s12, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e2da:	edd9 3a09 	vldr	s7, [r9, #36]	; 0x24
 801e2de:	ee07 0a90 	vmov	s15, r0
 801e2e2:	1d10      	adds	r0, r2, #4
  *out_15++ -= TN_MIN(TN_MAX(sum_3[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801e2e4:	ed93 7a00 	vldr	s14, [r3]
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e2e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e2ec:	900f      	str	r0, [sp, #60]	; 0x3c
 801e2ee:	1d08      	adds	r0, r1, #4
  *out_15++ -= TN_MIN(TN_MAX(sum_3[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801e2f0:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 801e2f4:	fe87 7a68 	vminnm.f32	s14, s14, s17
 801e2f8:	ee27 7a09 	vmul.f32	s14, s14, s18
  *out_9++ -= TN_MIN(TN_MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
 801e2fc:	eee3 7ac4 	vfms.f32	s15, s7, s8
 801e300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e304:	ee17 3a90 	vmov	r3, s15
 801e308:	f801 3c01 	strb.w	r3, [r1, #-1]
 801e30c:	900e      	str	r0, [sp, #56]	; 0x38
  *out_10++ -= TN_MIN(TN_MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
 801e30e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e310:	ed99 4a0a 	vldr	s8, [r9, #40]	; 0x28
 801e314:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e318:	ee07 0a90 	vmov	s15, r0
 801e31c:	1d10      	adds	r0, r2, #4
 801e31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e322:	900d      	str	r0, [sp, #52]	; 0x34
 801e324:	eee4 7a66 	vfms.f32	s15, s8, s13
 801e328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e32c:	ee17 3a90 	vmov	r3, s15
 801e330:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_11++ -= TN_MIN(TN_MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
 801e334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e336:	edd9 6a0b 	vldr	s13, [r9, #44]	; 0x2c
 801e33a:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e33e:	ee07 0a90 	vmov	s15, r0
 801e342:	1d10      	adds	r0, r2, #4
 801e344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e348:	900c      	str	r0, [sp, #48]	; 0x30
 801e34a:	eee6 7ae5 	vfms.f32	s15, s13, s11
 801e34e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e352:	ee17 3a90 	vmov	r3, s15
 801e356:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_12++ -= TN_MIN(TN_MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
 801e35a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e35c:	edd9 6a0c 	vldr	s13, [r9, #48]	; 0x30
 801e360:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e364:	ee07 0a90 	vmov	s15, r0
 801e368:	1d10      	adds	r0, r2, #4
 801e36a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e36e:	900b      	str	r0, [sp, #44]	; 0x2c
 801e370:	eee6 7ae4 	vfms.f32	s15, s13, s9
 801e374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e378:	ee17 3a90 	vmov	r3, s15
 801e37c:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_13++ -= TN_MIN(TN_MAX(sum_3[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
 801e380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e382:	edd9 6a0d 	vldr	s13, [r9, #52]	; 0x34
 801e386:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e38a:	ee07 0a90 	vmov	s15, r0
 801e38e:	1d10      	adds	r0, r2, #4
 801e390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e394:	900a      	str	r0, [sp, #40]	; 0x28
 801e396:	eee6 7ac5 	vfms.f32	s15, s13, s10
 801e39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e39e:	ee17 3a90 	vmov	r3, s15
 801e3a2:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_14++ -= TN_MIN(TN_MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
 801e3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3a8:	edd9 6a0e 	vldr	s13, [r9, #56]	; 0x38
 801e3ac:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 801e3b0:	ee07 0a90 	vmov	s15, r0
 801e3b4:	1d10      	adds	r0, r2, #4
 801e3b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e3ba:	9009      	str	r0, [sp, #36]	; 0x24
 801e3bc:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801e3c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e3c4:	ee17 3a90 	vmov	r3, s15
 801e3c8:	f802 3c01 	strb.w	r3, [r2, #-1]
  *out_15++ -= TN_MIN(TN_MAX(sum_3[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
 801e3cc:	9a08      	ldr	r2, [sp, #32]
 801e3ce:	edd9 6a0f 	vldr	s13, [r9, #60]	; 0x3c
 801e3d2:	f912 1c01 	ldrsb.w	r1, [r2, #-1]
 801e3d6:	3204      	adds	r2, #4
 801e3d8:	ee07 1a90 	vmov	s15, r1
 801e3dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e3e0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801e3e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e3e8:	ee17 3a90 	vmov	r3, s15
 801e3ec:	f802 3c05 	strb.w	r3, [r2, #-5]
 801e3f0:	9208      	str	r2, [sp, #32]
    while (group_cnt--) {
 801e3f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e3f4:	f8dd 27e0 	ldr.w	r2, [sp, #2016]	; 0x7e0
 801e3f8:	429a      	cmp	r2, r3
 801e3fa:	f47c af65 	bne.w	801b2c8 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x10a8>
 801e3fe:	f8dd 78b4 	ldr.w	r7, [sp, #2228]	; 0x8b4
 801e402:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
 801e406:	f109 0940 	add.w	r9, r9, #64	; 0x40
 801e40a:	f8dd 1904 	ldr.w	r1, [sp, #2308]	; 0x904
 801e40e:	f8dd 38ac 	ldr.w	r3, [sp, #2220]	; 0x8ac
 801e412:	440a      	add	r2, r1
 801e414:	3301      	adds	r3, #1
 801e416:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    const float* src_12 = filter_data++; const float* src_13 = filter_data++; const float* src_14 = filter_data++; const float* src_15 = filter_data++;
 801e41a:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
 801e41e:	f8cd 38ac 	str.w	r3, [sp, #2220]	; 0x8ac
 801e422:	f8cd 2a78 	str.w	r2, [sp, #2680]	; 0xa78
  for (i_output_depth = 0; i_output_depth < output_depth_per_group; i_output_depth += 16) {
 801e426:	f8dd 2900 	ldr.w	r2, [sp, #2304]	; 0x900
 801e42a:	429a      	cmp	r2, r3
 801e42c:	f47b afa0 	bne.w	801a370 <group_conv_fp_kernel8_stride1_pad0_in8x8_out1x1_uniweight_4row16col_inplace+0x150>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e430:	2000      	movs	r0, #0
 801e432:	f60d 2d14 	addw	sp, sp, #2580	; 0xa14
 801e436:	ecbd 8b10 	vpop	{d8-d15}
 801e43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e43e:	bf00      	nop

0801e440 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace>:
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const float* filter_data, const float* bias_data, 
                 int8_t* output_weight_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const uint16_t groups,
                 const float* scales, const float learning_rate) {
 801e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e444:	b087      	sub	sp, #28
 801e446:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801e44a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  (void) input_height;
  (void) input_width;

  int group;
  int output_depth_per_group = output_depth / groups;
 801e44e:	fbb3 f4f1 	udiv	r4, r3, r1
 801e452:	9401      	str	r4, [sp, #4]

  for (group = 0; group < groups; group++) {
 801e454:	2900      	cmp	r1, #0
 801e456:	f000 815d 	beq.w	801e714 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x2d4>
      /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
      const float input_0 = (float)input_data[group];
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};

      uint16_t col_count_div10 = (output_depth_per_group * DIM_KER_X * DIM_KER_Y) / 10;
 801e45a:	4622      	mov	r2, r4
 801e45c:	4baf      	ldr	r3, [pc, #700]	; (801e71c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x2dc>)
 801e45e:	fba3 2302 	umull	r2, r3, r3, r2
 801e462:	08db      	lsrs	r3, r3, #3

      while (col_count_div10--) {
 801e464:	1e5a      	subs	r2, r3, #1
 801e466:	b292      	uxth	r2, r2
 801e468:	9202      	str	r2, [sp, #8]
 801e46a:	2c00      	cmp	r4, #0
 801e46c:	f000 8152 	beq.w	801e714 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x2d4>
 801e470:	2b00      	cmp	r3, #0
 801e472:	f000 814f 	beq.w	801e714 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x2d4>
 801e476:	004b      	lsls	r3, r1, #1
 801e478:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801e47a:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 801e47e:	f1c1 0a00 	rsb	sl, r1, #0
 801e482:	eb03 0c01 	add.w	ip, r3, r1
 801e486:	9304      	str	r3, [sp, #16]
 801e488:	4603      	mov	r3, r0
 801e48a:	ebc1 08c1 	rsb	r8, r1, r1, lsl #3
 801e48e:	ea4f 094c 	mov.w	r9, ip, lsl #1
 801e492:	9000      	str	r0, [sp, #0]
 801e494:	440b      	add	r3, r1
 801e496:	9305      	str	r3, [sp, #20]
 801e498:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801e49c:	9303      	str	r3, [sp, #12]
 801e49e:	9b04      	ldr	r3, [sp, #16]
 801e4a0:	19ce      	adds	r6, r1, r7
 801e4a2:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    for (i_ch_out = 0; i_ch_out < output_depth_per_group; i_ch_out+=10) {
 801e4a6:	2500      	movs	r5, #0
 801e4a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e4aa:	443b      	add	r3, r7
      const float input_0 = (float)input_data[group];
 801e4ac:	9800      	ldr	r0, [sp, #0]
        // Assume bias_data as NULL
        float sum[10] = {};

        sum[0] += input_0 * filter[0];
 801e4ae:	eddb 2a00 	vldr	s5, [fp]
      const float input_0 = (float)input_data[group];
 801e4b2:	f990 0000 	ldrsb.w	r0, [r0]
        sum[1] += input_0 * filter[1];
 801e4b6:	ed9b 3a01 	vldr	s6, [fp, #4]
      const float input_0 = (float)input_data[group];
 801e4ba:	ee07 0a90 	vmov	s15, r0
        sum[2] += input_0 * filter[2];
 801e4be:	eddb 3a02 	vldr	s7, [fp, #8]
        sum[3] += input_0 * filter[3];
 801e4c2:	ed9b 4a03 	vldr	s8, [fp, #12]
      const float input_0 = (float)input_data[group];
 801e4c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sum[4] += input_0 * filter[4];
 801e4ca:	eddb 4a04 	vldr	s9, [fp, #16]
        sum[5] += input_0 * filter[5];
 801e4ce:	ed9b 5a05 	vldr	s10, [fp, #20]
        sum[6] += input_0 * filter[6];
 801e4d2:	eddb 5a06 	vldr	s11, [fp, #24]
        sum[7] += input_0 * filter[7];
 801e4d6:	ed9b 6a07 	vldr	s12, [fp, #28]
        sum[0] += input_0 * filter[0];
 801e4da:	ee67 2aa2 	vmul.f32	s5, s15, s5
        sum[8] += input_0 * filter[8];
 801e4de:	eddb 6a08 	vldr	s13, [fp, #32]
        sum[1] += input_0 * filter[1];
 801e4e2:	ee27 3a83 	vmul.f32	s6, s15, s6
        sum[9] += input_0 * filter[9];
 801e4e6:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
        sum[2] += input_0 * filter[2];
 801e4ea:	ee67 3aa3 	vmul.f32	s7, s15, s7
        sum[3] += input_0 * filter[3];
 801e4ee:	ee27 4a84 	vmul.f32	s8, s15, s8

        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 801e4f2:	fec2 2a80 	vmaxnm.f32	s5, s5, s0
        sum[4] += input_0 * filter[4];
 801e4f6:	ee67 4aa4 	vmul.f32	s9, s15, s9
        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 801e4fa:	fec2 2ae0 	vminnm.f32	s5, s5, s1
        sum[5] += input_0 * filter[5];
 801e4fe:	ee27 5a85 	vmul.f32	s10, s15, s10
        output_weight_data[(i_ch_out + 1) * groups + group] -= TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max) * scales[i_ch_out + 1] * learning_rate;
 801e502:	fe83 3a00 	vmaxnm.f32	s6, s6, s0
        sum[6] += input_0 * filter[6];
 801e506:	ee67 5aa5 	vmul.f32	s11, s15, s11
        output_weight_data[(i_ch_out + 1) * groups + group] -= TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max) * scales[i_ch_out + 1] * learning_rate;
 801e50a:	fe83 3a60 	vminnm.f32	s6, s6, s1
        sum[7] += input_0 * filter[7];
 801e50e:	ee27 6a86 	vmul.f32	s12, s15, s12
        output_weight_data[(i_ch_out + 2) * groups + group] -= TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max) * scales[i_ch_out + 2] * learning_rate;
 801e512:	fec3 3a80 	vmaxnm.f32	s7, s7, s0
        sum[8] += input_0 * filter[8];
 801e516:	ee67 6aa6 	vmul.f32	s13, s15, s13
        output_weight_data[(i_ch_out + 2) * groups + group] -= TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max) * scales[i_ch_out + 2] * learning_rate;
 801e51a:	fec3 3ae0 	vminnm.f32	s7, s7, s1
        sum[9] += input_0 * filter[9];
 801e51e:	ee27 7a87 	vmul.f32	s14, s15, s14
        output_weight_data[(i_ch_out + 3) * groups + group] -= TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max) * scales[i_ch_out + 3] * learning_rate;
 801e522:	fe84 4a00 	vmaxnm.f32	s8, s8, s0
        output_weight_data[(i_ch_out + 4) * groups + group] -= TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max) * scales[i_ch_out + 4] * learning_rate;
 801e526:	fec4 4a80 	vmaxnm.f32	s9, s9, s0
        output_weight_data[(i_ch_out + 3) * groups + group] -= TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max) * scales[i_ch_out + 3] * learning_rate;
 801e52a:	fe84 4a60 	vminnm.f32	s8, s8, s1
        output_weight_data[(i_ch_out + 4) * groups + group] -= TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max) * scales[i_ch_out + 4] * learning_rate;
 801e52e:	fec4 4ae0 	vminnm.f32	s9, s9, s1
        output_weight_data[(i_ch_out + 5) * groups + group] -= TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max) * scales[i_ch_out + 5] * learning_rate;
 801e532:	fe85 5a00 	vmaxnm.f32	s10, s10, s0
        output_weight_data[(i_ch_out + 6) * groups + group] -= TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max) * scales[i_ch_out + 6] * learning_rate;
 801e536:	fec5 5a80 	vmaxnm.f32	s11, s11, s0
        output_weight_data[(i_ch_out + 5) * groups + group] -= TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max) * scales[i_ch_out + 5] * learning_rate;
 801e53a:	fe85 5a60 	vminnm.f32	s10, s10, s1
        output_weight_data[(i_ch_out + 6) * groups + group] -= TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max) * scales[i_ch_out + 6] * learning_rate;
 801e53e:	fec5 5ae0 	vminnm.f32	s11, s11, s1
        output_weight_data[(i_ch_out + 7) * groups + group] -= TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max) * scales[i_ch_out + 7] * learning_rate;
 801e542:	fe86 6a00 	vmaxnm.f32	s12, s12, s0
        output_weight_data[(i_ch_out + 8) * groups + group] -= TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max) * scales[i_ch_out + 8] * learning_rate;
 801e546:	fec6 6a80 	vmaxnm.f32	s13, s13, s0
        output_weight_data[(i_ch_out + 7) * groups + group] -= TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max) * scales[i_ch_out + 7] * learning_rate;
 801e54a:	fe86 6a60 	vminnm.f32	s12, s12, s1
        output_weight_data[(i_ch_out + 8) * groups + group] -= TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max) * scales[i_ch_out + 8] * learning_rate;
 801e54e:	fec6 6ae0 	vminnm.f32	s13, s13, s1
        output_weight_data[(i_ch_out + 9) * groups + group] -= TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max) * scales[i_ch_out + 9] * learning_rate;
 801e552:	fe87 7a00 	vmaxnm.f32	s14, s14, s0
 801e556:	eef1 2a62 	vneg.f32	s5, s5
 801e55a:	fe87 7a60 	vminnm.f32	s14, s14, s1
 801e55e:	eeb1 3a43 	vneg.f32	s6, s6
 801e562:	9802      	ldr	r0, [sp, #8]
 801e564:	eef1 3a63 	vneg.f32	s7, s7
 801e568:	eeb1 4a44 	vneg.f32	s8, s8
 801e56c:	eef1 4a64 	vneg.f32	s9, s9
 801e570:	eeb1 5a45 	vneg.f32	s10, s10
 801e574:	eef1 5a65 	vneg.f32	s11, s11
 801e578:	eeb1 6a46 	vneg.f32	s12, s12
 801e57c:	eef1 6a66 	vneg.f32	s13, s13
 801e580:	eeb1 7a47 	vneg.f32	s14, s14
        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 801e584:	577c      	ldrsb	r4, [r7, r5]
      while (col_count_div10--) {
 801e586:	3801      	subs	r0, #1
        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 801e588:	ed92 2a00 	vldr	s4, [r2]
 801e58c:	ee07 4a90 	vmov	s15, r4
      while (col_count_div10--) {
 801e590:	b280      	uxth	r0, r0
        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 801e592:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e59a:	eee2 7a82 	vfma.f32	s15, s5, s4
 801e59e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e5a2:	ee17 4a90 	vmov	r4, s15
 801e5a6:	557c      	strb	r4, [r7, r5]
        output_weight_data[(i_ch_out + 1) * groups + group] -= TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max) * scales[i_ch_out + 1] * learning_rate;
 801e5a8:	f913 400a 	ldrsb.w	r4, [r3, sl]
 801e5ac:	ed92 2a01 	vldr	s4, [r2, #4]
 801e5b0:	ee07 4a90 	vmov	s15, r4
 801e5b4:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e5b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e5bc:	eee3 7a02 	vfma.f32	s15, s6, s4
 801e5c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e5c4:	ee17 4a90 	vmov	r4, s15
 801e5c8:	f803 400a 	strb.w	r4, [r3, sl]
        output_weight_data[(i_ch_out + 2) * groups + group] -= TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max) * scales[i_ch_out + 2] * learning_rate;
 801e5cc:	5674      	ldrsb	r4, [r6, r1]
 801e5ce:	ed92 2a02 	vldr	s4, [r2, #8]
 801e5d2:	ee07 4a90 	vmov	s15, r4
 801e5d6:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e5da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e5de:	eee3 7a82 	vfma.f32	s15, s7, s4
 801e5e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e5e6:	ee17 4a90 	vmov	r4, s15
 801e5ea:	5474      	strb	r4, [r6, r1]
        output_weight_data[(i_ch_out + 3) * groups + group] -= TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max) * scales[i_ch_out + 3] * learning_rate;
 801e5ec:	565c      	ldrsb	r4, [r3, r1]
 801e5ee:	ed92 2a03 	vldr	s4, [r2, #12]
 801e5f2:	ee07 4a90 	vmov	s15, r4
 801e5f6:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e5fe:	eee4 7a02 	vfma.f32	s15, s8, s4
 801e602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e606:	ee17 4a90 	vmov	r4, s15
 801e60a:	545c      	strb	r4, [r3, r1]
        output_weight_data[(i_ch_out + 4) * groups + group] -= TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max) * scales[i_ch_out + 4] * learning_rate;
 801e60c:	f913 4011 	ldrsb.w	r4, [r3, r1, lsl #1]
 801e610:	ed92 2a04 	vldr	s4, [r2, #16]
 801e614:	ee07 4a90 	vmov	s15, r4
 801e618:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e61c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e620:	eee4 7a82 	vfma.f32	s15, s9, s4
 801e624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e628:	ee17 4a90 	vmov	r4, s15
 801e62c:	f803 4011 	strb.w	r4, [r3, r1, lsl #1]
        output_weight_data[(i_ch_out + 5) * groups + group] -= TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max) * scales[i_ch_out + 5] * learning_rate;
 801e630:	f913 400c 	ldrsb.w	r4, [r3, ip]
 801e634:	ed92 2a05 	vldr	s4, [r2, #20]
 801e638:	ee07 4a90 	vmov	s15, r4
 801e63c:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e644:	eee5 7a02 	vfma.f32	s15, s10, s4
 801e648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e64c:	ee17 4a90 	vmov	r4, s15
 801e650:	f803 400c 	strb.w	r4, [r3, ip]
        output_weight_data[(i_ch_out + 6) * groups + group] -= TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max) * scales[i_ch_out + 6] * learning_rate;
 801e654:	f913 4021 	ldrsb.w	r4, [r3, r1, lsl #2]
 801e658:	ed92 2a06 	vldr	s4, [r2, #24]
 801e65c:	ee07 4a90 	vmov	s15, r4
 801e660:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e668:	eee5 7a82 	vfma.f32	s15, s11, s4
 801e66c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e670:	ee17 4a90 	vmov	r4, s15
 801e674:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
        output_weight_data[(i_ch_out + 7) * groups + group] -= TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max) * scales[i_ch_out + 7] * learning_rate;
 801e678:	f913 400e 	ldrsb.w	r4, [r3, lr]
 801e67c:	ed92 2a07 	vldr	s4, [r2, #28]
 801e680:	ee07 4a90 	vmov	s15, r4
 801e684:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e68c:	eee6 7a02 	vfma.f32	s15, s12, s4
 801e690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e694:	ee17 4a90 	vmov	r4, s15
 801e698:	f803 400e 	strb.w	r4, [r3, lr]
        output_weight_data[(i_ch_out + 8) * groups + group] -= TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max) * scales[i_ch_out + 8] * learning_rate;
 801e69c:	f913 4009 	ldrsb.w	r4, [r3, r9]
 801e6a0:	ed92 2a08 	vldr	s4, [r2, #32]
 801e6a4:	ee07 4a90 	vmov	s15, r4
 801e6a8:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e6ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6b0:	eee6 7a82 	vfma.f32	s15, s13, s4
 801e6b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6b8:	ee17 4a90 	vmov	r4, s15
 801e6bc:	f803 4009 	strb.w	r4, [r3, r9]
        output_weight_data[(i_ch_out + 9) * groups + group] -= TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max) * scales[i_ch_out + 9] * learning_rate;
 801e6c0:	f913 4008 	ldrsb.w	r4, [r3, r8]
 801e6c4:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
 801e6c8:	ee07 4a90 	vmov	s15, r4
 801e6cc:	ee21 2a02 	vmul.f32	s4, s2, s4
 801e6d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6d4:	eee7 7a02 	vfma.f32	s15, s14, s4
 801e6d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6dc:	ee17 4a90 	vmov	r4, s15
 801e6e0:	f803 4008 	strb.w	r4, [r3, r8]
      while (col_count_div10--) {
 801e6e4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801e6e8:	42a0      	cmp	r0, r4
 801e6ea:	f47f af4b 	bne.w	801e584 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x144>
 801e6ee:	9803      	ldr	r0, [sp, #12]
    for (i_ch_out = 0; i_ch_out < output_depth_per_group; i_ch_out+=10) {
 801e6f0:	350a      	adds	r5, #10
 801e6f2:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 801e6f6:	3228      	adds	r2, #40	; 0x28
 801e6f8:	4406      	add	r6, r0
 801e6fa:	4403      	add	r3, r0
 801e6fc:	9801      	ldr	r0, [sp, #4]
 801e6fe:	42a8      	cmp	r0, r5
 801e700:	f73f aed4 	bgt.w	801e4ac <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x6c>
 801e704:	9b00      	ldr	r3, [sp, #0]
 801e706:	3701      	adds	r7, #1
  for (group = 0; group < groups; group++) {
 801e708:	9a05      	ldr	r2, [sp, #20]
 801e70a:	3301      	adds	r3, #1
 801e70c:	429a      	cmp	r2, r3
 801e70e:	9300      	str	r3, [sp, #0]
 801e710:	f47f aec5 	bne.w	801e49e <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x5e>
    }
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e714:	2000      	movs	r0, #0
 801e716:	b007      	add	sp, #28
 801e718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e71c:	cccccccd 	.word	0xcccccccd

0801e720 <LogSoftmax>:

#include "tinyengine_function_fp.h"
#include "tinyengine_function.h"

tinyengine_status_fp LogSoftmax(const float* input_data, const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                       float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth) {
 801e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e724:	ed2d 8b02 	vpush	{d8}
 801e728:	b085      	sub	sp, #20
  const int outer_size = input_height * input_width;
 801e72a:	fb02 fb01 	mul.w	fp, r2, r1
                       float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth) {
 801e72e:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
  const int depth = TN_MIN(input_depth, output_depth);
 801e732:	459a      	cmp	sl, r3
 801e734:	bf28      	it	cs
 801e736:	469a      	movcs	sl, r3
 801e738:	f8cd a008 	str.w	sl, [sp, #8]

  for (int i = 0; i < outer_size; ++i) {
 801e73c:	f1bb 0f00 	cmp.w	fp, #0
 801e740:	d055      	beq.n	801e7ee <LogSoftmax+0xce>
 801e742:	ea4f 098a 	mov.w	r9, sl, lsl #2
 801e746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e748:	4607      	mov	r7, r0
 801e74a:	f04f 0800 	mov.w	r8, #0
 801e74e:	eba3 0309 	sub.w	r3, r3, r9
 801e752:	eb00 0609 	add.w	r6, r0, r9
 801e756:	1a1b      	subs	r3, r3, r0
 801e758:	9303      	str	r3, [sp, #12]
    float max = FLT_MIN;
    for (int c = 0; c < depth; ++c) {
 801e75a:	9b02      	ldr	r3, [sp, #8]
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d040      	beq.n	801e7e2 <LogSoftmax+0xc2>
 801e760:	463c      	mov	r4, r7
    float max = FLT_MIN;
 801e762:	ed9f 8a26 	vldr	s16, [pc, #152]	; 801e7fc <LogSoftmax+0xdc>
      max = TN_MAX(max, input_data[i * depth + c]);
 801e766:	ecf4 7a01 	vldmia	r4!, {s15}
    for (int c = 0; c < depth; ++c) {
 801e76a:	42a6      	cmp	r6, r4
      max = TN_MAX(max, input_data[i * depth + c]);
 801e76c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    for (int c = 0; c < depth; ++c) {
 801e770:	d1f9      	bne.n	801e766 <LogSoftmax+0x46>
 801e772:	463d      	mov	r5, r7
    }

    float sum = 0.f;
 801e774:	f04f 0a00 	mov.w	sl, #0
    for (int c = 0; c < depth; ++c) {
      sum += exp(input_data[i * depth + c] - max);
 801e778:	ecf5 7a01 	vldmia	r5!, {s15}
 801e77c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801e780:	ee17 0a90 	vmov	r0, s15
 801e784:	f7e8 fc7a 	bl	800707c <__aeabi_f2d>
 801e788:	ec41 0b10 	vmov	d0, r0, r1
 801e78c:	f009 facc 	bl	8027d28 <exp>
 801e790:	4650      	mov	r0, sl
 801e792:	ec53 2b10 	vmov	r2, r3, d0
 801e796:	e9cd 2300 	strd	r2, r3, [sp]
 801e79a:	f7e8 fc6f 	bl	800707c <__aeabi_f2d>
 801e79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7a2:	f7e8 fb0d 	bl	8006dc0 <__adddf3>
 801e7a6:	f7e8 ff99 	bl	80076dc <__aeabi_d2f>
    for (int c = 0; c < depth; ++c) {
 801e7aa:	42ac      	cmp	r4, r5
      sum += exp(input_data[i * depth + c] - max);
 801e7ac:	4682      	mov	sl, r0
    for (int c = 0; c < depth; ++c) {
 801e7ae:	d1e3      	bne.n	801e778 <LogSoftmax+0x58>
    }

    const float log_sum = log(sum);
 801e7b0:	f7e8 fc64 	bl	800707c <__aeabi_f2d>
 801e7b4:	ec41 0b10 	vmov	d0, r0, r1
 801e7b8:	f009 fb32 	bl	8027e20 <log>
 801e7bc:	ec51 0b10 	vmov	r0, r1, d0
 801e7c0:	f7e8 ff8c 	bl	80076dc <__aeabi_d2f>
 801e7c4:	9b03      	ldr	r3, [sp, #12]
 801e7c6:	ee07 0a10 	vmov	s14, r0
 801e7ca:	199a      	adds	r2, r3, r6
 801e7cc:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
      output_data[i * depth + c] = input_data[i * depth + c] - max - log_sum;
 801e7ce:	ecf3 7a01 	vldmia	r3!, {s15}
 801e7d2:	ee77 7ac8 	vsub.f32	s15, s15, s16
    for (int c = 0; c < depth; ++c) {
 801e7d6:	42a3      	cmp	r3, r4
      output_data[i * depth + c] = input_data[i * depth + c] - max - log_sum;
 801e7d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e7dc:	ece2 7a01 	vstmia	r2!, {s15}
    for (int c = 0; c < depth; ++c) {
 801e7e0:	d1f5      	bne.n	801e7ce <LogSoftmax+0xae>
  for (int i = 0; i < outer_size; ++i) {
 801e7e2:	f108 0801 	add.w	r8, r8, #1
 801e7e6:	444f      	add	r7, r9
 801e7e8:	444e      	add	r6, r9
 801e7ea:	45c3      	cmp	fp, r8
 801e7ec:	d1b5      	bne.n	801e75a <LogSoftmax+0x3a>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e7ee:	2000      	movs	r0, #0
 801e7f0:	b005      	add	sp, #20
 801e7f2:	ecbd 8b02 	vpop	{d8}
 801e7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7fa:	bf00      	nop
 801e7fc:	00800000 	.word	0x00800000

0801e800 <mul>:

tinyengine_status_fp mul(const uint16_t size, const float* input1_data,
			               const float* input2_data, float* output_data) {
  int i;
  
  for (i = 0; i < size; ++i) {
 801e800:	b158      	cbz	r0, 801e81a <mul+0x1a>
 801e802:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    output_data[i] = input1_data[i] * input2_data[i];
 801e806:	ecf1 7a01 	vldmia	r1!, {s15}
 801e80a:	ecb2 7a01 	vldmia	r2!, {s14}
  for (i = 0; i < size; ++i) {
 801e80e:	4288      	cmp	r0, r1
    output_data[i] = input1_data[i] * input2_data[i];
 801e810:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e814:	ece3 7a01 	vstmia	r3!, {s15}
  for (i = 0; i < size; ++i) {
 801e818:	d1f5      	bne.n	801e806 <mul+0x6>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e81a:	2000      	movs	r0, #0
 801e81c:	4770      	bx	lr
 801e81e:	bf00      	nop

0801e820 <nll_loss>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp nll_loss(const float* input_data, const uint16_t input_dim, const uint16_t input_depth, 
                       const float* target, const uint16_t target_size, float* output_data) {
 801e820:	b430      	push	{r4, r5}
 801e822:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e826:	9d03      	ldr	r5, [sp, #12]
  int idx;

  for(int i = 0; i < target_size; i++){
 801e828:	b1a9      	cbz	r1, 801e856 <nll_loss+0x36>
	  if (target[i] > 0){
 801e82a:	edd3 7a00 	vldr	s15, [r3]
 801e82e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e836:	dc0e      	bgt.n	801e856 <nll_loss+0x36>
 801e838:	3304      	adds	r3, #4
  for(int i = 0; i < target_size; i++){
 801e83a:	2200      	movs	r2, #0
 801e83c:	e006      	b.n	801e84c <nll_loss+0x2c>
	  if (target[i] > 0){
 801e83e:	ecf3 7a01 	vldmia	r3!, {s15}
 801e842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e84a:	dc0d      	bgt.n	801e868 <nll_loss+0x48>
  for(int i = 0; i < target_size; i++){
 801e84c:	3201      	adds	r2, #1
 801e84e:	428a      	cmp	r2, r1
 801e850:	ea4f 0482 	mov.w	r4, r2, lsl #2
 801e854:	d1f3      	bne.n	801e83e <nll_loss+0x1e>
		  idx = i;
		  break;
	  }
  }

  output_data[0] = -input_data[idx];
 801e856:	edd0 7a00 	vldr	s15, [r0]
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801e85a:	2000      	movs	r0, #0
  output_data[0] = -input_data[idx];
 801e85c:	eef1 7a67 	vneg.f32	s15, s15
 801e860:	edc5 7a00 	vstr	s15, [r5]
}
 801e864:	bc30      	pop	{r4, r5}
 801e866:	4770      	bx	lr
 801e868:	4420      	add	r0, r4
 801e86a:	e7f4      	b.n	801e856 <nll_loss+0x36>

0801e86c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight>:
tinyengine_status_fp pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 801e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e870:	ed2d 8b10 	vpush	{d8-d15}
 801e874:	b0af      	sub	sp, #188	; 0xbc
 801e876:	f8bd 212c 	ldrh.w	r2, [sp, #300]	; 0x12c
 801e87a:	f8bd 1130 	ldrh.w	r1, [sp, #304]	; 0x130
 801e87e:	9325      	str	r3, [sp, #148]	; 0x94
  (void) input_width;

  float* out = output_data;

  int i_element;
  const int num_elements = output_height * output_width;
 801e880:	fb01 f202 	mul.w	r2, r1, r2
                 float* im2col_data, const uint16_t batches) {
 801e884:	f8bd a134 	ldrh.w	sl, [sp, #308]	; 0x134
  const int num_elements = output_height * output_width;
 801e888:	922b      	str	r2, [sp, #172]	; 0xac

  for (i_element = 0; i_element < num_elements; i_element++) {
 801e88a:	2a00      	cmp	r2, #0
 801e88c:	f000 8392 	beq.w	801efb4 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x748>
      const int8_t* filter_7_int8 = &filter_data[(i_ch_in + 7) * output_depth];
      const int8_t* filter_8_int8 = &filter_data[(i_ch_in + 8) * output_depth];
      const int8_t* filter_9_int8 = &filter_data[(i_ch_in + 9) * output_depth];
      float filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9;

      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801e890:	ea4f 02da 	mov.w	r2, sl, lsr #3
 801e894:	461c      	mov	r4, r3

      while (col_count_div8--) {
 801e896:	1e53      	subs	r3, r2, #1
      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801e898:	9224      	str	r2, [sp, #144]	; 0x90
      while (col_count_div8--) {
 801e89a:	b29b      	uxth	r3, r3
 801e89c:	2c00      	cmp	r4, #0
 801e89e:	f000 8389 	beq.w	801efb4 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x748>
 801e8a2:	1c59      	adds	r1, r3, #1
 801e8a4:	00db      	lsls	r3, r3, #3
 801e8a6:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 801e8aa:	eeb0 1a40 	vmov.f32	s2, s0
 801e8ae:	3308      	adds	r3, #8
 801e8b0:	4683      	mov	fp, r0
 801e8b2:	0052      	lsls	r2, r2, #1
 801e8b4:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 801e8b8:	9328      	str	r3, [sp, #160]	; 0xa0
 801e8ba:	014b      	lsls	r3, r1, #5
 801e8bc:	9226      	str	r2, [sp, #152]	; 0x98
  for (i_element = 0; i_element < num_elements; i_element++) {
 801e8be:	2200      	movs	r2, #0
 801e8c0:	9327      	str	r3, [sp, #156]	; 0x9c
 801e8c2:	00a3      	lsls	r3, r4, #2
 801e8c4:	922a      	str	r2, [sp, #168]	; 0xa8
 801e8c6:	932c      	str	r3, [sp, #176]	; 0xb0
 801e8c8:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801e8ca:	3308      	adds	r3, #8
 801e8cc:	932d      	str	r3, [sp, #180]	; 0xb4
 801e8ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e8d0:	eef0 8a41 	vmov.f32	s17, s2
 801e8d4:	eeb0 9a60 	vmov.f32	s18, s1
 801e8d8:	9322      	str	r3, [sp, #136]	; 0x88
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=10) {
 801e8da:	2300      	movs	r3, #0
 801e8dc:	9323      	str	r3, [sp, #140]	; 0x8c
      while (col_count_div8--) {
 801e8de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	f000 834f 	beq.w	801ef84 <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x718>
 801e8e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e8e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e8ea:	994a      	ldr	r1, [sp, #296]	; 0x128
 801e8ec:	189f      	adds	r7, r3, r2
 801e8ee:	4691      	mov	r9, r2
 801e8f0:	f101 0e20 	add.w	lr, r1, #32
 801e8f4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e8f6:	19de      	adds	r6, r3, r7
 801e8f8:	4411      	add	r1, r2
 801e8fa:	18f5      	adds	r5, r6, r3
 801e8fc:	4688      	mov	r8, r1
 801e8fe:	18ec      	adds	r4, r5, r3
 801e900:	9502      	str	r5, [sp, #8]
 801e902:	18e0      	adds	r0, r4, r3
 801e904:	9406      	str	r4, [sp, #24]
 801e906:	18c1      	adds	r1, r0, r3
 801e908:	18ca      	adds	r2, r1, r3
 801e90a:	eb02 0a03 	add.w	sl, r2, r3
 801e90e:	9201      	str	r2, [sp, #4]
 801e910:	eb0a 0c03 	add.w	ip, sl, r3
 801e914:	f8cd a00c 	str.w	sl, [sp, #12]
 801e918:	e9cd 1004 	strd	r1, r0, [sp, #16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
        mac_1row_10col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801e91c:	f919 3c07 	ldrsb.w	r3, [r9, #-7]
 801e920:	f109 0908 	add.w	r9, r9, #8
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e924:	9a06      	ldr	r2, [sp, #24]
 801e926:	f10c 0c08 	add.w	ip, ip, #8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801e92a:	ee06 3a10 	vmov	s12, r3
 801e92e:	f917 3c07 	ldrsb.w	r3, [r7, #-7]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e932:	9905      	ldr	r1, [sp, #20]
 801e934:	3608      	adds	r6, #8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801e936:	ee05 3a10 	vmov	s10, r3
 801e93a:	f916 3c0f 	ldrsb.w	r3, [r6, #-15]
  *sum += *input_0++ * filter_1;
 801e93e:	eddb 4a01 	vldr	s9, [fp, #4]
 801e942:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801e946:	ee06 3a90 	vmov	s13, r3
 801e94a:	9b02      	ldr	r3, [sp, #8]
 801e94c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e950:	9804      	ldr	r0, [sp, #16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801e952:	f913 3c07 	ldrsb.w	r3, [r3, #-7]
 801e956:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum += *input_0++ * filter_0;
 801e95a:	ed9b 8a00 	vldr	s16, [fp]
 801e95e:	3708      	adds	r7, #8
 801e960:	ee07 3a90 	vmov	s15, r3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e964:	f912 3c07 	ldrsb.w	r3, [r2, #-7]
  *sum += *input_0++ * filter_1;
 801e968:	ee25 5a24 	vmul.f32	s10, s10, s9
 801e96c:	9c01      	ldr	r4, [sp, #4]
 801e96e:	ee07 3a10 	vmov	s14, r3
 801e972:	f911 3c07 	ldrsb.w	r3, [r1, #-7]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e976:	9d03      	ldr	r5, [sp, #12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801e978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e97c:	ee0c 3a10 	vmov	s24, r3
 801e980:	f910 3c07 	ldrsb.w	r3, [r0, #-7]
 801e984:	eea6 5a08 	vfma.f32	s10, s12, s16
  *sum += *input_0++ * filter_2;
 801e988:	ed9b 0a02 	vldr	s0, [fp, #8]
 801e98c:	ee0f 3a10 	vmov	s30, r3
 801e990:	f914 3c07 	ldrsb.w	r3, [r4, #-7]
        mac_1row_10col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e994:	f91c ac0e 	ldrsb.w	sl, [ip, #-14]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e998:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e99c:	ee0e 3a90 	vmov	s29, r3
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e9a0:	f915 3c07 	ldrsb.w	r3, [r5, #-7]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e9a4:	ee06 aa10 	vmov	s12, sl
  *sum += *input_0++ * filter_3;
 801e9a8:	eddb 0a03 	vldr	s1, [fp, #12]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e9ac:	ee0a 3a10 	vmov	s20, r3
 801e9b0:	f91c 3c0f 	ldrsb.w	r3, [ip, #-15]
  *sum += *input_0++ * filter_2;
 801e9b4:	eea6 5a80 	vfma.f32	s10, s13, s0
  *sum += *input_0++ * filter_4;
 801e9b8:	ed9b 1a04 	vldr	s2, [fp, #16]
 801e9bc:	ee06 3a90 	vmov	s13, r3
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e9c0:	f915 3c06 	ldrsb.w	r3, [r5, #-6]
 801e9c4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  *sum += *input_0++ * filter_5;
 801e9c8:	eddb 1a05 	vldr	s3, [fp, #20]
 801e9cc:	ee09 3a90 	vmov	s19, r3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e9d0:	f914 3c06 	ldrsb.w	r3, [r4, #-6]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e9d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum += *input_0++ * filter_6;
 801e9d8:	ed9b 2a06 	vldr	s4, [fp, #24]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e9dc:	ee0a 3a90 	vmov	s21, r3
 801e9e0:	f910 3c06 	ldrsb.w	r3, [r0, #-6]
  *sum += *input_0++ * filter_7;
 801e9e4:	eddb 2a07 	vldr	s5, [fp, #28]
  *sum += *input_0++ * filter_3;
 801e9e8:	eea7 5aa0 	vfma.f32	s10, s15, s1
  *sum += *input_0++ * filter_8;
 801e9ec:	ed9b 3a08 	vldr	s6, [fp, #32]
 801e9f0:	ee0b 3a90 	vmov	s23, r3
  *sum += *input_0++ * filter_9;
 801e9f4:	eddb 3a09 	vldr	s7, [fp, #36]	; 0x24
 801e9f8:	4614      	mov	r4, r2
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801e9fa:	edcd 6a07 	vstr	s13, [sp, #28]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801e9fe:	eeb8 cacc 	vcvt.f32.s32	s24, s24
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea02:	ed8d 6a08 	vstr	s12, [sp, #32]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea06:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea0a:	f911 3c06 	ldrsb.w	r3, [r1, #-6]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea0e:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_0++ * filter_4;
 801ea12:	eea7 5a01 	vfma.f32	s10, s14, s2
 801ea16:	f10e 0e20 	add.w	lr, lr, #32
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea1a:	ee0f 3a90 	vmov	s31, r3
 801ea1e:	f912 3c06 	ldrsb.w	r3, [r2, #-6]
        mac_1row_10col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea22:	9a01      	ldr	r2, [sp, #4]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea24:	eef8 baeb 	vcvt.f32.s32	s23, s23
 801ea28:	ee04 3a10 	vmov	s8, r3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ea2c:	9b02      	ldr	r3, [sp, #8]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea2e:	eef8 faef 	vcvt.f32.s32	s31, s31
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ea32:	f913 3c06 	ldrsb.w	r3, [r3, #-6]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea36:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
  *sum += *input_0++ * filter_5;
 801ea3a:	eeac 5a21 	vfma.f32	s10, s24, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ea3e:	ee0e 3a10 	vmov	s28, r3
 801ea42:	f916 3c0e 	ldrsb.w	r3, [r6, #-14]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea46:	eef8 aaea 	vcvt.f32.s32	s21, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ea4a:	ee07 3a90 	vmov	s15, r3
 801ea4e:	f919 3c0e 	ldrsb.w	r3, [r9, #-14]
 801ea52:	eeb8 eace 	vcvt.f32.s32	s28, s28
 801ea56:	ee06 3a90 	vmov	s13, r3
 801ea5a:	f917 3c0e 	ldrsb.w	r3, [r7, #-14]
 801ea5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea62:	ee05 3a90 	vmov	s11, r3
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea66:	f91c 3c0d 	ldrsb.w	r3, [ip, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ea6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea6e:	9309      	str	r3, [sp, #36]	; 0x24
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ea70:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea74:	f915 3c05 	ldrsb.w	r3, [r5, #-5]
  *sum += *input_0++ * filter_6;
 801ea78:	eeaf 5a02 	vfma.f32	s10, s30, s4
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea7c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea80:	930a      	str	r3, [sp, #40]	; 0x28
  *sum += *input_0++ * filter_1;
 801ea82:	ee65 5aa4 	vmul.f32	s11, s11, s9
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea86:	f912 3c05 	ldrsb.w	r3, [r2, #-5]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ea8a:	eef8 9ae9 	vcvt.f32.s32	s19, s19
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ea8e:	f910 2c05 	ldrsb.w	r2, [r0, #-5]
 801ea92:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea94:	eee6 5a88 	vfma.f32	s11, s13, s16
 801ea98:	ee0b 2a10 	vmov	s22, r2
 801ea9c:	f911 2c05 	ldrsb.w	r2, [r1, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eaa0:	9b02      	ldr	r3, [sp, #8]
  *sum += *input_0++ * filter_7;
 801eaa2:	eeae 5aa2 	vfma.f32	s10, s29, s5
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eaa6:	ee0c 2a90 	vmov	s25, r2
 801eaaa:	f914 2c05 	ldrsb.w	r2, [r4, #-5]
 801eaae:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801eab2:	ee0d 2a90 	vmov	s27, r2
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eab6:	f913 2c05 	ldrsb.w	r2, [r3, #-5]
        mac_1row_10col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eaba:	9b01      	ldr	r3, [sp, #4]
  *sum += *input_0++ * filter_2;
 801eabc:	eee7 5a80 	vfma.f32	s11, s15, s0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eac0:	ee07 2a10 	vmov	s14, r2
 801eac4:	f916 2c0d 	ldrsb.w	r2, [r6, #-13]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eac8:	eef8 daed 	vcvt.f32.s32	s27, s27
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eacc:	ee0d 2a10 	vmov	s26, r2
 801ead0:	f919 2c0d 	ldrsb.w	r2, [r9, #-13]
 801ead4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ead8:	ee06 2a90 	vmov	s13, r2
 801eadc:	f917 2c0d 	ldrsb.w	r2, [r7, #-13]
 801eae0:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801eae4:	ee06 2a10 	vmov	s12, r2
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eae8:	f91c 2c0c 	ldrsb.w	r2, [ip, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eaec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eaf0:	920c      	str	r2, [sp, #48]	; 0x30
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eaf2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eaf6:	f915 2c04 	ldrsb.w	r2, [r5, #-4]
  *sum += *input_0++ * filter_3;
 801eafa:	eeee 5a20 	vfma.f32	s11, s28, s1
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eafe:	eef8 caec 	vcvt.f32.s32	s25, s25
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eb02:	920d      	str	r2, [sp, #52]	; 0x34
  *sum += *input_0++ * filter_1;
 801eb04:	ee26 6a24 	vmul.f32	s12, s12, s9
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb08:	f913 2c04 	ldrsb.w	r2, [r3, #-4]
  *sum += *input_0++ * filter_8;
 801eb0c:	eeaa 5a03 	vfma.f32	s10, s20, s6
 801eb10:	920e      	str	r2, [sp, #56]	; 0x38
  *sum += *input_0++ * filter_1;
 801eb12:	eea6 6a88 	vfma.f32	s12, s13, s16
 801eb16:	f910 2c04 	ldrsb.w	r2, [r0, #-4]
  *sum += *input_0++ * filter_4;
 801eb1a:	eee4 5a01 	vfma.f32	s11, s8, s2
 801eb1e:	920f      	str	r2, [sp, #60]	; 0x3c
 801eb20:	f911 2c04 	ldrsb.w	r2, [r1, #-4]
 801eb24:	ee0c 2a10 	vmov	s24, r2
 801eb28:	f914 2c04 	ldrsb.w	r2, [r4, #-4]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb2c:	f916 1c0c 	ldrsb.w	r1, [r6, #-12]
  *sum += *input_0++ * filter_2;
 801eb30:	eead 6a00 	vfma.f32	s12, s26, s0
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb34:	4613      	mov	r3, r2
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb36:	9a02      	ldr	r2, [sp, #8]
 801eb38:	ee07 1a90 	vmov	s15, r1
 801eb3c:	f917 1c0c 	ldrsb.w	r1, [r7, #-12]
 801eb40:	f912 2c04 	ldrsb.w	r2, [r2, #-4]
  *sum += *input_0++ * filter_5;
 801eb44:	eeef 5aa1 	vfma.f32	s11, s31, s3
 801eb48:	ee06 1a90 	vmov	s13, r1
 801eb4c:	f919 ac0c 	ldrsb.w	sl, [r9, #-12]
 801eb50:	4610      	mov	r0, r2
        mac_1row_10col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eb52:	f91c 2c0b 	ldrsb.w	r2, [ip, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801eb5a:	ee0e aa10 	vmov	s28, sl
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eb5e:	9210      	str	r2, [sp, #64]	; 0x40
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb60:	ee0e 0a90 	vmov	s29, r0
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eb64:	f915 2c03 	ldrsb.w	r2, [r5, #-3]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb68:	eeb8 eace 	vcvt.f32.s32	s28, s28
  *sum += *input_0++ * filter_1;
 801eb6c:	ee66 6aa4 	vmul.f32	s13, s13, s9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb70:	f917 ac0b 	ldrsb.w	sl, [r7, #-11]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eb74:	9211      	str	r2, [sp, #68]	; 0x44
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb7a:	9a01      	ldr	r2, [sp, #4]
  *sum += *input_0++ * filter_3;
 801eb7c:	eea7 6a20 	vfma.f32	s12, s14, s1
  *sum += *input_0++ * filter_1;
 801eb80:	eeee 6a08 	vfma.f32	s13, s28, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb84:	ee07 aa10 	vmov	s14, sl
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb88:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb8c:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb90:	9a04      	ldr	r2, [sp, #16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eb92:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb96:	9112      	str	r1, [sp, #72]	; 0x48
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb98:	eeb8 cacc 	vcvt.f32.s32	s24, s24
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eb9c:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
  *sum += *input_0++ * filter_6;
 801eba0:	eeeb 5a82 	vfma.f32	s11, s23, s4
 801eba4:	9a05      	ldr	r2, [sp, #20]
  *sum += *input_0++ * filter_1;
 801eba6:	ee24 4a24 	vmul.f32	s8, s8, s9
 801ebaa:	9113      	str	r1, [sp, #76]	; 0x4c
  *sum += *input_0++ * filter_2;
 801ebac:	eee7 6a80 	vfma.f32	s13, s15, s0
 801ebb0:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
  *sum += *input_0++ * filter_4;
 801ebb4:	eead 6a81 	vfma.f32	s12, s27, s2
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ebb8:	9a02      	ldr	r2, [sp, #8]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ebba:	9114      	str	r1, [sp, #80]	; 0x50
 801ebbc:	f914 1c03 	ldrsb.w	r1, [r4, #-3]
  *sum += *input_0++ * filter_7;
 801ebc0:	eeea 5aa2 	vfma.f32	s11, s21, s5
 801ebc4:	9115      	str	r1, [sp, #84]	; 0x54
  *sum += *input_0++ * filter_3;
 801ebc6:	eeee 6aa0 	vfma.f32	s13, s29, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ebca:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
  *sum += *input_0++ * filter_5;
 801ebce:	eeac 6aa1 	vfma.f32	s12, s25, s3
 801ebd2:	ee0d 1a10 	vmov	s26, r1
 801ebd6:	f916 1c0b 	ldrsb.w	r1, [r6, #-11]
  *sum += *input_0++ * filter_8;
 801ebda:	eee9 5a83 	vfma.f32	s11, s19, s6
 801ebde:	460a      	mov	r2, r1
 801ebe0:	f919 1c0b 	ldrsb.w	r1, [r9, #-11]
 801ebe4:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801ebe8:	ee0f 1a10 	vmov	s30, r1
        mac_1row_10col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ebec:	f91c 1c0a 	ldrsb.w	r1, [ip, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ebf0:	ee07 2a90 	vmov	s15, r2
  *sum += *input_0++ * filter_6;
 801ebf4:	eeab 6a02 	vfma.f32	s12, s22, s4
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ebf8:	9116      	str	r1, [sp, #88]	; 0x58
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ebfa:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ebfe:	f915 1c02 	ldrsb.w	r1, [r5, #-2]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec02:	eeb8 eae7 	vcvt.f32.s32	s28, s15
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ec06:	9117      	str	r1, [sp, #92]	; 0x5c
  *sum += *input_0++ * filter_1;
 801ec08:	eeaf 4a08 	vfma.f32	s8, s30, s16
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ec0c:	9901      	ldr	r1, [sp, #4]
 801ec0e:	f911 1c02 	ldrsb.w	r1, [r1, #-2]
 801ec12:	9118      	str	r1, [sp, #96]	; 0x60
 801ec14:	9904      	ldr	r1, [sp, #16]
  *sum += *input_0++ * filter_2;
 801ec16:	eeae 4a00 	vfma.f32	s8, s28, s0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec1a:	f919 ac10 	ldrsb.w	sl, [r9, #-16]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ec1e:	f911 0c02 	ldrsb.w	r0, [r1, #-2]
 801ec22:	9905      	ldr	r1, [sp, #20]
 801ec24:	9019      	str	r0, [sp, #100]	; 0x64
 801ec26:	f911 0c02 	ldrsb.w	r0, [r1, #-2]
  *sum += *input_0++ * filter_3;
 801ec2a:	eead 4a20 	vfma.f32	s8, s26, s1
 801ec2e:	901a      	str	r0, [sp, #104]	; 0x68
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec30:	f917 0c10 	ldrsb.w	r0, [r7, #-16]
 801ec34:	ee07 0a10 	vmov	s14, r0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec38:	f917 0c0a 	ldrsb.w	r0, [r7, #-10]
 801ec3c:	ee07 0a90 	vmov	s15, r0
        mac_1row_10col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec40:	f917 0c09 	ldrsb.w	r0, [r7, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec48:	ee0f 0a90 	vmov	s31, r0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec4c:	f919 0c0a 	ldrsb.w	r0, [r9, #-10]
 801ec50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec54:	4602      	mov	r2, r0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec56:	f919 0c09 	ldrsb.w	r0, [r9, #-9]
 801ec5a:	eef8 faef 	vcvt.f32.s32	s31, s31
      while (col_count_div8--) {
 801ec5e:	45c8      	cmp	r8, r9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec60:	4601      	mov	r1, r0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec62:	f916 0c10 	ldrsb.w	r0, [r6, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec66:	ee0f 2a10 	vmov	s30, r2
 801ec6a:	9a02      	ldr	r2, [sp, #8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec6c:	901e      	str	r0, [sp, #120]	; 0x78
  *sum += *input_0++ * filter_1;
 801ec6e:	ee27 7a24 	vmul.f32	s14, s14, s9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec72:	f916 0c0a 	ldrsb.w	r0, [r6, #-10]
 801ec76:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801ec7a:	f912 4c02 	ldrsb.w	r4, [r2, #-2]
 801ec7e:	ee6f 4aa4 	vmul.f32	s9, s31, s9
 801ec82:	4605      	mov	r5, r0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec84:	9802      	ldr	r0, [sp, #8]
 801ec86:	ee0f aa90 	vmov	s31, sl
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec8a:	941c      	str	r4, [sp, #112]	; 0x70
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec8c:	f910 0c08 	ldrsb.w	r0, [r0, #-8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec90:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec94:	f912 4c01 	ldrsb.w	r4, [r2, #-1]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ec98:	eef8 faef 	vcvt.f32.s32	s31, s31
 801ec9c:	9021      	str	r0, [sp, #132]	; 0x84
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ec9e:	9806      	ldr	r0, [sp, #24]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801eca0:	4622      	mov	r2, r4
 801eca2:	eeaf 7a88 	vfma.f32	s14, s31, s16
 801eca6:	ee0f 1a90 	vmov	s31, r1
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecaa:	f910 4c08 	ldrsb.w	r4, [r0, #-8]
 801ecae:	eeef 7a08 	vfma.f32	s15, s30, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ecb2:	eef8 faef 	vcvt.f32.s32	s31, s31
 801ecb6:	f916 ac09 	ldrsb.w	sl, [r6, #-9]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecba:	4621      	mov	r1, r4
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecbc:	f910 4c02 	ldrsb.w	r4, [r0, #-2]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecc0:	9805      	ldr	r0, [sp, #20]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecc2:	941b      	str	r4, [sp, #108]	; 0x6c
 801ecc4:	eeef 4a88 	vfma.f32	s9, s31, s16
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecc8:	9c06      	ldr	r4, [sp, #24]
 801ecca:	f914 4c01 	ldrsb.w	r4, [r4, #-1]
 801ecce:	941d      	str	r4, [sp, #116]	; 0x74
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecd0:	f910 4c08 	ldrsb.w	r4, [r0, #-8]
 801ecd4:	9420      	str	r4, [sp, #128]	; 0x80
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ecd6:	ed9d 8a1e 	vldr	s16, [sp, #120]	; 0x78
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecda:	9805      	ldr	r0, [sp, #20]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ecdc:	eeb8 fac8 	vcvt.f32.s32	s30, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ece0:	ee08 5a10 	vmov	s16, r5
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ece4:	f910 4c01 	ldrsb.w	r4, [r0, #-1]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ece8:	eef8 eac8 	vcvt.f32.s32	s29, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ecec:	ee08 aa10 	vmov	s16, sl
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecf0:	9d04      	ldr	r5, [sp, #16]
  *sum += *input_0++ * filter_2;
 801ecf2:	eeaf 7a00 	vfma.f32	s14, s30, s0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ecf6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ecfa:	4620      	mov	r0, r4
 801ecfc:	f915 ac01 	ldrsb.w	sl, [r5, #-1]
 801ed00:	eeee 7a80 	vfma.f32	s15, s29, s0
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed04:	f915 4c08 	ldrsb.w	r4, [r5, #-8]
 801ed08:	eee8 4a00 	vfma.f32	s9, s16, s0
 801ed0c:	9d01      	ldr	r5, [sp, #4]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ed0e:	ee00 2a10 	vmov	s0, r2
 801ed12:	9a03      	ldr	r2, [sp, #12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ed14:	ed9d 8a21 	vldr	s16, [sp, #132]	; 0x84
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed18:	ee0f aa90 	vmov	s31, sl
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed1c:	941f      	str	r4, [sp, #124]	; 0x7c
 801ed1e:	f102 0208 	add.w	r2, r2, #8
 801ed22:	f915 4c08 	ldrsb.w	r4, [r5, #-8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ed26:	eeb8 eac8 	vcvt.f32.s32	s28, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ed2a:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ed2e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed32:	941e      	str	r4, [sp, #120]	; 0x78
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed34:	eef8 faef 	vcvt.f32.s32	s31, s31
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ed38:	9c03      	ldr	r4, [sp, #12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ed3a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801ed3e:	9203      	str	r2, [sp, #12]
  *sum += *input_0++ * filter_3;
 801ed40:	eeae 7a20 	vfma.f32	s14, s28, s1
 801ed44:	9a01      	ldr	r2, [sp, #4]
 801ed46:	eee0 4a20 	vfma.f32	s9, s0, s1
 801ed4a:	eee8 7a20 	vfma.f32	s15, s16, s1
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed4e:	ee00 3a90 	vmov	s1, r3
 801ed52:	f102 0208 	add.w	r2, r2, #8
 801ed56:	9b06      	ldr	r3, [sp, #24]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed58:	f915 ac01 	ldrsb.w	sl, [r5, #-1]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed5c:	eeb8 eae0 	vcvt.f32.s32	s28, s1
 801ed60:	9201      	str	r2, [sp, #4]
 801ed62:	f103 0308 	add.w	r3, r3, #8
 801ed66:	9a04      	ldr	r2, [sp, #16]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed68:	ee0f aa10 	vmov	s30, sl
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed6c:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
  *sum += *input_0++ * filter_4;
 801ed70:	eeee 6a01 	vfma.f32	s13, s28, s2
 801ed74:	f102 0208 	add.w	r2, r2, #8
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ed78:	f914 ac08 	ldrsb.w	sl, [r4, #-8]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed7c:	eeb8 dae0 	vcvt.f32.s32	s26, s1
 801ed80:	9306      	str	r3, [sp, #24]
 801ed82:	9204      	str	r2, [sp, #16]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed84:	ee00 1a90 	vmov	s1, r1
 801ed88:	9a05      	ldr	r2, [sp, #20]
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ed8a:	ee0e aa90 	vmov	s29, sl
 801ed8e:	9b02      	ldr	r3, [sp, #8]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ed90:	eeb8 8ae0 	vcvt.f32.s32	s16, s1
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ed94:	f91c ac10 	ldrsb.w	sl, [ip, #-16]
 801ed98:	f102 0208 	add.w	r2, r2, #8
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ed9c:	f914 4c01 	ldrsb.w	r4, [r4, #-1]
 801eda0:	f103 0308 	add.w	r3, r3, #8
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eda4:	eddd 0a1b 	vldr	s1, [sp, #108]	; 0x6c
 801eda8:	eea8 7a01 	vfma.f32	s14, s16, s2
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801edac:	4625      	mov	r5, r4
 801edae:	9205      	str	r2, [sp, #20]
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801edb0:	eeb8 0ae0 	vcvt.f32.s32	s0, s1
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801edb4:	4654      	mov	r4, sl
 801edb6:	9302      	str	r3, [sp, #8]
 801edb8:	eead 4a01 	vfma.f32	s8, s26, s2
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801edbc:	f91c ac09 	ldrsb.w	sl, [ip, #-9]
  *sum += *input_0++ * filter_5;
 801edc0:	eeec 6a21 	vfma.f32	s13, s24, s3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801edc4:	eddd 0a1d 	vldr	s1, [sp, #116]	; 0x74
  *sum += *input_0++ * filter_4;
 801edc8:	eee0 7a01 	vfma.f32	s15, s0, s2
 801edcc:	eeb8 facf 	vcvt.f32.s32	s30, s30
 801edd0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801edd4:	eef8 eaee 	vcvt.f32.s32	s29, s29
 801edd8:	eee0 4a81 	vfma.f32	s9, s1, s2
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801eddc:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 801ede0:	eeb8 8ac1 	vcvt.f32.s32	s16, s2
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ede4:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 801ede8:	eeb8 0ac1 	vcvt.f32.s32	s0, s2
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801edec:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
  *sum += *input_0++ * filter_5;
 801edf0:	eea8 4a21 	vfma.f32	s8, s16, s3
 801edf4:	ed9d 8a19 	vldr	s16, [sp, #100]	; 0x64
 801edf8:	eef8 0ac1 	vcvt.f32.s32	s1, s2
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801edfc:	ee01 0a10 	vmov	s2, r0
 801ee00:	eea0 7a21 	vfma.f32	s14, s0, s3
 801ee04:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ee08:	eee0 7aa1 	vfma.f32	s15, s1, s3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee0c:	eddd 0a1f 	vldr	s1, [sp, #124]	; 0x7c
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee10:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
 801ee14:	ed9d 8a18 	vldr	s16, [sp, #96]	; 0x60
 801ee18:	eee1 4a21 	vfma.f32	s9, s2, s3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee1c:	eddd 1a0f 	vldr	s3, [sp, #60]	; 0x3c
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee20:	ed9d 1a13 	vldr	s2, [sp, #76]	; 0x4c
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee24:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee28:	eef8 1ae1 	vcvt.f32.s32	s3, s3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee2c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
  *sum += *input_0++ * filter_6;
 801ee30:	eea0 7a82 	vfma.f32	s14, s1, s4
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee34:	eddd 0a1e 	vldr	s1, [sp, #120]	; 0x78
 801ee38:	eee1 6a82 	vfma.f32	s13, s3, s4
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee3c:	eddd 1a0e 	vldr	s3, [sp, #56]	; 0x38
 801ee40:	eea1 4a02 	vfma.f32	s8, s2, s4
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee44:	ed9d 1a12 	vldr	s2, [sp, #72]	; 0x48
 801ee48:	eee0 7a02 	vfma.f32	s15, s0, s4
 801ee4c:	eeef 4a82 	vfma.f32	s9, s31, s4
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee50:	ed9d 2a0b 	vldr	s4, [sp, #44]	; 0x2c
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee54:	eef8 1ae1 	vcvt.f32.s32	s3, s3
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee58:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee5c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee60:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_4 = (float)*filter_4_int8++; filter_5 = (float)*filter_5_int8++; filter_6 = (float)*filter_6_int8++; filter_7 = (float)*filter_7_int8++;
 801ee64:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
  *sum += *input_0++ * filter_7;
 801ee68:	eea2 6a22 	vfma.f32	s12, s4, s5
 801ee6c:	eee1 6aa2 	vfma.f32	s13, s3, s5
 801ee70:	eea1 4a22 	vfma.f32	s8, s2, s5
 801ee74:	eea0 7aa2 	vfma.f32	s14, s1, s5
 801ee78:	eee0 7a22 	vfma.f32	s15, s0, s5
  *sum += *input_0++ * filter_9;
 801ee7c:	ed9d 0a07 	vldr	s0, [sp, #28]
  *sum += *input_0++ * filter_7;
 801ee80:	eeef 4a22 	vfma.f32	s9, s30, s5
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ee84:	eddd 2a0a 	vldr	s5, [sp, #40]	; 0x28
  *sum += *input_0++ * filter_9;
 801ee88:	eea0 5a23 	vfma.f32	s10, s0, s7
 801ee8c:	ed9d 0a08 	vldr	s0, [sp, #32]
 801ee90:	eeb8 1ae2 	vcvt.f32.s32	s2, s5
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ee94:	eddd 2a0d 	vldr	s5, [sp, #52]	; 0x34
 801ee98:	eee0 5a23 	vfma.f32	s11, s0, s7
 801ee9c:	eef8 0ae2 	vcvt.f32.s32	s1, s5
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eea0:	eddd 2a11 	vldr	s5, [sp, #68]	; 0x44
  *sum += *input_0++ * filter_8;
 801eea4:	eea1 6a03 	vfma.f32	s12, s2, s6
 801eea8:	eef8 1ae2 	vcvt.f32.s32	s3, s5
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eeac:	eddd 2a17 	vldr	s5, [sp, #92]	; 0x5c
 801eeb0:	eee0 6a83 	vfma.f32	s13, s1, s6
        mac_1row_10col_fp_IOHW_forint8w(&sum[7], input_0, filter_0, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9);

        *out++ = TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
        *out++ = TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801eeb4:	fe88 5a85 	vmaxnm.f32	s10, s17, s10
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eeb8:	eeb8 2ae2 	vcvt.f32.s32	s4, s5
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eebc:	ee02 5a90 	vmov	s5, r5
 801eec0:	eea1 4a83 	vfma.f32	s8, s3, s6
        *out++ = TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801eec4:	fe85 5a49 	vminnm.f32	s10, s10, s18
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eec8:	eef8 2ae2 	vcvt.f32.s32	s5, s5
        *out++ = TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801eecc:	fec8 5aa5 	vmaxnm.f32	s11, s17, s11
 801eed0:	eee2 7a03 	vfma.f32	s15, s4, s6
        *out++ = TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801eed4:	ed0e 5a0f 	vstr	s10, [lr, #-60]	; 0xffffffc4
 801eed8:	eeae 7a83 	vfma.f32	s14, s29, s6
        *out++ = TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801eedc:	fec5 5ac9 	vminnm.f32	s11, s11, s18
 801eee0:	eee2 4a83 	vfma.f32	s9, s5, s6
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eee4:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
        *out++ = TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801eee8:	ed4e 5a0e 	vstr	s11, [lr, #-56]	; 0xffffffc8
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eeec:	eef8 0ac3 	vcvt.f32.s32	s1, s6
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eef0:	ed9d 3a0c 	vldr	s6, [sp, #48]	; 0x30
 801eef4:	eeb8 1ac3 	vcvt.f32.s32	s2, s6
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801eef8:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
  *sum += *input_0++ * filter_9;
 801eefc:	eea0 6aa3 	vfma.f32	s12, s1, s7
 801ef00:	eef8 1ac3 	vcvt.f32.s32	s3, s6
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ef04:	ee03 4a10 	vmov	s6, r4
 801ef08:	eee1 6a23 	vfma.f32	s13, s2, s7
 801ef0c:	eeb8 2ac3 	vcvt.f32.s32	s4, s6
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ef10:	ed9d 3a16 	vldr	s6, [sp, #88]	; 0x58
 801ef14:	eea1 4aa3 	vfma.f32	s8, s3, s7
 801ef18:	eef8 2ac3 	vcvt.f32.s32	s5, s6
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ef1c:	ee03 aa10 	vmov	s6, sl
 801ef20:	eea2 7a23 	vfma.f32	s14, s4, s7
        *out++ = TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801ef24:	fe88 6a86 	vmaxnm.f32	s12, s17, s12
        filter_8 = (float)*filter_8_int8++; filter_9 = (float)*filter_9_int8++;
 801ef28:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
        *out++ = TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801ef2c:	fe86 6a49 	vminnm.f32	s12, s12, s18
 801ef30:	eee2 7aa3 	vfma.f32	s15, s5, s7
        *out++ = TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801ef34:	fec8 6aa6 	vmaxnm.f32	s13, s17, s13
        *out++ = TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801ef38:	ed0e 6a0d 	vstr	s12, [lr, #-52]	; 0xffffffcc
        *out++ = TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801ef3c:	fec6 6ac9 	vminnm.f32	s13, s13, s18
 801ef40:	eee3 4a23 	vfma.f32	s9, s6, s7
 801ef44:	ed4e 6a0c 	vstr	s13, [lr, #-48]	; 0xffffffd0
        *out++ = TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801ef48:	fe88 4a84 	vmaxnm.f32	s8, s17, s8
 801ef4c:	fe84 4a49 	vminnm.f32	s8, s8, s18
        *out++ = TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801ef50:	fec7 6a28 	vmaxnm.f32	s13, s14, s17
        *out++ = TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801ef54:	ed0e 4a0b 	vstr	s8, [lr, #-44]	; 0xffffffd4
        *out++ = TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801ef58:	fec6 6ac9 	vminnm.f32	s13, s13, s18
 801ef5c:	ed4e 6a10 	vstr	s13, [lr, #-64]	; 0xffffffc0
        *out++ = TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801ef60:	fe88 7aa7 	vmaxnm.f32	s14, s17, s15
 801ef64:	fe87 7a49 	vminnm.f32	s14, s14, s18
 801ef68:	ed0e 7a0a 	vstr	s14, [lr, #-40]	; 0xffffffd8
        *out++ = TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801ef6c:	fec8 7aa4 	vmaxnm.f32	s15, s17, s9
 801ef70:	fec7 7ac9 	vminnm.f32	s15, s15, s18
 801ef74:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
      while (col_count_div8--) {
 801ef78:	f47f acd0 	bne.w	801e91c <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0xb0>
 801ef7c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 801ef7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ef80:	4413      	add	r3, r2
 801ef82:	934a      	str	r3, [sp, #296]	; 0x128
 801ef84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ef86:	9926      	ldr	r1, [sp, #152]	; 0x98
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=10) {
 801ef88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ef8a:	440a      	add	r2, r1
 801ef8c:	330a      	adds	r3, #10
 801ef8e:	9222      	str	r2, [sp, #136]	; 0x88
 801ef90:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ef92:	9323      	str	r3, [sp, #140]	; 0x8c
 801ef94:	4293      	cmp	r3, r2
 801ef96:	f6ff aca2 	blt.w	801e8de <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x72>
  for (i_element = 0; i_element < num_elements; i_element++) {
 801ef9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef9c:	eeb0 1a68 	vmov.f32	s2, s17
 801efa0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801efa2:	eef0 0a49 	vmov.f32	s1, s18
 801efa6:	3301      	adds	r3, #1
 801efa8:	4493      	add	fp, r2
 801efaa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801efac:	932a      	str	r3, [sp, #168]	; 0xa8
 801efae:	429a      	cmp	r2, r3
 801efb0:	f47f ac8d 	bne.w	801e8ce <pointwise_conv_fp_1row10col_10inputdepth_IOHW_int8weight+0x62>
      }
    }
  }
}
 801efb4:	b02f      	add	sp, #188	; 0xbc
 801efb6:	ecbd 8b10 	vpop	{d8-d15}
 801efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efbe:	bf00      	nop

0801efc0 <pointwise_conv_fp_4row4col_IOHW_int8weight>:
tinyengine_status_fp pointwise_conv_fp_4row4col_IOHW_int8weight(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 801efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efc4:	ed2d 8b10 	vpush	{d8-d15}
 801efc8:	b0ad      	sub	sp, #180	; 0xb4
 801efca:	eeb0 8a40 	vmov.f32	s16, s0
 801efce:	eef0 8a60 	vmov.f32	s17, s1
 801efd2:	f8bd 2124 	ldrh.w	r2, [sp, #292]	; 0x124
 801efd6:	f8bd 1128 	ldrh.w	r1, [sp, #296]	; 0x128
 801efda:	9325      	str	r3, [sp, #148]	; 0x94
  (void) input_height;
  (void) input_width;

  int i_element;
  const int num_elements = output_height * output_width;
 801efdc:	fb01 f202 	mul.w	r2, r1, r2
                 float* im2col_data, const uint16_t batches) {
 801efe0:	f8bd 312c 	ldrh.w	r3, [sp, #300]	; 0x12c
 801efe4:	9029      	str	r0, [sp, #164]	; 0xa4
  const int num_elements = output_height * output_width;
 801efe6:	9227      	str	r2, [sp, #156]	; 0x9c

  /* Initialize output data as 0 (assume bias == NULL) */
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801efe8:	fb03 f202 	mul.w	r2, r3, r2
                 float* im2col_data, const uint16_t batches) {
 801efec:	9328      	str	r3, [sp, #160]	; 0xa0
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801efee:	b122      	cbz	r2, 801effa <pointwise_conv_fp_4row4col_IOHW_int8weight+0x3a>
 801eff0:	0092      	lsls	r2, r2, #2
 801eff2:	2100      	movs	r1, #0
 801eff4:	9848      	ldr	r0, [sp, #288]	; 0x120
 801eff6:	f009 ff8a 	bl	8028f0e <memset>
    output_data[i_element] = 0;
  }

  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801effa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801effc:	109b      	asrs	r3, r3, #2
 801effe:	9324      	str	r3, [sp, #144]	; 0x90
 801f000:	f000 8577 	beq.w	801faf2 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb32>
      const int8_t* filter_1_int8 = &filter_data[(i_ch_in + 1) * output_depth];
      const int8_t* filter_2_int8 = &filter_data[(i_ch_in + 2) * output_depth];
      const int8_t* filter_3_int8 = &filter_data[(i_ch_in + 3) * output_depth];
      float filter_0, filter_1, filter_2, filter_3;

      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801f004:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f006:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f008:	08ca      	lsrs	r2, r1, #3

      while (col_count_div8--) {
 801f00a:	1e53      	subs	r3, r2, #1
      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801f00c:	922a      	str	r2, [sp, #168]	; 0xa8
      while (col_count_div8--) {
 801f00e:	b29b      	uxth	r3, r3
 801f010:	2800      	cmp	r0, #0
 801f012:	f000 8568 	beq.w	801fae6 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb26>
 801f016:	2a00      	cmp	r2, #0
 801f018:	f000 8565 	beq.w	801fae6 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb26>
 801f01c:	00db      	lsls	r3, r3, #3
 801f01e:	4602      	mov	r2, r0
 801f020:	3801      	subs	r0, #1
 801f022:	2400      	movs	r4, #0
 801f024:	3308      	adds	r3, #8
 801f026:	0092      	lsls	r2, r2, #2
 801f028:	902b      	str	r0, [sp, #172]	; 0xac
 801f02a:	468c      	mov	ip, r1
 801f02c:	931c      	str	r3, [sp, #112]	; 0x70
 801f02e:	f020 0303 	bic.w	r3, r0, #3
 801f032:	921e      	str	r2, [sp, #120]	; 0x78
 801f034:	9326      	str	r3, [sp, #152]	; 0x98
 801f036:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801f038:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f03a:	3320      	adds	r3, #32
 801f03c:	941d      	str	r4, [sp, #116]	; 0x74
 801f03e:	4617      	mov	r7, r2
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801f040:	9420      	str	r4, [sp, #128]	; 0x80
 801f042:	9317      	str	r3, [sp, #92]	; 0x5c
 801f044:	008b      	lsls	r3, r1, #2
 801f046:	931f      	str	r3, [sp, #124]	; 0x7c
 801f048:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801f04a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f04c:	3308      	adds	r3, #8
 801f04e:	9322      	str	r3, [sp, #136]	; 0x88
 801f050:	4613      	mov	r3, r2
 801f052:	3310      	adds	r3, #16
 801f054:	9323      	str	r3, [sp, #140]	; 0x8c
 801f056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f058:	4666      	mov	r6, ip
 801f05a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f05c:	181c      	adds	r4, r3, r0
 801f05e:	991d      	ldr	r1, [sp, #116]	; 0x74
 801f060:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f062:	eb07 0902 	add.w	r9, r7, r2
 801f066:	941a      	str	r4, [sp, #104]	; 0x68
 801f068:	440b      	add	r3, r1
 801f06a:	4601      	mov	r1, r0
 801f06c:	1820      	adds	r0, r4, r0
 801f06e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801f070:	eb09 0802 	add.w	r8, r9, r2
 801f074:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 801f078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f07c:	9019      	str	r0, [sp, #100]	; 0x64
 801f07e:	4644      	mov	r4, r8
 801f080:	464d      	mov	r5, r9
 801f082:	931b      	str	r3, [sp, #108]	; 0x6c
 801f084:	eb08 0302 	add.w	r3, r8, r2
 801f088:	1842      	adds	r2, r0, r1
 801f08a:	4639      	mov	r1, r7
 801f08c:	4618      	mov	r0, r3
 801f08e:	9321      	str	r3, [sp, #132]	; 0x84
 801f090:	9218      	str	r2, [sp, #96]	; 0x60
 801f092:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f094:	eb06 020b 	add.w	r2, r6, fp
                 float* im2col_data, const uint16_t batches) {
 801f098:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 801f09c:	eb03 090b 	add.w	r9, r3, fp
 801f0a0:	18b3      	adds	r3, r6, r2
 801f0a2:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 801f0a6:	18f7      	adds	r7, r6, r3
 801f0a8:	e9dd a818 	ldrd	sl, r8, [sp, #96]	; 0x60
 801f0ac:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
        /* Initialize partial sum (assume bias == NULL) */
        float sum[32] = {};

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f0b0:	f912 6c08 	ldrsb.w	r6, [r2, #-8]
 801f0b4:	f10b 0b08 	add.w	fp, fp, #8
  *sum += *input_0++ * filter_1;
 801f0b8:	ed91 6a01 	vldr	s12, [r1, #4]
 801f0bc:	3708      	adds	r7, #8
 801f0be:	ee04 6a90 	vmov	s9, r6
 801f0c2:	f91b 6c10 	ldrsb.w	r6, [fp, #-16]
  *sum += *input_0++ * filter_0;
 801f0c6:	ed91 da00 	vldr	s26, [r1]
 801f0ca:	3308      	adds	r3, #8
 801f0cc:	ee05 6a90 	vmov	s11, r6
 801f0d0:	f913 6c10 	ldrsb.w	r6, [r3, #-16]
  *sum += *input_1++ * filter_1;
 801f0d4:	edd5 6a01 	vldr	s13, [r5, #4]
 801f0d8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801f0dc:	ee03 6a90 	vmov	s7, r6
 801f0e0:	f917 6c10 	ldrsb.w	r6, [r7, #-16]
  *sum += *input_1++ * filter_0;
 801f0e4:	edd5 ca00 	vldr	s25, [r5]
 801f0e8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f0ec:	ee04 6a10 	vmov	s8, r6
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f0f0:	f912 6c07 	ldrsb.w	r6, [r2, #-7]
  *sum += *input_0++ * filter_2;
 801f0f4:	ed91 ca02 	vldr	s24, [r1, #8]
  *sum += *input_0++ * filter_1;
 801f0f8:	ee64 1a86 	vmul.f32	s3, s9, s12
 801f0fc:	ee05 6a10 	vmov	s10, r6
 801f100:	f91b 6c0f 	ldrsb.w	r6, [fp, #-15]
  *sum += *input_2++ * filter_1;
 801f104:	ed94 7a01 	vldr	s14, [r4, #4]
  *sum += *input_1++ * filter_1;
 801f108:	ee24 2aa6 	vmul.f32	s4, s9, s13
 801f10c:	ee0e 6a90 	vmov	s29, r6
 801f110:	f913 6c0f 	ldrsb.w	r6, [r3, #-15]
  *sum += *input_2++ * filter_0;
 801f114:	ed94 ba00 	vldr	s22, [r4]
  *sum += *input_0++ * filter_1;
 801f118:	eee5 1a8d 	vfma.f32	s3, s11, s26
 801f11c:	ee0e 6a10 	vmov	s28, r6
 801f120:	f917 6c0f 	ldrsb.w	r6, [r7, #-15]
  *sum += *input_1++ * filter_2;
 801f124:	edd5 ba02 	vldr	s23, [r5, #8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f128:	eef8 3ae3 	vcvt.f32.s32	s7, s7
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f12c:	ee0d 6a90 	vmov	s27, r6
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f130:	f91b 6c0e 	ldrsb.w	r6, [fp, #-14]
  *sum++ += *input_0++ * filter_3;
 801f134:	edd1 aa03 	vldr	s21, [r1, #12]
  *sum += *input_2++ * filter_1;
 801f138:	ee64 2a87 	vmul.f32	s5, s9, s14
 801f13c:	ee0f 6a10 	vmov	s30, r6
 801f140:	f912 6c06 	ldrsb.w	r6, [r2, #-6]
  *sum += *input_3++ * filter_1;
 801f144:	edd0 7a01 	vldr	s15, [r0, #4]
  *sum += *input_1++ * filter_1;
 801f148:	eea5 2aac 	vfma.f32	s4, s11, s25
 801f14c:	9600      	str	r6, [sp, #0]
  *sum += *input_2++ * filter_1;
 801f14e:	eee5 2a8b 	vfma.f32	s5, s11, s22
 801f152:	f913 6c0e 	ldrsb.w	r6, [r3, #-14]
  *sum += *input_3++ * filter_1;
 801f156:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum += *input_3++ * filter_0;
 801f15a:	edd0 9a00 	vldr	s19, [r0]
  *sum += *input_0++ * filter_2;
 801f15e:	eee3 1a8c 	vfma.f32	s3, s7, s24
 801f162:	9601      	str	r6, [sp, #4]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f164:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f168:	f917 6c0e 	ldrsb.w	r6, [r7, #-14]
  *sum += *input_3++ * filter_1;
 801f16c:	eee5 4aa9 	vfma.f32	s9, s11, s19
  *sum += *input_2++ * filter_2;
 801f170:	ed94 9a02 	vldr	s18, [r4, #8]
  *sum += *input_1++ * filter_2;
 801f174:	eea3 2aab 	vfma.f32	s4, s7, s23
 801f178:	ee0f 6a90 	vmov	s31, r6
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f17c:	f91b 6c0d 	ldrsb.w	r6, [fp, #-13]
  *sum++ += *input_1++ * filter_3;
 801f180:	ed95 aa03 	vldr	s20, [r5, #12]
  *sum += *input_2++ * filter_2;
 801f184:	eee3 2a89 	vfma.f32	s5, s7, s18
  *sum++ += *input_2++ * filter_3;
 801f188:	edd4 0a03 	vldr	s1, [r4, #12]
  *sum++ += *input_0++ * filter_3;
 801f18c:	eee4 1a2a 	vfma.f32	s3, s8, s21
  *sum += *input_3++ * filter_2;
 801f190:	ed90 0a02 	vldr	s0, [r0, #8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f194:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  *sum++ += *input_3++ * filter_3;
 801f198:	ed90 1a03 	vldr	s2, [r0, #12]
 801f19c:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f1a0:	9602      	str	r6, [sp, #8]
  *sum += *input_3++ * filter_2;
 801f1a2:	eee3 4a80 	vfma.f32	s9, s7, s0
 801f1a6:	f912 6c05 	ldrsb.w	r6, [r2, #-5]
  *sum += *input_0++ * filter_1;
 801f1aa:	ee25 3a06 	vmul.f32	s6, s10, s12
/* END: For Group Conv */

/* START: For Pointwise Conv */
static inline void assign_sum_to_pointwise_output_4row8col(float* out_0, float* out_1, float* out_2, float* out_3, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801f1ae:	ed5c 5a08 	vldr	s11, [ip, #-32]	; 0xffffffe0
  *sum++ += *input_1++ * filter_3;
 801f1b2:	eea4 2a0a 	vfma.f32	s4, s8, s20
 801f1b6:	9603      	str	r6, [sp, #12]
  *sum += *input_1++ * filter_1;
 801f1b8:	ee65 3a26 	vmul.f32	s7, s10, s13
 801f1bc:	f913 6c0d 	ldrsb.w	r6, [r3, #-13]
  *sum++ += *input_2++ * filter_3;
 801f1c0:	eee4 2a20 	vfma.f32	s5, s8, s1
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801f1c4:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
 801f1c8:	fec1 1ae8 	vminnm.f32	s3, s3, s17
 801f1cc:	9604      	str	r6, [sp, #16]
 801f1ce:	ee75 1aa1 	vadd.f32	s3, s11, s3
 801f1d2:	f917 6c0d 	ldrsb.w	r6, [r7, #-13]
  *sum++ += *input_3++ * filter_3;
 801f1d6:	eee4 4a01 	vfma.f32	s9, s8, s2
  *sum += *input_2++ * filter_1;
 801f1da:	ee25 4a07 	vmul.f32	s8, s10, s14
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801f1de:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
 801f1e2:	9605      	str	r6, [sp, #20]
  *sum += *input_3++ * filter_1;
 801f1e4:	ee25 5a27 	vmul.f32	s10, s10, s15
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f1e8:	f91b 6c0c 	ldrsb.w	r6, [fp, #-12]
  *sum += *input_0++ * filter_1;
 801f1ec:	eeae 3a8d 	vfma.f32	s6, s29, s26
  *sum += *input_1++ * filter_1;
 801f1f0:	eeee 3aac 	vfma.f32	s7, s29, s25
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801f1f4:	fe82 2a68 	vminnm.f32	s4, s4, s17
 801f1f8:	9606      	str	r6, [sp, #24]
  *sum += *input_2++ * filter_1;
 801f1fa:	eeae 4a8b 	vfma.f32	s8, s29, s22
 801f1fe:	f912 6c04 	ldrsb.w	r6, [r2, #-4]
  *sum += *input_3++ * filter_1;
 801f202:	eeae 5aa9 	vfma.f32	s10, s29, s19
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f206:	eeb8 eace 	vcvt.f32.s32	s28, s28
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801f20a:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f20e:	9607      	str	r6, [sp, #28]
 801f210:	fec2 2ae8 	vminnm.f32	s5, s5, s17
 801f214:	f913 6c0c 	ldrsb.w	r6, [r3, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f218:	eef8 daed 	vcvt.f32.s32	s27, s27
  *sum += *input_0++ * filter_2;
 801f21c:	eeae 3a0c 	vfma.f32	s6, s28, s24
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801f220:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f224:	9608      	str	r6, [sp, #32]
  *sum += *input_2++ * filter_2;
 801f226:	eeae 4a09 	vfma.f32	s8, s28, s18
 801f22a:	f917 6c0c 	ldrsb.w	r6, [r7, #-12]
  *sum += *input_1++ * filter_2;
 801f22e:	eeee 3a2b 	vfma.f32	s7, s28, s23
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801f232:	fec4 4ae8 	vminnm.f32	s9, s9, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f236:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f23a:	9609      	str	r6, [sp, #36]	; 0x24
  *sum += *input_3++ * filter_2;
 801f23c:	eeae 5a00 	vfma.f32	s10, s28, s0
        mac_4row_4col_fp_IOHW_forint8w(&sum[16], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f240:	f91b 6c0b 	ldrsb.w	r6, [fp, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f244:	eef8 faef 	vcvt.f32.s32	s31, s31
  *sum++ += *input_0++ * filter_3;
 801f248:	eead 3aaa 	vfma.f32	s6, s27, s21
 801f24c:	3208      	adds	r2, #8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f24e:	960a      	str	r6, [sp, #40]	; 0x28
 801f250:	f10c 0c20 	add.w	ip, ip, #32
 801f254:	f912 6c0b 	ldrsb.w	r6, [r2, #-11]
  *sum++ += *input_1++ * filter_3;
 801f258:	eeed 3a8a 	vfma.f32	s7, s27, s20
 801f25c:	f10e 0e20 	add.w	lr, lr, #32
 801f260:	f108 0820 	add.w	r8, r8, #32
 801f264:	960b      	str	r6, [sp, #44]	; 0x2c
  *sum++ += *input_3++ * filter_3;
 801f266:	eead 5a81 	vfma.f32	s10, s27, s2
 801f26a:	f913 6c0b 	ldrsb.w	r6, [r3, #-11]
 801f26e:	f10a 0a20 	add.w	sl, sl, #32
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801f272:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 801f276:	fe83 3a68 	vminnm.f32	s6, s6, s17
 801f27a:	960c      	str	r6, [sp, #48]	; 0x30
 801f27c:	f917 6c0b 	ldrsb.w	r6, [r7, #-11]
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801f280:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 801f284:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 801f288:	960d      	str	r6, [sp, #52]	; 0x34
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801f28a:	fe85 5a08 	vmaxnm.f32	s10, s10, s16
        mac_4row_4col_fp_IOHW_forint8w(&sum[20], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f28e:	f91b 6c0a 	ldrsb.w	r6, [fp, #-10]
 801f292:	fe85 5a68 	vminnm.f32	s10, s10, s17
 801f296:	960e      	str	r6, [sp, #56]	; 0x38
 801f298:	f912 6c0a 	ldrsb.w	r6, [r2, #-10]
 801f29c:	960f      	str	r6, [sp, #60]	; 0x3c
 801f29e:	f913 6c0a 	ldrsb.w	r6, [r3, #-10]
 801f2a2:	9610      	str	r6, [sp, #64]	; 0x40
 801f2a4:	f917 6c0a 	ldrsb.w	r6, [r7, #-10]
 801f2a8:	9611      	str	r6, [sp, #68]	; 0x44
        mac_4row_4col_fp_IOHW_forint8w(&sum[24], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2aa:	f91b 6c09 	ldrsb.w	r6, [fp, #-9]
      while (col_count_div8--) {
 801f2ae:	45d9      	cmp	r9, fp
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2b0:	9612      	str	r6, [sp, #72]	; 0x48
 801f2b2:	f912 6c09 	ldrsb.w	r6, [r2, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2b6:	eddd 5a00 	vldr	s11, [sp]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2ba:	9613      	str	r6, [sp, #76]	; 0x4c
 801f2bc:	f913 6c09 	ldrsb.w	r6, [r3, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2c0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f2c4:	ed9d ea01 	vldr	s28, [sp, #4]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2c8:	9614      	str	r6, [sp, #80]	; 0x50
 801f2ca:	f917 6c09 	ldrsb.w	r6, [r7, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2ce:	eeb8 eace 	vcvt.f32.s32	s28, s28
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801f2d2:	ed4c 1a10 	vstr	s3, [ip, #-64]	; 0xffffffc0
  *sum += *input_2++ * filter_2;
 801f2d6:	eef0 1a44 	vmov.f32	s3, s8
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801f2da:	ed5e ea10 	vldr	s29, [lr, #-64]	; 0xffffffc0
  *sum += *input_0++ * filter_1;
 801f2de:	ee25 4a86 	vmul.f32	s8, s11, s12
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801f2e2:	ee3e 2a82 	vadd.f32	s4, s29, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f2e6:	eddd ea05 	vldr	s29, [sp, #20]
  *sum += *input_0++ * filter_1;
 801f2ea:	eeaf 4a0d 	vfma.f32	s8, s30, s26
  *sum++ += *input_2++ * filter_3;
 801f2ee:	eeed 1aa0 	vfma.f32	s3, s27, s1
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801f2f2:	ed0e 2a10 	vstr	s4, [lr, #-64]	; 0xffffffc0
 801f2f6:	eef8 eaee 	vcvt.f32.s32	s29, s29
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801f2fa:	ed18 2a10 	vldr	s4, [r8, #-64]	; 0xffffffc0
 801f2fe:	ee72 2a22 	vadd.f32	s5, s4, s5
  *sum += *input_1++ * filter_1;
 801f302:	ee25 2aa6 	vmul.f32	s4, s11, s13
  *sum += *input_0++ * filter_2;
 801f306:	eeae 4a0c 	vfma.f32	s8, s28, s24
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801f30a:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801f30e:	ed48 2a10 	vstr	s5, [r8, #-64]	; 0xffffffc0
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801f312:	fec1 1ae8 	vminnm.f32	s3, s3, s17
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801f316:	ed5a 2a10 	vldr	s5, [sl, #-64]	; 0xffffffc0
  *sum += *input_1++ * filter_1;
 801f31a:	eeaf 2a2c 	vfma.f32	s4, s30, s25
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801f31e:	ee72 4aa4 	vadd.f32	s9, s5, s9
  *sum += *input_2++ * filter_1;
 801f322:	ee65 2a87 	vmul.f32	s5, s11, s14
  *sum++ += *input_0++ * filter_3;
 801f326:	eeaf 4aaa 	vfma.f32	s8, s31, s21
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801f32a:	ed4a 4a10 	vstr	s9, [sl, #-64]	; 0xffffffc0
  *sum += *input_3++ * filter_1;
 801f32e:	ee65 5aa7 	vmul.f32	s11, s11, s15
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801f332:	ed5c 4a0f 	vldr	s9, [ip, #-60]	; 0xffffffc4
  *sum += *input_2++ * filter_1;
 801f336:	eeef 2a0b 	vfma.f32	s5, s30, s22
  *sum += *input_1++ * filter_2;
 801f33a:	eeae 2a2b 	vfma.f32	s4, s28, s23
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801f33e:	ee34 3a83 	vadd.f32	s6, s9, s6
 801f342:	eddd 4a03 	vldr	s9, [sp, #12]
  *sum += *input_3++ * filter_1;
 801f346:	eeef 5a29 	vfma.f32	s11, s30, s19
 801f34a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801f34e:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801f352:	ed0c 3a0f 	vstr	s6, [ip, #-60]	; 0xffffffc4
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801f356:	fe84 4a68 	vminnm.f32	s8, s8, s17
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801f35a:	ed1e 3a0f 	vldr	s6, [lr, #-60]	; 0xffffffc4
  *sum += *input_2++ * filter_2;
 801f35e:	eeee 2a09 	vfma.f32	s5, s28, s18
  *sum++ += *input_1++ * filter_3;
 801f362:	eeaf 2a8a 	vfma.f32	s4, s31, s20
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801f366:	ee73 3a23 	vadd.f32	s7, s6, s7
 801f36a:	ed9d 3a02 	vldr	s6, [sp, #8]
  *sum += *input_3++ * filter_2;
 801f36e:	eeee 5a00 	vfma.f32	s11, s28, s0
 801f372:	ed9d ea04 	vldr	s28, [sp, #16]
 801f376:	eef8 dac3 	vcvt.f32.s32	s27, s6
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801f37a:	ed4e 3a0f 	vstr	s7, [lr, #-60]	; 0xffffffc4
  *sum += *input_0++ * filter_1;
 801f37e:	ee24 3a86 	vmul.f32	s6, s9, s12
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801f382:	ed58 3a0f 	vldr	s7, [r8, #-60]	; 0xffffffc4
  *sum++ += *input_2++ * filter_3;
 801f386:	eeef 2aa0 	vfma.f32	s5, s31, s1
 801f38a:	eeb8 eace 	vcvt.f32.s32	s28, s28
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801f38e:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801f392:	ee73 1aa1 	vadd.f32	s3, s7, s3
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801f396:	fe82 2a68 	vminnm.f32	s4, s4, s17
  *sum += *input_0++ * filter_1;
 801f39a:	eead 3a8d 	vfma.f32	s6, s27, s26
  *sum += *input_1++ * filter_1;
 801f39e:	ee64 3aa6 	vmul.f32	s7, s9, s13
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801f3a2:	ed48 1a0f 	vstr	s3, [r8, #-60]	; 0xffffffc4
  *sum++ += *input_3++ * filter_3;
 801f3a6:	eeef 5a81 	vfma.f32	s11, s31, s2
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801f3aa:	ed5a 1a0f 	vldr	s3, [sl, #-60]	; 0xffffffc4
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801f3ae:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
  *sum += *input_1++ * filter_1;
 801f3b2:	eeed 3aac 	vfma.f32	s7, s27, s25
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801f3b6:	fec2 2ae8 	vminnm.f32	s5, s5, s17
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801f3ba:	ee31 5a85 	vadd.f32	s10, s3, s10
  *sum += *input_0++ * filter_2;
 801f3be:	eeae 3a0c 	vfma.f32	s6, s28, s24
  *sum += *input_2++ * filter_1;
 801f3c2:	ee64 1a87 	vmul.f32	s3, s9, s14
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801f3c6:	ed0a 5a0f 	vstr	s10, [sl, #-60]	; 0xffffffc4
  *sum += *input_3++ * filter_1;
 801f3ca:	ee64 4aa7 	vmul.f32	s9, s9, s15
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801f3ce:	ed1c 5a0e 	vldr	s10, [ip, #-56]	; 0xffffffc8
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801f3d2:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
  *sum += *input_2++ * filter_1;
 801f3d6:	eeed 1a8b 	vfma.f32	s3, s27, s22
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801f3da:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801f3de:	ee35 4a04 	vadd.f32	s8, s10, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f3e2:	ed9d 5a07 	vldr	s10, [sp, #28]
  *sum += *input_1++ * filter_2;
 801f3e6:	eeee 3a2b 	vfma.f32	s7, s28, s23
  *sum++ += *input_0++ * filter_3;
 801f3ea:	eeae 3aaa 	vfma.f32	s6, s29, s21
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801f3ee:	ed0c 4a0e 	vstr	s8, [ip, #-56]	; 0xffffffc8
 801f3f2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801f3f6:	ed1e 4a0e 	vldr	s8, [lr, #-56]	; 0xffffffc8
  *sum += *input_3++ * filter_1;
 801f3fa:	eeed 4aa9 	vfma.f32	s9, s27, s19
  *sum += *input_2++ * filter_2;
 801f3fe:	eeee 1a09 	vfma.f32	s3, s28, s18
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801f402:	ee34 2a02 	vadd.f32	s4, s8, s4
 801f406:	ed9d 4a06 	vldr	s8, [sp, #24]
  *sum++ += *input_1++ * filter_3;
 801f40a:	eeee 3a8a 	vfma.f32	s7, s29, s20
 801f40e:	eef8 dac4 	vcvt.f32.s32	s27, s8
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 801f412:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801f416:	ed0e 2a0e 	vstr	s4, [lr, #-56]	; 0xffffffc8
  *sum += *input_0++ * filter_1;
 801f41a:	ee25 4a06 	vmul.f32	s8, s10, s12
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801f41e:	ed18 2a0e 	vldr	s4, [r8, #-56]	; 0xffffffc8
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 801f422:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_3++ * filter_2;
 801f426:	eeee 4a00 	vfma.f32	s9, s28, s0
 801f42a:	ed9d ea08 	vldr	s28, [sp, #32]
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801f42e:	ee72 2a22 	vadd.f32	s5, s4, s5
  *sum += *input_0++ * filter_1;
 801f432:	eead 4a8d 	vfma.f32	s8, s27, s26
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 801f436:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
  *sum += *input_1++ * filter_1;
 801f43a:	ee25 2a26 	vmul.f32	s4, s10, s13
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 801f43e:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801f442:	ed48 2a0e 	vstr	s5, [r8, #-56]	; 0xffffffc8
  *sum++ += *input_2++ * filter_3;
 801f446:	eeee 1aa0 	vfma.f32	s3, s29, s1
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801f44a:	ed5a 2a0e 	vldr	s5, [sl, #-56]	; 0xffffffc8
 801f44e:	eeb8 eace 	vcvt.f32.s32	s28, s28
  *sum += *input_1++ * filter_1;
 801f452:	eead 2aac 	vfma.f32	s4, s27, s25
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801f456:	ee72 5aa5 	vadd.f32	s11, s5, s11
  *sum += *input_0++ * filter_2;
 801f45a:	eeae 4a0c 	vfma.f32	s8, s28, s24
  *sum += *input_2++ * filter_1;
 801f45e:	ee65 2a07 	vmul.f32	s5, s10, s14
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801f462:	ed4a 5a0e 	vstr	s11, [sl, #-56]	; 0xffffffc8
  *sum++ += *input_3++ * filter_3;
 801f466:	eeee 4a81 	vfma.f32	s9, s29, s2
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 801f46a:	ed5c 5a0d 	vldr	s11, [ip, #-52]	; 0xffffffcc
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 801f46e:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
 801f472:	eddd ea09 	vldr	s29, [sp, #36]	; 0x24
 801f476:	fec1 1ae8 	vminnm.f32	s3, s3, s17
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 801f47a:	ee35 3a83 	vadd.f32	s6, s11, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f47e:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f482:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 801f486:	eeed 2a8b 	vfma.f32	s5, s27, s22
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 801f48a:	ed0c 3a0d 	vstr	s6, [ip, #-52]	; 0xffffffcc
  *sum += *input_1++ * filter_2;
 801f48e:	eeae 2a2b 	vfma.f32	s4, s28, s23
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 801f492:	ed1e 3a0d 	vldr	s6, [lr, #-52]	; 0xffffffcc
  *sum += *input_3++ * filter_1;
 801f496:	ee25 5a27 	vmul.f32	s10, s10, s15
  *sum++ += *input_0++ * filter_3;
 801f49a:	eeae 4aaa 	vfma.f32	s8, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 801f49e:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 801f4a2:	ee73 3a23 	vadd.f32	s7, s6, s7
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 801f4a6:	fec4 4ae8 	vminnm.f32	s9, s9, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f4aa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f4ae:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
  *sum += *input_3++ * filter_1;
 801f4b2:	eead 5aa9 	vfma.f32	s10, s27, s19
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 801f4b6:	ed4e 3a0d 	vstr	s7, [lr, #-52]	; 0xffffffcc
  *sum += *input_2++ * filter_2;
 801f4ba:	eeee 2a09 	vfma.f32	s5, s28, s18
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 801f4be:	ed58 3a0d 	vldr	s7, [r8, #-52]	; 0xffffffcc
 801f4c2:	eef8 dac3 	vcvt.f32.s32	s27, s6
  *sum++ += *input_1++ * filter_3;
 801f4c6:	eeae 2a8a 	vfma.f32	s4, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 801f4ca:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 801f4ce:	ee73 1aa1 	vadd.f32	s3, s7, s3
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 801f4d2:	fe84 4a68 	vminnm.f32	s8, s8, s17
  *sum += *input_0++ * filter_1;
 801f4d6:	ee25 3a86 	vmul.f32	s6, s11, s12
  *sum += *input_3++ * filter_2;
 801f4da:	eeae 5a00 	vfma.f32	s10, s28, s0
 801f4de:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 801f4e2:	ed48 1a0d 	vstr	s3, [r8, #-52]	; 0xffffffcc
  *sum += *input_1++ * filter_1;
 801f4e6:	ee65 3aa6 	vmul.f32	s7, s11, s13
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 801f4ea:	ed5a 1a0d 	vldr	s3, [sl, #-52]	; 0xffffffcc
  *sum += *input_0++ * filter_1;
 801f4ee:	eead 3a8d 	vfma.f32	s6, s27, s26
  *sum++ += *input_2++ * filter_3;
 801f4f2:	eeee 2aa0 	vfma.f32	s5, s29, s1
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 801f4f6:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 801f4fa:	ee71 4aa4 	vadd.f32	s9, s3, s9
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 801f4fe:	fe82 2a68 	vminnm.f32	s4, s4, s17
 801f502:	eeb8 eace 	vcvt.f32.s32	s28, s28
  *sum += *input_1++ * filter_1;
 801f506:	eeed 3aac 	vfma.f32	s7, s27, s25
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 801f50a:	ed4a 4a0d 	vstr	s9, [sl, #-52]	; 0xffffffcc
  *sum += *input_2++ * filter_1;
 801f50e:	ee65 1a87 	vmul.f32	s3, s11, s14
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 801f512:	ed5c 4a0c 	vldr	s9, [ip, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_2;
 801f516:	eeae 3a0c 	vfma.f32	s6, s28, s24
  *sum += *input_3++ * filter_1;
 801f51a:	ee65 5aa7 	vmul.f32	s11, s11, s15
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 801f51e:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 801f522:	ee34 4a84 	vadd.f32	s8, s9, s8
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 801f526:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum++ += *input_3++ * filter_3;
 801f52a:	eeae 5a81 	vfma.f32	s10, s29, s2
 801f52e:	eddd ea0d 	vldr	s29, [sp, #52]	; 0x34
  *sum += *input_2++ * filter_1;
 801f532:	eeed 1a8b 	vfma.f32	s3, s27, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f536:	eddd 4a0f 	vldr	s9, [sp, #60]	; 0x3c
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 801f53a:	ed0c 4a0c 	vstr	s8, [ip, #-48]	; 0xffffffd0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f53e:	eef8 eaee 	vcvt.f32.s32	s29, s29
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 801f542:	ed1e 4a0c 	vldr	s8, [lr, #-48]	; 0xffffffd0
  *sum += *input_3++ * filter_1;
 801f546:	eeed 5aa9 	vfma.f32	s11, s27, s19
  *sum += *input_1++ * filter_2;
 801f54a:	eeee 3a2b 	vfma.f32	s7, s28, s23
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 801f54e:	ee34 2a02 	vadd.f32	s4, s8, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f552:	ed9d 4a0e 	vldr	s8, [sp, #56]	; 0x38
  *sum++ += *input_0++ * filter_3;
 801f556:	eeae 3aaa 	vfma.f32	s6, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 801f55a:	fe85 5a08 	vmaxnm.f32	s10, s10, s16
 801f55e:	fe85 5a68 	vminnm.f32	s10, s10, s17
 801f562:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 801f566:	ed0e 2a0c 	vstr	s4, [lr, #-48]	; 0xffffffd0
  *sum += *input_2++ * filter_2;
 801f56a:	eeee 1a09 	vfma.f32	s3, s28, s18
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 801f56e:	ed18 2a0c 	vldr	s4, [r8, #-48]	; 0xffffffd0
  *sum += *input_3++ * filter_2;
 801f572:	eeee 5a00 	vfma.f32	s11, s28, s0
 801f576:	eef8 dac4 	vcvt.f32.s32	s27, s8
 801f57a:	ed9d ea10 	vldr	s28, [sp, #64]	; 0x40
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 801f57e:	ee72 2a22 	vadd.f32	s5, s4, s5
  *sum += *input_0++ * filter_1;
 801f582:	ee24 4a86 	vmul.f32	s8, s9, s12
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 801f586:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
  *sum++ += *input_1++ * filter_3;
 801f58a:	eeee 3a8a 	vfma.f32	s7, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 801f58e:	fe83 3a68 	vminnm.f32	s6, s6, s17
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 801f592:	ed48 2a0c 	vstr	s5, [r8, #-48]	; 0xffffffd0
  *sum++ += *input_2++ * filter_3;
 801f596:	eeee 1aa0 	vfma.f32	s3, s29, s1
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 801f59a:	ed5a 2a0c 	vldr	s5, [sl, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_1;
 801f59e:	eead 4a8d 	vfma.f32	s8, s27, s26
  *sum++ += *input_3++ * filter_3;
 801f5a2:	eeee 5a81 	vfma.f32	s11, s29, s2
 801f5a6:	eddd ea11 	vldr	s29, [sp, #68]	; 0x44
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 801f5aa:	ee32 5a85 	vadd.f32	s10, s5, s10
  *sum += *input_1++ * filter_1;
 801f5ae:	ee24 2aa6 	vmul.f32	s4, s9, s13
 801f5b2:	eeb8 eace 	vcvt.f32.s32	s28, s28
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 801f5b6:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 801f5ba:	ed0a 5a0c 	vstr	s10, [sl, #-48]	; 0xffffffd0
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 801f5be:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 801f5c2:	ed1c 5a0b 	vldr	s10, [ip, #-44]	; 0xffffffd4
  *sum += *input_1++ * filter_1;
 801f5c6:	eead 2aac 	vfma.f32	s4, s27, s25
  *sum += *input_0++ * filter_2;
 801f5ca:	eeae 4a0c 	vfma.f32	s8, s28, s24
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 801f5ce:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 801f5d2:	ee35 3a03 	vadd.f32	s6, s10, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f5d6:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
  *sum += *input_2++ * filter_1;
 801f5da:	ee64 2a87 	vmul.f32	s5, s9, s14
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 801f5de:	fec1 1ae8 	vminnm.f32	s3, s3, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f5e2:	eef8 eaee 	vcvt.f32.s32	s29, s29
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 801f5e6:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 801f5ea:	ed0c 3a0b 	vstr	s6, [ip, #-44]	; 0xffffffd4
  *sum += *input_3++ * filter_1;
 801f5ee:	ee64 4aa7 	vmul.f32	s9, s9, s15
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 801f5f2:	ed1e 3a0b 	vldr	s6, [lr, #-44]	; 0xffffffd4
  *sum += *input_2++ * filter_1;
 801f5f6:	eeed 2a8b 	vfma.f32	s5, s27, s22
  *sum += *input_1++ * filter_2;
 801f5fa:	eeae 2a2b 	vfma.f32	s4, s28, s23
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 801f5fe:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 801f602:	ee73 3a23 	vadd.f32	s7, s6, s7
  *sum++ += *input_0++ * filter_3;
 801f606:	eeae 4aaa 	vfma.f32	s8, s29, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f60a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 801f60e:	ed4e 3a0b 	vstr	s7, [lr, #-44]	; 0xffffffd4
  *sum += *input_3++ * filter_1;
 801f612:	eeed 4aa9 	vfma.f32	s9, s27, s19
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 801f616:	ed58 3a0b 	vldr	s7, [r8, #-44]	; 0xffffffd4
  *sum += *input_2++ * filter_2;
 801f61a:	eeee 2a09 	vfma.f32	s5, s28, s18
 801f61e:	eddd da12 	vldr	s27, [sp, #72]	; 0x48
  *sum += *input_0++ * filter_1;
 801f622:	ee25 6a06 	vmul.f32	s12, s10, s12
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 801f626:	ee73 1aa1 	vadd.f32	s3, s7, s3
 801f62a:	eddd 3a14 	vldr	s7, [sp, #80]	; 0x50
 801f62e:	eef8 daed 	vcvt.f32.s32	s27, s27
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 801f632:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
  *sum++ += *input_1++ * filter_3;
 801f636:	eeae 2a8a 	vfma.f32	s4, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 801f63a:	fe84 4a68 	vminnm.f32	s8, s8, s17
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 801f63e:	ed48 1a0b 	vstr	s3, [r8, #-44]	; 0xffffffd4
  *sum += *input_1++ * filter_1;
 801f642:	ee65 6a26 	vmul.f32	s13, s10, s13
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 801f646:	ed1a 3a0b 	vldr	s6, [sl, #-44]	; 0xffffffd4
  *sum += *input_0++ * filter_1;
 801f64a:	eead 6a8d 	vfma.f32	s12, s27, s26
  *sum += *input_2++ * filter_1;
 801f64e:	ee25 7a07 	vmul.f32	s14, s10, s14
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 801f652:	ee73 5a25 	vadd.f32	s11, s6, s11
  *sum += *input_3++ * filter_1;
 801f656:	ee65 7a27 	vmul.f32	s15, s10, s15
  *sum += *input_3++ * filter_2;
 801f65a:	eeee 4a00 	vfma.f32	s9, s28, s0
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 801f65e:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 801f662:	ed4a 5a0b 	vstr	s11, [sl, #-44]	; 0xffffffd4
  *sum++ += *input_2++ * filter_3;
 801f666:	eeee 2aa0 	vfma.f32	s5, s29, s1
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 801f66a:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 801f66e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 801f672:	fe82 2a68 	vminnm.f32	s4, s4, s17
  *sum += *input_1++ * filter_1;
 801f676:	eeed 6aac 	vfma.f32	s13, s27, s25
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 801f67a:	ee33 4a04 	vadd.f32	s8, s6, s8
 801f67e:	ee05 6a90 	vmov	s11, r6
  *sum += *input_2++ * filter_1;
 801f682:	eead 7a8b 	vfma.f32	s14, s27, s22
  *sum += *input_3++ * filter_1;
 801f686:	eeed 7aa9 	vfma.f32	s15, s27, s19
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 801f68a:	ed0c 4a0a 	vstr	s8, [ip, #-40]	; 0xffffffd8
  *sum += *input_0++ * filter_2;
 801f68e:	eea3 6a8c 	vfma.f32	s12, s7, s24
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 801f692:	ed1e 5a0a 	vldr	s10, [lr, #-40]	; 0xffffffd8
  *sum++ += *input_3++ * filter_3;
 801f696:	eeee 4a81 	vfma.f32	s9, s29, s2
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 801f69a:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
 801f69e:	fec2 2ae8 	vminnm.f32	s5, s5, s17
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 801f6a2:	ee35 2a02 	vadd.f32	s4, s10, s4
 801f6a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  *sum += *input_1++ * filter_2;
 801f6aa:	eee3 6aab 	vfma.f32	s13, s7, s23
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 801f6ae:	ed0e 2a0a 	vstr	s4, [lr, #-40]	; 0xffffffd8
  *sum += *input_2++ * filter_2;
 801f6b2:	eea3 7a89 	vfma.f32	s14, s7, s18
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 801f6b6:	ed18 5a0a 	vldr	s10, [r8, #-40]	; 0xffffffd8
  *sum += *input_3++ * filter_2;
 801f6ba:	eee3 7a80 	vfma.f32	s15, s7, s0
  *sum++ += *input_0++ * filter_3;
 801f6be:	eea5 6aaa 	vfma.f32	s12, s11, s21
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 801f6c2:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 801f6c6:	ee75 2a22 	vadd.f32	s5, s10, s5
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 801f6ca:	fec4 4ae8 	vminnm.f32	s9, s9, s17
  *sum++ += *input_1++ * filter_3;
 801f6ce:	eee5 6a8a 	vfma.f32	s13, s11, s20
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 801f6d2:	ed48 2a0a 	vstr	s5, [r8, #-40]	; 0xffffffd8
  *sum++ += *input_2++ * filter_3;
 801f6d6:	eea5 7aa0 	vfma.f32	s14, s11, s1
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 801f6da:	ed1a 5a0a 	vldr	s10, [sl, #-40]	; 0xffffffd8
  *sum++ += *input_3++ * filter_3;
 801f6de:	eee5 7a81 	vfma.f32	s15, s11, s2
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 801f6e2:	fe86 6a08 	vmaxnm.f32	s12, s12, s16
 801f6e6:	fe86 6a68 	vminnm.f32	s12, s12, s17
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 801f6ea:	ee75 4a24 	vadd.f32	s9, s10, s9
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 801f6ee:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
 801f6f2:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 801f6f6:	ed4a 4a0a 	vstr	s9, [sl, #-40]	; 0xffffffd8
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 801f6fa:	fe87 7a08 	vmaxnm.f32	s14, s14, s16
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 801f6fe:	ed5c 5a09 	vldr	s11, [ip, #-36]	; 0xffffffdc
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 801f702:	fe87 7a68 	vminnm.f32	s14, s14, s17
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 801f706:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
 801f70a:	fec7 7ae8 	vminnm.f32	s15, s15, s17
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 801f70e:	ee35 6a86 	vadd.f32	s12, s11, s12
 801f712:	ed0c 6a09 	vstr	s12, [ip, #-36]	; 0xffffffdc
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 801f716:	ed1e 6a09 	vldr	s12, [lr, #-36]	; 0xffffffdc
 801f71a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801f71e:	ed4e 6a09 	vstr	s13, [lr, #-36]	; 0xffffffdc
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 801f722:	ed58 6a09 	vldr	s13, [r8, #-36]	; 0xffffffdc
 801f726:	ee36 7a87 	vadd.f32	s14, s13, s14
 801f72a:	ed08 7a09 	vstr	s14, [r8, #-36]	; 0xffffffdc
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 801f72e:	ed1a 7a09 	vldr	s14, [sl, #-36]	; 0xffffffdc
 801f732:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f736:	ed4a 7a09 	vstr	s15, [sl, #-36]	; 0xffffffdc
      while (col_count_div8--) {
 801f73a:	f47f acb9 	bne.w	801f0b0 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xf0>
 801f73e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801f740:	3110      	adds	r1, #16
 801f742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f744:	3510      	adds	r5, #16
 801f746:	3410      	adds	r4, #16
 801f748:	3010      	adds	r0, #16
 801f74a:	4433      	add	r3, r6
 801f74c:	469b      	mov	fp, r3
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801f74e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f750:	428b      	cmp	r3, r1
 801f752:	f47f ac9e 	bne.w	801f092 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xd2>
 801f756:	991d      	ldr	r1, [sp, #116]	; 0x74
 801f758:	46b4      	mov	ip, r6
 801f75a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f75c:	4608      	mov	r0, r1
 801f75e:	9918      	ldr	r1, [sp, #96]	; 0x60
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801f760:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f762:	4410      	add	r0, r2
 801f764:	3304      	adds	r3, #4
 801f766:	901d      	str	r0, [sp, #116]	; 0x74
 801f768:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f76a:	9320      	str	r3, [sp, #128]	; 0x80
 801f76c:	4401      	add	r1, r0
 801f76e:	9117      	str	r1, [sp, #92]	; 0x5c
 801f770:	9921      	ldr	r1, [sp, #132]	; 0x84
 801f772:	4411      	add	r1, r2
 801f774:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f776:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 801f77a:	460f      	mov	r7, r1
 801f77c:	f73f ac6b 	bgt.w	801f056 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x96>
  }

  /* Handle left-over part */
  int leftover_elements = num_elements & 0x3;

  while (leftover_elements) {
 801f780:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f782:	f013 0303 	ands.w	r3, r3, #3
 801f786:	9304      	str	r3, [sp, #16]
 801f788:	f000 81ad 	beq.w	801fae6 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb26>
      const int8_t* filter_3_int8 = &filter_data[(i_ch_in + 3) * output_depth];
      float filter_0, filter_1, filter_2, filter_3;

      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;

      while (col_count_div8--) {
 801f78c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f78e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f790:	3b01      	subs	r3, #1
 801f792:	9904      	ldr	r1, [sp, #16]
 801f794:	b29b      	uxth	r3, r3
 801f796:	1a52      	subs	r2, r2, r1
 801f798:	992b      	ldr	r1, [sp, #172]	; 0xac
 801f79a:	00db      	lsls	r3, r3, #3
 801f79c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801f79e:	f021 0103 	bic.w	r1, r1, #3
 801f7a2:	f103 0a08 	add.w	sl, r3, #8
 801f7a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f7a8:	9105      	str	r1, [sp, #20]
 801f7aa:	4601      	mov	r1, r0
 801f7ac:	fb02 f303 	mul.w	r3, r2, r3
 801f7b0:	4680      	mov	r8, r0
 801f7b2:	fb02 f101 	mul.w	r1, r2, r1
 801f7b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f7b8:	9303      	str	r3, [sp, #12]
 801f7ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f7be:	3108      	adds	r1, #8
 801f7c0:	f8cd a004 	str.w	sl, [sp, #4]
 801f7c4:	9302      	str	r3, [sp, #8]
 801f7c6:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801f7c8:	eb03 0981 	add.w	r9, r3, r1, lsl #2
 801f7cc:	9b05      	ldr	r3, [sp, #20]
 801f7ce:	9a03      	ldr	r2, [sp, #12]
 801f7d0:	9d02      	ldr	r5, [sp, #8]
 801f7d2:	eb03 0b02 	add.w	fp, r3, r2
 801f7d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f7d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f7da:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 801f7de:	eb08 0002 	add.w	r0, r8, r2
 801f7e2:	9b01      	ldr	r3, [sp, #4]
 801f7e4:	f8cd 8000 	str.w	r8, [sp]
 801f7e8:	eb08 0100 	add.w	r1, r8, r0
 801f7ec:	eb03 0e02 	add.w	lr, r3, r2
 801f7f0:	464b      	mov	r3, r9
 801f7f2:	eb08 0a01 	add.w	sl, r8, r1
 801f7f6:	4654      	mov	r4, sl
        float sum[8] = {};

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f7f8:	f912 6c07 	ldrsb.w	r6, [r2, #-7]
 801f7fc:	3208      	adds	r2, #8
  *sum += *input_0++ * filter_1;
 801f7fe:	edd5 7a01 	vldr	s15, [r5, #4]
 801f802:	3408      	adds	r4, #8
 801f804:	ee06 6a90 	vmov	s13, r6
 801f808:	f910 6c07 	ldrsb.w	r6, [r0, #-7]
  *sum += *input_0++ * filter_0;
 801f80c:	ed95 2a00 	vldr	s4, [r5]
 801f810:	3008      	adds	r0, #8
 801f812:	ee03 6a90 	vmov	s7, r6
 801f816:	f911 6c07 	ldrsb.w	r6, [r1, #-7]
 801f81a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum += *input_0++ * filter_2;
 801f81e:	edd5 2a02 	vldr	s5, [r5, #8]
 801f822:	ee0c 6a90 	vmov	s25, r6
 801f826:	f914 6c0f 	ldrsb.w	r6, [r4, #-15]
 801f82a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
  *sum += *input_0++ * filter_3;
 801f82e:	ed95 3a03 	vldr	s6, [r5, #12]
 801f832:	ee09 6a10 	vmov	s18, r6
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f836:	f914 6c0e 	ldrsb.w	r6, [r4, #-14]
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f83a:	f914 cc0a 	ldrsb.w	ip, [r4, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f83e:	eef8 caec 	vcvt.f32.s32	s25, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f842:	ee00 6a10 	vmov	s0, r6
 801f846:	f911 6c06 	ldrsb.w	r6, [r1, #-6]
  *sum += *input_0++ * filter_1;
 801f84a:	ee63 3aa7 	vmul.f32	s7, s7, s15
        mac_1row_4col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f84e:	f914 7c09 	ldrsb.w	r7, [r4, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f852:	ee0c 6a10 	vmov	s24, r6
 801f856:	f912 6c0e 	ldrsb.w	r6, [r2, #-14]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f85a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801f85e:	3108      	adds	r1, #8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f860:	ee07 6a10 	vmov	s14, r6
 801f864:	f910 6c0e 	ldrsb.w	r6, [r0, #-14]
 801f868:	eee6 3a82 	vfma.f32	s7, s13, s4
 801f86c:	3320      	adds	r3, #32
 801f86e:	ee04 6a10 	vmov	s8, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f872:	f914 6c0d 	ldrsb.w	r6, [r4, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f876:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f87a:	ee00 6a90 	vmov	s1, r6
 801f87e:	f911 6c0d 	ldrsb.w	r6, [r1, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f882:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f886:	ee0b 6a90 	vmov	s23, r6
 801f88a:	f912 6c0d 	ldrsb.w	r6, [r2, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f88e:	eeb8 cacc 	vcvt.f32.s32	s24, s24
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f892:	ee06 6a10 	vmov	s12, r6
 801f896:	f910 6c0d 	ldrsb.w	r6, [r0, #-13]
 801f89a:	ee24 4a27 	vmul.f32	s8, s8, s15
 801f89e:	ee04 6a90 	vmov	s9, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8a2:	f914 6c0c 	ldrsb.w	r6, [r4, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8a6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8aa:	ee01 6a10 	vmov	s2, r6
 801f8ae:	f911 6c0c 	ldrsb.w	r6, [r1, #-12]
 801f8b2:	eea7 4a02 	vfma.f32	s8, s14, s4
 801f8b6:	ee0e 6a90 	vmov	s29, r6
 801f8ba:	f912 6c0c 	ldrsb.w	r6, [r2, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8be:	eef8 4ae4 	vcvt.f32.s32	s9, s9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8c2:	ee06 6a90 	vmov	s13, r6
 801f8c6:	f910 6c0c 	ldrsb.w	r6, [r0, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8ca:	eef8 baeb 	vcvt.f32.s32	s23, s23
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8ce:	ee05 6a10 	vmov	s10, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8d2:	f914 6c0b 	ldrsb.w	r6, [r4, #-11]
 801f8d6:	ee64 4aa7 	vmul.f32	s9, s9, s15
 801f8da:	ee01 6a90 	vmov	s3, r6
 801f8de:	f911 6c0b 	ldrsb.w	r6, [r1, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8e2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8e6:	ee0b 6a10 	vmov	s22, r6
 801f8ea:	f912 6c0b 	ldrsb.w	r6, [r2, #-11]
 801f8ee:	eee6 4a02 	vfma.f32	s9, s12, s4
 801f8f2:	ee07 6a10 	vmov	s14, r6
 801f8f6:	f910 6c0b 	ldrsb.w	r6, [r0, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f8fe:	ee05 6a90 	vmov	s11, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f902:	f911 6c0a 	ldrsb.w	r6, [r1, #-10]
 801f906:	ee25 5a27 	vmul.f32	s10, s10, s15
 801f90a:	ee0a 6a90 	vmov	s21, r6
 801f90e:	f912 6c0a 	ldrsb.w	r6, [r2, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f912:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f916:	ee0e 6a10 	vmov	s28, r6
 801f91a:	f910 6c0a 	ldrsb.w	r6, [r0, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f91e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f922:	ee06 6a10 	vmov	s12, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f926:	f911 6c09 	ldrsb.w	r6, [r1, #-9]
 801f92a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801f92e:	ee0a 6a10 	vmov	s20, r6
 801f932:	f912 6c09 	ldrsb.w	r6, [r2, #-9]
 801f936:	eea6 5a82 	vfma.f32	s10, s13, s4
 801f93a:	ee0d 6a90 	vmov	s27, r6
 801f93e:	f910 6c09 	ldrsb.w	r6, [r0, #-9]
 801f942:	eee7 5a02 	vfma.f32	s11, s14, s4
 801f946:	ee06 6a90 	vmov	s13, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f94a:	f914 6c10 	ldrsb.w	r6, [r4, #-16]
 801f94e:	f910 8c10 	ldrsb.w	r8, [r0, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f952:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f956:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}

static inline void assign_sum_to_pointwise_output_1row8col(float* out_0, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801f95a:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f95e:	ee07 8a10 	vmov	s14, r8
 801f962:	f912 8c10 	ldrsb.w	r8, [r2, #-16]
  *sum += *input_0++ * filter_1;
 801f966:	ee26 6a27 	vmul.f32	s12, s12, s15
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801f96a:	ed53 fa0e 	vldr	s31, [r3, #-56]	; 0xffffffc8
 801f96e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f972:	ee0d 8a10 	vmov	s26, r8
  *sum += *input_0++ * filter_1;
 801f976:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801f97a:	f911 8c10 	ldrsb.w	r8, [r1, #-16]
 801f97e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
      while (col_count_div8--) {
 801f982:	4572      	cmp	r2, lr
 801f984:	ee67 7a27 	vmul.f32	s15, s14, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f988:	ee09 8a90 	vmov	s19, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f98c:	eeb8 eace 	vcvt.f32.s32	s28, s28
 801f990:	ee07 ca10 	vmov	s14, ip
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f994:	eef8 daed 	vcvt.f32.s32	s27, s27
 801f998:	eeed 7a02 	vfma.f32	s15, s26, s4
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801f99c:	ed13 da09 	vldr	s26, [r3, #-36]	; 0xffffffdc
  *sum += *input_0++ * filter_1;
 801f9a0:	eeae 6a02 	vfma.f32	s12, s28, s4
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801f9a4:	ed13 ea0c 	vldr	s28, [r3, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_1;
 801f9a8:	eeed 6a82 	vfma.f32	s13, s27, s4
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801f9ac:	ed53 da0b 	vldr	s27, [r3, #-44]	; 0xffffffd4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9b0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801f9b4:	ed13 2a0a 	vldr	s4, [r3, #-40]	; 0xffffffd8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9b8:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9bc:	eeb8 bacb 	vcvt.f32.s32	s22, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9c0:	eef8 aaea 	vcvt.f32.s32	s21, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9c4:	eeb8 aaca 	vcvt.f32.s32	s20, s20
  *sum += *input_0++ * filter_2;
 801f9c8:	eeeb 4aa2 	vfma.f32	s9, s23, s5
 801f9cc:	eee9 7aa2 	vfma.f32	s15, s19, s5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9d0:	eef8 9ac7 	vcvt.f32.s32	s19, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9d4:	ee07 7a10 	vmov	s14, r7
 801f9d8:	eeec 3aa2 	vfma.f32	s7, s25, s5
 801f9dc:	eeac 4a22 	vfma.f32	s8, s24, s5
 801f9e0:	eeae 5aa2 	vfma.f32	s10, s29, s5
 801f9e4:	eeeb 5a22 	vfma.f32	s11, s22, s5
 801f9e8:	eeaa 6aa2 	vfma.f32	s12, s21, s5
 801f9ec:	eeea 6a22 	vfma.f32	s13, s20, s5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9f0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9f4:	eef8 2ac7 	vcvt.f32.s32	s5, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9f8:	ee07 6a10 	vmov	s14, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801f9fc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fa00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fa04:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fa08:	eef8 1ae1 	vcvt.f32.s32	s3, s3
  *sum += *input_0++ * filter_3;
 801fa0c:	eee0 4a83 	vfma.f32	s9, s1, s6
 801fa10:	eee7 7a03 	vfma.f32	s15, s14, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801fa14:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
  *sum += *input_0++ * filter_3;
 801fa18:	eee9 3a03 	vfma.f32	s7, s18, s6
 801fa1c:	eea0 4a03 	vfma.f32	s8, s0, s6
 801fa20:	eea1 5a03 	vfma.f32	s10, s2, s6
 801fa24:	eee1 5a83 	vfma.f32	s11, s3, s6
 801fa28:	eea9 6a83 	vfma.f32	s12, s19, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801fa2c:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
  *sum += *input_0++ * filter_3;
 801fa30:	eee2 6a83 	vfma.f32	s13, s5, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801fa34:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 801fa38:	ee77 4a24 	vadd.f32	s9, s14, s9
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fa3c:	ed13 7a10 	vldr	s14, [r3, #-64]	; 0xffffffc0
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fa40:	fec8 3a23 	vmaxnm.f32	s7, s16, s7
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801fa44:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fa48:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801fa4c:	fe84 4a68 	vminnm.f32	s8, s8, s17
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fa50:	ee3f fa23 	vadd.f32	s30, s30, s7
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801fa54:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801fa58:	ee7f fa84 	vadd.f32	s31, s31, s8
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801fa5c:	fe85 5a68 	vminnm.f32	s10, s10, s17
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801fa60:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801fa64:	ee3e ea05 	vadd.f32	s28, s28, s10
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801fa68:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801fa6c:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801fa70:	ee7d daa5 	vadd.f32	s27, s27, s11
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801fa74:	fe86 6a68 	vminnm.f32	s12, s12, s17
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801fa78:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801fa7c:	ee32 2a06 	vadd.f32	s4, s4, s12
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801fa80:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fa84:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801fa88:	ee3d da26 	vadd.f32	s26, s26, s13
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fa8c:	fec7 7ae8 	vminnm.f32	s15, s15, s17
 801fa90:	ee77 7a27 	vadd.f32	s15, s14, s15
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fa94:	ed03 fa0f 	vstr	s30, [r3, #-60]	; 0xffffffc4
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801fa98:	ed43 fa0e 	vstr	s31, [r3, #-56]	; 0xffffffc8
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801fa9c:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801faa0:	ed03 ea0c 	vstr	s28, [r3, #-48]	; 0xffffffd0
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801faa4:	ed43 da0b 	vstr	s27, [r3, #-44]	; 0xffffffd4
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801faa8:	ed03 2a0a 	vstr	s4, [r3, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801faac:	ed03 da09 	vstr	s26, [r3, #-36]	; 0xffffffdc
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fab0:	ed43 7a10 	vstr	s15, [r3, #-64]	; 0xffffffc0
      while (col_count_div8--) {
 801fab4:	f47f aea0 	bne.w	801f7f8 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x838>
 801fab8:	3510      	adds	r5, #16
 801faba:	f8dd 8000 	ldr.w	r8, [sp]
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 801fabe:	45ab      	cmp	fp, r5
 801fac0:	eb08 020a 	add.w	r2, r8, sl
 801fac4:	f47f ae8b 	bne.w	801f7de <pointwise_conv_fp_4row4col_IOHW_int8weight+0x81e>
 801fac8:	9b03      	ldr	r3, [sp, #12]
 801faca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801facc:	4413      	add	r3, r2
 801face:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fad0:	9303      	str	r3, [sp, #12]
 801fad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fad4:	4499      	add	r9, r3
 801fad6:	9b02      	ldr	r3, [sp, #8]
 801fad8:	4413      	add	r3, r2
 801fada:	9302      	str	r3, [sp, #8]
  while (leftover_elements) {
 801fadc:	9b04      	ldr	r3, [sp, #16]
 801fade:	3b01      	subs	r3, #1
 801fae0:	9304      	str	r3, [sp, #16]
 801fae2:	f47f ae73 	bne.w	801f7cc <pointwise_conv_fp_4row4col_IOHW_int8weight+0x80c>
    leftover_elements--;
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 801fae6:	2000      	movs	r0, #0
 801fae8:	b02d      	add	sp, #180	; 0xb4
 801faea:	ecbd 8b10 	vpop	{d8-d15}
 801faee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (leftover_elements) {
 801faf2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801faf4:	2800      	cmp	r0, #0
 801faf6:	d0f6      	beq.n	801fae6 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb26>
      uint16_t col_count_div8 = (output_depth * DIM_KER_X * DIM_KER_Y) >> 3;
 801faf8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 801fafa:	9925      	ldr	r1, [sp, #148]	; 0x94
 801fafc:	08e2      	lsrs	r2, r4, #3
      while (col_count_div8--) {
 801fafe:	1e53      	subs	r3, r2, #1
 801fb00:	b29b      	uxth	r3, r3
 801fb02:	2900      	cmp	r1, #0
 801fb04:	d0ef      	beq.n	801fae6 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb26>
 801fb06:	2a00      	cmp	r2, #0
 801fb08:	d0ed      	beq.n	801fae6 <pointwise_conv_fp_4row4col_IOHW_int8weight+0xb26>
 801fb0a:	460a      	mov	r2, r1
 801fb0c:	0089      	lsls	r1, r1, #2
 801fb0e:	9004      	str	r0, [sp, #16]
 801fb10:	3a01      	subs	r2, #1
 801fb12:	911e      	str	r1, [sp, #120]	; 0x78
 801fb14:	00a1      	lsls	r1, r4, #2
 801fb16:	922b      	str	r2, [sp, #172]	; 0xac
 801fb18:	911f      	str	r1, [sp, #124]	; 0x7c
 801fb1a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fb1c:	9946      	ldr	r1, [sp, #280]	; 0x118
 801fb1e:	3210      	adds	r2, #16
 801fb20:	3108      	adds	r1, #8
 801fb22:	9223      	str	r2, [sp, #140]	; 0x8c
 801fb24:	4602      	mov	r2, r0
 801fb26:	9122      	str	r1, [sp, #136]	; 0x88
 801fb28:	4601      	mov	r1, r0
 801fb2a:	e634      	b.n	801f796 <pointwise_conv_fp_4row4col_IOHW_int8weight+0x7d6>

0801fb2c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol>:
tinyengine_status_fp pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_sram, const int8_t* filter_flash, const uint16_t first_k_channel, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 801fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb30:	ed2d 8b10 	vpush	{d8-d15}
 801fb34:	b0bb      	sub	sp, #236	; 0xec
 801fb36:	eeb0 8a40 	vmov.f32	s16, s0
 801fb3a:	eef0 8a60 	vmov.f32	s17, s1
 801fb3e:	f8bd 2164 	ldrh.w	r2, [sp, #356]	; 0x164
 801fb42:	f8bd 1168 	ldrh.w	r1, [sp, #360]	; 0x168
 801fb46:	9337      	str	r3, [sp, #220]	; 0xdc
  (void) input_height;
  (void) input_width;

  int i_element;
  const int num_elements = output_height * output_width;
 801fb48:	fb01 f202 	mul.w	r2, r1, r2
                 float* im2col_data, const uint16_t batches) {
 801fb4c:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 801fb50:	9039      	str	r0, [sp, #228]	; 0xe4
 801fb52:	9334      	str	r3, [sp, #208]	; 0xd0
  const int num_elements = output_height * output_width;
 801fb54:	9238      	str	r2, [sp, #224]	; 0xe0

  /* Initialize output data as 0 (assume bias == NULL) */
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801fb56:	fb03 f202 	mul.w	r2, r3, r2
                 float* im2col_data, const uint16_t batches) {
 801fb5a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 801fb5e:	9325      	str	r3, [sp, #148]	; 0x94
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 801fb60:	b122      	cbz	r2, 801fb6c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x40>
 801fb62:	0092      	lsls	r2, r2, #2
 801fb64:	2100      	movs	r1, #0
 801fb66:	9858      	ldr	r0, [sp, #352]	; 0x160
 801fb68:	f009 f9d1 	bl	8028f0e <memset>
    output_data[i_element] = 0;
  }

  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801fb6c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801fb6e:	109b      	asrs	r3, r3, #2
 801fb70:	9333      	str	r3, [sp, #204]	; 0xcc
 801fb72:	f000 879a 	beq.w	8020aaa <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xf7e>
        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row8col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
        out_0 += 8; out_1 += 8; out_2 += 8; out_3 += 8;
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 801fb76:	9925      	ldr	r1, [sp, #148]	; 0x94
 801fb78:	9b34      	ldr	r3, [sp, #208]	; 0xd0
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 801fb7a:	08c8      	lsrs	r0, r1, #3
 801fb7c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 801fb7e:	1a5a      	subs	r2, r3, r1
      while (col_count_div8--) {
 801fb80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 801fb84:	9021      	str	r0, [sp, #132]	; 0x84
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];

      /* Compute weights in FLASH */
      col_count_div8 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 3;
 801fb86:	f3c2 04cf 	ubfx	r4, r2, #3, #16
 801fb8a:	9217      	str	r2, [sp, #92]	; 0x5c
      while (col_count_div8--) {
 801fb8c:	fa1f fc8c 	uxth.w	ip, ip
      while (col_count_div8--) {
 801fb90:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
      col_count_div8 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 3;
 801fb94:	9422      	str	r4, [sp, #136]	; 0x88
      while (col_count_div8--) {
 801fb96:	fa1f fe8e 	uxth.w	lr, lr
 801fb9a:	2f00      	cmp	r7, #0
 801fb9c:	f000 8785 	beq.w	8020aaa <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xf7e>
 801fba0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fba4:	f10c 0001 	add.w	r0, ip, #1
 801fba8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801fbaa:	461c      	mov	r4, r3
 801fbac:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801fbb0:	f10e 0e08 	add.w	lr, lr, #8
 801fbb4:	f103 0108 	add.w	r1, r3, #8
 801fbb8:	0145      	lsls	r5, r0, #5
 801fbba:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 801fbbe:	f103 0904 	add.w	r9, r3, #4
 801fbc2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fbc6:	2300      	movs	r3, #0
 801fbc8:	00b6      	lsls	r6, r6, #2
 801fbca:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
 801fbce:	4696      	mov	lr, r2
 801fbd0:	9a58      	ldr	r2, [sp, #352]	; 0x160
 801fbd2:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 801fbd6:	9328      	str	r3, [sp, #160]	; 0xa0
 801fbd8:	463b      	mov	r3, r7
 801fbda:	1977      	adds	r7, r6, r5
 801fbdc:	1955      	adds	r5, r2, r5
 801fbde:	3620      	adds	r6, #32
 801fbe0:	009b      	lsls	r3, r3, #2
 801fbe2:	19d7      	adds	r7, r2, r7
 801fbe4:	951f      	str	r5, [sp, #124]	; 0x7c
 801fbe6:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801fbea:	4674      	mov	r4, lr
 801fbec:	932a      	str	r3, [sp, #168]	; 0xa8
 801fbee:	951e      	str	r5, [sp, #120]	; 0x78
 801fbf0:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
 801fbf4:	0123      	lsls	r3, r4, #4
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 801fbf6:	2000      	movs	r0, #0
 801fbf8:	1996      	adds	r6, r2, r6
 801fbfa:	971c      	str	r7, [sp, #112]	; 0x70
 801fbfc:	9029      	str	r0, [sp, #164]	; 0xa4
 801fbfe:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801fc02:	9335      	str	r3, [sp, #212]	; 0xd4
 801fc04:	4617      	mov	r7, r2
 801fc06:	9b55      	ldr	r3, [sp, #340]	; 0x154
 801fc08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fc0c:	901a      	str	r0, [sp, #104]	; 0x68
 801fc0e:	f028 0003 	bic.w	r0, r8, #3
 801fc12:	3308      	adds	r3, #8
 801fc14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fc16:	9036      	str	r0, [sp, #216]	; 0xd8
 801fc18:	eb07 00c9 	add.w	r0, r7, r9, lsl #3
 801fc1c:	9331      	str	r3, [sp, #196]	; 0xc4
 801fc1e:	0093      	lsls	r3, r2, #2
 801fc20:	9019      	str	r0, [sp, #100]	; 0x64
 801fc22:	4638      	mov	r0, r7
 801fc24:	9324      	str	r3, [sp, #144]	; 0x90
 801fc26:	f10c 0c08 	add.w	ip, ip, #8
 801fc2a:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801fc2c:	3020      	adds	r0, #32
 801fc2e:	9925      	ldr	r1, [sp, #148]	; 0x94
 801fc30:	3308      	adds	r3, #8
 801fc32:	901b      	str	r0, [sp, #108]	; 0x6c
      while (col_count_div8--) {
 801fc34:	9839      	ldr	r0, [sp, #228]	; 0xe4
 801fc36:	9330      	str	r3, [sp, #192]	; 0xc0
 801fc38:	008b      	lsls	r3, r1, #2
 801fc3a:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 801fc3e:	4684      	mov	ip, r0
 801fc40:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc42:	4603      	mov	r3, r0
 801fc44:	9618      	str	r6, [sp, #96]	; 0x60
 801fc46:	3310      	adds	r3, #16
 801fc48:	951d      	str	r5, [sp, #116]	; 0x74
 801fc4a:	9332      	str	r3, [sp, #200]	; 0xc8
 801fc4c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fc4e:	4664      	mov	r4, ip
 801fc50:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801fc52:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fc54:	440b      	add	r3, r1
 801fc56:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801fc58:	eb0c 0902 	add.w	r9, ip, r2
 801fc5c:	3920      	subs	r1, #32
 801fc5e:	eb09 0802 	add.w	r8, r9, r2
 801fc62:	464f      	mov	r7, r9
 801fc64:	912f      	str	r1, [sp, #188]	; 0xbc
 801fc66:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fc68:	4646      	mov	r6, r8
 801fc6a:	3920      	subs	r1, #32
 801fc6c:	912e      	str	r1, [sp, #184]	; 0xb8
 801fc6e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801fc70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fc74:	9320      	str	r3, [sp, #128]	; 0x80
 801fc76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fc78:	3b20      	subs	r3, #32
 801fc7a:	932d      	str	r3, [sp, #180]	; 0xb4
 801fc7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fc7e:	3b20      	subs	r3, #32
 801fc80:	932c      	str	r3, [sp, #176]	; 0xb0
 801fc82:	eb08 0302 	add.w	r3, r8, r2
 801fc86:	9a31      	ldr	r2, [sp, #196]	; 0xc4
                 float* im2col_data, const uint16_t batches) {
 801fc88:	469e      	mov	lr, r3
 801fc8a:	461d      	mov	r5, r3
 801fc8c:	9215      	str	r2, [sp, #84]	; 0x54
 801fc8e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fc90:	932b      	str	r3, [sp, #172]	; 0xac
 801fc92:	9216      	str	r2, [sp, #88]	; 0x58
      while (col_count_div8--) {
 801fc94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	f001 826a 	beq.w	8021170 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1644>
 801fc9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fc9e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fca0:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fca2:	181a      	adds	r2, r3, r0
 801fca4:	9410      	str	r4, [sp, #64]	; 0x40
 801fca6:	468c      	mov	ip, r1
 801fca8:	4619      	mov	r1, r3
 801fcaa:	4413      	add	r3, r2
 801fcac:	9713      	str	r7, [sp, #76]	; 0x4c
 801fcae:	eb0c 0a00 	add.w	sl, ip, r0
 801fcb2:	1859      	adds	r1, r3, r1
 801fcb4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 801fcb8:	e9dd 9818 	ldrd	r9, r8, [sp, #96]	; 0x60
 801fcbc:	e9dd ec1a 	ldrd	lr, ip, [sp, #104]	; 0x68
 801fcc0:	e9cd 5611 	strd	r5, r6, [sp, #68]	; 0x44
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fcc4:	f912 4c08 	ldrsb.w	r4, [r2, #-8]
 801fcc8:	3008      	adds	r0, #8
  *sum += *input_0++ * filter_1;
 801fcca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fccc:	3108      	adds	r1, #8
 801fcce:	ee04 4a90 	vmov	s9, r4
 801fcd2:	f910 4c10 	ldrsb.w	r4, [r0, #-16]
 801fcd6:	ed95 6a01 	vldr	s12, [r5, #4]
 801fcda:	3308      	adds	r3, #8
 801fcdc:	ee05 4a90 	vmov	s11, r4
 801fce0:	f913 4c10 	ldrsb.w	r4, [r3, #-16]
 801fce4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 801fce8:	ed95 da00 	vldr	s26, [r5]
 801fcec:	ee03 4a90 	vmov	s7, r4
 801fcf0:	f911 4c10 	ldrsb.w	r4, [r1, #-16]
 801fcf4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  *sum += *input_1++ * filter_1;
 801fcf8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801fcfa:	ee04 4a10 	vmov	s8, r4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fcfe:	f912 4c07 	ldrsb.w	r4, [r2, #-7]
  *sum += *input_0++ * filter_1;
 801fd02:	ee64 1a86 	vmul.f32	s3, s9, s12
  *sum += *input_1++ * filter_1;
 801fd06:	edd7 6a01 	vldr	s13, [r7, #4]
 801fd0a:	ee05 4a10 	vmov	s10, r4
 801fd0e:	f910 4c0f 	ldrsb.w	r4, [r0, #-15]
  *sum += *input_0++ * filter_2;
 801fd12:	ed95 ca02 	vldr	s24, [r5, #8]
  *sum += *input_1++ * filter_1;
 801fd16:	ee24 2aa6 	vmul.f32	s4, s9, s13
 801fd1a:	ee0f 4a90 	vmov	s31, r4
 801fd1e:	f913 4c0f 	ldrsb.w	r4, [r3, #-15]
  *sum++ += *input_0++ * filter_3;
 801fd22:	edd5 aa03 	vldr	s21, [r5, #12]
  *sum += *input_0++ * filter_1;
 801fd26:	eee5 1a8d 	vfma.f32	s3, s11, s26
  *sum += *input_2++ * filter_1;
 801fd2a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fd2c:	ee0f 4a10 	vmov	s30, r4
  *sum += *input_3++ * filter_1;
 801fd30:	9d11      	ldr	r5, [sp, #68]	; 0x44
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fd32:	eef8 3ae3 	vcvt.f32.s32	s7, s7
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fd36:	f911 4c0f 	ldrsb.w	r4, [r1, #-15]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fd3a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
  *sum += *input_2++ * filter_1;
 801fd3e:	ed96 7a01 	vldr	s14, [r6, #4]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fd42:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  *sum += *input_3++ * filter_1;
 801fd46:	edd5 7a01 	vldr	s15, [r5, #4]
 801fd4a:	ee0e 4a90 	vmov	s29, r4
  *sum += *input_1++ * filter_0;
 801fd4e:	edd7 ca00 	vldr	s25, [r7]
  *sum += *input_2++ * filter_1;
 801fd52:	ee64 2a87 	vmul.f32	s5, s9, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fd56:	f910 4c0e 	ldrsb.w	r4, [r0, #-14]
  *sum += *input_3++ * filter_1;
 801fd5a:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum += *input_2++ * filter_0;
 801fd5e:	ed96 ba00 	vldr	s22, [r6]
  *sum += *input_1++ * filter_1;
 801fd62:	eea5 2aac 	vfma.f32	s4, s11, s25
  *sum += *input_3++ * filter_0;
 801fd66:	edd5 9a00 	vldr	s19, [r5]
 801fd6a:	ee0e 4a10 	vmov	s28, r4
 801fd6e:	f912 4c06 	ldrsb.w	r4, [r2, #-6]
  *sum += *input_0++ * filter_2;
 801fd72:	eee3 1a8c 	vfma.f32	s3, s7, s24
  *sum += *input_2++ * filter_1;
 801fd76:	eee5 2a8b 	vfma.f32	s5, s11, s22
  *sum += *input_1++ * filter_2;
 801fd7a:	edd7 ba02 	vldr	s23, [r7, #8]
  *sum += *input_3++ * filter_1;
 801fd7e:	eee5 4aa9 	vfma.f32	s9, s11, s19
 801fd82:	ee05 4a90 	vmov	s11, r4
 801fd86:	f911 4c0e 	ldrsb.w	r4, [r1, #-14]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fd8a:	eef8 faef 	vcvt.f32.s32	s31, s31
  *sum += *input_2++ * filter_2;
 801fd8e:	ed96 9a02 	vldr	s18, [r6, #8]
  *sum += *input_1++ * filter_2;
 801fd92:	eea3 2aab 	vfma.f32	s4, s7, s23
  *sum++ += *input_1++ * filter_3;
 801fd96:	ed97 aa03 	vldr	s20, [r7, #12]
  *sum += *input_0++ * filter_1;
 801fd9a:	ee25 3a06 	vmul.f32	s6, s10, s12
  *sum++ += *input_2++ * filter_3;
 801fd9e:	edd6 0a03 	vldr	s1, [r6, #12]
  *sum++ += *input_0++ * filter_3;
 801fda2:	eee4 1a2a 	vfma.f32	s3, s8, s21
  *sum += *input_3++ * filter_2;
 801fda6:	ed95 0a02 	vldr	s0, [r5, #8]
  *sum += *input_2++ * filter_2;
 801fdaa:	eee3 2a89 	vfma.f32	s5, s7, s18
  *sum++ += *input_3++ * filter_3;
 801fdae:	ed95 1a03 	vldr	s2, [r5, #12]
  *sum += *input_0++ * filter_1;
 801fdb2:	eeaf 3a8d 	vfma.f32	s6, s31, s26
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fdb6:	f913 bc0e 	ldrsb.w	fp, [r3, #-14]
  *sum += *input_3++ * filter_2;
 801fdba:	eee3 4a80 	vfma.f32	s9, s7, s0
 801fdbe:	9400      	str	r4, [sp, #0]
  *sum++ += *input_1++ * filter_3;
 801fdc0:	eea4 2a0a 	vfma.f32	s4, s8, s20
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fdc4:	f910 6c0c 	ldrsb.w	r6, [r0, #-12]
  *sum += *input_1++ * filter_1;
 801fdc8:	ee65 3a26 	vmul.f32	s7, s10, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fdcc:	f910 4c0d 	ldrsb.w	r4, [r0, #-13]
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fdd0:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fdd4:	9605      	str	r6, [sp, #20]
 801fdd6:	fec1 1ae8 	vminnm.f32	s3, s3, s17
 801fdda:	f913 6c0c 	ldrsb.w	r6, [r3, #-12]
  *sum++ += *input_2++ * filter_3;
 801fdde:	eee4 2a20 	vfma.f32	s5, s8, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fde2:	f912 5c05 	ldrsb.w	r5, [r2, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fde6:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fdea:	f912 7c03 	ldrsb.w	r7, [r2, #-3]
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fdee:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fdf2:	9607      	str	r6, [sp, #28]
 801fdf4:	fe82 2a68 	vminnm.f32	s4, s4, s17
 801fdf8:	f911 6c0c 	ldrsb.w	r6, [r1, #-12]
  *sum += *input_1++ * filter_1;
 801fdfc:	eeef 3aac 	vfma.f32	s7, s31, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe00:	9401      	str	r4, [sp, #4]
  *sum += *input_0++ * filter_2;
 801fe02:	eeaf 3a0c 	vfma.f32	s6, s30, s24
 801fe06:	f911 4c0d 	ldrsb.w	r4, [r1, #-13]
  *sum++ += *input_3++ * filter_3;
 801fe0a:	eee4 4a01 	vfma.f32	s9, s8, s2
 801fe0e:	9502      	str	r5, [sp, #8]
  *sum += *input_2++ * filter_1;
 801fe10:	ee25 4a07 	vmul.f32	s8, s10, s14
 801fe14:	f913 5c0d 	ldrsb.w	r5, [r3, #-13]
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801fe18:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe1c:	9608      	str	r6, [sp, #32]
 801fe1e:	fec2 2ae8 	vminnm.f32	s5, s5, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe22:	f910 6c0b 	ldrsb.w	r6, [r0, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe26:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe2a:	970a      	str	r7, [sp, #40]	; 0x28
  *sum += *input_2++ * filter_1;
 801fe2c:	eeaf 4a8b 	vfma.f32	s8, s31, s22
 801fe30:	f913 7c0b 	ldrsb.w	r7, [r3, #-11]
  *sum += *input_1++ * filter_2;
 801fe34:	eeef 3a2b 	vfma.f32	s7, s30, s23
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fe38:	ed5c da08 	vldr	s27, [ip, #-32]	; 0xffffffe0
  *sum++ += *input_0++ * filter_3;
 801fe3c:	eeae 3aaa 	vfma.f32	s6, s29, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe40:	9503      	str	r5, [sp, #12]
  *sum += *input_3++ * filter_1;
 801fe42:	ee25 5a27 	vmul.f32	s10, s10, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe46:	f912 5c04 	ldrsb.w	r5, [r2, #-4]
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fe4a:	ee7d 1aa1 	vadd.f32	s3, s27, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe4e:	9404      	str	r4, [sp, #16]
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801fe50:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe54:	f911 4c0a 	ldrsb.w	r4, [r1, #-10]
 801fe58:	fec4 4ae8 	vminnm.f32	s9, s9, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe5c:	9609      	str	r6, [sp, #36]	; 0x24
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe5e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe62:	f911 6c0b 	ldrsb.w	r6, [r1, #-11]
  *sum += *input_3++ * filter_1;
 801fe66:	eeaf 5aa9 	vfma.f32	s10, s31, s19
 801fe6a:	970b      	str	r7, [sp, #44]	; 0x2c
  *sum += *input_2++ * filter_2;
 801fe6c:	eeaf 4a09 	vfma.f32	s8, s30, s18
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe70:	f912 7c02 	ldrsb.w	r7, [r2, #-2]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe74:	eeb8 eace 	vcvt.f32.s32	s28, s28
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe78:	960c      	str	r6, [sp, #48]	; 0x30
  *sum++ += *input_1++ * filter_3;
 801fe7a:	eeee 3a8a 	vfma.f32	s7, s29, s20
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe7e:	f910 6c0a 	ldrsb.w	r6, [r0, #-10]
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801fe82:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 801fe86:	970d      	str	r7, [sp, #52]	; 0x34
 801fe88:	fe83 3a68 	vminnm.f32	s6, s6, s17
 801fe8c:	f913 7c0a 	ldrsb.w	r7, [r3, #-10]
  *sum += *input_3++ * filter_2;
 801fe90:	eeaf 5a00 	vfma.f32	s10, s30, s0
 801fe94:	940e      	str	r4, [sp, #56]	; 0x38
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe96:	ee0f ba10 	vmov	s30, fp
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fe9a:	f910 4c09 	ldrsb.w	r4, [r0, #-9]
  *sum++ += *input_2++ * filter_3;
 801fe9e:	eeae 4aa0 	vfma.f32	s8, s29, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fea2:	9506      	str	r5, [sp, #24]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fea4:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fea8:	f912 5c01 	ldrsb.w	r5, [r2, #-1]
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801feac:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 801feb0:	f911 ac09 	ldrsb.w	sl, [r1, #-9]
 801feb4:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 801feb8:	950f      	str	r5, [sp, #60]	; 0x3c
  *sum++ += *input_3++ * filter_3;
 801feba:	eeae 5a81 	vfma.f32	s10, s29, s2
 801febe:	f913 5c09 	ldrsb.w	r5, [r3, #-9]
 801fec2:	ee0d aa90 	vmov	s27, sl
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 801fec6:	ed4c 1a08 	vstr	s3, [ip, #-32]	; 0xffffffe0
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801feca:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fece:	ed5e 1a08 	vldr	s3, [lr, #-32]	; 0xffffffe0
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801fed2:	fe84 4a68 	vminnm.f32	s8, s8, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fed6:	eddd ea00 	vldr	s29, [sp]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801feda:	eef8 daed 	vcvt.f32.s32	s27, s27
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fede:	ee31 2a82 	vadd.f32	s4, s3, s4
 801fee2:	3208      	adds	r2, #8
  *sum += *input_0++ * filter_1;
 801fee4:	ee65 1a86 	vmul.f32	s3, s11, s12
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801fee8:	fe85 5a08 	vmaxnm.f32	s10, s10, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801feec:	eef8 eaee 	vcvt.f32.s32	s29, s29
 801fef0:	fe85 5a68 	vminnm.f32	s10, s10, s17
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 801fef4:	ed0e 2a08 	vstr	s4, [lr, #-32]	; 0xffffffe0
 801fef8:	f10c 0c20 	add.w	ip, ip, #32
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801fefc:	ed18 2a08 	vldr	s4, [r8, #-32]	; 0xffffffe0
  *sum += *input_0++ * filter_1;
 801ff00:	eeee 1a0d 	vfma.f32	s3, s28, s26
 801ff04:	f10e 0e20 	add.w	lr, lr, #32
 801ff08:	f108 0820 	add.w	r8, r8, #32
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801ff0c:	ee72 2a22 	vadd.f32	s5, s4, s5
 801ff10:	f109 0920 	add.w	r9, r9, #32
  *sum += *input_1++ * filter_1;
 801ff14:	ee25 2aa6 	vmul.f32	s4, s11, s13
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 801ff18:	ed48 2a10 	vstr	s5, [r8, #-64]	; 0xffffffc0
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801ff1c:	ed59 2a10 	vldr	s5, [r9, #-64]	; 0xffffffc0
  *sum += *input_1++ * filter_1;
 801ff20:	eeae 2a2c 	vfma.f32	s4, s28, s25
  *sum += *input_0++ * filter_2;
 801ff24:	eeef 1a0c 	vfma.f32	s3, s30, s24
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801ff28:	ee72 4aa4 	vadd.f32	s9, s5, s9
  *sum += *input_2++ * filter_1;
 801ff2c:	ee65 2a87 	vmul.f32	s5, s11, s14
  *sum += *input_3++ * filter_1;
 801ff30:	ee65 5aa7 	vmul.f32	s11, s11, s15
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 801ff34:	ed49 4a10 	vstr	s9, [r9, #-64]	; 0xffffffc0
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801ff38:	ed5c 4a0f 	vldr	s9, [ip, #-60]	; 0xffffffc4
  *sum += *input_2++ * filter_1;
 801ff3c:	eeee 2a0b 	vfma.f32	s5, s28, s22
  *sum += *input_1++ * filter_2;
 801ff40:	eeaf 2a2b 	vfma.f32	s4, s30, s23
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801ff44:	ee34 3a83 	vadd.f32	s6, s9, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801ff48:	eddd 4a02 	vldr	s9, [sp, #8]
  *sum++ += *input_0++ * filter_3;
 801ff4c:	eeee 1aaa 	vfma.f32	s3, s29, s21
 801ff50:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 801ff54:	ed0c 3a0f 	vstr	s6, [ip, #-60]	; 0xffffffc4
  *sum += *input_3++ * filter_1;
 801ff58:	eeee 5a29 	vfma.f32	s11, s28, s19
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801ff5c:	ed1e 3a0f 	vldr	s6, [lr, #-60]	; 0xffffffc4
  *sum += *input_2++ * filter_2;
 801ff60:	eeef 2a09 	vfma.f32	s5, s30, s18
  *sum++ += *input_1++ * filter_3;
 801ff64:	eeae 2a8a 	vfma.f32	s4, s29, s20
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801ff68:	ee73 3a23 	vadd.f32	s7, s6, s7
 801ff6c:	ed9d 3a01 	vldr	s6, [sp, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801ff70:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
 801ff74:	fec1 1ae8 	vminnm.f32	s3, s3, s17
 801ff78:	eeb8 eac3 	vcvt.f32.s32	s28, s6
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 801ff7c:	ed4e 3a0f 	vstr	s7, [lr, #-60]	; 0xffffffc4
  *sum += *input_0++ * filter_1;
 801ff80:	ee24 3a86 	vmul.f32	s6, s9, s12
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801ff84:	ed58 3a0f 	vldr	s7, [r8, #-60]	; 0xffffffc4
  *sum += *input_3++ * filter_2;
 801ff88:	eeef 5a00 	vfma.f32	s11, s30, s0
 801ff8c:	ed9d fa03 	vldr	s30, [sp, #12]
  *sum++ += *input_2++ * filter_3;
 801ff90:	eeee 2aa0 	vfma.f32	s5, s29, s1
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801ff94:	ee33 4a84 	vadd.f32	s8, s7, s8
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801ff98:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
  *sum += *input_0++ * filter_1;
 801ff9c:	eeae 3a0d 	vfma.f32	s6, s28, s26
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 801ffa0:	fe82 2a68 	vminnm.f32	s4, s4, s17
  *sum += *input_1++ * filter_1;
 801ffa4:	ee64 3aa6 	vmul.f32	s7, s9, s13
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 801ffa8:	ed08 4a0f 	vstr	s8, [r8, #-60]	; 0xffffffc4
 801ffac:	eeb8 facf 	vcvt.f32.s32	s30, s30
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801ffb0:	ed19 4a0f 	vldr	s8, [r9, #-60]	; 0xffffffc4
  *sum++ += *input_3++ * filter_3;
 801ffb4:	eeee 5a81 	vfma.f32	s11, s29, s2
  *sum += *input_1++ * filter_1;
 801ffb8:	eeee 3a2c 	vfma.f32	s7, s28, s25
 801ffbc:	eddd ea04 	vldr	s29, [sp, #16]
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801ffc0:	ee34 5a05 	vadd.f32	s10, s8, s10
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801ffc4:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
  *sum += *input_2++ * filter_1;
 801ffc8:	ee24 4a87 	vmul.f32	s8, s9, s14
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 801ffcc:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum += *input_3++ * filter_1;
 801ffd0:	ee64 4aa7 	vmul.f32	s9, s9, s15
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 801ffd4:	ed09 5a0f 	vstr	s10, [r9, #-60]	; 0xffffffc4
  *sum += *input_0++ * filter_2;
 801ffd8:	eeaf 3a0c 	vfma.f32	s6, s30, s24
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801ffdc:	ed1c 5a0e 	vldr	s10, [ip, #-56]	; 0xffffffc8
  *sum += *input_2++ * filter_1;
 801ffe0:	eeae 4a0b 	vfma.f32	s8, s28, s22
  *sum += *input_3++ * filter_1;
 801ffe4:	eeee 4a29 	vfma.f32	s9, s28, s19
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801ffe8:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 801ffec:	ee75 1a21 	vadd.f32	s3, s10, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fff0:	ed9d 5a06 	vldr	s10, [sp, #24]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 801fff4:	eef8 eaee 	vcvt.f32.s32	s29, s29
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 801fff8:	fec5 5ae8 	vminnm.f32	s11, s11, s17
  *sum += *input_1++ * filter_2;
 801fffc:	eeef 3a2b 	vfma.f32	s7, s30, s23
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8020000:	ed4c 1a0e 	vstr	s3, [ip, #-56]	; 0xffffffc8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020004:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 8020008:	ed5e 1a0e 	vldr	s3, [lr, #-56]	; 0xffffffc8
  *sum += *input_2++ * filter_2;
 802000c:	eeaf 4a09 	vfma.f32	s8, s30, s18
  *sum += *input_3++ * filter_2;
 8020010:	eeef 4a00 	vfma.f32	s9, s30, s0
 8020014:	ed9d fa07 	vldr	s30, [sp, #28]
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 8020018:	ee31 2a82 	vadd.f32	s4, s3, s4
 802001c:	eddd 1a05 	vldr	s3, [sp, #20]
  *sum++ += *input_0++ * filter_3;
 8020020:	eeae 3aaa 	vfma.f32	s6, s29, s21
 8020024:	eeb8 eae1 	vcvt.f32.s32	s28, s3
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 8020028:	ed0e 2a0e 	vstr	s4, [lr, #-56]	; 0xffffffc8
  *sum += *input_0++ * filter_1;
 802002c:	ee65 1a06 	vmul.f32	s3, s10, s12
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 8020030:	ed18 2a0e 	vldr	s4, [r8, #-56]	; 0xffffffc8
  *sum++ += *input_1++ * filter_3;
 8020034:	eeee 3a8a 	vfma.f32	s7, s29, s20
  *sum++ += *input_2++ * filter_3;
 8020038:	eeae 4aa0 	vfma.f32	s8, s29, s1
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 802003c:	ee72 2a22 	vadd.f32	s5, s4, s5
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020040:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 8020044:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_0++ * filter_1;
 8020048:	eeee 1a0d 	vfma.f32	s3, s28, s26
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 802004c:	ed48 2a0e 	vstr	s5, [r8, #-56]	; 0xffffffc8
  *sum += *input_1++ * filter_1;
 8020050:	ee25 2a26 	vmul.f32	s4, s10, s13
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 8020054:	ed59 2a0e 	vldr	s5, [r9, #-56]	; 0xffffffc8
 8020058:	eeb8 facf 	vcvt.f32.s32	s30, s30
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 802005c:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 8020060:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 8020064:	ee72 5aa5 	vadd.f32	s11, s5, s11
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8020068:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
  *sum += *input_1++ * filter_1;
 802006c:	eeae 2a2c 	vfma.f32	s4, s28, s25
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8020070:	fe84 4a68 	vminnm.f32	s8, s8, s17
  *sum += *input_0++ * filter_2;
 8020074:	eeef 1a0c 	vfma.f32	s3, s30, s24
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 8020078:	ed49 5a0e 	vstr	s11, [r9, #-56]	; 0xffffffc8
  *sum += *input_2++ * filter_1;
 802007c:	ee65 2a07 	vmul.f32	s5, s10, s14
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020080:	ed5c 5a0d 	vldr	s11, [ip, #-52]	; 0xffffffcc
  *sum++ += *input_3++ * filter_3;
 8020084:	eeee 4a81 	vfma.f32	s9, s29, s2
 8020088:	eddd ea08 	vldr	s29, [sp, #32]
  *sum += *input_3++ * filter_1;
 802008c:	ee25 5a27 	vmul.f32	s10, s10, s15
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020090:	ee35 3a83 	vadd.f32	s6, s11, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020094:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020098:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 802009c:	eeee 2a0b 	vfma.f32	s5, s28, s22
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 80200a0:	ed0c 3a0d 	vstr	s6, [ip, #-52]	; 0xffffffcc
  *sum += *input_1++ * filter_2;
 80200a4:	eeaf 2a2b 	vfma.f32	s4, s30, s23
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 80200a8:	ed1e 3a0d 	vldr	s6, [lr, #-52]	; 0xffffffcc
  *sum++ += *input_0++ * filter_3;
 80200ac:	eeee 1aaa 	vfma.f32	s3, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 80200b0:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
 80200b4:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 80200b8:	ee73 3a23 	vadd.f32	s7, s6, s7
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80200bc:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
 80200c0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  *sum += *input_3++ * filter_1;
 80200c4:	eeae 5a29 	vfma.f32	s10, s28, s19
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 80200c8:	ed4e 3a0d 	vstr	s7, [lr, #-52]	; 0xffffffcc
  *sum += *input_2++ * filter_2;
 80200cc:	eeef 2a09 	vfma.f32	s5, s30, s18
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80200d0:	ed58 3a0d 	vldr	s7, [r8, #-52]	; 0xffffffcc
 80200d4:	eeb8 eac3 	vcvt.f32.s32	s28, s6
  *sum++ += *input_1++ * filter_3;
 80200d8:	eeae 2a8a 	vfma.f32	s4, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 80200dc:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80200e0:	ee33 4a84 	vadd.f32	s8, s7, s8
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 80200e4:	fec1 1ae8 	vminnm.f32	s3, s3, s17
  *sum += *input_0++ * filter_1;
 80200e8:	ee25 3a86 	vmul.f32	s6, s11, s12
  *sum += *input_3++ * filter_2;
 80200ec:	eeaf 5a00 	vfma.f32	s10, s30, s0
 80200f0:	ed9d fa0b 	vldr	s30, [sp, #44]	; 0x2c
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80200f4:	ed08 4a0d 	vstr	s8, [r8, #-52]	; 0xffffffcc
  *sum += *input_1++ * filter_1;
 80200f8:	ee65 3aa6 	vmul.f32	s7, s11, s13
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 80200fc:	ed19 4a0d 	vldr	s8, [r9, #-52]	; 0xffffffcc
  *sum += *input_0++ * filter_1;
 8020100:	eeae 3a0d 	vfma.f32	s6, s28, s26
  *sum++ += *input_2++ * filter_3;
 8020104:	eeee 2aa0 	vfma.f32	s5, s29, s1
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 8020108:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 802010c:	ee74 4a24 	vadd.f32	s9, s8, s9
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 8020110:	fe82 2a68 	vminnm.f32	s4, s4, s17
 8020114:	eeb8 facf 	vcvt.f32.s32	s30, s30
  *sum += *input_1++ * filter_1;
 8020118:	eeee 3a2c 	vfma.f32	s7, s28, s25
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 802011c:	ed49 4a0d 	vstr	s9, [r9, #-52]	; 0xffffffcc
  *sum += *input_2++ * filter_1;
 8020120:	ee25 4a87 	vmul.f32	s8, s11, s14
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 8020124:	ed5c 4a0c 	vldr	s9, [ip, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_2;
 8020128:	eeaf 3a0c 	vfma.f32	s6, s30, s24
  *sum++ += *input_3++ * filter_3;
 802012c:	eeae 5a81 	vfma.f32	s10, s29, s2
 8020130:	eddd ea0c 	vldr	s29, [sp, #48]	; 0x30
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 8020134:	ee74 1aa1 	vadd.f32	s3, s9, s3
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 8020138:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
 802013c:	fec2 2ae8 	vminnm.f32	s5, s5, s17
 8020140:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 8020144:	eeae 4a0b 	vfma.f32	s8, s28, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020148:	eddd 4a0d 	vldr	s9, [sp, #52]	; 0x34
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 802014c:	ed4c 1a0c 	vstr	s3, [ip, #-48]	; 0xffffffd0
  *sum += *input_1++ * filter_2;
 8020150:	eeef 3a2b 	vfma.f32	s7, s30, s23
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 8020154:	ed5e 1a0c 	vldr	s3, [lr, #-48]	; 0xffffffd0
  *sum += *input_3++ * filter_1;
 8020158:	ee65 5aa7 	vmul.f32	s11, s11, s15
  *sum++ += *input_0++ * filter_3;
 802015c:	eeae 3aaa 	vfma.f32	s6, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 8020160:	fe85 5a08 	vmaxnm.f32	s10, s10, s16
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 8020164:	ee31 2a82 	vadd.f32	s4, s3, s4
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 8020168:	fe85 5a68 	vminnm.f32	s10, s10, s17
 802016c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8020170:	ee01 6a90 	vmov	s3, r6
  *sum += *input_3++ * filter_1;
 8020174:	eeee 5a29 	vfma.f32	s11, s28, s19
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 8020178:	ed0e 2a0c 	vstr	s4, [lr, #-48]	; 0xffffffd0
  *sum += *input_2++ * filter_2;
 802017c:	eeaf 4a09 	vfma.f32	s8, s30, s18
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 8020180:	ed18 2a0c 	vldr	s4, [r8, #-48]	; 0xffffffd0
 8020184:	eeb8 eae1 	vcvt.f32.s32	s28, s3
  *sum++ += *input_1++ * filter_3;
 8020188:	eeee 3a8a 	vfma.f32	s7, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 802018c:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 8020190:	ee72 2a22 	vadd.f32	s5, s4, s5
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 8020194:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_0++ * filter_1;
 8020198:	ee64 1a86 	vmul.f32	s3, s9, s12
  *sum += *input_3++ * filter_2;
 802019c:	eeef 5a00 	vfma.f32	s11, s30, s0
 80201a0:	ee0f 7a10 	vmov	s30, r7
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 80201a4:	ed48 2a0c 	vstr	s5, [r8, #-48]	; 0xffffffd0
  *sum += *input_1++ * filter_1;
 80201a8:	ee24 2aa6 	vmul.f32	s4, s9, s13
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 80201ac:	ed59 2a0c 	vldr	s5, [r9, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_1;
 80201b0:	eeee 1a0d 	vfma.f32	s3, s28, s26
  *sum++ += *input_2++ * filter_3;
 80201b4:	eeae 4aa0 	vfma.f32	s8, s29, s1
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 80201b8:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 80201bc:	ee32 5a85 	vadd.f32	s10, s5, s10
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 80201c0:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 80201c4:	eeb8 facf 	vcvt.f32.s32	s30, s30
  *sum += *input_1++ * filter_1;
 80201c8:	eeae 2a2c 	vfma.f32	s4, s28, s25
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 80201cc:	ed09 5a0c 	vstr	s10, [r9, #-48]	; 0xffffffd0
  *sum += *input_2++ * filter_1;
 80201d0:	ee64 2a87 	vmul.f32	s5, s9, s14
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80201d4:	ed1c 5a0b 	vldr	s10, [ip, #-44]	; 0xffffffd4
  *sum += *input_0++ * filter_2;
 80201d8:	eeef 1a0c 	vfma.f32	s3, s30, s24
  *sum++ += *input_3++ * filter_3;
 80201dc:	eeee 5a81 	vfma.f32	s11, s29, s2
 80201e0:	eddd ea0e 	vldr	s29, [sp, #56]	; 0x38
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80201e4:	ee35 3a03 	vadd.f32	s6, s10, s6
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 80201e8:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
 80201ec:	fe84 4a68 	vminnm.f32	s8, s8, s17
 80201f0:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 80201f4:	eeee 2a0b 	vfma.f32	s5, s28, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80201f8:	ed9d 5a0f 	vldr	s10, [sp, #60]	; 0x3c
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80201fc:	ed0c 3a0b 	vstr	s6, [ip, #-44]	; 0xffffffd4
  *sum += *input_1++ * filter_2;
 8020200:	eeaf 2a2b 	vfma.f32	s4, s30, s23
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 8020204:	ed1e 3a0b 	vldr	s6, [lr, #-44]	; 0xffffffd4
  *sum += *input_3++ * filter_1;
 8020208:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum++ += *input_0++ * filter_3;
 802020c:	eeee 1aaa 	vfma.f32	s3, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 8020210:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 8020214:	ee73 3a23 	vadd.f32	s7, s6, s7
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 8020218:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 802021c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  *sum += *input_3++ * filter_1;
 8020220:	eeee 4a29 	vfma.f32	s9, s28, s19
 8020224:	ee0e 4a10 	vmov	s28, r4
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 8020228:	ed4e 3a0b 	vstr	s7, [lr, #-44]	; 0xffffffd4
  *sum += *input_2++ * filter_2;
 802022c:	eeef 2a09 	vfma.f32	s5, s30, s18
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 8020230:	ed58 3a0b 	vldr	s7, [r8, #-44]	; 0xffffffd4
 8020234:	eeb8 eace 	vcvt.f32.s32	s28, s28
  *sum += *input_0++ * filter_1;
 8020238:	ee25 6a06 	vmul.f32	s12, s10, s12
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 802023c:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 8020240:	ee33 4a84 	vadd.f32	s8, s7, s8
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 8020244:	fec1 1ae8 	vminnm.f32	s3, s3, s17
  *sum++ += *input_1++ * filter_3;
 8020248:	eeae 2a8a 	vfma.f32	s4, s29, s20
 802024c:	ee03 5a90 	vmov	s7, r5
  *sum += *input_0++ * filter_1;
 8020250:	eeae 6a0d 	vfma.f32	s12, s28, s26
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 8020254:	ed08 4a0b 	vstr	s8, [r8, #-44]	; 0xffffffd4
  *sum += *input_3++ * filter_2;
 8020258:	eeef 4a00 	vfma.f32	s9, s30, s0
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 802025c:	ed19 4a0b 	vldr	s8, [r9, #-44]	; 0xffffffd4
  *sum += *input_1++ * filter_1;
 8020260:	ee65 6a26 	vmul.f32	s13, s10, s13
  *sum++ += *input_2++ * filter_3;
 8020264:	eeee 2aa0 	vfma.f32	s5, s29, s1
      while (col_count_div8--) {
 8020268:	9c14      	ldr	r4, [sp, #80]	; 0x50
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 802026a:	ee74 5a25 	vadd.f32	s11, s8, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802026e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 8020272:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
 8020276:	fe82 2a68 	vminnm.f32	s4, s4, s17
  *sum += *input_1++ * filter_1;
 802027a:	eeee 6a2c 	vfma.f32	s13, s28, s25
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 802027e:	ed49 5a0b 	vstr	s11, [r9, #-44]	; 0xffffffd4
  *sum++ += *input_3++ * filter_3;
 8020282:	eeee 4a81 	vfma.f32	s9, s29, s2
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 8020286:	ed5c 5a0a 	vldr	s11, [ip, #-40]	; 0xffffffd8
  *sum += *input_0++ * filter_2;
 802028a:	eea3 6a8c 	vfma.f32	s12, s7, s24
  *sum += *input_2++ * filter_1;
 802028e:	ee25 7a07 	vmul.f32	s14, s10, s14
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 8020292:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 8020296:	ee75 1aa1 	vadd.f32	s3, s11, s3
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 802029a:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum += *input_3++ * filter_1;
 802029e:	ee65 7a27 	vmul.f32	s15, s10, s15
      while (col_count_div8--) {
 80202a2:	4284      	cmp	r4, r0
  *sum += *input_2++ * filter_1;
 80202a4:	eeae 7a0b 	vfma.f32	s14, s28, s22
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 80202a8:	ed4c 1a0a 	vstr	s3, [ip, #-40]	; 0xffffffd8
  *sum += *input_1++ * filter_2;
 80202ac:	eee3 6aab 	vfma.f32	s13, s7, s23
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 80202b0:	ed5e 5a0a 	vldr	s11, [lr, #-40]	; 0xffffffd8
  *sum++ += *input_0++ * filter_3;
 80202b4:	eead 6aaa 	vfma.f32	s12, s27, s21
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80202b8:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
 80202bc:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 80202c0:	ee35 2a82 	vadd.f32	s4, s11, s4
  *sum += *input_3++ * filter_1;
 80202c4:	eeee 7a29 	vfma.f32	s15, s28, s19
  *sum += *input_2++ * filter_2;
 80202c8:	eea3 7a89 	vfma.f32	s14, s7, s18
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 80202cc:	ed0e 2a0a 	vstr	s4, [lr, #-40]	; 0xffffffd8
  *sum++ += *input_1++ * filter_3;
 80202d0:	eeed 6a8a 	vfma.f32	s13, s27, s20
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80202d4:	ed58 5a0a 	vldr	s11, [r8, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 80202d8:	fe86 6a08 	vmaxnm.f32	s12, s12, s16
 80202dc:	fe86 6a68 	vminnm.f32	s12, s12, s17
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80202e0:	ee75 2aa2 	vadd.f32	s5, s11, s5
  *sum += *input_3++ * filter_2;
 80202e4:	eee3 7a80 	vfma.f32	s15, s7, s0
  *sum++ += *input_2++ * filter_3;
 80202e8:	eead 7aa0 	vfma.f32	s14, s27, s1
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80202ec:	ed48 2a0a 	vstr	s5, [r8, #-40]	; 0xffffffd8
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 80202f0:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80202f4:	ed59 5a0a 	vldr	s11, [r9, #-40]	; 0xffffffd8
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 80202f8:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80202fc:	ee75 4aa4 	vadd.f32	s9, s11, s9
  *sum++ += *input_3++ * filter_3;
 8020300:	eeed 7a81 	vfma.f32	s15, s27, s2
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 8020304:	fe87 7a08 	vmaxnm.f32	s14, s14, s16
 8020308:	fe87 7a68 	vminnm.f32	s14, s14, s17
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 802030c:	ed49 4a0a 	vstr	s9, [r9, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 8020310:	ed5c 5a09 	vldr	s11, [ip, #-36]	; 0xffffffdc
 8020314:	ee35 6a86 	vadd.f32	s12, s11, s12
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 8020318:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
 802031c:	fec7 7ae8 	vminnm.f32	s15, s15, s17
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 8020320:	ed0c 6a09 	vstr	s12, [ip, #-36]	; 0xffffffdc
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 8020324:	ed1e 6a09 	vldr	s12, [lr, #-36]	; 0xffffffdc
 8020328:	ee76 6a26 	vadd.f32	s13, s12, s13
 802032c:	ed4e 6a09 	vstr	s13, [lr, #-36]	; 0xffffffdc
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 8020330:	ed58 6a09 	vldr	s13, [r8, #-36]	; 0xffffffdc
 8020334:	ee36 7a87 	vadd.f32	s14, s13, s14
 8020338:	ed08 7a09 	vstr	s14, [r8, #-36]	; 0xffffffdc
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 802033c:	ed19 7a09 	vldr	s14, [r9, #-36]	; 0xffffffdc
 8020340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020344:	ed49 7a09 	vstr	s15, [r9, #-36]	; 0xffffffdc
 8020348:	f47f acbc 	bne.w	801fcc4 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x198>
 802034c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8020350:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8020354:	e9dd 101e 	ldrd	r1, r0, [sp, #120]	; 0x78
 8020358:	e9dd a21c 	ldrd	sl, r2, [sp, #112]	; 0x70
      while (col_count_div8--) {
 802035c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802035e:	2b00      	cmp	r3, #0
 8020360:	f000 8363 	beq.w	8020a2a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0xefe>
 8020364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020366:	f102 0e20 	add.w	lr, r2, #32
 802036a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802036c:	f10a 0b20 	add.w	fp, sl, #32
 8020370:	469c      	mov	ip, r3
 8020372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020374:	f100 0920 	add.w	r9, r0, #32
 8020378:	f101 0820 	add.w	r8, r1, #32
 802037c:	449c      	add	ip, r3
 802037e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020380:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020382:	469a      	mov	sl, r3
 8020384:	eb02 010c 	add.w	r1, r2, ip
 8020388:	465b      	mov	r3, fp
 802038a:	9410      	str	r4, [sp, #64]	; 0x40
 802038c:	4482      	add	sl, r0
 802038e:	440a      	add	r2, r1
 8020390:	9713      	str	r7, [sp, #76]	; 0x4c
 8020392:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8020396:	e9cd 5611 	strd	r5, r6, [sp, #68]	; 0x44
        /* Initialize partial sum (assume bias == NULL) */
        float sum[32] = {};

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802039a:	f91c 4c08 	ldrsb.w	r4, [ip, #-8]
 802039e:	3008      	adds	r0, #8
  *sum += *input_0++ * filter_1;
 80203a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80203a2:	3208      	adds	r2, #8
 80203a4:	ee04 4a90 	vmov	s9, r4
 80203a8:	f910 4c10 	ldrsb.w	r4, [r0, #-16]
 80203ac:	ed95 6a01 	vldr	s12, [r5, #4]
 80203b0:	3108      	adds	r1, #8
 80203b2:	ee05 4a90 	vmov	s11, r4
 80203b6:	f911 4c10 	ldrsb.w	r4, [r1, #-16]
 80203ba:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  *sum += *input_0++ * filter_0;
 80203be:	ed95 da00 	vldr	s26, [r5]
 80203c2:	ee03 4a90 	vmov	s7, r4
 80203c6:	f912 4c10 	ldrsb.w	r4, [r2, #-16]
 80203ca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  *sum += *input_1++ * filter_1;
 80203ce:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80203d0:	ee04 4a10 	vmov	s8, r4
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80203d4:	f91c 4c07 	ldrsb.w	r4, [ip, #-7]
  *sum += *input_0++ * filter_1;
 80203d8:	ee64 1a86 	vmul.f32	s3, s9, s12
  *sum += *input_1++ * filter_1;
 80203dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80203e0:	ee05 4a10 	vmov	s10, r4
 80203e4:	f910 4c0f 	ldrsb.w	r4, [r0, #-15]
  *sum += *input_0++ * filter_2;
 80203e8:	ed95 ca02 	vldr	s24, [r5, #8]
  *sum += *input_1++ * filter_1;
 80203ec:	ee24 2aa6 	vmul.f32	s4, s9, s13
 80203f0:	ee0f 4a90 	vmov	s31, r4
 80203f4:	f911 4c0f 	ldrsb.w	r4, [r1, #-15]
  *sum++ += *input_0++ * filter_3;
 80203f8:	edd5 aa03 	vldr	s21, [r5, #12]
  *sum += *input_0++ * filter_1;
 80203fc:	eee5 1a8d 	vfma.f32	s3, s11, s26
  *sum += *input_2++ * filter_1;
 8020400:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020402:	ee0f 4a10 	vmov	s30, r4
  *sum += *input_3++ * filter_1;
 8020406:	9d11      	ldr	r5, [sp, #68]	; 0x44
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020408:	eef8 3ae3 	vcvt.f32.s32	s7, s7
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802040c:	f912 4c0f 	ldrsb.w	r4, [r2, #-15]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020410:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
  *sum += *input_2++ * filter_1;
 8020414:	ed96 7a01 	vldr	s14, [r6, #4]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020418:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  *sum += *input_3++ * filter_1;
 802041c:	edd5 7a01 	vldr	s15, [r5, #4]
 8020420:	ee0e 4a90 	vmov	s29, r4
  *sum += *input_1++ * filter_0;
 8020424:	edd7 ca00 	vldr	s25, [r7]
  *sum += *input_2++ * filter_1;
 8020428:	ee64 2a87 	vmul.f32	s5, s9, s14
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802042c:	f910 4c0e 	ldrsb.w	r4, [r0, #-14]
  *sum += *input_3++ * filter_1;
 8020430:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum += *input_2++ * filter_0;
 8020434:	ed96 ba00 	vldr	s22, [r6]
  *sum += *input_1++ * filter_1;
 8020438:	eea5 2aac 	vfma.f32	s4, s11, s25
  *sum += *input_3++ * filter_0;
 802043c:	edd5 9a00 	vldr	s19, [r5]
 8020440:	ee0e 4a10 	vmov	s28, r4
 8020444:	f91c 4c06 	ldrsb.w	r4, [ip, #-6]
  *sum += *input_0++ * filter_2;
 8020448:	eee3 1a8c 	vfma.f32	s3, s7, s24
  *sum += *input_2++ * filter_1;
 802044c:	eee5 2a8b 	vfma.f32	s5, s11, s22
  *sum += *input_1++ * filter_2;
 8020450:	edd7 ba02 	vldr	s23, [r7, #8]
  *sum += *input_3++ * filter_1;
 8020454:	eee5 4aa9 	vfma.f32	s9, s11, s19
 8020458:	ee05 4a90 	vmov	s11, r4
 802045c:	f912 4c0e 	ldrsb.w	r4, [r2, #-14]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020460:	eef8 faef 	vcvt.f32.s32	s31, s31
  *sum += *input_2++ * filter_2;
 8020464:	ed96 9a02 	vldr	s18, [r6, #8]
  *sum += *input_1++ * filter_2;
 8020468:	eea3 2aab 	vfma.f32	s4, s7, s23
  *sum++ += *input_1++ * filter_3;
 802046c:	ed97 aa03 	vldr	s20, [r7, #12]
  *sum += *input_0++ * filter_1;
 8020470:	ee25 3a06 	vmul.f32	s6, s10, s12
  *sum++ += *input_2++ * filter_3;
 8020474:	edd6 0a03 	vldr	s1, [r6, #12]
  *sum++ += *input_0++ * filter_3;
 8020478:	eee4 1a2a 	vfma.f32	s3, s8, s21
  *sum += *input_3++ * filter_2;
 802047c:	ed95 0a02 	vldr	s0, [r5, #8]
  *sum += *input_2++ * filter_2;
 8020480:	eee3 2a89 	vfma.f32	s5, s7, s18
  *sum++ += *input_3++ * filter_3;
 8020484:	ed95 1a03 	vldr	s2, [r5, #12]
  *sum += *input_0++ * filter_1;
 8020488:	eeaf 3a8d 	vfma.f32	s6, s31, s26
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802048c:	f911 bc0e 	ldrsb.w	fp, [r1, #-14]
  *sum += *input_3++ * filter_2;
 8020490:	eee3 4a80 	vfma.f32	s9, s7, s0
 8020494:	9400      	str	r4, [sp, #0]
  *sum++ += *input_1++ * filter_3;
 8020496:	eea4 2a0a 	vfma.f32	s4, s8, s20
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_4row_4col_fp_IOHW_forint8w(&sum[12], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802049a:	f910 6c0c 	ldrsb.w	r6, [r0, #-12]
  *sum += *input_1++ * filter_1;
 802049e:	ee65 3a26 	vmul.f32	s7, s10, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204a2:	f910 4c0d 	ldrsb.w	r4, [r0, #-13]
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80204a6:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204aa:	9605      	str	r6, [sp, #20]
 80204ac:	fec1 1ae8 	vminnm.f32	s3, s3, s17
 80204b0:	f911 6c0c 	ldrsb.w	r6, [r1, #-12]
  *sum++ += *input_2++ * filter_3;
 80204b4:	eee4 2a20 	vfma.f32	s5, s8, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204b8:	f91c 5c05 	ldrsb.w	r5, [ip, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204bc:	eeb8 facf 	vcvt.f32.s32	s30, s30
        mac_4row_4col_fp_IOHW_forint8w(&sum[16], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204c0:	f91c 7c03 	ldrsb.w	r7, [ip, #-3]
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80204c4:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204c8:	9607      	str	r6, [sp, #28]
 80204ca:	fe82 2a68 	vminnm.f32	s4, s4, s17
 80204ce:	f912 6c0c 	ldrsb.w	r6, [r2, #-12]
  *sum += *input_1++ * filter_1;
 80204d2:	eeef 3aac 	vfma.f32	s7, s31, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204d6:	9401      	str	r4, [sp, #4]
  *sum += *input_0++ * filter_2;
 80204d8:	eeaf 3a0c 	vfma.f32	s6, s30, s24
 80204dc:	f912 4c0d 	ldrsb.w	r4, [r2, #-13]
  *sum++ += *input_3++ * filter_3;
 80204e0:	eee4 4a01 	vfma.f32	s9, s8, s2
 80204e4:	9502      	str	r5, [sp, #8]
  *sum += *input_2++ * filter_1;
 80204e6:	ee25 4a07 	vmul.f32	s8, s10, s14
 80204ea:	f911 5c0d 	ldrsb.w	r5, [r1, #-13]
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80204ee:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204f2:	9608      	str	r6, [sp, #32]
 80204f4:	fec2 2ae8 	vminnm.f32	s5, s5, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204f8:	f910 6c0b 	ldrsb.w	r6, [r0, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80204fc:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020500:	970a      	str	r7, [sp, #40]	; 0x28
  *sum += *input_2++ * filter_1;
 8020502:	eeaf 4a8b 	vfma.f32	s8, s31, s22
 8020506:	f911 7c0b 	ldrsb.w	r7, [r1, #-11]
  *sum += *input_1++ * filter_2;
 802050a:	eeef 3a2b 	vfma.f32	s7, s30, s23
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 802050e:	ed59 da08 	vldr	s27, [r9, #-32]	; 0xffffffe0
  *sum++ += *input_0++ * filter_3;
 8020512:	eeae 3aaa 	vfma.f32	s6, s29, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020516:	9503      	str	r5, [sp, #12]
  *sum += *input_3++ * filter_1;
 8020518:	ee25 5a27 	vmul.f32	s10, s10, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802051c:	f91c 5c04 	ldrsb.w	r5, [ip, #-4]
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8020520:	ee7d 1aa1 	vadd.f32	s3, s27, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020524:	9404      	str	r4, [sp, #16]
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8020526:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
        mac_4row_4col_fp_IOHW_forint8w(&sum[20], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802052a:	f912 4c0a 	ldrsb.w	r4, [r2, #-10]
 802052e:	fec4 4ae8 	vminnm.f32	s9, s9, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020532:	9609      	str	r6, [sp, #36]	; 0x24
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020534:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020538:	f912 6c0b 	ldrsb.w	r6, [r2, #-11]
  *sum += *input_3++ * filter_1;
 802053c:	eeaf 5aa9 	vfma.f32	s10, s31, s19
 8020540:	970b      	str	r7, [sp, #44]	; 0x2c
  *sum += *input_2++ * filter_2;
 8020542:	eeaf 4a09 	vfma.f32	s8, s30, s18
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020546:	f91c 7c02 	ldrsb.w	r7, [ip, #-2]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802054a:	eeb8 eace 	vcvt.f32.s32	s28, s28
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802054e:	960c      	str	r6, [sp, #48]	; 0x30
  *sum++ += *input_1++ * filter_3;
 8020550:	eeee 3a8a 	vfma.f32	s7, s29, s20
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020554:	f910 6c0a 	ldrsb.w	r6, [r0, #-10]
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8020558:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 802055c:	970d      	str	r7, [sp, #52]	; 0x34
 802055e:	fe83 3a68 	vminnm.f32	s6, s6, s17
 8020562:	f911 7c0a 	ldrsb.w	r7, [r1, #-10]
  *sum += *input_3++ * filter_2;
 8020566:	eeaf 5a00 	vfma.f32	s10, s30, s0
 802056a:	940e      	str	r4, [sp, #56]	; 0x38
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802056c:	ee0f ba10 	vmov	s30, fp
        mac_4row_4col_fp_IOHW_forint8w(&sum[24], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020570:	f910 4c09 	ldrsb.w	r4, [r0, #-9]
  *sum++ += *input_2++ * filter_3;
 8020574:	eeae 4aa0 	vfma.f32	s8, s29, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020578:	9506      	str	r5, [sp, #24]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802057a:	eeb8 facf 	vcvt.f32.s32	s30, s30
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802057e:	f91c 5c01 	ldrsb.w	r5, [ip, #-1]
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020582:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 8020586:	f912 ac09 	ldrsb.w	sl, [r2, #-9]
 802058a:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 802058e:	950f      	str	r5, [sp, #60]	; 0x3c
  *sum++ += *input_3++ * filter_3;
 8020590:	eeae 5a81 	vfma.f32	s10, s29, s2
 8020594:	f911 5c09 	ldrsb.w	r5, [r1, #-9]
 8020598:	ee0d aa90 	vmov	s27, sl
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 802059c:	ed49 1a08 	vstr	s3, [r9, #-32]	; 0xffffffe0
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80205a0:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80205a4:	ed58 1a08 	vldr	s3, [r8, #-32]	; 0xffffffe0
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80205a8:	fe84 4a68 	vminnm.f32	s8, s8, s17
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80205ac:	eddd ea00 	vldr	s29, [sp]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80205b0:	eef8 daed 	vcvt.f32.s32	s27, s27
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80205b4:	ee31 2a82 	vadd.f32	s4, s3, s4
 80205b8:	f10c 0c08 	add.w	ip, ip, #8
  *sum += *input_0++ * filter_1;
 80205bc:	ee65 1a86 	vmul.f32	s3, s11, s12
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 80205c0:	fe85 5a08 	vmaxnm.f32	s10, s10, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80205c4:	eef8 eaee 	vcvt.f32.s32	s29, s29
 80205c8:	fe85 5a68 	vminnm.f32	s10, s10, s17
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80205cc:	ed08 2a08 	vstr	s4, [r8, #-32]	; 0xffffffe0
 80205d0:	f109 0920 	add.w	r9, r9, #32
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80205d4:	ed1e 2a08 	vldr	s4, [lr, #-32]	; 0xffffffe0
  *sum += *input_0++ * filter_1;
 80205d8:	eeee 1a0d 	vfma.f32	s3, s28, s26
 80205dc:	f108 0820 	add.w	r8, r8, #32
 80205e0:	f10e 0e20 	add.w	lr, lr, #32
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80205e4:	ee72 2a22 	vadd.f32	s5, s4, s5
 80205e8:	3320      	adds	r3, #32
  *sum += *input_1++ * filter_1;
 80205ea:	ee25 2aa6 	vmul.f32	s4, s11, s13
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80205ee:	ed4e 2a10 	vstr	s5, [lr, #-64]	; 0xffffffc0
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80205f2:	ed53 2a10 	vldr	s5, [r3, #-64]	; 0xffffffc0
  *sum += *input_1++ * filter_1;
 80205f6:	eeae 2a2c 	vfma.f32	s4, s28, s25
  *sum += *input_0++ * filter_2;
 80205fa:	eeef 1a0c 	vfma.f32	s3, s30, s24
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80205fe:	ee72 4aa4 	vadd.f32	s9, s5, s9
  *sum += *input_2++ * filter_1;
 8020602:	ee65 2a87 	vmul.f32	s5, s11, s14
  *sum += *input_3++ * filter_1;
 8020606:	ee65 5aa7 	vmul.f32	s11, s11, s15
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 802060a:	ed43 4a10 	vstr	s9, [r3, #-64]	; 0xffffffc0
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 802060e:	ed59 4a0f 	vldr	s9, [r9, #-60]	; 0xffffffc4
  *sum += *input_2++ * filter_1;
 8020612:	eeee 2a0b 	vfma.f32	s5, s28, s22
  *sum += *input_1++ * filter_2;
 8020616:	eeaf 2a2b 	vfma.f32	s4, s30, s23
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 802061a:	ee34 3a83 	vadd.f32	s6, s9, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802061e:	eddd 4a02 	vldr	s9, [sp, #8]
  *sum++ += *input_0++ * filter_3;
 8020622:	eeee 1aaa 	vfma.f32	s3, s29, s21
 8020626:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 802062a:	ed09 3a0f 	vstr	s6, [r9, #-60]	; 0xffffffc4
  *sum += *input_3++ * filter_1;
 802062e:	eeee 5a29 	vfma.f32	s11, s28, s19
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020632:	ed18 3a0f 	vldr	s6, [r8, #-60]	; 0xffffffc4
  *sum += *input_2++ * filter_2;
 8020636:	eeef 2a09 	vfma.f32	s5, s30, s18
  *sum++ += *input_1++ * filter_3;
 802063a:	eeae 2a8a 	vfma.f32	s4, s29, s20
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 802063e:	ee73 3a23 	vadd.f32	s7, s6, s7
 8020642:	ed9d 3a01 	vldr	s6, [sp, #4]
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8020646:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
 802064a:	fec1 1ae8 	vminnm.f32	s3, s3, s17
 802064e:	eeb8 eac3 	vcvt.f32.s32	s28, s6
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020652:	ed48 3a0f 	vstr	s7, [r8, #-60]	; 0xffffffc4
  *sum += *input_0++ * filter_1;
 8020656:	ee24 3a86 	vmul.f32	s6, s9, s12
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802065a:	ed5e 3a0f 	vldr	s7, [lr, #-60]	; 0xffffffc4
  *sum += *input_3++ * filter_2;
 802065e:	eeef 5a00 	vfma.f32	s11, s30, s0
 8020662:	ed9d fa03 	vldr	s30, [sp, #12]
  *sum++ += *input_2++ * filter_3;
 8020666:	eeee 2aa0 	vfma.f32	s5, s29, s1
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802066a:	ee33 4a84 	vadd.f32	s8, s7, s8
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 802066e:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
  *sum += *input_0++ * filter_1;
 8020672:	eeae 3a0d 	vfma.f32	s6, s28, s26
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 8020676:	fe82 2a68 	vminnm.f32	s4, s4, s17
  *sum += *input_1++ * filter_1;
 802067a:	ee64 3aa6 	vmul.f32	s7, s9, s13
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802067e:	ed0e 4a0f 	vstr	s8, [lr, #-60]	; 0xffffffc4
 8020682:	eeb8 facf 	vcvt.f32.s32	s30, s30
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020686:	ed13 4a0f 	vldr	s8, [r3, #-60]	; 0xffffffc4
  *sum++ += *input_3++ * filter_3;
 802068a:	eeee 5a81 	vfma.f32	s11, s29, s2
  *sum += *input_1++ * filter_1;
 802068e:	eeee 3a2c 	vfma.f32	s7, s28, s25
 8020692:	eddd ea04 	vldr	s29, [sp, #16]
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020696:	ee34 5a05 	vadd.f32	s10, s8, s10
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 802069a:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
  *sum += *input_2++ * filter_1;
 802069e:	ee24 4a87 	vmul.f32	s8, s9, s14
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 80206a2:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum += *input_3++ * filter_1;
 80206a6:	ee64 4aa7 	vmul.f32	s9, s9, s15
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 80206aa:	ed03 5a0f 	vstr	s10, [r3, #-60]	; 0xffffffc4
  *sum += *input_0++ * filter_2;
 80206ae:	eeaf 3a0c 	vfma.f32	s6, s30, s24
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 80206b2:	ed19 5a0e 	vldr	s10, [r9, #-56]	; 0xffffffc8
  *sum += *input_2++ * filter_1;
 80206b6:	eeae 4a0b 	vfma.f32	s8, s28, s22
  *sum += *input_3++ * filter_1;
 80206ba:	eeee 4a29 	vfma.f32	s9, s28, s19
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80206be:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 80206c2:	ee75 1a21 	vadd.f32	s3, s10, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80206c6:	ed9d 5a06 	vldr	s10, [sp, #24]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80206ca:	eef8 eaee 	vcvt.f32.s32	s29, s29
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80206ce:	fec5 5ae8 	vminnm.f32	s11, s11, s17
  *sum += *input_1++ * filter_2;
 80206d2:	eeef 3a2b 	vfma.f32	s7, s30, s23
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 80206d6:	ed49 1a0e 	vstr	s3, [r9, #-56]	; 0xffffffc8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80206da:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80206de:	ed58 1a0e 	vldr	s3, [r8, #-56]	; 0xffffffc8
  *sum += *input_2++ * filter_2;
 80206e2:	eeaf 4a09 	vfma.f32	s8, s30, s18
  *sum += *input_3++ * filter_2;
 80206e6:	eeef 4a00 	vfma.f32	s9, s30, s0
 80206ea:	ed9d fa07 	vldr	s30, [sp, #28]
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80206ee:	ee31 2a82 	vadd.f32	s4, s3, s4
 80206f2:	eddd 1a05 	vldr	s3, [sp, #20]
  *sum++ += *input_0++ * filter_3;
 80206f6:	eeae 3aaa 	vfma.f32	s6, s29, s21
 80206fa:	eeb8 eae1 	vcvt.f32.s32	s28, s3
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80206fe:	ed08 2a0e 	vstr	s4, [r8, #-56]	; 0xffffffc8
  *sum += *input_0++ * filter_1;
 8020702:	ee65 1a06 	vmul.f32	s3, s10, s12
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 8020706:	ed1e 2a0e 	vldr	s4, [lr, #-56]	; 0xffffffc8
  *sum++ += *input_1++ * filter_3;
 802070a:	eeee 3a8a 	vfma.f32	s7, s29, s20
  *sum++ += *input_2++ * filter_3;
 802070e:	eeae 4aa0 	vfma.f32	s8, s29, s1
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 8020712:	ee72 2a22 	vadd.f32	s5, s4, s5
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020716:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 802071a:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_0++ * filter_1;
 802071e:	eeee 1a0d 	vfma.f32	s3, s28, s26
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 8020722:	ed4e 2a0e 	vstr	s5, [lr, #-56]	; 0xffffffc8
  *sum += *input_1++ * filter_1;
 8020726:	ee25 2a26 	vmul.f32	s4, s10, s13
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 802072a:	ed53 2a0e 	vldr	s5, [r3, #-56]	; 0xffffffc8
 802072e:	eeb8 facf 	vcvt.f32.s32	s30, s30
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 8020732:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 8020736:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 802073a:	ee72 5aa5 	vadd.f32	s11, s5, s11
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 802073e:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
  *sum += *input_1++ * filter_1;
 8020742:	eeae 2a2c 	vfma.f32	s4, s28, s25
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8020746:	fe84 4a68 	vminnm.f32	s8, s8, s17
  *sum += *input_0++ * filter_2;
 802074a:	eeef 1a0c 	vfma.f32	s3, s30, s24
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 802074e:	ed43 5a0e 	vstr	s11, [r3, #-56]	; 0xffffffc8
  *sum += *input_2++ * filter_1;
 8020752:	ee65 2a07 	vmul.f32	s5, s10, s14
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020756:	ed59 5a0d 	vldr	s11, [r9, #-52]	; 0xffffffcc
  *sum++ += *input_3++ * filter_3;
 802075a:	eeee 4a81 	vfma.f32	s9, s29, s2
 802075e:	eddd ea08 	vldr	s29, [sp, #32]
  *sum += *input_3++ * filter_1;
 8020762:	ee25 5a27 	vmul.f32	s10, s10, s15
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020766:	ee35 3a83 	vadd.f32	s6, s11, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802076a:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802076e:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 8020772:	eeee 2a0b 	vfma.f32	s5, s28, s22
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8020776:	ed09 3a0d 	vstr	s6, [r9, #-52]	; 0xffffffcc
  *sum += *input_1++ * filter_2;
 802077a:	eeaf 2a2b 	vfma.f32	s4, s30, s23
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 802077e:	ed18 3a0d 	vldr	s6, [r8, #-52]	; 0xffffffcc
  *sum++ += *input_0++ * filter_3;
 8020782:	eeee 1aaa 	vfma.f32	s3, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 8020786:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
 802078a:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 802078e:	ee73 3a23 	vadd.f32	s7, s6, s7
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020792:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
 8020796:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  *sum += *input_3++ * filter_1;
 802079a:	eeae 5a29 	vfma.f32	s10, s28, s19
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 802079e:	ed48 3a0d 	vstr	s7, [r8, #-52]	; 0xffffffcc
  *sum += *input_2++ * filter_2;
 80207a2:	eeef 2a09 	vfma.f32	s5, s30, s18
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80207a6:	ed5e 3a0d 	vldr	s7, [lr, #-52]	; 0xffffffcc
 80207aa:	eeb8 eac3 	vcvt.f32.s32	s28, s6
  *sum++ += *input_1++ * filter_3;
 80207ae:	eeae 2a8a 	vfma.f32	s4, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 80207b2:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80207b6:	ee33 4a84 	vadd.f32	s8, s7, s8
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 80207ba:	fec1 1ae8 	vminnm.f32	s3, s3, s17
  *sum += *input_0++ * filter_1;
 80207be:	ee25 3a86 	vmul.f32	s6, s11, s12
  *sum += *input_3++ * filter_2;
 80207c2:	eeaf 5a00 	vfma.f32	s10, s30, s0
 80207c6:	ed9d fa0b 	vldr	s30, [sp, #44]	; 0x2c
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 80207ca:	ed0e 4a0d 	vstr	s8, [lr, #-52]	; 0xffffffcc
  *sum += *input_1++ * filter_1;
 80207ce:	ee65 3aa6 	vmul.f32	s7, s11, s13
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 80207d2:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
  *sum += *input_0++ * filter_1;
 80207d6:	eeae 3a0d 	vfma.f32	s6, s28, s26
  *sum++ += *input_2++ * filter_3;
 80207da:	eeee 2aa0 	vfma.f32	s5, s29, s1
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 80207de:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 80207e2:	ee74 4a24 	vadd.f32	s9, s8, s9
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 80207e6:	fe82 2a68 	vminnm.f32	s4, s4, s17
 80207ea:	eeb8 facf 	vcvt.f32.s32	s30, s30
  *sum += *input_1++ * filter_1;
 80207ee:	eeee 3a2c 	vfma.f32	s7, s28, s25
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 80207f2:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
  *sum += *input_2++ * filter_1;
 80207f6:	ee25 4a87 	vmul.f32	s8, s11, s14
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 80207fa:	ed59 4a0c 	vldr	s9, [r9, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_2;
 80207fe:	eeaf 3a0c 	vfma.f32	s6, s30, s24
  *sum++ += *input_3++ * filter_3;
 8020802:	eeae 5a81 	vfma.f32	s10, s29, s2
 8020806:	eddd ea0c 	vldr	s29, [sp, #48]	; 0x30
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 802080a:	ee74 1aa1 	vadd.f32	s3, s9, s3
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 802080e:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
 8020812:	fec2 2ae8 	vminnm.f32	s5, s5, s17
 8020816:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 802081a:	eeae 4a0b 	vfma.f32	s8, s28, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802081e:	eddd 4a0d 	vldr	s9, [sp, #52]	; 0x34
    *out_0++ += TN_MIN(TN_MAX(sum[16], output_activation_min), output_activation_max);
 8020822:	ed49 1a0c 	vstr	s3, [r9, #-48]	; 0xffffffd0
  *sum += *input_1++ * filter_2;
 8020826:	eeef 3a2b 	vfma.f32	s7, s30, s23
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 802082a:	ed58 1a0c 	vldr	s3, [r8, #-48]	; 0xffffffd0
  *sum += *input_3++ * filter_1;
 802082e:	ee65 5aa7 	vmul.f32	s11, s11, s15
  *sum++ += *input_0++ * filter_3;
 8020832:	eeae 3aaa 	vfma.f32	s6, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 8020836:	fe85 5a08 	vmaxnm.f32	s10, s10, s16
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 802083a:	ee31 2a82 	vadd.f32	s4, s3, s4
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 802083e:	fe85 5a68 	vminnm.f32	s10, s10, s17
 8020842:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8020846:	ee01 6a90 	vmov	s3, r6
  *sum += *input_3++ * filter_1;
 802084a:	eeee 5a29 	vfma.f32	s11, s28, s19
    *out_1++ += TN_MIN(TN_MAX(sum[17], output_activation_min), output_activation_max);
 802084e:	ed08 2a0c 	vstr	s4, [r8, #-48]	; 0xffffffd0
  *sum += *input_2++ * filter_2;
 8020852:	eeaf 4a09 	vfma.f32	s8, s30, s18
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 8020856:	ed1e 2a0c 	vldr	s4, [lr, #-48]	; 0xffffffd0
 802085a:	eeb8 eae1 	vcvt.f32.s32	s28, s3
  *sum++ += *input_1++ * filter_3;
 802085e:	eeee 3a8a 	vfma.f32	s7, s29, s20
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 8020862:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 8020866:	ee72 2a22 	vadd.f32	s5, s4, s5
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 802086a:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_0++ * filter_1;
 802086e:	ee64 1a86 	vmul.f32	s3, s9, s12
  *sum += *input_3++ * filter_2;
 8020872:	eeef 5a00 	vfma.f32	s11, s30, s0
 8020876:	ee0f 7a10 	vmov	s30, r7
    *out_2++ += TN_MIN(TN_MAX(sum[18], output_activation_min), output_activation_max);
 802087a:	ed4e 2a0c 	vstr	s5, [lr, #-48]	; 0xffffffd0
  *sum += *input_1++ * filter_1;
 802087e:	ee24 2aa6 	vmul.f32	s4, s9, s13
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 8020882:	ed53 2a0c 	vldr	s5, [r3, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_1;
 8020886:	eeee 1a0d 	vfma.f32	s3, s28, s26
  *sum++ += *input_2++ * filter_3;
 802088a:	eeae 4aa0 	vfma.f32	s8, s29, s1
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 802088e:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 8020892:	ee32 5a85 	vadd.f32	s10, s5, s10
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 8020896:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 802089a:	eeb8 facf 	vcvt.f32.s32	s30, s30
  *sum += *input_1++ * filter_1;
 802089e:	eeae 2a2c 	vfma.f32	s4, s28, s25
    *out_3++ += TN_MIN(TN_MAX(sum[19], output_activation_min), output_activation_max);
 80208a2:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
  *sum += *input_2++ * filter_1;
 80208a6:	ee64 2a87 	vmul.f32	s5, s9, s14
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80208aa:	ed19 5a0b 	vldr	s10, [r9, #-44]	; 0xffffffd4
  *sum += *input_0++ * filter_2;
 80208ae:	eeef 1a0c 	vfma.f32	s3, s30, s24
  *sum++ += *input_3++ * filter_3;
 80208b2:	eeee 5a81 	vfma.f32	s11, s29, s2
 80208b6:	eddd ea0e 	vldr	s29, [sp, #56]	; 0x38
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80208ba:	ee35 3a03 	vadd.f32	s6, s10, s6
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 80208be:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
 80208c2:	fe84 4a68 	vminnm.f32	s8, s8, s17
 80208c6:	eef8 eaee 	vcvt.f32.s32	s29, s29
  *sum += *input_2++ * filter_1;
 80208ca:	eeee 2a0b 	vfma.f32	s5, s28, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80208ce:	ed9d 5a0f 	vldr	s10, [sp, #60]	; 0x3c
    *out_0++ += TN_MIN(TN_MAX(sum[20], output_activation_min), output_activation_max);
 80208d2:	ed09 3a0b 	vstr	s6, [r9, #-44]	; 0xffffffd4
  *sum += *input_1++ * filter_2;
 80208d6:	eeaf 2a2b 	vfma.f32	s4, s30, s23
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 80208da:	ed18 3a0b 	vldr	s6, [r8, #-44]	; 0xffffffd4
  *sum += *input_3++ * filter_1;
 80208de:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum++ += *input_0++ * filter_3;
 80208e2:	eeee 1aaa 	vfma.f32	s3, s29, s21
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 80208e6:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 80208ea:	ee73 3a23 	vadd.f32	s7, s6, s7
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 80208ee:	fec5 5ae8 	vminnm.f32	s11, s11, s17
 80208f2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  *sum += *input_3++ * filter_1;
 80208f6:	eeee 4a29 	vfma.f32	s9, s28, s19
 80208fa:	ee0e 4a10 	vmov	s28, r4
    *out_1++ += TN_MIN(TN_MAX(sum[21], output_activation_min), output_activation_max);
 80208fe:	ed48 3a0b 	vstr	s7, [r8, #-44]	; 0xffffffd4
  *sum += *input_2++ * filter_2;
 8020902:	eeef 2a09 	vfma.f32	s5, s30, s18
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 8020906:	ed5e 3a0b 	vldr	s7, [lr, #-44]	; 0xffffffd4
 802090a:	eeb8 eace 	vcvt.f32.s32	s28, s28
  *sum += *input_0++ * filter_1;
 802090e:	ee25 6a06 	vmul.f32	s12, s10, s12
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 8020912:	fec1 1a88 	vmaxnm.f32	s3, s3, s16
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 8020916:	ee33 4a84 	vadd.f32	s8, s7, s8
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 802091a:	fec1 1ae8 	vminnm.f32	s3, s3, s17
  *sum++ += *input_1++ * filter_3;
 802091e:	eeae 2a8a 	vfma.f32	s4, s29, s20
 8020922:	ee03 5a90 	vmov	s7, r5
  *sum += *input_0++ * filter_1;
 8020926:	eeae 6a0d 	vfma.f32	s12, s28, s26
    *out_2++ += TN_MIN(TN_MAX(sum[22], output_activation_min), output_activation_max);
 802092a:	ed0e 4a0b 	vstr	s8, [lr, #-44]	; 0xffffffd4
  *sum += *input_3++ * filter_2;
 802092e:	eeef 4a00 	vfma.f32	s9, s30, s0
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 8020932:	ed13 4a0b 	vldr	s8, [r3, #-44]	; 0xffffffd4
  *sum += *input_1++ * filter_1;
 8020936:	ee65 6a26 	vmul.f32	s13, s10, s13
  *sum++ += *input_2++ * filter_3;
 802093a:	eeee 2aa0 	vfma.f32	s5, s29, s1
      while (col_count_div8--) {
 802093e:	9c14      	ldr	r4, [sp, #80]	; 0x50
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 8020940:	ee74 5a25 	vadd.f32	s11, s8, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020944:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 8020948:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
 802094c:	fe82 2a68 	vminnm.f32	s4, s4, s17
  *sum += *input_1++ * filter_1;
 8020950:	eeee 6a2c 	vfma.f32	s13, s28, s25
    *out_3++ += TN_MIN(TN_MAX(sum[23], output_activation_min), output_activation_max);
 8020954:	ed43 5a0b 	vstr	s11, [r3, #-44]	; 0xffffffd4
  *sum++ += *input_3++ * filter_3;
 8020958:	eeee 4a81 	vfma.f32	s9, s29, s2
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 802095c:	ed59 5a0a 	vldr	s11, [r9, #-40]	; 0xffffffd8
  *sum += *input_0++ * filter_2;
 8020960:	eea3 6a8c 	vfma.f32	s12, s7, s24
  *sum += *input_2++ * filter_1;
 8020964:	ee25 7a07 	vmul.f32	s14, s10, s14
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 8020968:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 802096c:	ee75 1aa1 	vadd.f32	s3, s11, s3
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 8020970:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum += *input_3++ * filter_1;
 8020974:	ee65 7a27 	vmul.f32	s15, s10, s15
      while (col_count_div8--) {
 8020978:	4284      	cmp	r4, r0
  *sum += *input_2++ * filter_1;
 802097a:	eeae 7a0b 	vfma.f32	s14, s28, s22
    *out_0++ += TN_MIN(TN_MAX(sum[24], output_activation_min), output_activation_max);
 802097e:	ed49 1a0a 	vstr	s3, [r9, #-40]	; 0xffffffd8
  *sum += *input_1++ * filter_2;
 8020982:	eee3 6aab 	vfma.f32	s13, s7, s23
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 8020986:	ed58 5a0a 	vldr	s11, [r8, #-40]	; 0xffffffd8
  *sum++ += *input_0++ * filter_3;
 802098a:	eead 6aaa 	vfma.f32	s12, s27, s21
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 802098e:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
 8020992:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 8020996:	ee35 2a82 	vadd.f32	s4, s11, s4
  *sum += *input_3++ * filter_1;
 802099a:	eeee 7a29 	vfma.f32	s15, s28, s19
  *sum += *input_2++ * filter_2;
 802099e:	eea3 7a89 	vfma.f32	s14, s7, s18
    *out_1++ += TN_MIN(TN_MAX(sum[25], output_activation_min), output_activation_max);
 80209a2:	ed08 2a0a 	vstr	s4, [r8, #-40]	; 0xffffffd8
  *sum++ += *input_1++ * filter_3;
 80209a6:	eeed 6a8a 	vfma.f32	s13, s27, s20
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80209aa:	ed5e 5a0a 	vldr	s11, [lr, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 80209ae:	fe86 6a08 	vmaxnm.f32	s12, s12, s16
 80209b2:	fe86 6a68 	vminnm.f32	s12, s12, s17
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80209b6:	ee75 2aa2 	vadd.f32	s5, s11, s5
  *sum += *input_3++ * filter_2;
 80209ba:	eee3 7a80 	vfma.f32	s15, s7, s0
  *sum++ += *input_2++ * filter_3;
 80209be:	eead 7aa0 	vfma.f32	s14, s27, s1
    *out_2++ += TN_MIN(TN_MAX(sum[26], output_activation_min), output_activation_max);
 80209c2:	ed4e 2a0a 	vstr	s5, [lr, #-40]	; 0xffffffd8
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 80209c6:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80209ca:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 80209ce:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80209d2:	ee75 4aa4 	vadd.f32	s9, s11, s9
  *sum++ += *input_3++ * filter_3;
 80209d6:	eeed 7a81 	vfma.f32	s15, s27, s2
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 80209da:	fe87 7a08 	vmaxnm.f32	s14, s14, s16
 80209de:	fe87 7a68 	vminnm.f32	s14, s14, s17
    *out_3++ += TN_MIN(TN_MAX(sum[27], output_activation_min), output_activation_max);
 80209e2:	ed43 4a0a 	vstr	s9, [r3, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 80209e6:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 80209ea:	ee35 6a86 	vadd.f32	s12, s11, s12
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 80209ee:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
 80209f2:	fec7 7ae8 	vminnm.f32	s15, s15, s17
    *out_0++ += TN_MIN(TN_MAX(sum[28], output_activation_min), output_activation_max);
 80209f6:	ed09 6a09 	vstr	s12, [r9, #-36]	; 0xffffffdc
    *out_1++ += TN_MIN(TN_MAX(sum[29], output_activation_min), output_activation_max);
 80209fa:	ed18 6a09 	vldr	s12, [r8, #-36]	; 0xffffffdc
 80209fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8020a02:	ed48 6a09 	vstr	s13, [r8, #-36]	; 0xffffffdc
    *out_2++ += TN_MIN(TN_MAX(sum[30], output_activation_min), output_activation_max);
 8020a06:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 8020a0a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8020a0e:	ed0e 7a09 	vstr	s14, [lr, #-36]	; 0xffffffdc
    *out_3++ += TN_MIN(TN_MAX(sum[31], output_activation_min), output_activation_max);
 8020a12:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
 8020a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a1a:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8020a1e:	f47f acbc 	bne.w	802039a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x86e>
 8020a22:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8020a26:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8020a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020a2c:	3410      	adds	r4, #16
 8020a2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020a30:	3710      	adds	r7, #16
 8020a32:	3610      	adds	r6, #16
 8020a34:	3510      	adds	r5, #16
 8020a36:	4413      	add	r3, r2
 8020a38:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020a3a:	9315      	str	r3, [sp, #84]	; 0x54
 8020a3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020a3e:	4413      	add	r3, r2
 8020a40:	9316      	str	r3, [sp, #88]	; 0x58
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 8020a42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a44:	42a3      	cmp	r3, r4
 8020a46:	f47f a925 	bne.w	801fc94 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x168>
 8020a4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a4c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8020a4e:	461a      	mov	r2, r3
 8020a50:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 8020a52:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020a54:	4402      	add	r2, r0
 8020a56:	3104      	adds	r1, #4
 8020a58:	9228      	str	r2, [sp, #160]	; 0xa0
 8020a5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020a5c:	9129      	str	r1, [sp, #164]	; 0xa4
 8020a5e:	4614      	mov	r4, r2
 8020a60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020a62:	441c      	add	r4, r3
 8020a64:	941f      	str	r4, [sp, #124]	; 0x7c
 8020a66:	4614      	mov	r4, r2
 8020a68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020a6a:	441c      	add	r4, r3
 8020a6c:	941e      	str	r4, [sp, #120]	; 0x78
 8020a6e:	4614      	mov	r4, r2
 8020a70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020a72:	441c      	add	r4, r3
 8020a74:	941d      	str	r4, [sp, #116]	; 0x74
 8020a76:	4614      	mov	r4, r2
 8020a78:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020a7a:	441c      	add	r4, r3
 8020a7c:	4402      	add	r2, r0
 8020a7e:	941c      	str	r4, [sp, #112]	; 0x70
 8020a80:	4694      	mov	ip, r2
 8020a82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020a84:	4610      	mov	r0, r2
 8020a86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020a88:	4418      	add	r0, r3
 8020a8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8020a8c:	4610      	mov	r0, r2
 8020a8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020a90:	4418      	add	r0, r3
 8020a92:	901a      	str	r0, [sp, #104]	; 0x68
 8020a94:	4610      	mov	r0, r2
 8020a96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020a98:	4418      	add	r0, r3
 8020a9a:	441a      	add	r2, r3
 8020a9c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020a9e:	9019      	str	r0, [sp, #100]	; 0x64
 8020aa0:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
 8020aa4:	9218      	str	r2, [sp, #96]	; 0x60
 8020aa6:	f73f a8d1 	bgt.w	801fc4c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x120>
  }

  /* Handle left-over part */
  int leftover_elements = num_elements & 0x3;

  while (leftover_elements) {
 8020aaa:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8020aac:	f014 0103 	ands.w	r1, r4, #3
 8020ab0:	910c      	str	r1, [sp, #48]	; 0x30
 8020ab2:	f000 8357 	beq.w	8021164 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1638>
      const int8_t* filter_2_int8 = &filter_sram[(i_ch_in + 2) * first_k_channel];
      const int8_t* filter_3_int8 = &filter_sram[(i_ch_in + 3) * first_k_channel];
      float filter_0, filter_1, filter_2, filter_3;

      /* Compute weights in SRAM */
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 8020ab6:	9e25      	ldr	r6, [sp, #148]	; 0x94
        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row8col(out_0, sum, output_activation_min, output_activation_max);
        out_0 += 8;
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 8020ab8:	9f34      	ldr	r7, [sp, #208]	; 0xd0
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 8020aba:	08f2      	lsrs	r2, r6, #3
 8020abc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 8020abe:	eba7 0c06 	sub.w	ip, r7, r6
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 8020ac2:	9203      	str	r2, [sp, #12]
 8020ac4:	b292      	uxth	r2, r2
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];

      /* Compute weights in FLASH */
      col_count_div8 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 3;
 8020ac6:	f3cc 05cf 	ubfx	r5, ip, #3, #16
      uint16_t col_count_div8 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 3;
 8020aca:	920d      	str	r2, [sp, #52]	; 0x34
      while (col_count_div8--) {
 8020acc:	3a01      	subs	r2, #1
      col_count_div8 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 3;
 8020ace:	9504      	str	r5, [sp, #16]
      while (col_count_div8--) {
 8020ad0:	3d01      	subs	r5, #1
      while (col_count_div8--) {
 8020ad2:	b292      	uxth	r2, r2
      while (col_count_div8--) {
 8020ad4:	b2ad      	uxth	r5, r5
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	f000 8344 	beq.w	8021164 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1638>
 8020adc:	00ed      	lsls	r5, r5, #3
 8020ade:	4638      	mov	r0, r7
 8020ae0:	1a64      	subs	r4, r4, r1
 8020ae2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8020ae6:	f105 0708 	add.w	r7, r5, #8
 8020aea:	461d      	mov	r5, r3
 8020aec:	fb04 f000 	mul.w	r0, r4, r0
 8020af0:	00d1      	lsls	r1, r2, #3
 8020af2:	9709      	str	r7, [sp, #36]	; 0x24
 8020af4:	46b6      	mov	lr, r6
 8020af6:	9f55      	ldr	r7, [sp, #340]	; 0x154
 8020af8:	fb04 f403 	mul.w	r4, r4, r3
 8020afc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020afe:	3008      	adds	r0, #8
 8020b00:	3708      	adds	r7, #8
 8020b02:	3108      	adds	r1, #8
 8020b04:	009b      	lsls	r3, r3, #2
 8020b06:	940b      	str	r4, [sp, #44]	; 0x2c
 8020b08:	9731      	str	r7, [sp, #196]	; 0xc4
 8020b0a:	9f54      	ldr	r7, [sp, #336]	; 0x150
 8020b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b0e:	3708      	adds	r7, #8
 8020b10:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8020b12:	9108      	str	r1, [sp, #32]
 8020b14:	9730      	str	r7, [sp, #192]	; 0xc0
 8020b16:	461f      	mov	r7, r3
 8020b18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8020b1c:	3710      	adds	r7, #16
 8020b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8020b20:	f028 0303 	bic.w	r3, r8, #3
 8020b24:	9732      	str	r7, [sp, #200]	; 0xc8
 8020b26:	9311      	str	r3, [sp, #68]	; 0x44
 8020b28:	0153      	lsls	r3, r2, #5
 8020b2a:	9f58      	ldr	r7, [sp, #352]	; 0x160
 8020b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8020b2e:	00ab      	lsls	r3, r5, #2
 8020b30:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8020b34:	4667      	mov	r7, ip
 8020b36:	9310      	str	r3, [sp, #64]	; 0x40
 8020b38:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8020b3c:	9001      	str	r0, [sp, #4]
 8020b3e:	9306      	str	r3, [sp, #24]
 8020b40:	00b3      	lsls	r3, r6, #2
 8020b42:	9305      	str	r3, [sp, #20]
 8020b44:	9b01      	ldr	r3, [sp, #4]
 8020b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b48:	f1a3 0120 	sub.w	r1, r3, #32
 8020b4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020b4e:	18d3      	adds	r3, r2, r3
 8020b50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020b52:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
 8020b56:	4402      	add	r2, r0
 8020b58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020b5a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 8020b5c:	2800      	cmp	r0, #0
 8020b5e:	bf08      	it	eq
 8020b60:	460b      	moveq	r3, r1
 8020b62:	9932      	ldr	r1, [sp, #200]	; 0xc8
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 8020b64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020b66:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020b6a:	3320      	adds	r3, #32
 8020b6c:	9202      	str	r2, [sp, #8]
 8020b6e:	9307      	str	r3, [sp, #28]
      while (col_count_div8--) {
 8020b70:	9b03      	ldr	r3, [sp, #12]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	f000 816d 	beq.w	8020e52 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1326>
 8020b78:	eb0e 0006 	add.w	r0, lr, r6
 8020b7c:	9b08      	ldr	r3, [sp, #32]
 8020b7e:	4632      	mov	r2, r6
 8020b80:	9600      	str	r6, [sp, #0]
 8020b82:	eb0e 0100 	add.w	r1, lr, r0
 8020b86:	eb03 0b06 	add.w	fp, r3, r6
 8020b8a:	9b01      	ldr	r3, [sp, #4]
 8020b8c:	eb01 040e 	add.w	r4, r1, lr
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020b90:	f912 8c07 	ldrsb.w	r8, [r2, #-7]
 8020b94:	3208      	adds	r2, #8
  *sum += *input_0++ * filter_1;
 8020b96:	edd5 7a01 	vldr	s15, [r5, #4]
 8020b9a:	3408      	adds	r4, #8
 8020b9c:	ee06 8a90 	vmov	s13, r8
 8020ba0:	f910 8c07 	ldrsb.w	r8, [r0, #-7]
  *sum += *input_0++ * filter_0;
 8020ba4:	ed95 2a00 	vldr	s4, [r5]
 8020ba8:	3008      	adds	r0, #8
 8020baa:	ee03 8a90 	vmov	s7, r8
 8020bae:	f911 8c07 	ldrsb.w	r8, [r1, #-7]
 8020bb2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum += *input_0++ * filter_2;
 8020bb6:	edd5 2a02 	vldr	s5, [r5, #8]
 8020bba:	ee0c 8a90 	vmov	s25, r8
 8020bbe:	f914 8c0f 	ldrsb.w	r8, [r4, #-15]
 8020bc2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
  *sum += *input_0++ * filter_3;
 8020bc6:	ed95 3a03 	vldr	s6, [r5, #12]
 8020bca:	ee09 8a10 	vmov	s18, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bce:	f914 8c0e 	ldrsb.w	r8, [r4, #-14]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bd2:	f914 ac0a 	ldrsb.w	sl, [r4, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bd6:	eef8 caec 	vcvt.f32.s32	s25, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bda:	ee00 8a10 	vmov	s0, r8
 8020bde:	f911 8c06 	ldrsb.w	r8, [r1, #-6]
  *sum += *input_0++ * filter_1;
 8020be2:	ee63 3aa7 	vmul.f32	s7, s7, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020be6:	f914 9c09 	ldrsb.w	r9, [r4, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bea:	ee0c 8a10 	vmov	s24, r8
 8020bee:	f912 8c0e 	ldrsb.w	r8, [r2, #-14]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bf2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8020bf6:	3108      	adds	r1, #8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020bf8:	ee07 8a10 	vmov	s14, r8
 8020bfc:	f910 8c0e 	ldrsb.w	r8, [r0, #-14]
 8020c00:	eee6 3a82 	vfma.f32	s7, s13, s4
 8020c04:	3320      	adds	r3, #32
 8020c06:	ee04 8a10 	vmov	s8, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c0a:	f914 8c0d 	ldrsb.w	r8, [r4, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c12:	ee00 8a90 	vmov	s1, r8
 8020c16:	f911 8c0d 	ldrsb.w	r8, [r1, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c1a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c1e:	ee0b 8a90 	vmov	s23, r8
 8020c22:	f912 8c0d 	ldrsb.w	r8, [r2, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c26:	eeb8 cacc 	vcvt.f32.s32	s24, s24
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c2a:	ee06 8a10 	vmov	s12, r8
 8020c2e:	f910 8c0d 	ldrsb.w	r8, [r0, #-13]
 8020c32:	ee24 4a27 	vmul.f32	s8, s8, s15
 8020c36:	ee04 8a90 	vmov	s9, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c3a:	f914 8c0c 	ldrsb.w	r8, [r4, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c3e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c42:	ee01 8a10 	vmov	s2, r8
 8020c46:	f911 8c0c 	ldrsb.w	r8, [r1, #-12]
 8020c4a:	eea7 4a02 	vfma.f32	s8, s14, s4
 8020c4e:	ee0e 8a90 	vmov	s29, r8
 8020c52:	f912 8c0c 	ldrsb.w	r8, [r2, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c56:	eef8 4ae4 	vcvt.f32.s32	s9, s9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c5a:	ee06 8a90 	vmov	s13, r8
 8020c5e:	f910 8c0c 	ldrsb.w	r8, [r0, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c62:	eef8 baeb 	vcvt.f32.s32	s23, s23
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c66:	ee05 8a10 	vmov	s10, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c6a:	f914 8c0b 	ldrsb.w	r8, [r4, #-11]
 8020c6e:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8020c72:	ee01 8a90 	vmov	s3, r8
 8020c76:	f911 8c0b 	ldrsb.w	r8, [r1, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c7a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c7e:	ee0b 8a10 	vmov	s22, r8
 8020c82:	f912 8c0b 	ldrsb.w	r8, [r2, #-11]
 8020c86:	eee6 4a02 	vfma.f32	s9, s12, s4
 8020c8a:	ee07 8a10 	vmov	s14, r8
 8020c8e:	f910 8c0b 	ldrsb.w	r8, [r0, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c92:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c96:	ee05 8a90 	vmov	s11, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020c9a:	f911 8c0a 	ldrsb.w	r8, [r1, #-10]
 8020c9e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8020ca2:	ee0a 8a90 	vmov	s21, r8
 8020ca6:	f912 8c0a 	ldrsb.w	r8, [r2, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020caa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cae:	ee0e 8a10 	vmov	s28, r8
 8020cb2:	f910 8c0a 	ldrsb.w	r8, [r0, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cba:	ee06 8a10 	vmov	s12, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cbe:	f911 8c09 	ldrsb.w	r8, [r1, #-9]
 8020cc2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8020cc6:	ee0a 8a10 	vmov	s20, r8
 8020cca:	f912 8c09 	ldrsb.w	r8, [r2, #-9]
 8020cce:	eea6 5a82 	vfma.f32	s10, s13, s4
 8020cd2:	ee0d 8a90 	vmov	s27, r8
 8020cd6:	f910 8c09 	ldrsb.w	r8, [r0, #-9]
 8020cda:	eee7 5a02 	vfma.f32	s11, s14, s4
 8020cde:	ee06 8a90 	vmov	s13, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ce2:	f914 8c10 	ldrsb.w	r8, [r4, #-16]
 8020ce6:	f910 6c10 	ldrsb.w	r6, [r0, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8020cf2:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020cf6:	ee07 6a10 	vmov	s14, r6
 8020cfa:	f912 6c10 	ldrsb.w	r6, [r2, #-16]
  *sum += *input_0++ * filter_1;
 8020cfe:	ee26 6a27 	vmul.f32	s12, s12, s15
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8020d02:	ed53 fa0e 	vldr	s31, [r3, #-56]	; 0xffffffc8
 8020d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020d0a:	ee0d 6a10 	vmov	s26, r6
  *sum += *input_0++ * filter_1;
 8020d0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8020d12:	f911 6c10 	ldrsb.w	r6, [r1, #-16]
 8020d16:	eeb8 dacd 	vcvt.f32.s32	s26, s26
      while (col_count_div8--) {
 8020d1a:	4593      	cmp	fp, r2
 8020d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d20:	ee09 6a90 	vmov	s19, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d24:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8020d28:	ee07 aa10 	vmov	s14, sl
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d2c:	eef8 daed 	vcvt.f32.s32	s27, s27
 8020d30:	eeed 7a02 	vfma.f32	s15, s26, s4
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020d34:	ed13 da09 	vldr	s26, [r3, #-36]	; 0xffffffdc
  *sum += *input_0++ * filter_1;
 8020d38:	eeae 6a02 	vfma.f32	s12, s28, s4
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8020d3c:	ed13 ea0c 	vldr	s28, [r3, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_1;
 8020d40:	eeed 6a82 	vfma.f32	s13, s27, s4
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020d44:	ed53 da0b 	vldr	s27, [r3, #-44]	; 0xffffffd4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d48:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8020d4c:	ed13 2a0a 	vldr	s4, [r3, #-40]	; 0xffffffd8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d50:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d54:	eeb8 bacb 	vcvt.f32.s32	s22, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d58:	eef8 aaea 	vcvt.f32.s32	s21, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d5c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
  *sum += *input_0++ * filter_2;
 8020d60:	eeeb 4aa2 	vfma.f32	s9, s23, s5
 8020d64:	eee9 7aa2 	vfma.f32	s15, s19, s5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d68:	eef8 9ac7 	vcvt.f32.s32	s19, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d6c:	ee07 9a10 	vmov	s14, r9
 8020d70:	eeec 3aa2 	vfma.f32	s7, s25, s5
 8020d74:	eeac 4a22 	vfma.f32	s8, s24, s5
 8020d78:	eeae 5aa2 	vfma.f32	s10, s29, s5
 8020d7c:	eeeb 5a22 	vfma.f32	s11, s22, s5
 8020d80:	eeaa 6aa2 	vfma.f32	s12, s21, s5
 8020d84:	eeea 6a22 	vfma.f32	s13, s20, s5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d88:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d8c:	eef8 2ac7 	vcvt.f32.s32	s5, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d90:	ee07 8a10 	vmov	s14, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d94:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020d9c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020da0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
  *sum += *input_0++ * filter_3;
 8020da4:	eee0 4a83 	vfma.f32	s9, s1, s6
 8020da8:	eee7 7a03 	vfma.f32	s15, s14, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8020dac:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
  *sum += *input_0++ * filter_3;
 8020db0:	eee9 3a03 	vfma.f32	s7, s18, s6
 8020db4:	eea0 4a03 	vfma.f32	s8, s0, s6
 8020db8:	eea1 5a03 	vfma.f32	s10, s2, s6
 8020dbc:	eee1 5a83 	vfma.f32	s11, s3, s6
 8020dc0:	eea9 6a83 	vfma.f32	s12, s19, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8020dc4:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
  *sum += *input_0++ * filter_3;
 8020dc8:	eee2 6a83 	vfma.f32	s13, s5, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8020dcc:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 8020dd0:	ee77 4a24 	vadd.f32	s9, s14, s9
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8020dd4:	ed13 7a10 	vldr	s14, [r3, #-64]	; 0xffffffc0
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8020dd8:	fec8 3a23 	vmaxnm.f32	s7, s16, s7
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8020ddc:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8020de0:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8020de4:	fe84 4a68 	vminnm.f32	s8, s8, s17
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8020de8:	ee3f fa23 	vadd.f32	s30, s30, s7
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8020dec:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8020df0:	ee7f fa84 	vadd.f32	s31, s31, s8
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8020df4:	fe85 5a68 	vminnm.f32	s10, s10, s17
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020df8:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8020dfc:	ee3e ea05 	vadd.f32	s28, s28, s10
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020e00:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8020e04:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020e08:	ee7d daa5 	vadd.f32	s27, s27, s11
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8020e0c:	fe86 6a68 	vminnm.f32	s12, s12, s17
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020e10:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8020e14:	ee32 2a06 	vadd.f32	s4, s4, s12
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020e18:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8020e1c:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020e20:	ee3d da26 	vadd.f32	s26, s26, s13
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8020e24:	fec7 7ae8 	vminnm.f32	s15, s15, s17
 8020e28:	ee77 7a27 	vadd.f32	s15, s14, s15
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8020e2c:	ed03 fa0f 	vstr	s30, [r3, #-60]	; 0xffffffc4
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8020e30:	ed43 fa0e 	vstr	s31, [r3, #-56]	; 0xffffffc8
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8020e34:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8020e38:	ed03 ea0c 	vstr	s28, [r3, #-48]	; 0xffffffd0
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8020e3c:	ed43 da0b 	vstr	s27, [r3, #-44]	; 0xffffffd4
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8020e40:	ed03 2a0a 	vstr	s4, [r3, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8020e44:	ed03 da09 	vstr	s26, [r3, #-36]	; 0xffffffdc
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8020e48:	ed43 7a10 	vstr	s15, [r3, #-64]	; 0xffffffc0
      while (col_count_div8--) {
 8020e4c:	f47f aea0 	bne.w	8020b90 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1064>
 8020e50:	9e00      	ldr	r6, [sp, #0]
      while (col_count_div8--) {
 8020e52:	9b04      	ldr	r3, [sp, #16]
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	f000 816b 	beq.w	8021130 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1604>
 8020e5a:	eb07 000c 	add.w	r0, r7, ip
 8020e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e60:	4662      	mov	r2, ip
 8020e62:	9600      	str	r6, [sp, #0]
 8020e64:	1839      	adds	r1, r7, r0
 8020e66:	eb03 0b0c 	add.w	fp, r3, ip
 8020e6a:	9b07      	ldr	r3, [sp, #28]
 8020e6c:	187c      	adds	r4, r7, r1
        float sum[8] = {};

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020e6e:	f912 8c07 	ldrsb.w	r8, [r2, #-7]
 8020e72:	3208      	adds	r2, #8
  *sum += *input_0++ * filter_1;
 8020e74:	edd5 7a01 	vldr	s15, [r5, #4]
 8020e78:	3408      	adds	r4, #8
 8020e7a:	ee06 8a90 	vmov	s13, r8
 8020e7e:	f910 8c07 	ldrsb.w	r8, [r0, #-7]
  *sum += *input_0++ * filter_0;
 8020e82:	ed95 2a00 	vldr	s4, [r5]
 8020e86:	3008      	adds	r0, #8
 8020e88:	ee03 8a90 	vmov	s7, r8
 8020e8c:	f911 8c07 	ldrsb.w	r8, [r1, #-7]
 8020e90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum += *input_0++ * filter_2;
 8020e94:	edd5 2a02 	vldr	s5, [r5, #8]
 8020e98:	ee0c 8a90 	vmov	s25, r8
 8020e9c:	f914 8c0f 	ldrsb.w	r8, [r4, #-15]
 8020ea0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
  *sum += *input_0++ * filter_3;
 8020ea4:	ed95 3a03 	vldr	s6, [r5, #12]
 8020ea8:	ee09 8a10 	vmov	s18, r8
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020eac:	f914 8c0e 	ldrsb.w	r8, [r4, #-14]
        mac_1row_4col_fp_IOHW_forint8w(&sum[3], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[4], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[5], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020eb0:	f914 ac0a 	ldrsb.w	sl, [r4, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020eb4:	eef8 caec 	vcvt.f32.s32	s25, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020eb8:	ee00 8a10 	vmov	s0, r8
 8020ebc:	f911 8c06 	ldrsb.w	r8, [r1, #-6]
  *sum += *input_0++ * filter_1;
 8020ec0:	ee63 3aa7 	vmul.f32	s7, s7, s15
        mac_1row_4col_fp_IOHW_forint8w(&sum[6], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ec4:	f914 9c09 	ldrsb.w	r9, [r4, #-9]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ec8:	ee0c 8a10 	vmov	s24, r8
 8020ecc:	f912 8c0e 	ldrsb.w	r8, [r2, #-14]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ed0:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8020ed4:	3108      	adds	r1, #8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ed6:	ee07 8a10 	vmov	s14, r8
 8020eda:	f910 8c0e 	ldrsb.w	r8, [r0, #-14]
 8020ede:	eee6 3a82 	vfma.f32	s7, s13, s4
 8020ee2:	3320      	adds	r3, #32
 8020ee4:	ee04 8a10 	vmov	s8, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ee8:	f914 8c0d 	ldrsb.w	r8, [r4, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ef0:	ee00 8a90 	vmov	s1, r8
 8020ef4:	f911 8c0d 	ldrsb.w	r8, [r1, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ef8:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020efc:	ee0b 8a90 	vmov	s23, r8
 8020f00:	f912 8c0d 	ldrsb.w	r8, [r2, #-13]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f04:	eeb8 cacc 	vcvt.f32.s32	s24, s24
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f08:	ee06 8a10 	vmov	s12, r8
 8020f0c:	f910 8c0d 	ldrsb.w	r8, [r0, #-13]
 8020f10:	ee24 4a27 	vmul.f32	s8, s8, s15
 8020f14:	ee04 8a90 	vmov	s9, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f18:	f914 8c0c 	ldrsb.w	r8, [r4, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f1c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f20:	ee01 8a10 	vmov	s2, r8
 8020f24:	f911 8c0c 	ldrsb.w	r8, [r1, #-12]
 8020f28:	eea7 4a02 	vfma.f32	s8, s14, s4
 8020f2c:	ee0e 8a90 	vmov	s29, r8
 8020f30:	f912 8c0c 	ldrsb.w	r8, [r2, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f34:	eef8 4ae4 	vcvt.f32.s32	s9, s9
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f38:	ee06 8a90 	vmov	s13, r8
 8020f3c:	f910 8c0c 	ldrsb.w	r8, [r0, #-12]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f40:	eef8 baeb 	vcvt.f32.s32	s23, s23
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f44:	ee05 8a10 	vmov	s10, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f48:	f914 8c0b 	ldrsb.w	r8, [r4, #-11]
 8020f4c:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8020f50:	ee01 8a90 	vmov	s3, r8
 8020f54:	f911 8c0b 	ldrsb.w	r8, [r1, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f58:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f5c:	ee0b 8a10 	vmov	s22, r8
 8020f60:	f912 8c0b 	ldrsb.w	r8, [r2, #-11]
 8020f64:	eee6 4a02 	vfma.f32	s9, s12, s4
 8020f68:	ee07 8a10 	vmov	s14, r8
 8020f6c:	f910 8c0b 	ldrsb.w	r8, [r0, #-11]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f74:	ee05 8a90 	vmov	s11, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f78:	f911 8c0a 	ldrsb.w	r8, [r1, #-10]
 8020f7c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8020f80:	ee0a 8a90 	vmov	s21, r8
 8020f84:	f912 8c0a 	ldrsb.w	r8, [r2, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f88:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f8c:	ee0e 8a10 	vmov	s28, r8
 8020f90:	f910 8c0a 	ldrsb.w	r8, [r0, #-10]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f98:	ee06 8a10 	vmov	s12, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020f9c:	f911 8c09 	ldrsb.w	r8, [r1, #-9]
 8020fa0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8020fa4:	ee0a 8a10 	vmov	s20, r8
 8020fa8:	f912 8c09 	ldrsb.w	r8, [r2, #-9]
 8020fac:	eea6 5a82 	vfma.f32	s10, s13, s4
 8020fb0:	ee0d 8a90 	vmov	s27, r8
 8020fb4:	f910 8c09 	ldrsb.w	r8, [r0, #-9]
 8020fb8:	eee7 5a02 	vfma.f32	s11, s14, s4
 8020fbc:	ee06 8a90 	vmov	s13, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020fc0:	f914 8c10 	ldrsb.w	r8, [r4, #-16]
 8020fc4:	f910 6c10 	ldrsb.w	r6, [r0, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020fc8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020fcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8020fd0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020fd4:	ee07 6a10 	vmov	s14, r6
 8020fd8:	f912 6c10 	ldrsb.w	r6, [r2, #-16]
  *sum += *input_0++ * filter_1;
 8020fdc:	ee26 6a27 	vmul.f32	s12, s12, s15
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8020fe0:	ed53 fa0e 	vldr	s31, [r3, #-56]	; 0xffffffc8
 8020fe4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020fe8:	ee0d 6a10 	vmov	s26, r6
  *sum += *input_0++ * filter_1;
 8020fec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8020ff0:	f911 6c10 	ldrsb.w	r6, [r1, #-16]
 8020ff4:	eeb8 dacd 	vcvt.f32.s32	s26, s26
      while (col_count_div8--) {
 8020ff8:	455a      	cmp	r2, fp
 8020ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8020ffe:	ee09 6a90 	vmov	s19, r6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021002:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8021006:	ee07 aa10 	vmov	s14, sl
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802100a:	eef8 daed 	vcvt.f32.s32	s27, s27
 802100e:	eeed 7a02 	vfma.f32	s15, s26, s4
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8021012:	ed13 da09 	vldr	s26, [r3, #-36]	; 0xffffffdc
  *sum += *input_0++ * filter_1;
 8021016:	eeae 6a02 	vfma.f32	s12, s28, s4
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 802101a:	ed13 ea0c 	vldr	s28, [r3, #-48]	; 0xffffffd0
  *sum += *input_0++ * filter_1;
 802101e:	eeed 6a82 	vfma.f32	s13, s27, s4
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8021022:	ed53 da0b 	vldr	s27, [r3, #-44]	; 0xffffffd4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021026:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802102a:	ed13 2a0a 	vldr	s4, [r3, #-40]	; 0xffffffd8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802102e:	eef8 eaee 	vcvt.f32.s32	s29, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021032:	eeb8 bacb 	vcvt.f32.s32	s22, s22
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021036:	eef8 aaea 	vcvt.f32.s32	s21, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802103a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
  *sum += *input_0++ * filter_2;
 802103e:	eeeb 4aa2 	vfma.f32	s9, s23, s5
 8021042:	eee9 7aa2 	vfma.f32	s15, s19, s5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021046:	eef8 9ac7 	vcvt.f32.s32	s19, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802104a:	ee07 9a10 	vmov	s14, r9
 802104e:	eeec 3aa2 	vfma.f32	s7, s25, s5
 8021052:	eeac 4a22 	vfma.f32	s8, s24, s5
 8021056:	eeae 5aa2 	vfma.f32	s10, s29, s5
 802105a:	eeeb 5a22 	vfma.f32	s11, s22, s5
 802105e:	eeaa 6aa2 	vfma.f32	s12, s21, s5
 8021062:	eeea 6a22 	vfma.f32	s13, s20, s5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021066:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802106a:	eef8 2ac7 	vcvt.f32.s32	s5, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802106e:	ee07 8a10 	vmov	s14, r8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021072:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021076:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802107a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802107e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
  *sum += *input_0++ * filter_3;
 8021082:	eee0 4a83 	vfma.f32	s9, s1, s6
 8021086:	eee7 7a03 	vfma.f32	s15, s14, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 802108a:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
  *sum += *input_0++ * filter_3;
 802108e:	eee9 3a03 	vfma.f32	s7, s18, s6
 8021092:	eea0 4a03 	vfma.f32	s8, s0, s6
 8021096:	eea1 5a03 	vfma.f32	s10, s2, s6
 802109a:	eee1 5a83 	vfma.f32	s11, s3, s6
 802109e:	eea9 6a83 	vfma.f32	s12, s19, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80210a2:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
  *sum += *input_0++ * filter_3;
 80210a6:	eee2 6a83 	vfma.f32	s13, s5, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80210aa:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 80210ae:	ee77 4a24 	vadd.f32	s9, s14, s9
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80210b2:	ed13 7a10 	vldr	s14, [r3, #-64]	; 0xffffffc0
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80210b6:	fec8 3a23 	vmaxnm.f32	s7, s16, s7
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80210ba:	fe88 4a04 	vmaxnm.f32	s8, s16, s8
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80210be:	fec3 3ae8 	vminnm.f32	s7, s7, s17
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80210c2:	fe84 4a68 	vminnm.f32	s8, s8, s17
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 80210c6:	ee3f fa23 	vadd.f32	s30, s30, s7
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80210ca:	fe88 5a05 	vmaxnm.f32	s10, s16, s10
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80210ce:	ee7f fa84 	vadd.f32	s31, s31, s8
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80210d2:	fe85 5a68 	vminnm.f32	s10, s10, s17
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80210d6:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80210da:	ee3e ea05 	vadd.f32	s28, s28, s10
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80210de:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80210e2:	fe88 6a06 	vmaxnm.f32	s12, s16, s12
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80210e6:	ee7d daa5 	vadd.f32	s27, s27, s11
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80210ea:	fe86 6a68 	vminnm.f32	s12, s12, s17
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 80210ee:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80210f2:	ee32 2a06 	vadd.f32	s4, s4, s12
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 80210f6:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80210fa:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 80210fe:	ee3d da26 	vadd.f32	s26, s26, s13
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021102:	fec7 7ae8 	vminnm.f32	s15, s15, s17
 8021106:	ee77 7a27 	vadd.f32	s15, s14, s15
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 802110a:	ed03 fa0f 	vstr	s30, [r3, #-60]	; 0xffffffc4
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 802110e:	ed43 fa0e 	vstr	s31, [r3, #-56]	; 0xffffffc8
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021112:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8021116:	ed03 ea0c 	vstr	s28, [r3, #-48]	; 0xffffffd0
    *out_0++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 802111a:	ed43 da0b 	vstr	s27, [r3, #-44]	; 0xffffffd4
    *out_0++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802111e:	ed03 2a0a 	vstr	s4, [r3, #-40]	; 0xffffffd8
    *out_0++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8021122:	ed03 da09 	vstr	s26, [r3, #-36]	; 0xffffffdc
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021126:	ed43 7a10 	vstr	s15, [r3, #-64]	; 0xffffffc0
      while (col_count_div8--) {
 802112a:	f47f aea0 	bne.w	8020e6e <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1342>
 802112e:	9e00      	ldr	r6, [sp, #0]
 8021130:	9b06      	ldr	r3, [sp, #24]
 8021132:	3510      	adds	r5, #16
 8021134:	449c      	add	ip, r3
 8021136:	9b05      	ldr	r3, [sp, #20]
 8021138:	441e      	add	r6, r3
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 802113a:	9b02      	ldr	r3, [sp, #8]
 802113c:	42ab      	cmp	r3, r5
 802113e:	f47f ad17 	bne.w	8020b70 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1044>
 8021142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021144:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8021146:	4413      	add	r3, r2
 8021148:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802114a:	930b      	str	r3, [sp, #44]	; 0x2c
 802114c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802114e:	4413      	add	r3, r2
 8021150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021152:	930a      	str	r3, [sp, #40]	; 0x28
 8021154:	9b01      	ldr	r3, [sp, #4]
 8021156:	4413      	add	r3, r2
 8021158:	9301      	str	r3, [sp, #4]
  while (leftover_elements) {
 802115a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802115c:	3b01      	subs	r3, #1
 802115e:	930c      	str	r3, [sp, #48]	; 0x30
 8021160:	f47f acf0 	bne.w	8020b44 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x1018>
    leftover_elements--;
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
}
 8021164:	2000      	movs	r0, #0
 8021166:	b03b      	add	sp, #236	; 0xec
 8021168:	ecbd 8b10 	vpop	{d8-d15}
 802116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out_2 = &output_data[(i_element + 2) * output_depth];
 8021170:	e9dd a22c 	ldrd	sl, r2, [sp, #176]	; 0xb0
      float* out_0 = &output_data[i_element * output_depth];
 8021174:	e9dd 102e 	ldrd	r1, r0, [sp, #184]	; 0xb8
 8021178:	f7ff b8f0 	b.w	802035c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_8innercol+0x830>

0802117c <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol>:
tinyengine_status_fp pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol(const float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_sram, const int8_t* filter_flash, const uint16_t first_k_channel, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches) {
 802117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021180:	ed2d 8b10 	vpush	{d8-d15}
 8021184:	b0ad      	sub	sp, #180	; 0xb4
 8021186:	eeb0 8a40 	vmov.f32	s16, s0
 802118a:	eef0 8a60 	vmov.f32	s17, s1
 802118e:	f8bd 212c 	ldrh.w	r2, [sp, #300]	; 0x12c
 8021192:	f8bd 1130 	ldrh.w	r1, [sp, #304]	; 0x130
 8021196:	9325      	str	r3, [sp, #148]	; 0x94
  (void) input_height;
  (void) input_width;

  int i_element;
  const int num_elements = output_height * output_width;
 8021198:	fb01 f202 	mul.w	r2, r1, r2
                 float* im2col_data, const uint16_t batches) {
 802119c:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 80211a0:	902b      	str	r0, [sp, #172]	; 0xac
 80211a2:	9327      	str	r3, [sp, #156]	; 0x9c
  const int num_elements = output_height * output_width;
 80211a4:	922a      	str	r2, [sp, #168]	; 0xa8

  /* Initialize output data as 0 (assume bias == NULL) */
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 80211a6:	fb03 f202 	mul.w	r2, r3, r2
                 float* im2col_data, const uint16_t batches) {
 80211aa:	f8bd 3120 	ldrh.w	r3, [sp, #288]	; 0x120
 80211ae:	9316      	str	r3, [sp, #88]	; 0x58
  for(i_element = 0; i_element < output_depth*num_elements; i_element++) {
 80211b0:	b122      	cbz	r2, 80211bc <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x40>
 80211b2:	0092      	lsls	r2, r2, #2
 80211b4:	2100      	movs	r1, #0
 80211b6:	984a      	ldr	r0, [sp, #296]	; 0x128
 80211b8:	f007 fea9 	bl	8028f0e <memset>
    output_data[i_element] = 0;
  }

  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 80211bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80211be:	109b      	asrs	r3, r3, #2
 80211c0:	9326      	str	r3, [sp, #152]	; 0x98
 80211c2:	f000 847d 	beq.w	8021ac0 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x944>
        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_4row4col(out_0, out_1, out_2, out_3, sum, output_activation_min, output_activation_max);
        out_0 += 4; out_1 += 4; out_2 += 4; out_3 += 4;
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 80211c6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80211c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 80211ca:	0888      	lsrs	r0, r1, #2
 80211cc:	9f25      	ldr	r7, [sp, #148]	; 0x94
      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 80211ce:	1a5a      	subs	r2, r3, r1
      while (col_count_div4--) {
 80211d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 80211d4:	9012      	str	r0, [sp, #72]	; 0x48
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];

      /* Compute weights in FLASH */
      col_count_div4 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 2;
 80211d6:	f3c2 048f 	ubfx	r4, r2, #2, #16
 80211da:	9217      	str	r2, [sp, #92]	; 0x5c
      while (col_count_div4--) {
 80211dc:	fa1f fc8c 	uxth.w	ip, ip
      while (col_count_div4--) {
 80211e0:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
      col_count_div4 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 2;
 80211e4:	9413      	str	r4, [sp, #76]	; 0x4c
      while (col_count_div4--) {
 80211e6:	fa1f fe8e 	uxth.w	lr, lr
 80211ea:	2f00      	cmp	r7, #0
 80211ec:	f000 8468 	beq.w	8021ac0 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x944>
 80211f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80211f4:	f10c 0001 	add.w	r0, ip, #1
 80211f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80211fa:	461c      	mov	r4, r3
 80211fc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8021200:	f10e 0e04 	add.w	lr, lr, #4
 8021204:	1d19      	adds	r1, r3, #4
 8021206:	0105      	lsls	r5, r0, #4
 8021208:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 802120c:	f103 0802 	add.w	r8, r3, #2
 8021210:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021214:	2300      	movs	r3, #0
 8021216:	00b6      	lsls	r6, r6, #2
 8021218:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 802121c:	4696      	mov	lr, r2
 802121e:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8021220:	931a      	str	r3, [sp, #104]	; 0x68
 8021222:	1e7b      	subs	r3, r7, #1
 8021224:	1977      	adds	r7, r6, r5
 8021226:	1955      	adds	r5, r2, r5
 8021228:	3610      	adds	r6, #16
 802122a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802122e:	9510      	str	r5, [sp, #64]	; 0x40
 8021230:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 8021234:	4674      	mov	r4, lr
 8021236:	19d7      	adds	r7, r2, r7
 8021238:	950f      	str	r5, [sp, #60]	; 0x3c
 802123a:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 802123e:	2000      	movs	r0, #0
 8021240:	1996      	adds	r6, r2, r6
 8021242:	970d      	str	r7, [sp, #52]	; 0x34
 8021244:	4617      	mov	r7, r2
 8021246:	901b      	str	r0, [sp, #108]	; 0x6c
 8021248:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802124c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802124e:	f10c 0c04 	add.w	ip, ip, #4
 8021252:	900b      	str	r0, [sp, #44]	; 0x2c
 8021254:	f023 0003 	bic.w	r0, r3, #3
 8021258:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802125a:	9029      	str	r0, [sp, #164]	; 0xa4
 802125c:	eb07 00c8 	add.w	r0, r7, r8, lsl #3
 8021260:	009b      	lsls	r3, r3, #2
 8021262:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021264:	900a      	str	r0, [sp, #40]	; 0x28
 8021266:	4638      	mov	r0, r7
 8021268:	931c      	str	r3, [sp, #112]	; 0x70
 802126a:	0123      	lsls	r3, r4, #4
 802126c:	3010      	adds	r0, #16
 802126e:	950e      	str	r5, [sp, #56]	; 0x38
 8021270:	9328      	str	r3, [sp, #160]	; 0xa0
 8021272:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021274:	900c      	str	r0, [sp, #48]	; 0x30
 8021276:	3304      	adds	r3, #4
      while (col_count_div4--) {
 8021278:	982b      	ldr	r0, [sp, #172]	; 0xac
 802127a:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 802127e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021280:	0093      	lsls	r3, r2, #2
 8021282:	4605      	mov	r5, r0
 8021284:	9609      	str	r6, [sp, #36]	; 0x24
 8021286:	9315      	str	r3, [sp, #84]	; 0x54
 8021288:	9b46      	ldr	r3, [sp, #280]	; 0x118
 802128a:	3304      	adds	r3, #4
 802128c:	9322      	str	r3, [sp, #136]	; 0x88
 802128e:	008b      	lsls	r3, r1, #2
 8021290:	9314      	str	r3, [sp, #80]	; 0x50
 8021292:	4603      	mov	r3, r0
 8021294:	3310      	adds	r3, #16
 8021296:	9324      	str	r3, [sp, #144]	; 0x90
 8021298:	991a      	ldr	r1, [sp, #104]	; 0x68
 802129a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802129c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802129e:	440b      	add	r3, r1
 80212a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80212a2:	eb05 0a02 	add.w	sl, r5, r2
 80212a6:	3910      	subs	r1, #16
 80212a8:	eb0a 0702 	add.w	r7, sl, r2
 80212ac:	46d1      	mov	r9, sl
 80212ae:	9121      	str	r1, [sp, #132]	; 0x84
 80212b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80212b2:	18be      	adds	r6, r7, r2
 80212b4:	3910      	subs	r1, #16
 80212b6:	961d      	str	r6, [sp, #116]	; 0x74
 80212b8:	9602      	str	r6, [sp, #8]
 80212ba:	9120      	str	r1, [sp, #128]	; 0x80
 80212bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80212be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80212c2:	9311      	str	r3, [sp, #68]	; 0x44
 80212c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212c6:	3b10      	subs	r3, #16
 80212c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80212ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212cc:	3b10      	subs	r3, #16
 80212ce:	931e      	str	r3, [sp, #120]	; 0x78
 80212d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80212d2:	9307      	str	r3, [sp, #28]
 80212d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80212d6:	9308      	str	r3, [sp, #32]
      while (col_count_div4--) {
 80212d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80212da:	2b00      	cmp	r3, #0
 80212dc:	f000 85fb 	beq.w	8021ed6 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xd5a>
 80212e0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80212e2:	9c08      	ldr	r4, [sp, #32]
 80212e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80212e6:	eb06 0e04 	add.w	lr, r6, r4
 80212ea:	9501      	str	r5, [sp, #4]
 80212ec:	4611      	mov	r1, r2
 80212ee:	eb06 0c0e 	add.w	ip, r6, lr
 80212f2:	eb01 0a04 	add.w	sl, r1, r4
 80212f6:	eb0c 0806 	add.w	r8, ip, r6
 80212fa:	9e02      	ldr	r6, [sp, #8]
 80212fc:	f8cd a018 	str.w	sl, [sp, #24]
 8021300:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
 8021304:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021308:	f91e 5c04 	ldrsb.w	r5, [lr, #-4]
 802130c:	3404      	adds	r4, #4
  *sum += *input_1++ * filter_1;
 802130e:	edd9 5a01 	vldr	s11, [r9, #4]
 8021312:	f10e 0e04 	add.w	lr, lr, #4
 8021316:	ee04 5a90 	vmov	s9, r5
  *sum += *input_0++ * filter_1;
 802131a:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_1++ * filter_0;
 802131c:	ed99 fa00 	vldr	s30, [r9]
 8021320:	f10c 0c04 	add.w	ip, ip, #4
  *sum += *input_0++ * filter_1;
 8021324:	ed95 5a01 	vldr	s10, [r5, #4]
 8021328:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 802132c:	f914 5c08 	ldrsb.w	r5, [r4, #-8]
 8021330:	f108 0804 	add.w	r8, r8, #4
  *sum += *input_2++ * filter_1;
 8021334:	ed97 6a01 	vldr	s12, [r7, #4]
 8021338:	3310      	adds	r3, #16
 802133a:	ee07 5a10 	vmov	s14, r5
  *sum += *input_0++ * filter_0;
 802133e:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_0++ * filter_1;
 8021340:	ee24 2a85 	vmul.f32	s4, s9, s10
  *sum += *input_3++ * filter_1;
 8021344:	edd6 7a01 	vldr	s15, [r6, #4]
  *sum += *input_0++ * filter_0;
 8021348:	edd5 fa00 	vldr	s31, [r5]
 802134c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021350:	f91c 5c08 	ldrsb.w	r5, [ip, #-8]
  *sum += *input_1++ * filter_1;
 8021354:	ee64 2aa5 	vmul.f32	s5, s9, s11
  *sum += *input_2++ * filter_1;
 8021358:	ee24 3a86 	vmul.f32	s6, s9, s12
  *sum += *input_2++ * filter_0;
 802135c:	ed97 ea00 	vldr	s28, [r7]
 8021360:	ee04 5a10 	vmov	s8, r5
  *sum += *input_0++ * filter_2;
 8021364:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_0++ * filter_1;
 8021366:	eea7 2a2f 	vfma.f32	s4, s14, s31
  *sum += *input_3++ * filter_0;
 802136a:	edd6 ca00 	vldr	s25, [r6]
  *sum += *input_0++ * filter_2;
 802136e:	edd5 ea02 	vldr	s29, [r5, #8]
 8021372:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8021376:	f918 5c08 	ldrsb.w	r5, [r8, #-8]
  *sum += *input_1++ * filter_1;
 802137a:	eee7 2a0f 	vfma.f32	s5, s14, s30
  *sum += *input_3++ * filter_1;
 802137e:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum += *input_1++ * filter_2;
 8021382:	edd9 da02 	vldr	s27, [r9, #8]
 8021386:	ee09 5a90 	vmov	s19, r5
  *sum++ += *input_0++ * filter_3;
 802138a:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_2++ * filter_1;
 802138c:	eea7 3a0e 	vfma.f32	s6, s14, s28
  *sum += *input_2++ * filter_2;
 8021390:	ed97 ca02 	vldr	s24, [r7, #8]
  *sum++ += *input_0++ * filter_3;
 8021394:	ed95 da03 	vldr	s26, [r5, #12]
  *sum += *input_0++ * filter_2;
 8021398:	eea4 2a2e 	vfma.f32	s4, s8, s29
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802139c:	f91e 5c07 	ldrsb.w	r5, [lr, #-7]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80213a0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
  *sum += *input_3++ * filter_1;
 80213a4:	eee7 4a2c 	vfma.f32	s9, s14, s25
  *sum += *input_3++ * filter_2;
 80213a8:	ed96 ba02 	vldr	s22, [r6, #8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80213ac:	ee06 5a90 	vmov	s13, r5
 80213b0:	f914 5c07 	ldrsb.w	r5, [r4, #-7]
  *sum += *input_1++ * filter_2;
 80213b4:	eee4 2a2d 	vfma.f32	s5, s8, s27
  *sum++ += *input_1++ * filter_3;
 80213b8:	edd9 ba03 	vldr	s23, [r9, #12]
 80213bc:	ee09 5a10 	vmov	s18, r5
 80213c0:	f91c 5c07 	ldrsb.w	r5, [ip, #-7]
  *sum++ += *input_0++ * filter_3;
 80213c4:	eea9 2a8d 	vfma.f32	s4, s19, s26
  *sum++ += *input_2++ * filter_3;
 80213c8:	edd7 aa03 	vldr	s21, [r7, #12]
 80213cc:	ee00 5a10 	vmov	s0, r5
 80213d0:	f918 5c07 	ldrsb.w	r5, [r8, #-7]
 80213d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum++ += *input_3++ * filter_3;
 80213d8:	ed96 aa03 	vldr	s20, [r6, #12]
 80213dc:	ee00 5a90 	vmov	s1, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80213e0:	f91e 5c06 	ldrsb.w	r5, [lr, #-6]
  *sum += *input_2++ * filter_2;
 80213e4:	eea4 3a0c 	vfma.f32	s6, s8, s24
 80213e8:	f914 bc06 	ldrsb.w	fp, [r4, #-6]
 80213ec:	9502      	str	r5, [sp, #8]
  *sum += *input_3++ * filter_2;
 80213ee:	eee4 4a0b 	vfma.f32	s9, s8, s22
 80213f2:	f91c 5c06 	ldrsb.w	r5, [ip, #-6]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80213f6:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  *sum += *input_0++ * filter_1;
 80213fa:	ee66 3a85 	vmul.f32	s7, s13, s10
    *out_0++ += sum[7];
}

static inline void assign_sum_to_pointwise_output_4row4col(float* out_0, float* out_1, float* out_2, float* out_3, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80213fe:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021402:	9503      	str	r5, [sp, #12]
  *sum++ += *input_1++ * filter_3;
 8021404:	eee9 2aab 	vfma.f32	s5, s19, s23
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021408:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 802140c:	fe82 2a68 	vminnm.f32	s4, s4, s17
 8021410:	f918 5c06 	ldrsb.w	r5, [r8, #-6]
  *sum += *input_0++ * filter_1;
 8021414:	eee9 3a2f 	vfma.f32	s7, s18, s31
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021418:	ee37 2a02 	vadd.f32	s4, s14, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802141c:	f91c ac05 	ldrsb.w	sl, [ip, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021420:	9504      	str	r5, [sp, #16]
  *sum++ += *input_2++ * filter_3;
 8021422:	eea9 3aaa 	vfma.f32	s6, s19, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021426:	f914 5c05 	ldrsb.w	r5, [r4, #-5]
 802142a:	ee01 aa10 	vmov	s2, sl
  *sum++ += *input_3++ * filter_3;
 802142e:	eee9 4a8a 	vfma.f32	s9, s19, s20
 8021432:	f918 ac05 	ldrsb.w	sl, [r8, #-5]
 8021436:	9505      	str	r5, [sp, #20]
  *sum += *input_1++ * filter_1;
 8021438:	ee26 4aa5 	vmul.f32	s8, s13, s11
 802143c:	f91e 5c05 	ldrsb.w	r5, [lr, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021440:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021444:	ed03 2a08 	vstr	s4, [r3, #-32]	; 0xffffffe0
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021448:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
 802144c:	ed52 9a04 	vldr	s19, [r2, #-16]
 8021450:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum += *input_1++ * filter_1;
 8021454:	eea9 4a0f 	vfma.f32	s8, s18, s30
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021458:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 802145c:	ee79 2aa2 	vadd.f32	s5, s19, s5
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021460:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_2++ * filter_1;
 8021464:	ee26 2a86 	vmul.f32	s4, s13, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021468:	ed9d 7a02 	vldr	s14, [sp, #8]
  *sum += *input_0++ * filter_2;
 802146c:	eee0 3a2e 	vfma.f32	s7, s0, s29
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021470:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021474:	ed42 2a04 	vstr	s5, [r2, #-16]
  *sum += *input_3++ * filter_1;
 8021478:	ee66 6aa7 	vmul.f32	s13, s13, s15
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 802147c:	ed51 2a04 	vldr	s5, [r1, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021480:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  *sum += *input_2++ * filter_1;
 8021484:	eea9 2a0e 	vfma.f32	s4, s18, s28
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021488:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 802148c:	ee32 3a83 	vadd.f32	s6, s5, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021490:	ee02 ba90 	vmov	s5, fp
  *sum += *input_3++ * filter_1;
 8021494:	eee9 6a2c 	vfma.f32	s13, s18, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021498:	ee01 aa90 	vmov	s3, sl
  *sum += *input_1++ * filter_2;
 802149c:	eea0 4a2d 	vfma.f32	s8, s0, s27
 80214a0:	3210      	adds	r2, #16
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 80214a2:	ed01 3a04 	vstr	s6, [r1, #-16]
  *sum++ += *input_0++ * filter_3;
 80214a6:	eee0 3a8d 	vfma.f32	s7, s1, s26
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80214aa:	ed10 3a04 	vldr	s6, [r0, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80214ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_2++ * filter_2;
 80214b2:	eea0 2a0c 	vfma.f32	s4, s0, s24
 80214b6:	3110      	adds	r1, #16
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80214b8:	ee73 4a24 	vadd.f32	s9, s6, s9
 80214bc:	3010      	adds	r0, #16
  *sum += *input_3++ * filter_2;
 80214be:	eee0 6a0b 	vfma.f32	s13, s0, s22
 80214c2:	eef8 2ae2 	vcvt.f32.s32	s5, s5
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 80214c6:	ed40 4a08 	vstr	s9, [r0, #-32]	; 0xffffffe0
  *sum += *input_0++ * filter_1;
 80214ca:	ee27 3a05 	vmul.f32	s6, s14, s10
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80214ce:	ed13 0a07 	vldr	s0, [r3, #-28]	; 0xffffffe4
  *sum++ += *input_1++ * filter_3;
 80214d2:	eea0 4aab 	vfma.f32	s8, s1, s23
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80214d6:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 80214da:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 80214de:	ee70 3a23 	vadd.f32	s7, s0, s7
 80214e2:	ed9d 0a03 	vldr	s0, [sp, #12]
  *sum += *input_0++ * filter_1;
 80214e6:	eea2 3aaf 	vfma.f32	s6, s5, s31
  *sum++ += *input_2++ * filter_3;
 80214ea:	eea0 2aaa 	vfma.f32	s4, s1, s21
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80214ee:	ed43 3a07 	vstr	s7, [r3, #-28]	; 0xffffffe4
  *sum++ += *input_3++ * filter_3;
 80214f2:	eee0 6a8a 	vfma.f32	s13, s1, s20
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80214f6:	ed52 0a07 	vldr	s1, [r2, #-28]	; 0xffffffe4
  *sum += *input_1++ * filter_1;
 80214fa:	ee67 4a25 	vmul.f32	s9, s14, s11
 80214fe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 8021502:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
 8021506:	fe84 4a68 	vminnm.f32	s8, s8, s17
 802150a:	ee30 4a84 	vadd.f32	s8, s1, s8
  *sum += *input_1++ * filter_1;
 802150e:	eee2 4a8f 	vfma.f32	s9, s5, s30
 8021512:	eddd 0a04 	vldr	s1, [sp, #16]
  *sum += *input_2++ * filter_1;
 8021516:	ee67 3a06 	vmul.f32	s7, s14, s12
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802151a:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 802151e:	ed02 4a07 	vstr	s8, [r2, #-28]	; 0xffffffe4
  *sum += *input_3++ * filter_1;
 8021522:	ee27 7a27 	vmul.f32	s14, s14, s15
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8021526:	ed11 4a07 	vldr	s8, [r1, #-28]	; 0xffffffe4
  *sum += *input_0++ * filter_2;
 802152a:	eea0 3a2e 	vfma.f32	s6, s0, s29
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802152e:	fe82 2a68 	vminnm.f32	s4, s4, s17
 8021532:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021536:	ee34 2a02 	vadd.f32	s4, s8, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 802153a:	ee04 5a10 	vmov	s8, r5
  *sum += *input_3++ * filter_1;
 802153e:	eea2 7aac 	vfma.f32	s14, s5, s25
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8021542:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
 8021546:	eeb8 9ac4 	vcvt.f32.s32	s18, s8
 802154a:	ed9d 4a05 	vldr	s8, [sp, #20]
  *sum += *input_2++ * filter_1;
 802154e:	eee2 3a8e 	vfma.f32	s7, s5, s28
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 8021552:	ed01 2a07 	vstr	s4, [r1, #-28]	; 0xffffffe4
  *sum += *input_1++ * filter_2;
 8021556:	eee0 4a2d 	vfma.f32	s9, s0, s27
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 802155a:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
  *sum++ += *input_0++ * filter_3;
 802155e:	eea0 3a8d 	vfma.f32	s6, s1, s26
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8021562:	fec6 6ae8 	vminnm.f32	s13, s13, s17
 8021566:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 802156a:	ee72 6aa6 	vadd.f32	s13, s5, s13
  *sum += *input_0++ * filter_1;
 802156e:	ee29 5a05 	vmul.f32	s10, s18, s10
  *sum += *input_3++ * filter_2;
 8021572:	eea0 7a0b 	vfma.f32	s14, s0, s22
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8021576:	ed40 6a07 	vstr	s13, [r0, #-28]	; 0xffffffe4
  *sum += *input_2++ * filter_2;
 802157a:	eee0 3a0c 	vfma.f32	s7, s0, s24
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 802157e:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
  *sum += *input_0++ * filter_1;
 8021582:	eea4 5a2f 	vfma.f32	s10, s8, s31
  *sum++ += *input_1++ * filter_3;
 8021586:	eee0 4aab 	vfma.f32	s9, s1, s23
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 802158a:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 802158e:	fe83 3a68 	vminnm.f32	s6, s6, s17
 8021592:	ee32 3a83 	vadd.f32	s6, s5, s6
 8021596:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
  *sum++ += *input_3++ * filter_3;
 802159a:	eea0 7a8a 	vfma.f32	s14, s1, s20
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 802159e:	ed03 3a06 	vstr	s6, [r3, #-24]	; 0xffffffe8
  *sum += *input_1++ * filter_1;
 80215a2:	ee69 6a25 	vmul.f32	s13, s18, s11
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80215a6:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
  *sum += *input_0++ * filter_2;
 80215aa:	eea1 5a2e 	vfma.f32	s10, s2, s29
  *sum++ += *input_2++ * filter_3;
 80215ae:	eee0 3aaa 	vfma.f32	s7, s1, s21
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80215b2:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
 80215b6:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 80215ba:	ee73 4a24 	vadd.f32	s9, s6, s9
  *sum += *input_1++ * filter_1;
 80215be:	eee4 6a0f 	vfma.f32	s13, s8, s30
  *sum++ += *input_3++ * filter_3;
 80215c2:	eef0 5a47 	vmov.f32	s11, s14
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 80215c6:	ed42 4a06 	vstr	s9, [r2, #-24]	; 0xffffffe8
  *sum += *input_2++ * filter_1;
 80215ca:	ee29 7a06 	vmul.f32	s14, s18, s12
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 80215ce:	ed51 4a06 	vldr	s9, [r1, #-24]	; 0xffffffe8
  *sum++ += *input_0++ * filter_3;
 80215d2:	eeb0 6a45 	vmov.f32	s12, s10
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 80215d6:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 80215da:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 80215de:	ee34 5aa3 	vadd.f32	s10, s9, s7
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80215e2:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
 80215e6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80215ea:	fec5 5ae8 	vminnm.f32	s11, s11, s17
  *sum += *input_2++ * filter_1;
 80215ee:	eea4 7a0e 	vfma.f32	s14, s8, s28
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 80215f2:	ed01 5a06 	vstr	s10, [r1, #-24]	; 0xffffffe8
  *sum += *input_1++ * filter_2;
 80215f6:	eee1 6a2d 	vfma.f32	s13, s2, s27
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80215fa:	ed10 5a06 	vldr	s10, [r0, #-24]	; 0xffffffe8
  *sum++ += *input_0++ * filter_3;
 80215fe:	eea1 6a8d 	vfma.f32	s12, s3, s26
  *sum += *input_3++ * filter_1;
 8021602:	ee69 7a27 	vmul.f32	s15, s18, s15
      while (col_count_div4--) {
 8021606:	9d06      	ldr	r5, [sp, #24]
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 8021608:	ee75 5a25 	vadd.f32	s11, s10, s11
 802160c:	42a5      	cmp	r5, r4
  *sum += *input_3++ * filter_1;
 802160e:	eee4 7a2c 	vfma.f32	s15, s8, s25
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 8021612:	ed40 5a06 	vstr	s11, [r0, #-24]	; 0xffffffe8
  *sum += *input_2++ * filter_2;
 8021616:	eea1 7a0c 	vfma.f32	s14, s2, s24
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 802161a:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
  *sum++ += *input_1++ * filter_3;
 802161e:	eee1 6aab 	vfma.f32	s13, s3, s23
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8021622:	fe86 6a08 	vmaxnm.f32	s12, s12, s16
 8021626:	fe86 6a68 	vminnm.f32	s12, s12, s17
 802162a:	ee35 6a86 	vadd.f32	s12, s11, s12
  *sum += *input_3++ * filter_2;
 802162e:	eee1 7a0b 	vfma.f32	s15, s2, s22
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 8021632:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
  *sum++ += *input_2++ * filter_3;
 8021636:	eea1 7aaa 	vfma.f32	s14, s3, s21
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 802163a:	ed12 6a05 	vldr	s12, [r2, #-20]	; 0xffffffec
 802163e:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
 8021642:	fec6 6ae8 	vminnm.f32	s13, s13, s17
 8021646:	ee76 6a26 	vadd.f32	s13, s12, s13
  *sum++ += *input_3++ * filter_3;
 802164a:	eee1 7a8a 	vfma.f32	s15, s3, s20
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 802164e:	ed42 6a05 	vstr	s13, [r2, #-20]	; 0xffffffec
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8021652:	fe87 7a08 	vmaxnm.f32	s14, s14, s16
 8021656:	ed51 6a05 	vldr	s13, [r1, #-20]	; 0xffffffec
 802165a:	fe87 7a68 	vminnm.f32	s14, s14, s17
 802165e:	ee36 7a87 	vadd.f32	s14, s13, s14
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 8021662:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
 8021666:	fec7 7ae8 	vminnm.f32	s15, s15, s17
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 802166a:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 802166e:	ed10 7a05 	vldr	s14, [r0, #-20]	; 0xffffffec
 8021672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021676:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 802167a:	f47f ae45 	bne.w	8021308 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x18c>
 802167e:	9d01      	ldr	r5, [sp, #4]
 8021680:	9602      	str	r6, [sp, #8]
 8021682:	e9dd 100f 	ldrd	r1, r0, [sp, #60]	; 0x3c
 8021686:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
      while (col_count_div4--) {
 802168a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802168c:	2c00      	cmp	r4, #0
 802168e:	f000 81d4 	beq.w	8021a3a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x8be>
 8021692:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8021694:	f103 0810 	add.w	r8, r3, #16
 8021698:	9c07      	ldr	r4, [sp, #28]
 802169a:	3010      	adds	r0, #16
 802169c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802169e:	3110      	adds	r1, #16
 80216a0:	eb06 0b04 	add.w	fp, r6, r4
 80216a4:	9c07      	ldr	r4, [sp, #28]
 80216a6:	469c      	mov	ip, r3
 80216a8:	3210      	adds	r2, #16
 80216aa:	eb06 0a0b 	add.w	sl, r6, fp
 80216ae:	4643      	mov	r3, r8
 80216b0:	eb0c 0e04 	add.w	lr, ip, r4
 80216b4:	9501      	str	r5, [sp, #4]
 80216b6:	eb06 0c0a 	add.w	ip, r6, sl
 80216ba:	9e02      	ldr	r6, [sp, #8]
 80216bc:	f8cd e018 	str.w	lr, [sp, #24]
        /* Initialize partial sum (assume bias == NULL) */
        float sum[16] = {};

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80216c0:	f91b 5c04 	ldrsb.w	r5, [fp, #-4]
 80216c4:	3404      	adds	r4, #4
  *sum += *input_1++ * filter_1;
 80216c6:	edd9 5a01 	vldr	s11, [r9, #4]
 80216ca:	f10b 0b04 	add.w	fp, fp, #4
 80216ce:	ee04 5a90 	vmov	s9, r5
  *sum += *input_0++ * filter_1;
 80216d2:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_1++ * filter_0;
 80216d4:	ed99 fa00 	vldr	s30, [r9]
 80216d8:	f10a 0a04 	add.w	sl, sl, #4
  *sum += *input_0++ * filter_1;
 80216dc:	ed95 5a01 	vldr	s10, [r5, #4]
 80216e0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80216e4:	f914 5c08 	ldrsb.w	r5, [r4, #-8]
 80216e8:	f10c 0c04 	add.w	ip, ip, #4
  *sum += *input_2++ * filter_1;
 80216ec:	ed97 6a01 	vldr	s12, [r7, #4]
 80216f0:	3010      	adds	r0, #16
 80216f2:	ee07 5a10 	vmov	s14, r5
  *sum += *input_0++ * filter_0;
 80216f6:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_0++ * filter_1;
 80216f8:	ee24 2a85 	vmul.f32	s4, s9, s10
  *sum += *input_3++ * filter_1;
 80216fc:	edd6 7a01 	vldr	s15, [r6, #4]
  *sum += *input_0++ * filter_0;
 8021700:	edd5 fa00 	vldr	s31, [r5]
 8021704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021708:	f91a 5c08 	ldrsb.w	r5, [sl, #-8]
  *sum += *input_1++ * filter_1;
 802170c:	ee64 2aa5 	vmul.f32	s5, s9, s11
  *sum += *input_2++ * filter_1;
 8021710:	ee24 3a86 	vmul.f32	s6, s9, s12
  *sum += *input_2++ * filter_0;
 8021714:	ed97 ea00 	vldr	s28, [r7]
 8021718:	ee04 5a10 	vmov	s8, r5
  *sum += *input_0++ * filter_2;
 802171c:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_0++ * filter_1;
 802171e:	eea7 2a2f 	vfma.f32	s4, s14, s31
  *sum += *input_3++ * filter_0;
 8021722:	edd6 ca00 	vldr	s25, [r6]
  *sum += *input_0++ * filter_2;
 8021726:	edd5 ea02 	vldr	s29, [r5, #8]
 802172a:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 802172e:	f91c 5c08 	ldrsb.w	r5, [ip, #-8]
  *sum += *input_1++ * filter_1;
 8021732:	eee7 2a0f 	vfma.f32	s5, s14, s30
  *sum += *input_3++ * filter_1;
 8021736:	ee64 4aa7 	vmul.f32	s9, s9, s15
  *sum += *input_1++ * filter_2;
 802173a:	edd9 da02 	vldr	s27, [r9, #8]
 802173e:	ee09 5a90 	vmov	s19, r5
  *sum++ += *input_0++ * filter_3;
 8021742:	9d01      	ldr	r5, [sp, #4]
  *sum += *input_2++ * filter_1;
 8021744:	eea7 3a0e 	vfma.f32	s6, s14, s28
  *sum += *input_2++ * filter_2;
 8021748:	ed97 ca02 	vldr	s24, [r7, #8]
  *sum++ += *input_0++ * filter_3;
 802174c:	ed95 da03 	vldr	s26, [r5, #12]
  *sum += *input_0++ * filter_2;
 8021750:	eea4 2a2e 	vfma.f32	s4, s8, s29
        mac_4row_4col_fp_IOHW_forint8w(&sum[0], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021754:	f91b 5c07 	ldrsb.w	r5, [fp, #-7]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021758:	eef8 9ae9 	vcvt.f32.s32	s19, s19
  *sum += *input_3++ * filter_1;
 802175c:	eee7 4a2c 	vfma.f32	s9, s14, s25
  *sum += *input_3++ * filter_2;
 8021760:	ed96 ba02 	vldr	s22, [r6, #8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021764:	ee06 5a90 	vmov	s13, r5
 8021768:	f914 5c07 	ldrsb.w	r5, [r4, #-7]
  *sum += *input_1++ * filter_2;
 802176c:	eee4 2a2d 	vfma.f32	s5, s8, s27
  *sum++ += *input_1++ * filter_3;
 8021770:	edd9 ba03 	vldr	s23, [r9, #12]
 8021774:	ee09 5a10 	vmov	s18, r5
 8021778:	f91a 5c07 	ldrsb.w	r5, [sl, #-7]
  *sum++ += *input_0++ * filter_3;
 802177c:	eea9 2a8d 	vfma.f32	s4, s19, s26
  *sum++ += *input_2++ * filter_3;
 8021780:	edd7 aa03 	vldr	s21, [r7, #12]
 8021784:	ee00 5a10 	vmov	s0, r5
 8021788:	f91c 5c07 	ldrsb.w	r5, [ip, #-7]
 802178c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  *sum++ += *input_3++ * filter_3;
 8021790:	ed96 aa03 	vldr	s20, [r6, #12]
 8021794:	ee00 5a90 	vmov	s1, r5
        mac_4row_4col_fp_IOHW_forint8w(&sum[4], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021798:	f91b 5c06 	ldrsb.w	r5, [fp, #-6]
  *sum += *input_2++ * filter_2;
 802179c:	eea4 3a0c 	vfma.f32	s6, s8, s24
 80217a0:	f914 8c06 	ldrsb.w	r8, [r4, #-6]
 80217a4:	9502      	str	r5, [sp, #8]
  *sum += *input_3++ * filter_2;
 80217a6:	eee4 4a0b 	vfma.f32	s9, s8, s22
 80217aa:	f91a 5c06 	ldrsb.w	r5, [sl, #-6]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80217ae:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  *sum += *input_0++ * filter_1;
 80217b2:	ee66 3a85 	vmul.f32	s7, s13, s10
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80217b6:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80217ba:	9503      	str	r5, [sp, #12]
  *sum++ += *input_1++ * filter_3;
 80217bc:	eee9 2aab 	vfma.f32	s5, s19, s23
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80217c0:	ed10 7a08 	vldr	s14, [r0, #-32]	; 0xffffffe0
 80217c4:	fe82 2a68 	vminnm.f32	s4, s4, s17
 80217c8:	f91c 5c06 	ldrsb.w	r5, [ip, #-6]
  *sum += *input_0++ * filter_1;
 80217cc:	eee9 3a2f 	vfma.f32	s7, s18, s31
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80217d0:	ee37 2a02 	vadd.f32	s4, s14, s4
        mac_4row_4col_fp_IOHW_forint8w(&sum[8], input_0, input_1, input_2, input_3, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80217d4:	f91a ec05 	ldrsb.w	lr, [sl, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80217d8:	9504      	str	r5, [sp, #16]
  *sum++ += *input_2++ * filter_3;
 80217da:	eea9 3aaa 	vfma.f32	s6, s19, s21
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80217de:	f914 5c05 	ldrsb.w	r5, [r4, #-5]
 80217e2:	ee01 ea10 	vmov	s2, lr
  *sum++ += *input_3++ * filter_3;
 80217e6:	eee9 4a8a 	vfma.f32	s9, s19, s20
 80217ea:	f91c ec05 	ldrsb.w	lr, [ip, #-5]
 80217ee:	9505      	str	r5, [sp, #20]
  *sum += *input_1++ * filter_1;
 80217f0:	ee26 4aa5 	vmul.f32	s8, s13, s11
 80217f4:	f91b 5c05 	ldrsb.w	r5, [fp, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80217f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 80217fc:	ed00 2a08 	vstr	s4, [r0, #-32]	; 0xffffffe0
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021800:	fec2 2a88 	vmaxnm.f32	s5, s5, s16
 8021804:	ed51 9a04 	vldr	s19, [r1, #-16]
 8021808:	fec2 2ae8 	vminnm.f32	s5, s5, s17
  *sum += *input_1++ * filter_1;
 802180c:	eea9 4a0f 	vfma.f32	s8, s18, s30
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021810:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021814:	ee79 2aa2 	vadd.f32	s5, s19, s5
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021818:	fe83 3a68 	vminnm.f32	s6, s6, s17
  *sum += *input_2++ * filter_1;
 802181c:	ee26 2a86 	vmul.f32	s4, s13, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021820:	ed9d 7a02 	vldr	s14, [sp, #8]
  *sum += *input_0++ * filter_2;
 8021824:	eee0 3a2e 	vfma.f32	s7, s0, s29
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021828:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
    *out_1++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 802182c:	ed41 2a04 	vstr	s5, [r1, #-16]
  *sum += *input_3++ * filter_1;
 8021830:	ee66 6aa7 	vmul.f32	s13, s13, s15
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021834:	ed52 2a04 	vldr	s5, [r2, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021838:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  *sum += *input_2++ * filter_1;
 802183c:	eea9 2a0e 	vfma.f32	s4, s18, s28
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021840:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021844:	ee32 3a83 	vadd.f32	s6, s5, s6
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021848:	ee02 8a90 	vmov	s5, r8
  *sum += *input_3++ * filter_1;
 802184c:	eee9 6a2c 	vfma.f32	s13, s18, s25
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021850:	ee01 ea90 	vmov	s3, lr
  *sum += *input_1++ * filter_2;
 8021854:	eea0 4a2d 	vfma.f32	s8, s0, s27
 8021858:	3110      	adds	r1, #16
    *out_2++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 802185a:	ed02 3a04 	vstr	s6, [r2, #-16]
  *sum++ += *input_0++ * filter_3;
 802185e:	eee0 3a8d 	vfma.f32	s7, s1, s26
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021862:	ed13 3a04 	vldr	s6, [r3, #-16]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021866:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *sum += *input_2++ * filter_2;
 802186a:	eea0 2a0c 	vfma.f32	s4, s0, s24
 802186e:	3210      	adds	r2, #16
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021870:	ee73 4a24 	vadd.f32	s9, s6, s9
 8021874:	3310      	adds	r3, #16
  *sum += *input_3++ * filter_2;
 8021876:	eee0 6a0b 	vfma.f32	s13, s0, s22
 802187a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
    *out_3++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 802187e:	ed43 4a08 	vstr	s9, [r3, #-32]	; 0xffffffe0
  *sum += *input_0++ * filter_1;
 8021882:	ee27 3a05 	vmul.f32	s6, s14, s10
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 8021886:	ed10 0a07 	vldr	s0, [r0, #-28]	; 0xffffffe4
  *sum++ += *input_1++ * filter_3;
 802188a:	eea0 4aab 	vfma.f32	s8, s1, s23
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 802188e:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 8021892:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 8021896:	ee70 3a23 	vadd.f32	s7, s0, s7
 802189a:	ed9d 0a03 	vldr	s0, [sp, #12]
  *sum += *input_0++ * filter_1;
 802189e:	eea2 3aaf 	vfma.f32	s6, s5, s31
  *sum++ += *input_2++ * filter_3;
 80218a2:	eea0 2aaa 	vfma.f32	s4, s1, s21
    *out_0++ += TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max);
 80218a6:	ed40 3a07 	vstr	s7, [r0, #-28]	; 0xffffffe4
  *sum++ += *input_3++ * filter_3;
 80218aa:	eee0 6a8a 	vfma.f32	s13, s1, s20
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80218ae:	ed51 0a07 	vldr	s1, [r1, #-28]	; 0xffffffe4
  *sum += *input_1++ * filter_1;
 80218b2:	ee67 4a25 	vmul.f32	s9, s14, s11
 80218b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80218ba:	fe84 4a08 	vmaxnm.f32	s8, s8, s16
 80218be:	fe84 4a68 	vminnm.f32	s8, s8, s17
 80218c2:	ee30 4a84 	vadd.f32	s8, s1, s8
  *sum += *input_1++ * filter_1;
 80218c6:	eee2 4a8f 	vfma.f32	s9, s5, s30
 80218ca:	eddd 0a04 	vldr	s1, [sp, #16]
  *sum += *input_2++ * filter_1;
 80218ce:	ee67 3a06 	vmul.f32	s7, s14, s12
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80218d2:	fe82 2a08 	vmaxnm.f32	s4, s4, s16
    *out_1++ += TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max);
 80218d6:	ed01 4a07 	vstr	s8, [r1, #-28]	; 0xffffffe4
  *sum += *input_3++ * filter_1;
 80218da:	ee27 7a27 	vmul.f32	s14, s14, s15
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80218de:	ed12 4a07 	vldr	s8, [r2, #-28]	; 0xffffffe4
  *sum += *input_0++ * filter_2;
 80218e2:	eea0 3a2e 	vfma.f32	s6, s0, s29
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 80218e6:	fe82 2a68 	vminnm.f32	s4, s4, s17
 80218ea:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80218ee:	ee34 2a02 	vadd.f32	s4, s8, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 80218f2:	ee04 5a10 	vmov	s8, r5
  *sum += *input_3++ * filter_1;
 80218f6:	eea2 7aac 	vfma.f32	s14, s5, s25
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 80218fa:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
 80218fe:	eeb8 9ac4 	vcvt.f32.s32	s18, s8
 8021902:	ed9d 4a05 	vldr	s8, [sp, #20]
  *sum += *input_2++ * filter_1;
 8021906:	eee2 3a8e 	vfma.f32	s7, s5, s28
    *out_2++ += TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max);
 802190a:	ed02 2a07 	vstr	s4, [r2, #-28]	; 0xffffffe4
  *sum += *input_1++ * filter_2;
 802190e:	eee0 4a2d 	vfma.f32	s9, s0, s27
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 8021912:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
  *sum++ += *input_0++ * filter_3;
 8021916:	eea0 3a8d 	vfma.f32	s6, s1, s26
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 802191a:	fec6 6ae8 	vminnm.f32	s13, s13, s17
 802191e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8021922:	ee72 6aa6 	vadd.f32	s13, s5, s13
  *sum += *input_0++ * filter_1;
 8021926:	ee29 5a05 	vmul.f32	s10, s18, s10
  *sum += *input_3++ * filter_2;
 802192a:	eea0 7a0b 	vfma.f32	s14, s0, s22
    *out_3++ += TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max);
 802192e:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
  *sum += *input_2++ * filter_2;
 8021932:	eee0 3a0c 	vfma.f32	s7, s0, s24
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8021936:	ed50 2a06 	vldr	s5, [r0, #-24]	; 0xffffffe8
  *sum += *input_0++ * filter_1;
 802193a:	eea4 5a2f 	vfma.f32	s10, s8, s31
  *sum++ += *input_1++ * filter_3;
 802193e:	eee0 4aab 	vfma.f32	s9, s1, s23
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8021942:	fe83 3a08 	vmaxnm.f32	s6, s6, s16
 8021946:	fe83 3a68 	vminnm.f32	s6, s6, s17
 802194a:	ee32 3a83 	vadd.f32	s6, s5, s6
 802194e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
  *sum++ += *input_3++ * filter_3;
 8021952:	eea0 7a8a 	vfma.f32	s14, s1, s20
    *out_0++ += TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max);
 8021956:	ed00 3a06 	vstr	s6, [r0, #-24]	; 0xffffffe8
  *sum += *input_1++ * filter_1;
 802195a:	ee69 6a25 	vmul.f32	s13, s18, s11
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 802195e:	ed11 3a06 	vldr	s6, [r1, #-24]	; 0xffffffe8
  *sum += *input_0++ * filter_2;
 8021962:	eea1 5a2e 	vfma.f32	s10, s2, s29
  *sum++ += *input_2++ * filter_3;
 8021966:	eee0 3aaa 	vfma.f32	s7, s1, s21
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 802196a:	fec4 4a88 	vmaxnm.f32	s9, s9, s16
 802196e:	fec4 4ae8 	vminnm.f32	s9, s9, s17
 8021972:	ee73 4a24 	vadd.f32	s9, s6, s9
  *sum += *input_1++ * filter_1;
 8021976:	eee4 6a0f 	vfma.f32	s13, s8, s30
  *sum++ += *input_3++ * filter_3;
 802197a:	eef0 5a47 	vmov.f32	s11, s14
    *out_1++ += TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max);
 802197e:	ed41 4a06 	vstr	s9, [r1, #-24]	; 0xffffffe8
  *sum += *input_2++ * filter_1;
 8021982:	ee29 7a06 	vmul.f32	s14, s18, s12
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 8021986:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
  *sum++ += *input_0++ * filter_3;
 802198a:	eeb0 6a45 	vmov.f32	s12, s10
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 802198e:	fec3 3a88 	vmaxnm.f32	s7, s7, s16
 8021992:	fec3 3ae8 	vminnm.f32	s7, s7, s17
 8021996:	ee34 5aa3 	vadd.f32	s10, s9, s7
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 802199a:	fec5 5a88 	vmaxnm.f32	s11, s11, s16
 802199e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80219a2:	fec5 5ae8 	vminnm.f32	s11, s11, s17
  *sum += *input_2++ * filter_1;
 80219a6:	eea4 7a0e 	vfma.f32	s14, s8, s28
    *out_2++ += TN_MIN(TN_MAX(sum[10], output_activation_min), output_activation_max);
 80219aa:	ed02 5a06 	vstr	s10, [r2, #-24]	; 0xffffffe8
  *sum += *input_1++ * filter_2;
 80219ae:	eee1 6a2d 	vfma.f32	s13, s2, s27
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80219b2:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
  *sum++ += *input_0++ * filter_3;
 80219b6:	eea1 6a8d 	vfma.f32	s12, s3, s26
  *sum += *input_3++ * filter_1;
 80219ba:	ee69 7a27 	vmul.f32	s15, s18, s15
      while (col_count_div4--) {
 80219be:	9d06      	ldr	r5, [sp, #24]
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80219c0:	ee75 5a25 	vadd.f32	s11, s10, s11
 80219c4:	42a5      	cmp	r5, r4
  *sum += *input_3++ * filter_1;
 80219c6:	eee4 7a2c 	vfma.f32	s15, s8, s25
    *out_3++ += TN_MIN(TN_MAX(sum[11], output_activation_min), output_activation_max);
 80219ca:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
  *sum += *input_2++ * filter_2;
 80219ce:	eea1 7a0c 	vfma.f32	s14, s2, s24
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 80219d2:	ed50 5a05 	vldr	s11, [r0, #-20]	; 0xffffffec
  *sum++ += *input_1++ * filter_3;
 80219d6:	eee1 6aab 	vfma.f32	s13, s3, s23
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 80219da:	fe86 6a08 	vmaxnm.f32	s12, s12, s16
 80219de:	fe86 6a68 	vminnm.f32	s12, s12, s17
 80219e2:	ee35 6a86 	vadd.f32	s12, s11, s12
  *sum += *input_3++ * filter_2;
 80219e6:	eee1 7a0b 	vfma.f32	s15, s2, s22
    *out_0++ += TN_MIN(TN_MAX(sum[12], output_activation_min), output_activation_max);
 80219ea:	ed00 6a05 	vstr	s12, [r0, #-20]	; 0xffffffec
  *sum++ += *input_2++ * filter_3;
 80219ee:	eea1 7aaa 	vfma.f32	s14, s3, s21
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 80219f2:	ed11 6a05 	vldr	s12, [r1, #-20]	; 0xffffffec
 80219f6:	fec6 6a88 	vmaxnm.f32	s13, s13, s16
 80219fa:	fec6 6ae8 	vminnm.f32	s13, s13, s17
 80219fe:	ee76 6a26 	vadd.f32	s13, s12, s13
  *sum++ += *input_3++ * filter_3;
 8021a02:	eee1 7a8a 	vfma.f32	s15, s3, s20
    *out_1++ += TN_MIN(TN_MAX(sum[13], output_activation_min), output_activation_max);
 8021a06:	ed41 6a05 	vstr	s13, [r1, #-20]	; 0xffffffec
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8021a0a:	fe87 7a08 	vmaxnm.f32	s14, s14, s16
 8021a0e:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 8021a12:	fe87 7a68 	vminnm.f32	s14, s14, s17
 8021a16:	ee36 7a87 	vadd.f32	s14, s13, s14
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 8021a1a:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
 8021a1e:	fec7 7ae8 	vminnm.f32	s15, s15, s17
    *out_2++ += TN_MIN(TN_MAX(sum[14], output_activation_min), output_activation_max);
 8021a22:	ed02 7a05 	vstr	s14, [r2, #-20]	; 0xffffffec
    *out_3++ += TN_MIN(TN_MAX(sum[15], output_activation_min), output_activation_max);
 8021a26:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8021a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021a2e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8021a32:	f47f ae45 	bne.w	80216c0 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x544>
 8021a36:	9d01      	ldr	r5, [sp, #4]
 8021a38:	9602      	str	r6, [sp, #8]
 8021a3a:	9b07      	ldr	r3, [sp, #28]
 8021a3c:	3510      	adds	r5, #16
 8021a3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021a40:	f109 0910 	add.w	r9, r9, #16
 8021a44:	3710      	adds	r7, #16
 8021a46:	4413      	add	r3, r2
 8021a48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021a4a:	9307      	str	r3, [sp, #28]
 8021a4c:	9b02      	ldr	r3, [sp, #8]
 8021a4e:	3310      	adds	r3, #16
 8021a50:	9302      	str	r3, [sp, #8]
 8021a52:	9b08      	ldr	r3, [sp, #32]
 8021a54:	4413      	add	r3, r2
 8021a56:	9308      	str	r3, [sp, #32]
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 8021a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021a5a:	42ab      	cmp	r3, r5
 8021a5c:	f47f ac3c 	bne.w	80212d8 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x15c>
 8021a60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021a62:	981c      	ldr	r0, [sp, #112]	; 0x70
 8021a64:	461a      	mov	r2, r3
 8021a66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 8021a68:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8021a6a:	4402      	add	r2, r0
 8021a6c:	3104      	adds	r1, #4
 8021a6e:	921a      	str	r2, [sp, #104]	; 0x68
 8021a70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021a72:	911b      	str	r1, [sp, #108]	; 0x6c
 8021a74:	4614      	mov	r4, r2
 8021a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a78:	441c      	add	r4, r3
 8021a7a:	9410      	str	r4, [sp, #64]	; 0x40
 8021a7c:	4614      	mov	r4, r2
 8021a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a80:	441c      	add	r4, r3
 8021a82:	940f      	str	r4, [sp, #60]	; 0x3c
 8021a84:	4614      	mov	r4, r2
 8021a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021a88:	441c      	add	r4, r3
 8021a8a:	940e      	str	r4, [sp, #56]	; 0x38
 8021a8c:	4614      	mov	r4, r2
 8021a8e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8021a90:	441c      	add	r4, r3
 8021a92:	4402      	add	r2, r0
 8021a94:	940d      	str	r4, [sp, #52]	; 0x34
 8021a96:	4615      	mov	r5, r2
 8021a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021a9a:	4610      	mov	r0, r2
 8021a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021a9e:	4418      	add	r0, r3
 8021aa0:	900c      	str	r0, [sp, #48]	; 0x30
 8021aa2:	4610      	mov	r0, r2
 8021aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021aa6:	4418      	add	r0, r3
 8021aa8:	900b      	str	r0, [sp, #44]	; 0x2c
 8021aaa:	4610      	mov	r0, r2
 8021aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021aae:	4418      	add	r0, r3
 8021ab0:	441a      	add	r2, r3
 8021ab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021ab4:	900a      	str	r0, [sp, #40]	; 0x28
 8021ab6:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
 8021aba:	9209      	str	r2, [sp, #36]	; 0x24
 8021abc:	f73f abec 	bgt.w	8021298 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x11c>
  }

  /* Handle left-over part */
  int leftover_elements = num_elements & 0x3;

  while (leftover_elements) {
 8021ac0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021ac2:	f011 0003 	ands.w	r0, r1, #3
 8021ac6:	900a      	str	r0, [sp, #40]	; 0x28
 8021ac8:	f000 81ff 	beq.w	8021eca <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xd4e>
      const int8_t* filter_2_int8 = &filter_sram[(i_ch_in + 2) * first_k_channel];
      const int8_t* filter_3_int8 = &filter_sram[(i_ch_in + 3) * first_k_channel];
      float filter_0, filter_1, filter_2, filter_3;

      /* Compute weights in SRAM */
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 8021acc:	9d16      	ldr	r5, [sp, #88]	; 0x58
        /* Accumulate partial sum into output data */
        assign_sum_to_pointwise_output_1row4col(out_0, sum, output_activation_min, output_activation_max);
        out_0 += 4;
      }

      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 8021ace:	9b27      	ldr	r3, [sp, #156]	; 0x9c
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 8021ad0:	08aa      	lsrs	r2, r5, #2
 8021ad2:	9e25      	ldr	r6, [sp, #148]	; 0x94
      filter_0_int8 = &filter_flash[i_ch_in * (output_depth - first_k_channel)];
 8021ad4:	1b5f      	subs	r7, r3, r5
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 8021ad6:	9202      	str	r2, [sp, #8]
 8021ad8:	b292      	uxth	r2, r2
      filter_1_int8 = &filter_flash[(i_ch_in + 1) * (output_depth - first_k_channel)];
      filter_2_int8 = &filter_flash[(i_ch_in + 2) * (output_depth - first_k_channel)];
      filter_3_int8 = &filter_flash[(i_ch_in + 3) * (output_depth - first_k_channel)];

      /* Compute weights in FLASH */
      col_count_div4 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 2;
 8021ada:	f3c7 048f 	ubfx	r4, r7, #2, #16
      uint16_t col_count_div4 = (first_k_channel * DIM_KER_X * DIM_KER_Y) >> 2;
 8021ade:	920b      	str	r2, [sp, #44]	; 0x2c
      while (col_count_div4--) {
 8021ae0:	3a01      	subs	r2, #1
      col_count_div4 = ((output_depth - first_k_channel) * DIM_KER_X * DIM_KER_Y) >> 2;
 8021ae2:	9403      	str	r4, [sp, #12]
      while (col_count_div4--) {
 8021ae4:	3c01      	subs	r4, #1
      while (col_count_div4--) {
 8021ae6:	b292      	uxth	r2, r2
      while (col_count_div4--) {
 8021ae8:	b2a4      	uxth	r4, r4
 8021aea:	2e00      	cmp	r6, #0
 8021aec:	f000 81ed 	beq.w	8021eca <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xd4e>
 8021af0:	00a4      	lsls	r4, r4, #2
 8021af2:	1a08      	subs	r0, r1, r0
 8021af4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8021af6:	1e73      	subs	r3, r6, #1
 8021af8:	3404      	adds	r4, #4
 8021afa:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8021afe:	fb00 f801 	mul.w	r8, r0, r1
 8021b02:	0089      	lsls	r1, r1, #2
 8021b04:	fb00 f006 	mul.w	r0, r0, r6
 8021b08:	f023 0303 	bic.w	r3, r3, #3
 8021b0c:	9407      	str	r4, [sp, #28]
 8021b0e:	4634      	mov	r4, r6
 8021b10:	9e47      	ldr	r6, [sp, #284]	; 0x11c
 8021b12:	f108 0804 	add.w	r8, r8, #4
 8021b16:	910d      	str	r1, [sp, #52]	; 0x34
 8021b18:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8021b1c:	3604      	adds	r6, #4
 8021b1e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b22:	0113      	lsls	r3, r2, #4
 8021b24:	9623      	str	r6, [sp, #140]	; 0x8c
 8021b26:	9e46      	ldr	r6, [sp, #280]	; 0x118
 8021b28:	930c      	str	r3, [sp, #48]	; 0x30
 8021b2a:	00a3      	lsls	r3, r4, #2
 8021b2c:	3604      	adds	r6, #4
 8021b2e:	9009      	str	r0, [sp, #36]	; 0x24
 8021b30:	930e      	str	r3, [sp, #56]	; 0x38
 8021b32:	00ab      	lsls	r3, r5, #2
 8021b34:	9622      	str	r6, [sp, #136]	; 0x88
 8021b36:	460e      	mov	r6, r1
 8021b38:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8021b3c:	9304      	str	r3, [sp, #16]
 8021b3e:	3610      	adds	r6, #16
 8021b40:	9108      	str	r1, [sp, #32]
 8021b42:	9624      	str	r6, [sp, #144]	; 0x90
 8021b44:	9e4a      	ldr	r6, [sp, #296]	; 0x128
 8021b46:	eb06 0888 	add.w	r8, r6, r8, lsl #2
 8021b4a:	f10c 0604 	add.w	r6, ip, #4
 8021b4e:	46ac      	mov	ip, r5
 8021b50:	9606      	str	r6, [sp, #24]
 8021b52:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021b54:	f1a8 0210 	sub.w	r2, r8, #16
 8021b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b5c:	4443      	add	r3, r8
 8021b5e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021b60:	eb01 0e00 	add.w	lr, r1, r0
 8021b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021b66:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8021b68:	2900      	cmp	r1, #0
 8021b6a:	bf08      	it	eq
 8021b6c:	4613      	moveq	r3, r2
 8021b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021b70:	3310      	adds	r3, #16
 8021b72:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
  for (i_element = 0; i_element/4 < num_elements/4; i_element+=4) {
 8021b76:	9a08      	ldr	r2, [sp, #32]
 8021b78:	9305      	str	r3, [sp, #20]
      while (col_count_div4--) {
 8021b7a:	9b02      	ldr	r3, [sp, #8]
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	f000 80c6 	beq.w	8021d0e <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xb92>
 8021b82:	eb0c 0405 	add.w	r4, ip, r5
 8021b86:	9b06      	ldr	r3, [sp, #24]
 8021b88:	4629      	mov	r1, r5
 8021b8a:	9501      	str	r5, [sp, #4]
 8021b8c:	eb0c 0004 	add.w	r0, ip, r4
 8021b90:	eb03 0a05 	add.w	sl, r3, r5
 8021b94:	4643      	mov	r3, r8
 8021b96:	eb00 090c 	add.w	r9, r0, ip
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021b9a:	f914 5c03 	ldrsb.w	r5, [r4, #-3]
 8021b9e:	3104      	adds	r1, #4
  *sum += *input_0++ * filter_1;
 8021ba0:	edd2 7a01 	vldr	s15, [r2, #4]
 8021ba4:	3404      	adds	r4, #4
 8021ba6:	ee04 5a90 	vmov	s9, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021baa:	f914 5c06 	ldrsb.w	r5, [r4, #-6]
  *sum += *input_0++ * filter_0;
 8021bae:	ed92 6a00 	vldr	s12, [r2]
 8021bb2:	3004      	adds	r0, #4
 8021bb4:	ee05 5a90 	vmov	s11, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bb8:	f914 5c05 	ldrsb.w	r5, [r4, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bbc:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8021bc0:	f109 0904 	add.w	r9, r9, #4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bc4:	ee06 5a90 	vmov	s13, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bc8:	f914 5c08 	ldrsb.w	r5, [r4, #-8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bcc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8021bd0:	3310      	adds	r3, #16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bd2:	ee07 5a10 	vmov	s14, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bd6:	f911 5c07 	ldrsb.w	r5, [r1, #-7]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bde:	ee03 5a10 	vmov	s6, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021be2:	f911 5c06 	ldrsb.w	r5, [r1, #-6]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021be6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bea:	ee02 5a10 	vmov	s4, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bee:	f911 5c05 	ldrsb.w	r5, [r1, #-5]
  *sum += *input_0++ * filter_1;
 8021bf2:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8021bf6:	ee02 5a90 	vmov	s5, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bfa:	f911 5c08 	ldrsb.w	r5, [r1, #-8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021bfe:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
      while (col_count_div4--) {
 8021c02:	458a      	cmp	sl, r1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c04:	ee03 5a90 	vmov	s7, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c08:	f910 5c07 	ldrsb.w	r5, [r0, #-7]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c0c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c10:	ee04 5a10 	vmov	s8, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c14:	f910 5c06 	ldrsb.w	r5, [r0, #-6]
 8021c18:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8021c1c:	ee05 5a10 	vmov	s10, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c20:	f910 5c05 	ldrsb.w	r5, [r0, #-5]
 8021c24:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8021c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8021c2c:	ee00 5a10 	vmov	s0, r5
 8021c30:	ee67 7a27 	vmul.f32	s15, s14, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c34:	f910 5c08 	ldrsb.w	r5, [r0, #-8]
 8021c38:	eeb8 7ae3 	vcvt.f32.s32	s14, s7
  *sum += *input_0++ * filter_3;
 8021c3c:	edd2 3a03 	vldr	s7, [r2, #12]
 8021c40:	ee00 5a90 	vmov	s1, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c44:	f919 5c07 	ldrsb.w	r5, [r9, #-7]
  *sum += *input_0++ * filter_1;
 8021c48:	eee3 4a06 	vfma.f32	s9, s6, s12
  *sum += *input_0++ * filter_2;
 8021c4c:	ed92 3a02 	vldr	s6, [r2, #8]
  *sum += *input_0++ * filter_1;
 8021c50:	eee2 5a06 	vfma.f32	s11, s4, s12
 8021c54:	ee01 5a10 	vmov	s2, r5
 8021c58:	eee2 6a86 	vfma.f32	s13, s5, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c5c:	f919 5c06 	ldrsb.w	r5, [r9, #-6]
 8021c60:	eee7 7a06 	vfma.f32	s15, s14, s12
 8021c64:	ee01 5a90 	vmov	s3, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c68:	eeb8 6ac4 	vcvt.f32.s32	s12, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c6c:	f919 5c05 	ldrsb.w	r5, [r9, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c70:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c74:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}

static inline void assign_sum_to_pointwise_output_1row4col(float* out_0, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021c78:	ed13 4a07 	vldr	s8, [r3, #-28]	; 0xffffffe4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c7c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c80:	ee02 5a10 	vmov	s4, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021c84:	f919 5c08 	ldrsb.w	r5, [r9, #-8]
  *sum += *input_0++ * filter_2;
 8021c88:	eee6 4a03 	vfma.f32	s9, s12, s6
 8021c8c:	eee7 5a03 	vfma.f32	s11, s14, s6
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021c90:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
  *sum += *input_0++ * filter_2;
 8021c94:	eee0 6a03 	vfma.f32	s13, s0, s6
 8021c98:	ee02 5a90 	vmov	s5, r5
 8021c9c:	eee0 7a83 	vfma.f32	s15, s1, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021ca0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021ca4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021ca8:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021cac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021cb0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021cb4:	eeb8 3ae2 	vcvt.f32.s32	s6, s5
  *sum += *input_0++ * filter_3;
 8021cb8:	eee1 4a23 	vfma.f32	s9, s2, s7
 8021cbc:	eee1 5aa3 	vfma.f32	s11, s3, s7
 8021cc0:	eee2 6a23 	vfma.f32	s13, s4, s7
 8021cc4:	eee3 7a23 	vfma.f32	s15, s6, s7
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021cc8:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 8021ccc:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021cd0:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021cd4:	ee74 4a24 	vadd.f32	s9, s8, s9
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021cd8:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021cdc:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021ce0:	ee75 5a25 	vadd.f32	s11, s10, s11
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021ce4:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021ce8:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021cec:	ee76 6a26 	vadd.f32	s13, s12, s13
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021cf0:	fec7 7ae8 	vminnm.f32	s15, s15, s17
 8021cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021cf8:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021cfc:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021d00:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021d04:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
      while (col_count_div4--) {
 8021d08:	f47f af47 	bne.w	8021b9a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xa1e>
 8021d0c:	9d01      	ldr	r5, [sp, #4]
      while (col_count_div4--) {
 8021d0e:	9b03      	ldr	r3, [sp, #12]
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	f000 80c4 	beq.w	8021e9e <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xd22>
 8021d16:	19bc      	adds	r4, r7, r6
 8021d18:	9b07      	ldr	r3, [sp, #28]
 8021d1a:	4631      	mov	r1, r6
 8021d1c:	9501      	str	r5, [sp, #4]
 8021d1e:	1938      	adds	r0, r7, r4
 8021d20:	eb03 0a06 	add.w	sl, r3, r6
 8021d24:	9b05      	ldr	r3, [sp, #20]
 8021d26:	eb07 0900 	add.w	r9, r7, r0
        float sum[4] = {};

        /* MAC computation */
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
        mac_1row_4col_fp_IOHW_forint8w(&sum[0], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d2a:	f914 5c03 	ldrsb.w	r5, [r4, #-3]
 8021d2e:	3104      	adds	r1, #4
  *sum += *input_0++ * filter_1;
 8021d30:	edd2 7a01 	vldr	s15, [r2, #4]
 8021d34:	3404      	adds	r4, #4
 8021d36:	ee04 5a90 	vmov	s9, r5
        mac_1row_4col_fp_IOHW_forint8w(&sum[1], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d3a:	f914 5c06 	ldrsb.w	r5, [r4, #-6]
  *sum += *input_0++ * filter_0;
 8021d3e:	ed92 6a00 	vldr	s12, [r2]
 8021d42:	3004      	adds	r0, #4
 8021d44:	ee05 5a90 	vmov	s11, r5
        mac_1row_4col_fp_IOHW_forint8w(&sum[2], input_0, filter_0, filter_1, filter_2, filter_3);
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d48:	f914 5c05 	ldrsb.w	r5, [r4, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d4c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8021d50:	f109 0904 	add.w	r9, r9, #4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d54:	ee06 5a90 	vmov	s13, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d58:	f914 5c08 	ldrsb.w	r5, [r4, #-8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d5c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8021d60:	3310      	adds	r3, #16
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d62:	ee07 5a10 	vmov	s14, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d66:	f911 5c07 	ldrsb.w	r5, [r1, #-7]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d6e:	ee03 5a10 	vmov	s6, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d72:	f911 5c06 	ldrsb.w	r5, [r1, #-6]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d7a:	ee02 5a10 	vmov	s4, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d7e:	f911 5c05 	ldrsb.w	r5, [r1, #-5]
  *sum += *input_0++ * filter_1;
 8021d82:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8021d86:	ee02 5a90 	vmov	s5, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d8a:	f911 5c08 	ldrsb.w	r5, [r1, #-8]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d8e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
      while (col_count_div4--) {
 8021d92:	4551      	cmp	r1, sl
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d94:	ee03 5a90 	vmov	s7, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d98:	f910 5c07 	ldrsb.w	r5, [r0, #-7]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021d9c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021da0:	ee04 5a10 	vmov	s8, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021da4:	f910 5c06 	ldrsb.w	r5, [r0, #-6]
 8021da8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8021dac:	ee05 5a10 	vmov	s10, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021db0:	f910 5c05 	ldrsb.w	r5, [r0, #-5]
 8021db4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8021db8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8021dbc:	ee00 5a10 	vmov	s0, r5
 8021dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021dc4:	f910 5c08 	ldrsb.w	r5, [r0, #-8]
 8021dc8:	eeb8 7ae3 	vcvt.f32.s32	s14, s7
  *sum += *input_0++ * filter_3;
 8021dcc:	edd2 3a03 	vldr	s7, [r2, #12]
 8021dd0:	ee00 5a90 	vmov	s1, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021dd4:	f919 5c07 	ldrsb.w	r5, [r9, #-7]
  *sum += *input_0++ * filter_1;
 8021dd8:	eee3 4a06 	vfma.f32	s9, s6, s12
  *sum += *input_0++ * filter_2;
 8021ddc:	ed92 3a02 	vldr	s6, [r2, #8]
  *sum += *input_0++ * filter_1;
 8021de0:	eee2 5a06 	vfma.f32	s11, s4, s12
 8021de4:	ee01 5a10 	vmov	s2, r5
 8021de8:	eee2 6a86 	vfma.f32	s13, s5, s12
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021dec:	f919 5c06 	ldrsb.w	r5, [r9, #-6]
 8021df0:	eee7 7a06 	vfma.f32	s15, s14, s12
 8021df4:	ee01 5a90 	vmov	s3, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021df8:	eeb8 6ac4 	vcvt.f32.s32	s12, s8
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021dfc:	f919 5c05 	ldrsb.w	r5, [r9, #-5]
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e00:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e04:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021e08:	ed13 4a07 	vldr	s8, [r3, #-28]	; 0xffffffe4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e0c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e10:	ee02 5a10 	vmov	s4, r5
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e14:	f919 5c08 	ldrsb.w	r5, [r9, #-8]
  *sum += *input_0++ * filter_2;
 8021e18:	eee6 4a03 	vfma.f32	s9, s12, s6
 8021e1c:	eee7 5a03 	vfma.f32	s11, s14, s6
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021e20:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
  *sum += *input_0++ * filter_2;
 8021e24:	eee0 6a03 	vfma.f32	s13, s0, s6
 8021e28:	ee02 5a90 	vmov	s5, r5
 8021e2c:	eee0 7a83 	vfma.f32	s15, s1, s6
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021e30:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e34:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021e38:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e3c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e40:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
        filter_0 = (float)*filter_0_int8++; filter_1 = (float)*filter_1_int8++; filter_2 = (float)*filter_2_int8++; filter_3 = (float)*filter_3_int8++;
 8021e44:	eeb8 3ae2 	vcvt.f32.s32	s6, s5
  *sum += *input_0++ * filter_3;
 8021e48:	eee1 4a23 	vfma.f32	s9, s2, s7
 8021e4c:	eee1 5aa3 	vfma.f32	s11, s3, s7
 8021e50:	eee2 6a23 	vfma.f32	s13, s4, s7
 8021e54:	eee3 7a23 	vfma.f32	s15, s6, s7
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021e58:	fec8 4a24 	vmaxnm.f32	s9, s16, s9
 8021e5c:	fec4 4ae8 	vminnm.f32	s9, s9, s17
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021e60:	fec8 5a25 	vmaxnm.f32	s11, s16, s11
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021e64:	ee74 4a24 	vadd.f32	s9, s8, s9
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021e68:	fec5 5ae8 	vminnm.f32	s11, s11, s17
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021e6c:	fec8 6a26 	vmaxnm.f32	s13, s16, s13
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021e70:	ee75 5a25 	vadd.f32	s11, s10, s11
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021e74:	fec6 6ae8 	vminnm.f32	s13, s13, s17
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021e78:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021e7c:	ee76 6a26 	vadd.f32	s13, s12, s13
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021e80:	fec7 7ae8 	vminnm.f32	s15, s15, s17
 8021e84:	ee77 7a27 	vadd.f32	s15, s14, s15
    *out_0++ += TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max);
 8021e88:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
    *out_0++ += TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max);
 8021e8c:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
    *out_0++ += TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max);
 8021e90:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
    *out_0++ += TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max);
 8021e94:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
      while (col_count_div4--) {
 8021e98:	f47f af47 	bne.w	8021d2a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0xbae>
 8021e9c:	9d01      	ldr	r5, [sp, #4]
 8021e9e:	3210      	adds	r2, #16
 8021ea0:	9b04      	ldr	r3, [sp, #16]
 8021ea2:	445e      	add	r6, fp
    for (i_ch_in = 0; i_ch_in < input_depth; i_ch_in+=4) {
 8021ea4:	4596      	cmp	lr, r2
 8021ea6:	441d      	add	r5, r3
 8021ea8:	f47f ae67 	bne.w	8021b7a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x9fe>
 8021eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021eb0:	4413      	add	r3, r2
 8021eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8021eb6:	9b08      	ldr	r3, [sp, #32]
 8021eb8:	4413      	add	r3, r2
 8021eba:	9308      	str	r3, [sp, #32]
 8021ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ebe:	4498      	add	r8, r3
  while (leftover_elements) {
 8021ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ec2:	3b01      	subs	r3, #1
 8021ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8021ec6:	f47f ae44 	bne.w	8021b52 <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x9d6>
    leftover_elements--;
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
}
 8021eca:	2000      	movs	r0, #0
 8021ecc:	b02d      	add	sp, #180	; 0xb4
 8021ece:	ecbd 8b10 	vpop	{d8-d15}
 8021ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out_2 = &output_data[(i_element + 2) * output_depth];
 8021ed6:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
      float* out_0 = &output_data[i_element * output_depth];
 8021eda:	e9dd 1020 	ldrd	r1, r0, [sp, #128]	; 0x80
 8021ede:	f7ff bbd4 	b.w	802168a <pointwise_conv_fp_4row4col_IOHW_int8weight_partialCH_4innercol+0x50e>
 8021ee2:	bf00      	nop

08021ee4 <strided_slice_4Dto4D>:

#include "tinyengine_function_fp.h"

tinyengine_status_fp strided_slice_4Dto4D(const float* input, const uint16_t inn, const uint16_t inc, const uint16_t inh, const uint16_t inw,
                                          const uint16_t* begin, const uint16_t* end, const uint16_t* stride,
                                          float* output, const uint16_t on, const uint16_t oc, const uint16_t oh, const uint16_t ow) {
 8021ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee8:	b091      	sub	sp, #68	; 0x44
 8021eea:	4694      	mov	ip, r2
  int n, c, h, w;
  //begin and end are in [n, c, h, w]
  for(n = begin[0]; n < end[0]; n += stride[0]){
 8021eec:	991b      	ldr	r1, [sp, #108]	; 0x6c
                                          float* output, const uint16_t on, const uint16_t oc, const uint16_t oh, const uint16_t ow) {
 8021eee:	9006      	str	r0, [sp, #24]
  for(n = begin[0]; n < end[0]; n += stride[0]){
 8021ef0:	8808      	ldrh	r0, [r1, #0]
 8021ef2:	991c      	ldr	r1, [sp, #112]	; 0x70
                                          float* output, const uint16_t on, const uint16_t oc, const uint16_t oh, const uint16_t ow) {
 8021ef4:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
  for(n = begin[0]; n < end[0]; n += stride[0]){
 8021ef8:	880f      	ldrh	r7, [r1, #0]
                                          float* output, const uint16_t on, const uint16_t oc, const uint16_t oh, const uint16_t ow) {
 8021efa:	920b      	str	r2, [sp, #44]	; 0x2c
  for(n = begin[0]; n < end[0]; n += stride[0]){
 8021efc:	42b8      	cmp	r0, r7
 8021efe:	9009      	str	r0, [sp, #36]	; 0x24
 8021f00:	970d      	str	r7, [sp, #52]	; 0x34
                                          float* output, const uint16_t on, const uint16_t oc, const uint16_t oh, const uint16_t ow) {
 8021f02:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8021f06:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8021f08:	940c      	str	r4, [sp, #48]	; 0x30
 8021f0a:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8021f0e:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
  for(n = begin[0]; n < end[0]; n += stride[0]){
 8021f12:	f280 8092 	bge.w	802203a <strided_slice_4Dto4D+0x156>
		for(h = begin[2]; h < end[2]; h += stride[0]){
 8021f16:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021f18:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8021f1a:	88a4      	ldrh	r4, [r4, #4]
 8021f1c:	88bf      	ldrh	r7, [r7, #4]
 8021f1e:	9403      	str	r4, [sp, #12]
 8021f20:	8814      	ldrh	r4, [r2, #0]
 8021f22:	9a03      	ldr	r2, [sp, #12]
 8021f24:	970a      	str	r7, [sp, #40]	; 0x28
 8021f26:	4297      	cmp	r7, r2
 8021f28:	4696      	mov	lr, r2
 8021f2a:	f280 8086 	bge.w	802203a <strided_slice_4Dto4D+0x156>
		  for(w = begin[3]; w < end[3]; w += stride[0]){
 8021f2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021f30:	fb01 f703 	mul.w	r7, r1, r3
 8021f34:	fb01 fc0c 	mul.w	ip, r1, ip
 8021f38:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 8021f3c:	4602      	mov	r2, r0
 8021f3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021f40:	fb04 f707 	mul.w	r7, r4, r7
 8021f44:	4690      	mov	r8, r2
 8021f46:	f8cd e008 	str.w	lr, [sp, #8]
 8021f4a:	fb02 0303 	mla	r3, r2, r3, r0
 8021f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f50:	fb06 fe05 	mul.w	lr, r6, r5
 8021f54:	981c      	ldr	r0, [sp, #112]	; 0x70
 8021f56:	fb05 2508 	mla	r5, r5, r8, r2
 8021f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f5c:	fb01 f303 	mul.w	r3, r1, r3
 8021f60:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 8021f64:	fb06 f902 	mul.w	r9, r6, r2
 8021f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021f6a:	9307      	str	r3, [sp, #28]
 8021f6c:	00a0      	lsls	r0, r4, #2
 8021f6e:	fb04 f202 	mul.w	r2, r4, r2
 8021f72:	fb04 f30c 	mul.w	r3, r4, ip
 8021f76:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8021f7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f7c:	9304      	str	r3, [sp, #16]
 8021f7e:	fb04 f30e 	mul.w	r3, r4, lr
 8021f82:	fb04 f802 	mul.w	r8, r4, r2
 8021f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f88:	fb06 f305 	mul.w	r3, r6, r5
 8021f8c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8021f90:	970e      	str	r7, [sp, #56]	; 0x38
 8021f92:	9308      	str	r3, [sp, #32]
 8021f94:	fb04 f309 	mul.w	r3, r4, r9
 8021f98:	9305      	str	r3, [sp, #20]
 8021f9a:	9a02      	ldr	r2, [sp, #8]
 8021f9c:	4552      	cmp	r2, sl
 8021f9e:	da3e      	bge.n	802201e <strided_slice_4Dto4D+0x13a>
 8021fa0:	9b07      	ldr	r3, [sp, #28]
 8021fa2:	9908      	ldr	r1, [sp, #32]
 8021fa4:	18d3      	adds	r3, r2, r3
 8021fa6:	eb02 0901 	add.w	r9, r2, r1
				for(c = begin[1]; c < end[1]; c += stride[0]){
 8021faa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021fac:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8021fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021fb2:	9201      	str	r2, [sp, #4]
 8021fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021fb6:	fb02 f303 	mul.w	r3, r2, r3
 8021fba:	9300      	str	r3, [sp, #0]
 8021fbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021fbe:	885d      	ldrh	r5, [r3, #2]
 8021fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fc2:	fb03 f909 	mul.w	r9, r3, r9
 8021fc6:	45ae      	cmp	lr, r5
 8021fc8:	da1d      	bge.n	8022006 <strided_slice_4Dto4D+0x122>
 8021fca:	9b00      	ldr	r3, [sp, #0]
 8021fcc:	eb09 060e 	add.w	r6, r9, lr
 8021fd0:	f8dd c008 	ldr.w	ip, [sp, #8]
 8021fd4:	eb03 070e 	add.w	r7, r3, lr
 8021fd8:	9b06      	ldr	r3, [sp, #24]
 8021fda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021fde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021fe0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8021fe4:	4631      	mov	r1, r6
 8021fe6:	463a      	mov	r2, r7
 8021fe8:	4673      	mov	r3, lr
 8021fea:	4423      	add	r3, r4
					output[((h + n * oh) * ow + w) * oc + c] = input[((h + n * inh) * inw + w) * inc + c];
 8021fec:	edd2 7a00 	vldr	s15, [r2]
 8021ff0:	4402      	add	r2, r0
				for(c = begin[1]; c < end[1]; c += stride[0]){
 8021ff2:	42ab      	cmp	r3, r5
					output[((h + n * oh) * ow + w) * oc + c] = input[((h + n * inh) * inw + w) * inc + c];
 8021ff4:	edc1 7a00 	vstr	s15, [r1]
 8021ff8:	4401      	add	r1, r0
				for(c = begin[1]; c < end[1]; c += stride[0]){
 8021ffa:	dbf6      	blt.n	8021fea <strided_slice_4Dto4D+0x106>
		  for(w = begin[3]; w < end[3]; w += stride[0]){
 8021ffc:	44a4      	add	ip, r4
 8021ffe:	445f      	add	r7, fp
 8022000:	4446      	add	r6, r8
 8022002:	45d4      	cmp	ip, sl
 8022004:	dbee      	blt.n	8021fe4 <strided_slice_4Dto4D+0x100>
 8022006:	9a00      	ldr	r2, [sp, #0]
 8022008:	9904      	ldr	r1, [sp, #16]
		for(h = begin[2]; h < end[2]; h += stride[0]){
 802200a:	9b01      	ldr	r3, [sp, #4]
 802200c:	440a      	add	r2, r1
 802200e:	4423      	add	r3, r4
 8022010:	9200      	str	r2, [sp, #0]
 8022012:	9a05      	ldr	r2, [sp, #20]
 8022014:	9301      	str	r3, [sp, #4]
 8022016:	4491      	add	r9, r2
 8022018:	9a03      	ldr	r2, [sp, #12]
 802201a:	4293      	cmp	r3, r2
 802201c:	dbd3      	blt.n	8021fc6 <strided_slice_4Dto4D+0xe2>
 802201e:	9a07      	ldr	r2, [sp, #28]
 8022020:	990e      	ldr	r1, [sp, #56]	; 0x38
  for(n = begin[0]; n < end[0]; n += stride[0]){
 8022022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022024:	440a      	add	r2, r1
 8022026:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022028:	4423      	add	r3, r4
 802202a:	9207      	str	r2, [sp, #28]
 802202c:	9a08      	ldr	r2, [sp, #32]
 802202e:	9309      	str	r3, [sp, #36]	; 0x24
 8022030:	440a      	add	r2, r1
 8022032:	9208      	str	r2, [sp, #32]
 8022034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022036:	4293      	cmp	r3, r2
 8022038:	dbaf      	blt.n	8021f9a <strided_slice_4Dto4D+0xb6>
	  }
	}
	
	/* Return to application */
	return STATE_SUCCESS_fp;
}
 802203a:	2000      	movs	r0, #0
 802203c:	b011      	add	sp, #68	; 0x44
 802203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022042:	bf00      	nop

08022044 <sub>:

tinyengine_status_fp sub(const uint16_t size, const float* input1_data,
			               const float* input2_data, float* output_data) {
  int i;
  
  for (i = 0; i < size; ++i) {
 8022044:	b158      	cbz	r0, 802205e <sub+0x1a>
 8022046:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    output_data[i] = input1_data[i] - input2_data[i];
 802204a:	ecf1 7a01 	vldmia	r1!, {s15}
 802204e:	ecb2 7a01 	vldmia	r2!, {s14}
  for (i = 0; i < size; ++i) {
 8022052:	4288      	cmp	r0, r1
    output_data[i] = input1_data[i] - input2_data[i];
 8022054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022058:	ece3 7a01 	vstmia	r3!, {s15}
  for (i = 0; i < size; ++i) {
 802205c:	d1f5      	bne.n	802204a <sub+0x6>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 802205e:	2000      	movs	r0, #0
 8022060:	4770      	bx	lr
 8022062:	bf00      	nop

08022064 <sum_3D>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp sum_3D(const float* input_data, const uint16_t input_w, const uint16_t input_h,
                      const uint16_t input_c, const uint16_t axis, float* output_data) {
 8022064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022068:	f8bd 401c 	ldrh.w	r4, [sp, #28]
  int c, h, w, i;
  float sum;

  if (axis == 2){
 802206c:	2c02      	cmp	r4, #2
 802206e:	d056      	beq.n	802211e <sum_3D+0xba>

        output_data[c + (h * input_c)] = sum;
      }
    }
  }
  else if (axis == 1){
 8022070:	2c01      	cmp	r4, #1
 8022072:	d025      	beq.n	80220c0 <sum_3D+0x5c>
        output_data[c + (w * input_c)] = sum;
      }
    }
  }
  else{ /* axis == 0 */
    for (h = 0; h < input_h; ++h) {
 8022074:	b30a      	cbz	r2, 80220ba <sum_3D+0x56>
 8022076:	b301      	cbz	r1, 80220ba <sum_3D+0x56>
 8022078:	fb03 fe01 	mul.w	lr, r3, r1
 802207c:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8022080:	9d08      	ldr	r5, [sp, #32]
 8022082:	f04f 0c00 	mov.w	ip, #0
 8022086:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 802208a:	009f      	lsls	r7, r3, #2
 802208c:	eb05 0608 	add.w	r6, r5, r8
      for (w = 0; w < input_w; ++w) {
        sum = 0;
 8022090:	4601      	mov	r1, r0
 8022092:	187c      	adds	r4, r7, r1
 8022094:	eddf 7a3d 	vldr	s15, [pc, #244]	; 802218c <sum_3D+0x128>

        for (c = 0; c < input_c; ++c) {
 8022098:	b12b      	cbz	r3, 80220a6 <sum_3D+0x42>
          sum += input_data[(w + h * input_w) * input_c + c];
 802209a:	ecb1 7a01 	vldmia	r1!, {s14}
        for (c = 0; c < input_c; ++c) {
 802209e:	428c      	cmp	r4, r1
          sum += input_data[(w + h * input_w) * input_c + c];
 80220a0:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (c = 0; c < input_c; ++c) {
 80220a4:	d1f9      	bne.n	802209a <sum_3D+0x36>
      }

        output_data[w + (h * input_w)] = sum;
 80220a6:	ece5 7a01 	vstmia	r5!, {s15}
      for (w = 0; w < input_w; ++w) {
 80220aa:	42b5      	cmp	r5, r6
 80220ac:	4621      	mov	r1, r4
 80220ae:	d1f0      	bne.n	8022092 <sum_3D+0x2e>
    for (h = 0; h < input_h; ++h) {
 80220b0:	f10c 0c01 	add.w	ip, ip, #1
 80220b4:	4470      	add	r0, lr
 80220b6:	4594      	cmp	ip, r2
 80220b8:	d1e8      	bne.n	802208c <sum_3D+0x28>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 80220ba:	2000      	movs	r0, #0
 80220bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (c = 0; c < input_c; ++c) {
 80220c0:	2b00      	cmp	r3, #0
 80220c2:	d0fa      	beq.n	80220ba <sum_3D+0x56>
 80220c4:	2900      	cmp	r1, #0
 80220c6:	d0f8      	beq.n	80220ba <sum_3D+0x56>
 80220c8:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80220cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80220d0:	fb03 f301 	mul.w	r3, r3, r1
 80220d4:	4684      	mov	ip, r0
 80220d6:	eb08 090e 	add.w	r9, r8, lr
 80220da:	009c      	lsls	r4, r3, #2
        sum = 0;
 80220dc:	4667      	mov	r7, ip
 80220de:	4646      	mov	r6, r8
      for (w = 0; w < input_w; ++w) {
 80220e0:	2500      	movs	r5, #0
        for (h = 0; h < input_h; ++h) {
 80220e2:	2a00      	cmp	r2, #0
 80220e4:	d04f      	beq.n	8022186 <sum_3D+0x122>
 80220e6:	4638      	mov	r0, r7
        sum = 0;
 80220e8:	eddf 7a28 	vldr	s15, [pc, #160]	; 802218c <sum_3D+0x128>
        for (h = 0; h < input_h; ++h) {
 80220ec:	2300      	movs	r3, #0
 80220ee:	3301      	adds	r3, #1
          sum += input_data[(w + h * input_w) * input_c + c];
 80220f0:	ed90 7a00 	vldr	s14, [r0]
 80220f4:	4420      	add	r0, r4
        for (h = 0; h < input_h; ++h) {
 80220f6:	4293      	cmp	r3, r2
          sum += input_data[(w + h * input_w) * input_c + c];
 80220f8:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (h = 0; h < input_h; ++h) {
 80220fc:	d1f7      	bne.n	80220ee <sum_3D+0x8a>
      for (w = 0; w < input_w; ++w) {
 80220fe:	3501      	adds	r5, #1
        output_data[c + (w * input_c)] = sum;
 8022100:	edc6 7a00 	vstr	s15, [r6]
 8022104:	4477      	add	r7, lr
 8022106:	4476      	add	r6, lr
      for (w = 0; w < input_w; ++w) {
 8022108:	428d      	cmp	r5, r1
 802210a:	d1ea      	bne.n	80220e2 <sum_3D+0x7e>
 802210c:	f108 0804 	add.w	r8, r8, #4
 8022110:	f10c 0c04 	add.w	ip, ip, #4
    for (c = 0; c < input_c; ++c) {
 8022114:	45c1      	cmp	r9, r8
 8022116:	d1e1      	bne.n	80220dc <sum_3D+0x78>
}
 8022118:	2000      	movs	r0, #0
 802211a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (c = 0; c < input_c; ++c) {
 802211e:	2b00      	cmp	r3, #0
 8022120:	d0cb      	beq.n	80220ba <sum_3D+0x56>
 8022122:	2a00      	cmp	r2, #0
 8022124:	d0c9      	beq.n	80220ba <sum_3D+0x56>
 8022126:	009d      	lsls	r5, r3, #2
 8022128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802212c:	fb05 fe01 	mul.w	lr, r5, r1
 8022130:	eb08 0905 	add.w	r9, r8, r5
        sum = 0;
 8022134:	4684      	mov	ip, r0
 8022136:	4647      	mov	r7, r8
      for (h = 0; h < input_h; ++h) {
 8022138:	2600      	movs	r6, #0
        for (w = 0; w < input_w; ++w) {
 802213a:	b1d1      	cbz	r1, 8022172 <sum_3D+0x10e>
 802213c:	4664      	mov	r4, ip
        sum = 0;
 802213e:	eddf 7a13 	vldr	s15, [pc, #76]	; 802218c <sum_3D+0x128>
        for (w = 0; w < input_w; ++w) {
 8022142:	2300      	movs	r3, #0
 8022144:	3301      	adds	r3, #1
          sum += input_data[(w + h * input_w) * input_c + c];
 8022146:	ed94 7a00 	vldr	s14, [r4]
 802214a:	442c      	add	r4, r5
        for (w = 0; w < input_w; ++w) {
 802214c:	428b      	cmp	r3, r1
          sum += input_data[(w + h * input_w) * input_c + c];
 802214e:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (w = 0; w < input_w; ++w) {
 8022152:	d1f7      	bne.n	8022144 <sum_3D+0xe0>
      for (h = 0; h < input_h; ++h) {
 8022154:	3601      	adds	r6, #1
        output_data[c + (h * input_c)] = sum;
 8022156:	edc7 7a00 	vstr	s15, [r7]
 802215a:	44f4      	add	ip, lr
 802215c:	442f      	add	r7, r5
      for (h = 0; h < input_h; ++h) {
 802215e:	4296      	cmp	r6, r2
 8022160:	d1eb      	bne.n	802213a <sum_3D+0xd6>
 8022162:	f108 0804 	add.w	r8, r8, #4
 8022166:	3004      	adds	r0, #4
    for (c = 0; c < input_c; ++c) {
 8022168:	45c1      	cmp	r9, r8
 802216a:	d1e3      	bne.n	8022134 <sum_3D+0xd0>
}
 802216c:	2000      	movs	r0, #0
 802216e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      for (h = 0; h < input_h; ++h) {
 8022172:	3601      	adds	r6, #1
        sum = 0;
 8022174:	eddf 7a05 	vldr	s15, [pc, #20]	; 802218c <sum_3D+0x128>
 8022178:	44f4      	add	ip, lr
      for (h = 0; h < input_h; ++h) {
 802217a:	4296      	cmp	r6, r2
        output_data[c + (h * input_c)] = sum;
 802217c:	edc7 7a00 	vstr	s15, [r7]
 8022180:	442f      	add	r7, r5
      for (h = 0; h < input_h; ++h) {
 8022182:	d1da      	bne.n	802213a <sum_3D+0xd6>
 8022184:	e7ed      	b.n	8022162 <sum_3D+0xfe>
        sum = 0;
 8022186:	eddf 7a01 	vldr	s15, [pc, #4]	; 802218c <sum_3D+0x128>
 802218a:	e7b8      	b.n	80220fe <sum_3D+0x9a>
 802218c:	00000000 	.word	0x00000000

08022190 <sum_4D_exclude>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp sum_4D_exclude(const float* input_data, const uint16_t d1, const uint16_t d2,
                      const uint16_t d3, const uint16_t d4, const uint16_t axis, float* output_data) {
 8022190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022194:	b083      	sub	sp, #12
 8022196:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
 802219a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
  int i, j, m, n;

  if (axis == 0){
 802219e:	bb9d      	cbnz	r5, 8022208 <sum_4D_exclude+0x78>
    for (i = 0; i < d1; i++){
 80221a0:	b371      	cbz	r1, 8022200 <sum_4D_exclude+0x70>
 80221a2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80221a6:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80221aa:	4682      	mov	sl, r0
 80221ac:	00a7      	lsls	r7, r4, #2
 80221ae:	fb08 fb02 	mul.w	fp, r8, r2
 80221b2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80221b6:	fb04 f808 	mul.w	r8, r4, r8
 80221ba:	fb04 fb0b 	mul.w	fp, r4, fp
      float sum = 0;
      for (j = 0; j < d2; j++){
 80221be:	2a00      	cmp	r2, #0
 80221c0:	f000 809b 	beq.w	80222fa <sum_4D_exclude+0x16a>
 80221c4:	46d6      	mov	lr, sl
      float sum = 0;
 80221c6:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8022384 <sum_4D_exclude+0x1f4>
      for (j = 0; j < d2; j++){
 80221ca:	f04f 0c00 	mov.w	ip, #0
        for (m = 0; m < d3; m++) {
 80221ce:	b16b      	cbz	r3, 80221ec <sum_4D_exclude+0x5c>
 80221d0:	4670      	mov	r0, lr
 80221d2:	2600      	movs	r6, #0
 80221d4:	183d      	adds	r5, r7, r0
          for (n = 0; n < d4; n++){
 80221d6:	b12c      	cbz	r4, 80221e4 <sum_4D_exclude+0x54>
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 80221d8:	ecb0 7a01 	vldmia	r0!, {s14}
          for (n = 0; n < d4; n++){
 80221dc:	4285      	cmp	r5, r0
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 80221de:	ee77 7a87 	vadd.f32	s15, s15, s14
          for (n = 0; n < d4; n++){
 80221e2:	d1f9      	bne.n	80221d8 <sum_4D_exclude+0x48>
        for (m = 0; m < d3; m++) {
 80221e4:	3601      	adds	r6, #1
 80221e6:	4628      	mov	r0, r5
 80221e8:	42b3      	cmp	r3, r6
 80221ea:	d1f3      	bne.n	80221d4 <sum_4D_exclude+0x44>
      for (j = 0; j < d2; j++){
 80221ec:	f10c 0c01 	add.w	ip, ip, #1
 80221f0:	44c6      	add	lr, r8
 80221f2:	4562      	cmp	r2, ip
 80221f4:	d1eb      	bne.n	80221ce <sum_4D_exclude+0x3e>
          }
        }
      }
      output_data[i] = sum;
 80221f6:	ece9 7a01 	vstmia	r9!, {s15}
    for (i = 0; i < d1; i++){
 80221fa:	4549      	cmp	r1, r9
 80221fc:	44da      	add	sl, fp
 80221fe:	d1de      	bne.n	80221be <sum_4D_exclude+0x2e>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 8022200:	2000      	movs	r0, #0
 8022202:	b003      	add	sp, #12
 8022204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (axis == 1){
 8022208:	2d01      	cmp	r5, #1
 802220a:	d03d      	beq.n	8022288 <sum_4D_exclude+0xf8>
  else if (axis == 2){
 802220c:	2d02      	cmp	r5, #2
 802220e:	d07d      	beq.n	802230c <sum_4D_exclude+0x17c>
  else if (axis == 3){
 8022210:	2d03      	cmp	r5, #3
 8022212:	d1f5      	bne.n	8022200 <sum_4D_exclude+0x70>
    for (n = 0; n < d4; n++){
 8022214:	2c00      	cmp	r4, #0
 8022216:	d0f3      	beq.n	8022200 <sum_4D_exclude+0x70>
 8022218:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 802221c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8022220:	00a5      	lsls	r5, r4, #2
 8022222:	4686      	mov	lr, r0
 8022224:	fb02 fb0c 	mul.w	fp, r2, ip
 8022228:	eb08 0005 	add.w	r0, r8, r5
 802222c:	fb04 fc0c 	mul.w	ip, r4, ip
 8022230:	fb04 fb0b 	mul.w	fp, r4, fp
 8022234:	9001      	str	r0, [sp, #4]
        for (i = 0; i < d1; i++){
 8022236:	b321      	cbz	r1, 8022282 <sum_4D_exclude+0xf2>
 8022238:	46f2      	mov	sl, lr
      float sum = 0;
 802223a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8022384 <sum_4D_exclude+0x1f4>
        for (i = 0; i < d1; i++){
 802223e:	f04f 0900 	mov.w	r9, #0
          for (j = 0; j < d2; j++){
 8022242:	b182      	cbz	r2, 8022266 <sum_4D_exclude+0xd6>
 8022244:	4657      	mov	r7, sl
 8022246:	2600      	movs	r6, #0
            for (m = 0; m < d3; m++) {
 8022248:	b14b      	cbz	r3, 802225e <sum_4D_exclude+0xce>
 802224a:	463c      	mov	r4, r7
 802224c:	2000      	movs	r0, #0
 802224e:	3001      	adds	r0, #1
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 8022250:	ed94 7a00 	vldr	s14, [r4]
 8022254:	442c      	add	r4, r5
            for (m = 0; m < d3; m++) {
 8022256:	4298      	cmp	r0, r3
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 8022258:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (m = 0; m < d3; m++) {
 802225c:	d1f7      	bne.n	802224e <sum_4D_exclude+0xbe>
          for (j = 0; j < d2; j++){
 802225e:	3601      	adds	r6, #1
 8022260:	4467      	add	r7, ip
 8022262:	4296      	cmp	r6, r2
 8022264:	d1f0      	bne.n	8022248 <sum_4D_exclude+0xb8>
        for (i = 0; i < d1; i++){
 8022266:	f109 0901 	add.w	r9, r9, #1
 802226a:	44da      	add	sl, fp
 802226c:	4589      	cmp	r9, r1
 802226e:	d1e8      	bne.n	8022242 <sum_4D_exclude+0xb2>
    for (n = 0; n < d4; n++){
 8022270:	9801      	ldr	r0, [sp, #4]
 8022272:	f10e 0e04 	add.w	lr, lr, #4
      output_data[n] = sum;
 8022276:	ece8 7a01 	vstmia	r8!, {s15}
    for (n = 0; n < d4; n++){
 802227a:	4580      	cmp	r8, r0
 802227c:	d0c0      	beq.n	8022200 <sum_4D_exclude+0x70>
        for (i = 0; i < d1; i++){
 802227e:	2900      	cmp	r1, #0
 8022280:	d1da      	bne.n	8022238 <sum_4D_exclude+0xa8>
      float sum = 0;
 8022282:	eddf 7a40 	vldr	s15, [pc, #256]	; 8022384 <sum_4D_exclude+0x1f4>
 8022286:	e7f3      	b.n	8022270 <sum_4D_exclude+0xe0>
    for (j = 0; j < d2; j++){
 8022288:	2a00      	cmp	r2, #0
 802228a:	d0b9      	beq.n	8022200 <sum_4D_exclude+0x70>
 802228c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8022290:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8022294:	4682      	mov	sl, r0
 8022296:	00a7      	lsls	r7, r4, #2
 8022298:	fb0b f802 	mul.w	r8, fp, r2
 802229c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80222a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80222a4:	fb04 f808 	mul.w	r8, r4, r8
      for (i = 0; i < d1; i++){
 80222a8:	b1f9      	cbz	r1, 80222ea <sum_4D_exclude+0x15a>
 80222aa:	46d6      	mov	lr, sl
      float sum = 0;
 80222ac:	eddf 7a35 	vldr	s15, [pc, #212]	; 8022384 <sum_4D_exclude+0x1f4>
      for (i = 0; i < d1; i++){
 80222b0:	f04f 0c00 	mov.w	ip, #0
        for (m = 0; m < d3; m++) {
 80222b4:	b16b      	cbz	r3, 80222d2 <sum_4D_exclude+0x142>
 80222b6:	4670      	mov	r0, lr
 80222b8:	2600      	movs	r6, #0
 80222ba:	183d      	adds	r5, r7, r0
          for (n = 0; n < d4; n++){
 80222bc:	b12c      	cbz	r4, 80222ca <sum_4D_exclude+0x13a>
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 80222be:	ecb0 7a01 	vldmia	r0!, {s14}
          for (n = 0; n < d4; n++){
 80222c2:	4285      	cmp	r5, r0
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 80222c4:	ee77 7a87 	vadd.f32	s15, s15, s14
          for (n = 0; n < d4; n++){
 80222c8:	d1f9      	bne.n	80222be <sum_4D_exclude+0x12e>
        for (m = 0; m < d3; m++) {
 80222ca:	3601      	adds	r6, #1
 80222cc:	4628      	mov	r0, r5
 80222ce:	429e      	cmp	r6, r3
 80222d0:	d1f3      	bne.n	80222ba <sum_4D_exclude+0x12a>
      for (i = 0; i < d1; i++){
 80222d2:	f10c 0c01 	add.w	ip, ip, #1
 80222d6:	44c6      	add	lr, r8
 80222d8:	458c      	cmp	ip, r1
 80222da:	d1eb      	bne.n	80222b4 <sum_4D_exclude+0x124>
      output_data[j] = sum;
 80222dc:	ece9 7a01 	vstmia	r9!, {s15}
    for (j = 0; j < d2; j++){
 80222e0:	4591      	cmp	r9, r2
 80222e2:	44da      	add	sl, fp
 80222e4:	d08c      	beq.n	8022200 <sum_4D_exclude+0x70>
      for (i = 0; i < d1; i++){
 80222e6:	2900      	cmp	r1, #0
 80222e8:	d1df      	bne.n	80222aa <sum_4D_exclude+0x11a>
      float sum = 0;
 80222ea:	eddf 7a26 	vldr	s15, [pc, #152]	; 8022384 <sum_4D_exclude+0x1f4>
 80222ee:	44da      	add	sl, fp
      output_data[j] = sum;
 80222f0:	ece9 7a01 	vstmia	r9!, {s15}
    for (j = 0; j < d2; j++){
 80222f4:	4591      	cmp	r9, r2
 80222f6:	d1f6      	bne.n	80222e6 <sum_4D_exclude+0x156>
 80222f8:	e782      	b.n	8022200 <sum_4D_exclude+0x70>
      float sum = 0;
 80222fa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8022384 <sum_4D_exclude+0x1f4>
 80222fe:	44da      	add	sl, fp
      output_data[i] = sum;
 8022300:	ece9 7a01 	vstmia	r9!, {s15}
    for (i = 0; i < d1; i++){
 8022304:	4549      	cmp	r1, r9
 8022306:	f47f af5a 	bne.w	80221be <sum_4D_exclude+0x2e>
 802230a:	e779      	b.n	8022200 <sum_4D_exclude+0x70>
    for (m = 0; m < d3; m++) {
 802230c:	2b00      	cmp	r3, #0
 802230e:	f43f af77 	beq.w	8022200 <sum_4D_exclude+0x70>
 8022312:	fb03 fa02 	mul.w	sl, r3, r2
 8022316:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 802231a:	009b      	lsls	r3, r3, #2
 802231c:	4686      	mov	lr, r0
 802231e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8022322:	fb04 f703 	mul.w	r7, r4, r3
 8022326:	4463      	add	r3, ip
 8022328:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802232c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022330:	9301      	str	r3, [sp, #4]
        for (i = 0; i < d1; i++){
 8022332:	b321      	cbz	r1, 802237e <sum_4D_exclude+0x1ee>
 8022334:	46f0      	mov	r8, lr
      float sum = 0;
 8022336:	eddf 7a13 	vldr	s15, [pc, #76]	; 8022384 <sum_4D_exclude+0x1f4>
        for (i = 0; i < d1; i++){
 802233a:	f04f 0900 	mov.w	r9, #0
          for (j = 0; j < d2; j++){
 802233e:	b182      	cbz	r2, 8022362 <sum_4D_exclude+0x1d2>
 8022340:	eb08 000b 	add.w	r0, r8, fp
 8022344:	4646      	mov	r6, r8
 8022346:	2500      	movs	r5, #0
          for (n = 0; n < d4; n++){
 8022348:	b134      	cbz	r4, 8022358 <sum_4D_exclude+0x1c8>
 802234a:	4633      	mov	r3, r6
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 802234c:	ecb3 7a01 	vldmia	r3!, {s14}
          for (n = 0; n < d4; n++){
 8022350:	4283      	cmp	r3, r0
            sum += input_data[((i * d2 + j) * d3 + m) * d4 + n];
 8022352:	ee77 7a87 	vadd.f32	s15, s15, s14
          for (n = 0; n < d4; n++){
 8022356:	d1f9      	bne.n	802234c <sum_4D_exclude+0x1bc>
          for (j = 0; j < d2; j++){
 8022358:	3501      	adds	r5, #1
 802235a:	443e      	add	r6, r7
 802235c:	4438      	add	r0, r7
 802235e:	4295      	cmp	r5, r2
 8022360:	d1f2      	bne.n	8022348 <sum_4D_exclude+0x1b8>
        for (i = 0; i < d1; i++){
 8022362:	f109 0901 	add.w	r9, r9, #1
 8022366:	44d0      	add	r8, sl
 8022368:	4589      	cmp	r9, r1
 802236a:	d1e8      	bne.n	802233e <sum_4D_exclude+0x1ae>
    for (m = 0; m < d3; m++) {
 802236c:	9b01      	ldr	r3, [sp, #4]
 802236e:	44de      	add	lr, fp
      output_data[m] = sum;
 8022370:	ecec 7a01 	vstmia	ip!, {s15}
    for (m = 0; m < d3; m++) {
 8022374:	459c      	cmp	ip, r3
 8022376:	f43f af43 	beq.w	8022200 <sum_4D_exclude+0x70>
        for (i = 0; i < d1; i++){
 802237a:	2900      	cmp	r1, #0
 802237c:	d1da      	bne.n	8022334 <sum_4D_exclude+0x1a4>
      float sum = 0;
 802237e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8022384 <sum_4D_exclude+0x1f4>
 8022382:	e7f3      	b.n	802236c <sum_4D_exclude+0x1dc>
 8022384:	00000000 	.word	0x00000000

08022388 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight>:
tinyengine_status_fp transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight(float* input_output_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 8022388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802238c:	ed2d 8b06 	vpush	{d8-d10}
 8022390:	b099      	sub	sp, #100	; 0x64
 8022392:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8022396:	910c      	str	r1, [sp, #48]	; 0x30
 8022398:	930e      	str	r3, [sp, #56]	; 0x38
 802239a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802239e:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 80223a2:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 80223a6:	920d      	str	r2, [sp, #52]	; 0x34
 80223a8:	9009      	str	r0, [sp, #36]	; 0x24
 80223aa:	1c90      	adds	r0, r2, #2
 80223ac:	9302      	str	r3, [sp, #8]
  float* two_column_buffer = im2col_data;
  int i, j, c;

  /* Setup the padding regions for the buffer */
  // Top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 2; i++) {
 80223ae:	2300      	movs	r3, #0
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 80223b0:	9103      	str	r1, [sp, #12]
  float* two_column_buffer = im2col_data;
 80223b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 80223b4:	f8bd 10b4 	ldrh.w	r1, [sp, #180]	; 0xb4
 80223b8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80223ba:	9106      	str	r1, [sp, #24]
  for (i = 0; i < input_width + 2; i++) {
 80223bc:	3301      	adds	r3, #1
    *two_column_buffer++ = pad_value;
 80223be:	ece2 7a01 	vstmia	r2!, {s15}
  for (i = 0; i < input_width + 2; i++) {
 80223c2:	4283      	cmp	r3, r0
 80223c4:	d1fa      	bne.n	80223bc <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x34>
 80223c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  }
  // Middle regions: left and right regions
  for (i = 0; i < input_height; i++) {
 80223c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80223ca:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80223ce:	b17e      	cbz	r6, 80223f0 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x68>
    *two_column_buffer++ = pad_value; // left
    two_column_buffer += input_width; // skip middle
 80223d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  for (i = 0; i < input_height; i++) {
 80223d2:	2100      	movs	r1, #0
    two_column_buffer += input_width; // skip middle
 80223d4:	009d      	lsls	r5, r3, #2
 80223d6:	4613      	mov	r3, r2
 80223d8:	3508      	adds	r5, #8
  for (i = 0; i < input_height; i++) {
 80223da:	3101      	adds	r1, #1
    *two_column_buffer++ = pad_value; // left
 80223dc:	edc3 7a00 	vstr	s15, [r3]
 80223e0:	442b      	add	r3, r5
  for (i = 0; i < input_height; i++) {
 80223e2:	42b1      	cmp	r1, r6
    *two_column_buffer++ = pad_value; // right
 80223e4:	ed43 7a01 	vstr	s15, [r3, #-4]
  for (i = 0; i < input_height; i++) {
 80223e8:	d1f7      	bne.n	80223da <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x52>
 80223ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223ec:	fb05 2203 	mla	r2, r5, r3, r2
 80223f0:	0083      	lsls	r3, r0, #2
 80223f2:	9301      	str	r3, [sp, #4]
 80223f4:	18d3      	adds	r3, r2, r3
  }
  // Bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 2; i++) {
    *two_column_buffer++ = pad_value;
 80223f6:	ece2 7a01 	vstmia	r2!, {s15}
  for (i = 0; i < input_width + 2; i++) {
 80223fa:	429a      	cmp	r2, r3
 80223fc:	d1fb      	bne.n	80223f6 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x6e>
  /* Setup the input_output_data regions for HWC->CHW buffers */
  const float* src;
  const int8_t* ksrc;
  float ksrc_transposed[9];

  for (c = 0; c < input_depth; c++) {
 80223fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022400:	2d00      	cmp	r5, #0
 8022402:	f000 811f 	beq.w	8022644 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x2bc>
 8022406:	9f03      	ldr	r7, [sp, #12]
 8022408:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 802240c:	9b06      	ldr	r3, [sp, #24]
    for (i = 0; i < input_height; i++) {
      two_column_buffer++;

      for (j = 0; j < input_width; j++) {
        *two_column_buffer++ = *src;
        src += input_depth;
 802240e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 8022412:	1eba      	subs	r2, r7, #2
 8022414:	4438      	add	r0, r7
 8022416:	0099      	lsls	r1, r3, #2
 8022418:	463e      	mov	r6, r7
 802241a:	0852      	lsrs	r2, r2, #1
 802241c:	1e6b      	subs	r3, r5, #1
 802241e:	fb06 f601 	mul.w	r6, r6, r1
    float* inplace_output = input_output_data;
    float* two_column_buffer_start = im2col_data;

    /* MAC Computation */
    for (i = 0; i < output_height; i++) {
      for (j = 0; j < output_width - 1; j+=2) {
 8022422:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 8022426:	3201      	adds	r2, #1
 8022428:	fb01 f100 	mul.w	r1, r1, r0
 802242c:	eb0b 0005 	add.w	r0, fp, r5
 8022430:	9605      	str	r6, [sp, #20]
 8022432:	00d2      	lsls	r2, r2, #3
 8022434:	910b      	str	r1, [sp, #44]	; 0x2c
 8022436:	9010      	str	r0, [sp, #64]	; 0x40
 8022438:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 802243c:	9208      	str	r2, [sp, #32]
 802243e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022440:	9611      	str	r6, [sp, #68]	; 0x44
 8022442:	fb02 f00b 	mul.w	r0, r2, fp
 8022446:	0092      	lsls	r2, r2, #2
 8022448:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 802244c:	9015      	str	r0, [sp, #84]	; 0x54
 802244e:	18e0      	adds	r0, r4, r3
 8022450:	9214      	str	r2, [sp, #80]	; 0x50
 8022452:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8022456:	9012      	str	r0, [sp, #72]	; 0x48
 8022458:	1e60      	subs	r0, r4, #1
 802245a:	920f      	str	r2, [sp, #60]	; 0x3c
 802245c:	900a      	str	r0, [sp, #40]	; 0x28
 802245e:	0070      	lsls	r0, r6, #1
 8022460:	9a01      	ldr	r2, [sp, #4]
 8022462:	9b06      	ldr	r3, [sp, #24]
 8022464:	1d11      	adds	r1, r2, #4
 8022466:	9013      	str	r0, [sp, #76]	; 0x4c
 8022468:	0052      	lsls	r2, r2, #1
 802246a:	f007 0001 	and.w	r0, r7, #1
 802246e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8022472:	9116      	str	r1, [sp, #88]	; 0x58
 8022474:	9004      	str	r0, [sp, #16]
 8022476:	9207      	str	r2, [sp, #28]
    for (i = 0; i < input_height; i++) {
 8022478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802247a:	b1db      	cbz	r3, 80224b4 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x12c>
 802247c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802247e:	b1ca      	cbz	r2, 80224b4 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x12c>
 8022480:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022482:	2400      	movs	r4, #0
 8022484:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022486:	469a      	mov	sl, r3
 8022488:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802248a:	1850      	adds	r0, r2, r1
 802248c:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8022490:	9f01      	ldr	r7, [sp, #4]
 8022492:	e9dd c914 	ldrd	ip, r9, [sp, #80]	; 0x50
      two_column_buffer++;
 8022496:	4602      	mov	r2, r0
 8022498:	eb0c 0600 	add.w	r6, ip, r0
 802249c:	462b      	mov	r3, r5
        *two_column_buffer++ = *src;
 802249e:	6819      	ldr	r1, [r3, #0]
        src += input_depth;
 80224a0:	445b      	add	r3, fp
        *two_column_buffer++ = *src;
 80224a2:	f842 1b04 	str.w	r1, [r2], #4
      for (j = 0; j < input_width; j++) {
 80224a6:	42b2      	cmp	r2, r6
 80224a8:	d1f9      	bne.n	802249e <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x116>
    for (i = 0; i < input_height; i++) {
 80224aa:	3401      	adds	r4, #1
 80224ac:	444d      	add	r5, r9
 80224ae:	4438      	add	r0, r7
 80224b0:	4554      	cmp	r4, sl
 80224b2:	d1f0      	bne.n	8022496 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x10e>
      ksrc_transposed[8 - i] = (float)*ksrc;
 80224b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80224b8:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 80224bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80224be:	ee04 2a90 	vmov	s9, r2
 80224c2:	565a      	ldrsb	r2, [r3, r1]
 80224c4:	930a      	str	r3, [sp, #40]	; 0x28
 80224c6:	ee06 2a90 	vmov	s13, r2
 80224ca:	f913 2011 	ldrsb.w	r2, [r3, r1, lsl #1]
 80224ce:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80224d2:	ee06 2a10 	vmov	s12, r2
 80224d6:	561a      	ldrsb	r2, [r3, r0]
 80224d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80224da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80224de:	ee05 2a90 	vmov	s11, r2
 80224e2:	f913 2021 	ldrsb.w	r2, [r3, r1, lsl #2]
 80224e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80224ea:	ee02 2a90 	vmov	s5, r2
 80224ee:	561a      	ldrsb	r2, [r3, r0]
 80224f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80224f2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80224f6:	ee05 2a10 	vmov	s10, r2
 80224fa:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80224fe:	561a      	ldrsb	r2, [r3, r0]
 8022500:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022502:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8022506:	ee04 2a10 	vmov	s8, r2
 802250a:	561a      	ldrsb	r2, [r3, r0]
 802250c:	f913 3031 	ldrsb.w	r3, [r3, r1, lsl #3]
 8022510:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8022514:	ee03 2a10 	vmov	s6, r2
 8022518:	ee03 3a90 	vmov	s7, r3
    for (i = 0; i < output_height; i++) {
 802251c:	9b02      	ldr	r3, [sp, #8]
      ksrc_transposed[8 - i] = (float)*ksrc;
 802251e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8022522:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    for (i = 0; i < output_height; i++) {
 8022526:	2b00      	cmp	r3, #0
 8022528:	f000 8084 	beq.w	8022634 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x2ac>
 802252c:	2300      	movs	r3, #0
 802252e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    float* two_column_buffer_start = im2col_data;
 8022532:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
    for (i = 0; i < output_height; i++) {
 8022536:	469a      	mov	sl, r3
 8022538:	469b      	mov	fp, r3
      for (j = 0; j < output_width - 1; j+=2) {
 802253a:	f1be 0f00 	cmp.w	lr, #0
 802253e:	dd6c      	ble.n	802261a <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x292>
 8022540:	9b06      	ldr	r3, [sp, #24]

        // We assume bias_data as zeros.
        float sum_0 = 0.0f;
        float sum_1 = 0.0f;
        transpose_depthwise_mac_kernel3_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022542:	4648      	mov	r0, r9
 8022544:	9a01      	ldr	r2, [sp, #4]
      for (j = 0; j < output_width - 1; j+=2) {
 8022546:	2500      	movs	r5, #0
 8022548:	fb03 f60b 	mul.w	r6, r3, fp
 802254c:	eb0c 0102 	add.w	r1, ip, r2
 8022550:	9a07      	ldr	r2, [sp, #28]
 8022552:	ebc6 7786 	rsb	r7, r6, r6, lsl #30
 8022556:	441e      	add	r6, r3
 8022558:	4462      	add	r2, ip
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 802255a:	4663      	mov	r3, ip
 802255c:	00bf      	lsls	r7, r7, #2
 802255e:	f8cd c000 	str.w	ip, [sp]
 8022562:	00b6      	lsls	r6, r6, #2
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
 8022564:	ed93 2a01 	vldr	s4, [r3, #4]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022568:	469c      	mov	ip, r3
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 802256a:	edd3 8a02 	vldr	s17, [r3, #8]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 802256e:	183c      	adds	r4, r7, r0
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022570:	ee22 7a03 	vmul.f32	s14, s4, s6
 8022574:	eddc 1a00 	vldr	s3, [ip]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 8022578:	ee68 7a83 	vmul.f32	s15, s17, s6
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 802257c:	edd3 aa03 	vldr	s21, [r3, #12]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 8022580:	468c      	mov	ip, r1
    *sum_1 += two_column_buffer[1] * ksrc_transposed[3];
 8022582:	ed91 8a01 	vldr	s16, [r1, #4]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022586:	eea1 7aa3 	vfma.f32	s14, s3, s7
    *sum_1 += two_column_buffer[2] * ksrc_transposed[4];
 802258a:	ed91 1a02 	vldr	s2, [r1, #8]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 802258e:	eee2 7a23 	vfma.f32	s15, s4, s7
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 8022592:	ed9c aa00 	vldr	s20, [ip]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[5];
 8022596:	edd1 9a03 	vldr	s19, [r1, #12]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 802259a:	4694      	mov	ip, r2
    *sum_1 += two_column_buffer[1] * ksrc_transposed[6];
 802259c:	edd2 1a01 	vldr	s3, [r2, #4]
      for (j = 0; j < output_width - 1; j+=2) {
 80225a0:	3502      	adds	r5, #2
    *sum_1 += two_column_buffer[2] * ksrc_transposed[7];
 80225a2:	ed92 2a02 	vldr	s4, [r2, #8]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 80225a6:	4434      	add	r4, r6
    *sum_1 += two_column_buffer[3] * ksrc_transposed[8];
 80225a8:	ed92 9a03 	vldr	s18, [r2, #12]
      for (j = 0; j < output_width - 1; j+=2) {
 80225ac:	4575      	cmp	r5, lr
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 80225ae:	eea8 7a84 	vfma.f32	s14, s17, s8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 80225b2:	eddc 8a00 	vldr	s17, [ip]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 80225b6:	eeea 7a84 	vfma.f32	s15, s21, s8
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 80225ba:	f103 0308 	add.w	r3, r3, #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 80225be:	f101 0108 	add.w	r1, r1, #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 80225c2:	f102 0208 	add.w	r2, r2, #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 80225c6:	eeaa 7a05 	vfma.f32	s14, s20, s10
    *sum_1 += two_column_buffer[1] * ksrc_transposed[3];
 80225ca:	eee8 7a05 	vfma.f32	s15, s16, s10
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
 80225ce:	eea8 7a22 	vfma.f32	s14, s16, s5
    *sum_1 += two_column_buffer[2] * ksrc_transposed[4];
 80225d2:	eee1 7a22 	vfma.f32	s15, s2, s5
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
 80225d6:	eea5 7a81 	vfma.f32	s14, s11, s2
    *sum_1 += two_column_buffer[3] * ksrc_transposed[5];
 80225da:	eee5 7aa9 	vfma.f32	s15, s11, s19
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 80225de:	eea6 7a28 	vfma.f32	s14, s12, s17
    *sum_1 += two_column_buffer[1] * ksrc_transposed[6];
 80225e2:	eee6 7a21 	vfma.f32	s15, s12, s3
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
 80225e6:	eea6 7aa1 	vfma.f32	s14, s13, s3
    *sum_1 += two_column_buffer[2] * ksrc_transposed[7];
 80225ea:	eee6 7a82 	vfma.f32	s15, s13, s4
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
 80225ee:	eea2 7a24 	vfma.f32	s14, s4, s9
    *sum_1 += two_column_buffer[3] * ksrc_transposed[8];
 80225f2:	eee9 7a24 	vfma.f32	s15, s18, s9
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 80225f6:	fe87 7a00 	vmaxnm.f32	s14, s14, s0
 80225fa:	fe87 7a60 	vminnm.f32	s14, s14, s1
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 80225fe:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022602:	ed80 7a00 	vstr	s14, [r0]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8022606:	fec7 7ae0 	vminnm.f32	s15, s15, s1
 802260a:	4440      	add	r0, r8
 802260c:	edc4 7a00 	vstr	s15, [r4]
      for (j = 0; j < output_width - 1; j+=2) {
 8022610:	dba8      	blt.n	8022564 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1dc>
 8022612:	f8dd c000 	ldr.w	ip, [sp]
 8022616:	9b08      	ldr	r3, [sp, #32]
 8022618:	449c      	add	ip, r3

        two_column_buffer_start += 2;
      }

      /* left-over because odd number of output pixels */
      if (output_width & 0x1) {
 802261a:	9b04      	ldr	r3, [sp, #16]
 802261c:	f10a 0a01 	add.w	sl, sl, #1
 8022620:	b9b3      	cbnz	r3, 8022650 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x2c8>
 8022622:	9b05      	ldr	r3, [sp, #20]

        two_column_buffer_start++;
      }
      /* End of MAC Computation */

      two_column_buffer_start += 2;
 8022624:	f10c 0c08 	add.w	ip, ip, #8
 8022628:	4499      	add	r9, r3
 802262a:	9b03      	ldr	r3, [sp, #12]
 802262c:	449b      	add	fp, r3
    for (i = 0; i < output_height; i++) {
 802262e:	9b02      	ldr	r3, [sp, #8]
 8022630:	4553      	cmp	r3, sl
 8022632:	d182      	bne.n	802253a <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1b2>
    }

    bias_data++;
    input_output_data++;
 8022634:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (c = 0; c < input_depth; c++) {
 8022636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    input_output_data++;
 8022638:	3304      	adds	r3, #4
 802263a:	9309      	str	r3, [sp, #36]	; 0x24
  for (c = 0; c < input_depth; c++) {
 802263c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802263e:	4293      	cmp	r3, r2
 8022640:	f47f af1a 	bne.w	8022478 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0xf0>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
} 
 8022644:	2000      	movs	r0, #0
 8022646:	b019      	add	sp, #100	; 0x64
 8022648:	ecbd 8b06 	vpop	{d8-d10}
 802264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022650:	eddc 7a01 	vldr	s15, [ip, #4]
 8022654:	ed9c 7a00 	vldr	s14, [ip]
 8022658:	ee63 7a27 	vmul.f32	s15, s6, s15
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 802265c:	ed9c 9a02 	vldr	s18, [ip, #8]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022660:	9a01      	ldr	r2, [sp, #4]
 8022662:	9903      	ldr	r1, [sp, #12]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022664:	eee7 7a23 	vfma.f32	s15, s14, s7
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022668:	eb0c 0302 	add.w	r3, ip, r2
 802266c:	448b      	add	fp, r1
 802266e:	9905      	ldr	r1, [sp, #20]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 8022670:	edd3 8a00 	vldr	s17, [r3]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022674:	189a      	adds	r2, r3, r2
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
 8022676:	ed93 8a01 	vldr	s16, [r3, #4]
      two_column_buffer_start += 2;
 802267a:	f10c 0c0c 	add.w	ip, ip, #12
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
 802267e:	ed93 1a02 	vldr	s2, [r3, #8]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 8022682:	edd2 1a00 	vldr	s3, [r2]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8022686:	eee9 7a04 	vfma.f32	s15, s18, s8
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
 802268a:	ed92 2a01 	vldr	s4, [r2, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
 802268e:	ed92 7a02 	vldr	s14, [r2, #8]
        inplace_output[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022694:	444b      	add	r3, r9
 8022696:	4489      	add	r9, r1
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
 8022698:	eee5 7a28 	vfma.f32	s15, s10, s17
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
 802269c:	eee8 7a22 	vfma.f32	s15, s16, s5
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
 80226a0:	eee5 7a81 	vfma.f32	s15, s11, s2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
 80226a4:	eee6 7a21 	vfma.f32	s15, s12, s3
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
 80226a8:	eee6 7a82 	vfma.f32	s15, s13, s4
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
 80226ac:	eee4 7a87 	vfma.f32	s15, s9, s14
 80226b0:	fec7 7a80 	vmaxnm.f32	s15, s15, s0
 80226b4:	fec7 7ae0 	vminnm.f32	s15, s15, s1
 80226b8:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < output_height; i++) {
 80226bc:	9b02      	ldr	r3, [sp, #8]
 80226be:	4553      	cmp	r3, sl
 80226c0:	f47f af3b 	bne.w	802253a <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x1b2>
 80226c4:	e7b6      	b.n	8022634 <transpose_depthwise_conv_fp_kernel3_stride1_inpad1_outpad0_IOHW_int8weight+0x2ac>
 80226c6:	bf00      	nop

080226c8 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight>:
tinyengine_status_fp transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight(float* input_output_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 80226c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226cc:	ed2d 8b10 	vpush	{d8-d15}
 80226d0:	b0bb      	sub	sp, #236	; 0xec
 80226d2:	eddd 7a5c 	vldr	s15, [sp, #368]	; 0x170
 80226d6:	f8bd 4160 	ldrh.w	r4, [sp, #352]	; 0x160
 80226da:	921a      	str	r2, [sp, #104]	; 0x68
 80226dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80226e0:	9119      	str	r1, [sp, #100]	; 0x64
 80226e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80226e4:	4613      	mov	r3, r2
 80226e6:	f8bd 115c 	ldrh.w	r1, [sp, #348]	; 0x15c
 80226ea:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 80226ec:	3304      	adds	r3, #4
 80226ee:	9015      	str	r0, [sp, #84]	; 0x54
 80226f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80226f2:	3208      	adds	r2, #8
 80226f4:	940c      	str	r4, [sp, #48]	; 0x30
  float* two_column_buffer = im2col_data;
  int i, j, c;

  /* Setup the padding regions for the buffer */
  // Top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 4; i++) {
 80226f6:	2100      	movs	r1, #0
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 80226f8:	f8bd 4164 	ldrh.w	r4, [sp, #356]	; 0x164
 80226fc:	9854      	ldr	r0, [sp, #336]	; 0x150
 80226fe:	ed8d 0a05 	vstr	s0, [sp, #20]
 8022702:	edcd 0a06 	vstr	s1, [sp, #24]
 8022706:	940f      	str	r4, [sp, #60]	; 0x3c
  for (i = 0; i < input_width + 4; i++) {
 8022708:	3101      	adds	r1, #1
    *two_column_buffer++ = pad_value;
 802270a:	ed42 7a02 	vstr	s15, [r2, #-8]
    *two_column_buffer++ = pad_value;
 802270e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8022712:	3208      	adds	r2, #8
  for (i = 0; i < input_width + 4; i++) {
 8022714:	4299      	cmp	r1, r3
 8022716:	d1f7      	bne.n	8022708 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x40>
 8022718:	9a5a      	ldr	r2, [sp, #360]	; 0x168
  }
  // Middle regions: left and right regions
  for (i = 0; i < input_height; i++) {
 802271a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 802271c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022720:	b1af      	cbz	r7, 802274e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x86>
    *two_column_buffer++ = pad_value; // left 1
    *two_column_buffer++ = pad_value; // left 2
    two_column_buffer += input_width; // skip middle
 8022722:	991a      	ldr	r1, [sp, #104]	; 0x68
  for (i = 0; i < input_height; i++) {
 8022724:	2500      	movs	r5, #0
    two_column_buffer += input_width; // skip middle
 8022726:	008e      	lsls	r6, r1, #2
 8022728:	4611      	mov	r1, r2
 802272a:	3610      	adds	r6, #16
 802272c:	1994      	adds	r4, r2, r6
  for (i = 0; i < input_height; i++) {
 802272e:	3501      	adds	r5, #1
    *two_column_buffer++ = pad_value; // left 1
 8022730:	edc1 7a00 	vstr	s15, [r1]
    *two_column_buffer++ = pad_value; // left 2
 8022734:	edc1 7a01 	vstr	s15, [r1, #4]
 8022738:	4431      	add	r1, r6
  for (i = 0; i < input_height; i++) {
 802273a:	42bd      	cmp	r5, r7
    *two_column_buffer++ = pad_value; // right 1
 802273c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8022740:	4434      	add	r4, r6
    *two_column_buffer++ = pad_value; // right 2
 8022742:	ed41 7a01 	vstr	s15, [r1, #-4]
  for (i = 0; i < input_height; i++) {
 8022746:	d1f2      	bne.n	802272e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x66>
 8022748:	9919      	ldr	r1, [sp, #100]	; 0x64
 802274a:	fb06 2201 	mla	r2, r6, r1, r2
 802274e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8022750:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8022754:	3208      	adds	r2, #8
 8022756:	3128      	adds	r1, #40	; 0x28
  }
  // Bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad_value
  for (i = 0; i < input_width + 4; i++) {
    *two_column_buffer++ = pad_value;
 8022758:	ed42 7a02 	vstr	s15, [r2, #-8]
 802275c:	3208      	adds	r2, #8
    *two_column_buffer++ = pad_value;
 802275e:	ed42 7a03 	vstr	s15, [r2, #-12]
  for (i = 0; i < input_width + 4; i++) {
 8022762:	4291      	cmp	r1, r2
 8022764:	d1f8      	bne.n	8022758 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x90>
  /* Setup the input_output_data regions for HWC->CHW buffers */
  const float* src;
  const int8_t* ksrc;
  float ksrc_transposed[25];

  for (c = 0; c < input_depth; c++) {
 8022766:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022768:	2900      	cmp	r1, #0
 802276a:	f000 8250 	beq.w	8022c0e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x546>
 802276e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    two_column_buffer = im2col_data + (input_width + 4) * 2;
 8022770:	00df      	lsls	r7, r3, #3
 8022772:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8022776:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022778:	1eb2      	subs	r2, r6, #2
 802277a:	9710      	str	r7, [sp, #64]	; 0x40
 802277c:	00a4      	lsls	r4, r4, #2
 802277e:	4435      	add	r5, r6
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022780:	009f      	lsls	r7, r3, #2
 8022782:	1841      	adds	r1, r0, r1
 8022784:	0852      	lsrs	r2, r2, #1
 8022786:	fb04 f505 	mul.w	r5, r4, r5
 802278a:	970a      	str	r7, [sp, #40]	; 0x28
    float* inplace_output = input_output_data;
    float* two_column_buffer_start = im2col_data;

    /* MAC Computation */
    for (i = 0; i < output_height; i++) {
      for (j = 0; j < output_width - 1; j+=2) {
 802278c:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8022790:	3201      	adds	r2, #1
        src += input_depth;
 8022792:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8022794:	9518      	str	r5, [sp, #96]	; 0x60
 8022796:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 802279a:	fb06 fc04 	mul.w	ip, r6, r4
 802279e:	00d5      	lsls	r5, r2, #3
 80227a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80227a2:	00da      	lsls	r2, r3, #3
 80227a4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80227a8:	009f      	lsls	r7, r3, #2
 80227aa:	9513      	str	r5, [sp, #76]	; 0x4c
 80227ac:	011b      	lsls	r3, r3, #4
 80227ae:	911b      	str	r1, [sp, #108]	; 0x6c
 80227b0:	19d5      	adds	r5, r2, r7
 80227b2:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80227b6:	9311      	str	r3, [sp, #68]	; 0x44
 80227b8:	f102 0308 	add.w	r3, r2, #8
 80227bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80227be:	931e      	str	r3, [sp, #120]	; 0x78
 80227c0:	fb02 f30a 	mul.w	r3, r2, sl
 80227c4:	9512      	str	r5, [sp, #72]	; 0x48
 80227c6:	931d      	str	r3, [sp, #116]	; 0x74
 80227c8:	f006 0301 	and.w	r3, r6, #1
 80227cc:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
 80227d0:	930d      	str	r3, [sp, #52]	; 0x34
 80227d2:	0093      	lsls	r3, r2, #2
 80227d4:	931c      	str	r3, [sp, #112]	; 0x70
    for (i = 0; i < input_height; i++) {
 80227d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80227d8:	b1f3      	cbz	r3, 8022818 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x150>
 80227da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80227dc:	b1e2      	cbz	r2, 8022818 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x150>
 80227de:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 80227e0:	2600      	movs	r6, #0
 80227e2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80227e4:	4698      	mov	r8, r3
 80227e6:	9101      	str	r1, [sp, #4]
 80227e8:	1915      	adds	r5, r2, r4
 80227ea:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80227ec:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 80227f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80227f2:	e9dd ce1c 	ldrd	ip, lr, [sp, #112]	; 0x70
      two_column_buffer += 2;
 80227f6:	462a      	mov	r2, r5
 80227f8:	eb0c 0405 	add.w	r4, ip, r5
 80227fc:	463b      	mov	r3, r7
        *two_column_buffer++ = *src;
 80227fe:	edd3 7a00 	vldr	s15, [r3]
        src += input_depth;
 8022802:	4453      	add	r3, sl
        *two_column_buffer++ = *src;
 8022804:	ece2 7a01 	vstmia	r2!, {s15}
      for (j = 0; j < input_width; j++) {
 8022808:	42a2      	cmp	r2, r4
 802280a:	d1f8      	bne.n	80227fe <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x136>
    for (i = 0; i < input_height; i++) {
 802280c:	3601      	adds	r6, #1
 802280e:	4477      	add	r7, lr
 8022810:	440d      	add	r5, r1
 8022812:	4546      	cmp	r6, r8
 8022814:	d1ef      	bne.n	80227f6 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x12e>
 8022816:	9901      	ldr	r1, [sp, #4]
    ksrc = filter_data++;
 8022818:	1c43      	adds	r3, r0, #1
 802281a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802281c:	9316      	str	r3, [sp, #88]	; 0x58
 802281e:	ab3a      	add	r3, sp, #232	; 0xe8
      ksrc_transposed[24 - i] = (float)*ksrc;
 8022820:	f990 0000 	ldrsb.w	r0, [r0]
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 8022824:	ac21      	add	r4, sp, #132	; 0x84
      ksrc_transposed[24 - i] = (float)*ksrc;
 8022826:	ee07 0a90 	vmov	s15, r0
      ksrc += input_depth;
 802282a:	4608      	mov	r0, r1
 802282c:	4411      	add	r1, r2
      ksrc_transposed[24 - i] = (float)*ksrc;
 802282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022832:	ed63 7a01 	vstmdb	r3!, {s15}
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 8022836:	429c      	cmp	r4, r3
 8022838:	d1f2      	bne.n	8022820 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x158>
    for (i = 0; i < output_height; i++) {
 802283a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802283c:	2b00      	cmp	r3, #0
 802283e:	f000 8146 	beq.w	8022ace <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x406>
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 8022842:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 8022846:	2300      	movs	r3, #0
 8022848:	9a15      	ldr	r2, [sp, #84]	; 0x54
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 802284a:	edcd 7a01 	vstr	s15, [sp, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 802284e:	eddd 7a37 	vldr	s15, [sp, #220]	; 0xdc
 8022852:	4692      	mov	sl, r2
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 8022854:	9308      	str	r3, [sp, #32]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 8022856:	edcd 7a02 	vstr	s15, [sp, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 802285a:	eddd 7a38 	vldr	s15, [sp, #224]	; 0xe0
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 802285e:	eddd da21 	vldr	s27, [sp, #132]	; 0x84
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 8022862:	edcd 7a03 	vstr	s15, [sp, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 8022866:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 802286a:	ed9d da22 	vldr	s26, [sp, #136]	; 0x88
 802286e:	9307      	str	r3, [sp, #28]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8022870:	eddd ca23 	vldr	s25, [sp, #140]	; 0x8c
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8022874:	ed9d ca24 	vldr	s24, [sp, #144]	; 0x90
    float* two_column_buffer_start = im2col_data;
 8022878:	f8dd e168 	ldr.w	lr, [sp, #360]	; 0x168
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 802287c:	eddd ba25 	vldr	s23, [sp, #148]	; 0x94
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022880:	ed9d ba26 	vldr	s22, [sp, #152]	; 0x98
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
 8022884:	eddd aa27 	vldr	s21, [sp, #156]	; 0x9c
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
 8022888:	ed9d aa28 	vldr	s20, [sp, #160]	; 0xa0
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
 802288c:	eddd 9a29 	vldr	s19, [sp, #164]	; 0xa4
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
 8022890:	ed9d 9a2a 	vldr	s18, [sp, #168]	; 0xa8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 8022894:	eddd 8a2b 	vldr	s17, [sp, #172]	; 0xac
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
 8022898:	ed9d 8a2c 	vldr	s16, [sp, #176]	; 0xb0
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
 802289c:	ed9d 0a2d 	vldr	s0, [sp, #180]	; 0xb4
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
 80228a0:	eddd 0a2e 	vldr	s1, [sp, #184]	; 0xb8
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
 80228a4:	ed9d 1a2f 	vldr	s2, [sp, #188]	; 0xbc
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 80228a8:	eddd 1a30 	vldr	s3, [sp, #192]	; 0xc0
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 80228ac:	ed9d 2a31 	vldr	s4, [sp, #196]	; 0xc4
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
 80228b0:	eddd 2a32 	vldr	s5, [sp, #200]	; 0xc8
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
 80228b4:	ed9d 3a33 	vldr	s6, [sp, #204]	; 0xcc
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
 80228b8:	eddd 3a34 	vldr	s7, [sp, #208]	; 0xd0
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 80228bc:	ed9d 4a35 	vldr	s8, [sp, #212]	; 0xd4
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 80228c0:	edcd 7a04 	vstr	s15, [sp, #16]
      for (j = 0; j < output_width - 1; j+=2) {
 80228c4:	f1b9 0f00 	cmp.w	r9, #0
 80228c8:	f340 80ef 	ble.w	8022aaa <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x3e2>
 80228cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

        // We assume bias_data as zeros.
        float sum_0 = 0.0f;
        float sum_1 = 0.0f;
        transpose_depthwise_mac_kernel5_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 80228ce:	4655      	mov	r5, sl
 80228d0:	9908      	ldr	r1, [sp, #32]
      for (j = 0; j < output_width - 1; j+=2) {
 80228d2:	2700      	movs	r7, #0
 80228d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228d6:	fb03 fc01 	mul.w	ip, r3, r1
 80228da:	eb0e 0402 	add.w	r4, lr, r2
 80228de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228e0:	ebcc 788c 	rsb	r8, ip, ip, lsl #30
 80228e4:	449c      	add	ip, r3
 80228e6:	eb0e 0002 	add.w	r0, lr, r2
 80228ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80228ee:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80228f2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80228f6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80228fa:	eb0e 0102 	add.w	r1, lr, r2
 80228fe:	eb0e 0203 	add.w	r2, lr, r3
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022902:	4673      	mov	r3, lr
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
 8022904:	edd3 5a01 	vldr	s11, [r3, #4]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022908:	469e      	mov	lr, r3
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 802290a:	ed93 5a02 	vldr	s10, [r3, #8]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 802290e:	eb08 0605 	add.w	r6, r8, r5
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022912:	ee25 7a8d 	vmul.f32	s14, s11, s26
 8022916:	ed9e 6a00 	vldr	s12, [lr]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 802291a:	ee6d 7a05 	vmul.f32	s15, s26, s10
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 802291e:	ed93 ea03 	vldr	s28, [r3, #12]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
 8022922:	edd3 6a04 	vldr	s13, [r3, #16]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022926:	46a6      	mov	lr, r4
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022928:	eea6 7a2d 	vfma.f32	s14, s12, s27
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 802292c:	edd3 ea05 	vldr	s29, [r3, #20]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 8022930:	eeed 7aa5 	vfma.f32	s15, s27, s11
    *sum_1 += two_column_buffer[1] * ksrc_transposed[5];
 8022934:	edd4 fa01 	vldr	s31, [r4, #4]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022938:	ed9e fa00 	vldr	s30, [lr]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 802293c:	4686      	mov	lr, r0
    *sum_1 += two_column_buffer[2] * ksrc_transposed[6];
 802293e:	ed94 6a02 	vldr	s12, [r4, #8]
      for (j = 0; j < output_width - 1; j+=2) {
 8022942:	3702      	adds	r7, #2
    *sum_1 += two_column_buffer[3] * ksrc_transposed[7];
 8022944:	edd4 4a03 	vldr	s9, [r4, #12]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8022948:	4466      	add	r6, ip
    *sum_1 += two_column_buffer[4] * ksrc_transposed[8];
 802294a:	edd4 5a04 	vldr	s11, [r4, #16]
      for (j = 0; j < output_width - 1; j+=2) {
 802294e:	454f      	cmp	r7, r9
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8022950:	eea5 7a2c 	vfma.f32	s14, s10, s25
    *sum_1 += two_column_buffer[5] * ksrc_transposed[9];
 8022954:	ed94 5a05 	vldr	s10, [r4, #20]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 8022958:	eeec 7a8e 	vfma.f32	s15, s25, s28
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 802295c:	f103 0308 	add.w	r3, r3, #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022960:	f104 0408 	add.w	r4, r4, #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 8022964:	f100 0008 	add.w	r0, r0, #8
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8022968:	eeae 7a0c 	vfma.f32	s14, s28, s24
    *sum_1 += two_column_buffer[1] * ksrc_transposed[10];
 802296c:	ed10 ea01 	vldr	s28, [r0, #-4]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
 8022970:	eeec 7a26 	vfma.f32	s15, s24, s13
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 8022974:	eea6 7aab 	vfma.f32	s14, s13, s23
    *sum_1 += two_column_buffer[3] * ksrc_transposed[12];
 8022978:	edd0 6a01 	vldr	s13, [r0, #4]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 802297c:	eeeb 7aae 	vfma.f32	s15, s23, s29
    *sum_1 += two_column_buffer[2] * ksrc_transposed[11];
 8022980:	edd0 ea00 	vldr	s29, [r0]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022984:	eeaf 7a0b 	vfma.f32	s14, s30, s22
    *sum_1 += two_column_buffer[4] * ksrc_transposed[13];
 8022988:	ed90 fa02 	vldr	s30, [r0, #8]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[5];
 802298c:	eeeb 7a2f 	vfma.f32	s15, s22, s31
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
 8022990:	eeaf 7aaa 	vfma.f32	s14, s31, s21
    *sum_1 += two_column_buffer[5] * ksrc_transposed[14];
 8022994:	edd0 fa03 	vldr	s31, [r0, #12]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[6];
 8022998:	eeea 7a86 	vfma.f32	s15, s21, s12
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
 802299c:	eea6 7a0a 	vfma.f32	s14, s12, s20
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 80229a0:	ed9e 6a00 	vldr	s12, [lr]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[7];
 80229a4:	eeea 7a24 	vfma.f32	s15, s20, s9
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 80229a8:	468e      	mov	lr, r1
 80229aa:	f101 0108 	add.w	r1, r1, #8
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
 80229ae:	eea4 7aa9 	vfma.f32	s14, s9, s19
    *sum_1 += two_column_buffer[1] * ksrc_transposed[15];
 80229b2:	ed51 4a01 	vldr	s9, [r1, #-4]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[8];
 80229b6:	eee9 7aa5 	vfma.f32	s15, s19, s11
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
 80229ba:	eea5 7a89 	vfma.f32	s14, s11, s18
    *sum_1 += two_column_buffer[3] * ksrc_transposed[17];
 80229be:	edd1 5a01 	vldr	s11, [r1, #4]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[9];
 80229c2:	eee9 7a05 	vfma.f32	s15, s18, s10
    *sum_1 += two_column_buffer[2] * ksrc_transposed[16];
 80229c6:	ed91 5a00 	vldr	s10, [r1]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 80229ca:	eea6 7a28 	vfma.f32	s14, s12, s17
    *sum_1 += two_column_buffer[4] * ksrc_transposed[18];
 80229ce:	ed91 6a02 	vldr	s12, [r1, #8]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[10];
 80229d2:	eee8 7a8e 	vfma.f32	s15, s17, s28
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
 80229d6:	eeae 7a08 	vfma.f32	s14, s28, s16
    *sum_1 += two_column_buffer[5] * ksrc_transposed[19];
 80229da:	ed91 ea03 	vldr	s28, [r1, #12]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[11];
 80229de:	eee8 7a2e 	vfma.f32	s15, s16, s29
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
 80229e2:	eeae 7a80 	vfma.f32	s14, s29, s0
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 80229e6:	edde ea00 	vldr	s29, [lr]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[12];
 80229ea:	eee0 7a26 	vfma.f32	s15, s0, s13
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 80229ee:	4696      	mov	lr, r2
 80229f0:	f102 0208 	add.w	r2, r2, #8
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
 80229f4:	eea6 7aa0 	vfma.f32	s14, s13, s1
    *sum_1 += two_column_buffer[1] * ksrc_transposed[20];
 80229f8:	ed52 6a01 	vldr	s13, [r2, #-4]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[13];
 80229fc:	eee0 7a8f 	vfma.f32	s15, s1, s30
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
 8022a00:	eeaf 7a01 	vfma.f32	s14, s30, s2
    *sum_1 += two_column_buffer[3] * ksrc_transposed[22];
 8022a04:	ed92 fa01 	vldr	s30, [r2, #4]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[14];
 8022a08:	eee1 7a2f 	vfma.f32	s15, s2, s31
    *sum_1 += two_column_buffer[2] * ksrc_transposed[21];
 8022a0c:	edd2 fa00 	vldr	s31, [r2]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 8022a10:	eeae 7aa1 	vfma.f32	s14, s29, s3
    *sum_1 += two_column_buffer[4] * ksrc_transposed[23];
 8022a14:	edd2 ea02 	vldr	s29, [r2, #8]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[15];
 8022a18:	eee1 7aa4 	vfma.f32	s15, s3, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 8022a1c:	eea4 7a82 	vfma.f32	s14, s9, s4
    *sum_1 += two_column_buffer[5] * ksrc_transposed[24];
 8022a20:	edd2 4a03 	vldr	s9, [r2, #12]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[16];
 8022a24:	eee2 7a05 	vfma.f32	s15, s4, s10
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
 8022a28:	eea5 7a22 	vfma.f32	s14, s10, s5
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 8022a2c:	ed9e 5a00 	vldr	s10, [lr]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[17];
 8022a30:	eee2 7aa5 	vfma.f32	s15, s5, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
 8022a34:	eea5 7a83 	vfma.f32	s14, s11, s6
    *sum_1 += two_column_buffer[4] * ksrc_transposed[18];
 8022a38:	eee3 7a06 	vfma.f32	s15, s6, s12
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
 8022a3c:	eea6 7a23 	vfma.f32	s14, s12, s7
    *sum_1 += two_column_buffer[2] * ksrc_transposed[21];
 8022a40:	ed9d 6a01 	vldr	s12, [sp, #4]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[19];
 8022a44:	eee3 7a8e 	vfma.f32	s15, s7, s28
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 8022a48:	eea5 7a04 	vfma.f32	s14, s10, s8
    *sum_1 += two_column_buffer[1] * ksrc_transposed[20];
 8022a4c:	eee4 7a26 	vfma.f32	s15, s8, s13
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 8022a50:	eea6 7a86 	vfma.f32	s14, s13, s12
    *sum_1 += two_column_buffer[3] * ksrc_transposed[22];
 8022a54:	eddd 6a02 	vldr	s13, [sp, #8]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[21];
 8022a58:	eee6 7a2f 	vfma.f32	s15, s12, s31
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 8022a5c:	eeaf 7aa6 	vfma.f32	s14, s31, s13
    *sum_1 += two_column_buffer[3] * ksrc_transposed[22];
 8022a60:	eee6 7a8f 	vfma.f32	s15, s13, s30
    *sum_1 += two_column_buffer[4] * ksrc_transposed[23];
 8022a64:	eddd 6a03 	vldr	s13, [sp, #12]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8022a68:	ed9d 6a06 	vldr	s12, [sp, #24]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 8022a6c:	eeaf 7a26 	vfma.f32	s14, s30, s13
    *sum_1 += two_column_buffer[4] * ksrc_transposed[23];
 8022a70:	eee6 7aae 	vfma.f32	s15, s13, s29
    *sum_1 += two_column_buffer[5] * ksrc_transposed[24];
 8022a74:	eddd 6a04 	vldr	s13, [sp, #16]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 8022a78:	eeae 7aa6 	vfma.f32	s14, s29, s13
    *sum_1 += two_column_buffer[5] * ksrc_transposed[24];
 8022a7c:	eee6 7aa4 	vfma.f32	s15, s13, s9
 8022a80:	eddd 6a05 	vldr	s13, [sp, #20]
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022a84:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
 8022a88:	fe87 7a46 	vminnm.f32	s14, s14, s12
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8022a8c:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
        inplace_output[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022a90:	ed85 7a00 	vstr	s14, [r5]
        inplace_output[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8022a94:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8022a98:	445d      	add	r5, fp
 8022a9a:	edc6 7a00 	vstr	s15, [r6]
      for (j = 0; j < output_width - 1; j+=2) {
 8022a9e:	f6ff af31 	blt.w	8022904 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x23c>
 8022aa2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022aa8:	449e      	add	lr, r3
 8022aaa:	9b07      	ldr	r3, [sp, #28]
 8022aac:	3301      	adds	r3, #1
 8022aae:	9307      	str	r3, [sp, #28]

        two_column_buffer_start += 2;
      }

      /* left-over because odd number of output pixels */
      if (output_width & 0x1) {
 8022ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022ab2:	b9c3      	cbnz	r3, 8022ae6 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x41e>
 8022ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38

        two_column_buffer_start++;
      }
      /* End of MAC Computation */

      two_column_buffer_start += 4;
 8022ab6:	f10e 0e10 	add.w	lr, lr, #16
 8022aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022abc:	449a      	add	sl, r3
 8022abe:	9b08      	ldr	r3, [sp, #32]
 8022ac0:	4413      	add	r3, r2
    for (i = 0; i < output_height; i++) {
 8022ac2:	9a07      	ldr	r2, [sp, #28]
 8022ac4:	9308      	str	r3, [sp, #32]
 8022ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ac8:	4293      	cmp	r3, r2
 8022aca:	f47f aefb 	bne.w	80228c4 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x1fc>
    }

    bias_data++;
    input_output_data++;
 8022ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
  for (c = 0; c < input_depth; c++) {
 8022ad0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    input_output_data++;
 8022ad2:	3304      	adds	r3, #4
 8022ad4:	9315      	str	r3, [sp, #84]	; 0x54
  for (c = 0; c < input_depth; c++) {
 8022ad6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022ad8:	4293      	cmp	r3, r2
 8022ada:	f000 8098 	beq.w	8022c0e <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x546>
 8022ade:	4618      	mov	r0, r3
 8022ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022ae2:	18c1      	adds	r1, r0, r3
 8022ae4:	e677      	b.n	80227d6 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x10e>
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022ae6:	edde 7a01 	vldr	s15, [lr, #4]
 8022aea:	ed9e 6a00 	vldr	s12, [lr]
 8022aee:	ee6d 7a27 	vmul.f32	s15, s26, s15
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8022af2:	edde 6a02 	vldr	s13, [lr, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8022af6:	ed9e 7a03 	vldr	s14, [lr, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 8022afa:	edde 5a04 	vldr	s11, [lr, #16]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022afe:	eeed 7a86 	vfma.f32	s15, s27, s12
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022b02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022b04:	9a08      	ldr	r2, [sp, #32]
 8022b06:	eb0e 0104 	add.w	r1, lr, r4
 8022b0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022b0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
      two_column_buffer_start += 4;
 8022b0e:	f10e 0e14 	add.w	lr, lr, #20
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022b12:	ed91 6a00 	vldr	s12, [r1]
 8022b16:	4402      	add	r2, r0
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
 8022b18:	edd1 4a01 	vldr	s9, [r1, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8022b1c:	eeec 7aa6 	vfma.f32	s15, s25, s13
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
 8022b20:	ed91 ea02 	vldr	s28, [r1, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
 8022b24:	edd1 6a03 	vldr	s13, [r1, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
 8022b28:	ed91 5a04 	vldr	s10, [r1, #16]
 8022b2c:	9208      	str	r2, [sp, #32]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022b2e:	190a      	adds	r2, r1, r4
        inplace_output[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022b30:	9818      	ldr	r0, [sp, #96]	; 0x60
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
 8022b32:	edd2 ea01 	vldr	s29, [r2, #4]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022b36:	1913      	adds	r3, r2, r4
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8022b38:	eeec 7a07 	vfma.f32	s15, s24, s14
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 8022b3c:	ed92 7a00 	vldr	s14, [r2]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
 8022b40:	edd2 fa04 	vldr	s31, [r2, #16]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022b44:	1919      	adds	r1, r3, r4
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
 8022b46:	ed93 fa02 	vldr	s30, [r3, #8]
 8022b4a:	4450      	add	r0, sl
 8022b4c:	44aa      	add	sl, r5
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 8022b4e:	eeeb 7aa5 	vfma.f32	s15, s23, s11
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
 8022b52:	edd2 5a02 	vldr	s11, [r2, #8]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
 8022b56:	eeeb 7a06 	vfma.f32	s15, s22, s12
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
 8022b5a:	ed92 6a03 	vldr	s12, [r2, #12]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
 8022b5e:	eeea 7aa4 	vfma.f32	s15, s21, s9
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 8022b62:	edd3 4a00 	vldr	s9, [r3]
 8022b66:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
 8022b6a:	edd3 4a04 	vldr	s9, [r3, #16]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
 8022b6e:	eeea 7a0e 	vfma.f32	s15, s20, s28
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 8022b72:	ed93 ea01 	vldr	s28, [r3, #4]
 8022b76:	ed8d ea14 	vstr	s28, [sp, #80]	; 0x50
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
 8022b7a:	ed93 ea03 	vldr	s28, [r3, #12]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
 8022b7e:	eee9 7aa6 	vfma.f32	s15, s19, s13
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 8022b82:	edd1 6a03 	vldr	s13, [r1, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
 8022b86:	eee9 7a05 	vfma.f32	s15, s18, s10
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 8022b8a:	ed91 5a00 	vldr	s10, [r1]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
 8022b8e:	eee8 7a87 	vfma.f32	s15, s17, s14
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
 8022b92:	eee8 7a2e 	vfma.f32	s15, s16, s29
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
 8022b96:	eee0 7a25 	vfma.f32	s15, s0, s11
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 8022b9a:	edd1 5a01 	vldr	s11, [r1, #4]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
 8022b9e:	eee0 7a86 	vfma.f32	s15, s1, s12
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 8022ba2:	ed91 6a02 	vldr	s12, [r1, #8]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 8022ba6:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 8022baa:	eddd ea14 	vldr	s29, [sp, #80]	; 0x50
    for (i = 0; i < output_height; i++) {
 8022bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bb0:	9a07      	ldr	r2, [sp, #28]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
 8022bb2:	eee1 7a2f 	vfma.f32	s15, s2, s31
 8022bb6:	4293      	cmp	r3, r2
    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
 8022bb8:	eee1 7a87 	vfma.f32	s15, s3, s14
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 8022bbc:	ed91 7a04 	vldr	s14, [r1, #16]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
 8022bc0:	eee2 7a2e 	vfma.f32	s15, s4, s29
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
 8022bc4:	eee2 7a8f 	vfma.f32	s15, s5, s30
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
 8022bc8:	eee3 7a0e 	vfma.f32	s15, s6, s28
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
 8022bcc:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
 8022bd0:	eee4 7a05 	vfma.f32	s15, s8, s10
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
 8022bd4:	ed9d 5a01 	vldr	s10, [sp, #4]
 8022bd8:	eee5 7a25 	vfma.f32	s15, s10, s11
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
 8022bdc:	eddd 5a02 	vldr	s11, [sp, #8]
 8022be0:	eee5 7a86 	vfma.f32	s15, s11, s12
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
 8022be4:	ed9d 6a03 	vldr	s12, [sp, #12]
 8022be8:	eee6 7a26 	vfma.f32	s15, s12, s13
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
 8022bec:	eddd 6a04 	vldr	s13, [sp, #16]
 8022bf0:	eee6 7a87 	vfma.f32	s15, s13, s14
        inplace_output[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022bf4:	ed9d 7a05 	vldr	s14, [sp, #20]
 8022bf8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8022bfc:	ed9d 7a06 	vldr	s14, [sp, #24]
 8022c00:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8022c04:	edc0 7a00 	vstr	s15, [r0]
    for (i = 0; i < output_height; i++) {
 8022c08:	f47f ae5c 	bne.w	80228c4 <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x1fc>
 8022c0c:	e75f      	b.n	8022ace <transpose_depthwise_conv_fp_kernel5_stride1_inpad2_outpad0_IOHW_int8weight+0x406>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
} 
 8022c0e:	2000      	movs	r0, #0
 8022c10:	b03b      	add	sp, #236	; 0xec
 8022c12:	ecbd 8b10 	vpop	{d8-d15}
 8022c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c1a:	bf00      	nop

08022c1c <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight>:
tinyengine_status_fp transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight(float* input_data, 
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const int8_t* filter_data, const float* bias_data, 
                 float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 8022c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c20:	ed2d 8b10 	vpush	{d8-d15}
 8022c24:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8022c28:	469a      	mov	sl, r3
 8022c2a:	9053      	str	r0, [sp, #332]	; 0x14c
  float* two_column_buffer = im2col_data;
  int i, j, c;

  /* Setup the padding regions for the buffer */
  // Top region
  for (i = 0; i < input_width * 2 + 6; i++) {
 8022c2c:	1cd0      	adds	r0, r2, #3
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 8022c2e:	9157      	str	r1, [sp, #348]	; 0x15c
  for (i = 0; i < input_width * 2 + 6; i++) {
 8022c30:	0041      	lsls	r1, r0, #1
                 float* im2col_data, const uint16_t batches, const int pad_value) {
 8022c32:	f8bd 42b4 	ldrh.w	r4, [sp, #692]	; 0x2b4
 8022c36:	9256      	str	r2, [sp, #344]	; 0x158
 8022c38:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8022c3c:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
 8022c3e:	eddd 7ab2 	vldr	s15, [sp, #712]	; 0x2c8
 8022c42:	320c      	adds	r2, #12
 8022c44:	009b      	lsls	r3, r3, #2
 8022c46:	9447      	str	r4, [sp, #284]	; 0x11c
 8022c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022c4c:	f8bd 42b8 	ldrh.w	r4, [sp, #696]	; 0x2b8
 8022c50:	f8bd 52bc 	ldrh.w	r5, [sp, #700]	; 0x2bc
 8022c54:	9448      	str	r4, [sp, #288]	; 0x120
 8022c56:	18d4      	adds	r4, r2, r3
 8022c58:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8022c5a:	ed8d 0a3e 	vstr	s0, [sp, #248]	; 0xf8
 8022c5e:	edcd 0a3f 	vstr	s1, [sp, #252]	; 0xfc
 8022c62:	954b      	str	r5, [sp, #300]	; 0x12c
    *two_column_buffer++ = pad_value;
 8022c64:	ed42 7a03 	vstr	s15, [r2, #-12]
 8022c68:	320c      	adds	r2, #12
    *two_column_buffer++ = pad_value;
 8022c6a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
    *two_column_buffer++ = pad_value;
 8022c6e:	ed42 7a04 	vstr	s15, [r2, #-16]
  for (i = 0; i < input_width * 2 + 6; i++) {
 8022c72:	4294      	cmp	r4, r2
 8022c74:	d1f6      	bne.n	8022c64 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x48>
 8022c76:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
 8022c78:	4413      	add	r3, r2
  }
  // Middle regions: Pad the size of (input_height * 2) * (input_width * 2 + 2)
  for (i = 0; i < input_height; i++) {
 8022c7a:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8022c7c:	b362      	cbz	r2, 8022cd8 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xbc>
 8022c7e:	9c56      	ldr	r4, [sp, #344]	; 0x158
 8022c80:	008e      	lsls	r6, r1, #2
 8022c82:	4696      	mov	lr, r2
 8022c84:	00e5      	lsls	r5, r4, #3
 8022c86:	2400      	movs	r4, #0
 8022c88:	f105 0708 	add.w	r7, r5, #8
 8022c8c:	46a8      	mov	r8, r5
 8022c8e:	9d56      	ldr	r5, [sp, #344]	; 0x158
    // First type of middle
    *two_column_buffer++ = pad_value;
 8022c90:	461a      	mov	r2, r3
 8022c92:	ee17 ca90 	vmov	ip, s15
 8022c96:	f842 cb08 	str.w	ip, [r2], #8
    *two_column_buffer++ = pad_value;
 8022c9a:	edc3 7a01 	vstr	s15, [r3, #4]
    for (j = 0; j < input_width; j++) {
 8022c9e:	b145      	cbz	r5, 8022cb2 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x96>
 8022ca0:	3310      	adds	r3, #16
 8022ca2:	eb02 0c07 	add.w	ip, r2, r7
      *two_column_buffer = pad_value;
 8022ca6:	ed43 7a02 	vstr	s15, [r3, #-8]
 8022caa:	3308      	adds	r3, #8
    for (j = 0; j < input_width; j++) {
 8022cac:	459c      	cmp	ip, r3
 8022cae:	d1fa      	bne.n	8022ca6 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x8a>
 8022cb0:	4442      	add	r2, r8
      two_column_buffer += 2;
    }
    *two_column_buffer++ = pad_value;
    *two_column_buffer++ = pad_value;
    *two_column_buffer++ = pad_value;
    *two_column_buffer++ = pad_value;
 8022cb2:	f102 0310 	add.w	r3, r2, #16
    *two_column_buffer++ = pad_value;
 8022cb6:	edc2 7a00 	vstr	s15, [r2]
    *two_column_buffer++ = pad_value;
 8022cba:	edc2 7a01 	vstr	s15, [r2, #4]
 8022cbe:	eb03 0c06 	add.w	ip, r3, r6
    *two_column_buffer++ = pad_value;
 8022cc2:	edc2 7a02 	vstr	s15, [r2, #8]
    *two_column_buffer++ = pad_value;
 8022cc6:	edc2 7a03 	vstr	s15, [r2, #12]

    // Second type of middle
    for (j = 0; j < input_width * 2 + 6; j++) {
      *two_column_buffer++ = pad_value;
 8022cca:	ece3 7a01 	vstmia	r3!, {s15}
    for (j = 0; j < input_width * 2 + 6; j++) {
 8022cce:	4563      	cmp	r3, ip
 8022cd0:	d1fb      	bne.n	8022cca <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xae>
  for (i = 0; i < input_height; i++) {
 8022cd2:	3401      	adds	r4, #1
 8022cd4:	4574      	cmp	r4, lr
 8022cd6:	d1db      	bne.n	8022c90 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x74>
 8022cd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022cdc:	f103 020c 	add.w	r2, r3, #12
 8022ce0:	0089      	lsls	r1, r1, #2
 8022ce2:	f101 040c 	add.w	r4, r1, #12
 8022ce6:	4423      	add	r3, r4
    }
  }
  // Bottom region
  for (i = 0; i < input_width * 2 + 6; i++) {
    *two_column_buffer++ = pad_value;
 8022ce8:	ed42 7a03 	vstr	s15, [r2, #-12]
 8022cec:	320c      	adds	r2, #12
    *two_column_buffer++ = pad_value;
 8022cee:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
    *two_column_buffer++ = pad_value;
 8022cf2:	ed42 7a04 	vstr	s15, [r2, #-16]
  for (i = 0; i < input_width * 2 + 6; i++) {
 8022cf6:	4293      	cmp	r3, r2
 8022cf8:	d1f6      	bne.n	8022ce8 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xcc>
  /* Setup the input_data regions for HWC->CHW buffers */
  const float* src;
  const int8_t* ksrc;
  float ksrc_transposed[49];

  for (c = 0; c < input_depth; c++) {
 8022cfa:	f1ba 0f00 	cmp.w	sl, #0
 8022cfe:	f000 84f8 	beq.w	80236f2 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xad6>
 8022d02:	9f48      	ldr	r7, [sp, #288]	; 0x120
 8022d04:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 8022d08:	9d56      	ldr	r5, [sp, #344]	; 0x158
      two_column_buffer += 3;

      for (j = 0; j < input_width; j++) {
        *two_column_buffer = *src;
        two_column_buffer += 2;
        src += input_depth;
 8022d0a:	ea4f 0c8a 	mov.w	ip, sl, lsl #2
 8022d0e:	1eba      	subs	r2, r7, #2
 8022d10:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8022d12:	006d      	lsls	r5, r5, #1
 8022d14:	443c      	add	r4, r7
 8022d16:	0852      	lsrs	r2, r2, #1
 8022d18:	f8cd c164 	str.w	ip, [sp, #356]	; 0x164
 8022d1c:	3506      	adds	r5, #6
 8022d1e:	009e      	lsls	r6, r3, #2
 8022d20:	f102 0e01 	add.w	lr, r2, #1
 8022d24:	eb00 0c0a 	add.w	ip, r0, sl
 8022d28:	00ab      	lsls	r3, r5, #2
 8022d2a:	f50d 7bbe 	add.w	fp, sp, #380	; 0x17c
 8022d2e:	012a      	lsls	r2, r5, #4
 8022d30:	f8cd c160 	str.w	ip, [sp, #352]	; 0x160
 8022d34:	9346      	str	r3, [sp, #280]	; 0x118
 8022d36:	00eb      	lsls	r3, r5, #3
 8022d38:	924c      	str	r2, [sp, #304]	; 0x130
    two_column_buffer = im2col_data + (input_width * 2 + 6) * 3;
 8022d3a:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
 8022d3c:	461d      	mov	r5, r3
 8022d3e:	934f      	str	r3, [sp, #316]	; 0x13c
 8022d40:	1851      	adds	r1, r2, r1
 8022d42:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8022d44:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 8022d46:	915b      	str	r1, [sp, #364]	; 0x16c
 8022d48:	18e9      	adds	r1, r5, r3
 8022d4a:	441a      	add	r2, r3
 8022d4c:	9d56      	ldr	r5, [sp, #344]	; 0x158
 8022d4e:	914d      	str	r1, [sp, #308]	; 0x134
 8022d50:	924e      	str	r2, [sp, #312]	; 0x138
 8022d52:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8022d56:	0129      	lsls	r1, r5, #4
 8022d58:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8022d5a:	9250      	str	r2, [sp, #320]	; 0x140
 8022d5c:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8022d5e:	00db      	lsls	r3, r3, #3
 8022d60:	f8cd a150 	str.w	sl, [sp, #336]	; 0x150
 8022d64:	0052      	lsls	r2, r2, #1
 8022d66:	9340      	str	r3, [sp, #256]	; 0x100
 8022d68:	4663      	mov	r3, ip
 8022d6a:	9251      	str	r2, [sp, #324]	; 0x144
 8022d6c:	4632      	mov	r2, r6
 8022d6e:	fb06 f604 	mul.w	r6, r6, r4
 8022d72:	9c59      	ldr	r4, [sp, #356]	; 0x164
 8022d74:	fb07 f202 	mul.w	r2, r7, r2
 8022d78:	9655      	str	r6, [sp, #340]	; 0x154
 8022d7a:	924a      	str	r2, [sp, #296]	; 0x128
 8022d7c:	462a      	mov	r2, r5
 8022d7e:	fb02 f204 	mul.w	r2, r2, r4
 8022d82:	925c      	str	r2, [sp, #368]	; 0x170
 8022d84:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8022d88:	925d      	str	r2, [sp, #372]	; 0x174
      }

      two_column_buffer += input_width * 2 + 9;
 8022d8a:	00ea      	lsls	r2, r5, #3
 8022d8c:	925a      	str	r2, [sp, #360]	; 0x168
    float* out = output_data;
    float* two_column_buffer_start = im2col_data;

    /* MAC Computation */
    for (i = 0; i < output_height; i++) {
      for (j = 0; j < output_width - 1; j+=2) {
 8022d8e:	1e7a      	subs	r2, r7, #1
 8022d90:	9244      	str	r2, [sp, #272]	; 0x110
 8022d92:	f007 0201 	and.w	r2, r7, #1
 8022d96:	9249      	str	r2, [sp, #292]	; 0x124
    for (i = 0; i < input_height; i++) {
 8022d98:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8022d9a:	b1f2      	cbz	r2, 8022dda <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1be>
 8022d9c:	9956      	ldr	r1, [sp, #344]	; 0x158
 8022d9e:	b1e1      	cbz	r1, 8022dda <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1be>
 8022da0:	9301      	str	r3, [sp, #4]
 8022da2:	2600      	movs	r6, #0
 8022da4:	9f53      	ldr	r7, [sp, #332]	; 0x14c
 8022da6:	4690      	mov	r8, r2
    two_column_buffer = im2col_data + (input_width * 2 + 6) * 3;
 8022da8:	9d5b      	ldr	r5, [sp, #364]	; 0x16c
    for (i = 0; i < input_height; i++) {
 8022daa:	f8dd c164 	ldr.w	ip, [sp, #356]	; 0x164
 8022dae:	f8dd e170 	ldr.w	lr, [sp, #368]	; 0x170
 8022db2:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8022db4:	f8dd 9174 	ldr.w	r9, [sp, #372]	; 0x174
 8022db8:	18ec      	adds	r4, r5, r3
 8022dba:	462a      	mov	r2, r5
 8022dbc:	4639      	mov	r1, r7
        *two_column_buffer = *src;
 8022dbe:	edd1 7a00 	vldr	s15, [r1]
 8022dc2:	3208      	adds	r2, #8
        src += input_depth;
 8022dc4:	4461      	add	r1, ip
        *two_column_buffer = *src;
 8022dc6:	edc2 7a01 	vstr	s15, [r2, #4]
      for (j = 0; j < input_width; j++) {
 8022dca:	4294      	cmp	r4, r2
 8022dcc:	d1f7      	bne.n	8022dbe <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1a2>
    for (i = 0; i < input_height; i++) {
 8022dce:	3601      	adds	r6, #1
 8022dd0:	4477      	add	r7, lr
      two_column_buffer += input_width * 2 + 9;
 8022dd2:	444d      	add	r5, r9
    for (i = 0; i < input_height; i++) {
 8022dd4:	4546      	cmp	r6, r8
 8022dd6:	d1ef      	bne.n	8022db8 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x19c>
 8022dd8:	9b01      	ldr	r3, [sp, #4]
    ksrc = filter_data++;
 8022dda:	1c42      	adds	r2, r0, #1
 8022ddc:	f8dd a150 	ldr.w	sl, [sp, #336]	; 0x150
 8022de0:	9252      	str	r2, [sp, #328]	; 0x148
 8022de2:	aa90      	add	r2, sp, #576	; 0x240
      ksrc_transposed[48 - i] = (float)*ksrc;
 8022de4:	f990 1000 	ldrsb.w	r1, [r0]
      ksrc += input_depth;
 8022de8:	4618      	mov	r0, r3
 8022dea:	4453      	add	r3, sl
      ksrc_transposed[48 - i] = (float)*ksrc;
 8022dec:	ee07 1a90 	vmov	s15, r1
 8022df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022df4:	ed62 7a01 	vstmdb	r2!, {s15}
    for (i = 0; i < DIM_KER_Y * DIM_KER_X; i++) {
 8022df8:	4593      	cmp	fp, r2
 8022dfa:	d1f3      	bne.n	8022de4 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x1c8>
    for (i = 0; i < output_height; i++) {
 8022dfc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	f000 831d 	beq.w	802343e <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x822>
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 8022e04:	eddd 7a5f 	vldr	s15, [sp, #380]	; 0x17c
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 8022e08:	2300      	movs	r3, #0
 8022e0a:	9aac      	ldr	r2, [sp, #688]	; 0x2b0
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
 8022e0c:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022e10:	eddd 7a60 	vldr	s15, [sp, #384]	; 0x180
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 8022e14:	9342      	str	r3, [sp, #264]	; 0x108
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022e16:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8022e1a:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 8022e1e:	9243      	str	r2, [sp, #268]	; 0x10c
 8022e20:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8022e24:	eddd 7a62 	vldr	s15, [sp, #392]	; 0x188
 8022e28:	9341      	str	r3, [sp, #260]	; 0x104
 8022e2a:	edcd 7a03 	vstr	s15, [sp, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 8022e2e:	eddd 7a63 	vldr	s15, [sp, #396]	; 0x18c
    float* two_column_buffer_start = im2col_data;
 8022e32:	f8dd 92c0 	ldr.w	r9, [sp, #704]	; 0x2c0
 8022e36:	edcd 7a04 	vstr	s15, [sp, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 8022e3a:	eddd 7a64 	vldr	s15, [sp, #400]	; 0x190
 8022e3e:	edcd 7a05 	vstr	s15, [sp, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 8022e42:	eddd 7a65 	vldr	s15, [sp, #404]	; 0x194
 8022e46:	edcd 7a06 	vstr	s15, [sp, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 8022e4a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8022e4e:	edcd 7a07 	vstr	s15, [sp, #28]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 8022e52:	eddd 7a67 	vldr	s15, [sp, #412]	; 0x19c
 8022e56:	edcd 7a08 	vstr	s15, [sp, #32]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
 8022e5a:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 8022e5e:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 8022e62:	eddd 7a69 	vldr	s15, [sp, #420]	; 0x1a4
 8022e66:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 8022e6a:	eddd 7a6a 	vldr	s15, [sp, #424]	; 0x1a8
 8022e6e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 8022e72:	eddd 7a6b 	vldr	s15, [sp, #428]	; 0x1ac
 8022e76:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 8022e7a:	eddd 7a6c 	vldr	s15, [sp, #432]	; 0x1b0
 8022e7e:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 8022e82:	eddd 7a6d 	vldr	s15, [sp, #436]	; 0x1b4
 8022e86:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 8022e8a:	eddd 7a6e 	vldr	s15, [sp, #440]	; 0x1b8
 8022e8e:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 8022e92:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8022e96:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 8022e9a:	eddd 7a70 	vldr	s15, [sp, #448]	; 0x1c0
 8022e9e:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 8022ea2:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8022ea6:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 8022eaa:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8022eae:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 8022eb2:	eddd 7a73 	vldr	s15, [sp, #460]	; 0x1cc
 8022eb6:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 8022eba:	eddd 7a74 	vldr	s15, [sp, #464]	; 0x1d0
 8022ebe:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 8022ec2:	eddd 7a75 	vldr	s15, [sp, #468]	; 0x1d4
 8022ec6:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 8022eca:	eddd 7a76 	vldr	s15, [sp, #472]	; 0x1d8
 8022ece:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 8022ed2:	eddd 7a77 	vldr	s15, [sp, #476]	; 0x1dc
 8022ed6:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
 8022eda:	eddd 7a78 	vldr	s15, [sp, #480]	; 0x1e0
 8022ede:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 8022ee2:	eddd 7a79 	vldr	s15, [sp, #484]	; 0x1e4
 8022ee6:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 8022eea:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 8022eee:	edcd 7a28 	vstr	s15, [sp, #160]	; 0xa0
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 8022ef2:	eddd 7a7b 	vldr	s15, [sp, #492]	; 0x1ec
 8022ef6:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 8022efa:	eddd 7a7c 	vldr	s15, [sp, #496]	; 0x1f0
 8022efe:	edcd 7a2a 	vstr	s15, [sp, #168]	; 0xa8
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 8022f02:	eddd 7a7d 	vldr	s15, [sp, #500]	; 0x1f4
 8022f06:	edcd 7a2b 	vstr	s15, [sp, #172]	; 0xac
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 8022f0a:	eddd 7a7e 	vldr	s15, [sp, #504]	; 0x1f8
 8022f0e:	edcd 7a2c 	vstr	s15, [sp, #176]	; 0xb0
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 8022f12:	eddd 7a7f 	vldr	s15, [sp, #508]	; 0x1fc
 8022f16:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 8022f1a:	eddd 7a80 	vldr	s15, [sp, #512]	; 0x200
 8022f1e:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 8022f22:	eddd 7a81 	vldr	s15, [sp, #516]	; 0x204
 8022f26:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 8022f2a:	eddd 7a82 	vldr	s15, [sp, #520]	; 0x208
 8022f2e:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 8022f32:	eddd 7a83 	vldr	s15, [sp, #524]	; 0x20c
 8022f36:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 8022f3a:	eddd 7a84 	vldr	s15, [sp, #528]	; 0x210
 8022f3e:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 8022f42:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 8022f46:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 8022f4a:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 8022f4e:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 8022f52:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 8022f56:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
 8022f5a:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 8022f5e:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 8022f62:	eddd 7a89 	vldr	s15, [sp, #548]	; 0x224
 8022f66:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
 8022f6a:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 8022f6e:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
 8022f72:	eddd 7a8b 	vldr	s15, [sp, #556]	; 0x22c
 8022f76:	edcd 7a39 	vstr	s15, [sp, #228]	; 0xe4
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
 8022f7a:	eddd 7a8c 	vldr	s15, [sp, #560]	; 0x230
 8022f7e:	edcd 7a3a 	vstr	s15, [sp, #232]	; 0xe8
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
 8022f82:	eddd 7a8d 	vldr	s15, [sp, #564]	; 0x234
 8022f86:	edcd 7a3b 	vstr	s15, [sp, #236]	; 0xec
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
 8022f8a:	eddd 7a8e 	vldr	s15, [sp, #568]	; 0x238
 8022f8e:	edcd 7a3c 	vstr	s15, [sp, #240]	; 0xf0
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 8022f92:	eddd 7a8f 	vldr	s15, [sp, #572]	; 0x23c
 8022f96:	edcd 7a3d 	vstr	s15, [sp, #244]	; 0xf4
      for (j = 0; j < output_width - 1; j+=2) {
 8022f9a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	f340 823a 	ble.w	8023416 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x7fa>
 8022fa2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8022fa4:	f04f 0e00 	mov.w	lr, #0
 8022fa8:	9942      	ldr	r1, [sp, #264]	; 0x108
 8022faa:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8022fac:	fb03 f801 	mul.w	r8, r3, r1

        // We assume bias_data as zeros.
        float sum_0 = 0.0f;
        float sum_1 = 0.0f;
        transpose_depthwise_mac_kernel7_2row_fp_uniweight(&sum_0, &sum_1, two_column_buffer, ksrc_transposed, input_width, STRIDE, IN_PAD, OUT_PAD);
        out[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022fb0:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 8022fb2:	eb09 0602 	add.w	r6, r9, r2
 8022fb6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8022fb8:	ebc8 7a88 	rsb	sl, r8, r8, lsl #30
 8022fbc:	4498      	add	r8, r3
 8022fbe:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8022fc0:	eb09 0502 	add.w	r5, r9, r2
 8022fc4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8022fc6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8022fca:	eb09 0003 	add.w	r0, r9, r3
 8022fce:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8022fd0:	eb09 0402 	add.w	r4, r9, r2
      for (j = 0; j < output_width - 1; j+=2) {
 8022fd4:	f8cd 9114 	str.w	r9, [sp, #276]	; 0x114
 8022fd8:	eb09 0103 	add.w	r1, r9, r3
 8022fdc:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8022fde:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8022fe2:	9001      	str	r0, [sp, #4]
 8022fe4:	eb09 0203 	add.w	r2, r9, r3
        out[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 8022fe8:	464b      	mov	r3, r9
      for (j = 0; j < output_width - 1; j+=2) {
 8022fea:	f8dd 9110 	ldr.w	r9, [sp, #272]	; 0x110
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
 8022fee:	edd3 6a01 	vldr	s13, [r3, #4]
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8022ff2:	eb0a 0c07 	add.w	ip, sl, r7
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 8022ff6:	edd3 fa02 	vldr	s31, [r3, #8]
      for (j = 0; j < output_width - 1; j+=2) {
 8022ffa:	f10e 0e02 	add.w	lr, lr, #2
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8022ffe:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8023002:	44c4      	add	ip, r8
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 8023004:	ed9d ea1e 	vldr	s28, [sp, #120]	; 0x78
      for (j = 0; j < output_width - 1; j+=2) {
 8023008:	45ce      	cmp	lr, r9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 802300a:	ee66 7a87 	vmul.f32	s15, s13, s14
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 802300e:	edd3 ca03 	vldr	s25, [r3, #12]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 8023012:	ee27 7a2f 	vmul.f32	s14, s14, s31
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
 8023016:	ed93 ca04 	vldr	s24, [r3, #16]
 802301a:	ed9d 6a03 	vldr	s12, [sp, #12]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 802301e:	edd3 ba05 	vldr	s23, [r3, #20]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
 8023022:	eeae 7a26 	vfma.f32	s14, s28, s13
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 8023026:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 802302a:	ed9d da04 	vldr	s26, [sp, #16]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[28];
 802302e:	9801      	ldr	r0, [sp, #4]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[5];
 8023030:	ed93 ba06 	vldr	s22, [r3, #24]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[7];
 8023034:	edd6 aa01 	vldr	s21, [r6, #4]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[8];
 8023038:	ed96 aa02 	vldr	s20, [r6, #8]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
 802303c:	eea6 7aac 	vfma.f32	s14, s13, s25
    *sum_1 += two_column_buffer[3] * ksrc_transposed[9];
 8023040:	edd6 9a03 	vldr	s19, [r6, #12]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[10];
 8023044:	ed96 9a04 	vldr	s18, [r6, #16]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[11];
 8023048:	edd6 8a05 	vldr	s17, [r6, #20]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[12];
 802304c:	ed96 8a06 	vldr	s16, [r6, #24]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[14];
 8023050:	ed95 0a01 	vldr	s0, [r5, #4]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[15];
 8023054:	edd5 0a02 	vldr	s1, [r5, #8]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
 8023058:	eea6 7a0c 	vfma.f32	s14, s12, s24
    *sum_1 += two_column_buffer[3] * ksrc_transposed[16];
 802305c:	ed95 1a03 	vldr	s2, [r5, #12]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[28];
 8023060:	ed90 6a01 	vldr	s12, [r0, #4]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[17];
 8023064:	edd5 1a04 	vldr	s3, [r5, #16]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[18];
 8023068:	ed95 2a05 	vldr	s4, [r5, #20]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[19];
 802306c:	edd5 2a06 	vldr	s5, [r5, #24]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[21];
 8023070:	ed94 3a01 	vldr	s6, [r4, #4]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
 8023074:	eead 7a2b 	vfma.f32	s14, s26, s23
    *sum_1 += two_column_buffer[2] * ksrc_transposed[22];
 8023078:	edd4 3a02 	vldr	s7, [r4, #8]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[23];
 802307c:	ed94 4a03 	vldr	s8, [r4, #12]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[24];
 8023080:	edd4 4a04 	vldr	s9, [r4, #16]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[25];
 8023084:	ed94 5a05 	vldr	s10, [r4, #20]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[26];
 8023088:	edd4 5a06 	vldr	s11, [r4, #24]
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 802308c:	9702      	str	r7, [sp, #8]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 802308e:	461f      	mov	r7, r3
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
 8023090:	ed90 da02 	vldr	s26, [r0, #8]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8023094:	f103 0308 	add.w	r3, r3, #8
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
 8023098:	edd0 da03 	vldr	s27, [r0, #12]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[31];
 802309c:	edd0 ea04 	vldr	s29, [r0, #16]
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
 80230a0:	edcd da15 	vstr	s27, [sp, #84]	; 0x54
    *sum_1 += two_column_buffer[4] * ksrc_transposed[31];
 80230a4:	edcd ea16 	vstr	s29, [sp, #88]	; 0x58
    *sum_1 += two_column_buffer[1] * ksrc_transposed[35];
 80230a8:	edd1 da01 	vldr	s27, [r1, #4]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[5];
 80230ac:	eddd ea05 	vldr	s29, [sp, #20]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[35];
 80230b0:	edcd da19 	vstr	s27, [sp, #100]	; 0x64
    *sum_1 += two_column_buffer[6] * ksrc_transposed[5];
 80230b4:	eeae 7a8b 	vfma.f32	s14, s29, s22
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 80230b8:	edd7 da00 	vldr	s27, [r7]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
 80230bc:	ed8d da14 	vstr	s26, [sp, #80]	; 0x50
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 80230c0:	4637      	mov	r7, r6
    *sum_1 += two_column_buffer[6] * ksrc_transposed[33];
 80230c2:	ed90 da06 	vldr	s26, [r0, #24]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 80230c6:	eeed 7a8e 	vfma.f32	s15, s27, s28
    *sum_1 += two_column_buffer[7] * ksrc_transposed[6];
 80230ca:	ed9d ea06 	vldr	s28, [sp, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 80230ce:	f106 0608 	add.w	r6, r6, #8
    *sum_1 += two_column_buffer[6] * ksrc_transposed[33];
 80230d2:	ed8d da18 	vstr	s26, [sp, #96]	; 0x60
    *sum_1 += two_column_buffer[7] * ksrc_transposed[6];
 80230d6:	ed93 da05 	vldr	s26, [r3, #20]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[32];
 80230da:	ed90 fa05 	vldr	s30, [r0, #20]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[6];
 80230de:	eeae 7a0d 	vfma.f32	s14, s28, s26
    *sum_1 += two_column_buffer[3] * ksrc_transposed[37];
 80230e2:	edd1 ea03 	vldr	s29, [r1, #12]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 80230e6:	eeef 7aa6 	vfma.f32	s15, s31, s13
    *sum_1 += two_column_buffer[5] * ksrc_transposed[32];
 80230ea:	ed8d fa17 	vstr	s30, [sp, #92]	; 0x5c
    *sum_1 += two_column_buffer[2] * ksrc_transposed[36];
 80230ee:	ed91 fa02 	vldr	s30, [r1, #8]
    *sum_1 += two_column_buffer[7] * ksrc_transposed[34];
 80230f2:	edd0 6a07 	vldr	s13, [r0, #28]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[7];
 80230f6:	eddd fa07 	vldr	s31, [sp, #28]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[36];
 80230fa:	ed8d fa1a 	vstr	s30, [sp, #104]	; 0x68
    *sum_1 += two_column_buffer[7] * ksrc_transposed[13];
 80230fe:	ed96 fa05 	vldr	s30, [r6, #20]
    *sum_1 += two_column_buffer[1] * ksrc_transposed[7];
 8023102:	eeaf 7aaa 	vfma.f32	s14, s31, s21
    *sum_1 += two_column_buffer[7] * ksrc_transposed[34];
 8023106:	edcd 6a1c 	vstr	s13, [sp, #112]	; 0x70
    *sum_1 += two_column_buffer[7] * ksrc_transposed[13];
 802310a:	ed8d fa1b 	vstr	s30, [sp, #108]	; 0x6c
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 802310e:	eddd 6a03 	vldr	s13, [sp, #12]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 8023112:	ed97 fa00 	vldr	s30, [r7]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 8023116:	462f      	mov	r7, r5
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8023118:	eeec 7aa6 	vfma.f32	s15, s25, s13
    *sum_1 += two_column_buffer[2] * ksrc_transposed[8];
 802311c:	eddd 6a08 	vldr	s13, [sp, #32]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 8023120:	ed97 ea00 	vldr	s28, [r7]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 8023124:	4627      	mov	r7, r4
    *sum_1 += two_column_buffer[7] * ksrc_transposed[20];
 8023126:	edd5 da07 	vldr	s27, [r5, #28]
    *sum_1 += two_column_buffer[2] * ksrc_transposed[8];
 802312a:	eea6 7a8a 	vfma.f32	s14, s13, s20
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 802312e:	edd7 fa00 	vldr	s31, [r7]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 8023132:	f105 0508 	add.w	r5, r5, #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 8023136:	f850 7b08 	ldr.w	r7, [r0], #8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 802313a:	f104 0408 	add.w	r4, r4, #8
    *sum_1 += two_column_buffer[7] * ksrc_transposed[27];
 802313e:	ed94 da05 	vldr	s26, [r4, #20]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 8023142:	9001      	str	r0, [sp, #4]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 8023144:	eddd 6a04 	vldr	s13, [sp, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 8023148:	eddd ca05 	vldr	s25, [sp, #20]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 802314c:	eeec 7a26 	vfma.f32	s15, s24, s13
    *sum_1 += two_column_buffer[3] * ksrc_transposed[9];
 8023150:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 8023154:	971d      	str	r7, [sp, #116]	; 0x74
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 8023156:	460f      	mov	r7, r1
    *sum_1 += two_column_buffer[3] * ksrc_transposed[9];
 8023158:	eea6 7aa9 	vfma.f32	s14, s13, s19
    *sum_1 += two_column_buffer[4] * ksrc_transposed[38];
 802315c:	ed91 ca04 	vldr	s24, [r1, #16]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 8023160:	f101 0108 	add.w	r1, r1, #8
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 8023164:	eeeb 7aac 	vfma.f32	s15, s23, s25
    *sum_1 += two_column_buffer[4] * ksrc_transposed[10];
 8023168:	eddd ba09 	vldr	s23, [sp, #36]	; 0x24
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 802316c:	eddd ca06 	vldr	s25, [sp, #24]
    *sum_1 += two_column_buffer[4] * ksrc_transposed[10];
 8023170:	eeab 7a89 	vfma.f32	s14, s23, s18
    *sum_1 += two_column_buffer[5] * ksrc_transposed[39];
 8023174:	edd1 ba03 	vldr	s23, [r1, #12]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 8023178:	eeeb 7a2c 	vfma.f32	s15, s22, s25
    *sum_1 += two_column_buffer[5] * ksrc_transposed[11];
 802317c:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 8023180:	eddd ca07 	vldr	s25, [sp, #28]
    *sum_1 += two_column_buffer[5] * ksrc_transposed[11];
 8023184:	eeab 7a28 	vfma.f32	s14, s22, s17
    *sum_1 += two_column_buffer[6] * ksrc_transposed[40];
 8023188:	ed91 ba04 	vldr	s22, [r1, #16]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 802318c:	eeef 7a2c 	vfma.f32	s15, s30, s25
    *sum_1 += two_column_buffer[6] * ksrc_transposed[12];
 8023190:	eddd ca0b 	vldr	s25, [sp, #44]	; 0x2c
    *sum_1 += two_column_buffer[7] * ksrc_transposed[41];
 8023194:	ed91 fa05 	vldr	s30, [r1, #20]
    *sum_1 += two_column_buffer[6] * ksrc_transposed[12];
 8023198:	eeac 7a88 	vfma.f32	s14, s25, s16
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 802319c:	eddd ca08 	vldr	s25, [sp, #32]
 80231a0:	eeea 7aac 	vfma.f32	s15, s21, s25
    *sum_1 += two_column_buffer[7] * ksrc_transposed[13];
 80231a4:	eddd aa0c 	vldr	s21, [sp, #48]	; 0x30
 80231a8:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 80231ac:	eeaa 7aac 	vfma.f32	s14, s21, s25
    *sum_1 += two_column_buffer[1] * ksrc_transposed[42];
 80231b0:	edd2 aa01 	vldr	s21, [r2, #4]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 80231b4:	edd7 ca00 	vldr	s25, [r7]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 80231b8:	4617      	mov	r7, r2
 80231ba:	f102 0208 	add.w	r2, r2, #8
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
 80231be:	eeea 7a26 	vfma.f32	s15, s20, s13
    *sum_1 += two_column_buffer[1] * ksrc_transposed[14];
 80231c2:	ed9d aa0d 	vldr	s20, [sp, #52]	; 0x34
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 80231c6:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
    *sum_1 += two_column_buffer[1] * ksrc_transposed[14];
 80231ca:	eeaa 7a00 	vfma.f32	s14, s20, s0
    *sum_1 += two_column_buffer[2] * ksrc_transposed[43];
 80231ce:	ed92 aa00 	vldr	s20, [r2]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 80231d2:	eee9 7aa6 	vfma.f32	s15, s19, s13
    *sum_1 += two_column_buffer[2] * ksrc_transposed[15];
 80231d6:	eddd 9a0e 	vldr	s19, [sp, #56]	; 0x38
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 80231da:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    *sum_1 += two_column_buffer[2] * ksrc_transposed[15];
 80231de:	eea9 7aa0 	vfma.f32	s14, s19, s1
    *sum_1 += two_column_buffer[3] * ksrc_transposed[44];
 80231e2:	edd2 9a01 	vldr	s19, [r2, #4]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 80231e6:	eee9 7a26 	vfma.f32	s15, s18, s13
    *sum_1 += two_column_buffer[3] * ksrc_transposed[16];
 80231ea:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 80231ee:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
    *sum_1 += two_column_buffer[3] * ksrc_transposed[16];
 80231f2:	eea9 7a01 	vfma.f32	s14, s18, s2
    *sum_1 += two_column_buffer[4] * ksrc_transposed[45];
 80231f6:	ed92 9a02 	vldr	s18, [r2, #8]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 80231fa:	eee8 7aa6 	vfma.f32	s15, s17, s13
    *sum_1 += two_column_buffer[4] * ksrc_transposed[17];
 80231fe:	eddd 8a10 	vldr	s17, [sp, #64]	; 0x40
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 8023202:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
    *sum_1 += two_column_buffer[4] * ksrc_transposed[17];
 8023206:	eea8 7aa1 	vfma.f32	s14, s17, s3
    *sum_1 += two_column_buffer[5] * ksrc_transposed[46];
 802320a:	edd2 8a03 	vldr	s17, [r2, #12]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 802320e:	eee8 7a26 	vfma.f32	s15, s16, s13
    *sum_1 += two_column_buffer[5] * ksrc_transposed[18];
 8023212:	ed9d 8a11 	vldr	s16, [sp, #68]	; 0x44
 8023216:	eea8 7a02 	vfma.f32	s14, s16, s4
    *sum_1 += two_column_buffer[6] * ksrc_transposed[47];
 802321a:	ed92 8a04 	vldr	s16, [r2, #16]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 802321e:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
 8023222:	eeee 7a26 	vfma.f32	s15, s28, s13
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 8023226:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
    *sum_1 += two_column_buffer[6] * ksrc_transposed[19];
 802322a:	ed9d ea12 	vldr	s28, [sp, #72]	; 0x48
 802322e:	eeae 7a22 	vfma.f32	s14, s28, s5
    *sum_1 += two_column_buffer[7] * ksrc_transposed[48];
 8023232:	ed92 ea05 	vldr	s28, [r2, #20]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 8023236:	eee0 7a26 	vfma.f32	s15, s0, s13
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 802323a:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
    *sum_1 += two_column_buffer[7] * ksrc_transposed[20];
 802323e:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
 8023242:	eea0 7a2d 	vfma.f32	s14, s0, s27
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 8023246:	ed97 0a00 	vldr	s0, [r7]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 802324a:	eee0 7aa6 	vfma.f32	s15, s1, s13
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 802324e:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
    *sum_1 += two_column_buffer[1] * ksrc_transposed[21];
 8023252:	eddd 6a22 	vldr	s13, [sp, #136]	; 0x88
 8023256:	eea6 7a83 	vfma.f32	s14, s13, s6
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 802325a:	eee1 7a20 	vfma.f32	s15, s2, s1
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 802325e:	ed9d 1a11 	vldr	s2, [sp, #68]	; 0x44
    *sum_1 += two_column_buffer[2] * ksrc_transposed[22];
 8023262:	eddd 0a23 	vldr	s1, [sp, #140]	; 0x8c
 8023266:	eea0 7aa3 	vfma.f32	s14, s1, s7
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 802326a:	eee1 7a81 	vfma.f32	s15, s3, s2
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 802326e:	eddd 1a12 	vldr	s3, [sp, #72]	; 0x48
    *sum_1 += two_column_buffer[3] * ksrc_transposed[23];
 8023272:	ed9d 1a24 	vldr	s2, [sp, #144]	; 0x90
 8023276:	eea1 7a04 	vfma.f32	s14, s2, s8
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 802327a:	eee2 7a21 	vfma.f32	s15, s4, s3
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 802327e:	ed9d 2a13 	vldr	s4, [sp, #76]	; 0x4c
    *sum_1 += two_column_buffer[4] * ksrc_transposed[24];
 8023282:	eddd 1a25 	vldr	s3, [sp, #148]	; 0x94
 8023286:	eea1 7aa4 	vfma.f32	s14, s3, s9
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 802328a:	eee2 7a82 	vfma.f32	s15, s5, s4
    *sum_1 += two_column_buffer[5] * ksrc_transposed[25];
 802328e:	ed9d 2a26 	vldr	s4, [sp, #152]	; 0x98
    *sum_1 += two_column_buffer[6] * ksrc_transposed[26];
 8023292:	eddd 2a27 	vldr	s5, [sp, #156]	; 0x9c
    *sum_1 += two_column_buffer[5] * ksrc_transposed[25];
 8023296:	eea2 7a05 	vfma.f32	s14, s4, s10
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 802329a:	eeef 7aa6 	vfma.f32	s15, s31, s13
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
 802329e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
    *sum_1 += two_column_buffer[6] * ksrc_transposed[26];
 80232a2:	eea2 7aa5 	vfma.f32	s14, s5, s11
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 80232a6:	eee3 7a20 	vfma.f32	s15, s6, s1
    *sum_1 += two_column_buffer[7] * ksrc_transposed[27];
 80232aa:	ed9d 3a28 	vldr	s6, [sp, #160]	; 0xa0
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
 80232ae:	eddd 0a14 	vldr	s1, [sp, #80]	; 0x50
    *sum_1 += two_column_buffer[7] * ksrc_transposed[27];
 80232b2:	eea3 7a0d 	vfma.f32	s14, s6, s26
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 80232b6:	eee3 7a81 	vfma.f32	s15, s7, s2
    *sum_1 += two_column_buffer[1] * ksrc_transposed[28];
 80232ba:	eddd 3a29 	vldr	s7, [sp, #164]	; 0xa4
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 80232be:	ed9d 1a1d 	vldr	s2, [sp, #116]	; 0x74
    *sum_1 += two_column_buffer[1] * ksrc_transposed[28];
 80232c2:	eea3 7a86 	vfma.f32	s14, s7, s12
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 80232c6:	eee4 7a21 	vfma.f32	s15, s8, s3
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
 80232ca:	ed9d 4a2a 	vldr	s8, [sp, #168]	; 0xa8
    *sum_1 += two_column_buffer[7] * ksrc_transposed[34];
 80232ce:	eddd 1a1c 	vldr	s3, [sp, #112]	; 0x70
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
 80232d2:	eea4 7a20 	vfma.f32	s14, s8, s1
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
 80232d6:	eee4 7a82 	vfma.f32	s15, s9, s4
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
 80232da:	ed9d 2a2b 	vldr	s4, [sp, #172]	; 0xac
    *sum_1 += two_column_buffer[6] * ksrc_transposed[33];
 80232de:	eddd 4a18 	vldr	s9, [sp, #96]	; 0x60
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
 80232e2:	eea2 7a26 	vfma.f32	s14, s4, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 80232e6:	eee5 7a22 	vfma.f32	s15, s10, s5
    *sum_1 += two_column_buffer[4] * ksrc_transposed[31];
 80232ea:	eddd 2a2c 	vldr	s5, [sp, #176]	; 0xb0
 80232ee:	ed9d 5a16 	vldr	s10, [sp, #88]	; 0x58
 80232f2:	eea2 7a85 	vfma.f32	s14, s5, s10
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 80232f6:	eee5 7a83 	vfma.f32	s15, s11, s6
    *sum_1 += two_column_buffer[5] * ksrc_transposed[32];
 80232fa:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 80232fe:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 8023302:	eea3 7a25 	vfma.f32	s14, s6, s11
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 8023306:	eee1 7a23 	vfma.f32	s15, s2, s7
    *sum_1 += two_column_buffer[6] * ksrc_transposed[33];
 802330a:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 802330e:	eea3 7aa4 	vfma.f32	s14, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 8023312:	eee6 7a04 	vfma.f32	s15, s12, s8
    *sum_1 += two_column_buffer[7] * ksrc_transposed[34];
 8023316:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 802331a:	eea4 7a21 	vfma.f32	s14, s8, s3
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 802331e:	eee0 7a82 	vfma.f32	s15, s1, s4
    *sum_1 += two_column_buffer[1] * ksrc_transposed[35];
 8023322:	ed9d 2a30 	vldr	s4, [sp, #192]	; 0xc0
 8023326:	ed9d 6a19 	vldr	s12, [sp, #100]	; 0x64
        out[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 802332a:	9802      	ldr	r0, [sp, #8]
 802332c:	eea2 7a06 	vfma.f32	s14, s4, s12
 8023330:	9f40      	ldr	r7, [sp, #256]	; 0x100
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 8023332:	eee6 7aa2 	vfma.f32	s15, s13, s5
    *sum_1 += two_column_buffer[2] * ksrc_transposed[36];
 8023336:	eddd 2a31 	vldr	s5, [sp, #196]	; 0xc4
 802333a:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 802333e:	eea2 7aa6 	vfma.f32	s14, s5, s13
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 8023342:	eee5 7a03 	vfma.f32	s15, s10, s6
    *sum_1 += two_column_buffer[3] * ksrc_transposed[37];
 8023346:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 802334a:	eea5 7a2e 	vfma.f32	s14, s10, s29
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 802334e:	eee5 7aa3 	vfma.f32	s15, s11, s7
    *sum_1 += two_column_buffer[4] * ksrc_transposed[38];
 8023352:	eddd 5a33 	vldr	s11, [sp, #204]	; 0xcc
 8023356:	eea5 7a8c 	vfma.f32	s14, s11, s24
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 802335a:	eee4 7a84 	vfma.f32	s15, s9, s8
    *sum_1 += two_column_buffer[5] * ksrc_transposed[39];
 802335e:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
    *sum_1 += two_column_buffer[6] * ksrc_transposed[40];
 8023362:	ed9d 4a35 	vldr	s8, [sp, #212]	; 0xd4
    *sum_1 += two_column_buffer[5] * ksrc_transposed[39];
 8023366:	eea4 7aab 	vfma.f32	s14, s9, s23
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 802336a:	eeec 7a82 	vfma.f32	s15, s25, s4
    *sum_1 += two_column_buffer[6] * ksrc_transposed[40];
 802336e:	eea4 7a0b 	vfma.f32	s14, s8, s22
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 8023372:	eee6 7a22 	vfma.f32	s15, s12, s5
    *sum_1 += two_column_buffer[7] * ksrc_transposed[41];
 8023376:	ed9d 6a36 	vldr	s12, [sp, #216]	; 0xd8
 802337a:	eea6 7a0f 	vfma.f32	s14, s12, s30
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 802337e:	eee6 7a85 	vfma.f32	s15, s13, s10
    *sum_1 += two_column_buffer[1] * ksrc_transposed[42];
 8023382:	eddd 6a37 	vldr	s13, [sp, #220]	; 0xdc
    *sum_1 += two_column_buffer[3] * ksrc_transposed[44];
 8023386:	ed9d 5a39 	vldr	s10, [sp, #228]	; 0xe4
    *sum_1 += two_column_buffer[1] * ksrc_transposed[42];
 802338a:	eea6 7aaa 	vfma.f32	s14, s13, s21
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 802338e:	eeee 7aa5 	vfma.f32	s15, s29, s11
    *sum_1 += two_column_buffer[2] * ksrc_transposed[43];
 8023392:	eddd 5a38 	vldr	s11, [sp, #224]	; 0xe0
 8023396:	eea5 7a8a 	vfma.f32	s14, s11, s20
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 802339a:	eeec 7a24 	vfma.f32	s15, s24, s9
    *sum_1 += two_column_buffer[4] * ksrc_transposed[45];
 802339e:	eddd 4a3a 	vldr	s9, [sp, #232]	; 0xe8
    *sum_1 += two_column_buffer[3] * ksrc_transposed[44];
 80233a2:	eea5 7a29 	vfma.f32	s14, s10, s19
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 80233a6:	eeeb 7a84 	vfma.f32	s15, s23, s8
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 80233aa:	ed9d 4a3f 	vldr	s8, [sp, #252]	; 0xfc
    *sum_1 += two_column_buffer[4] * ksrc_transposed[45];
 80233ae:	eea4 7a89 	vfma.f32	s14, s9, s18
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
 80233b2:	eeeb 7a06 	vfma.f32	s15, s22, s12
    *sum_1 += two_column_buffer[5] * ksrc_transposed[46];
 80233b6:	ed9d 6a3b 	vldr	s12, [sp, #236]	; 0xec
 80233ba:	eea6 7a28 	vfma.f32	s14, s12, s17
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 80233be:	eee0 7a26 	vfma.f32	s15, s0, s13
    *sum_1 += two_column_buffer[6] * ksrc_transposed[47];
 80233c2:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
 80233c6:	eea6 7a88 	vfma.f32	s14, s13, s16
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
 80233ca:	eeea 7aa5 	vfma.f32	s15, s21, s11
    *sum_1 += two_column_buffer[7] * ksrc_transposed[48];
 80233ce:	eddd 5a3d 	vldr	s11, [sp, #244]	; 0xf4
 80233d2:	eea5 7a8e 	vfma.f32	s14, s11, s28
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
 80233d6:	eeea 7a05 	vfma.f32	s15, s20, s10
 80233da:	ed9d 5a3e 	vldr	s10, [sp, #248]	; 0xf8
 80233de:	fe85 7a07 	vmaxnm.f32	s14, s10, s14
 80233e2:	fe87 7a44 	vminnm.f32	s14, s14, s8
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
 80233e6:	eee9 7aa4 	vfma.f32	s15, s19, s9
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
 80233ea:	eee9 7a06 	vfma.f32	s15, s18, s12
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
 80233ee:	eee8 7aa6 	vfma.f32	s15, s17, s13
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 80233f2:	eee8 7a25 	vfma.f32	s15, s16, s11
        out[(i * output_width + j) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 80233f6:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 80233fa:	fec7 7ac4 	vminnm.f32	s15, s15, s8
 80233fe:	edc0 7a00 	vstr	s15, [r0]
 8023402:	4438      	add	r0, r7
        out[(i * output_width + j + 1) * output_depth] = TN_MIN(TN_MAX(sum_1, output_activation_min), output_activation_max);
 8023404:	ed8c 7a00 	vstr	s14, [ip]
 8023408:	4607      	mov	r7, r0
      for (j = 0; j < output_width - 1; j+=2) {
 802340a:	f6ff adf0 	blt.w	8022fee <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x3d2>
 802340e:	f8dd 9114 	ldr.w	r9, [sp, #276]	; 0x114
 8023412:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8023414:	4499      	add	r9, r3
 8023416:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023418:	3301      	adds	r3, #1
 802341a:	9341      	str	r3, [sp, #260]	; 0x104

        two_column_buffer_start += 2;
      }

      /* left-over because odd number of output pixels */
      if (output_width & 0x1) {
 802341c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 802341e:	b9eb      	cbnz	r3, 802345c <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x840>
 8023420:	9b43      	ldr	r3, [sp, #268]	; 0x10c

        two_column_buffer_start++;
      }
      /* End of MAC Computation */

      two_column_buffer_start += 6;
 8023422:	f109 0918 	add.w	r9, r9, #24
 8023426:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8023428:	4413      	add	r3, r2
 802342a:	9a48      	ldr	r2, [sp, #288]	; 0x120
 802342c:	9343      	str	r3, [sp, #268]	; 0x10c
 802342e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8023430:	4413      	add	r3, r2
    for (i = 0; i < output_height; i++) {
 8023432:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023434:	9342      	str	r3, [sp, #264]	; 0x108
 8023436:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023438:	4293      	cmp	r3, r2
 802343a:	f47f adae 	bne.w	8022f9a <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x37e>
    }

    bias_data++;
    input_data++;
 802343e:	9b53      	ldr	r3, [sp, #332]	; 0x14c
  for (c = 0; c < input_depth; c++) {
 8023440:	9a58      	ldr	r2, [sp, #352]	; 0x160
    input_data++;
 8023442:	3304      	adds	r3, #4
 8023444:	9353      	str	r3, [sp, #332]	; 0x14c
    output_data++;
 8023446:	9bac      	ldr	r3, [sp, #688]	; 0x2b0
 8023448:	3304      	adds	r3, #4
 802344a:	93ac      	str	r3, [sp, #688]	; 0x2b0
  for (c = 0; c < input_depth; c++) {
 802344c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 802344e:	4293      	cmp	r3, r2
 8023450:	f000 814f 	beq.w	80236f2 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0xad6>
 8023454:	4618      	mov	r0, r3
 8023456:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8023458:	18c3      	adds	r3, r0, r3
 802345a:	e49d      	b.n	8022d98 <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x17c>
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 802345c:	edd9 7a01 	vldr	s15, [r9, #4]
 8023460:	eddd 6a1f 	vldr	s13, [sp, #124]	; 0x7c
 8023464:	ed99 7a00 	vldr	s14, [r9]
 8023468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802346c:	eddd 6a1e 	vldr	s13, [sp, #120]	; 0x78
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8023470:	ed99 5a02 	vldr	s10, [r9, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8023474:	edd9 5a03 	vldr	s11, [r9, #12]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
 8023478:	eee6 7a87 	vfma.f32	s15, s13, s14
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 802347c:	ed9d 7a20 	vldr	s14, [sp, #128]	; 0x80
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 8023480:	ed99 6a04 	vldr	s12, [r9, #16]
 8023484:	ed9d 4a04 	vldr	s8, [sp, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 8023488:	edd9 6a05 	vldr	s13, [r9, #20]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 802348c:	9b46      	ldr	r3, [sp, #280]	; 0x118
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 802348e:	eddd 3a07 	vldr	s7, [sp, #28]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
 8023492:	eee7 7a05 	vfma.f32	s15, s14, s10
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 8023496:	ed9d 5a03 	vldr	s10, [sp, #12]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 802349a:	ed99 7a06 	vldr	s14, [r9, #24]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 802349e:	eb09 0403 	add.w	r4, r9, r3
 80234a2:	9a42      	ldr	r2, [sp, #264]	; 0x108
      two_column_buffer_start += 6;
 80234a4:	f109 091c 	add.w	r9, r9, #28
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 80234a8:	edd4 4a00 	vldr	s9, [r4]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 80234ac:	18e0      	adds	r0, r4, r3
 80234ae:	9948      	ldr	r1, [sp, #288]	; 0x120
 80234b0:	9e4a      	ldr	r6, [sp, #296]	; 0x128
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
 80234b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80234b6:	440a      	add	r2, r1
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 80234b8:	ed94 5a01 	vldr	s10, [r4, #4]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 80234bc:	18c1      	adds	r1, r0, r3
 80234be:	9242      	str	r2, [sp, #264]	; 0x108
        out[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 80234c0:	9d55      	ldr	r5, [sp, #340]	; 0x154
 80234c2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
 80234c4:	edd4 5a02 	vldr	s11, [r4, #8]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
 80234c8:	eee4 7a06 	vfma.f32	s15, s8, s12
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 80234cc:	ed9d 4a05 	vldr	s8, [sp, #20]
 80234d0:	1955      	adds	r5, r2, r5
 80234d2:	4432      	add	r2, r6
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 80234d4:	ed94 6a03 	vldr	s12, [r4, #12]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 80234d8:	461e      	mov	r6, r3
 80234da:	9243      	str	r2, [sp, #268]	; 0x10c
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 80234dc:	18ca      	adds	r2, r1, r3
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 80234de:	18d3      	adds	r3, r2, r3
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
 80234e0:	eee4 7a26 	vfma.f32	s15, s8, s13
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 80234e4:	ed9d 4a06 	vldr	s8, [sp, #24]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 80234e8:	edd4 6a04 	vldr	s13, [r4, #16]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
 80234ec:	eee4 7a07 	vfma.f32	s15, s8, s14
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 80234f0:	ed94 7a05 	vldr	s14, [r4, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 80234f4:	ed94 4a06 	vldr	s8, [r4, #24]
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
 80234f8:	199c      	adds	r4, r3, r6
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
 80234fa:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 80234fe:	eddd 3a08 	vldr	s7, [sp, #32]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 8023502:	edd0 4a00 	vldr	s9, [r0]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
 8023506:	eee3 7a85 	vfma.f32	s15, s7, s10
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 802350a:	ed90 5a01 	vldr	s10, [r0, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
 802350e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8023512:	eee3 7aa5 	vfma.f32	s15, s7, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 8023516:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 802351a:	edd0 5a02 	vldr	s11, [r0, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
 802351e:	eee3 7a86 	vfma.f32	s15, s7, s12
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 8023522:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 8023526:	ed90 6a03 	vldr	s12, [r0, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
 802352a:	eee3 7aa6 	vfma.f32	s15, s7, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 802352e:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 8023532:	edd0 6a04 	vldr	s13, [r0, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
 8023536:	eee3 7a87 	vfma.f32	s15, s7, s14
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 802353a:	eddd 3a0c 	vldr	s7, [sp, #48]	; 0x30
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 802353e:	ed90 7a05 	vldr	s14, [r0, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
 8023542:	eee3 7a84 	vfma.f32	s15, s7, s8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 8023546:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 802354a:	ed90 4a06 	vldr	s8, [r0, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
 802354e:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 8023552:	eddd 3a0e 	vldr	s7, [sp, #56]	; 0x38
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 8023556:	edd1 4a00 	vldr	s9, [r1]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
 802355a:	eee3 7a85 	vfma.f32	s15, s7, s10
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 802355e:	eddd 3a0f 	vldr	s7, [sp, #60]	; 0x3c
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 8023562:	ed91 5a01 	vldr	s10, [r1, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
 8023566:	eee3 7aa5 	vfma.f32	s15, s7, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 802356a:	eddd 3a10 	vldr	s7, [sp, #64]	; 0x40
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 802356e:	edd1 5a02 	vldr	s11, [r1, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
 8023572:	eee3 7a86 	vfma.f32	s15, s7, s12
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 8023576:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 802357a:	ed91 6a03 	vldr	s12, [r1, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
 802357e:	eee3 7aa6 	vfma.f32	s15, s7, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 8023582:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
 8023586:	edd1 6a04 	vldr	s13, [r1, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
 802358a:	eee3 7a87 	vfma.f32	s15, s7, s14
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 802358e:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 8023592:	ed91 7a05 	vldr	s14, [r1, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
 8023596:	eee3 7a84 	vfma.f32	s15, s7, s8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 802359a:	eddd 3a22 	vldr	s7, [sp, #136]	; 0x88
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 802359e:	ed91 4a06 	vldr	s8, [r1, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
 80235a2:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 80235a6:	eddd 3a23 	vldr	s7, [sp, #140]	; 0x8c
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 80235aa:	edd2 4a00 	vldr	s9, [r2]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
 80235ae:	eee3 7a85 	vfma.f32	s15, s7, s10
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 80235b2:	eddd 3a24 	vldr	s7, [sp, #144]	; 0x90
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 80235b6:	ed92 5a01 	vldr	s10, [r2, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
 80235ba:	eee3 7aa5 	vfma.f32	s15, s7, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 80235be:	eddd 3a25 	vldr	s7, [sp, #148]	; 0x94
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 80235c2:	edd2 5a02 	vldr	s11, [r2, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
 80235c6:	eee3 7a86 	vfma.f32	s15, s7, s12
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 80235ca:	ed92 6a03 	vldr	s12, [r2, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
 80235ce:	eddd 3a26 	vldr	s7, [sp, #152]	; 0x98
 80235d2:	eee3 7aa6 	vfma.f32	s15, s7, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 80235d6:	eddd 3a27 	vldr	s7, [sp, #156]	; 0x9c
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 80235da:	edd2 6a04 	vldr	s13, [r2, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
 80235de:	eee3 7a87 	vfma.f32	s15, s7, s14
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 80235e2:	eddd 3a28 	vldr	s7, [sp, #160]	; 0xa0
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 80235e6:	ed92 7a05 	vldr	s14, [r2, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
 80235ea:	eee3 7a84 	vfma.f32	s15, s7, s8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 80235ee:	eddd 3a29 	vldr	s7, [sp, #164]	; 0xa4
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 80235f2:	ed92 4a06 	vldr	s8, [r2, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
 80235f6:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 80235fa:	eddd 3a2a 	vldr	s7, [sp, #168]	; 0xa8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 80235fe:	edd3 4a00 	vldr	s9, [r3]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
 8023602:	eee3 7a85 	vfma.f32	s15, s7, s10
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 8023606:	eddd 3a2b 	vldr	s7, [sp, #172]	; 0xac
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 802360a:	ed93 5a01 	vldr	s10, [r3, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
 802360e:	eee3 7aa5 	vfma.f32	s15, s7, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 8023612:	eddd 3a2c 	vldr	s7, [sp, #176]	; 0xb0
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 8023616:	edd3 5a02 	vldr	s11, [r3, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
 802361a:	eee3 7a86 	vfma.f32	s15, s7, s12
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 802361e:	eddd 3a2d 	vldr	s7, [sp, #180]	; 0xb4
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 8023622:	ed93 6a03 	vldr	s12, [r3, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
 8023626:	eee3 7aa6 	vfma.f32	s15, s7, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 802362a:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 802362e:	edd3 6a04 	vldr	s13, [r3, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
 8023632:	eee3 7a87 	vfma.f32	s15, s7, s14
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 8023636:	eddd 3a2f 	vldr	s7, [sp, #188]	; 0xbc
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 802363a:	ed93 7a05 	vldr	s14, [r3, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
 802363e:	eee3 7a84 	vfma.f32	s15, s7, s8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 8023642:	eddd 3a30 	vldr	s7, [sp, #192]	; 0xc0
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
 8023646:	ed93 4a06 	vldr	s8, [r3, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
 802364a:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 802364e:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 8023652:	edd4 4a00 	vldr	s9, [r4]
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
 8023656:	eee3 7a85 	vfma.f32	s15, s7, s10
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 802365a:	eddd 3a32 	vldr	s7, [sp, #200]	; 0xc8
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
 802365e:	ed94 5a01 	vldr	s10, [r4, #4]
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
 8023662:	eee3 7aa5 	vfma.f32	s15, s7, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 8023666:	eddd 3a33 	vldr	s7, [sp, #204]	; 0xcc
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
 802366a:	edd4 5a02 	vldr	s11, [r4, #8]
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
 802366e:	eee3 7a86 	vfma.f32	s15, s7, s12
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 8023672:	eddd 3a34 	vldr	s7, [sp, #208]	; 0xd0
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
 8023676:	ed94 6a03 	vldr	s12, [r4, #12]
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
 802367a:	eee3 7aa6 	vfma.f32	s15, s7, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 802367e:	eddd 3a35 	vldr	s7, [sp, #212]	; 0xd4
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
 8023682:	edd4 6a04 	vldr	s13, [r4, #16]
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
 8023686:	eee3 7a87 	vfma.f32	s15, s7, s14
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
 802368a:	ed94 7a05 	vldr	s14, [r4, #20]
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
 802368e:	eddd 3a36 	vldr	s7, [sp, #216]	; 0xd8
    for (i = 0; i < output_height; i++) {
 8023692:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023694:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023696:	4293      	cmp	r3, r2
 8023698:	eee3 7a84 	vfma.f32	s15, s7, s8
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 802369c:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 80236a0:	ed94 4a06 	vldr	s8, [r4, #24]
    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
 80236a4:	eee3 7aa4 	vfma.f32	s15, s7, s9
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
 80236a8:	eddd 4a38 	vldr	s9, [sp, #224]	; 0xe0
 80236ac:	eee4 7a85 	vfma.f32	s15, s9, s10
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
 80236b0:	ed9d 5a39 	vldr	s10, [sp, #228]	; 0xe4
 80236b4:	eee5 7a25 	vfma.f32	s15, s10, s11
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
 80236b8:	eddd 5a3a 	vldr	s11, [sp, #232]	; 0xe8
 80236bc:	eee5 7a86 	vfma.f32	s15, s11, s12
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
 80236c0:	ed9d 6a3b 	vldr	s12, [sp, #236]	; 0xec
 80236c4:	eee6 7a26 	vfma.f32	s15, s12, s13
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
 80236c8:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
 80236cc:	eee6 7a87 	vfma.f32	s15, s13, s14
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
 80236d0:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 80236d4:	eee7 7a04 	vfma.f32	s15, s14, s8
        out[(i * output_width + output_width - 1) * output_depth] = TN_MIN(TN_MAX(sum_0, output_activation_min), output_activation_max);
 80236d8:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 80236dc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80236e0:	ed9d 7a3f 	vldr	s14, [sp, #252]	; 0xfc
 80236e4:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 80236e8:	edc5 7a00 	vstr	s15, [r5]
    for (i = 0; i < output_height; i++) {
 80236ec:	f47f ac55 	bne.w	8022f9a <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x37e>
 80236f0:	e6a5      	b.n	802343e <transpose_depthwise_conv_fp_kernel7_stride2_inpad3_outpad1_IOHW_int8weight+0x822>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
} 
 80236f2:	2000      	movs	r0, #0
 80236f4:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80236f8:	ecbd 8b10 	vpop	{d8-d15}
 80236fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023700 <tte_exp>:
#include "tinyengine_function_fp.h"

tinyengine_status_fp tte_exp(const uint16_t size, const float* input_data, float* output_data) {
  int i;
  
  for (i = 0; i < size; ++i) {
 8023700:	b1b0      	cbz	r0, 8023730 <tte_exp+0x30>
tinyengine_status_fp tte_exp(const uint16_t size, const float* input_data, float* output_data) {
 8023702:	b570      	push	{r4, r5, r6, lr}
 8023704:	460c      	mov	r4, r1
 8023706:	4615      	mov	r5, r2
 8023708:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    output_data[i] = exp(input_data[i]);
 802370c:	f854 0b04 	ldr.w	r0, [r4], #4
 8023710:	f7e3 fcb4 	bl	800707c <__aeabi_f2d>
 8023714:	ec41 0b10 	vmov	d0, r0, r1
 8023718:	f004 fb06 	bl	8027d28 <exp>
 802371c:	ec51 0b10 	vmov	r0, r1, d0
 8023720:	f7e3 ffdc 	bl	80076dc <__aeabi_d2f>
  for (i = 0; i < size; ++i) {
 8023724:	42a6      	cmp	r6, r4
    output_data[i] = exp(input_data[i]);
 8023726:	f845 0b04 	str.w	r0, [r5], #4
  for (i = 0; i < size; ++i) {
 802372a:	d1ef      	bne.n	802370c <tte_exp+0xc>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 802372c:	2000      	movs	r0, #0
 802372e:	bd70      	pop	{r4, r5, r6, pc}
 8023730:	2000      	movs	r0, #0
 8023732:	4770      	bx	lr

08023734 <where_zeros_inplace_bit>:
}

tinyengine_status_fp where_zeros_inplace_bit(const unsigned char* inMask, const uint16_t size, float* input1_data) {
  int i;

  for (i = 0; i < size; ++i) {
 8023734:	b309      	cbz	r1, 802377a <where_zeros_inplace_bit+0x46>
 8023736:	2300      	movs	r3, #0
	  int bit_starting_idx = i % 8;
	  int mask = BIT_CHECK(inMask[i/8], bit_starting_idx);
	  input1_data[i] = mask > 0 ? input1_data[i] : 0;
 8023738:	f04f 0c00 	mov.w	ip, #0
tinyengine_status_fp where_zeros_inplace_bit(const unsigned char* inMask, const uint16_t size, float* input1_data) {
 802373c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	  int mask = BIT_CHECK(inMask[i/8], bit_starting_idx);
 8023740:	10dd      	asrs	r5, r3, #3
	  int bit_starting_idx = i % 8;
 8023742:	f003 0407 	and.w	r4, r3, #7
  for (i = 0; i < size; ++i) {
 8023746:	3301      	adds	r3, #1
	  int mask = BIT_CHECK(inMask[i/8], bit_starting_idx);
 8023748:	f810 8005 	ldrb.w	r8, [r0, r5]
 802374c:	2500      	movs	r5, #0
 802374e:	fa28 f604 	lsr.w	r6, r8, r4
 8023752:	f006 0401 	and.w	r4, r6, #1
	  input1_data[i] = mask > 0 ? input1_data[i] : 0;
 8023756:	432c      	orrs	r4, r5
 8023758:	d007      	beq.n	802376a <where_zeros_inplace_bit+0x36>
  for (i = 0; i < size; ++i) {
 802375a:	428b      	cmp	r3, r1
 802375c:	f102 0204 	add.w	r2, r2, #4
 8023760:	d1ee      	bne.n	8023740 <where_zeros_inplace_bit+0xc>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}
 8023762:	2000      	movs	r0, #0
 8023764:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8023768:	4770      	bx	lr
  for (i = 0; i < size; ++i) {
 802376a:	4299      	cmp	r1, r3
	  input1_data[i] = mask > 0 ? input1_data[i] : 0;
 802376c:	f842 cb04 	str.w	ip, [r2], #4
  for (i = 0; i < size; ++i) {
 8023770:	d1e6      	bne.n	8023740 <where_zeros_inplace_bit+0xc>
}
 8023772:	2000      	movs	r0, #0
 8023774:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8023778:	4770      	bx	lr
 802377a:	2000      	movs	r0, #0
 802377c:	4770      	bx	lr
 802377e:	bf00      	nop

08023780 <add_fpreq>:
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
  for (int i = 0; i < size; ++i) {
 8023780:	2800      	cmp	r0, #0
 8023782:	dd49      	ble.n	8023818 <add_fpreq+0x98>
 8023784:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			const float zero_y, int8_t* output_data) {
 8023788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802378c:	ed2d 8b06 	vpush	{d8-d10}
 8023790:	eec7 aa82 	vdiv.f32	s21, s15, s4
 8023794:	460c      	mov	r4, r1
 8023796:	4690      	mov	r8, r2
 8023798:	1e5d      	subs	r5, r3, #1
 802379a:	180e      	adds	r6, r1, r0
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
      clamped_output = TN_MAX(clamped_output, -128);
 802379c:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 80237a0:	eeb0 8a40 	vmov.f32	s16, s0
 80237a4:	eef0 8a60 	vmov.f32	s17, s1
 80237a8:	eeb0 9a41 	vmov.f32	s18, s2
 80237ac:	eef0 9a61 	vmov.f32	s19, s3
 80237b0:	eeb0 aa62 	vmov.f32	s20, s5
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80237b4:	f918 3b01 	ldrsb.w	r3, [r8], #1
 80237b8:	ee07 3a90 	vmov	s15, r3
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 80237bc:	f914 3b01 	ldrsb.w	r3, [r4], #1
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80237c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 80237c4:	ee07 3a10 	vmov	s14, r3
 80237c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80237cc:	ee77 7ae9 	vsub.f32	s15, s15, s19
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 80237d0:	ee37 7a68 	vsub.f32	s14, s14, s17
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80237d4:	ee67 7a89 	vmul.f32	s15, s15, s18
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 80237d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80237dc:	eeb0 7a4a 	vmov.f32	s14, s20
 80237e0:	eea7 7aaa 	vfma.f32	s14, s15, s21
 80237e4:	ee17 0a10 	vmov	r0, s14
 80237e8:	f7e3 fc48 	bl	800707c <__aeabi_f2d>
 80237ec:	ec41 0b10 	vmov	d0, r0, r1
 80237f0:	f004 fa4e 	bl	8027c90 <round>
 80237f4:	ec51 0b10 	vmov	r0, r1, d0
 80237f8:	f7e3 ff48 	bl	800768c <__aeabi_d2iz>
      clamped_output = TN_MAX(clamped_output, -128);
 80237fc:	42b8      	cmp	r0, r7
 80237fe:	bfb8      	it	lt
 8023800:	4638      	movlt	r0, r7
      clamped_output = TN_MIN(clamped_output, 127);
 8023802:	287f      	cmp	r0, #127	; 0x7f
 8023804:	bfa8      	it	ge
 8023806:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 8023808:	42b4      	cmp	r4, r6
      output_data[i] = (int8_t)(clamped_output);
 802380a:	f805 0f01 	strb.w	r0, [r5, #1]!
  for (int i = 0; i < size; ++i) {
 802380e:	d1d1      	bne.n	80237b4 <add_fpreq+0x34>
  }
}
 8023810:	ecbd 8b06 	vpop	{d8-d10}
 8023814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023818:	4770      	bx	lr
 802381a:	bf00      	nop

0802381c <add_fpreq_bitmask>:

tinyengine_status add_fpreq_bitmask(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data, int8_t* output_mask) {
  int mask_idx = 0;
  for (int i = 0; i < size; ++i) {
 802381c:	2800      	cmp	r0, #0
			const float zero_y, int8_t* output_data, int8_t* output_mask) {
 802381e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023822:	ed2d 8b06 	vpush	{d8-d10}
 8023826:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  for (int i = 0; i < size; ++i) {
 802382a:	dd4f      	ble.n	80238cc <add_fpreq_bitmask+0xb0>
 802382c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023830:	460e      	mov	r6, r1
 8023832:	eeb0 8a40 	vmov.f32	s16, s0
 8023836:	4693      	mov	fp, r2
 8023838:	eef0 8a60 	vmov.f32	s17, s1
 802383c:	461d      	mov	r5, r3
 802383e:	eec7 aa82 	vdiv.f32	s21, s15, s4
 8023842:	180f      	adds	r7, r1, r0
  int mask_idx = 0;
 8023844:	2400      	movs	r4, #0
 8023846:	f04f 0801 	mov.w	r8, #1
	  }
	  if (clamped_output > activation_max){
		  clamped_output = activation_max;
		  mask_value = 0;
	  }
      output_data[i] = (int8_t)(clamped_output);
 802384a:	f04f 0980 	mov.w	r9, #128	; 0x80
 802384e:	eeb0 9a41 	vmov.f32	s18, s2
 8023852:	eef0 9a61 	vmov.f32	s19, s3
 8023856:	eeb0 aa62 	vmov.f32	s20, s5
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 802385a:	f91b 3b01 	ldrsb.w	r3, [fp], #1
 802385e:	ee07 3a90 	vmov	s15, r3
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8023862:	f916 3b01 	ldrsb.w	r3, [r6], #1
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8023866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 802386a:	ee07 3a10 	vmov	s14, r3
 802386e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8023872:	ee77 7ae9 	vsub.f32	s15, s15, s19
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8023876:	ee37 7a68 	vsub.f32	s14, s14, s17
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 802387a:	ee67 7a89 	vmul.f32	s15, s15, s18
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 802387e:	eee7 7a08 	vfma.f32	s15, s14, s16
 8023882:	eeb0 7a4a 	vmov.f32	s14, s20
 8023886:	eea7 7aaa 	vfma.f32	s14, s15, s21
 802388a:	ee17 0a10 	vmov	r0, s14
 802388e:	f7e3 fbf5 	bl	800707c <__aeabi_f2d>
 8023892:	ec41 0b10 	vmov	d0, r0, r1
 8023896:	f004 f9fb 	bl	8027c90 <round>
 802389a:	ec51 0b10 	vmov	r0, r1, d0
 802389e:	f7e3 fef5 	bl	800768c <__aeabi_d2iz>
 80238a2:	fa08 f304 	lsl.w	r3, r8, r4
	  if (clamped_output < activation_min){
 80238a6:	f110 0f80 	cmn.w	r0, #128	; 0x80
 80238aa:	b2db      	uxtb	r3, r3
 80238ac:	da12      	bge.n	80238d4 <add_fpreq_bitmask+0xb8>
      output_data[i] = (int8_t)(clamped_output);
 80238ae:	f885 9000 	strb.w	r9, [r5]
	  if (mask_value == 1)
		  BIT_SET(*output_mask, mask_idx);
	  else
		  BIT_CLEAR(*output_mask, mask_idx);
 80238b2:	f89a 1000 	ldrb.w	r1, [sl]
 80238b6:	ea21 0303 	bic.w	r3, r1, r3
 80238ba:	f88a 3000 	strb.w	r3, [sl]
	  mask_idx++;
 80238be:	3401      	adds	r4, #1
	  if (mask_idx == 8){
 80238c0:	2c08      	cmp	r4, #8
 80238c2:	d00d      	beq.n	80238e0 <add_fpreq_bitmask+0xc4>
  for (int i = 0; i < size; ++i) {
 80238c4:	42be      	cmp	r6, r7
 80238c6:	f105 0501 	add.w	r5, r5, #1
 80238ca:	d1c6      	bne.n	802385a <add_fpreq_bitmask+0x3e>
		  mask_idx = 0;
		  output_mask++;
	  }
  }
}
 80238cc:	ecbd 8b06 	vpop	{d8-d10}
 80238d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (clamped_output > activation_max){
 80238d4:	287f      	cmp	r0, #127	; 0x7f
 80238d6:	dd0f      	ble.n	80238f8 <add_fpreq_bitmask+0xdc>
      output_data[i] = (int8_t)(clamped_output);
 80238d8:	f04f 027f 	mov.w	r2, #127	; 0x7f
 80238dc:	702a      	strb	r2, [r5, #0]
 80238de:	e7e8      	b.n	80238b2 <add_fpreq_bitmask+0x96>
  for (int i = 0; i < size; ++i) {
 80238e0:	42be      	cmp	r6, r7
		  output_mask++;
 80238e2:	f10a 0a01 	add.w	sl, sl, #1
 80238e6:	f105 0501 	add.w	r5, r5, #1
		  mask_idx = 0;
 80238ea:	f04f 0400 	mov.w	r4, #0
  for (int i = 0; i < size; ++i) {
 80238ee:	d1b4      	bne.n	802385a <add_fpreq_bitmask+0x3e>
}
 80238f0:	ecbd 8b06 	vpop	{d8-d10}
 80238f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      output_data[i] = (int8_t)(clamped_output);
 80238f8:	7028      	strb	r0, [r5, #0]
		  BIT_SET(*output_mask, mask_idx);
 80238fa:	f89a 1000 	ldrb.w	r1, [sl]
 80238fe:	430b      	orrs	r3, r1
 8023900:	f88a 3000 	strb.w	r3, [sl]
 8023904:	e7db      	b.n	80238be <add_fpreq_bitmask+0xa2>
 8023906:	bf00      	nop

08023908 <convolve_1x1_s8_ch16_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802390c:	b091      	sub	sp, #68	; 0x44
 802390e:	469a      	mov	sl, r3
 8023910:	4607      	mov	r7, r0
 8023912:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8023916:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 802391a:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 802391e:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023922:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8023924:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023928:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 802392c:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 802392e:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023930:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023932:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023934:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8023938:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 802393c:	9821      	ldr	r0, [sp, #132]	; 0x84
 802393e:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8023942:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023946:	9307      	str	r3, [sp, #28]
 8023948:	d055      	beq.n	80239f6 <convolve_1x1_s8_ch16_fpreq+0xee>
 802394a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802394c:	464d      	mov	r5, r9
 802394e:	2600      	movs	r6, #0
 8023950:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8023954:	b25b      	sxtb	r3, r3
 8023956:	9406      	str	r4, [sp, #24]
 8023958:	9308      	str	r3, [sp, #32]
 802395a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802395c:	b21b      	sxth	r3, r3
 802395e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023960:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023962:	b21b      	sxth	r3, r3
 8023964:	930a      	str	r3, [sp, #40]	; 0x28
 8023966:	ea4f 034a 	mov.w	r3, sl, lsl #1
 802396a:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 802396c:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 802396e:	b335      	cbz	r5, 80239be <convolve_1x1_s8_ch16_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8023970:	4642      	mov	r2, r8
		while (cnt > 0) {
 8023972:	46ae      	mov	lr, r5
 8023974:	9c06      	ldr	r4, [sp, #24]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8023976:	680b      	ldr	r3, [r1, #0]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023978:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 802397c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023980:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023984:	fa93 f304 	sadd16	r3, r3, r4
 8023988:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 802398c:	f8c2 c000 	str.w	ip, [r2]
 8023990:	3108      	adds	r1, #8
 8023992:	6053      	str	r3, [r2, #4]
 8023994:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023998:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 802399c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80239a0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80239a4:	fa93 f304 	sadd16	r3, r3, r4
 80239a8:	fa9c fc04 	sadd16	ip, ip, r4
 80239ac:	f1be 0e01 	subs.w	lr, lr, #1
 80239b0:	f8c2 c008 	str.w	ip, [r2, #8]
 80239b4:	60d3      	str	r3, [r2, #12]
 80239b6:	f102 0210 	add.w	r2, r2, #16
 80239ba:	d1dc      	bne.n	8023976 <convolve_1x1_s8_ch16_fpreq+0x6e>
 80239bc:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 80239be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80239c0:	465a      	mov	r2, fp
 80239c2:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80239c4:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 80239c6:	9c08      	ldr	r4, [sp, #32]
 80239c8:	9005      	str	r0, [sp, #20]
 80239ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80239cc:	9304      	str	r3, [sp, #16]
 80239ce:	9102      	str	r1, [sp, #8]
 80239d0:	4641      	mov	r1, r8
 80239d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80239d4:	9001      	str	r0, [sp, #4]
 80239d6:	4648      	mov	r0, r9
 80239d8:	9400      	str	r4, [sp, #0]
 80239da:	f8cd a00c 	str.w	sl, [sp, #12]
 80239de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80239e0:	f001 fd50 	bl	8025484 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80239e4:	9b07      	ldr	r3, [sp, #28]
 80239e6:	4427      	add	r7, r4
 80239e8:	429e      	cmp	r6, r3
 80239ea:	d1bf      	bne.n	802396c <convolve_1x1_s8_ch16_fpreq+0x64>
 80239ec:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 80239f0:	46a9      	mov	r9, r5
 80239f2:	9c06      	ldr	r4, [sp, #24]
 80239f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80239f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80239f8:	461a      	mov	r2, r3
 80239fa:	07d2      	lsls	r2, r2, #31
 80239fc:	d560      	bpl.n	8023ac0 <convolve_1x1_s8_ch16_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80239fe:	3b01      	subs	r3, #1
 8023a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a02:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8023a06:	f1b9 0f00 	cmp.w	r9, #0
 8023a0a:	d013      	beq.n	8023a34 <convolve_1x1_s8_ch16_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8023a0c:	4642      	mov	r2, r8
 8023a0e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023a10:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023a14:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023a18:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023a1c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023a20:	fa93 f304 	sadd16	r3, r3, r4
 8023a24:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8023a28:	3e01      	subs	r6, #1
 8023a2a:	6011      	str	r1, [r2, #0]
 8023a2c:	6053      	str	r3, [r2, #4]
 8023a2e:	f102 0208 	add.w	r2, r2, #8
 8023a32:	d1ed      	bne.n	8023a10 <convolve_1x1_s8_ch16_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023a34:	f1bb 0f00 	cmp.w	fp, #0
 8023a38:	d042      	beq.n	8023ac0 <convolve_1x1_s8_ch16_fpreq+0x1b8>
 8023a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a3c:	eb00 0a0b 	add.w	sl, r0, fp
 8023a40:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8023a44:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8023a48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a4a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8023a4e:	fa1f fe8e 	uxth.w	lr, lr
 8023a52:	f1a3 0904 	sub.w	r9, r3, #4
 8023a56:	f10e 0e01 	add.w	lr, lr, #1
 8023a5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8023a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8023a60:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8023a64:	b19a      	cbz	r2, 8023a8e <convolve_1x1_s8_ch16_fpreq+0x186>
 8023a66:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8023a6a:	4644      	mov	r4, r8
 8023a6c:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8023a70:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8023a72:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023a76:	fa2f f282 	sxtb16	r2, r2
 8023a7a:	fa2f f181 	sxtb16	r1, r1

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8023a7e:	fb22 3306 	smlad	r3, r2, r6, r3
 8023a82:	6862      	ldr	r2, [r4, #4]
 8023a84:	3408      	adds	r4, #8
 8023a86:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8023a8a:	42bd      	cmp	r5, r7
 8023a8c:	d1ee      	bne.n	8023a6c <convolve_1x1_s8_ch16_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8023a8e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8023a92:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8023a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023a98:	ecfc 7a01 	vldmia	ip!, {s15}
 8023a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023aa4:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8023aa8:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8023aaa:	4293      	cmp	r3, r2
 8023aac:	bfb8      	it	lt
 8023aae:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8023ab0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023ab2:	4293      	cmp	r3, r2
 8023ab4:	bfa8      	it	ge
 8023ab6:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8023ab8:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023abc:	4550      	cmp	r0, sl
 8023abe:	d1ce      	bne.n	8023a5e <convolve_1x1_s8_ch16_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8023ac0:	2000      	movs	r0, #0
 8023ac2:	b011      	add	sp, #68	; 0x44
 8023ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023ac8 <convolve_1x1_s8_ch24_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023acc:	b091      	sub	sp, #68	; 0x44
 8023ace:	469a      	mov	sl, r3
 8023ad0:	4607      	mov	r7, r0
 8023ad2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8023ad6:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023ada:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8023ade:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023ae2:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8023ae4:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023ae8:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8023aec:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8023aee:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023af0:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023af2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023af4:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8023af8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023afc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8023afe:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8023b02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023b06:	9307      	str	r3, [sp, #28]
 8023b08:	d055      	beq.n	8023bb6 <convolve_1x1_s8_ch24_fpreq+0xee>
 8023b0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023b0c:	464d      	mov	r5, r9
 8023b0e:	2600      	movs	r6, #0
 8023b10:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8023b14:	b25b      	sxtb	r3, r3
 8023b16:	9406      	str	r4, [sp, #24]
 8023b18:	9308      	str	r3, [sp, #32]
 8023b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023b1c:	b21b      	sxth	r3, r3
 8023b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b22:	b21b      	sxth	r3, r3
 8023b24:	930a      	str	r3, [sp, #40]	; 0x28
 8023b26:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8023b2a:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8023b2c:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8023b2e:	b335      	cbz	r5, 8023b7e <convolve_1x1_s8_ch24_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8023b30:	4642      	mov	r2, r8
		while (cnt > 0) {
 8023b32:	46ae      	mov	lr, r5
 8023b34:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 8023b36:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023b38:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023b3c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023b40:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023b44:	fa93 f304 	sadd16	r3, r3, r4
 8023b48:	fa9c fc04 	sadd16	ip, ip, r4
 8023b4c:	f8c2 c000 	str.w	ip, [r2]
 8023b50:	3108      	adds	r1, #8
 8023b52:	6053      	str	r3, [r2, #4]
 8023b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023b58:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023b5c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023b60:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023b64:	fa93 f304 	sadd16	r3, r3, r4
 8023b68:	fa9c fc04 	sadd16	ip, ip, r4
 8023b6c:	f1be 0e01 	subs.w	lr, lr, #1
 8023b70:	f8c2 c008 	str.w	ip, [r2, #8]
 8023b74:	60d3      	str	r3, [r2, #12]
 8023b76:	f102 0210 	add.w	r2, r2, #16
 8023b7a:	d1dc      	bne.n	8023b36 <convolve_1x1_s8_ch24_fpreq+0x6e>
 8023b7c:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 8023b7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023b80:	465a      	mov	r2, fp
 8023b82:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023b84:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 8023b86:	9c08      	ldr	r4, [sp, #32]
 8023b88:	9005      	str	r0, [sp, #20]
 8023b8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023b8c:	9304      	str	r3, [sp, #16]
 8023b8e:	9102      	str	r1, [sp, #8]
 8023b90:	4641      	mov	r1, r8
 8023b92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b94:	9001      	str	r0, [sp, #4]
 8023b96:	4648      	mov	r0, r9
 8023b98:	9400      	str	r4, [sp, #0]
 8023b9a:	f8cd a00c 	str.w	sl, [sp, #12]
 8023b9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023ba0:	f001 fdae 	bl	8025700 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023ba4:	9b07      	ldr	r3, [sp, #28]
 8023ba6:	4427      	add	r7, r4
 8023ba8:	429e      	cmp	r6, r3
 8023baa:	d1bf      	bne.n	8023b2c <convolve_1x1_s8_ch24_fpreq+0x64>
 8023bac:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8023bb0:	46a9      	mov	r9, r5
 8023bb2:	9c06      	ldr	r4, [sp, #24]
 8023bb4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8023bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023bb8:	461a      	mov	r2, r3
 8023bba:	07d2      	lsls	r2, r2, #31
 8023bbc:	d560      	bpl.n	8023c80 <convolve_1x1_s8_ch24_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8023bbe:	3b01      	subs	r3, #1
 8023bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023bc2:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8023bc6:	f1b9 0f00 	cmp.w	r9, #0
 8023bca:	d013      	beq.n	8023bf4 <convolve_1x1_s8_ch24_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8023bcc:	4642      	mov	r2, r8
 8023bce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023bd0:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023bd4:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023bd8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023bdc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023be0:	fa93 f304 	sadd16	r3, r3, r4
 8023be4:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8023be8:	3e01      	subs	r6, #1
 8023bea:	6011      	str	r1, [r2, #0]
 8023bec:	6053      	str	r3, [r2, #4]
 8023bee:	f102 0208 	add.w	r2, r2, #8
 8023bf2:	d1ed      	bne.n	8023bd0 <convolve_1x1_s8_ch24_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023bf4:	f1bb 0f00 	cmp.w	fp, #0
 8023bf8:	d042      	beq.n	8023c80 <convolve_1x1_s8_ch24_fpreq+0x1b8>
 8023bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bfc:	eb00 0a0b 	add.w	sl, r0, fp
 8023c00:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8023c04:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8023c08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c0a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8023c0e:	fa1f fe8e 	uxth.w	lr, lr
 8023c12:	f1a3 0904 	sub.w	r9, r3, #4
 8023c16:	f10e 0e01 	add.w	lr, lr, #1
 8023c1a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8023c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8023c20:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8023c24:	b19a      	cbz	r2, 8023c4e <convolve_1x1_s8_ch24_fpreq+0x186>
 8023c26:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8023c2a:	4644      	mov	r4, r8
 8023c2c:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8023c30:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8023c32:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023c36:	fa2f f282 	sxtb16	r2, r2
 8023c3a:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8023c3e:	fb22 3306 	smlad	r3, r2, r6, r3
 8023c42:	6862      	ldr	r2, [r4, #4]
 8023c44:	3408      	adds	r4, #8
 8023c46:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8023c4a:	42bd      	cmp	r5, r7
 8023c4c:	d1ee      	bne.n	8023c2c <convolve_1x1_s8_ch24_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8023c4e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8023c52:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8023c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023c58:	ecfc 7a01 	vldmia	ip!, {s15}
 8023c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c64:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8023c68:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8023c6a:	4293      	cmp	r3, r2
 8023c6c:	bfb8      	it	lt
 8023c6e:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8023c70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023c72:	4293      	cmp	r3, r2
 8023c74:	bfa8      	it	ge
 8023c76:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8023c78:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023c7c:	4550      	cmp	r0, sl
 8023c7e:	d1ce      	bne.n	8023c1e <convolve_1x1_s8_ch24_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8023c80:	2000      	movs	r0, #0
 8023c82:	b011      	add	sp, #68	; 0x44
 8023c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c88 <convolve_1x1_s8_ch48_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c8c:	b091      	sub	sp, #68	; 0x44
 8023c8e:	469a      	mov	sl, r3
 8023c90:	4607      	mov	r7, r0
 8023c92:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8023c96:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023c9a:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8023c9e:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023ca2:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8023ca4:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023ca8:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8023cac:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8023cae:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023cb0:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023cb2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023cb4:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8023cb8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023cbc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8023cbe:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8023cc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023cc6:	9307      	str	r3, [sp, #28]
 8023cc8:	d055      	beq.n	8023d76 <convolve_1x1_s8_ch48_fpreq+0xee>
 8023cca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ccc:	464d      	mov	r5, r9
 8023cce:	2600      	movs	r6, #0
 8023cd0:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8023cd4:	b25b      	sxtb	r3, r3
 8023cd6:	9406      	str	r4, [sp, #24]
 8023cd8:	9308      	str	r3, [sp, #32]
 8023cda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023cdc:	b21b      	sxth	r3, r3
 8023cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ce2:	b21b      	sxth	r3, r3
 8023ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8023ce6:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8023cea:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8023cec:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8023cee:	b335      	cbz	r5, 8023d3e <convolve_1x1_s8_ch48_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8023cf0:	4642      	mov	r2, r8
		while (cnt > 0) {
 8023cf2:	46ae      	mov	lr, r5
 8023cf4:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 8023cf6:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023cf8:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023cfc:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023d00:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023d04:	fa93 f304 	sadd16	r3, r3, r4
 8023d08:	fa9c fc04 	sadd16	ip, ip, r4
 8023d0c:	f8c2 c000 	str.w	ip, [r2]
 8023d10:	3108      	adds	r1, #8
 8023d12:	6053      	str	r3, [r2, #4]
 8023d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023d18:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023d1c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023d20:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023d24:	fa93 f304 	sadd16	r3, r3, r4
 8023d28:	fa9c fc04 	sadd16	ip, ip, r4
 8023d2c:	f1be 0e01 	subs.w	lr, lr, #1
 8023d30:	f8c2 c008 	str.w	ip, [r2, #8]
 8023d34:	60d3      	str	r3, [r2, #12]
 8023d36:	f102 0210 	add.w	r2, r2, #16
 8023d3a:	d1dc      	bne.n	8023cf6 <convolve_1x1_s8_ch48_fpreq+0x6e>
 8023d3c:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 8023d3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023d40:	465a      	mov	r2, fp
 8023d42:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023d44:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 8023d46:	9c08      	ldr	r4, [sp, #32]
 8023d48:	9005      	str	r0, [sp, #20]
 8023d4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023d4c:	9304      	str	r3, [sp, #16]
 8023d4e:	9102      	str	r1, [sp, #8]
 8023d50:	4641      	mov	r1, r8
 8023d52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d54:	9001      	str	r0, [sp, #4]
 8023d56:	4648      	mov	r0, r9
 8023d58:	9400      	str	r4, [sp, #0]
 8023d5a:	f8cd a00c 	str.w	sl, [sp, #12]
 8023d5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023d60:	f001 f924 	bl	8024fac <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023d64:	9b07      	ldr	r3, [sp, #28]
 8023d66:	4427      	add	r7, r4
 8023d68:	429e      	cmp	r6, r3
 8023d6a:	d1bf      	bne.n	8023cec <convolve_1x1_s8_ch48_fpreq+0x64>
 8023d6c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8023d70:	46a9      	mov	r9, r5
 8023d72:	9c06      	ldr	r4, [sp, #24]
 8023d74:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8023d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d78:	461a      	mov	r2, r3
 8023d7a:	07d2      	lsls	r2, r2, #31
 8023d7c:	d560      	bpl.n	8023e40 <convolve_1x1_s8_ch48_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8023d7e:	3b01      	subs	r3, #1
 8023d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d82:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8023d86:	f1b9 0f00 	cmp.w	r9, #0
 8023d8a:	d013      	beq.n	8023db4 <convolve_1x1_s8_ch48_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8023d8c:	4642      	mov	r2, r8
 8023d8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023d90:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023d94:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023d98:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023d9c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023da0:	fa93 f304 	sadd16	r3, r3, r4
 8023da4:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8023da8:	3e01      	subs	r6, #1
 8023daa:	6011      	str	r1, [r2, #0]
 8023dac:	6053      	str	r3, [r2, #4]
 8023dae:	f102 0208 	add.w	r2, r2, #8
 8023db2:	d1ed      	bne.n	8023d90 <convolve_1x1_s8_ch48_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023db4:	f1bb 0f00 	cmp.w	fp, #0
 8023db8:	d042      	beq.n	8023e40 <convolve_1x1_s8_ch48_fpreq+0x1b8>
 8023dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023dbc:	eb00 0a0b 	add.w	sl, r0, fp
 8023dc0:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8023dc4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8023dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023dca:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8023dce:	fa1f fe8e 	uxth.w	lr, lr
 8023dd2:	f1a3 0904 	sub.w	r9, r3, #4
 8023dd6:	f10e 0e01 	add.w	lr, lr, #1
 8023dda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8023dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8023de0:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8023de4:	b19a      	cbz	r2, 8023e0e <convolve_1x1_s8_ch48_fpreq+0x186>
 8023de6:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8023dea:	4644      	mov	r4, r8
 8023dec:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8023df0:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8023df2:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023df6:	fa2f f282 	sxtb16	r2, r2
 8023dfa:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8023dfe:	fb22 3306 	smlad	r3, r2, r6, r3
 8023e02:	6862      	ldr	r2, [r4, #4]
 8023e04:	3408      	adds	r4, #8
 8023e06:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8023e0a:	42bd      	cmp	r5, r7
 8023e0c:	d1ee      	bne.n	8023dec <convolve_1x1_s8_ch48_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8023e0e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8023e12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8023e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023e18:	ecfc 7a01 	vldmia	ip!, {s15}
 8023e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023e24:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8023e28:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8023e2a:	4293      	cmp	r3, r2
 8023e2c:	bfb8      	it	lt
 8023e2e:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8023e30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023e32:	4293      	cmp	r3, r2
 8023e34:	bfa8      	it	ge
 8023e36:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8023e38:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023e3c:	4550      	cmp	r0, sl
 8023e3e:	d1ce      	bne.n	8023dde <convolve_1x1_s8_ch48_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8023e40:	2000      	movs	r0, #0
 8023e42:	b011      	add	sp, #68	; 0x44
 8023e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e48 <convolve_1x1_s8_ch8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e4c:	b091      	sub	sp, #68	; 0x44
 8023e4e:	469a      	mov	sl, r3
 8023e50:	4607      	mov	r7, r0
 8023e52:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8023e56:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023e5a:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8023e5e:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023e62:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8023e64:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023e68:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8023e6c:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8023e6e:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023e70:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023e72:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8023e74:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8023e78:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8023e7c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8023e7e:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8023e82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023e86:	9307      	str	r3, [sp, #28]
 8023e88:	d055      	beq.n	8023f36 <convolve_1x1_s8_ch8_fpreq+0xee>
 8023e8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023e8c:	464d      	mov	r5, r9
 8023e8e:	2600      	movs	r6, #0
 8023e90:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8023e94:	b25b      	sxtb	r3, r3
 8023e96:	9406      	str	r4, [sp, #24]
 8023e98:	9308      	str	r3, [sp, #32]
 8023e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023e9c:	b21b      	sxth	r3, r3
 8023e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ea0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ea2:	b21b      	sxth	r3, r3
 8023ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8023ea6:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8023eaa:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8023eac:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8023eae:	b335      	cbz	r5, 8023efe <convolve_1x1_s8_ch8_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8023eb0:	4642      	mov	r2, r8
		while (cnt > 0) {
 8023eb2:	46ae      	mov	lr, r5
 8023eb4:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 8023eb6:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023eb8:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023ebc:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023ec0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023ec4:	fa93 f304 	sadd16	r3, r3, r4
 8023ec8:	fa9c fc04 	sadd16	ip, ip, r4
 8023ecc:	f8c2 c000 	str.w	ip, [r2]
 8023ed0:	3108      	adds	r1, #8
 8023ed2:	6053      	str	r3, [r2, #4]
 8023ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023ed8:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023edc:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023ee0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023ee4:	fa93 f304 	sadd16	r3, r3, r4
 8023ee8:	fa9c fc04 	sadd16	ip, ip, r4
 8023eec:	f1be 0e01 	subs.w	lr, lr, #1
 8023ef0:	f8c2 c008 	str.w	ip, [r2, #8]
 8023ef4:	60d3      	str	r3, [r2, #12]
 8023ef6:	f102 0210 	add.w	r2, r2, #16
 8023efa:	d1dc      	bne.n	8023eb6 <convolve_1x1_s8_ch8_fpreq+0x6e>
 8023efc:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8023efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023f00:	465a      	mov	r2, fp
 8023f02:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023f04:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8023f06:	9c08      	ldr	r4, [sp, #32]
 8023f08:	9005      	str	r0, [sp, #20]
 8023f0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023f0c:	9304      	str	r3, [sp, #16]
 8023f0e:	9102      	str	r1, [sp, #8]
 8023f10:	4641      	mov	r1, r8
 8023f12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023f14:	9001      	str	r0, [sp, #4]
 8023f16:	4648      	mov	r0, r9
 8023f18:	9400      	str	r4, [sp, #0]
 8023f1a:	f8cd a00c 	str.w	sl, [sp, #12]
 8023f1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f20:	f001 fd78 	bl	8025a14 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8023f24:	9b07      	ldr	r3, [sp, #28]
 8023f26:	4427      	add	r7, r4
 8023f28:	429e      	cmp	r6, r3
 8023f2a:	d1bf      	bne.n	8023eac <convolve_1x1_s8_ch8_fpreq+0x64>
 8023f2c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8023f30:	46a9      	mov	r9, r5
 8023f32:	9c06      	ldr	r4, [sp, #24]
 8023f34:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8023f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f38:	461a      	mov	r2, r3
 8023f3a:	07d2      	lsls	r2, r2, #31
 8023f3c:	d560      	bpl.n	8024000 <convolve_1x1_s8_ch8_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8023f3e:	3b01      	subs	r3, #1
 8023f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023f42:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8023f46:	f1b9 0f00 	cmp.w	r9, #0
 8023f4a:	d013      	beq.n	8023f74 <convolve_1x1_s8_ch8_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8023f4c:	4642      	mov	r2, r8
 8023f4e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023f50:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023f54:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8023f58:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023f5c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8023f60:	fa93 f304 	sadd16	r3, r3, r4
 8023f64:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8023f68:	3e01      	subs	r6, #1
 8023f6a:	6011      	str	r1, [r2, #0]
 8023f6c:	6053      	str	r3, [r2, #4]
 8023f6e:	f102 0208 	add.w	r2, r2, #8
 8023f72:	d1ed      	bne.n	8023f50 <convolve_1x1_s8_ch8_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023f74:	f1bb 0f00 	cmp.w	fp, #0
 8023f78:	d042      	beq.n	8024000 <convolve_1x1_s8_ch8_fpreq+0x1b8>
 8023f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f7c:	eb00 0a0b 	add.w	sl, r0, fp
 8023f80:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8023f84:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8023f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023f8a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8023f8e:	fa1f fe8e 	uxth.w	lr, lr
 8023f92:	f1a3 0904 	sub.w	r9, r3, #4
 8023f96:	f10e 0e01 	add.w	lr, lr, #1
 8023f9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8023f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8023fa0:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8023fa4:	b19a      	cbz	r2, 8023fce <convolve_1x1_s8_ch8_fpreq+0x186>
 8023fa6:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8023faa:	4644      	mov	r4, r8
 8023fac:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8023fb0:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8023fb2:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8023fb6:	fa2f f282 	sxtb16	r2, r2
 8023fba:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8023fbe:	fb22 3306 	smlad	r3, r2, r6, r3
 8023fc2:	6862      	ldr	r2, [r4, #4]
 8023fc4:	3408      	adds	r4, #8
 8023fc6:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8023fca:	42bd      	cmp	r5, r7
 8023fcc:	d1ee      	bne.n	8023fac <convolve_1x1_s8_ch8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8023fce:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8023fd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8023fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023fd8:	ecfc 7a01 	vldmia	ip!, {s15}
 8023fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023fe4:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8023fe8:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8023fea:	4293      	cmp	r3, r2
 8023fec:	bfb8      	it	lt
 8023fee:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8023ff0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023ff2:	4293      	cmp	r3, r2
 8023ff4:	bfa8      	it	ge
 8023ff6:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8023ff8:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8023ffc:	4550      	cmp	r0, sl
 8023ffe:	d1ce      	bne.n	8023f9e <convolve_1x1_s8_ch8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8024000:	2000      	movs	r0, #0
 8024002:	b011      	add	sp, #68	; 0x44
 8024004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024008 <convolve_1x1_s8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8024008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 802400c:	f013 0603 	ands.w	r6, r3, #3
		const uint16_t output_ch, q15_t *runtime_buf) {
 8024010:	b091      	sub	sp, #68	; 0x44
 8024012:	4604      	mov	r4, r0
 8024014:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8024016:	9821      	ldr	r0, [sp, #132]	; 0x84
 8024018:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 802401c:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8024020:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8024024:	f040 80cf 	bne.w	80241c6 <convolve_1x1_s8_fpreq+0x1be>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 8024028:	fb01 f202 	mul.w	r2, r1, r2
 802402c:	4698      	mov	r8, r3
	const int channel_div4 = (input_ch >> 2);
 802402e:	089b      	lsrs	r3, r3, #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024030:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024032:	4627      	mov	r7, r4
 8024034:	940f      	str	r4, [sp, #60]	; 0x3c
	const int channel_div4 = (input_ch >> 2);
 8024036:	fa1f f983 	uxth.w	r9, r3
 802403a:	930c      	str	r3, [sp, #48]	; 0x30

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 802403c:	1053      	asrs	r3, r2, #1
	const int32_t num_elements = output_x * output_y;
 802403e:	920d      	str	r2, [sp, #52]	; 0x34
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024040:	b20c      	sxth	r4, r1
	const int channel_div4 = (input_ch >> 2);
 8024042:	46cb      	mov	fp, r9
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024044:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8024048:	9308      	str	r3, [sp, #32]
 802404a:	d054      	beq.n	80240f6 <convolve_1x1_s8_fpreq+0xee>
 802404c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802404e:	46ab      	mov	fp, r5
 8024050:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8024054:	464d      	mov	r5, r9
 8024056:	b25b      	sxtb	r3, r3
 8024058:	9407      	str	r4, [sp, #28]
 802405a:	9309      	str	r3, [sp, #36]	; 0x24
 802405c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802405e:	b21b      	sxth	r3, r3
 8024060:	930b      	str	r3, [sp, #44]	; 0x2c
 8024062:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024064:	b21b      	sxth	r3, r3
 8024066:	930a      	str	r3, [sp, #40]	; 0x28
 8024068:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802406c:	4699      	mov	r9, r3
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 802406e:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8024070:	b335      	cbz	r5, 80240c0 <convolve_1x1_s8_fpreq+0xb8>
		q15_t *dst = two_column_buffer;
 8024072:	9a25      	ldr	r2, [sp, #148]	; 0x94
		while (cnt > 0) {
 8024074:	46ae      	mov	lr, r5
 8024076:	9c07      	ldr	r4, [sp, #28]
    memcpy(&val, *in_q7, 4);
 8024078:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802407a:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 802407e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024082:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024086:	fa93 f304 	sadd16	r3, r3, r4
 802408a:	fa9c fc04 	sadd16	ip, ip, r4
 802408e:	f8c2 c000 	str.w	ip, [r2]
 8024092:	3108      	adds	r1, #8
 8024094:	6053      	str	r3, [r2, #4]
 8024096:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802409a:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 802409e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80240a2:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80240a6:	fa93 f304 	sadd16	r3, r3, r4
 80240aa:	fa9c fc04 	sadd16	ip, ip, r4
 80240ae:	f1be 0e01 	subs.w	lr, lr, #1
 80240b2:	f8c2 c008 	str.w	ip, [r2, #8]
 80240b6:	60d3      	str	r3, [r2, #12]
 80240b8:	f102 0210 	add.w	r2, r2, #16
 80240bc:	d1dc      	bne.n	8024078 <convolve_1x1_s8_fpreq+0x70>
 80240be:	9407      	str	r4, [sp, #28]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 80240c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80240c2:	4652      	mov	r2, sl
 80240c4:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80240c6:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 80240c8:	9005      	str	r0, [sp, #20]
 80240ca:	444f      	add	r7, r9
 80240cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80240ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80240d0:	9304      	str	r3, [sp, #16]
 80240d2:	9102      	str	r1, [sp, #8]
 80240d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240d6:	9001      	str	r0, [sp, #4]
 80240d8:	4658      	mov	r0, fp
 80240da:	f8cd 800c 	str.w	r8, [sp, #12]
 80240de:	9925      	ldr	r1, [sp, #148]	; 0x94
 80240e0:	9400      	str	r4, [sp, #0]
 80240e2:	f001 fc97 	bl	8025a14 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80240e6:	9b08      	ldr	r3, [sp, #32]
 80240e8:	429e      	cmp	r6, r3
 80240ea:	d1c0      	bne.n	802406e <convolve_1x1_s8_fpreq+0x66>
 80240ec:	46a9      	mov	r9, r5
 80240ee:	9c07      	ldr	r4, [sp, #28]
 80240f0:	465d      	mov	r5, fp
 80240f2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80240f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240f8:	07da      	lsls	r2, r3, #31
 80240fa:	d560      	bpl.n	80241be <convolve_1x1_s8_fpreq+0x1b6>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80240fc:	3b01      	subs	r3, #1
 80240fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024100:	fb08 2803 	mla	r8, r8, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8024104:	f1b9 0f00 	cmp.w	r9, #0
 8024108:	d013      	beq.n	8024132 <convolve_1x1_s8_fpreq+0x12a>
		q15_t *dst = two_column_buffer;
 802410a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802410c:	f858 3b04 	ldr.w	r3, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024110:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8024114:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024118:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802411c:	fa93 f304 	sadd16	r3, r3, r4
 8024120:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8024124:	f1bb 0b01 	subs.w	fp, fp, #1
 8024128:	6011      	str	r1, [r2, #0]
 802412a:	6053      	str	r3, [r2, #4]
 802412c:	f102 0208 	add.w	r2, r2, #8
 8024130:	d1ec      	bne.n	802410c <convolve_1x1_s8_fpreq+0x104>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8024132:	f1ba 0f00 	cmp.w	sl, #0
 8024136:	d042      	beq.n	80241be <convolve_1x1_s8_fpreq+0x1b6>
 8024138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802413a:	4482      	add	sl, r0
 802413c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8024140:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8024144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024146:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 802414a:	fa1f fe8e 	uxth.w	lr, lr
 802414e:	f1a3 0804 	sub.w	r8, r3, #4
 8024152:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8024156:	f10e 0e01 	add.w	lr, lr, #1
 802415a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 802415e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8024160:	f858 3f04 	ldr.w	r3, [r8, #4]!
			while (col_count) {
 8024164:	b19a      	cbz	r2, 802418e <convolve_1x1_s8_fpreq+0x186>
 8024166:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 802416a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802416c:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8024170:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8024172:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024176:	fa2f f282 	sxtb16	r2, r2
 802417a:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802417e:	fb22 3306 	smlad	r3, r2, r6, r3
 8024182:	6862      	ldr	r2, [r4, #4]
 8024184:	3408      	adds	r4, #8
 8024186:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 802418a:	42bd      	cmp	r5, r7
 802418c:	d1ee      	bne.n	802416c <convolve_1x1_s8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 802418e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8024192:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8024194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024198:	ecfc 7a01 	vldmia	ip!, {s15}
 802419c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80241a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80241a4:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 80241a8:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 80241aa:	4293      	cmp	r3, r2
 80241ac:	bfb8      	it	lt
 80241ae:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 80241b0:	454b      	cmp	r3, r9
 80241b2:	bfa8      	it	ge
 80241b4:	464b      	movge	r3, r9
			*out++ = (q7_t) sum;
 80241b6:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80241ba:	4550      	cmp	r0, sl
 80241bc:	d1cf      	bne.n	802415e <convolve_1x1_s8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 80241be:	2000      	movs	r0, #0
}
 80241c0:	b011      	add	sp, #68	; 0x44
 80241c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 80241c6:	2001      	movs	r0, #1
}
 80241c8:	b011      	add	sp, #68	; 0x44
 80241ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241ce:	bf00      	nop

080241d0 <convolve_1x1_s8_fpreq_bitmask>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, q7_t *mask, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 80241d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 80241d4:	079f      	lsls	r7, r3, #30
		const uint16_t output_ch, q15_t *runtime_buf) {
 80241d6:	b093      	sub	sp, #76	; 0x4c
 80241d8:	4606      	mov	r6, r0
 80241da:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80241dc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80241de:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 80241e2:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 80241e6:	f8bd a09c 	ldrh.w	sl, [sp, #156]	; 0x9c
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 80241ea:	f040 80f2 	bne.w	80243d2 <convolve_1x1_s8_fpreq_bitmask+0x202>
		return PARAM_NO_SUPPORT;
	}
	if (output_ch % 8 != 0 && input_x > 1)
 80241ee:	f01a 0f07 	tst.w	sl, #7
 80241f2:	d002      	beq.n	80241fa <convolve_1x1_s8_fpreq_bitmask+0x2a>
 80241f4:	2901      	cmp	r1, #1
 80241f6:	f200 80ec 	bhi.w	80243d2 <convolve_1x1_s8_fpreq_bitmask+0x202>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 80241fa:	fb04 f202 	mul.w	r2, r4, r2
 80241fe:	469b      	mov	fp, r3
	const int channel_div4 = (input_ch >> 2);
 8024200:	089b      	lsrs	r3, r3, #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024202:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024204:	9610      	str	r6, [sp, #64]	; 0x40
	const int channel_div4 = (input_ch >> 2);
 8024206:	fa1f f983 	uxth.w	r9, r3
 802420a:	930e      	str	r3, [sp, #56]	; 0x38

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 802420c:	1053      	asrs	r3, r2, #1
	const int32_t num_elements = output_x * output_y;
 802420e:	920f      	str	r2, [sp, #60]	; 0x3c
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024210:	b20c      	sxth	r4, r1
	const int channel_div4 = (input_ch >> 2);
 8024212:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024216:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 802421a:	930b      	str	r3, [sp, #44]	; 0x2c
 802421c:	d05d      	beq.n	80242da <convolve_1x1_s8_fpreq_bitmask+0x10a>

		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
				output_ch, scales, (q7_t) out_offset, out_activation_min,
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out, mask);
		mask += output_ch / 4;
 802421e:	ea4f 039a 	mov.w	r3, sl, lsr #2
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8024222:	951c      	str	r5, [sp, #112]	; 0x70
 8024224:	46b0      	mov	r8, r6
 8024226:	464d      	mov	r5, r9
		mask += output_ch / 4;
 8024228:	930a      	str	r3, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 802422a:	2600      	movs	r6, #0
 802422c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
		mask += output_ch / 4;
 802422e:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8024230:	b25b      	sxtb	r3, r3
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8024232:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8024236:	9409      	str	r4, [sp, #36]	; 0x24
 8024238:	930c      	str	r3, [sp, #48]	; 0x30
 802423a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 802423e:	930d      	str	r3, [sp, #52]	; 0x34
		q7_t *src = &input[i_element * input_ch * 2];
 8024240:	4641      	mov	r1, r8
		while (cnt > 0) {
 8024242:	b335      	cbz	r5, 8024292 <convolve_1x1_s8_fpreq_bitmask+0xc2>
		q15_t *dst = two_column_buffer;
 8024244:	9a28      	ldr	r2, [sp, #160]	; 0xa0
		while (cnt > 0) {
 8024246:	46ae      	mov	lr, r5
 8024248:	9c09      	ldr	r4, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 802424a:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802424c:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8024250:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024254:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024258:	fa93 f304 	sadd16	r3, r3, r4
 802425c:	fa9c fc04 	sadd16	ip, ip, r4
 8024260:	f8c2 c000 	str.w	ip, [r2]
 8024264:	3108      	adds	r1, #8
 8024266:	6053      	str	r3, [r2, #4]
 8024268:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802426c:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8024270:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024274:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024278:	fa93 f304 	sadd16	r3, r3, r4
 802427c:	fa9c fc04 	sadd16	ip, ip, r4
 8024280:	f1be 0e01 	subs.w	lr, lr, #1
 8024284:	f8c2 c008 	str.w	ip, [r2, #8]
 8024288:	60d3      	str	r3, [r2, #12]
 802428a:	f102 0210 	add.w	r2, r2, #16
 802428e:	d1dc      	bne.n	802424a <convolve_1x1_s8_fpreq_bitmask+0x7a>
 8024290:	9409      	str	r4, [sp, #36]	; 0x24
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 8024292:	9c21      	ldr	r4, [sp, #132]	; 0x84
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8024294:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 8024296:	f8cd b00c 	str.w	fp, [sp, #12]
 802429a:	9401      	str	r4, [sp, #4]
		mask += output_ch / 4;
 802429c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 802429e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80242a0:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 80242a4:	e9cd 0705 	strd	r0, r7, [sp, #20]
 80242a8:	9822      	ldr	r0, [sp, #136]	; 0x88
		mask += output_ch / 4;
 80242aa:	4427      	add	r7, r4
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 80242ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80242ae:	9204      	str	r2, [sp, #16]
 80242b0:	4652      	mov	r2, sl
 80242b2:	9002      	str	r0, [sp, #8]
 80242b4:	4648      	mov	r0, r9
 80242b6:	9400      	str	r4, [sp, #0]
 80242b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80242ba:	f001 fcfd 	bl	8025cb8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80242be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242c0:	44a0      	add	r8, r4
 80242c2:	429e      	cmp	r6, r3
 80242c4:	d1bc      	bne.n	8024240 <convolve_1x1_s8_fpreq_bitmask+0x70>
 80242c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80242c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80242ca:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 80242ce:	46a9      	mov	r9, r5
 80242d0:	fb03 2306 	mla	r3, r3, r6, r2
 80242d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80242d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80242d8:	9324      	str	r3, [sp, #144]	; 0x90
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80242da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80242dc:	07da      	lsls	r2, r3, #31
 80242de:	d574      	bpl.n	80243ca <convolve_1x1_s8_fpreq_bitmask+0x1fa>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80242e0:	1e5e      	subs	r6, r3, #1
 80242e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80242e4:	fb0b 3606 	mla	r6, fp, r6, r3
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 80242e8:	f1b9 0f00 	cmp.w	r9, #0
 80242ec:	d013      	beq.n	8024316 <convolve_1x1_s8_fpreq_bitmask+0x146>
		q15_t *dst = two_column_buffer;
 80242ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80242f0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80242f2:	f856 3b04 	ldr.w	r3, [r6], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80242f6:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80242fa:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80242fe:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024302:	fa93 f304 	sadd16	r3, r3, r4
 8024306:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 802430a:	3f01      	subs	r7, #1
 802430c:	6011      	str	r1, [r2, #0]
 802430e:	6053      	str	r3, [r2, #4]
 8024310:	f102 0208 	add.w	r2, r2, #8
 8024314:	d1ed      	bne.n	80242f2 <convolve_1x1_s8_fpreq_bitmask+0x122>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		int bit_starting_idx = 0;
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8024316:	f1ba 0f00 	cmp.w	sl, #0
 802431a:	d056      	beq.n	80243ca <convolve_1x1_s8_fpreq_bitmask+0x1fa>
 802431c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802431e:	f04f 0901 	mov.w	r9, #1
 8024322:	4482      	add	sl, r0
 8024324:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 8024328:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 802432c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		int bit_starting_idx = 0;
 802432e:	f04f 0e00 	mov.w	lr, #0
 8024332:	f1a3 0804 	sub.w	r8, r3, #4
			}
			if (sum > out_activation_max){
				sum = out_activation_max;
				mask_value = 0;
			}
			*out++ = (q7_t) sum;
 8024336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024338:	fa1f fb8b 	uxth.w	fp, fp
 802433c:	b25b      	sxtb	r3, r3
 802433e:	44cb      	add	fp, r9
 8024340:	9309      	str	r3, [sp, #36]	; 0x24
 8024342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024344:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8024348:	b25b      	sxtb	r3, r3
 802434a:	930a      	str	r3, [sp, #40]	; 0x28
			while (col_count) {
 802434c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			q31_t sum = bias[i_ch_out];
 802434e:	f858 3f04 	ldr.w	r3, [r8, #4]!
			while (col_count) {
 8024352:	b19a      	cbz	r2, 802437c <convolve_1x1_s8_fpreq_bitmask+0x1ac>
 8024354:	eb05 070b 	add.w	r7, r5, fp
			const q15_t *ip_as_col = runtime_buf;
 8024358:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 802435a:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 802435e:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8024360:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024364:	fa2f f282 	sxtb16	r2, r2
 8024368:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802436c:	fb22 3306 	smlad	r3, r2, r6, r3
 8024370:	6862      	ldr	r2, [r4, #4]
 8024372:	3408      	adds	r4, #8
 8024374:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8024378:	42bd      	cmp	r5, r7
 802437a:	d1ee      	bne.n	802435a <convolve_1x1_s8_fpreq_bitmask+0x18a>
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 802437c:	ee07 3a90 	vmov	s15, r3
 8024380:	fa09 f30e 	lsl.w	r3, r9, lr
			sum += out_offset;
 8024384:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8024386:	3001      	adds	r0, #1
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8024388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802438c:	ecfc 7a01 	vldmia	ip!, {s15}
 8024390:	b2da      	uxtb	r2, r3
 8024392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802439a:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 802439e:	440b      	add	r3, r1
			if (sum < out_activation_min){
 80243a0:	9921      	ldr	r1, [sp, #132]	; 0x84
 80243a2:	428b      	cmp	r3, r1
 80243a4:	db30      	blt.n	8024408 <convolve_1x1_s8_fpreq_bitmask+0x238>
			if (sum > out_activation_max){
 80243a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80243a8:	428b      	cmp	r3, r1
 80243aa:	dc16      	bgt.n	80243da <convolve_1x1_s8_fpreq_bitmask+0x20a>
			*out++ = (q7_t) sum;
 80243ac:	f800 3c01 	strb.w	r3, [r0, #-1]
			if (mask_value == 1)
				BIT_SET(*mask, bit_starting_idx);
			else
				BIT_CLEAR(*mask, bit_starting_idx);

			bit_starting_idx += 1;
 80243b0:	f10e 0e01 	add.w	lr, lr, #1
				BIT_SET(*mask, bit_starting_idx);
 80243b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
			if(bit_starting_idx == 8){
 80243b6:	f1be 0f08 	cmp.w	lr, #8
				BIT_SET(*mask, bit_starting_idx);
 80243ba:	781b      	ldrb	r3, [r3, #0]
 80243bc:	ea43 0302 	orr.w	r3, r3, r2
 80243c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80243c2:	7013      	strb	r3, [r2, #0]
			if(bit_starting_idx == 8){
 80243c4:	d017      	beq.n	80243f6 <convolve_1x1_s8_fpreq_bitmask+0x226>
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80243c6:	4582      	cmp	sl, r0
 80243c8:	d1c0      	bne.n	802434c <convolve_1x1_s8_fpreq_bitmask+0x17c>
			}
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 80243ca:	2000      	movs	r0, #0
}
 80243cc:	b013      	add	sp, #76	; 0x4c
 80243ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 80243d2:	2001      	movs	r0, #1
}
 80243d4:	b013      	add	sp, #76	; 0x4c
 80243d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*out++ = (q7_t) sum;
 80243da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243dc:	f800 3c01 	strb.w	r3, [r0, #-1]
			bit_starting_idx += 1;
 80243e0:	f10e 0e01 	add.w	lr, lr, #1
				BIT_CLEAR(*mask, bit_starting_idx);
 80243e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
			if(bit_starting_idx == 8){
 80243e6:	f1be 0f08 	cmp.w	lr, #8
				BIT_CLEAR(*mask, bit_starting_idx);
 80243ea:	781b      	ldrb	r3, [r3, #0]
 80243ec:	ea23 0302 	bic.w	r3, r3, r2
 80243f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80243f2:	7013      	strb	r3, [r2, #0]
			if(bit_starting_idx == 8){
 80243f4:	d1e7      	bne.n	80243c6 <convolve_1x1_s8_fpreq_bitmask+0x1f6>
				mask++;
 80243f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80243f8:	4582      	cmp	sl, r0
				mask++;
 80243fa:	f103 0301 	add.w	r3, r3, #1
 80243fe:	9324      	str	r3, [sp, #144]	; 0x90
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8024400:	d0e3      	beq.n	80243ca <convolve_1x1_s8_fpreq_bitmask+0x1fa>
				bit_starting_idx = 0;
 8024402:	f04f 0e00 	mov.w	lr, #0
 8024406:	e7a1      	b.n	802434c <convolve_1x1_s8_fpreq_bitmask+0x17c>
 8024408:	460b      	mov	r3, r1
			if (sum > out_activation_max){
 802440a:	9922      	ldr	r1, [sp, #136]	; 0x88
 802440c:	428b      	cmp	r3, r1
 802440e:	dce4      	bgt.n	80243da <convolve_1x1_s8_fpreq_bitmask+0x20a>
			*out++ = (q7_t) sum;
 8024410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024412:	e7e3      	b.n	80243dc <convolve_1x1_s8_fpreq_bitmask+0x20c>

08024414 <convolve_1x1_s8_fpreq_bitmask_partialCH>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel_sram, const q7_t *kernel_flash, const uint16_t first_k_channel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, q7_t *mask, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8024414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024418:	b097      	sub	sp, #92	; 0x5c
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 802441a:	f013 0803 	ands.w	r8, r3, #3
		const uint16_t output_ch, q15_t *runtime_buf) {
 802441e:	4604      	mov	r4, r0
 8024420:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8024424:	f8bd 50b4 	ldrh.w	r5, [sp, #180]	; 0xb4
 8024428:	920b      	str	r2, [sp, #44]	; 0x2c
 802442a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802442c:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 8024430:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 8024434:	950c      	str	r5, [sp, #48]	; 0x30
 8024436:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 802443a:	f040 8183 	bne.w	8024744 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x330>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 802443e:	fb01 f102 	mul.w	r1, r1, r2
	const int channel_div4 = (input_ch >> 2);
 8024442:	ea4f 0b93 	mov.w	fp, r3, lsr #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024446:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 802444a:	46a1      	mov	r9, r4
	const int32_t num_elements = output_x * output_y;
 802444c:	9113      	str	r1, [sp, #76]	; 0x4c

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 802444e:	1049      	asrs	r1, r1, #1
 8024450:	9414      	str	r4, [sp, #80]	; 0x50
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024452:	fa0f f58c 	sxth.w	r5, ip
 8024456:	461c      	mov	r4, r3
 8024458:	930e      	str	r3, [sp, #56]	; 0x38
	const int channel_div4 = (input_ch >> 2);
 802445a:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 802445e:	eac5 4505 	pkhbt	r5, r5, r5, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8024462:	910f      	str	r1, [sp, #60]	; 0x3c
 8024464:	d07b      	beq.n	802455e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x14a>
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2(kernel_sram, kernel_flash, first_k_channel,
					two_column_buffer, output_ch, scales, (q7_t) out_offset, out_activation_min,
					out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
					out, mask);
		}
		mask += output_ch / 4;
 8024466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024468:	465f      	mov	r7, fp
 802446a:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 802446e:	089b      	lsrs	r3, r3, #2
		if (first_k_channel % 4 == 0){
 8024470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024472:	4656      	mov	r6, sl
 8024474:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
		mask += output_ch / 4;
 8024478:	930d      	str	r3, [sp, #52]	; 0x34
		if (first_k_channel % 4 == 0){
 802447a:	f002 0203 	and.w	r2, r2, #3
 802447e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024480:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8024484:	b25b      	sxtb	r3, r3
 8024486:	9210      	str	r2, [sp, #64]	; 0x40
 8024488:	9312      	str	r3, [sp, #72]	; 0x48
 802448a:	0063      	lsls	r3, r4, #1
 802448c:	9311      	str	r3, [sp, #68]	; 0x44
 802448e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024490:	b29c      	uxth	r4, r3
 8024492:	940a      	str	r4, [sp, #40]	; 0x28
 8024494:	9b10      	ldr	r3, [sp, #64]	; 0x40
		q7_t *src = &input[i_element * input_ch * 2];
 8024496:	4649      	mov	r1, r9
		if (first_k_channel % 4 == 0){
 8024498:	2b00      	cmp	r3, #0
 802449a:	f000 8114 	beq.w	80246c6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2b2>
			while (cnt > 0) {
 802449e:	b3af      	cbz	r7, 802450c <convolve_1x1_s8_fpreq_bitmask_partialCH+0xf8>
 80244a0:	f109 0208 	add.w	r2, r9, #8
 80244a4:	f10a 0310 	add.w	r3, sl, #16
 80244a8:	46bc      	mov	ip, r7
 80244aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
				dst[0] = src[0] + input_offset;
 80244ac:	f912 1c08 	ldrsb.w	r1, [r2, #-8]
			while (cnt > 0) {
 80244b0:	f1bc 0c01 	subs.w	ip, ip, #1
 80244b4:	f102 0208 	add.w	r2, r2, #8
 80244b8:	f103 0310 	add.w	r3, r3, #16
				dst[0] = src[0] + input_offset;
 80244bc:	4421      	add	r1, r4
 80244be:	f823 1c20 	strh.w	r1, [r3, #-32]
				dst[1] = src[1] + input_offset;
 80244c2:	f912 1c0f 	ldrsb.w	r1, [r2, #-15]
 80244c6:	4421      	add	r1, r4
 80244c8:	f823 1c1e 	strh.w	r1, [r3, #-30]
				dst[2] = src[2] + input_offset;
 80244cc:	f912 1c0e 	ldrsb.w	r1, [r2, #-14]
 80244d0:	4421      	add	r1, r4
 80244d2:	f823 1c1c 	strh.w	r1, [r3, #-28]
				dst[3] = src[3] + input_offset;
 80244d6:	f912 1c0d 	ldrsb.w	r1, [r2, #-13]
 80244da:	4421      	add	r1, r4
 80244dc:	f823 1c1a 	strh.w	r1, [r3, #-26]
				dst[4] = src[4] + input_offset;
 80244e0:	f912 1c0c 	ldrsb.w	r1, [r2, #-12]
 80244e4:	4421      	add	r1, r4
 80244e6:	f823 1c18 	strh.w	r1, [r3, #-24]
				dst[5] = src[5] + input_offset;
 80244ea:	f912 1c0b 	ldrsb.w	r1, [r2, #-11]
 80244ee:	4421      	add	r1, r4
 80244f0:	f823 1c16 	strh.w	r1, [r3, #-22]
				dst[6] = src[6] + input_offset;
 80244f4:	f912 1c0a 	ldrsb.w	r1, [r2, #-10]
 80244f8:	4421      	add	r1, r4
 80244fa:	f823 1c14 	strh.w	r1, [r3, #-20]
				dst[7] = src[7] + input_offset;
 80244fe:	f912 1c09 	ldrsb.w	r1, [r2, #-9]
 8024502:	4421      	add	r1, r4
 8024504:	f823 1c12 	strh.w	r1, [r3, #-18]
			while (cnt > 0) {
 8024508:	d1d0      	bne.n	80244ac <convolve_1x1_s8_fpreq_bitmask_partialCH+0x98>
 802450a:	940a      	str	r4, [sp, #40]	; 0x28
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2(kernel_sram, kernel_flash, first_k_channel,
 802450c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 802450e:	4653      	mov	r3, sl
 8024510:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8024512:	9404      	str	r4, [sp, #16]
 8024514:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024516:	9007      	str	r0, [sp, #28]
 8024518:	9403      	str	r4, [sp, #12]
 802451a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802451c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802451e:	9402      	str	r4, [sp, #8]
 8024520:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8024522:	9106      	str	r1, [sp, #24]
 8024524:	4659      	mov	r1, fp
 8024526:	9401      	str	r4, [sp, #4]
 8024528:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802452a:	9005      	str	r0, [sp, #20]
 802452c:	9608      	str	r6, [sp, #32]
 802452e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024530:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024532:	9400      	str	r4, [sp, #0]
 8024534:	f001 fee4 	bl	8026300 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2>
		mask += output_ch / 4;
 8024538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 802453a:	f108 0801 	add.w	r8, r8, #1
		mask += output_ch / 4;
 802453e:	441e      	add	r6, r3
 8024540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024542:	4499      	add	r9, r3
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8024544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024546:	4598      	cmp	r8, r3
 8024548:	d1a4      	bne.n	8024494 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x80>
 802454a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802454c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802454e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8024552:	46bb      	mov	fp, r7
 8024554:	fb03 2308 	mla	r3, r3, r8, r2
 8024558:	9e20      	ldr	r6, [sp, #128]	; 0x80
 802455a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 802455c:	932a      	str	r3, [sp, #168]	; 0xa8
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 802455e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024560:	07d9      	lsls	r1, r3, #31
 8024562:	f140 80ac 	bpl.w	80246be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2aa>
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;


		const uint16_t num_col_sram = first_k_channel;
		const uint16_t num_col_flash = input_ch - first_k_channel;
 8024566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8024568:	3b01      	subs	r3, #1
		const uint16_t num_col_flash = input_ch - first_k_channel;
 802456a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		q7_t *src = &input[(num_elements - 1) * input_ch];
 802456c:	9914      	ldr	r1, [sp, #80]	; 0x50
		const uint16_t num_col_flash = input_ch - first_k_channel;
 802456e:	eba2 0a04 	sub.w	sl, r2, r4
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8024572:	fb02 1303 	mla	r3, r2, r3, r1

		int bit_starting_idx = 0;
		if (first_k_channel %4 == 0){
 8024576:	07a2      	lsls	r2, r4, #30
		const uint16_t num_col_flash = input_ch - first_k_channel;
 8024578:	fa1f fa8a 	uxth.w	sl, sl
		if (first_k_channel %4 == 0){
 802457c:	f040 80e6 	bne.w	802474c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x338>
			int cnt = channel_div4;	//two * numof2col columns
			while (cnt > 0) {
 8024580:	f1bb 0f00 	cmp.w	fp, #0
 8024584:	d015      	beq.n	80245b2 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x19e>
		q15_t *dst = two_column_buffer;
 8024586:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024588:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    memcpy(&val, *in_q7, 4);
 802458c:	f853 2b04 	ldr.w	r2, [r3], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024590:	fa2f f482 	sxtb16	r4, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024594:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024598:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802459c:	fa92 f205 	sadd16	r2, r2, r5
 80245a0:	fa94 f405 	sadd16	r4, r4, r5
			while (cnt > 0) {
 80245a4:	f1bc 0c01 	subs.w	ip, ip, #1
 80245a8:	600c      	str	r4, [r1, #0]
 80245aa:	604a      	str	r2, [r1, #4]
 80245ac:	f101 0108 	add.w	r1, r1, #8
 80245b0:	d1ec      	bne.n	802458c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x178>
				q7_q15_offset_reordered_ele(src, dst)
				cnt--;
			}
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80245b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80245b4:	2a00      	cmp	r2, #0
 80245b6:	f000 8082 	beq.w	80246be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2aa>
 80245ba:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80245bc:	4402      	add	r2, r0
				q31_t sum = bias[i_ch_out];

				/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
				const q15_t *ip_as_col = runtime_buf;

				uint16_t col_count = num_col_sram / 4;
 80245be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80245c0:	f04f 0901 	mov.w	r9, #1
 80245c4:	1f0d      	subs	r5, r1, #4
					sum = __SMLAD(ker_a2, in_b2, sum);

					col_count--;
				}

				col_count = num_col_flash / 4;
 80245c6:	ea4f 019a 	mov.w	r1, sl, lsr #2
				uint16_t col_count = num_col_sram / 4;
 80245ca:	089b      	lsrs	r3, r3, #2
 80245cc:	4692      	mov	sl, r2
				col_count = num_col_flash / 4;
 80245ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80245d0:	1e4a      	subs	r2, r1, #1
				}
				if (sum > out_activation_max){
					sum = out_activation_max;
					mask_value = 0;
				}
				*out++ = (q7_t) sum;
 80245d2:	9928      	ldr	r1, [sp, #160]	; 0xa0
		int bit_starting_idx = 0;
 80245d4:	f04f 0c00 	mov.w	ip, #0
				uint16_t col_count = num_col_sram / 4;
 80245d8:	930a      	str	r3, [sp, #40]	; 0x28
 80245da:	3b01      	subs	r3, #1
				*out++ = (q7_t) sum;
 80245dc:	b249      	sxtb	r1, r1
 80245de:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 80245e2:	b29b      	uxth	r3, r3
 80245e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80245e6:	b292      	uxth	r2, r2
 80245e8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80245ea:	444b      	add	r3, r9
 80245ec:	444a      	add	r2, r9
 80245ee:	b249      	sxtb	r1, r1
 80245f0:	9110      	str	r1, [sp, #64]	; 0x40
 80245f2:	0099      	lsls	r1, r3, #2
 80245f4:	910c      	str	r1, [sp, #48]	; 0x30
 80245f6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80245f8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80245fc:	930e      	str	r3, [sp, #56]	; 0x38
 80245fe:	0093      	lsls	r3, r2, #2
 8024600:	930d      	str	r3, [sp, #52]	; 0x34
				while (col_count) {
 8024602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				q31_t sum = bias[i_ch_out];
 8024604:	f855 3f04 	ldr.w	r3, [r5, #4]!
				while (col_count) {
 8024608:	2a00      	cmp	r2, #0
 802460a:	f000 817a 	beq.w	8024902 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4ee>
 802460e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				const q15_t *ip_as_col = runtime_buf;
 8024610:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8024612:	eb06 0802 	add.w	r8, r6, r2
 8024616:	f856 2b04 	ldr.w	r2, [r6], #4
    memcpy(&val, *in_q15, 4);
 802461a:	f8d4 e000 	ldr.w	lr, [r4]
  return (op1 >> op2) | (op1 << (32U - op2));
 802461e:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024622:	fa2f f282 	sxtb16	r2, r2
 8024626:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802462a:	fb22 330e 	smlad	r3, r2, lr, r3
 802462e:	6862      	ldr	r2, [r4, #4]
 8024630:	3408      	adds	r4, #8
 8024632:	fb21 3302 	smlad	r3, r1, r2, r3
				while (col_count) {
 8024636:	4546      	cmp	r6, r8
 8024638:	d1ed      	bne.n	8024616 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x202>
    *in_q15 += 2;
 802463a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
				while (col_count) {
 802463c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802463e:	b1a2      	cbz	r2, 802466a <convolve_1x1_s8_fpreq_bitmask_partialCH+0x256>
 8024640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024642:	eb07 0802 	add.w	r8, r7, r2
    memcpy(&val, *in_q7, 4);
 8024646:	f857 2b04 	ldr.w	r2, [r7], #4
    memcpy(&val, *in_q15, 4);
 802464a:	f8d4 e000 	ldr.w	lr, [r4]
  return (op1 >> op2) | (op1 << (32U - op2));
 802464e:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024652:	fa2f f282 	sxtb16	r2, r2
 8024656:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802465a:	fb22 330e 	smlad	r3, r2, lr, r3
 802465e:	6862      	ldr	r2, [r4, #4]
 8024660:	3408      	adds	r4, #8
 8024662:	fb21 3302 	smlad	r3, r1, r2, r3
 8024666:	4547      	cmp	r7, r8
 8024668:	d1ed      	bne.n	8024646 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x232>
				sum = (q31_t) ((float) sum * scales[i_ch_out]);
 802466a:	ee07 3a90 	vmov	s15, r3
 802466e:	fa09 f30c 	lsl.w	r3, r9, ip
				sum += out_offset;
 8024672:	9925      	ldr	r1, [sp, #148]	; 0x94
 8024674:	3001      	adds	r0, #1
				sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8024676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802467a:	ecfb 7a01 	vldmia	fp!, {s15}
 802467e:	b2da      	uxtb	r2, r3
 8024680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024688:	ee17 3a90 	vmov	r3, s15
				sum += out_offset;
 802468c:	440b      	add	r3, r1
				if (sum < out_activation_min){
 802468e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8024690:	4299      	cmp	r1, r3
 8024692:	f300 8138 	bgt.w	8024906 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4f2>
				if (sum > out_activation_max){
 8024696:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024698:	4299      	cmp	r1, r3
 802469a:	f2c0 8114 	blt.w	80248c6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4b2>
				*out++ = (q7_t) sum;
 802469e:	f800 3c01 	strb.w	r3, [r0, #-1]
				if (mask_value == 1)
					BIT_SET(*mask, bit_starting_idx);
				else
					BIT_CLEAR(*mask, bit_starting_idx);

				bit_starting_idx += 1;
 80246a2:	f10c 0c01 	add.w	ip, ip, #1
					BIT_SET(*mask, bit_starting_idx);
 80246a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
				if(bit_starting_idx == 8){
 80246a8:	f1bc 0f08 	cmp.w	ip, #8
					BIT_SET(*mask, bit_starting_idx);
 80246ac:	781b      	ldrb	r3, [r3, #0]
 80246ae:	ea43 0302 	orr.w	r3, r3, r2
 80246b2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80246b4:	7013      	strb	r3, [r2, #0]
				if(bit_starting_idx == 8){
 80246b6:	f000 8115 	beq.w	80248e4 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4d0>
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80246ba:	4582      	cmp	sl, r0
 80246bc:	d1a1      	bne.n	8024602 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1ee>
			}
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 80246be:	2000      	movs	r0, #0
}
 80246c0:	b017      	add	sp, #92	; 0x5c
 80246c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (cnt > 0) {
 80246c6:	b337      	cbz	r7, 8024716 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x302>
		q15_t *dst = two_column_buffer;
 80246c8:	4652      	mov	r2, sl
			while (cnt > 0) {
 80246ca:	46be      	mov	lr, r7
 80246cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    memcpy(&val, *in_q7, 4);
 80246ce:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80246d0:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80246d4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80246d8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80246dc:	fa93 f305 	sadd16	r3, r3, r5
 80246e0:	fa9c fc05 	sadd16	ip, ip, r5
 80246e4:	f8c2 c000 	str.w	ip, [r2]
 80246e8:	3108      	adds	r1, #8
 80246ea:	6053      	str	r3, [r2, #4]
 80246ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80246f0:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80246f4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80246f8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80246fc:	fa93 f305 	sadd16	r3, r3, r5
 8024700:	fa9c fc05 	sadd16	ip, ip, r5
 8024704:	f1be 0e01 	subs.w	lr, lr, #1
 8024708:	f8c2 c008 	str.w	ip, [r2, #8]
 802470c:	60d3      	str	r3, [r2, #12]
 802470e:	f102 0210 	add.w	r2, r2, #16
 8024712:	d1dc      	bne.n	80246ce <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2ba>
 8024714:	940a      	str	r4, [sp, #40]	; 0x28
			out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH(kernel_sram, kernel_flash, first_k_channel,
 8024716:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8024718:	4653      	mov	r3, sl
 802471a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802471c:	9404      	str	r4, [sp, #16]
 802471e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024720:	9007      	str	r0, [sp, #28]
 8024722:	9403      	str	r4, [sp, #12]
 8024724:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024726:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024728:	9402      	str	r4, [sp, #8]
 802472a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 802472c:	9106      	str	r1, [sp, #24]
 802472e:	4659      	mov	r1, fp
 8024730:	9401      	str	r4, [sp, #4]
 8024732:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024734:	9005      	str	r0, [sp, #20]
 8024736:	9608      	str	r6, [sp, #32]
 8024738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802473a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802473c:	9400      	str	r4, [sp, #0]
 802473e:	f001 fc19 	bl	8025f74 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH>
 8024742:	e6f9      	b.n	8024538 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x124>
		return PARAM_NO_SUPPORT;
 8024744:	2001      	movs	r0, #1
}
 8024746:	b017      	add	sp, #92	; 0x5c
 8024748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (cnt > 0) {
 802474c:	f1bb 0f00 	cmp.w	fp, #0
 8024750:	d01f      	beq.n	8024792 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x37e>
 8024752:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024754:	3304      	adds	r3, #4
 8024756:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024758:	b292      	uxth	r2, r2
 802475a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802475c:	3108      	adds	r1, #8
				dst[0] = src[0] + input_offset;
 802475e:	f913 4c04 	ldrsb.w	r4, [r3, #-4]
			while (cnt > 0) {
 8024762:	3d01      	subs	r5, #1
 8024764:	f103 0304 	add.w	r3, r3, #4
 8024768:	f101 0108 	add.w	r1, r1, #8
				dst[0] = src[0] + input_offset;
 802476c:	4414      	add	r4, r2
 802476e:	f821 4c10 	strh.w	r4, [r1, #-16]
				dst[1] = src[1] + input_offset;
 8024772:	f913 4c07 	ldrsb.w	r4, [r3, #-7]
 8024776:	4414      	add	r4, r2
 8024778:	f821 4c0e 	strh.w	r4, [r1, #-14]
				dst[2] = src[2] + input_offset;
 802477c:	f913 4c06 	ldrsb.w	r4, [r3, #-6]
 8024780:	4414      	add	r4, r2
 8024782:	f821 4c0c 	strh.w	r4, [r1, #-12]
				dst[3] = src[3] + input_offset;
 8024786:	f913 4c05 	ldrsb.w	r4, [r3, #-5]
 802478a:	4414      	add	r4, r2
 802478c:	f821 4c0a 	strh.w	r4, [r1, #-10]
			while (cnt > 0) {
 8024790:	d1e5      	bne.n	802475e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x34a>
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8024792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024794:	2a00      	cmp	r2, #0
 8024796:	d092      	beq.n	80246be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2aa>
				uint16_t col_count = num_col_sram / 2;
 8024798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802479a:	4402      	add	r2, r0
 802479c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802479e:	085b      	lsrs	r3, r3, #1
 80247a0:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80247a2:	f1a1 0904 	sub.w	r9, r1, #4
				col_count = num_col_flash / 2;
 80247a6:	ea4f 015a 	mov.w	r1, sl, lsr #1
				uint16_t col_count = num_col_sram / 2;
 80247aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80247ac:	3b01      	subs	r3, #1
 80247ae:	920c      	str	r2, [sp, #48]	; 0x30
 80247b0:	1e4a      	subs	r2, r1, #1
 80247b2:	b29b      	uxth	r3, r3
 80247b4:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80247b6:	b292      	uxth	r2, r2
 80247b8:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 80247bc:	eb04 0883 	add.w	r8, r4, r3, lsl #2
 80247c0:	3301      	adds	r3, #1
 80247c2:	0094      	lsls	r4, r2, #2
 80247c4:	3201      	adds	r2, #1
 80247c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		int bit_starting_idx = 0;
 80247ca:	f04f 0a00 	mov.w	sl, #0
 80247ce:	005b      	lsls	r3, r3, #1
 80247d0:	f108 0808 	add.w	r8, r8, #8
 80247d4:	950f      	str	r5, [sp, #60]	; 0x3c
 80247d6:	930d      	str	r3, [sp, #52]	; 0x34
 80247d8:	f104 0308 	add.w	r3, r4, #8
 80247dc:	9310      	str	r3, [sp, #64]	; 0x40
 80247de:	0053      	lsls	r3, r2, #1
 80247e0:	930e      	str	r3, [sp, #56]	; 0x38
				*out++ = (q7_t) sum;
 80247e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247e4:	b25b      	sxtb	r3, r3
 80247e6:	9311      	str	r3, [sp, #68]	; 0x44
 80247e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80247ea:	b25b      	sxtb	r3, r3
 80247ec:	9312      	str	r3, [sp, #72]	; 0x48
				while (col_count) {
 80247ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				q31_t sum = bias[i_ch_out];
 80247f0:	f859 3f04 	ldr.w	r3, [r9, #4]!
				while (col_count) {
 80247f4:	2a00      	cmp	r2, #0
 80247f6:	d063      	beq.n	80248c0 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4ac>
 80247f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80247fa:	1cb5      	adds	r5, r6, #2
 80247fc:	1d14      	adds	r4, r2, #4
					sum += ip_as_col[0] * ker_sram[0];
 80247fe:	f915 cc02 	ldrsb.w	ip, [r5, #-2]
 8024802:	3404      	adds	r4, #4
 8024804:	f834 ec08 	ldrh.w	lr, [r4, #-8]
 8024808:	3502      	adds	r5, #2
					sum += ip_as_col[1] * ker_sram[1];
 802480a:	f915 2c03 	ldrsb.w	r2, [r5, #-3]
					sum += ip_as_col[0] * ker_sram[0];
 802480e:	fb1e 330c 	smlabb	r3, lr, ip, r3
					sum += ip_as_col[1] * ker_sram[1];
 8024812:	f834 cc06 	ldrh.w	ip, [r4, #-6]
				while (col_count) {
 8024816:	45a0      	cmp	r8, r4
					sum += ip_as_col[1] * ker_sram[1];
 8024818:	fb1c 3302 	smlabb	r3, ip, r2, r3
				while (col_count) {
 802481c:	d1ef      	bne.n	80247fe <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3ea>
 802481e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
					ip_as_col += 2;
 8024820:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8024824:	4416      	add	r6, r2
				while (col_count) {
 8024826:	b1d1      	cbz	r1, 802485e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x44a>
 8024828:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802482a:	f10e 0404 	add.w	r4, lr, #4
 802482e:	1cbd      	adds	r5, r7, #2
 8024830:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8024834:	4496      	add	lr, r2
					sum += ip_as_col[0] * ker_flash[0];
 8024836:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802483a:	3404      	adds	r4, #4
 802483c:	f915 ac02 	ldrsb.w	sl, [r5, #-2]
 8024840:	3502      	adds	r5, #2
					sum += ip_as_col[1] * ker_flash[1];
 8024842:	f915 cc03 	ldrsb.w	ip, [r5, #-3]
					sum += ip_as_col[0] * ker_flash[0];
 8024846:	fb12 330a 	smlabb	r3, r2, sl, r3
					sum += ip_as_col[1] * ker_flash[1];
 802484a:	f834 2c06 	ldrh.w	r2, [r4, #-6]
				while (col_count) {
 802484e:	45a6      	cmp	lr, r4
					sum += ip_as_col[1] * ker_flash[1];
 8024850:	fb12 330c 	smlabb	r3, r2, ip, r3
				while (col_count) {
 8024854:	d1ef      	bne.n	8024836 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x422>
 8024856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024858:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802485c:	4417      	add	r7, r2
				sum = (q31_t) ((float) sum * scales[i_ch_out]);
 802485e:	ee07 3a90 	vmov	s15, r3
 8024862:	2301      	movs	r3, #1
				sum += out_offset;
 8024864:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024866:	3001      	adds	r0, #1
				sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8024868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802486c:	ecfb 7a01 	vldmia	fp!, {s15}
 8024870:	fa03 f30a 	lsl.w	r3, r3, sl
 8024874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024878:	b2da      	uxtb	r2, r3
 802487a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802487e:	ee17 3a90 	vmov	r3, s15
				sum += out_offset;
 8024882:	4423      	add	r3, r4
				if (sum < out_activation_min){
 8024884:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024886:	42a3      	cmp	r3, r4
 8024888:	da45      	bge.n	8024916 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x502>
				if (sum > out_activation_max){
 802488a:	4623      	mov	r3, r4
 802488c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 802488e:	42a3      	cmp	r3, r4
 8024890:	dc3f      	bgt.n	8024912 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4fe>
				*out++ = (q7_t) sum;
 8024892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024894:	f800 3c01 	strb.w	r3, [r0, #-1]
				bit_starting_idx += 1;
 8024898:	f10a 0a01 	add.w	sl, sl, #1
					BIT_CLEAR(*mask, bit_starting_idx);
 802489c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
				if(bit_starting_idx == 8){
 802489e:	f1ba 0f08 	cmp.w	sl, #8
					BIT_CLEAR(*mask, bit_starting_idx);
 80248a2:	781b      	ldrb	r3, [r3, #0]
 80248a4:	ea23 0302 	bic.w	r3, r3, r2
 80248a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80248aa:	7013      	strb	r3, [r2, #0]
				if(bit_starting_idx == 8){
 80248ac:	d043      	beq.n	8024936 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x522>
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80248ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248b0:	4283      	cmp	r3, r0
 80248b2:	f43f af04 	beq.w	80246be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2aa>
				while (col_count) {
 80248b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				q31_t sum = bias[i_ch_out];
 80248b8:	f859 3f04 	ldr.w	r3, [r9, #4]!
				while (col_count) {
 80248bc:	2a00      	cmp	r2, #0
 80248be:	d19b      	bne.n	80247f8 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3e4>
				const q15_t *ip_as_col = runtime_buf;
 80248c0:	f8dd e0b8 	ldr.w	lr, [sp, #184]	; 0xb8
 80248c4:	e7af      	b.n	8024826 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x412>
				*out++ = (q7_t) sum;
 80248c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80248c8:	f800 3c01 	strb.w	r3, [r0, #-1]
				bit_starting_idx += 1;
 80248cc:	f10c 0c01 	add.w	ip, ip, #1
					BIT_CLEAR(*mask, bit_starting_idx);
 80248d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
				if(bit_starting_idx == 8){
 80248d2:	f1bc 0f08 	cmp.w	ip, #8
					BIT_CLEAR(*mask, bit_starting_idx);
 80248d6:	781b      	ldrb	r3, [r3, #0]
 80248d8:	ea23 0302 	bic.w	r3, r3, r2
 80248dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80248de:	7013      	strb	r3, [r2, #0]
				if(bit_starting_idx == 8){
 80248e0:	f47f aeeb 	bne.w	80246ba <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2a6>
					mask++;
 80248e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80248e6:	4582      	cmp	sl, r0
					mask++;
 80248e8:	f103 0301 	add.w	r3, r3, #1
 80248ec:	932a      	str	r3, [sp, #168]	; 0xa8
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80248ee:	f43f aee6 	beq.w	80246be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2aa>
				while (col_count) {
 80248f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
					bit_starting_idx = 0;
 80248f4:	f04f 0c00 	mov.w	ip, #0
				q31_t sum = bias[i_ch_out];
 80248f8:	f855 3f04 	ldr.w	r3, [r5, #4]!
				while (col_count) {
 80248fc:	2a00      	cmp	r2, #0
 80248fe:	f47f ae86 	bne.w	802460e <convolve_1x1_s8_fpreq_bitmask_partialCH+0x1fa>
				const q15_t *ip_as_col = runtime_buf;
 8024902:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8024904:	e69a      	b.n	802463c <convolve_1x1_s8_fpreq_bitmask_partialCH+0x228>
 8024906:	460b      	mov	r3, r1
				if (sum > out_activation_max){
 8024908:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802490a:	428b      	cmp	r3, r1
 802490c:	dcdb      	bgt.n	80248c6 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4b2>
				*out++ = (q7_t) sum;
 802490e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024910:	e7da      	b.n	80248c8 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4b4>
				*out++ = (q7_t) sum;
 8024912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024914:	e7be      	b.n	8024894 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x480>
				if (sum > out_activation_max){
 8024916:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8024918:	42a3      	cmp	r3, r4
 802491a:	dcfa      	bgt.n	8024912 <convolve_1x1_s8_fpreq_bitmask_partialCH+0x4fe>
				*out++ = (q7_t) sum;
 802491c:	f800 3c01 	strb.w	r3, [r0, #-1]
				bit_starting_idx += 1;
 8024920:	f10a 0a01 	add.w	sl, sl, #1
					BIT_SET(*mask, bit_starting_idx);
 8024924:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
				if(bit_starting_idx == 8){
 8024926:	f1ba 0f08 	cmp.w	sl, #8
					BIT_SET(*mask, bit_starting_idx);
 802492a:	781b      	ldrb	r3, [r3, #0]
 802492c:	ea43 0302 	orr.w	r3, r3, r2
 8024930:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024932:	7013      	strb	r3, [r2, #0]
				if(bit_starting_idx == 8){
 8024934:	d1bb      	bne.n	80248ae <convolve_1x1_s8_fpreq_bitmask_partialCH+0x49a>
					mask++;
 8024936:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024938:	3301      	adds	r3, #1
 802493a:	932a      	str	r3, [sp, #168]	; 0xa8
			for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 802493c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802493e:	4283      	cmp	r3, r0
 8024940:	f43f aebd 	beq.w	80246be <convolve_1x1_s8_fpreq_bitmask_partialCH+0x2aa>
					bit_starting_idx = 0;
 8024944:	f04f 0a00 	mov.w	sl, #0
 8024948:	e751      	b.n	80247ee <convolve_1x1_s8_fpreq_bitmask_partialCH+0x3da>
 802494a:	bf00      	nop

0802494c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>:
		const float *scales, const int32_t output_offset,
		const int32_t input_offset, const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf,
		q7_t pad_value) {
 802494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024950:	b09b      	sub	sp, #108	; 0x6c
 8024952:	468c      	mov	ip, r1
 8024954:	461f      	mov	r7, r3
 8024956:	4686      	mov	lr, r0
	q15_t *two_column_buf = runtime_buf;
	q7_t *out = output;

	q15_t pad16 = pad_value;
	const int16_t inoff16 = input_offset;
	q15_t pad_out = pad16 + inoff16;
 8024958:	9928      	ldr	r1, [sp, #160]	; 0xa0
		q7_t pad_value) {
 802495a:	f99d 20c4 	ldrsb.w	r2, [sp, #196]	; 0xc4
	q15_t pad_out = pad16 + inoff16;
 802495e:	fa1f fa81 	uxth.w	sl, r1
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024962:	9b28      	ldr	r3, [sp, #160]	; 0xa0
		q7_t pad_value) {
 8024964:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
	q15_t pad_out = pad16 + inoff16;
 8024968:	4452      	add	r2, sl
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 802496a:	b21c      	sxth	r4, r3
		q7_t pad_value) {
 802496c:	9115      	str	r1, [sp, #84]	; 0x54
	q15_t pad_out = pad16 + inoff16;
 802496e:	fa0f f882 	sxth.w	r8, r2
		q7_t pad_value) {
 8024972:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 8024976:	eac8 4308 	pkhbt	r3, r8, r8, lsl #16
 802497a:	469b      	mov	fp, r3
		q7_t pad_value) {
 802497c:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8024980:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		q7_t pad_value) {
 8024984:	9309      	str	r3, [sp, #36]	; 0x24
 8024986:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 802498a:	9314      	str	r3, [sp, #80]	; 0x50

	const q7_t *ip_a0 = kernel;

	for (int i = 0; i < output_ch; i += 2) {
 802498c:	2900      	cmp	r1, #0
 802498e:	f000 80bc 	beq.w	8024b0a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1be>
 8024992:	3901      	subs	r1, #1
 8024994:	2036      	movs	r0, #54	; 0x36
 8024996:	9b30      	ldr	r3, [sp, #192]	; 0xc0
	const q7_t *ip_a0 = kernel;
 8024998:	464a      	mov	r2, r9
 802499a:	0849      	lsrs	r1, r1, #1
 802499c:	fb01 0000 	mla	r0, r1, r0, r0
 80249a0:	eb09 0500 	add.w	r5, r9, r0
 80249a4:	6811      	ldr	r1, [r2, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80249a6:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80249aa:	fa2f f181 	sxtb16	r1, r1
    q31_t inA = arm_nn_read_q7x4_ia(&source);
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
    q31_t inAbuf2 = __SXTB16(inA);

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80249ae:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80249b2:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 80249b6:	e9c3 1600 	strd	r1, r6, [r3]
    memcpy(&val, *in_q7, 4);
 80249ba:	f8d2 101b 	ldr.w	r1, [r2, #27]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80249be:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80249c2:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80249c6:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80249ca:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80249ce:	f8c3 603a 	str.w	r6, [r3, #58]	; 0x3a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80249d2:	f8c3 1036 	str.w	r1, [r3, #54]	; 0x36
    memcpy(&val, *in_q7, 4);
 80249d6:	6851      	ldr	r1, [r2, #4]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80249d8:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80249dc:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80249e0:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80249e4:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 80249e8:	e9c3 1602 	strd	r1, r6, [r3, #8]
    memcpy(&val, *in_q7, 4);
 80249ec:	f8d2 101f 	ldr.w	r1, [r2, #31]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80249f0:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80249f4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80249f8:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80249fc:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a00:	f8c3 6042 	str.w	r6, [r3, #66]	; 0x42
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a04:	f8c3 103e 	str.w	r1, [r3, #62]	; 0x3e
    memcpy(&val, *in_q7, 4);
 8024a08:	6891      	ldr	r1, [r2, #8]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024a0a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024a0e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a12:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a16:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8024a1a:	e9c3 1604 	strd	r1, r6, [r3, #16]
    memcpy(&val, *in_q7, 4);
 8024a1e:	f8d2 1023 	ldr.w	r1, [r2, #35]	; 0x23
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024a22:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024a26:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a2a:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a2e:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a32:	f8c3 604a 	str.w	r6, [r3, #74]	; 0x4a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a36:	f8c3 1046 	str.w	r1, [r3, #70]	; 0x46
    memcpy(&val, *in_q7, 4);
 8024a3a:	68d1      	ldr	r1, [r2, #12]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024a3c:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024a40:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a44:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a48:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8024a4c:	e9c3 1606 	strd	r1, r6, [r3, #24]
    memcpy(&val, *in_q7, 4);
 8024a50:	f8d2 1027 	ldr.w	r1, [r2, #39]	; 0x27
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024a54:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024a58:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a5c:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a60:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a64:	f8c3 6052 	str.w	r6, [r3, #82]	; 0x52
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a68:	f8c3 104e 	str.w	r1, [r3, #78]	; 0x4e
    memcpy(&val, *in_q7, 4);
 8024a6c:	6911      	ldr	r1, [r2, #16]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024a6e:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024a72:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a76:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a7a:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8024a7e:	e9c3 1608 	strd	r1, r6, [r3, #32]
    memcpy(&val, *in_q7, 4);
 8024a82:	f8d2 102b 	ldr.w	r1, [r2, #43]	; 0x2b
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024a86:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024a8a:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a8e:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a92:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024a96:	f8c3 605a 	str.w	r6, [r3, #90]	; 0x5a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024a9a:	f8c3 1056 	str.w	r1, [r3, #86]	; 0x56
    memcpy(&val, *in_q7, 4);
 8024a9e:	6951      	ldr	r1, [r2, #20]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024aa0:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024aa4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024aa8:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024aac:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8024ab0:	e9c3 160a 	strd	r1, r6, [r3, #40]	; 0x28
    memcpy(&val, *in_q7, 4);
 8024ab4:	f8d2 102f 	ldr.w	r1, [r2, #47]	; 0x2f
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024ab8:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024abc:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024ac0:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024ac4:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024ac8:	f8c3 6062 	str.w	r6, [r3, #98]	; 0x62
 8024acc:	3236      	adds	r2, #54	; 0x36
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024ace:	f8c3 105e 	str.w	r1, [r3, #94]	; 0x5e
 8024ad2:	336c      	adds	r3, #108	; 0x6c
		dst1_31 += 2;
		dst2_31 += 2;
		//25, 26, 27
		dst1 = dst1_31;
		dst2 = dst2_31;
		dst1[0] = *ip_a0++;
 8024ad4:	f912 1c1e 	ldrsb.w	r1, [r2, #-30]
 8024ad8:	f823 1c3c 	strh.w	r1, [r3, #-60]
		dst1[1] = *ip_a0++;
 8024adc:	f912 1c1d 	ldrsb.w	r1, [r2, #-29]
 8024ae0:	f823 1c3a 	strh.w	r1, [r3, #-58]
		dst1[2] = *ip_a0++;
 8024ae4:	f912 1c1c 	ldrsb.w	r1, [r2, #-28]
 8024ae8:	f823 1c38 	strh.w	r1, [r3, #-56]
		dst2[0] = *ip_a1++;
 8024aec:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
 8024af0:	f823 1c06 	strh.w	r1, [r3, #-6]
		dst2[1] = *ip_a1++;
 8024af4:	f912 1c02 	ldrsb.w	r1, [r2, #-2]
 8024af8:	f823 1c04 	strh.w	r1, [r3, #-4]
		dst2[2] = *ip_a1++;
 8024afc:	f912 1c01 	ldrsb.w	r1, [r2, #-1]
	for (int i = 0; i < output_ch; i += 2) {
 8024b00:	42aa      	cmp	r2, r5
		dst2[2] = *ip_a1++;
 8024b02:	f823 1c02 	strh.w	r1, [r3, #-2]
	for (int i = 0; i < output_ch; i += 2) {
 8024b06:	f47f af4d 	bne.w	80249a4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x58>

		/* skip row */
		ip_a0 += 27;
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8024b0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	f000 8152 	beq.w	8024db6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>
 8024b12:	4639      	mov	r1, r7

			two_column_buf += 27;
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 27) {

				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8024b14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8024b18:	970d      	str	r7, [sp, #52]	; 0x34
			int input_row_offset = 3 * input_x;
 8024b1a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8024b1e:	00ca      	lsls	r2, r1, #3
 8024b20:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024b22:	900f      	str	r0, [sp, #60]	; 0x3c
					src3 = src2 + input_row_offset;
 8024b24:	4670      	mov	r0, lr
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8024b26:	9219      	str	r2, [sp, #100]	; 0x64
 8024b28:	440a      	add	r2, r1
					src3 = src2 + input_row_offset;
 8024b2a:	4438      	add	r0, r7
 8024b2c:	465e      	mov	r6, fp
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8024b2e:	9216      	str	r2, [sp, #88]	; 0x58
 8024b30:	461a      	mov	r2, r3
					src3 = src2 + input_row_offset;
 8024b32:	9018      	str	r0, [sp, #96]	; 0x60
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8024b34:	2000      	movs	r0, #0
 8024b36:	326c      	adds	r2, #108	; 0x6c
 8024b38:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8024b3c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8024b40:	9010      	str	r0, [sp, #64]	; 0x40
 8024b42:	920a      	str	r2, [sp, #40]	; 0x28
 8024b44:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8024b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024b4a:	2a00      	cmp	r2, #0
 8024b4c:	f000 80b2 	beq.w	8024cb4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x368>
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 8024b50:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8024b54:	2500      	movs	r5, #0
					src = input + (base_idx_y * input_x) * input_ch;
 8024b56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024b58:	970b      	str	r7, [sp, #44]	; 0x2c
 8024b5a:	fb02 f209 	mul.w	r2, r2, r9
 8024b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024b62:	920e      	str	r2, [sp, #56]	; 0x38
 8024b64:	fb01 0202 	mla	r2, r1, r2, r0
 8024b68:	9211      	str	r2, [sp, #68]	; 0x44
					src2 = src + input_row_offset;
 8024b6a:	443a      	add	r2, r7
 8024b6c:	9212      	str	r2, [sp, #72]	; 0x48
					src3 = src2 + input_row_offset;
 8024b6e:	443a      	add	r2, r7
 8024b70:	9213      	str	r2, [sp, #76]	; 0x4c
 8024b72:	b2ad      	uxth	r5, r5
			if (base_idx_y != -1) {
 8024b74:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8024b78:	ea4f 0245 	mov.w	r2, r5, lsl #1
 8024b7c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8024b80:	b212      	sxth	r2, r2
 8024b82:	f000 811c 	beq.w	8024dbe <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x472>
				if (base_idx_x != -1) { //load all for now and unroll all
 8024b86:	1c50      	adds	r0, r2, #1
 8024b88:	f000 8155 	beq.w	8024e36 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x4ea>
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8024b8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024b8e:	440a      	add	r2, r1
 8024b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024b94:	fb01 0202 	mla	r2, r1, r2, r0
					src2 = src + input_row_offset;
 8024b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8024b9a:	f8d2 c000 	ldr.w	ip, [r2]
 8024b9e:	1850      	adds	r0, r2, r1
 8024ba0:	fa2f fb8c 	sxtb16	fp, ip
					src3 = src2 + input_row_offset;
 8024ba4:	1841      	adds	r1, r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8024ba6:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024baa:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src, dst)
 8024bae:	eacc 4e2b 	pkhtb	lr, ip, fp, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024bb2:	fa9e fe04 	sadd16	lr, lr, r4
 8024bb6:	eacb 4c0c 	pkhbt	ip, fp, ip, lsl #16
 8024bba:	fa9c fc04 	sadd16	ip, ip, r4
 8024bbe:	f8c3 e004 	str.w	lr, [r3, #4]
 8024bc2:	f8c3 c000 	str.w	ip, [r3]
 8024bc6:	f8d2 c004 	ldr.w	ip, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024bca:	fa2f fe8c 	sxtb16	lr, ip
  return (op1 >> op2) | (op1 << (32U - op2));
 8024bce:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024bd2:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src, dst)
 8024bd6:	eacc 4b2e 	pkhtb	fp, ip, lr, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024bda:	fa9b fb04 	sadd16	fp, fp, r4
 8024bde:	eace 4c0c 	pkhbt	ip, lr, ip, lsl #16
 8024be2:	fa9c fc04 	sadd16	ip, ip, r4
 8024be6:	f8c3 c008 	str.w	ip, [r3, #8]
 8024bea:	f8c3 b00c 	str.w	fp, [r3, #12]
					*dst++ = *src++ + input_offset;
 8024bee:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8024bf2:	4452      	add	r2, sl
 8024bf4:	821a      	strh	r2, [r3, #16]
 8024bf6:	6802      	ldr	r2, [r0, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024bf8:	fa2f fc82 	sxtb16	ip, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024bfc:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c00:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8024c04:	eac2 4e2c 	pkhtb	lr, r2, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024c08:	fa9e fe04 	sadd16	lr, lr, r4
 8024c0c:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
 8024c10:	fa92 f204 	sadd16	r2, r2, r4
 8024c14:	f8c3 e016 	str.w	lr, [r3, #22]
 8024c18:	f8c3 2012 	str.w	r2, [r3, #18]
 8024c1c:	6842      	ldr	r2, [r0, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c1e:	fa2f fc82 	sxtb16	ip, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024c22:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c26:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8024c2a:	eac2 4e2c 	pkhtb	lr, r2, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024c2e:	fa9e fe04 	sadd16	lr, lr, r4
 8024c32:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
 8024c36:	fa92 f204 	sadd16	r2, r2, r4
 8024c3a:	f8c3 201a 	str.w	r2, [r3, #26]
 8024c3e:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8024c42:	f990 2008 	ldrsb.w	r2, [r0, #8]
					*dst2++ = *src2++ + input_offset;
 8024c46:	4452      	add	r2, sl
 8024c48:	845a      	strh	r2, [r3, #34]	; 0x22
 8024c4a:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c4c:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024c50:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c54:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8024c58:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024c5c:	fa9c fc04 	sadd16	ip, ip, r4
 8024c60:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8024c64:	fa92 f204 	sadd16	r2, r2, r4
 8024c68:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8024c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8024c6e:	684a      	ldr	r2, [r1, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c70:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024c74:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024c78:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8024c7c:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024c80:	fa9c fc04 	sadd16	ip, ip, r4
 8024c84:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8024c88:	fa92 f204 	sadd16	r2, r2, r4
 8024c8c:	62da      	str	r2, [r3, #44]	; 0x2c
			two_column_buf += 27;
 8024c8e:	3336      	adds	r3, #54	; 0x36
 8024c90:	f843 cc06 	str.w	ip, [r3, #-6]
					*dst3++ = *src3++ + input_offset;
 8024c94:	f991 2008 	ldrsb.w	r2, [r1, #8]
 8024c98:	4452      	add	r2, sl
 8024c9a:	f823 2c02 	strh.w	r2, [r3, #-2]
			if (two_column_buf == runtime_buf + 2 * 27) {
 8024c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024ca0:	4293      	cmp	r3, r2
 8024ca2:	f000 8133 	beq.w	8024f0c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5c0>
 8024ca6:	3501      	adds	r5, #1
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8024ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024caa:	b22d      	sxth	r5, r5
 8024cac:	4295      	cmp	r5, r2
 8024cae:	f6ff af60 	blt.w	8024b72 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x226>
 8024cb2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024cb6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024cb8:	3202      	adds	r2, #2
 8024cba:	3101      	adds	r1, #1
 8024cbc:	b292      	uxth	r2, r2
 8024cbe:	b209      	sxth	r1, r1
 8024cc0:	920f      	str	r2, [sp, #60]	; 0x3c
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8024cc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024cc4:	9110      	str	r1, [sp, #64]	; 0x40
 8024cc6:	4291      	cmp	r1, r2
 8024cc8:	f6ff af3e 	blt.w	8024b48 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1fc>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buf != runtime_buf) {
 8024ccc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024cce:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8024cd2:	4293      	cmp	r3, r2
 8024cd4:	d06f      	beq.n	8024db6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++) {
 8024cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d06c      	beq.n	8024db6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8024cdc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024cde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024ce0:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8024ce2:	440a      	add	r2, r1
 8024ce4:	4617      	mov	r7, r2
 8024ce6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024ce8:	f3c7 088f 	ubfx	r8, r7, #2, #16
 8024cec:	f1a2 0c04 	sub.w	ip, r2, #4
 8024cf0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 8024cf2:	f007 0703 	and.w	r7, r7, #3
 8024cf6:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
 8024cfa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8024cfe:	4413      	add	r3, r2
 8024d00:	fa1f fe8e 	uxth.w	lr, lr
 8024d04:	469b      	mov	fp, r3
 8024d06:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024d08:	f10e 0e01 	add.w	lr, lr, #1
 8024d0c:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 8024d10:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8024d14:	46f0      	mov	r8, lr
 8024d16:	4696      	mov	lr, r2
			while (col_count) {
 8024d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
			q31_t sum = bias[i];
 8024d1a:	f85c 1f04 	ldr.w	r1, [ip, #4]!
			while (col_count) {
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	f000 813e 	beq.w	8024fa0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x654>
 8024d24:	eb09 050a 	add.w	r5, r9, sl
 8024d28:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8024d2a:	f859 3b04 	ldr.w	r3, [r9], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8024d2e:	fa2f f293 	sxtb16	r2, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024d32:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8024d36:	eac2 4423 	pkhtb	r4, r2, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8024d3a:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
    memcpy(&val, *in_q15, 4);
 8024d3e:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8024d40:	fb23 1102 	smlad	r1, r3, r2, r1
 8024d44:	6843      	ldr	r3, [r0, #4]
 8024d46:	3008      	adds	r0, #8
 8024d48:	fb24 1103 	smlad	r1, r4, r3, r1
 8024d4c:	45a9      	cmp	r9, r5
 8024d4e:	d1ec      	bne.n	8024d2a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3de>
    *in_q15 += 2;
 8024d50:	4643      	mov	r3, r8
			while (col_count) {
 8024d52:	b1b7      	cbz	r7, 8024d82 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
				q7_t ker_a1 = *ker_a++;
				q15_t ip_b1 = *ip_as_col++;
				sum += ker_a1 * ip_b1;
 8024d54:	f999 2000 	ldrsb.w	r2, [r9]
			while (col_count) {
 8024d58:	2f01      	cmp	r7, #1
				sum += ker_a1 * ip_b1;
 8024d5a:	8818      	ldrh	r0, [r3, #0]
 8024d5c:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 8024d60:	f000 811b 	beq.w	8024f9a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x64e>
				sum += ker_a1 * ip_b1;
 8024d64:	f999 2001 	ldrsb.w	r2, [r9, #1]
			while (col_count) {
 8024d68:	2f02      	cmp	r7, #2
				sum += ker_a1 * ip_b1;
 8024d6a:	8858      	ldrh	r0, [r3, #2]
 8024d6c:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 8024d70:	f000 8118 	beq.w	8024fa4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x658>
				sum += ker_a1 * ip_b1;
 8024d74:	889a      	ldrh	r2, [r3, #4]
				q7_t ker_a1 = *ker_a++;
 8024d76:	f109 0903 	add.w	r9, r9, #3
				sum += ker_a1 * ip_b1;
 8024d7a:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 8024d7e:	fb12 1103 	smlabb	r1, r2, r3, r1
				col_count--;
			}

			sum = (float) sum * scales[i];
 8024d82:	ee07 1a90 	vmov	s15, r1
			sum += output_offset;
 8024d86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
			sum = (float) sum * scales[i];
 8024d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024d8c:	ecf6 7a01 	vldmia	r6!, {s15}
 8024d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024d98:	ee17 3a90 	vmov	r3, s15
			sum += output_offset;
 8024d9c:	4413      	add	r3, r2
			sum = MAX(sum, output_activation_min);
 8024d9e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024da0:	4293      	cmp	r3, r2
 8024da2:	bfb8      	it	lt
 8024da4:	4613      	movlt	r3, r2
			sum = MIN(sum, output_activation_max);
 8024da6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024da8:	4293      	cmp	r3, r2
 8024daa:	bfa8      	it	ge
 8024dac:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8024dae:	f80e 3b01 	strb.w	r3, [lr], #1
		for (i = 0; i < output_ch; i++) {
 8024db2:	45de      	cmp	lr, fp
 8024db4:	d1b0      	bne.n	8024d18 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3cc>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8024db6:	2000      	movs	r0, #0
 8024db8:	b01b      	add	sp, #108	; 0x6c
 8024dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (base_idx_x != -1) {	//load all for now and unroll all
 8024dbe:	1c51      	adds	r1, r2, #1
				*dst++ = pad_out;
 8024dc0:	f8a3 8000 	strh.w	r8, [r3]
				*dst_31++ = pad_out_q15x2;
 8024dc4:	f8c3 6002 	str.w	r6, [r3, #2]
				*dst_31++ = pad_out_q15x2;
 8024dc8:	f8c3 6006 	str.w	r6, [r3, #6]
				*dst_31++ = pad_out_q15x2;
 8024dcc:	f8c3 600a 	str.w	r6, [r3, #10]
				*dst_31++ = pad_out_q15x2;
 8024dd0:	f8c3 600e 	str.w	r6, [r3, #14]
				if (base_idx_x != -1) {	//load all for now and unroll all
 8024dd4:	f000 80b6 	beq.w	8024f44 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5f8>
					src2 = input + (base_idx_x) * input_ch;
 8024dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024ddc:	fb01 0202 	mla	r2, r1, r2, r0
					src3 = src2 + input_row_offset;
 8024de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8024de2:	6810      	ldr	r0, [r2, #0]
 8024de4:	1851      	adds	r1, r2, r1
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024de6:	fa2f fc80 	sxtb16	ip, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8024dea:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024dee:	fa2f f080 	sxtb16	r0, r0
					q7_q15_offset_ele(src2, dst2)
 8024df2:	eac0 4e2c 	pkhtb	lr, r0, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024df6:	fa9e fe04 	sadd16	lr, lr, r4
 8024dfa:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 8024dfe:	fa90 f004 	sadd16	r0, r0, r4
 8024e02:	f8c3 e016 	str.w	lr, [r3, #22]
 8024e06:	f8c3 0012 	str.w	r0, [r3, #18]
 8024e0a:	6850      	ldr	r0, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024e0c:	fa2f fc80 	sxtb16	ip, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8024e10:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024e14:	fa2f f080 	sxtb16	r0, r0
					q7_q15_offset_ele(src2, dst2)
 8024e18:	eac0 4e2c 	pkhtb	lr, r0, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024e1c:	fa9e fe04 	sadd16	lr, lr, r4
 8024e20:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 8024e24:	fa90 f004 	sadd16	r0, r0, r4
 8024e28:	f8c3 001a 	str.w	r0, [r3, #26]
 8024e2c:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8024e30:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8024e34:	e707      	b.n	8024c46 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2fa>
 8024e36:	9f11      	ldr	r7, [sp, #68]	; 0x44
					*dst++ = pad_out;
 8024e38:	f8a3 8000 	strh.w	r8, [r3]
					*dst++ = pad_out;
 8024e3c:	f8a3 8002 	strh.w	r8, [r3, #2]
					*dst++ = pad_out;
 8024e40:	f8a3 8004 	strh.w	r8, [r3, #4]
					*dst2++ = pad_out;
 8024e44:	f8a3 8012 	strh.w	r8, [r3, #18]
					*dst2++ = pad_out;
 8024e48:	f8a3 8014 	strh.w	r8, [r3, #20]
					*dst2++ = pad_out;
 8024e4c:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 8024e50:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 8024e54:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 8024e58:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
 8024e5c:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024e5e:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024e62:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024e66:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 8024e6a:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024e6e:	fa90 f004 	sadd16	r0, r0, r4
 8024e72:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8024e76:	fa92 f204 	sadd16	r2, r2, r4
 8024e7a:	f8c3 000a 	str.w	r0, [r3, #10]
 8024e7e:	f8c3 2006 	str.w	r2, [r3, #6]
					*dst++ = *src++ + input_offset;
 8024e82:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8024e86:	4452      	add	r2, sl
 8024e88:	81da      	strh	r2, [r3, #14]
					*dst++ = *src++ + input_offset;
 8024e8a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8024e8e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8024e90:	4452      	add	r2, sl
 8024e92:	821a      	strh	r2, [r3, #16]
 8024e94:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024e96:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024e9a:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024e9e:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8024ea2:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024ea6:	fa90 f004 	sadd16	r0, r0, r4
 8024eaa:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8024eae:	fa92 f204 	sadd16	r2, r2, r4
 8024eb2:	619a      	str	r2, [r3, #24]
 8024eb4:	61d8      	str	r0, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8024eb6:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8024eba:	4452      	add	r2, sl
 8024ebc:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8024ebe:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8024ec2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8024ec4:	4452      	add	r2, sl
 8024ec6:	845a      	strh	r2, [r3, #34]	; 0x22
 8024ec8:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024eca:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024ece:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024ed2:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8024ed6:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024eda:	fa90 f004 	sadd16	r0, r0, r4
 8024ede:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8024ee2:	fa92 f204 	sadd16	r2, r2, r4
 8024ee6:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
			two_column_buf += 27;
 8024eea:	3336      	adds	r3, #54	; 0x36
 8024eec:	f843 0c08 	str.w	r0, [r3, #-8]
					*dst3++ = *src3++ + input_offset;
 8024ef0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8024ef4:	4452      	add	r2, sl
 8024ef6:	f823 2c04 	strh.w	r2, [r3, #-4]
					*dst3++ = *src3++ + input_offset;
 8024efa:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8024efe:	4452      	add	r2, sl
 8024f00:	f823 2c02 	strh.w	r2, [r3, #-2]
			if (two_column_buf == runtime_buf + 2 * 27) {
 8024f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f06:	4293      	cmp	r3, r2
 8024f08:	f47f aecd 	bne.w	8024ca6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x35a>
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8024f0c:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8024f0e:	3501      	adds	r5, #1
 8024f10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f12:	9702      	str	r7, [sp, #8]
 8024f14:	b22d      	sxth	r5, r5
 8024f16:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8024f18:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024f1a:	9925      	ldr	r1, [sp, #148]	; 0x94
 8024f1c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024f1e:	9701      	str	r7, [sp, #4]
 8024f20:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8024f22:	9306      	str	r3, [sp, #24]
 8024f24:	9205      	str	r2, [sp, #20]
 8024f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f28:	9104      	str	r1, [sp, #16]
 8024f2a:	9003      	str	r0, [sp, #12]
 8024f2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024f2e:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8024f30:	9824      	ldr	r0, [sp, #144]	; 0x90
 8024f32:	9700      	str	r7, [sp, #0]
 8024f34:	f001 fbb0 	bl	8026698 <mat_mult_kernel3_input3_s8_s16_fpreq>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8024f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8024f3a:	902b      	str	r0, [sp, #172]	; 0xac
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8024f3c:	429d      	cmp	r5, r3
 8024f3e:	da29      	bge.n	8024f94 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x648>
 8024f40:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024f42:	e616      	b.n	8024b72 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x226>
 8024f44:	9f0c      	ldr	r7, [sp, #48]	; 0x30
					*dst2++ = pad_out;
 8024f46:	f8a3 8012 	strh.w	r8, [r3, #18]
					*dst2++ = pad_out;
 8024f4a:	f8a3 8014 	strh.w	r8, [r3, #20]
					*dst2++ = pad_out;
 8024f4e:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 8024f52:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 8024f56:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 8024f5a:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
 8024f5e:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024f60:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8024f64:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8024f68:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8024f6c:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8024f70:	fa90 f004 	sadd16	r0, r0, r4
 8024f74:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8024f78:	fa92 f204 	sadd16	r2, r2, r4
 8024f7c:	619a      	str	r2, [r3, #24]
 8024f7e:	61d8      	str	r0, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8024f80:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8024f84:	4452      	add	r2, sl
 8024f86:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8024f88:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8024f8c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8024f8e:	4452      	add	r2, sl
 8024f90:	845a      	strh	r2, [r3, #34]	; 0x22
 8024f92:	e799      	b.n	8024ec8 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x57c>
 8024f94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8024f96:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024f98:	e68c      	b.n	8024cb4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x368>
				q7_t ker_a1 = *ker_a++;
 8024f9a:	f109 0901 	add.w	r9, r9, #1
 8024f9e:	e6f0      	b.n	8024d82 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
			while (col_count) {
 8024fa0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024fa2:	e6d6      	b.n	8024d52 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x406>
				q7_t ker_a1 = *ker_a++;
 8024fa4:	f109 0902 	add.w	r9, r9, #2
 8024fa8:	e6eb      	b.n	8024d82 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
 8024faa:	bf00      	nop

08024fac <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch48_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8024fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fb0:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8024fb2:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 8024fb4:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 8024fb8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 8024fba:	9505      	str	r5, [sp, #20]
 8024fbc:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8024fc0:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8024fc2:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 8024fc6:	920a      	str	r2, [sp, #40]	; 0x28
 8024fc8:	9506      	str	r5, [sp, #24]
 8024fca:	9707      	str	r7, [sp, #28]
 8024fcc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 8024fce:	f000 8254 	beq.w	802547a <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x4ce>
 8024fd2:	3308      	adds	r3, #8
 8024fd4:	3402      	adds	r4, #2
 8024fd6:	3e01      	subs	r6, #1
 8024fd8:	f105 0210 	add.w	r2, r5, #16
 8024fdc:	9302      	str	r3, [sp, #8]
 8024fde:	f105 0308 	add.w	r3, r5, #8
 8024fe2:	9403      	str	r4, [sp, #12]
 8024fe4:	b2b4      	uxth	r4, r6
 8024fe6:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8024fe8:	eb01 0e47 	add.w	lr, r1, r7, lsl #1
 8024fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024fee:	940b      	str	r4, [sp, #44]	; 0x2c
 8024ff0:	3302      	adds	r3, #2
 8024ff2:	9304      	str	r3, [sp, #16]
 8024ff4:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8024ff8:	9308      	str	r3, [sp, #32]
 8024ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8025000:	6805      	ldr	r5, [r0, #0]
 8025002:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025004:	fa2f f885 	sxtb16	r8, r5
 8025008:	18c6      	adds	r6, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 802500a:	ea4f 2535 	mov.w	r5, r5, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 802500e:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025010:	fa2f fb85 	sxtb16	fp, r5
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8025014:	9d01      	ldr	r5, [sp, #4]
		const float scale_0 = scales[0];
 8025016:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 802501a:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 802501e:	680f      	ldr	r7, [r1, #0]
 8025020:	f8de c000 	ldr.w	ip, [lr]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8025024:	f855 9c08 	ldr.w	r9, [r5, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025028:	fb28 9307 	smlad	r3, r8, r7, r9
    memcpy(&val, *in_q7, 4);
 802502c:	6834      	ldr	r4, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802502e:	fa2f f284 	sxtb16	r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8025032:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025036:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802503a:	fb28 980c 	smlad	r8, r8, ip, r9
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 802503e:	f855 9c04 	ldr.w	r9, [r5, #-4]
 8025042:	fb22 9707 	smlad	r7, r2, r7, r9
    memcpy(&val, *in_q15, 4);
 8025046:	f8d1 a004 	ldr.w	sl, [r1, #4]
 802504a:	fb22 920c 	smlad	r2, r2, ip, r9
 802504e:	f8de c004 	ldr.w	ip, [lr, #4]
 8025052:	fb2b 330a 	smlad	r3, fp, sl, r3
 8025056:	fb2b 850c 	smlad	r5, fp, ip, r8
 802505a:	fb24 770a 	smlad	r7, r4, sl, r7
 802505e:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8025062:	fb24 240c 	smlad	r4, r4, ip, r2
    memcpy(&val, *in_q7, 4);
 8025066:	f8d0 9004 	ldr.w	r9, [r0, #4]
    memcpy(&val, *in_q15, 4);
 802506a:	f8de 8008 	ldr.w	r8, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 802506e:	ea4f 2c39 	mov.w	ip, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025072:	fa2f f989 	sxtb16	r9, r9
 8025076:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802507a:	fb29 330a 	smlad	r3, r9, sl, r3
    memcpy(&val, *in_q7, 4);
 802507e:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025080:	fa2f fb82 	sxtb16	fp, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8025084:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025088:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802508c:	fb29 5508 	smlad	r5, r9, r8, r5
 8025090:	fb2b 770a 	smlad	r7, fp, sl, r7
    memcpy(&val, *in_q15, 4);
 8025094:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8025098:	fb2b 4b08 	smlad	fp, fp, r8, r4
 802509c:	f8de 400c 	ldr.w	r4, [lr, #12]
 80250a0:	fb2c 330a 	smlad	r3, ip, sl, r3
 80250a4:	fb2c 5904 	smlad	r9, ip, r4, r5
 80250a8:	fb22 770a 	smlad	r7, r2, sl, r7
 80250ac:	f8d1 a010 	ldr.w	sl, [r1, #16]
 80250b0:	fb22 b204 	smlad	r2, r2, r4, fp
    memcpy(&val, *in_q7, 4);
 80250b4:	6884      	ldr	r4, [r0, #8]
    memcpy(&val, *in_q15, 4);
 80250b6:	f8de c010 	ldr.w	ip, [lr, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 80250ba:	ea4f 2b34 	mov.w	fp, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80250be:	fa2f f484 	sxtb16	r4, r4
 80250c2:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80250c6:	fb24 330a 	smlad	r3, r4, sl, r3
    memcpy(&val, *in_q7, 4);
 80250ca:	68b5      	ldr	r5, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80250cc:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80250d0:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80250d4:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80250d8:	fb24 940c 	smlad	r4, r4, ip, r9
 80250dc:	fb28 770a 	smlad	r7, r8, sl, r7
    memcpy(&val, *in_q15, 4);
 80250e0:	f8d1 a014 	ldr.w	sl, [r1, #20]
 80250e4:	fb28 220c 	smlad	r2, r8, ip, r2
 80250e8:	f8de 9014 	ldr.w	r9, [lr, #20]
 80250ec:	fb2b 330a 	smlad	r3, fp, sl, r3
 80250f0:	fb2b 4c09 	smlad	ip, fp, r9, r4
 80250f4:	fb25 7a0a 	smlad	sl, r5, sl, r7
 80250f8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80250fc:	fb25 2509 	smlad	r5, r5, r9, r2
    memcpy(&val, *in_q7, 4);
 8025100:	68c4      	ldr	r4, [r0, #12]
    memcpy(&val, *in_q15, 4);
 8025102:	f8de b018 	ldr.w	fp, [lr, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025106:	ea4f 2934 	mov.w	r9, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802510a:	fa2f f484 	sxtb16	r4, r4
 802510e:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025112:	fb24 3208 	smlad	r2, r4, r8, r3
    memcpy(&val, *in_q7, 4);
 8025116:	68f7      	ldr	r7, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025118:	fa2f f387 	sxtb16	r3, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 802511c:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025120:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025124:	fb24 c40b 	smlad	r4, r4, fp, ip
 8025128:	fb23 a808 	smlad	r8, r3, r8, sl
    memcpy(&val, *in_q15, 4);
 802512c:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8025130:	fb23 550b 	smlad	r5, r3, fp, r5
 8025134:	f8de b01c 	ldr.w	fp, [lr, #28]
 8025138:	fb29 220a 	smlad	r2, r9, sl, r2
 802513c:	fb29 440b 	smlad	r4, r9, fp, r4
 8025140:	fb27 8a0a 	smlad	sl, r7, sl, r8
 8025144:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8025148:	fb27 5b0b 	smlad	fp, r7, fp, r5
    memcpy(&val, *in_q7, 4);
 802514c:	6903      	ldr	r3, [r0, #16]
    memcpy(&val, *in_q15, 4);
 802514e:	f8de 8020 	ldr.w	r8, [lr, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025152:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025156:	fa2f f383 	sxtb16	r3, r3
 802515a:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802515e:	fb23 220c 	smlad	r2, r3, ip, r2
    memcpy(&val, *in_q7, 4);
 8025162:	6937      	ldr	r7, [r6, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025164:	fa2f f587 	sxtb16	r5, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8025168:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802516c:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025170:	fb23 4408 	smlad	r4, r3, r8, r4
 8025174:	fb25 ac0c 	smlad	ip, r5, ip, sl
    memcpy(&val, *in_q15, 4);
 8025178:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
 802517c:	fb25 bb08 	smlad	fp, r5, r8, fp
 8025180:	f8de 8024 	ldr.w	r8, [lr, #36]	; 0x24
 8025184:	fb29 220a 	smlad	r2, r9, sl, r2
 8025188:	fb29 4908 	smlad	r9, r9, r8, r4
 802518c:	fb27 ca0a 	smlad	sl, r7, sl, ip
 8025190:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8025192:	fb27 bb08 	smlad	fp, r7, r8, fp
    memcpy(&val, *in_q7, 4);
 8025196:	6944      	ldr	r4, [r0, #20]
    memcpy(&val, *in_q15, 4);
 8025198:	f8de 7028 	ldr.w	r7, [lr, #40]	; 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 802519c:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80251a0:	fa2f f484 	sxtb16	r4, r4
 80251a4:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80251a8:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 80251ac:	6975      	ldr	r5, [r6, #20]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80251ae:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80251b2:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80251b6:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80251ba:	fb24 9407 	smlad	r4, r4, r7, r9
 80251be:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 80251c2:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 80251c6:	fb28 bb07 	smlad	fp, r8, r7, fp
 80251ca:	f8de 702c 	ldr.w	r7, [lr, #44]	; 0x2c
 80251ce:	fb2c 220a 	smlad	r2, ip, sl, r2
 80251d2:	fb2c 4407 	smlad	r4, ip, r7, r4
 80251d6:	fb25 3a0a 	smlad	sl, r5, sl, r3
 80251da:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
 80251de:	fb25 b707 	smlad	r7, r5, r7, fp
    memcpy(&val, *in_q7, 4);
 80251e2:	6983      	ldr	r3, [r0, #24]
    memcpy(&val, *in_q15, 4);
 80251e4:	f8de 8030 	ldr.w	r8, [lr, #48]	; 0x30
  return (op1 >> op2) | (op1 << (32U - op2));
 80251e8:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80251ec:	fa2f f383 	sxtb16	r3, r3
 80251f0:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80251f4:	fb23 2209 	smlad	r2, r3, r9, r2
    memcpy(&val, *in_q7, 4);
 80251f8:	69b5      	ldr	r5, [r6, #24]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80251fa:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80251fe:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025202:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025206:	fb23 4408 	smlad	r4, r3, r8, r4
 802520a:	fb2b a909 	smlad	r9, fp, r9, sl
    memcpy(&val, *in_q15, 4);
 802520e:	f8d1 a034 	ldr.w	sl, [r1, #52]	; 0x34
 8025212:	fb2b 7708 	smlad	r7, fp, r8, r7
 8025216:	f8de 8034 	ldr.w	r8, [lr, #52]	; 0x34
 802521a:	fb2c 220a 	smlad	r2, ip, sl, r2
 802521e:	fb2c 4c08 	smlad	ip, ip, r8, r4
 8025222:	fb25 9a0a 	smlad	sl, r5, sl, r9
 8025226:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8025228:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 802522c:	69c4      	ldr	r4, [r0, #28]
    memcpy(&val, *in_q15, 4);
 802522e:	f8de b038 	ldr.w	fp, [lr, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 8025232:	ea4f 2934 	mov.w	r9, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025236:	fa2f f484 	sxtb16	r4, r4
 802523a:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802523e:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 8025242:	69f5      	ldr	r5, [r6, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025244:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8025248:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802524c:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025250:	fb24 c40b 	smlad	r4, r4, fp, ip
 8025254:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 8025258:	f8d1 a03c 	ldr.w	sl, [r1, #60]	; 0x3c
 802525c:	fb28 770b 	smlad	r7, r8, fp, r7
 8025260:	f8de b03c 	ldr.w	fp, [lr, #60]	; 0x3c
 8025264:	fb29 220a 	smlad	r2, r9, sl, r2
 8025268:	fb29 440b 	smlad	r4, r9, fp, r4
 802526c:	fb25 3a0a 	smlad	sl, r5, sl, r3
 8025270:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
 8025274:	fb25 770b 	smlad	r7, r5, fp, r7
    memcpy(&val, *in_q7, 4);
 8025278:	6a03      	ldr	r3, [r0, #32]
    memcpy(&val, *in_q15, 4);
 802527a:	f8de 8040 	ldr.w	r8, [lr, #64]	; 0x40
  return (op1 >> op2) | (op1 << (32U - op2));
 802527e:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025282:	fa2f f383 	sxtb16	r3, r3
 8025286:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802528a:	fb23 220c 	smlad	r2, r3, ip, r2
    memcpy(&val, *in_q7, 4);
 802528e:	6a35      	ldr	r5, [r6, #32]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025290:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8025294:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025298:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802529c:	fb23 4408 	smlad	r4, r3, r8, r4
 80252a0:	fb2b ac0c 	smlad	ip, fp, ip, sl
    memcpy(&val, *in_q15, 4);
 80252a4:	f8d1 a044 	ldr.w	sl, [r1, #68]	; 0x44
 80252a8:	fb2b 7708 	smlad	r7, fp, r8, r7
 80252ac:	f8de 8044 	ldr.w	r8, [lr, #68]	; 0x44
 80252b0:	fb29 220a 	smlad	r2, r9, sl, r2
 80252b4:	fb29 4908 	smlad	r9, r9, r8, r4
 80252b8:	fb25 ca0a 	smlad	sl, r5, sl, ip
 80252bc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80252be:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 80252c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    memcpy(&val, *in_q15, 4);
 80252c4:	f8de b048 	ldr.w	fp, [lr, #72]	; 0x48
  return (op1 >> op2) | (op1 << (32U - op2));
 80252c8:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80252cc:	fa2f f484 	sxtb16	r4, r4
 80252d0:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80252d4:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 80252d8:	6a75      	ldr	r5, [r6, #36]	; 0x24
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80252da:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80252de:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80252e2:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80252e6:	fb24 940b 	smlad	r4, r4, fp, r9
 80252ea:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 80252ee:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 80252f2:	fb28 770b 	smlad	r7, r8, fp, r7
 80252f6:	f8de b04c 	ldr.w	fp, [lr, #76]	; 0x4c
 80252fa:	fb2c 220a 	smlad	r2, ip, sl, r2
 80252fe:	fb2c 440b 	smlad	r4, ip, fp, r4
 8025302:	fb25 3a0a 	smlad	sl, r5, sl, r3
 8025306:	f8d1 9050 	ldr.w	r9, [r1, #80]	; 0x50
 802530a:	fb25 770b 	smlad	r7, r5, fp, r7
    memcpy(&val, *in_q7, 4);
 802530e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    memcpy(&val, *in_q15, 4);
 8025310:	f8de 8050 	ldr.w	r8, [lr, #80]	; 0x50
  return (op1 >> op2) | (op1 << (32U - op2));
 8025314:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025318:	fa2f f383 	sxtb16	r3, r3
 802531c:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025320:	fb23 2209 	smlad	r2, r3, r9, r2
    memcpy(&val, *in_q7, 4);
 8025324:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025326:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 802532a:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802532e:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025332:	fb23 4408 	smlad	r4, r3, r8, r4
 8025336:	fb2b a909 	smlad	r9, fp, r9, sl
    memcpy(&val, *in_q15, 4);
 802533a:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
 802533e:	fb2b 7708 	smlad	r7, fp, r8, r7
 8025342:	f8de 8054 	ldr.w	r8, [lr, #84]	; 0x54
 8025346:	fb2c 220a 	smlad	r2, ip, sl, r2
 802534a:	fb2c 4408 	smlad	r4, ip, r8, r4
 802534e:	fb25 9a0a 	smlad	sl, r5, sl, r9
 8025352:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8025354:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 8025358:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    memcpy(&val, *in_q15, 4);
 802535c:	f8de 9058 	ldr.w	r9, [lr, #88]	; 0x58
  return (op1 >> op2) | (op1 << (32U - op2));
 8025360:	ea4f 2c38 	mov.w	ip, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025364:	fa2f f888 	sxtb16	r8, r8
 8025368:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802536c:	fb28 2203 	smlad	r2, r8, r3, r2
    memcpy(&val, *in_q7, 4);
 8025370:	6af6      	ldr	r6, [r6, #44]	; 0x2c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025372:	fa2f f586 	sxtb16	r5, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 8025376:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802537a:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802537e:	fb28 4409 	smlad	r4, r8, r9, r4
 8025382:	fb25 aa03 	smlad	sl, r5, r3, sl
    memcpy(&val, *in_q15, 4);
 8025386:	f8d1 b05c 	ldr.w	fp, [r1, #92]	; 0x5c
 802538a:	fb25 7709 	smlad	r7, r5, r9, r7
 802538e:	f8de 505c 	ldr.w	r5, [lr, #92]	; 0x5c
 8025392:	fb2c 220b 	smlad	r2, ip, fp, r2
 8025396:	fb2c 4405 	smlad	r4, ip, r5, r4
 802539a:	fb26 aa0b 	smlad	sl, r6, fp, sl
 802539e:	fb26 7705 	smlad	r7, r6, r5, r7
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80253a2:	ee07 2a10 	vmov	s14, r2
 80253a6:	9d01      	ldr	r5, [sp, #4]
		ch_0_out_0 += out_offset;
 80253a8:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80253aa:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80253ae:	ee07 4a10 	vmov	s14, r4
 80253b2:	3508      	adds	r5, #8
 80253b4:	9b02      	ldr	r3, [sp, #8]
 80253b6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80253ba:	ee07 aa10 	vmov	s14, sl
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80253be:	ee25 5a26 	vmul.f32	s10, s10, s13
 80253c2:	9501      	str	r5, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80253c4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80253c8:	ee07 7a10 	vmov	s14, r7
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80253cc:	ee66 6a26 	vmul.f32	s13, s12, s13
 80253d0:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80253d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 80253d6:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80253d8:	ee25 6aa7 	vmul.f32	s12, s11, s15
 80253dc:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 80253de:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80253e0:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80253e4:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 80253e8:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80253ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80253ee:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80253f2:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 80253f6:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80253f8:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80253fc:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025400:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8025404:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025408:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 802540a:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802540c:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8025410:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8025412:	9e05      	ldr	r6, [sp, #20]
 8025414:	42b5      	cmp	r5, r6
 8025416:	bfb8      	it	lt
 8025418:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 802541a:	42b4      	cmp	r4, r6
 802541c:	bfb8      	it	lt
 802541e:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8025420:	42b2      	cmp	r2, r6
 8025422:	bfb8      	it	lt
 8025424:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025426:	42bd      	cmp	r5, r7
 8025428:	bfa8      	it	ge
 802542a:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 802542c:	45b4      	cmp	ip, r6
 802542e:	bfb8      	it	lt
 8025430:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8025432:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8025434:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8025436:	bfa8      	it	ge
 8025438:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 802543a:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 802543c:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8025440:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8025442:	bfa8      	it	ge
 8025444:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8025446:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 8025448:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 802544a:	bfa8      	it	ge
 802544c:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 802544e:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8025452:	f806 2c01 	strb.w	r2, [r6, #-1]
 8025456:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8025458:	f805 3c01 	strb.w	r3, [r5, #-1]
 802545c:	1cab      	adds	r3, r5, #2
	while (row_count) {
 802545e:	9d01      	ldr	r5, [sp, #4]
 8025460:	9303      	str	r3, [sp, #12]
 8025462:	9b08      	ldr	r3, [sp, #32]
 8025464:	9204      	str	r2, [sp, #16]
 8025466:	42ab      	cmp	r3, r5
 8025468:	f47f adca 	bne.w	8025000 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x54>
 802546c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802546e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025470:	3401      	adds	r4, #1
 8025472:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8025476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025478:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 802547a:	4620      	mov	r0, r4
 802547c:	b00d      	add	sp, #52	; 0x34
 802547e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025482:	bf00      	nop

08025484 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8025484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025488:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 802548a:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 802548c:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 8025490:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 8025492:	9505      	str	r5, [sp, #20]
 8025494:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8025498:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 802549a:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 802549e:	920a      	str	r2, [sp, #40]	; 0x28
 80254a0:	9506      	str	r5, [sp, #24]
 80254a2:	9707      	str	r7, [sp, #28]
 80254a4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 80254a6:	f000 8127 	beq.w	80256f8 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x274>
 80254aa:	3308      	adds	r3, #8
 80254ac:	3402      	adds	r4, #2
 80254ae:	3e01      	subs	r6, #1
 80254b0:	f105 0210 	add.w	r2, r5, #16
 80254b4:	9302      	str	r3, [sp, #8]
 80254b6:	f105 0308 	add.w	r3, r5, #8
 80254ba:	9403      	str	r4, [sp, #12]
 80254bc:	b2b4      	uxth	r4, r6
 80254be:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80254c0:	eb01 0a47 	add.w	sl, r1, r7, lsl #1
 80254c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80254c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80254c8:	3302      	adds	r3, #2
 80254ca:	9304      	str	r3, [sp, #16]
 80254cc:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 80254d0:	9308      	str	r3, [sp, #32]
 80254d2:	f107 0310 	add.w	r3, r7, #16
 80254d6:	9309      	str	r3, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 80254d8:	6806      	ldr	r6, [r0, #0]
 80254da:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80254dc:	fa2f f886 	sxtb16	r8, r6
 80254e0:	18c7      	adds	r7, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80254e2:	ea4f 2636 	mov.w	r6, r6, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 80254e6:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80254e8:	fa2f fb86 	sxtb16	fp, r6
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80254ec:	9e01      	ldr	r6, [sp, #4]
		const float scale_0 = scales[0];
 80254ee:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 80254f2:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 80254f6:	f8d1 c000 	ldr.w	ip, [r1]
 80254fa:	f8da 2000 	ldr.w	r2, [sl]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80254fe:	f856 ec08 	ldr.w	lr, [r6, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025502:	fb28 e30c 	smlad	r3, r8, ip, lr
    memcpy(&val, *in_q7, 4);
 8025506:	683d      	ldr	r5, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025508:	fa2f f485 	sxtb16	r4, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 802550c:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025510:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025514:	fb28 e802 	smlad	r8, r8, r2, lr
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8025518:	f856 ec04 	ldr.w	lr, [r6, #-4]
 802551c:	fb24 ec0c 	smlad	ip, r4, ip, lr
    memcpy(&val, *in_q15, 4);
 8025520:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8025524:	fb24 e402 	smlad	r4, r4, r2, lr
 8025528:	f8da 2004 	ldr.w	r2, [sl, #4]
 802552c:	fb2b 3309 	smlad	r3, fp, r9, r3
 8025530:	fb2b 8602 	smlad	r6, fp, r2, r8
 8025534:	fb25 cc09 	smlad	ip, r5, r9, ip
 8025538:	f8d1 9008 	ldr.w	r9, [r1, #8]
 802553c:	fb25 4502 	smlad	r5, r5, r2, r4
    memcpy(&val, *in_q7, 4);
 8025540:	f8d0 e004 	ldr.w	lr, [r0, #4]
    memcpy(&val, *in_q15, 4);
 8025544:	f8da b008 	ldr.w	fp, [sl, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025548:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802554c:	fa2f fe8e 	sxtb16	lr, lr
 8025550:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025554:	fb2e 3309 	smlad	r3, lr, r9, r3
    memcpy(&val, *in_q7, 4);
 8025558:	687c      	ldr	r4, [r7, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802555a:	fa2f f884 	sxtb16	r8, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 802555e:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025562:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025566:	fb2e 660b 	smlad	r6, lr, fp, r6
 802556a:	fb28 cc09 	smlad	ip, r8, r9, ip
    memcpy(&val, *in_q15, 4);
 802556e:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8025572:	fb28 550b 	smlad	r5, r8, fp, r5
 8025576:	f8da 800c 	ldr.w	r8, [sl, #12]
 802557a:	fb22 3309 	smlad	r3, r2, r9, r3
 802557e:	fb22 6608 	smlad	r6, r2, r8, r6
 8025582:	fb24 c909 	smlad	r9, r4, r9, ip
 8025586:	f8d1 e010 	ldr.w	lr, [r1, #16]
 802558a:	fb24 5408 	smlad	r4, r4, r8, r5
    memcpy(&val, *in_q7, 4);
 802558e:	6882      	ldr	r2, [r0, #8]
    memcpy(&val, *in_q15, 4);
 8025590:	f8da b010 	ldr.w	fp, [sl, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025594:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025598:	fa2f f282 	sxtb16	r2, r2
 802559c:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80255a0:	fb22 330e 	smlad	r3, r2, lr, r3
    memcpy(&val, *in_q7, 4);
 80255a4:	68bd      	ldr	r5, [r7, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80255a6:	fa2f fc85 	sxtb16	ip, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80255aa:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80255ae:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80255b2:	fb22 660b 	smlad	r6, r2, fp, r6
 80255b6:	fb2c 9e0e 	smlad	lr, ip, lr, r9
    memcpy(&val, *in_q15, 4);
 80255ba:	f8d1 9014 	ldr.w	r9, [r1, #20]
 80255be:	fb2c 440b 	smlad	r4, ip, fp, r4
 80255c2:	f8da b014 	ldr.w	fp, [sl, #20]
 80255c6:	fb28 3309 	smlad	r3, r8, r9, r3
 80255ca:	fb28 660b 	smlad	r6, r8, fp, r6
 80255ce:	fb25 ee09 	smlad	lr, r5, r9, lr
 80255d2:	698a      	ldr	r2, [r1, #24]
 80255d4:	fb25 4b0b 	smlad	fp, r5, fp, r4
    memcpy(&val, *in_q7, 4);
 80255d8:	f8d0 900c 	ldr.w	r9, [r0, #12]
    memcpy(&val, *in_q15, 4);
 80255dc:	f8da c018 	ldr.w	ip, [sl, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 80255e0:	ea4f 2839 	mov.w	r8, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80255e4:	fa2f f989 	sxtb16	r9, r9
 80255e8:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80255ec:	fb29 3302 	smlad	r3, r9, r2, r3
    memcpy(&val, *in_q7, 4);
 80255f0:	68ff      	ldr	r7, [r7, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80255f2:	fa2f f487 	sxtb16	r4, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 80255f6:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80255fa:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80255fe:	fb29 660c 	smlad	r6, r9, ip, r6
 8025602:	fb24 ee02 	smlad	lr, r4, r2, lr
    memcpy(&val, *in_q15, 4);
 8025606:	69cd      	ldr	r5, [r1, #28]
 8025608:	fb24 bb0c 	smlad	fp, r4, ip, fp
 802560c:	f8da 401c 	ldr.w	r4, [sl, #28]
 8025610:	fb28 3305 	smlad	r3, r8, r5, r3
 8025614:	fb28 6604 	smlad	r6, r8, r4, r6
 8025618:	fb27 ee05 	smlad	lr, r7, r5, lr
 802561c:	fb27 bb04 	smlad	fp, r7, r4, fp
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025620:	ee07 3a10 	vmov	s14, r3
 8025624:	9c01      	ldr	r4, [sp, #4]
 8025626:	9b02      	ldr	r3, [sp, #8]
 8025628:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802562c:	ee07 6a10 	vmov	s14, r6
 8025630:	3408      	adds	r4, #8
		ch_0_out_0 += out_offset;
 8025632:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025634:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025638:	ee07 ea10 	vmov	s14, lr
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 802563c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8025640:	9401      	str	r4, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025642:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025646:	ee07 ba10 	vmov	s14, fp
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802564a:	ee66 6a26 	vmul.f32	s13, s12, s13
 802564e:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025650:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 8025654:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025656:	ee25 6aa7 	vmul.f32	s12, s11, s15
 802565a:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 802565c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802565e:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025662:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 8025666:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 802566c:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025670:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8025674:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025676:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802567a:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802567e:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8025682:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025686:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 8025688:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802568a:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 802568e:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8025690:	9e05      	ldr	r6, [sp, #20]
 8025692:	42b5      	cmp	r5, r6
 8025694:	bfb8      	it	lt
 8025696:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8025698:	42b4      	cmp	r4, r6
 802569a:	bfb8      	it	lt
 802569c:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 802569e:	42b2      	cmp	r2, r6
 80256a0:	bfb8      	it	lt
 80256a2:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80256a4:	42bd      	cmp	r5, r7
 80256a6:	bfa8      	it	ge
 80256a8:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 80256aa:	45b4      	cmp	ip, r6
 80256ac:	bfb8      	it	lt
 80256ae:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80256b0:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 80256b2:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80256b4:	bfa8      	it	ge
 80256b6:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80256b8:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 80256ba:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80256be:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80256c0:	bfa8      	it	ge
 80256c2:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80256c4:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80256c6:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80256c8:	bfa8      	it	ge
 80256ca:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80256cc:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 80256d0:	f806 2c01 	strb.w	r2, [r6, #-1]
 80256d4:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 80256d6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80256da:	1cab      	adds	r3, r5, #2
	while (row_count) {
 80256dc:	9c01      	ldr	r4, [sp, #4]
 80256de:	9303      	str	r3, [sp, #12]
 80256e0:	9b08      	ldr	r3, [sp, #32]
 80256e2:	9204      	str	r2, [sp, #16]
 80256e4:	42a3      	cmp	r3, r4
 80256e6:	f47f aef7 	bne.w	80254d8 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x54>
 80256ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80256ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256ee:	3401      	adds	r4, #1
 80256f0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80256f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80256f6:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 80256f8:	4620      	mov	r0, r4
 80256fa:	b00d      	add	sp, #52	; 0x34
 80256fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025700 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch24_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8025700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025704:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8025706:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 8025708:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 802570c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 802570e:	9505      	str	r5, [sp, #20]
 8025710:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8025714:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8025716:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 802571a:	920a      	str	r2, [sp, #40]	; 0x28
 802571c:	9506      	str	r5, [sp, #24]
 802571e:	9707      	str	r7, [sp, #28]
 8025720:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 8025722:	f000 8173 	beq.w	8025a0c <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x30c>
 8025726:	3308      	adds	r3, #8
 8025728:	3402      	adds	r4, #2
 802572a:	3e01      	subs	r6, #1
 802572c:	f105 0210 	add.w	r2, r5, #16
 8025730:	9302      	str	r3, [sp, #8]
 8025732:	f105 0308 	add.w	r3, r5, #8
 8025736:	9403      	str	r4, [sp, #12]
 8025738:	b2b4      	uxth	r4, r6
 802573a:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 802573c:	eb01 0e47 	add.w	lr, r1, r7, lsl #1
 8025740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025742:	940b      	str	r4, [sp, #44]	; 0x2c
 8025744:	3302      	adds	r3, #2
 8025746:	9304      	str	r3, [sp, #16]
 8025748:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 802574c:	9308      	str	r3, [sp, #32]
 802574e:	f107 0318 	add.w	r3, r7, #24
 8025752:	9309      	str	r3, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 8025754:	6805      	ldr	r5, [r0, #0]
 8025756:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025758:	fa2f f885 	sxtb16	r8, r5
 802575c:	18c6      	adds	r6, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 802575e:	ea4f 2535 	mov.w	r5, r5, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 8025762:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025764:	fa2f fb85 	sxtb16	fp, r5
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8025768:	9d01      	ldr	r5, [sp, #4]
		const float scale_0 = scales[0];
 802576a:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 802576e:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 8025772:	f8d1 c000 	ldr.w	ip, [r1]
 8025776:	f8de 7000 	ldr.w	r7, [lr]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 802577a:	f855 9c08 	ldr.w	r9, [r5, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802577e:	fb28 930c 	smlad	r3, r8, ip, r9
    memcpy(&val, *in_q7, 4);
 8025782:	6834      	ldr	r4, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025784:	fa2f f284 	sxtb16	r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8025788:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802578c:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025790:	fb28 9807 	smlad	r8, r8, r7, r9
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8025794:	f855 ac04 	ldr.w	sl, [r5, #-4]
 8025798:	fb22 ac0c 	smlad	ip, r2, ip, sl
    memcpy(&val, *in_q15, 4);
 802579c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80257a0:	fb22 a207 	smlad	r2, r2, r7, sl
 80257a4:	f8de 7004 	ldr.w	r7, [lr, #4]
 80257a8:	fb2b 3309 	smlad	r3, fp, r9, r3
 80257ac:	fb2b 8507 	smlad	r5, fp, r7, r8
 80257b0:	fb24 cc09 	smlad	ip, r4, r9, ip
 80257b4:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80257b8:	fb24 2407 	smlad	r4, r4, r7, r2
    memcpy(&val, *in_q7, 4);
 80257bc:	f8d0 a004 	ldr.w	sl, [r0, #4]
    memcpy(&val, *in_q15, 4);
 80257c0:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80257c4:	ea4f 273a 	mov.w	r7, sl, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80257c8:	fa2f fa8a 	sxtb16	sl, sl
 80257cc:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80257d0:	fb2a 3309 	smlad	r3, sl, r9, r3
    memcpy(&val, *in_q7, 4);
 80257d4:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80257d6:	fa2f f882 	sxtb16	r8, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80257da:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80257de:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80257e2:	fb2a 550b 	smlad	r5, sl, fp, r5
 80257e6:	fb28 cc09 	smlad	ip, r8, r9, ip
    memcpy(&val, *in_q15, 4);
 80257ea:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80257ee:	fb28 440b 	smlad	r4, r8, fp, r4
 80257f2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80257f6:	fb27 3309 	smlad	r3, r7, r9, r3
 80257fa:	fb27 5a08 	smlad	sl, r7, r8, r5
 80257fe:	fb22 cc09 	smlad	ip, r2, r9, ip
 8025802:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8025806:	fb22 4208 	smlad	r2, r2, r8, r4
    memcpy(&val, *in_q7, 4);
 802580a:	6885      	ldr	r5, [r0, #8]
    memcpy(&val, *in_q15, 4);
 802580c:	f8de 7010 	ldr.w	r7, [lr, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025810:	ea4f 2435 	mov.w	r4, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025814:	fa2f f585 	sxtb16	r5, r5
 8025818:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802581c:	fb25 3309 	smlad	r3, r5, r9, r3
    memcpy(&val, *in_q7, 4);
 8025820:	f8d6 8008 	ldr.w	r8, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025824:	fa2f fb88 	sxtb16	fp, r8
  return (op1 >> op2) | (op1 << (32U - op2));
 8025828:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802582c:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025830:	fb25 a507 	smlad	r5, r5, r7, sl
 8025834:	fb2b cc09 	smlad	ip, fp, r9, ip
    memcpy(&val, *in_q15, 4);
 8025838:	f8d1 9014 	ldr.w	r9, [r1, #20]
 802583c:	fb2b 2207 	smlad	r2, fp, r7, r2
 8025840:	f8de a014 	ldr.w	sl, [lr, #20]
 8025844:	fb24 3309 	smlad	r3, r4, r9, r3
 8025848:	fb24 570a 	smlad	r7, r4, sl, r5
 802584c:	fb28 c909 	smlad	r9, r8, r9, ip
 8025850:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8025854:	fb28 220a 	smlad	r2, r8, sl, r2
    memcpy(&val, *in_q7, 4);
 8025858:	68c4      	ldr	r4, [r0, #12]
    memcpy(&val, *in_q15, 4);
 802585a:	f8de a018 	ldr.w	sl, [lr, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 802585e:	ea4f 2834 	mov.w	r8, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025862:	fa2f f484 	sxtb16	r4, r4
 8025866:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802586a:	fb24 330c 	smlad	r3, r4, ip, r3
    memcpy(&val, *in_q7, 4);
 802586e:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025870:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8025874:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025878:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802587c:	fb24 740a 	smlad	r4, r4, sl, r7
 8025880:	fb2b 9c0c 	smlad	ip, fp, ip, r9
    memcpy(&val, *in_q15, 4);
 8025884:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8025888:	fb2b 220a 	smlad	r2, fp, sl, r2
 802588c:	f8de a01c 	ldr.w	sl, [lr, #28]
 8025890:	fb28 3309 	smlad	r3, r8, r9, r3
 8025894:	fb28 440a 	smlad	r4, r8, sl, r4
 8025898:	fb25 c909 	smlad	r9, r5, r9, ip
 802589c:	6a0f      	ldr	r7, [r1, #32]
 802589e:	fb25 2a0a 	smlad	sl, r5, sl, r2
    memcpy(&val, *in_q7, 4);
 80258a2:	6902      	ldr	r2, [r0, #16]
    memcpy(&val, *in_q15, 4);
 80258a4:	f8de b020 	ldr.w	fp, [lr, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 80258a8:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80258ac:	fa2f f282 	sxtb16	r2, r2
 80258b0:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80258b4:	fb22 3307 	smlad	r3, r2, r7, r3
    memcpy(&val, *in_q7, 4);
 80258b8:	6935      	ldr	r5, [r6, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80258ba:	fa2f fc85 	sxtb16	ip, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80258be:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80258c2:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80258c6:	fb22 440b 	smlad	r4, r2, fp, r4
 80258ca:	fb2c 9707 	smlad	r7, ip, r7, r9
    memcpy(&val, *in_q15, 4);
 80258ce:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80258d2:	fb2c aa0b 	smlad	sl, ip, fp, sl
 80258d6:	f8de b024 	ldr.w	fp, [lr, #36]	; 0x24
 80258da:	fb28 3309 	smlad	r3, r8, r9, r3
 80258de:	fb28 440b 	smlad	r4, r8, fp, r4
 80258e2:	fb25 7709 	smlad	r7, r5, r9, r7
 80258e6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80258e8:	fb25 aa0b 	smlad	sl, r5, fp, sl
    memcpy(&val, *in_q7, 4);
 80258ec:	f8d0 9014 	ldr.w	r9, [r0, #20]
    memcpy(&val, *in_q15, 4);
 80258f0:	f8de c028 	ldr.w	ip, [lr, #40]	; 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 80258f4:	ea4f 2839 	mov.w	r8, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80258f8:	fa2f f989 	sxtb16	r9, r9
 80258fc:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025900:	fb29 3302 	smlad	r3, r9, r2, r3
    memcpy(&val, *in_q7, 4);
 8025904:	6976      	ldr	r6, [r6, #20]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025906:	fa2f fb86 	sxtb16	fp, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 802590a:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802590e:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025912:	fb29 440c 	smlad	r4, r9, ip, r4
 8025916:	fb2b 7702 	smlad	r7, fp, r2, r7
    memcpy(&val, *in_q15, 4);
 802591a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 802591c:	fb2b aa0c 	smlad	sl, fp, ip, sl
 8025920:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
 8025924:	fb28 3305 	smlad	r3, r8, r5, r3
 8025928:	fb28 440b 	smlad	r4, r8, fp, r4
 802592c:	fb26 7705 	smlad	r7, r6, r5, r7
 8025930:	fb26 aa0b 	smlad	sl, r6, fp, sl
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025934:	ee07 3a10 	vmov	s14, r3
 8025938:	9d01      	ldr	r5, [sp, #4]
		ch_0_out_0 += out_offset;
 802593a:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 802593c:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025940:	ee07 4a10 	vmov	s14, r4
 8025944:	3508      	adds	r5, #8
 8025946:	9b02      	ldr	r3, [sp, #8]
 8025948:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802594c:	ee07 7a10 	vmov	s14, r7
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025950:	ee25 5a26 	vmul.f32	s10, s10, s13
 8025954:	9501      	str	r5, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025956:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802595a:	ee07 aa10 	vmov	s14, sl
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802595e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8025962:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025964:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 8025968:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802596a:	ee25 6aa7 	vmul.f32	s12, s11, s15
 802596e:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 8025970:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025972:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025976:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 802597a:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802597c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025980:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025984:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8025988:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802598a:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802598e:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025992:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8025996:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 802599a:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 802599c:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802599e:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 80259a2:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80259a4:	9e05      	ldr	r6, [sp, #20]
 80259a6:	42b5      	cmp	r5, r6
 80259a8:	bfb8      	it	lt
 80259aa:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80259ac:	42b4      	cmp	r4, r6
 80259ae:	bfb8      	it	lt
 80259b0:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80259b2:	42b2      	cmp	r2, r6
 80259b4:	bfb8      	it	lt
 80259b6:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80259b8:	42bd      	cmp	r5, r7
 80259ba:	bfa8      	it	ge
 80259bc:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 80259be:	45b4      	cmp	ip, r6
 80259c0:	bfb8      	it	lt
 80259c2:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80259c4:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 80259c6:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80259c8:	bfa8      	it	ge
 80259ca:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80259cc:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 80259ce:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80259d2:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80259d4:	bfa8      	it	ge
 80259d6:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80259d8:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80259da:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80259dc:	bfa8      	it	ge
 80259de:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 80259e0:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 80259e4:	f806 2c01 	strb.w	r2, [r6, #-1]
 80259e8:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 80259ea:	f805 3c01 	strb.w	r3, [r5, #-1]
 80259ee:	1cab      	adds	r3, r5, #2
	while (row_count) {
 80259f0:	9d01      	ldr	r5, [sp, #4]
 80259f2:	9303      	str	r3, [sp, #12]
 80259f4:	9b08      	ldr	r3, [sp, #32]
 80259f6:	9204      	str	r2, [sp, #16]
 80259f8:	42ab      	cmp	r3, r5
 80259fa:	f47f aeab 	bne.w	8025754 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x54>
 80259fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a02:	3401      	adds	r4, #1
 8025a04:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8025a08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025a0a:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8025a0c:	4620      	mov	r0, r4
 8025a0e:	b00d      	add	sp, #52	; 0x34
 8025a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025a14 <mat_mult_kernel_s8_s16_reordered_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8025a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a18:	b093      	sub	sp, #76	; 0x4c
 8025a1a:	4683      	mov	fp, r0
 8025a1c:	460e      	mov	r6, r1
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8025a1e:	9821      	ldr	r0, [sp, #132]	; 0x84
		const int32_t *const output_bias, q7_t *out_0) {
 8025a20:	910b      	str	r1, [sp, #44]	; 0x2c
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8025a22:	0851      	lsrs	r1, r2, #1
	q7_t *out_1 = out_0 + output_ch;
 8025a24:	eb00 0402 	add.w	r4, r0, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8025a28:	f9bd 0074 	ldrsh.w	r0, [sp, #116]	; 0x74
 8025a2c:	9210      	str	r2, [sp, #64]	; 0x40
 8025a2e:	9007      	str	r0, [sp, #28]
 8025a30:	f9bd 0078 	ldrsh.w	r0, [sp, #120]	; 0x78
 8025a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8025a36:	9008      	str	r0, [sp, #32]
 8025a38:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
	q7_t *out_1 = out_0 + output_ch;
 8025a3c:	940e      	str	r4, [sp, #56]	; 0x38
		const int32_t *const output_bias, q7_t *out_0) {
 8025a3e:	9006      	str	r0, [sp, #24]
	while (row_count) {
 8025a40:	f000 80d8 	beq.w	8025bf4 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1e0>
		q31_t ch_0_out_0 = *bias;
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		uint16_t col_count = num_col_a / 4;
 8025a44:	0885      	lsrs	r5, r0, #2
 8025a46:	3901      	subs	r1, #1
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8025a48:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8025a4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025a4e:	461f      	mov	r7, r3
 8025a50:	b289      	uxth	r1, r1
 8025a52:	900c      	str	r0, [sp, #48]	; 0x30
 8025a54:	3210      	adds	r2, #16
 8025a56:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025a58:	1e6b      	subs	r3, r5, #1
 8025a5a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		uint16_t col_count = num_col_a / 4;
 8025a5e:	950a      	str	r5, [sp, #40]	; 0x28
 8025a60:	3008      	adds	r0, #8
 8025a62:	b29b      	uxth	r3, r3
 8025a64:	9209      	str	r2, [sp, #36]	; 0x24
 8025a66:	463a      	mov	r2, r7
 8025a68:	9003      	str	r0, [sp, #12]
 8025a6a:	3301      	adds	r3, #1
 8025a6c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8025a6e:	3208      	adds	r2, #8
 8025a70:	009b      	lsls	r3, r3, #2
 8025a72:	9111      	str	r1, [sp, #68]	; 0x44
 8025a74:	3002      	adds	r0, #2
 8025a76:	9202      	str	r2, [sp, #8]
 8025a78:	930d      	str	r3, [sp, #52]	; 0x34
 8025a7a:	9005      	str	r0, [sp, #20]
 8025a7c:	1ca0      	adds	r0, r4, #2
 8025a7e:	9004      	str	r0, [sp, #16]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8025a80:	9b06      	ldr	r3, [sp, #24]
 8025a82:	eb0b 0903 	add.w	r9, fp, r3
		const float scale_0 = scales[0];
 8025a86:	9b02      	ldr	r3, [sp, #8]
 8025a88:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8025a8c:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 8025a90:	9b03      	ldr	r3, [sp, #12]
 8025a92:	f853 cc08 	ldr.w	ip, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 8025a96:	f853 0c04 	ldr.w	r0, [r3, #-4]
		/* accumulate over the vector */
		while (col_count) {
 8025a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a9c:	2b00      	cmp	r3, #0
 8025a9e:	f000 8107 	beq.w	8025cb0 <mat_mult_kernel_s8_s16_reordered_fpreq+0x29c>
 8025aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		q31_t ch_1_out_1 = *bias++;
 8025aa4:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8025aa6:	4665      	mov	r5, ip
 8025aa8:	46ca      	mov	sl, r9
 8025aaa:	445b      	add	r3, fp
		const q15_t *ip_b0 = input_b;
 8025aac:	e9dd e80b 	ldrd	lr, r8, [sp, #44]	; 0x2c
 8025ab0:	9301      	str	r3, [sp, #4]
    memcpy(&val, *in_q7, 4);
 8025ab2:	f85b 2b04 	ldr.w	r2, [fp], #4
    memcpy(&val, *in_q15, 4);
 8025ab6:	f8de 7000 	ldr.w	r7, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025aba:	ea4f 2632 	mov.w	r6, r2, ror #8
 8025abe:	f8d8 9000 	ldr.w	r9, [r8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025ac2:	fa2f f686 	sxtb16	r6, r6
 8025ac6:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025aca:	fb22 cc07 	smlad	ip, r2, r7, ip
    memcpy(&val, *in_q7, 4);
 8025ace:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025ad2:	fa2f f483 	sxtb16	r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8025ad6:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025ada:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025ade:	fb22 5209 	smlad	r2, r2, r9, r5
 8025ae2:	fb24 0007 	smlad	r0, r4, r7, r0
    memcpy(&val, *in_q15, 4);
 8025ae6:	f8de 7004 	ldr.w	r7, [lr, #4]
 8025aea:	f10e 0e08 	add.w	lr, lr, #8
 8025aee:	fb24 1109 	smlad	r1, r4, r9, r1
 8025af2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8025af6:	f108 0808 	add.w	r8, r8, #8
 8025afa:	fb26 cc07 	smlad	ip, r6, r7, ip
 8025afe:	fb26 2504 	smlad	r5, r6, r4, r2
 8025b02:	fb23 0007 	smlad	r0, r3, r7, r0
 8025b06:	fb23 1104 	smlad	r1, r3, r4, r1
		while (col_count) {
 8025b0a:	9b01      	ldr	r3, [sp, #4]
 8025b0c:	459b      	cmp	fp, r3
 8025b0e:	d1d0      	bne.n	8025ab2 <mat_mult_kernel_s8_s16_reordered_fpreq+0x9e>
 8025b10:	9b06      	ldr	r3, [sp, #24]
 8025b12:	449b      	add	fp, r3
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025b14:	ee07 ca10 	vmov	s14, ip
		ch_0_out_0 += out_offset;
 8025b18:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025b1a:	9b02      	ldr	r3, [sp, #8]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025b1c:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025b20:	ee07 5a10 	vmov	s14, r5
 8025b24:	3308      	adds	r3, #8
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
		ch_1_out_1 += out_offset;
 8025b26:	9d1c      	ldr	r5, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025b28:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025b2c:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025b30:	ee25 5a26 	vmul.f32	s10, s10, s13
 8025b34:	9302      	str	r3, [sp, #8]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025b36:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025b3a:	ee07 1a10 	vmov	s14, r1
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025b3e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8025b42:	9f03      	ldr	r7, [sp, #12]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025b48:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8025b4c:	3708      	adds	r7, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025b52:	9703      	str	r7, [sp, #12]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025b54:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025b5c:	ee17 0a10 	vmov	r0, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025b60:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8025b64:	4420      	add	r0, r4
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025b66:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025b6a:	ee17 1a10 	vmov	r1, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025b6e:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8025b72:	442b      	add	r3, r5
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025b74:	9d08      	ldr	r5, [sp, #32]
		ch_0_out_1 += out_offset;
 8025b76:	4421      	add	r1, r4
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025b78:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8025b7c:	4422      	add	r2, r4
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8025b7e:	9c07      	ldr	r4, [sp, #28]
 8025b80:	42a0      	cmp	r0, r4
 8025b82:	bfb8      	it	lt
 8025b84:	4620      	movlt	r0, r4
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8025b86:	42a1      	cmp	r1, r4
 8025b88:	bfb8      	it	lt
 8025b8a:	4621      	movlt	r1, r4
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8025b8c:	42a2      	cmp	r2, r4
 8025b8e:	bfb8      	it	lt
 8025b90:	4622      	movlt	r2, r4
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025b92:	42a8      	cmp	r0, r5
 8025b94:	bfa8      	it	ge
 8025b96:	4628      	movge	r0, r5
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8025b98:	42a3      	cmp	r3, r4
 8025b9a:	bfb8      	it	lt
 8025b9c:	4623      	movlt	r3, r4
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8025b9e:	42a9      	cmp	r1, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8025ba0:	9c05      	ldr	r4, [sp, #20]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8025ba2:	bfa8      	it	ge
 8025ba4:	4629      	movge	r1, r5
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8025ba6:	42aa      	cmp	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8025ba8:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8025bac:	bfa8      	it	ge
 8025bae:	462a      	movge	r2, r5
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8025bb0:	42ab      	cmp	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 8025bb2:	9804      	ldr	r0, [sp, #16]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8025bb4:	bfa8      	it	ge
 8025bb6:	462b      	movge	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 8025bb8:	f800 1c02 	strb.w	r1, [r0, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8025bbc:	f804 2c01 	strb.w	r2, [r4, #-1]
 8025bc0:	1ca2      	adds	r2, r4, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8025bc2:	f800 3c01 	strb.w	r3, [r0, #-1]
 8025bc6:	1c83      	adds	r3, r0, #2
 8025bc8:	9205      	str	r2, [sp, #20]
 8025bca:	9304      	str	r3, [sp, #16]
	while (row_count) {
 8025bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bce:	42bb      	cmp	r3, r7
 8025bd0:	f47f af56 	bne.w	8025a80 <mat_mult_kernel_s8_s16_reordered_fpreq+0x6c>
 8025bd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025bd8:	3101      	adds	r1, #1
 8025bda:	00cb      	lsls	r3, r1, #3
 8025bdc:	0049      	lsls	r1, r1, #1
 8025bde:	441a      	add	r2, r3
 8025be0:	920f      	str	r2, [sp, #60]	; 0x3c
 8025be2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025be4:	441a      	add	r2, r3
 8025be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025be8:	440b      	add	r3, r1
 8025bea:	9220      	str	r2, [sp, #128]	; 0x80
 8025bec:	9321      	str	r3, [sp, #132]	; 0x84
 8025bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025bf0:	440b      	add	r3, r1
 8025bf2:	930e      	str	r3, [sp, #56]	; 0x38
		/* skip row */
		ip_a0 += num_col_a;
		row_count--;
	}

	if (output_ch & 1) {
 8025bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025bf6:	07da      	lsls	r2, r3, #31
 8025bf8:	d554      	bpl.n	8025ca4 <mat_mult_kernel_s8_s16_reordered_fpreq+0x290>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;

		/* Init accumulator with bias for channel N + 1 */
		q31_t ch_0_out_0 = *bias;
 8025bfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8025bfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		q31_t ch_0_out_0 = *bias;
 8025bfe:	6819      	ldr	r1, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8025c00:	9b06      	ldr	r3, [sp, #24]
		q31_t ch_0_out_1 = ch_0_out_0;
 8025c02:	460a      	mov	r2, r1

		int32_t col_count = num_col_a / 4;
		while (col_count) {
 8025c04:	089d      	lsrs	r5, r3, #2
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8025c06:	eb06 0443 	add.w	r4, r6, r3, lsl #1
		while (col_count) {
 8025c0a:	d018      	beq.n	8025c3e <mat_mult_kernel_s8_s16_reordered_fpreq+0x22a>
    memcpy(&val, *in_q7, 4);
 8025c0c:	f85b 3b04 	ldr.w	r3, [fp], #4
    memcpy(&val, *in_q15, 4);
 8025c10:	6837      	ldr	r7, [r6, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025c12:	ea4f 2033 	mov.w	r0, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025c16:	fa2f f383 	sxtb16	r3, r3
 8025c1a:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025c1e:	fb23 1107 	smlad	r1, r3, r7, r1
 8025c22:	6827      	ldr	r7, [r4, #0]
 8025c24:	fb23 2207 	smlad	r2, r3, r7, r2
 8025c28:	6877      	ldr	r7, [r6, #4]
 8025c2a:	3408      	adds	r4, #8
 8025c2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8025c30:	3608      	adds	r6, #8
 8025c32:	fb20 1107 	smlad	r1, r0, r7, r1
 8025c36:	fb20 2203 	smlad	r2, r0, r3, r2
 8025c3a:	3d01      	subs	r5, #1
 8025c3c:	d1e6      	bne.n	8025c0c <mat_mult_kernel_s8_s16_reordered_fpreq+0x1f8>
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8025c3e:	ee07 1a90 	vmov	s15, r1
 8025c42:	990f      	ldr	r1, [sp, #60]	; 0x3c
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8025c44:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 += out_offset;
 8025c48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8025c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025c4e:	edd1 6a00 	vldr	s13, [r1]
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025c52:	9808      	ldr	r0, [sp, #32]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8025c54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		*out_0++ = (q7_t) ch_0_out_0;
 8025c58:	9c21      	ldr	r4, [sp, #132]	; 0x84
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8025c5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025c62:	ee17 3a90 	vmov	r3, s15
		ch_0_out_0 += out_offset;
 8025c66:	4413      	add	r3, r2
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8025c68:	9a07      	ldr	r2, [sp, #28]
 8025c6a:	4293      	cmp	r3, r2
 8025c6c:	bfb8      	it	lt
 8025c6e:	4613      	movlt	r3, r2
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8025c70:	4283      	cmp	r3, r0
 8025c72:	bfa8      	it	ge
 8025c74:	4603      	movge	r3, r0
		*out_0++ = (q7_t) ch_0_out_0;
 8025c76:	7023      	strb	r3, [r4, #0]
 8025c78:	4623      	mov	r3, r4
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8025c7a:	edd1 7a00 	vldr	s15, [r1]
		*out_0++ = (q7_t) ch_0_out_0;
 8025c7e:	3301      	adds	r3, #1
		ch_0_out_1 += out_offset;
 8025c80:	991c      	ldr	r1, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8025c82:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_0_out_0;
 8025c86:	9321      	str	r3, [sp, #132]	; 0x84
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8025c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025c8c:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 += out_offset;
 8025c90:	440b      	add	r3, r1
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8025c92:	4293      	cmp	r3, r2
 8025c94:	bfb8      	it	lt
 8025c96:	4613      	movlt	r3, r2
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;
 8025c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8025c9a:	4283      	cmp	r3, r0
 8025c9c:	bfa8      	it	ge
 8025c9e:	4603      	movge	r3, r0
		*out_1++ = (q7_t) ch_0_out_1;
 8025ca0:	7013      	strb	r3, [r2, #0]
 8025ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8025ca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025ca6:	4413      	add	r3, r2
 8025ca8:	4618      	mov	r0, r3
 8025caa:	b013      	add	sp, #76	; 0x4c
 8025cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (col_count) {
 8025cb0:	46cb      	mov	fp, r9
		q31_t ch_1_out_1 = *bias++;
 8025cb2:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8025cb4:	4665      	mov	r5, ip
 8025cb6:	e72d      	b.n	8025b14 <mat_mult_kernel_s8_s16_reordered_fpreq+0x100>

08025cb8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cbc:	b095      	sub	sp, #84	; 0x54
 8025cbe:	468c      	mov	ip, r1
 8025cc0:	900a      	str	r0, [sp, #40]	; 0x28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
	q7_t *mask1 = mask + output_ch / 8;
 8025cc2:	9c24      	ldr	r4, [sp, #144]	; 0x90
	q7_t *out_1 = out_0 + output_ch;
 8025cc4:	9823      	ldr	r0, [sp, #140]	; 0x8c
	q7_t *mask1 = mask + output_ch / 8;
 8025cc6:	eb04 04d2 	add.w	r4, r4, r2, lsr #3
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025cca:	9212      	str	r2, [sp, #72]	; 0x48
	q7_t *out_1 = out_0 + output_ch;
 8025ccc:	4410      	add	r0, r2
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025cce:	f9bd 607c 	ldrsh.w	r6, [sp, #124]	; 0x7c
 8025cd2:	f9bd 7080 	ldrsh.w	r7, [sp, #128]	; 0x80

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	int bit_starting_idx = 0;
	/* this loop over rows in A */
	while (row_count) {
 8025cd6:	0852      	lsrs	r2, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025cd8:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
	q7_t *mask1 = mask + output_ch / 8;
 8025cdc:	9402      	str	r4, [sp, #8]
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025cde:	910f      	str	r1, [sp, #60]	; 0x3c
 8025ce0:	9604      	str	r6, [sp, #16]
 8025ce2:	9707      	str	r7, [sp, #28]
 8025ce4:	950d      	str	r5, [sp, #52]	; 0x34
 8025ce6:	9c22      	ldr	r4, [sp, #136]	; 0x88
	while (row_count) {
 8025ce8:	f000 8102 	beq.w	8025ef0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x238>
		q31_t ch_0_out_0 = *bias;
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		uint16_t col_count = num_col_a / 4;
 8025cec:	08a9      	lsrs	r1, r5, #2
 8025cee:	3a01      	subs	r2, #1
 8025cf0:	3002      	adds	r0, #2
 8025cf2:	3308      	adds	r3, #8
 8025cf4:	910c      	str	r1, [sp, #48]	; 0x30
 8025cf6:	b292      	uxth	r2, r2
 8025cf8:	f104 0110 	add.w	r1, r4, #16
 8025cfc:	9005      	str	r0, [sp, #20]
 8025cfe:	9213      	str	r2, [sp, #76]	; 0x4c
 8025d00:	42b7      	cmp	r7, r6
 8025d02:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8025d06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025d08:	9308      	str	r3, [sp, #32]
 8025d0a:	bfa8      	it	ge
 8025d0c:	4637      	movge	r7, r6
 8025d0e:	920e      	str	r2, [sp, #56]	; 0x38
 8025d10:	3801      	subs	r0, #1
 8025d12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025d14:	b283      	uxth	r3, r0
 8025d16:	f104 0008 	add.w	r0, r4, #8
 8025d1a:	3202      	adds	r2, #2
 8025d1c:	970b      	str	r7, [sp, #44]	; 0x2c
 8025d1e:	3301      	adds	r3, #1
 8025d20:	9009      	str	r0, [sp, #36]	; 0x24
 8025d22:	9206      	str	r2, [sp, #24]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8025d24:	eb0c 0245 	add.w	r2, ip, r5, lsl #1
 8025d28:	9210      	str	r2, [sp, #64]	; 0x40
	int bit_starting_idx = 0;
 8025d2a:	2200      	movs	r2, #0
 8025d2c:	9203      	str	r2, [sp, #12]
 8025d2e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 8025d32:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8025d36:	9201      	str	r2, [sp, #4]
 8025d38:	9311      	str	r3, [sp, #68]	; 0x44
		const float scale_0 = scales[0];
 8025d3a:	9b08      	ldr	r3, [sp, #32]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8025d3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		const float scale_0 = scales[0];
 8025d3e:	ed13 7a02 	vldr	s14, [r3, #-8]
		const float scale_1 = scales[1];
 8025d42:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 8025d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8025d48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		q31_t ch_0_out_0 = *bias;
 8025d4a:	f853 1c08 	ldr.w	r1, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 8025d4e:	f853 5c04 	ldr.w	r5, [r3, #-4]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8025d52:	eb04 0802 	add.w	r8, r4, r2
		/* accumulate over the vector */
		while (col_count) {
 8025d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	f000 8106 	beq.w	8025f6a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2b2>
		q31_t ch_1_out_1 = *bias++;
 8025d5e:	46ab      	mov	fp, r5
		q31_t ch_0_out_1 = *bias++;
 8025d60:	4608      	mov	r0, r1
		while (col_count) {
 8025d62:	46a2      	mov	sl, r4
		const q15_t *ip_b0 = input_b;
 8025d64:	e9dd 7e0f 	ldrd	r7, lr, [sp, #60]	; 0x3c
    memcpy(&val, *in_q7, 4);
 8025d68:	f85a 2b04 	ldr.w	r2, [sl], #4
    memcpy(&val, *in_q15, 4);
 8025d6c:	f8d7 c000 	ldr.w	ip, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 8025d70:	ea4f 2632 	mov.w	r6, r2, ror #8
 8025d74:	f8de 9000 	ldr.w	r9, [lr]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025d78:	fa2f f686 	sxtb16	r6, r6
 8025d7c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025d80:	fb22 110c 	smlad	r1, r2, ip, r1
    memcpy(&val, *in_q7, 4);
 8025d84:	f858 3b04 	ldr.w	r3, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025d88:	fa2f f483 	sxtb16	r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8025d8c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8025d90:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8025d94:	fb22 0209 	smlad	r2, r2, r9, r0
 8025d98:	fb24 550c 	smlad	r5, r4, ip, r5
    memcpy(&val, *in_q15, 4);
 8025d9c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8025da0:	3708      	adds	r7, #8
 8025da2:	fb24 bb09 	smlad	fp, r4, r9, fp
 8025da6:	f8de 4004 	ldr.w	r4, [lr, #4]
 8025daa:	f10e 0e08 	add.w	lr, lr, #8
 8025dae:	fb26 110c 	smlad	r1, r6, ip, r1
 8025db2:	fb26 2004 	smlad	r0, r6, r4, r2
 8025db6:	fb23 550c 	smlad	r5, r3, ip, r5
 8025dba:	fb23 bb04 	smlad	fp, r3, r4, fp
		while (col_count) {
 8025dbe:	9b01      	ldr	r3, [sp, #4]
 8025dc0:	429f      	cmp	r7, r3
 8025dc2:	d1d1      	bne.n	8025d68 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xb0>
 8025dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025dc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025dc8:	4413      	add	r3, r2
 8025dca:	930a      	str	r3, [sp, #40]	; 0x28
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025dcc:	ee06 1a90 	vmov	s13, r1
 8025dd0:	9b03      	ldr	r3, [sp, #12]
 8025dd2:	2201      	movs	r2, #1
		ch_0_out_0 += out_offset;
 8025dd4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8025dd6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8025dda:	409a      	lsls	r2, r3
 8025ddc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025dde:	ee66 6a87 	vmul.f32	s13, s13, s14
 8025de2:	7819      	ldrb	r1, [r3, #0]
 8025de4:	b2d2      	uxtb	r2, r2
 8025de6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8025dea:	ee16 3a90 	vmov	r3, s13
		ch_0_out_0 += out_offset;
 8025dee:	4423      	add	r3, r4
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 8025df0:	9c04      	ldr	r4, [sp, #16]
 8025df2:	429c      	cmp	r4, r3
 8025df4:	f300 8087 	bgt.w	8025f06 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x24e>
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 8025df8:	9c07      	ldr	r4, [sp, #28]
 8025dfa:	429c      	cmp	r4, r3
 8025dfc:	f2c0 80af 	blt.w	8025f5e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2a6>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx);
 8025e00:	4311      	orrs	r1, r2
 8025e02:	b249      	sxtb	r1, r1
		else
			BIT_CLEAR(*mask, bit_starting_idx);
		*out_0++ = (q7_t) ch_0_out_0;


		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025e04:	ee06 0a90 	vmov	s13, r0
 8025e08:	9824      	ldr	r0, [sp, #144]	; 0x90
 8025e0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8025e0e:	7001      	strb	r1, [r0, #0]
		*out_0++ = (q7_t) ch_0_out_0;
 8025e10:	9906      	ldr	r1, [sp, #24]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025e12:	ee26 7a87 	vmul.f32	s14, s13, s14
		*out_0++ = (q7_t) ch_0_out_0;
 8025e16:	f801 3c02 	strb.w	r3, [r1, #-2]
		ch_0_out_1 += out_offset;
 8025e1a:	991e      	ldr	r1, [sp, #120]	; 0x78
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8025e1c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8025e20:	ee17 3a10 	vmov	r3, s14
		ch_0_out_1 += out_offset;
 8025e24:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 8025e26:	9904      	ldr	r1, [sp, #16]
 8025e28:	4299      	cmp	r1, r3
 8025e2a:	dd79      	ble.n	8025f20 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x268>
 8025e2c:	9902      	ldr	r1, [sp, #8]
 8025e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025e30:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx);
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 8025e32:	ea21 0102 	bic.w	r1, r1, r2
 8025e36:	b249      	sxtb	r1, r1
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025e38:	ee07 5a10 	vmov	s14, r5
 8025e3c:	9a03      	ldr	r2, [sp, #12]
 8025e3e:	9802      	ldr	r0, [sp, #8]
 8025e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025e44:	3201      	adds	r2, #1
 8025e46:	7001      	strb	r1, [r0, #0]
 8025e48:	2101      	movs	r1, #1
 8025e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025e4e:	fa01 f202 	lsl.w	r2, r1, r2
		*out_1++ = (q7_t) ch_0_out_1;
 8025e52:	9905      	ldr	r1, [sp, #20]
 8025e54:	b2d2      	uxtb	r2, r2
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025e56:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		*out_1++ = (q7_t) ch_0_out_1;
 8025e5a:	f801 3c02 	strb.w	r3, [r1, #-2]
		ch_1_out_0 += out_offset;
 8025e5e:	991e      	ldr	r1, [sp, #120]	; 0x78
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8025e60:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 8025e64:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 8025e66:	9904      	ldr	r1, [sp, #16]
 8025e68:	4299      	cmp	r1, r3
 8025e6a:	dd51      	ble.n	8025f10 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x258>
 8025e6c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025e70:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 8025e72:	ea21 0102 	bic.w	r1, r1, r2
 8025e76:	b249      	sxtb	r1, r1
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025e78:	ee07 ba10 	vmov	s14, fp
 8025e7c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8025e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025e82:	7001      	strb	r1, [r0, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 8025e84:	9906      	ldr	r1, [sp, #24]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025e86:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_1_out_0;
 8025e8a:	f801 3c01 	strb.w	r3, [r1, #-1]
		ch_1_out_1 += out_offset;
 8025e8e:	991e      	ldr	r1, [sp, #120]	; 0x78
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8025e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025e94:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8025e98:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 8025e9a:	9904      	ldr	r1, [sp, #16]
 8025e9c:	4299      	cmp	r1, r3
 8025e9e:	dd2a      	ble.n	8025ef6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x23e>
 8025ea0:	9902      	ldr	r1, [sp, #8]
 8025ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ea4:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 8025ea6:	ea21 0202 	bic.w	r2, r1, r2
 8025eaa:	b252      	sxtb	r2, r2
 8025eac:	9802      	ldr	r0, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		bit_starting_idx += 2;
 8025eae:	9903      	ldr	r1, [sp, #12]
 8025eb0:	7002      	strb	r2, [r0, #0]
		*out_1++ = (q7_t) ch_1_out_1;
 8025eb2:	9a05      	ldr	r2, [sp, #20]
		bit_starting_idx += 2;
 8025eb4:	3102      	adds	r1, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8025eb6:	f802 3c01 	strb.w	r3, [r2, #-1]
		if(bit_starting_idx == 8){
 8025eba:	2908      	cmp	r1, #8
 8025ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
		bit_starting_idx += 2;
 8025ebe:	9103      	str	r1, [sp, #12]
 8025ec0:	f103 0308 	add.w	r3, r3, #8
 8025ec4:	9309      	str	r3, [sp, #36]	; 0x24
		if(bit_starting_idx == 8){
 8025ec6:	d033      	beq.n	8025f30 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x278>
 8025ec8:	9a06      	ldr	r2, [sp, #24]
 8025eca:	3202      	adds	r2, #2
 8025ecc:	9206      	str	r2, [sp, #24]
 8025ece:	9a05      	ldr	r2, [sp, #20]
 8025ed0:	3202      	adds	r2, #2
 8025ed2:	9205      	str	r2, [sp, #20]
 8025ed4:	9a08      	ldr	r2, [sp, #32]
 8025ed6:	3208      	adds	r2, #8
 8025ed8:	9208      	str	r2, [sp, #32]
	while (row_count) {
 8025eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025edc:	429a      	cmp	r2, r3
 8025ede:	f47f af2c 	bne.w	8025d3a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x82>
 8025ee2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025ee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025ee6:	3001      	adds	r0, #1
 8025ee8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8025eec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025eee:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8025ef0:	b015      	add	sp, #84	; 0x54
 8025ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ch_1_out_1 > activation_max){
 8025ef6:	9807      	ldr	r0, [sp, #28]
 8025ef8:	9902      	ldr	r1, [sp, #8]
 8025efa:	4298      	cmp	r0, r3
 8025efc:	7809      	ldrb	r1, [r1, #0]
 8025efe:	db30      	blt.n	8025f62 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2aa>
			BIT_SET(*mask1, bit_starting_idx+1);
 8025f00:	430a      	orrs	r2, r1
 8025f02:	b252      	sxtb	r2, r2
 8025f04:	e7d2      	b.n	8025eac <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1f4>
 8025f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			BIT_CLEAR(*mask, bit_starting_idx);
 8025f08:	ea21 0102 	bic.w	r1, r1, r2
 8025f0c:	b249      	sxtb	r1, r1
 8025f0e:	e779      	b.n	8025e04 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x14c>
		if (ch_1_out_0 > activation_max){
 8025f10:	9807      	ldr	r0, [sp, #28]
 8025f12:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025f14:	4298      	cmp	r0, r3
 8025f16:	7809      	ldrb	r1, [r1, #0]
 8025f18:	db1f      	blt.n	8025f5a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2a2>
			BIT_SET(*mask, bit_starting_idx+1);
 8025f1a:	4311      	orrs	r1, r2
 8025f1c:	b249      	sxtb	r1, r1
 8025f1e:	e7ab      	b.n	8025e78 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1c0>
		if (ch_0_out_1 > activation_max){
 8025f20:	9807      	ldr	r0, [sp, #28]
 8025f22:	9902      	ldr	r1, [sp, #8]
 8025f24:	4298      	cmp	r0, r3
 8025f26:	7809      	ldrb	r1, [r1, #0]
 8025f28:	db1d      	blt.n	8025f66 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2ae>
			BIT_SET(*mask1, bit_starting_idx);
 8025f2a:	4311      	orrs	r1, r2
 8025f2c:	b249      	sxtb	r1, r1
 8025f2e:	e783      	b.n	8025e38 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x180>
			mask++;
 8025f30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025f32:	3201      	adds	r2, #1
 8025f34:	9224      	str	r2, [sp, #144]	; 0x90
			mask1++;
 8025f36:	4602      	mov	r2, r0
 8025f38:	3201      	adds	r2, #1
 8025f3a:	9202      	str	r2, [sp, #8]
 8025f3c:	9a06      	ldr	r2, [sp, #24]
 8025f3e:	3202      	adds	r2, #2
 8025f40:	9206      	str	r2, [sp, #24]
 8025f42:	9a05      	ldr	r2, [sp, #20]
 8025f44:	3202      	adds	r2, #2
 8025f46:	9205      	str	r2, [sp, #20]
 8025f48:	9a08      	ldr	r2, [sp, #32]
 8025f4a:	3208      	adds	r2, #8
 8025f4c:	9208      	str	r2, [sp, #32]
	while (row_count) {
 8025f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f50:	429a      	cmp	r2, r3
 8025f52:	d0c6      	beq.n	8025ee2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x22a>
			bit_starting_idx = 0;
 8025f54:	2300      	movs	r3, #0
 8025f56:	9303      	str	r3, [sp, #12]
 8025f58:	e6ef      	b.n	8025d3a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x82>
 8025f5a:	4603      	mov	r3, r0
 8025f5c:	e789      	b.n	8025e72 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1ba>
 8025f5e:	4623      	mov	r3, r4
 8025f60:	e7d2      	b.n	8025f08 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x250>
 8025f62:	4603      	mov	r3, r0
 8025f64:	e79f      	b.n	8025ea6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1ee>
 8025f66:	4603      	mov	r3, r0
 8025f68:	e763      	b.n	8025e32 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x17a>
		while (col_count) {
 8025f6a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		q31_t ch_1_out_1 = *bias++;
 8025f6e:	46ab      	mov	fp, r5
		q31_t ch_0_out_1 = *bias++;
 8025f70:	4608      	mov	r0, r1
 8025f72:	e72b      	b.n	8025dcc <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x114>

08025f74 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH>:
q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH(const q7_t *kernel_sram,
		const q7_t *kernel_flash, const uint16_t first_k_channel,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f78:	b09b      	sub	sp, #108	; 0x6c
 8025f7a:	4616      	mov	r6, r2
 8025f7c:	4681      	mov	r9, r0
 8025f7e:	469c      	mov	ip, r3
 8025f80:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8025f84:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 8025f88:	910a      	str	r1, [sp, #40]	; 0x28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8025f8a:	992b      	ldr	r1, [sp, #172]	; 0xac
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025f8c:	920d      	str	r2, [sp, #52]	; 0x34

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0_sram = kernel_sram;
	const uint16_t num_col_sram = first_k_channel;
	const q7_t *ip_a0_flash = kernel_flash;
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8025f8e:	1aa2      	subs	r2, r4, r2
	q7_t *out_1 = out_0 + output_ch;
 8025f90:	1948      	adds	r0, r1, r5
	q7_t *mask1 = mask + output_ch / 8;
 8025f92:	992c      	ldr	r1, [sp, #176]	; 0xb0
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8025f94:	b297      	uxth	r7, r2
	q7_t *out_1 = out_0 + output_ch;
 8025f96:	462a      	mov	r2, r5
	q7_t *mask1 = mask + output_ch / 8;
 8025f98:	eb01 01d5 	add.w	r1, r1, r5, lsr #3
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025f9c:	9518      	str	r5, [sp, #96]	; 0x60
 8025f9e:	930f      	str	r3, [sp, #60]	; 0x3c
	int bit_starting_idx = 0;
	/* this loop over rows in A */
	while (row_count) {
 8025fa0:	0853      	lsrs	r3, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025fa2:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
	q7_t *mask1 = mask + output_ch / 8;
 8025fa6:	9102      	str	r1, [sp, #8]
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025fa8:	f9bd 109c 	ldrsh.w	r1, [sp, #156]	; 0x9c
 8025fac:	9507      	str	r5, [sp, #28]
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8025fae:	970c      	str	r7, [sp, #48]	; 0x30
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8025fb0:	9104      	str	r1, [sp, #16]
 8025fb2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
	while (row_count) {
 8025fb4:	f000 815a 	beq.w	802626c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2f8>
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		// kernels in SRAM
		uint16_t col_count = num_col_sram / 4;
 8025fb8:	08b6      	lsrs	r6, r6, #2
 8025fba:	3b01      	subs	r3, #1
 8025fbc:	f105 0210 	add.w	r2, r5, #16

			col_count--;
		} /* while over col_count */

		// kernels in Flash
		col_count = num_col_flash / 4;
 8025fc0:	08bf      	lsrs	r7, r7, #2
 8025fc2:	1e71      	subs	r1, r6, #1
		uint16_t col_count = num_col_sram / 4;
 8025fc4:	9610      	str	r6, [sp, #64]	; 0x40
 8025fc6:	b29e      	uxth	r6, r3
 8025fc8:	1c83      	adds	r3, r0, #2
 8025fca:	f105 0008 	add.w	r0, r5, #8
 8025fce:	b289      	uxth	r1, r1
 8025fd0:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8025fd4:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 8025fd8:	9009      	str	r0, [sp, #36]	; 0x24
 8025fda:	3101      	adds	r1, #1
 8025fdc:	9212      	str	r2, [sp, #72]	; 0x48
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8025fde:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
 8025fe2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025fe4:	9825      	ldr	r0, [sp, #148]	; 0x94
 8025fe6:	3202      	adds	r2, #2
 8025fe8:	9d07      	ldr	r5, [sp, #28]
 8025fea:	3008      	adds	r0, #8
 8025fec:	9306      	str	r3, [sp, #24]
 8025fee:	9205      	str	r2, [sp, #20]
 8025ff0:	fa1f f38e 	uxth.w	r3, lr
 8025ff4:	00ca      	lsls	r2, r1, #3
 8025ff6:	9008      	str	r0, [sp, #32]
 8025ff8:	0088      	lsls	r0, r1, #2
 8025ffa:	9904      	ldr	r1, [sp, #16]
		col_count = num_col_flash / 4;
 8025ffc:	9711      	str	r7, [sp, #68]	; 0x44
 8025ffe:	3301      	adds	r3, #1
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8026000:	4667      	mov	r7, ip
 8026002:	9014      	str	r0, [sp, #80]	; 0x50
 8026004:	428d      	cmp	r5, r1
	int bit_starting_idx = 0;
 8026006:	f04f 0000 	mov.w	r0, #0
 802600a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802600e:	9619      	str	r6, [sp, #100]	; 0x64
 8026010:	9003      	str	r0, [sp, #12]
 8026012:	bfa8      	it	ge
 8026014:	460d      	movge	r5, r1
 8026016:	18a0      	adds	r0, r4, r2
 8026018:	18ba      	adds	r2, r7, r2
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 802601a:	9413      	str	r4, [sp, #76]	; 0x4c
 802601c:	9017      	str	r0, [sp, #92]	; 0x5c
 802601e:	9216      	str	r2, [sp, #88]	; 0x58
 8026020:	9315      	str	r3, [sp, #84]	; 0x54
 8026022:	950b      	str	r5, [sp, #44]	; 0x2c
		const q7_t *ip_a1_sram = ip_a0_sram + num_col_sram;
 8026024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 8026026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		const q7_t *ip_a1_sram = ip_a0_sram + num_col_sram;
 8026028:	eb09 0803 	add.w	r8, r9, r3
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 802602c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802602e:	4413      	add	r3, r2
		while (col_count) {
 8026030:	9a10      	ldr	r2, [sp, #64]	; 0x40
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 8026032:	930e      	str	r3, [sp, #56]	; 0x38
		const float scale_0 = scales[0];
 8026034:	9b08      	ldr	r3, [sp, #32]
 8026036:	ed13 7a02 	vldr	s14, [r3, #-8]
		const float scale_1 = scales[1];
 802603a:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 802603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026040:	f853 0c08 	ldr.w	r0, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 8026044:	f853 3c04 	ldr.w	r3, [r3, #-4]
		while (col_count) {
 8026048:	2a00      	cmp	r2, #0
 802604a:	f000 814c 	beq.w	80262e6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x372>
 802604e:	9a14      	ldr	r2, [sp, #80]	; 0x50
		q31_t ch_1_out_1 = *bias++;
 8026050:	469b      	mov	fp, r3
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8026052:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
		q31_t ch_0_out_1 = *bias++;
 8026056:	4601      	mov	r1, r0
 8026058:	444a      	add	r2, r9
		const q15_t *ip_b0 = input_b;
 802605a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
		q31_t ch_0_out_1 = *bias++;
 802605c:	46c2      	mov	sl, r8
 802605e:	9201      	str	r2, [sp, #4]
    memcpy(&val, *in_q7, 4);
 8026060:	f859 4b04 	ldr.w	r4, [r9], #4
    memcpy(&val, *in_q15, 4);
 8026064:	f8d7 e000 	ldr.w	lr, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 8026068:	ea4f 2634 	mov.w	r6, r4, ror #8
 802606c:	f8dc 8000 	ldr.w	r8, [ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8026070:	fa2f f686 	sxtb16	r6, r6
 8026074:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8026078:	fb24 000e 	smlad	r0, r4, lr, r0
    memcpy(&val, *in_q7, 4);
 802607c:	f85a 2b04 	ldr.w	r2, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8026080:	fa2f f582 	sxtb16	r5, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8026084:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8026088:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802608c:	fb24 1408 	smlad	r4, r4, r8, r1
 8026090:	fb25 330e 	smlad	r3, r5, lr, r3
    memcpy(&val, *in_q15, 4);
 8026094:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8026098:	3708      	adds	r7, #8
 802609a:	fb25 bb08 	smlad	fp, r5, r8, fp
 802609e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80260a2:	f10c 0c08 	add.w	ip, ip, #8
 80260a6:	fb26 000e 	smlad	r0, r6, lr, r0
 80260aa:	fb26 4105 	smlad	r1, r6, r5, r4
 80260ae:	fb22 330e 	smlad	r3, r2, lr, r3
 80260b2:	fb22 bb05 	smlad	fp, r2, r5, fp
		while (col_count) {
 80260b6:	9a01      	ldr	r2, [sp, #4]
 80260b8:	454a      	cmp	r2, r9
 80260ba:	d1d1      	bne.n	8026060 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0xec>
 80260bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80260be:	4491      	add	r9, r2
		/* accumulate over the vector */
		while (col_count) {
 80260c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    *in_q15 += 2;
 80260c2:	e9dd c716 	ldrd	ip, r7, [sp, #88]	; 0x58
 80260c6:	2a00      	cmp	r2, #0
 80260c8:	f000 8117 	beq.w	80262fa <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x386>
 80260cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80260ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80260d0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80260d4:	4691      	mov	r9, r2
 80260d6:	eb02 0a05 	add.w	sl, r2, r5
 80260da:	f8cd a004 	str.w	sl, [sp, #4]
 80260de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 80260e2:	f859 4b04 	ldr.w	r4, [r9], #4
    memcpy(&val, *in_q15, 4);
 80260e6:	f8dc e000 	ldr.w	lr, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 80260ea:	ea4f 2634 	mov.w	r6, r4, ror #8
 80260ee:	f8d7 8000 	ldr.w	r8, [r7]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80260f2:	fa2f f686 	sxtb16	r6, r6
 80260f6:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80260fa:	fb24 000e 	smlad	r0, r4, lr, r0
    memcpy(&val, *in_q7, 4);
 80260fe:	f85a 2b04 	ldr.w	r2, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8026102:	fa2f f582 	sxtb16	r5, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8026106:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802610a:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802610e:	fb24 1408 	smlad	r4, r4, r8, r1
 8026112:	fb25 330e 	smlad	r3, r5, lr, r3
    memcpy(&val, *in_q15, 4);
 8026116:	f8dc e004 	ldr.w	lr, [ip, #4]
 802611a:	f10c 0c08 	add.w	ip, ip, #8
 802611e:	fb25 bb08 	smlad	fp, r5, r8, fp
 8026122:	687d      	ldr	r5, [r7, #4]
 8026124:	3708      	adds	r7, #8
 8026126:	fb26 000e 	smlad	r0, r6, lr, r0
 802612a:	fb26 4105 	smlad	r1, r6, r5, r4
 802612e:	fb22 330e 	smlad	r3, r2, lr, r3
 8026132:	fb22 bb05 	smlad	fp, r2, r5, fp
 8026136:	9a01      	ldr	r2, [sp, #4]
 8026138:	454a      	cmp	r2, r9
 802613a:	d1d2      	bne.n	80260e2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x16e>
 802613c:	464a      	mov	r2, r9
 802613e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026140:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026144:	4422      	add	r2, r4
 8026146:	920a      	str	r2, [sp, #40]	; 0x28
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8026148:	ee06 0a90 	vmov	s13, r0
 802614c:	9a03      	ldr	r2, [sp, #12]
 802614e:	2001      	movs	r0, #1
		ch_0_out_0 += out_offset;
 8026150:	9d26      	ldr	r5, [sp, #152]	; 0x98
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8026152:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8026156:	4090      	lsls	r0, r2
 8026158:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802615a:	ee66 6a87 	vmul.f32	s13, s13, s14
 802615e:	7814      	ldrb	r4, [r2, #0]
 8026160:	b2c0      	uxtb	r0, r0
 8026162:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8026166:	ee16 2a90 	vmov	r2, s13
		ch_0_out_0 += out_offset;
 802616a:	442a      	add	r2, r5
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 802616c:	9d04      	ldr	r5, [sp, #16]
 802616e:	42aa      	cmp	r2, r5
 8026170:	f2c0 808f 	blt.w	8026292 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x31e>
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 8026174:	9d07      	ldr	r5, [sp, #28]
 8026176:	42aa      	cmp	r2, r5
 8026178:	f300 80b1 	bgt.w	80262de <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x36a>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx);
 802617c:	4304      	orrs	r4, r0
 802617e:	b264      	sxtb	r4, r4
		else
			BIT_CLEAR(*mask, bit_starting_idx);
		*out_0++ = (q7_t) ch_0_out_0;


		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8026180:	ee06 1a90 	vmov	s13, r1
 8026184:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026186:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802618a:	700c      	strb	r4, [r1, #0]
		*out_0++ = (q7_t) ch_0_out_0;
 802618c:	9905      	ldr	r1, [sp, #20]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 802618e:	ee26 7a87 	vmul.f32	s14, s13, s14
		*out_0++ = (q7_t) ch_0_out_0;
 8026192:	f801 2c02 	strb.w	r2, [r1, #-2]
		ch_0_out_1 += out_offset;
 8026196:	9926      	ldr	r1, [sp, #152]	; 0x98
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8026198:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802619c:	ee17 2a10 	vmov	r2, s14
		ch_0_out_1 += out_offset;
 80261a0:	440a      	add	r2, r1
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 80261a2:	9904      	ldr	r1, [sp, #16]
 80261a4:	428a      	cmp	r2, r1
 80261a6:	da79      	bge.n	802629c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x328>
 80261a8:	9902      	ldr	r1, [sp, #8]
 80261aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80261ac:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx);
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 80261ae:	ea21 0000 	bic.w	r0, r1, r0
 80261b2:	b240      	sxtb	r0, r0
		*out_1++ = (q7_t) ch_0_out_1;


		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80261b4:	ee07 3a10 	vmov	s14, r3
 80261b8:	9902      	ldr	r1, [sp, #8]
 80261ba:	9b03      	ldr	r3, [sp, #12]
 80261bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80261c0:	7008      	strb	r0, [r1, #0]
 80261c2:	3301      	adds	r3, #1
 80261c4:	2101      	movs	r1, #1
 80261c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80261ca:	fa01 f303 	lsl.w	r3, r1, r3
		*out_1++ = (q7_t) ch_0_out_1;
 80261ce:	9906      	ldr	r1, [sp, #24]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80261d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		*out_1++ = (q7_t) ch_0_out_1;
 80261d4:	f801 2c02 	strb.w	r2, [r1, #-2]
		ch_1_out_0 += out_offset;
 80261d8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80261da:	b2da      	uxtb	r2, r3
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80261dc:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 80261e0:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 80261e2:	9904      	ldr	r1, [sp, #16]
 80261e4:	428b      	cmp	r3, r1
 80261e6:	da4c      	bge.n	8026282 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x30e>
 80261e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80261ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261ec:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 80261ee:	ea21 0102 	bic.w	r1, r1, r2
 80261f2:	b249      	sxtb	r1, r1
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80261f4:	ee07 ba10 	vmov	s14, fp
 80261f8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80261fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80261fe:	7001      	strb	r1, [r0, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 8026200:	9905      	ldr	r1, [sp, #20]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8026202:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_1_out_0;
 8026206:	f801 3c01 	strb.w	r3, [r1, #-1]
		ch_1_out_1 += out_offset;
 802620a:	9926      	ldr	r1, [sp, #152]	; 0x98
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802620c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026210:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 8026214:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 8026216:	9904      	ldr	r1, [sp, #16]
 8026218:	428b      	cmp	r3, r1
 802621a:	da2a      	bge.n	8026272 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2fe>
 802621c:	9902      	ldr	r1, [sp, #8]
 802621e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026220:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 8026222:	ea21 0202 	bic.w	r2, r1, r2
 8026226:	b252      	sxtb	r2, r2
 8026228:	9802      	ldr	r0, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		bit_starting_idx += 2;
 802622a:	9903      	ldr	r1, [sp, #12]
 802622c:	7002      	strb	r2, [r0, #0]
		*out_1++ = (q7_t) ch_1_out_1;
 802622e:	9a06      	ldr	r2, [sp, #24]
		bit_starting_idx += 2;
 8026230:	3102      	adds	r1, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8026232:	f802 3c01 	strb.w	r3, [r2, #-1]
		if(bit_starting_idx == 8){
 8026236:	2908      	cmp	r1, #8
 8026238:	9b09      	ldr	r3, [sp, #36]	; 0x24
		bit_starting_idx += 2;
 802623a:	9103      	str	r1, [sp, #12]
 802623c:	f103 0308 	add.w	r3, r3, #8
 8026240:	9309      	str	r3, [sp, #36]	; 0x24
		if(bit_starting_idx == 8){
 8026242:	d033      	beq.n	80262ac <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x338>
 8026244:	9a05      	ldr	r2, [sp, #20]
 8026246:	3202      	adds	r2, #2
 8026248:	9205      	str	r2, [sp, #20]
 802624a:	9a06      	ldr	r2, [sp, #24]
 802624c:	3202      	adds	r2, #2
 802624e:	9206      	str	r2, [sp, #24]
 8026250:	9a08      	ldr	r2, [sp, #32]
 8026252:	3208      	adds	r2, #8
 8026254:	9208      	str	r2, [sp, #32]
	while (row_count) {
 8026256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026258:	4293      	cmp	r3, r2
 802625a:	f47f aee3 	bne.w	8026024 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0xb0>
 802625e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026260:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026262:	3001      	adds	r0, #1
 8026264:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8026268:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802626a:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 802626c:	b01b      	add	sp, #108	; 0x6c
 802626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ch_1_out_1 > activation_max){
 8026272:	9807      	ldr	r0, [sp, #28]
 8026274:	9902      	ldr	r1, [sp, #8]
 8026276:	4298      	cmp	r0, r3
 8026278:	7809      	ldrb	r1, [r1, #0]
 802627a:	db2e      	blt.n	80262da <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x366>
			BIT_SET(*mask1, bit_starting_idx+1);
 802627c:	430a      	orrs	r2, r1
 802627e:	b252      	sxtb	r2, r2
 8026280:	e7d2      	b.n	8026228 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2b4>
		if (ch_1_out_0 > activation_max){
 8026282:	9807      	ldr	r0, [sp, #28]
 8026284:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026286:	4283      	cmp	r3, r0
 8026288:	7809      	ldrb	r1, [r1, #0]
 802628a:	dc2a      	bgt.n	80262e2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x36e>
			BIT_SET(*mask, bit_starting_idx+1);
 802628c:	4311      	orrs	r1, r2
 802628e:	b249      	sxtb	r1, r1
 8026290:	e7b0      	b.n	80261f4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x280>
 8026292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			BIT_CLEAR(*mask, bit_starting_idx);
 8026294:	ea24 0400 	bic.w	r4, r4, r0
 8026298:	b264      	sxtb	r4, r4
 802629a:	e771      	b.n	8026180 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x20c>
		if (ch_0_out_1 > activation_max){
 802629c:	9c07      	ldr	r4, [sp, #28]
 802629e:	9902      	ldr	r1, [sp, #8]
 80262a0:	42a2      	cmp	r2, r4
 80262a2:	7809      	ldrb	r1, [r1, #0]
 80262a4:	dc17      	bgt.n	80262d6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x362>
			BIT_SET(*mask1, bit_starting_idx);
 80262a6:	4308      	orrs	r0, r1
 80262a8:	b240      	sxtb	r0, r0
 80262aa:	e783      	b.n	80261b4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x240>
			mask++;
 80262ac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80262ae:	3201      	adds	r2, #1
 80262b0:	922c      	str	r2, [sp, #176]	; 0xb0
			mask1++;
 80262b2:	4602      	mov	r2, r0
 80262b4:	3201      	adds	r2, #1
 80262b6:	9202      	str	r2, [sp, #8]
 80262b8:	9a05      	ldr	r2, [sp, #20]
 80262ba:	3202      	adds	r2, #2
 80262bc:	9205      	str	r2, [sp, #20]
 80262be:	9a06      	ldr	r2, [sp, #24]
 80262c0:	3202      	adds	r2, #2
 80262c2:	9206      	str	r2, [sp, #24]
 80262c4:	9a08      	ldr	r2, [sp, #32]
 80262c6:	3208      	adds	r2, #8
 80262c8:	9208      	str	r2, [sp, #32]
	while (row_count) {
 80262ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80262cc:	4293      	cmp	r3, r2
 80262ce:	d0c6      	beq.n	802625e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2ea>
			bit_starting_idx = 0;
 80262d0:	2300      	movs	r3, #0
 80262d2:	9303      	str	r3, [sp, #12]
 80262d4:	e6a6      	b.n	8026024 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0xb0>
 80262d6:	4622      	mov	r2, r4
 80262d8:	e769      	b.n	80261ae <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x23a>
 80262da:	4603      	mov	r3, r0
 80262dc:	e7a1      	b.n	8026222 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x2ae>
 80262de:	462a      	mov	r2, r5
 80262e0:	e7d8      	b.n	8026294 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x320>
 80262e2:	4603      	mov	r3, r0
 80262e4:	e783      	b.n	80261ee <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x27a>
		while (col_count) {
 80262e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
		while (col_count) {
 80262e8:	46c1      	mov	r9, r8
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80262ea:	9f13      	ldr	r7, [sp, #76]	; 0x4c
		q31_t ch_1_out_1 = *bias++;
 80262ec:	469b      	mov	fp, r3
		const q15_t *ip_b0 = input_b;
 80262ee:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
		q31_t ch_0_out_1 = *bias++;
 80262f2:	4601      	mov	r1, r0
		while (col_count) {
 80262f4:	2a00      	cmp	r2, #0
 80262f6:	f47f aee9 	bne.w	80260cc <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x158>
 80262fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80262fc:	920a      	str	r2, [sp, #40]	; 0x28
 80262fe:	e723      	b.n	8026148 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH+0x1d4>

08026300 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2>:
q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2(const q7_t *kernel_sram,
		const q7_t *kernel_flash, const uint16_t first_k_channel,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8026300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026304:	b09d      	sub	sp, #116	; 0x74
 8026306:	4616      	mov	r6, r2
 8026308:	469c      	mov	ip, r3
 802630a:	f8bd 5098 	ldrh.w	r5, [sp, #152]	; 0x98
 802630e:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	; 0xac
 8026312:	9105      	str	r1, [sp, #20]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8026314:	992d      	ldr	r1, [sp, #180]	; 0xb4
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8026316:	920f      	str	r2, [sp, #60]	; 0x3c

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0_sram = kernel_sram;
	const uint16_t num_col_sram = first_k_channel;
	const q7_t *ip_a0_flash = kernel_flash;
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8026318:	1aa2      	subs	r2, r4, r2
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 802631a:	9009      	str	r0, [sp, #36]	; 0x24
	q7_t *out_1 = out_0 + output_ch;
 802631c:	1948      	adds	r0, r1, r5
	q7_t *mask1 = mask + output_ch / 8;
 802631e:	992e      	ldr	r1, [sp, #184]	; 0xb8
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8026320:	b297      	uxth	r7, r2
	q7_t *out_1 = out_0 + output_ch;
 8026322:	462a      	mov	r2, r5
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8026324:	951b      	str	r5, [sp, #108]	; 0x6c
	q7_t *mask1 = mask + output_ch / 8;
 8026326:	eb01 01d5 	add.w	r1, r1, r5, lsr #3
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 802632a:	930e      	str	r3, [sp, #56]	; 0x38
 802632c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
	int bit_starting_idx = 0;
	/* this loop over rows in A */
	while (row_count) {
 8026330:	0853      	lsrs	r3, r2, #1
	q7_t *mask1 = mask + output_ch / 8;
 8026332:	9101      	str	r1, [sp, #4]
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8026334:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
	const uint16_t num_col_flash = num_col_a - first_k_channel;
 8026338:	970b      	str	r7, [sp, #44]	; 0x2c
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 802633a:	9102      	str	r1, [sp, #8]
 802633c:	9506      	str	r5, [sp, #24]
 802633e:	992c      	ldr	r1, [sp, #176]	; 0xb0
	while (row_count) {
 8026340:	f000 8160 	beq.w	8026604 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x304>
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		// kernels in SRAM
		uint16_t col_count = num_col_sram / 2;
 8026344:	0872      	lsrs	r2, r6, #1
 8026346:	3002      	adds	r0, #2
 8026348:	3b01      	subs	r3, #1

			col_count--;
		} /* while over col_count */

		// kernels in Flash
		col_count = num_col_flash / 2;
 802634a:	087f      	lsrs	r7, r7, #1
		uint16_t col_count = num_col_sram / 2;
 802634c:	9210      	str	r2, [sp, #64]	; 0x40
 802634e:	3a01      	subs	r2, #1
 8026350:	9003      	str	r0, [sp, #12]
 8026352:	f101 0008 	add.w	r0, r1, #8
 8026356:	b292      	uxth	r2, r2
 8026358:	f101 0510 	add.w	r5, r1, #16
 802635c:	9008      	str	r0, [sp, #32]
 802635e:	b29b      	uxth	r3, r3
 8026360:	1c50      	adds	r0, r2, #1
 8026362:	0052      	lsls	r2, r2, #1
 8026364:	931a      	str	r3, [sp, #104]	; 0x68
 8026366:	1e7b      	subs	r3, r7, #1
 8026368:	3204      	adds	r2, #4
 802636a:	0081      	lsls	r1, r0, #2
 802636c:	b29b      	uxth	r3, r3
		col_count = num_col_flash / 2;
 802636e:	9711      	str	r7, [sp, #68]	; 0x44
 8026370:	9217      	str	r2, [sp, #92]	; 0x5c
 8026372:	4662      	mov	r2, ip
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8026374:	eb0c 0744 	add.w	r7, ip, r4, lsl #1
	int bit_starting_idx = 0;
 8026378:	f04f 0b00 	mov.w	fp, #0
 802637c:	440a      	add	r2, r1
 802637e:	005c      	lsls	r4, r3, #1
 8026380:	3301      	adds	r3, #1
 8026382:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8026386:	9216      	str	r2, [sp, #88]	; 0x58
 8026388:	187a      	adds	r2, r7, r1
 802638a:	9902      	ldr	r1, [sp, #8]
 802638c:	9215      	str	r2, [sp, #84]	; 0x54
 802638e:	005a      	lsls	r2, r3, #1
 8026390:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026392:	9214      	str	r2, [sp, #80]	; 0x50
 8026394:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8026398:	9d06      	ldr	r5, [sp, #24]
 802639a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802639c:	9312      	str	r3, [sp, #72]	; 0x48
 802639e:	42a9      	cmp	r1, r5
 80263a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80263a2:	f102 0202 	add.w	r2, r2, #2
 80263a6:	9018      	str	r0, [sp, #96]	; 0x60
 80263a8:	bfa8      	it	ge
 80263aa:	4629      	movge	r1, r5
 80263ac:	1d20      	adds	r0, r4, #4
 80263ae:	3308      	adds	r3, #8
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80263b0:	9713      	str	r7, [sp, #76]	; 0x4c
 80263b2:	9019      	str	r0, [sp, #100]	; 0x64
 80263b4:	9204      	str	r2, [sp, #16]
 80263b6:	9307      	str	r3, [sp, #28]
 80263b8:	910a      	str	r1, [sp, #40]	; 0x28
		const q7_t *ip_a1_sram = ip_a0_sram + num_col_sram;
 80263ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80263bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 80263be:	990b      	ldr	r1, [sp, #44]	; 0x2c
		const q7_t *ip_a1_sram = ip_a0_sram + num_col_sram;
 80263c0:	189d      	adds	r5, r3, r2
		const q7_t *ip_a1_flash = ip_a0_flash + num_col_flash;
 80263c2:	9a05      	ldr	r2, [sp, #20]
 80263c4:	440a      	add	r2, r1
 80263c6:	920c      	str	r2, [sp, #48]	; 0x30
		const float scale_0 = scales[0];
 80263c8:	9a07      	ldr	r2, [sp, #28]
 80263ca:	ed12 7a02 	vldr	s14, [r2, #-8]
		const float scale_1 = scales[1];
 80263ce:	ed52 7a01 	vldr	s15, [r2, #-4]
		q31_t ch_0_out_0 = *bias;
 80263d2:	9a08      	ldr	r2, [sp, #32]
 80263d4:	f852 4c08 	ldr.w	r4, [r2, #-8]
		q31_t ch_1_out_0 = *bias;
 80263d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
		while (col_count) {
 80263dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80263de:	2a00      	cmp	r2, #0
 80263e0:	f000 814d 	beq.w	802667e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x37e>
 80263e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80263e6:	1c99      	adds	r1, r3, #2
 80263e8:	3502      	adds	r5, #2
		q31_t ch_1_out_1 = *bias++;
 80263ea:	4680      	mov	r8, r0
 80263ec:	1d17      	adds	r7, r2, #4
 80263ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
		q31_t ch_0_out_1 = *bias++;
 80263f0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80263f4:	1d16      	adds	r6, r2, #4
 80263f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80263f8:	eb03 0a02 	add.w	sl, r3, r2
 80263fc:	4623      	mov	r3, r4
 80263fe:	f8cd a000 	str.w	sl, [sp]
			ch_0_out_0 += ip_a0_sram[0] * ip_b0[0];
 8026402:	f911 cc02 	ldrsb.w	ip, [r1, #-2]
 8026406:	3102      	adds	r1, #2
 8026408:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802640c:	3604      	adds	r6, #4
			ch_0_out_1 += ip_a0_sram[0] * ip_b1[0];
 802640e:	f936 bc08 	ldrsh.w	fp, [r6, #-8]
 8026412:	3704      	adds	r7, #4
			ch_1_out_0 += ip_a1_sram[0] * ip_b0[0];
 8026414:	f915 9c02 	ldrsb.w	r9, [r5, #-2]
			ch_0_out_0 += ip_a0_sram[0] * ip_b0[0];
 8026418:	fb12 440c 	smlabb	r4, r2, ip, r4
			ch_0_out_0 += ip_a0_sram[1] * ip_b0[1];
 802641c:	f911 ac03 	ldrsb.w	sl, [r1, #-3]
			ch_0_out_1 += ip_a0_sram[0] * ip_b1[0];
 8026420:	fb1b 330c 	smlabb	r3, fp, ip, r3
			ch_1_out_0 += ip_a1_sram[0] * ip_b0[0];
 8026424:	fb12 0009 	smlabb	r0, r2, r9, r0
			ch_1_out_0 += ip_a1_sram[1] * ip_b0[1];
 8026428:	f915 cc01 	ldrsb.w	ip, [r5, #-1]
			ch_0_out_0 += ip_a0_sram[1] * ip_b0[1];
 802642c:	f937 2c06 	ldrsh.w	r2, [r7, #-6]
			ch_1_out_1 += ip_a1_sram[0] * ip_b1[0];
 8026430:	fb1b 8809 	smlabb	r8, fp, r9, r8
			ch_0_out_1 += ip_a0_sram[1] * ip_b1[1];
 8026434:	f936 ec06 	ldrsh.w	lr, [r6, #-6]
 8026438:	3502      	adds	r5, #2
			ch_0_out_0 += ip_a0_sram[1] * ip_b0[1];
 802643a:	fb12 440a 	smlabb	r4, r2, sl, r4
			ch_1_out_0 += ip_a1_sram[1] * ip_b0[1];
 802643e:	fb12 000c 	smlabb	r0, r2, ip, r0
		while (col_count) {
 8026442:	9a00      	ldr	r2, [sp, #0]
			ch_0_out_1 += ip_a0_sram[1] * ip_b1[1];
 8026444:	fb1e 330a 	smlabb	r3, lr, sl, r3
			ch_1_out_1 += ip_a1_sram[1] * ip_b1[1];
 8026448:	fb1e 880c 	smlabb	r8, lr, ip, r8
		while (col_count) {
 802644c:	428a      	cmp	r2, r1
 802644e:	d1d8      	bne.n	8026402 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x102>
 8026450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026452:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026454:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8026458:	440a      	add	r2, r1
 802645a:	9209      	str	r2, [sp, #36]	; 0x24
		/* accumulate over the vector */
		while (col_count) {
 802645c:	9a11      	ldr	r2, [sp, #68]	; 0x44
			ip_b0 += 2;
 802645e:	e9dd 5615 	ldrd	r5, r6, [sp, #84]	; 0x54
		while (col_count) {
 8026462:	2a00      	cmp	r2, #0
 8026464:	f000 8114 	beq.w	8026690 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x390>
 8026468:	9a05      	ldr	r2, [sp, #20]
 802646a:	3604      	adds	r6, #4
 802646c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802646e:	3504      	adds	r5, #4
 8026470:	4694      	mov	ip, r2
 8026472:	1c91      	adds	r1, r2, #2
 8026474:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026476:	3702      	adds	r7, #2
 8026478:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 802647c:	eb0c 0a02 	add.w	sl, ip, r2
 8026480:	f8cd a000 	str.w	sl, [sp]
			ch_0_out_0 += ip_a0_flash[0] * ip_b0[0];
 8026484:	f911 cc02 	ldrsb.w	ip, [r1, #-2]
 8026488:	3102      	adds	r1, #2
 802648a:	f936 2c04 	ldrsh.w	r2, [r6, #-4]
 802648e:	3504      	adds	r5, #4
			ch_0_out_0 += ip_a0_flash[1] * ip_b0[1];
			ch_0_out_1 += ip_a0_flash[0] * ip_b1[0];
 8026490:	f935 bc08 	ldrsh.w	fp, [r5, #-8]
 8026494:	3604      	adds	r6, #4
			ch_0_out_1 += ip_a0_flash[1] * ip_b1[1];

			ch_1_out_0 += ip_a1_flash[0] * ip_b0[0];
 8026496:	f917 9c02 	ldrsb.w	r9, [r7, #-2]
			ch_0_out_0 += ip_a0_flash[0] * ip_b0[0];
 802649a:	fb12 440c 	smlabb	r4, r2, ip, r4
			ch_0_out_0 += ip_a0_flash[1] * ip_b0[1];
 802649e:	f911 ac03 	ldrsb.w	sl, [r1, #-3]
			ch_0_out_1 += ip_a0_flash[0] * ip_b1[0];
 80264a2:	fb1b 330c 	smlabb	r3, fp, ip, r3
			ch_1_out_0 += ip_a1_flash[0] * ip_b0[0];
 80264a6:	fb12 0009 	smlabb	r0, r2, r9, r0
			ch_1_out_0 += ip_a1_flash[1] * ip_b0[1];
 80264aa:	f917 cc01 	ldrsb.w	ip, [r7, #-1]
			ch_0_out_0 += ip_a0_flash[1] * ip_b0[1];
 80264ae:	f936 2c06 	ldrsh.w	r2, [r6, #-6]
			ch_1_out_1 += ip_a1_flash[0] * ip_b1[0];
 80264b2:	fb1b 8809 	smlabb	r8, fp, r9, r8
			ch_0_out_1 += ip_a0_flash[1] * ip_b1[1];
 80264b6:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 80264ba:	3702      	adds	r7, #2
			ch_0_out_0 += ip_a0_flash[1] * ip_b0[1];
 80264bc:	fb12 440a 	smlabb	r4, r2, sl, r4
			ch_1_out_0 += ip_a1_flash[1] * ip_b0[1];
 80264c0:	fb12 000c 	smlabb	r0, r2, ip, r0
		while (col_count) {
 80264c4:	9a00      	ldr	r2, [sp, #0]
			ch_0_out_1 += ip_a0_flash[1] * ip_b1[1];
 80264c6:	fb1e 330a 	smlabb	r3, lr, sl, r3
			ch_1_out_1 += ip_a1_flash[1] * ip_b1[1];
 80264ca:	fb1e 880c 	smlabb	r8, lr, ip, r8
		while (col_count) {
 80264ce:	428a      	cmp	r2, r1
 80264d0:	d1d8      	bne.n	8026484 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x184>
 80264d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80264d4:	e9dd 2b0b 	ldrd	r2, fp, [sp, #44]	; 0x2c
 80264d8:	440a      	add	r2, r1
 80264da:	9905      	ldr	r1, [sp, #20]
 80264dc:	4411      	add	r1, r2
 80264de:	9105      	str	r1, [sp, #20]

			col_count--;
		} /* while over col_count */


		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80264e0:	ee06 4a90 	vmov	s13, r4
 80264e4:	2201      	movs	r2, #1
		ch_0_out_0 += out_offset;
 80264e6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80264e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80264ec:	fa02 f10b 	lsl.w	r1, r2, fp
 80264f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80264f2:	b2c9      	uxtb	r1, r1
 80264f4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80264f8:	7814      	ldrb	r4, [r2, #0]
 80264fa:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80264fe:	ee16 2a90 	vmov	r2, s13
		ch_0_out_0 += out_offset;
 8026502:	442a      	add	r2, r5
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 8026504:	9d02      	ldr	r5, [sp, #8]
 8026506:	42aa      	cmp	r2, r5
 8026508:	f2c0 808f 	blt.w	802662a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x32a>
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 802650c:	9d06      	ldr	r5, [sp, #24]
 802650e:	42aa      	cmp	r2, r5
 8026510:	f300 80b1 	bgt.w	8026676 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x376>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx);
 8026514:	430c      	orrs	r4, r1
 8026516:	b264      	sxtb	r4, r4
			BIT_CLEAR(*mask, bit_starting_idx);
		*out_0++ = (q7_t) ch_0_out_0;



		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8026518:	ee06 3a90 	vmov	s13, r3
 802651c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802651e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8026522:	701c      	strb	r4, [r3, #0]
		*out_0++ = (q7_t) ch_0_out_0;
 8026524:	9b04      	ldr	r3, [sp, #16]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8026526:	ee26 7a87 	vmul.f32	s14, s13, s14
		*out_0++ = (q7_t) ch_0_out_0;
 802652a:	f803 2c02 	strb.w	r2, [r3, #-2]
		ch_0_out_1 += out_offset;
 802652e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8026530:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8026534:	ee17 3a10 	vmov	r3, s14
		ch_0_out_1 += out_offset;
 8026538:	4413      	add	r3, r2
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 802653a:	9a02      	ldr	r2, [sp, #8]
 802653c:	4293      	cmp	r3, r2
 802653e:	da79      	bge.n	8026634 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x334>
 8026540:	9a01      	ldr	r2, [sp, #4]
 8026542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026544:	7812      	ldrb	r2, [r2, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx);
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 8026546:	ea22 0101 	bic.w	r1, r2, r1
 802654a:	b249      	sxtb	r1, r1
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802654c:	ee07 0a10 	vmov	s14, r0
 8026550:	9801      	ldr	r0, [sp, #4]
 8026552:	f10b 0201 	add.w	r2, fp, #1
 8026556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802655a:	7001      	strb	r1, [r0, #0]
 802655c:	2101      	movs	r1, #1
 802655e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026562:	fa01 f202 	lsl.w	r2, r1, r2
		*out_1++ = (q7_t) ch_0_out_1;
 8026566:	9903      	ldr	r1, [sp, #12]
 8026568:	b2d2      	uxtb	r2, r2
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 802656a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		*out_1++ = (q7_t) ch_0_out_1;
 802656e:	f801 3c02 	strb.w	r3, [r1, #-2]
		ch_1_out_0 += out_offset;
 8026572:	9928      	ldr	r1, [sp, #160]	; 0xa0
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8026574:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 8026578:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 802657a:	9902      	ldr	r1, [sp, #8]
 802657c:	428b      	cmp	r3, r1
 802657e:	da4c      	bge.n	802661a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x31a>
 8026580:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8026582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026584:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 8026586:	ea21 0102 	bic.w	r1, r1, r2
 802658a:	b249      	sxtb	r1, r1
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802658c:	ee07 8a10 	vmov	s14, r8
 8026590:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8026592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026596:	7001      	strb	r1, [r0, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 8026598:	9904      	ldr	r1, [sp, #16]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 802659a:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_1_out_0;
 802659e:	f801 3c01 	strb.w	r3, [r1, #-1]
		ch_1_out_1 += out_offset;
 80265a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80265a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80265a8:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 80265ac:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 80265ae:	9902      	ldr	r1, [sp, #8]
 80265b0:	428b      	cmp	r3, r1
 80265b2:	da2a      	bge.n	802660a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x30a>
 80265b4:	9901      	ldr	r1, [sp, #4]
 80265b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80265b8:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 80265ba:	ea21 0202 	bic.w	r2, r1, r2
 80265be:	b252      	sxtb	r2, r2
 80265c0:	9901      	ldr	r1, [sp, #4]
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		bit_starting_idx += 2;
 80265c2:	f10b 0b02 	add.w	fp, fp, #2
 80265c6:	700a      	strb	r2, [r1, #0]
		if(bit_starting_idx == 8){
 80265c8:	f1bb 0f08 	cmp.w	fp, #8
		*out_1++ = (q7_t) ch_1_out_1;
 80265cc:	9a03      	ldr	r2, [sp, #12]
 80265ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80265d2:	9b08      	ldr	r3, [sp, #32]
 80265d4:	f103 0308 	add.w	r3, r3, #8
 80265d8:	9308      	str	r3, [sp, #32]
		if(bit_starting_idx == 8){
 80265da:	d033      	beq.n	8026644 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x344>
 80265dc:	9a04      	ldr	r2, [sp, #16]
 80265de:	3202      	adds	r2, #2
 80265e0:	9204      	str	r2, [sp, #16]
 80265e2:	9a03      	ldr	r2, [sp, #12]
 80265e4:	3202      	adds	r2, #2
 80265e6:	9203      	str	r2, [sp, #12]
 80265e8:	9a07      	ldr	r2, [sp, #28]
 80265ea:	3208      	adds	r2, #8
 80265ec:	9207      	str	r2, [sp, #28]
	while (row_count) {
 80265ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80265f0:	429a      	cmp	r2, r3
 80265f2:	f47f aee2 	bne.w	80263ba <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0xba>
 80265f6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80265f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80265fa:	3001      	adds	r0, #1
 80265fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8026600:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026602:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8026604:	b01d      	add	sp, #116	; 0x74
 8026606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ch_1_out_1 > activation_max){
 802660a:	9806      	ldr	r0, [sp, #24]
 802660c:	9901      	ldr	r1, [sp, #4]
 802660e:	4283      	cmp	r3, r0
 8026610:	7809      	ldrb	r1, [r1, #0]
 8026612:	dc2e      	bgt.n	8026672 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x372>
			BIT_SET(*mask1, bit_starting_idx+1);
 8026614:	430a      	orrs	r2, r1
 8026616:	b252      	sxtb	r2, r2
 8026618:	e7d2      	b.n	80265c0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x2c0>
		if (ch_1_out_0 > activation_max){
 802661a:	9806      	ldr	r0, [sp, #24]
 802661c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802661e:	4283      	cmp	r3, r0
 8026620:	7809      	ldrb	r1, [r1, #0]
 8026622:	dc2a      	bgt.n	802667a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x37a>
			BIT_SET(*mask, bit_starting_idx+1);
 8026624:	4311      	orrs	r1, r2
 8026626:	b249      	sxtb	r1, r1
 8026628:	e7b0      	b.n	802658c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x28c>
 802662a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			BIT_CLEAR(*mask, bit_starting_idx);
 802662c:	ea24 0401 	bic.w	r4, r4, r1
 8026630:	b264      	sxtb	r4, r4
 8026632:	e771      	b.n	8026518 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x218>
		if (ch_0_out_1 > activation_max){
 8026634:	9c06      	ldr	r4, [sp, #24]
 8026636:	9a01      	ldr	r2, [sp, #4]
 8026638:	42a3      	cmp	r3, r4
 802663a:	7812      	ldrb	r2, [r2, #0]
 802663c:	dc17      	bgt.n	802666e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x36e>
			BIT_SET(*mask1, bit_starting_idx);
 802663e:	4311      	orrs	r1, r2
 8026640:	b249      	sxtb	r1, r1
 8026642:	e783      	b.n	802654c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x24c>
			mask++;
 8026644:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026646:	3201      	adds	r2, #1
 8026648:	922e      	str	r2, [sp, #184]	; 0xb8
			mask1++;
 802664a:	460a      	mov	r2, r1
 802664c:	3201      	adds	r2, #1
 802664e:	9201      	str	r2, [sp, #4]
 8026650:	9a04      	ldr	r2, [sp, #16]
 8026652:	3202      	adds	r2, #2
 8026654:	9204      	str	r2, [sp, #16]
 8026656:	9a03      	ldr	r2, [sp, #12]
 8026658:	3202      	adds	r2, #2
 802665a:	9203      	str	r2, [sp, #12]
 802665c:	9a07      	ldr	r2, [sp, #28]
 802665e:	3208      	adds	r2, #8
 8026660:	9207      	str	r2, [sp, #28]
	while (row_count) {
 8026662:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026664:	4293      	cmp	r3, r2
 8026666:	d0c6      	beq.n	80265f6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x2f6>
			bit_starting_idx = 0;
 8026668:	f04f 0b00 	mov.w	fp, #0
 802666c:	e6a5      	b.n	80263ba <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0xba>
 802666e:	4623      	mov	r3, r4
 8026670:	e769      	b.n	8026546 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x246>
 8026672:	4603      	mov	r3, r0
 8026674:	e7a1      	b.n	80265ba <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x2ba>
 8026676:	462a      	mov	r2, r5
 8026678:	e7d8      	b.n	802662c <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x32c>
 802667a:	4603      	mov	r3, r0
 802667c:	e783      	b.n	8026586 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x286>
		while (col_count) {
 802667e:	9a11      	ldr	r2, [sp, #68]	; 0x44
		q31_t ch_1_out_1 = *bias++;
 8026680:	4680      	mov	r8, r0
		while (col_count) {
 8026682:	9509      	str	r5, [sp, #36]	; 0x24
		q31_t ch_0_out_1 = *bias++;
 8026684:	4623      	mov	r3, r4
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8026686:	9d13      	ldr	r5, [sp, #76]	; 0x4c
		const q15_t *ip_b0 = input_b;
 8026688:	9e0e      	ldr	r6, [sp, #56]	; 0x38
		while (col_count) {
 802668a:	2a00      	cmp	r2, #0
 802668c:	f47f aeec 	bne.w	8026468 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x168>
 8026690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026692:	9205      	str	r2, [sp, #20]
 8026694:	e724      	b.n	80264e0 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask_partialCH_Multiple2+0x1e0>
 8026696:	bf00      	nop

08026698 <mat_mult_kernel3_input3_s8_s16_fpreq>:

q7_t* mat_mult_kernel3_input3_s8_s16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8026698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802669c:	b087      	sub	sp, #28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 802669e:	9815      	ldr	r0, [sp, #84]	; 0x54
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 80266a0:	9204      	str	r2, [sp, #16]
	q7_t *out_1 = out_0 + output_ch;
 80266a2:	4410      	add	r0, r2
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q15_t *ksrc = &kbuf[0];
	/* this loop over rows in A */
	while (row_count) {
 80266a4:	0852      	lsrs	r2, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 80266a6:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80266aa:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 80266ae:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
 80266b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
	while (row_count) {
 80266b4:	f000 8157 	beq.w	8026966 <mat_mult_kernel3_input3_s8_s16_fpreq+0x2ce>
 80266b8:	3308      	adds	r3, #8
 80266ba:	3a01      	subs	r2, #1
 80266bc:	f105 0410 	add.w	r4, r5, #16
 80266c0:	3002      	adds	r0, #2
 80266c2:	9300      	str	r3, [sp, #0]
 80266c4:	b292      	uxth	r2, r2
 80266c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80266c8:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 80266cc:	f105 0908 	add.w	r9, r5, #8
 80266d0:	9001      	str	r0, [sp, #4]
 80266d2:	3302      	adds	r3, #2
 80266d4:	9205      	str	r2, [sp, #20]
 80266d6:	9302      	str	r3, [sp, #8]
 80266d8:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 80266dc:	9303      	str	r3, [sp, #12]
 80266de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80266e0:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
		const q31_t *ip31_b0 = ip_b0;
		const q31_t *ip31_b1 = ip_b1;
		const float scale_0 = scales[0];
 80266e4:	9b00      	ldr	r3, [sp, #0]
 80266e6:	6808      	ldr	r0, [r1, #0]
 80266e8:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 80266ec:	ed53 7a01 	vldr	s15, [r3, #-4]
 80266f0:	f8d8 2000 	ldr.w	r2, [r8]
		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 80266f4:	f85e 4c6c 	ldr.w	r4, [lr, #-108]
 80266f8:	f859 5c08 	ldr.w	r5, [r9, #-8]
 80266fc:	fb24 5300 	smlad	r3, r4, r0, r5
 8026700:	fb24 5402 	smlad	r4, r4, r2, r5
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 8026704:	f85e 7c36 	ldr.w	r7, [lr, #-54]
 8026708:	f859 6c04 	ldr.w	r6, [r9, #-4]
 802670c:	fb27 6000 	smlad	r0, r7, r0, r6
 8026710:	fb27 6202 	smlad	r2, r7, r2, r6
 8026714:	684d      	ldr	r5, [r1, #4]
 8026716:	f8d8 7004 	ldr.w	r7, [r8, #4]
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 802671a:	f85e 6c68 	ldr.w	r6, [lr, #-104]
 802671e:	fb26 3305 	smlad	r3, r6, r5, r3
 8026722:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 8026726:	f85e 6c32 	ldr.w	r6, [lr, #-50]
 802672a:	fb26 0005 	smlad	r0, r6, r5, r0
 802672e:	fb26 2707 	smlad	r7, r6, r7, r2
 8026732:	688a      	ldr	r2, [r1, #8]
 8026734:	f8d8 c008 	ldr.w	ip, [r8, #8]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 8026738:	f85e 5c64 	ldr.w	r5, [lr, #-100]
 802673c:	fb25 3302 	smlad	r3, r5, r2, r3
 8026740:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 8026744:	f85e 6c2e 	ldr.w	r6, [lr, #-46]
 8026748:	fb26 0002 	smlad	r0, r6, r2, r0
 802674c:	fb26 760c 	smlad	r6, r6, ip, r7
 8026750:	68ca      	ldr	r2, [r1, #12]
 8026752:	f8d8 c00c 	ldr.w	ip, [r8, #12]
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 8026756:	f85e 5c60 	ldr.w	r5, [lr, #-96]
 802675a:	fb25 3302 	smlad	r3, r5, r2, r3
 802675e:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 8026762:	f85e 5c2a 	ldr.w	r5, [lr, #-42]
 8026766:	fb25 0002 	smlad	r0, r5, r2, r0
 802676a:	fb25 6c0c 	smlad	ip, r5, ip, r6
 802676e:	690e      	ldr	r6, [r1, #16]
 8026770:	f8d8 5010 	ldr.w	r5, [r8, #16]

		//------------------12
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[4], b0, ch_0_out_0);
 8026774:	f85e 2c5c 	ldr.w	r2, [lr, #-92]
 8026778:	fb22 3306 	smlad	r3, r2, r6, r3
 802677c:	fb22 4405 	smlad	r4, r2, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[4], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[4], b0, ch_1_out_0);
 8026780:	f85e 2c26 	ldr.w	r2, [lr, #-38]
 8026784:	fb22 0006 	smlad	r0, r2, r6, r0
 8026788:	fb22 c505 	smlad	r5, r2, r5, ip
 802678c:	694e      	ldr	r6, [r1, #20]
 802678e:	f8d8 2014 	ldr.w	r2, [r8, #20]
		ch_1_out_1 = __SMLAD(ksrc2_31[4], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[5], b0, ch_0_out_0);
 8026792:	f85e 7c58 	ldr.w	r7, [lr, #-88]
 8026796:	fb27 3306 	smlad	r3, r7, r6, r3
 802679a:	fb27 4402 	smlad	r4, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[5], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[5], b0, ch_1_out_0);
 802679e:	f85e 7c22 	ldr.w	r7, [lr, #-34]
 80267a2:	fb27 0006 	smlad	r0, r7, r6, r0
 80267a6:	fb27 5202 	smlad	r2, r7, r2, r5
 80267aa:	698d      	ldr	r5, [r1, #24]
 80267ac:	f8d8 7018 	ldr.w	r7, [r8, #24]
		ch_1_out_1 = __SMLAD(ksrc2_31[5], b1, ch_1_out_1);

		//------------------16
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[6], b0, ch_0_out_0);
 80267b0:	f85e 6c54 	ldr.w	r6, [lr, #-84]
 80267b4:	fb26 3305 	smlad	r3, r6, r5, r3
 80267b8:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[6], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[6], b0, ch_1_out_0);
 80267bc:	f85e 6c1e 	ldr.w	r6, [lr, #-30]
 80267c0:	fb26 0005 	smlad	r0, r6, r5, r0
 80267c4:	fb26 2707 	smlad	r7, r6, r7, r2
 80267c8:	69ca      	ldr	r2, [r1, #28]
 80267ca:	f8d8 c01c 	ldr.w	ip, [r8, #28]
		ch_1_out_1 = __SMLAD(ksrc2_31[6], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[7], b0, ch_0_out_0);
 80267ce:	f85e 5c50 	ldr.w	r5, [lr, #-80]
 80267d2:	fb25 3302 	smlad	r3, r5, r2, r3
 80267d6:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[7], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[7], b0, ch_1_out_0);
 80267da:	f85e 6c1a 	ldr.w	r6, [lr, #-26]
 80267de:	fb26 0002 	smlad	r0, r6, r2, r0
 80267e2:	fb26 760c 	smlad	r6, r6, ip, r7
 80267e6:	6a0a      	ldr	r2, [r1, #32]
 80267e8:	f8d8 c020 	ldr.w	ip, [r8, #32]
		ch_1_out_1 = __SMLAD(ksrc2_31[7], b1, ch_1_out_1);

		//------------------20
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[8], b0, ch_0_out_0);
 80267ec:	f85e 7c4c 	ldr.w	r7, [lr, #-76]
 80267f0:	fb27 3302 	smlad	r3, r7, r2, r3
 80267f4:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[8], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[8], b0, ch_1_out_0);
 80267f8:	f85e 5c16 	ldr.w	r5, [lr, #-22]
 80267fc:	fb25 0002 	smlad	r0, r5, r2, r0
 8026800:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8026804:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8026806:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
		ch_1_out_1 = __SMLAD(ksrc2_31[8], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[9], b0, ch_0_out_0);
 802680a:	f85e 7c48 	ldr.w	r7, [lr, #-72]
 802680e:	fb27 3306 	smlad	r3, r7, r6, r3
 8026812:	fb27 4405 	smlad	r4, r7, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[9], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[9], b0, ch_1_out_0);
 8026816:	f85e 2c12 	ldr.w	r2, [lr, #-18]
 802681a:	fb22 0006 	smlad	r0, r2, r6, r0
 802681e:	fb22 c505 	smlad	r5, r2, r5, ip
 8026822:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8026824:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
		ch_1_out_1 = __SMLAD(ksrc2_31[9], b1, ch_1_out_1);

		//------------------24
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[10], b0, ch_0_out_0);
 8026828:	f85e 7c44 	ldr.w	r7, [lr, #-68]
 802682c:	fb27 3306 	smlad	r3, r7, r6, r3
 8026830:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[10], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[10], b0, ch_1_out_0);
 8026834:	f85e 2c0e 	ldr.w	r2, [lr, #-14]
 8026838:	fb22 0006 	smlad	r0, r2, r6, r0
 802683c:	fb22 520c 	smlad	r2, r2, ip, r5
 8026840:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8026842:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
		ch_1_out_1 = __SMLAD(ksrc2_31[10], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[11], b0, ch_0_out_0);
 8026846:	f85e 7c40 	ldr.w	r7, [lr, #-64]
 802684a:	fb27 3306 	smlad	r3, r7, r6, r3
 802684e:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[11], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[11], b0, ch_1_out_0);
 8026852:	f85e 5c0a 	ldr.w	r5, [lr, #-10]
 8026856:	fb25 0006 	smlad	r0, r5, r6, r0
 802685a:	fb25 2c0c 	smlad	ip, r5, ip, r2
 802685e:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8026860:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
		ch_1_out_1 = __SMLAD(ksrc2_31[11], b1, ch_1_out_1);

		//------------------25,26,27
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[12], b0, ch_0_out_0);
 8026864:	f85e 7c3c 	ldr.w	r7, [lr, #-60]
 8026868:	fb27 3306 	smlad	r3, r7, r6, r3
 802686c:	fb27 4702 	smlad	r7, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
 8026870:	f85e 5c06 	ldr.w	r5, [lr, #-6]
 8026874:	fb25 0606 	smlad	r6, r5, r6, r0
 8026878:	fb25 c502 	smlad	r5, r5, r2, ip
 802687c:	9a00      	ldr	r2, [sp, #0]
 802687e:	f109 0908 	add.w	r9, r9, #8
		ch_1_out_1 = __SMLAD(ksrc2_31[12], b1, ch_1_out_1);
		q15_t _b0 = *ip_b0++;
		q15_t _b1 = *ip_b1++;

		ch_0_out_0 += ksrc[26] * _b0;
 8026882:	f93e 4c38 	ldrsh.w	r4, [lr, #-56]
 8026886:	f10e 0e6c 	add.w	lr, lr, #108	; 0x6c
		q15_t _b0 = *ip_b0++;
 802688a:	f9b1 0034 	ldrsh.w	r0, [r1, #52]	; 0x34
 802688e:	3208      	adds	r2, #8
		q15_t _b1 = *ip_b1++;
 8026890:	f9b8 c034 	ldrsh.w	ip, [r8, #52]	; 0x34
		ch_0_out_0 += ksrc[26] * _b0;
 8026894:	fb04 3300 	mla	r3, r4, r0, r3
 8026898:	9200      	str	r2, [sp, #0]
		ch_0_out_1 += ksrc[26] * _b1;
 802689a:	fb04 740c 	mla	r4, r4, ip, r7
		ch_1_out_0 += ksrc2[26] * _b0;
 802689e:	f93e 2c6e 	ldrsh.w	r2, [lr, #-110]
		ch_0_out_0 += ksrc[26] * _b0;
 80268a2:	ee05 3a10 	vmov	s10, r3
		ch_1_out_0 += ksrc2[26] * _b0;
 80268a6:	fb00 6002 	mla	r0, r0, r2, r6
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80268aa:	ee07 4a10 	vmov	s14, r4
		ch_1_out_1 += ksrc2[26] * _b1;
 80268ae:	fb0c 5202 	mla	r2, ip, r2, r5
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80268b2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80268b6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80268ba:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 += out_offset;
 80268be:	9d10      	ldr	r5, [sp, #64]	; 0x40
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80268c0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80268c4:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80268c8:	ee25 5a26 	vmul.f32	s10, s10, s13
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80268cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80268d0:	ee66 6a26 	vmul.f32	s13, s12, s13
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80268d4:	ee25 6aa7 	vmul.f32	s12, s11, s15
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80268d8:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80268dc:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80268e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80268e4:	ee17 4a10 	vmov	r4, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80268e8:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 80268ec:	442c      	add	r4, r5
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80268ee:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80268f2:	ee17 0a10 	vmov	r0, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80268f6:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80268fa:	4554      	cmp	r4, sl
		ch_1_out_1 += out_offset;
 80268fc:	442b      	add	r3, r5
		ch_0_out_1 += out_offset;
 80268fe:	4428      	add	r0, r5
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8026900:	ee17 2a10 	vmov	r2, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8026904:	bfb8      	it	lt
 8026906:	4654      	movlt	r4, sl
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8026908:	4550      	cmp	r0, sl
		ch_1_out_0 += out_offset;
 802690a:	442a      	add	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 802690c:	9d02      	ldr	r5, [sp, #8]
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 802690e:	bfb8      	it	lt
 8026910:	4650      	movlt	r0, sl
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8026912:	4552      	cmp	r2, sl
 8026914:	bfb8      	it	lt
 8026916:	4652      	movlt	r2, sl
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8026918:	455c      	cmp	r4, fp
 802691a:	bfa8      	it	ge
 802691c:	465c      	movge	r4, fp
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 802691e:	4553      	cmp	r3, sl
 8026920:	bfb8      	it	lt
 8026922:	4653      	movlt	r3, sl
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8026924:	4558      	cmp	r0, fp
		*out_0++ = (q7_t) ch_0_out_0;
 8026926:	f805 4c02 	strb.w	r4, [r5, #-2]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 802692a:	bfa8      	it	ge
 802692c:	4658      	movge	r0, fp
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 802692e:	455a      	cmp	r2, fp
		*out_1++ = (q7_t) ch_0_out_1;
 8026930:	9c01      	ldr	r4, [sp, #4]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8026932:	bfa8      	it	ge
 8026934:	465a      	movge	r2, fp
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8026936:	455b      	cmp	r3, fp
		*out_1++ = (q7_t) ch_0_out_1;
 8026938:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 802693c:	bfa8      	it	ge
 802693e:	465b      	movge	r3, fp
		*out_0++ = (q7_t) ch_1_out_0;
 8026940:	f805 2c01 	strb.w	r2, [r5, #-1]
 8026944:	1caa      	adds	r2, r5, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8026946:	f804 3c01 	strb.w	r3, [r4, #-1]
 802694a:	1ca3      	adds	r3, r4, #2
 802694c:	9202      	str	r2, [sp, #8]
 802694e:	9301      	str	r3, [sp, #4]
	while (row_count) {
 8026950:	9b03      	ldr	r3, [sp, #12]
 8026952:	454b      	cmp	r3, r9
 8026954:	f47f aec6 	bne.w	80266e4 <mat_mult_kernel3_input3_s8_s16_fpreq+0x4c>
 8026958:	9805      	ldr	r0, [sp, #20]
 802695a:	9b04      	ldr	r3, [sp, #16]
 802695c:	3001      	adds	r0, #1
 802695e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8026962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026964:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8026966:	b007      	add	sp, #28
 8026968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802696c <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 802696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026970:	b089      	sub	sp, #36	; 0x24
 8026972:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
 8026976:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 802697a:	9006      	str	r0, [sp, #24]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 802697c:	fb05 f00c 	mul.w	r0, r5, ip
{
 8026980:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8026984:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
	const int divider_half = ((sample_h * sample_w) / 2);
 8026988:	9001      	str	r0, [sp, #4]
 802698a:	1040      	asrs	r0, r0, #1
{
 802698c:	9107      	str	r1, [sp, #28]
	const int divider_half = ((sample_h * sample_w) / 2);
 802698e:	9003      	str	r0, [sp, #12]
	for(c = 0; c < input_c; c++){
 8026990:	2b00      	cmp	r3, #0
 8026992:	d053      	beq.n	8026a3c <avg_pooling+0xd0>
 8026994:	2900      	cmp	r1, #0
 8026996:	d051      	beq.n	8026a3c <avg_pooling+0xd0>
 8026998:	f1bb 0f00 	cmp.w	fp, #0
 802699c:	d04e      	beq.n	8026a3c <avg_pooling+0xd0>
 802699e:	fb02 fe03 	mul.w	lr, r2, r3
 80269a2:	2200      	movs	r2, #0
 80269a4:	9205      	str	r2, [sp, #20]
 80269a6:	fb03 f205 	mul.w	r2, r3, r5
 80269aa:	9202      	str	r2, [sp, #8]
		for(h = 0; h < output_h; h++){
 80269ac:	2200      	movs	r2, #0
 80269ae:	9204      	str	r2, [sp, #16]
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
				out = TN_MAX(out, out_activation_min);
				out = TN_MIN(out, out_activation_max);
				output[(w + h * output_w) * input_c + c] = out;
 80269b0:	fb02 f80b 	mul.w	r8, r2, fp
			for(w = 0; w < output_w; w++){
 80269b4:	f04f 0a00 	mov.w	sl, #0
					int height = sh + h * sample_h;
 80269b8:	fb02 f90c 	mul.w	r9, r2, ip
 80269bc:	9a05      	ldr	r2, [sp, #20]
 80269be:	fb03 2808 	mla	r8, r3, r8, r2
 80269c2:	fb0e 2909 	mla	r9, lr, r9, r2
 80269c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80269c8:	4490      	add	r8, r2
 80269ca:	9a06      	ldr	r2, [sp, #24]
 80269cc:	4491      	add	r9, r2
				for(sh = 0; sh < sample_h; sh++){
 80269ce:	f1bc 0f00 	cmp.w	ip, #0
 80269d2:	d036      	beq.n	8026a42 <avg_pooling+0xd6>
				int avg = 0;
 80269d4:	2000      	movs	r0, #0
				for(sh = 0; sh < sample_h; sh++){
 80269d6:	464f      	mov	r7, r9
 80269d8:	4606      	mov	r6, r0
					for(sw = 0; sw < sample_w; sw++){
 80269da:	b145      	cbz	r5, 80269ee <avg_pooling+0x82>
 80269dc:	4639      	mov	r1, r7
 80269de:	2200      	movs	r2, #0
 80269e0:	3201      	adds	r2, #1
						avg += input[(width + height * input_w) * input_c + c];
 80269e2:	f991 4000 	ldrsb.w	r4, [r1]
 80269e6:	4419      	add	r1, r3
					for(sw = 0; sw < sample_w; sw++){
 80269e8:	4295      	cmp	r5, r2
						avg += input[(width + height * input_w) * input_c + c];
 80269ea:	4420      	add	r0, r4
					for(sw = 0; sw < sample_w; sw++){
 80269ec:	d1f8      	bne.n	80269e0 <avg_pooling+0x74>
				for(sh = 0; sh < sample_h; sh++){
 80269ee:	3601      	adds	r6, #1
 80269f0:	4477      	add	r7, lr
 80269f2:	45b4      	cmp	ip, r6
 80269f4:	d1f1      	bne.n	80269da <avg_pooling+0x6e>
				if (avg > 0)
 80269f6:	2800      	cmp	r0, #0
 80269f8:	dd24      	ble.n	8026a44 <avg_pooling+0xd8>
					avg += divider_half;
 80269fa:	9a03      	ldr	r2, [sp, #12]
 80269fc:	4402      	add	r2, r0
 80269fe:	9902      	ldr	r1, [sp, #8]
			for(w = 0; w < output_w; w++){
 8026a00:	f10a 0a01 	add.w	sl, sl, #1
 8026a04:	4489      	add	r9, r1
				int out = avg / (sample_h * sample_w);
 8026a06:	9901      	ldr	r1, [sp, #4]
 8026a08:	fb92 f2f1 	sdiv	r2, r2, r1
				out = TN_MAX(out, out_activation_min);
 8026a0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8026a0e:	428a      	cmp	r2, r1
 8026a10:	bfb8      	it	lt
 8026a12:	460a      	movlt	r2, r1
				out = TN_MIN(out, out_activation_max);
 8026a14:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026a16:	428a      	cmp	r2, r1
 8026a18:	bfa8      	it	ge
 8026a1a:	460a      	movge	r2, r1
			for(w = 0; w < output_w; w++){
 8026a1c:	45da      	cmp	sl, fp
				output[(w + h * output_w) * input_c + c] = out;
 8026a1e:	f888 2000 	strb.w	r2, [r8]
 8026a22:	4498      	add	r8, r3
			for(w = 0; w < output_w; w++){
 8026a24:	d1d3      	bne.n	80269ce <avg_pooling+0x62>
		for(h = 0; h < output_h; h++){
 8026a26:	9a04      	ldr	r2, [sp, #16]
 8026a28:	9907      	ldr	r1, [sp, #28]
 8026a2a:	3201      	adds	r2, #1
 8026a2c:	428a      	cmp	r2, r1
 8026a2e:	9204      	str	r2, [sp, #16]
 8026a30:	dbbe      	blt.n	80269b0 <avg_pooling+0x44>
	for(c = 0; c < input_c; c++){
 8026a32:	9a05      	ldr	r2, [sp, #20]
 8026a34:	3201      	adds	r2, #1
 8026a36:	429a      	cmp	r2, r3
 8026a38:	9205      	str	r2, [sp, #20]
 8026a3a:	d1b7      	bne.n	80269ac <avg_pooling+0x40>
			}
		}
	}
}
 8026a3c:	b009      	add	sp, #36	; 0x24
 8026a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int avg = 0;
 8026a42:	4660      	mov	r0, ip
					avg -= divider_half;
 8026a44:	9a03      	ldr	r2, [sp, #12]
 8026a46:	1a82      	subs	r2, r0, r2
 8026a48:	e7d9      	b.n	80269fe <avg_pooling+0x92>
 8026a4a:	bf00      	nop

08026a4c <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8026a4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026a50:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8026a54:	07d1      	lsls	r1, r2, #31
 8026a56:	d503      	bpl.n	8026a60 <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8026a58:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8026a5c:	07d2      	lsls	r2, r2, #31
 8026a5e:	d401      	bmi.n	8026a64 <__io_putchar+0x18>
  
#include "stm32746g_discovery.h"

volatile int32_t ITM_RxBuffer;

int __io_putchar(int ch) { return ITM_SendChar(ch); }
 8026a60:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8026a62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8026a64:	681a      	ldr	r2, [r3, #0]
 8026a66:	2a00      	cmp	r2, #0
 8026a68:	d0fb      	beq.n	8026a62 <__io_putchar+0x16>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8026a6a:	b2c3      	uxtb	r3, r0
 8026a6c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8026a70:	7013      	strb	r3, [r2, #0]
 8026a72:	4770      	bx	lr

08026a74 <__io_getchar>:
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;                           /* no character available */

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 8026a74:	4b05      	ldr	r3, [pc, #20]	; (8026a8c <__io_getchar+0x18>)
 8026a76:	4a06      	ldr	r2, [pc, #24]	; (8026a90 <__io_getchar+0x1c>)
 8026a78:	6819      	ldr	r1, [r3, #0]
 8026a7a:	4291      	cmp	r1, r2
 8026a7c:	d002      	beq.n	8026a84 <__io_getchar+0x10>
  {
    ch = ITM_RxBuffer;
 8026a7e:	6818      	ldr	r0, [r3, #0]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 8026a80:	601a      	str	r2, [r3, #0]
 8026a82:	4770      	bx	lr
  int32_t ch = -1;                           /* no character available */
 8026a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

int __io_getchar(void) { return ITM_ReceiveChar(); }
 8026a88:	4770      	bx	lr
 8026a8a:	bf00      	nop
 8026a8c:	2003cfe0 	.word	0x2003cfe0
 8026a90:	5aa55aa5 	.word	0x5aa55aa5

08026a94 <_write>:

extern int errno;
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

int _write(int fd, const void *buffer, unsigned int count) {
 8026a94:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for (i = 0; i < count; i++) {
 8026a96:	4616      	mov	r6, r2
 8026a98:	b142      	cbz	r2, 8026aac <_write+0x18>
 8026a9a:	188d      	adds	r5, r1, r2
 8026a9c:	1e4c      	subs	r4, r1, #1
 8026a9e:	3d01      	subs	r5, #1
    __io_putchar(((char *)buffer)[i]);
 8026aa0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8026aa4:	f7ff ffd2 	bl	8026a4c <__io_putchar>
  for (i = 0; i < count; i++) {
 8026aa8:	42ac      	cmp	r4, r5
 8026aaa:	d1f9      	bne.n	8026aa0 <_write+0xc>
  }

  return count;
}
 8026aac:	4630      	mov	r0, r6
 8026aae:	bd70      	pop	{r4, r5, r6, pc}

08026ab0 <_read>:

int _read(int fd, void *buffer, unsigned int count) {
 8026ab0:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for (i = 0; i < count; i++) {
 8026ab2:	4616      	mov	r6, r2
 8026ab4:	b142      	cbz	r2, 8026ac8 <_read+0x18>
 8026ab6:	188d      	adds	r5, r1, r2
 8026ab8:	1e4c      	subs	r4, r1, #1
 8026aba:	3d01      	subs	r5, #1
    ((char *)buffer)[i] = __io_getchar();
 8026abc:	f7ff ffda 	bl	8026a74 <__io_getchar>
 8026ac0:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < count; i++) {
 8026ac4:	42ac      	cmp	r4, r5
 8026ac6:	d1f9      	bne.n	8026abc <_read+0xc>
  }

  return count;
}
 8026ac8:	4630      	mov	r0, r6
 8026aca:	bd70      	pop	{r4, r5, r6, pc}

08026acc <_close>:

int _close(int fd) { return -1; }
 8026acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026ad0:	4770      	bx	lr
 8026ad2:	bf00      	nop

08026ad4 <_fstat>:

int _fstat(int fd, void *buffer) { return -1; }
 8026ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026ad8:	4770      	bx	lr
 8026ada:	bf00      	nop

08026adc <_isatty>:
 8026adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026ae0:	4770      	bx	lr
 8026ae2:	bf00      	nop

08026ae4 <_lseek>:

int _isatty(int fd) { return -1; }

long _lseek(int fd, long offset, int origin) { return -1; }
 8026ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026ae8:	4770      	bx	lr
 8026aea:	bf00      	nop

08026aec <_exit>:

void _exit(int status) {}
 8026aec:	4770      	bx	lr
 8026aee:	bf00      	nop

08026af0 <_ZdaPv>:
 8026af0:	f000 b828 	b.w	8026b44 <_ZdlPv>

08026af4 <_Znaj>:
 8026af4:	f000 b800 	b.w	8026af8 <_Znwj>

08026af8 <_Znwj>:
 8026af8:	b510      	push	{r4, lr}
 8026afa:	2800      	cmp	r0, #0
 8026afc:	bf14      	ite	ne
 8026afe:	4604      	movne	r4, r0
 8026b00:	2401      	moveq	r4, #1
 8026b02:	4620      	mov	r0, r4
 8026b04:	f001 ff8a 	bl	8028a1c <malloc>
 8026b08:	b100      	cbz	r0, 8026b0c <_Znwj+0x14>
 8026b0a:	bd10      	pop	{r4, pc}
 8026b0c:	f000 f812 	bl	8026b34 <_ZSt15get_new_handlerv>
 8026b10:	b108      	cbz	r0, 8026b16 <_Znwj+0x1e>
 8026b12:	4780      	blx	r0
 8026b14:	e7f5      	b.n	8026b02 <_Znwj+0xa>
 8026b16:	2004      	movs	r0, #4
 8026b18:	f000 f890 	bl	8026c3c <__cxa_allocate_exception>
 8026b1c:	4b02      	ldr	r3, [pc, #8]	; (8026b28 <_Znwj+0x30>)
 8026b1e:	6003      	str	r3, [r0, #0]
 8026b20:	4a02      	ldr	r2, [pc, #8]	; (8026b2c <_Znwj+0x34>)
 8026b22:	4903      	ldr	r1, [pc, #12]	; (8026b30 <_Znwj+0x38>)
 8026b24:	f000 f932 	bl	8026d8c <__cxa_throw>
 8026b28:	080b3784 	.word	0x080b3784
 8026b2c:	08026cbd 	.word	0x08026cbd
 8026b30:	080b3760 	.word	0x080b3760

08026b34 <_ZSt15get_new_handlerv>:
 8026b34:	4b02      	ldr	r3, [pc, #8]	; (8026b40 <_ZSt15get_new_handlerv+0xc>)
 8026b36:	6818      	ldr	r0, [r3, #0]
 8026b38:	f3bf 8f5b 	dmb	ish
 8026b3c:	4770      	bx	lr
 8026b3e:	bf00      	nop
 8026b40:	2003cf28 	.word	0x2003cf28

08026b44 <_ZdlPv>:
 8026b44:	f001 bf72 	b.w	8028a2c <free>

08026b48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 8026b48:	b4f0      	push	{r4, r5, r6, r7}
 8026b4a:	4c22      	ldr	r4, [pc, #136]	; (8026bd4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 8026b4c:	6863      	ldr	r3, [r4, #4]
 8026b4e:	f1a0 0608 	sub.w	r6, r0, #8
 8026b52:	b31b      	cbz	r3, 8026b9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 8026b54:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8026b58:	19f5      	adds	r5, r6, r7
 8026b5a:	42ab      	cmp	r3, r5
 8026b5c:	d81e      	bhi.n	8026b9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 8026b5e:	d022      	beq.n	8026ba6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 8026b60:	6859      	ldr	r1, [r3, #4]
 8026b62:	2900      	cmp	r1, #0
 8026b64:	d031      	beq.n	8026bca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 8026b66:	428d      	cmp	r5, r1
 8026b68:	d303      	bcc.n	8026b72 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 8026b6a:	e02e      	b.n	8026bca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 8026b6c:	4295      	cmp	r5, r2
 8026b6e:	d205      	bcs.n	8026b7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8026b70:	4611      	mov	r1, r2
 8026b72:	684a      	ldr	r2, [r1, #4]
 8026b74:	1d1c      	adds	r4, r3, #4
 8026b76:	460b      	mov	r3, r1
 8026b78:	2a00      	cmp	r2, #0
 8026b7a:	d1f7      	bne.n	8026b6c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 8026b7c:	4295      	cmp	r5, r2
 8026b7e:	d01c      	beq.n	8026bba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 8026b80:	6823      	ldr	r3, [r4, #0]
 8026b82:	681a      	ldr	r2, [r3, #0]
 8026b84:	1899      	adds	r1, r3, r2
 8026b86:	428e      	cmp	r6, r1
 8026b88:	d01c      	beq.n	8026bc4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 8026b8a:	685b      	ldr	r3, [r3, #4]
 8026b8c:	f840 3c04 	str.w	r3, [r0, #-4]
 8026b90:	6823      	ldr	r3, [r4, #0]
 8026b92:	f840 7c08 	str.w	r7, [r0, #-8]
 8026b96:	605e      	str	r6, [r3, #4]
 8026b98:	bcf0      	pop	{r4, r5, r6, r7}
 8026b9a:	4770      	bx	lr
 8026b9c:	f840 3c04 	str.w	r3, [r0, #-4]
 8026ba0:	6066      	str	r6, [r4, #4]
 8026ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8026ba4:	4770      	bx	lr
 8026ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026baa:	4417      	add	r7, r2
 8026bac:	f840 7c08 	str.w	r7, [r0, #-8]
 8026bb0:	f840 3c04 	str.w	r3, [r0, #-4]
 8026bb4:	6066      	str	r6, [r4, #4]
 8026bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8026bb8:	4770      	bx	lr
 8026bba:	e9d5 3200 	ldrd	r3, r2, [r5]
 8026bbe:	604a      	str	r2, [r1, #4]
 8026bc0:	441f      	add	r7, r3
 8026bc2:	e7dd      	b.n	8026b80 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 8026bc4:	4417      	add	r7, r2
 8026bc6:	601f      	str	r7, [r3, #0]
 8026bc8:	e7eb      	b.n	8026ba2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 8026bca:	460a      	mov	r2, r1
 8026bcc:	3404      	adds	r4, #4
 8026bce:	4619      	mov	r1, r3
 8026bd0:	e7d4      	b.n	8026b7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8026bd2:	bf00      	nop
 8026bd4:	2003cf2c 	.word	0x2003cf2c

08026bd8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8026bd8:	b430      	push	{r4, r5}
 8026bda:	4c17      	ldr	r4, [pc, #92]	; (8026c38 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 8026bdc:	f100 0208 	add.w	r2, r0, #8
 8026be0:	6863      	ldr	r3, [r4, #4]
 8026be2:	2a08      	cmp	r2, #8
 8026be4:	bf38      	it	cc
 8026be6:	2208      	movcc	r2, #8
 8026be8:	b303      	cbz	r3, 8026c2c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 8026bea:	3207      	adds	r2, #7
 8026bec:	6819      	ldr	r1, [r3, #0]
 8026bee:	f022 0207 	bic.w	r2, r2, #7
 8026bf2:	428a      	cmp	r2, r1
 8026bf4:	d804      	bhi.n	8026c00 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 8026bf6:	e01b      	b.n	8026c30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8026bf8:	6801      	ldr	r1, [r0, #0]
 8026bfa:	428a      	cmp	r2, r1
 8026bfc:	d905      	bls.n	8026c0a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 8026bfe:	4603      	mov	r3, r0
 8026c00:	6858      	ldr	r0, [r3, #4]
 8026c02:	2800      	cmp	r0, #0
 8026c04:	d1f8      	bne.n	8026bf8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 8026c06:	bc30      	pop	{r4, r5}
 8026c08:	4770      	bx	lr
 8026c0a:	3304      	adds	r3, #4
 8026c0c:	1a8c      	subs	r4, r1, r2
 8026c0e:	2c07      	cmp	r4, #7
 8026c10:	6845      	ldr	r5, [r0, #4]
 8026c12:	d908      	bls.n	8026c26 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 8026c14:	1881      	adds	r1, r0, r2
 8026c16:	604d      	str	r5, [r1, #4]
 8026c18:	5084      	str	r4, [r0, r2]
 8026c1a:	6818      	ldr	r0, [r3, #0]
 8026c1c:	6002      	str	r2, [r0, #0]
 8026c1e:	6019      	str	r1, [r3, #0]
 8026c20:	3008      	adds	r0, #8
 8026c22:	bc30      	pop	{r4, r5}
 8026c24:	4770      	bx	lr
 8026c26:	6001      	str	r1, [r0, #0]
 8026c28:	601d      	str	r5, [r3, #0]
 8026c2a:	e7f9      	b.n	8026c20 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8026c2c:	4618      	mov	r0, r3
 8026c2e:	e7ea      	b.n	8026c06 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 8026c30:	4618      	mov	r0, r3
 8026c32:	1d23      	adds	r3, r4, #4
 8026c34:	e7ea      	b.n	8026c0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 8026c36:	bf00      	nop
 8026c38:	2003cf2c 	.word	0x2003cf2c

08026c3c <__cxa_allocate_exception>:
 8026c3c:	b510      	push	{r4, lr}
 8026c3e:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8026c42:	4620      	mov	r0, r4
 8026c44:	f001 feea 	bl	8028a1c <malloc>
 8026c48:	b138      	cbz	r0, 8026c5a <__cxa_allocate_exception+0x1e>
 8026c4a:	4603      	mov	r3, r0
 8026c4c:	2280      	movs	r2, #128	; 0x80
 8026c4e:	2100      	movs	r1, #0
 8026c50:	4618      	mov	r0, r3
 8026c52:	f002 f95c 	bl	8028f0e <memset>
 8026c56:	3080      	adds	r0, #128	; 0x80
 8026c58:	bd10      	pop	{r4, pc}
 8026c5a:	4620      	mov	r0, r4
 8026c5c:	f7ff ffbc 	bl	8026bd8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 8026c60:	4603      	mov	r3, r0
 8026c62:	2800      	cmp	r0, #0
 8026c64:	d1f2      	bne.n	8026c4c <__cxa_allocate_exception+0x10>
 8026c66:	f000 fa09 	bl	802707c <_ZSt9terminatev>
 8026c6a:	bf00      	nop

08026c6c <__cxa_free_exception>:
 8026c6c:	4a06      	ldr	r2, [pc, #24]	; (8026c88 <__cxa_free_exception+0x1c>)
 8026c6e:	6893      	ldr	r3, [r2, #8]
 8026c70:	3880      	subs	r0, #128	; 0x80
 8026c72:	4298      	cmp	r0, r3
 8026c74:	d903      	bls.n	8026c7e <__cxa_free_exception+0x12>
 8026c76:	68d2      	ldr	r2, [r2, #12]
 8026c78:	4413      	add	r3, r2
 8026c7a:	4298      	cmp	r0, r3
 8026c7c:	d301      	bcc.n	8026c82 <__cxa_free_exception+0x16>
 8026c7e:	f001 bed5 	b.w	8028a2c <free>
 8026c82:	f7ff bf61 	b.w	8026b48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 8026c86:	bf00      	nop
 8026c88:	2003cf2c 	.word	0x2003cf2c

08026c8c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8026c8c:	b538      	push	{r3, r4, r5, lr}
 8026c8e:	4c08      	ldr	r4, [pc, #32]	; (8026cb0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8026c90:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8026c94:	4628      	mov	r0, r5
 8026c96:	60e5      	str	r5, [r4, #12]
 8026c98:	f001 fec0 	bl	8028a1c <malloc>
 8026c9c:	60a0      	str	r0, [r4, #8]
 8026c9e:	b120      	cbz	r0, 8026caa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8026ca0:	2300      	movs	r3, #0
 8026ca2:	6060      	str	r0, [r4, #4]
 8026ca4:	e9c0 5300 	strd	r5, r3, [r0]
 8026ca8:	bd38      	pop	{r3, r4, r5, pc}
 8026caa:	60e0      	str	r0, [r4, #12]
 8026cac:	6060      	str	r0, [r4, #4]
 8026cae:	bd38      	pop	{r3, r4, r5, pc}
 8026cb0:	2003cf2c 	.word	0x2003cf2c

08026cb4 <_ZNKSt9bad_alloc4whatEv>:
 8026cb4:	4800      	ldr	r0, [pc, #0]	; (8026cb8 <_ZNKSt9bad_alloc4whatEv+0x4>)
 8026cb6:	4770      	bx	lr
 8026cb8:	080b3750 	.word	0x080b3750

08026cbc <_ZNSt9bad_allocD1Ev>:
 8026cbc:	b510      	push	{r4, lr}
 8026cbe:	4b03      	ldr	r3, [pc, #12]	; (8026ccc <_ZNSt9bad_allocD1Ev+0x10>)
 8026cc0:	6003      	str	r3, [r0, #0]
 8026cc2:	4604      	mov	r4, r0
 8026cc4:	f000 fa02 	bl	80270cc <_ZNSt9exceptionD1Ev>
 8026cc8:	4620      	mov	r0, r4
 8026cca:	bd10      	pop	{r4, pc}
 8026ccc:	080b3784 	.word	0x080b3784

08026cd0 <_ZNSt9bad_allocD0Ev>:
 8026cd0:	b510      	push	{r4, lr}
 8026cd2:	4b05      	ldr	r3, [pc, #20]	; (8026ce8 <_ZNSt9bad_allocD0Ev+0x18>)
 8026cd4:	6003      	str	r3, [r0, #0]
 8026cd6:	4604      	mov	r4, r0
 8026cd8:	f000 f9f8 	bl	80270cc <_ZNSt9exceptionD1Ev>
 8026cdc:	4620      	mov	r0, r4
 8026cde:	2104      	movs	r1, #4
 8026ce0:	f000 f804 	bl	8026cec <_ZdlPvj>
 8026ce4:	4620      	mov	r0, r4
 8026ce6:	bd10      	pop	{r4, pc}
 8026ce8:	080b3784 	.word	0x080b3784

08026cec <_ZdlPvj>:
 8026cec:	f7ff bf2a 	b.w	8026b44 <_ZdlPv>

08026cf0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8026cf0:	2801      	cmp	r0, #1
 8026cf2:	b510      	push	{r4, lr}
 8026cf4:	d81a      	bhi.n	8026d2c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 8026cf6:	f3bf 8f5b 	dmb	ish
 8026cfa:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8026cfe:	e853 2f00 	ldrex	r2, [r3]
 8026d02:	3a01      	subs	r2, #1
 8026d04:	e843 2000 	strex	r0, r2, [r3]
 8026d08:	2800      	cmp	r0, #0
 8026d0a:	d1f8      	bne.n	8026cfe <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8026d0c:	f3bf 8f5b 	dmb	ish
 8026d10:	b95a      	cbnz	r2, 8026d2a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8026d12:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8026d16:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8026d1a:	b10b      	cbz	r3, 8026d20 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 8026d1c:	4620      	mov	r0, r4
 8026d1e:	4798      	blx	r3
 8026d20:	4620      	mov	r0, r4
 8026d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026d26:	f7ff bfa1 	b.w	8026c6c <__cxa_free_exception>
 8026d2a:	bd10      	pop	{r4, pc}
 8026d2c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8026d30:	f000 f990 	bl	8027054 <_ZN10__cxxabiv111__terminateEPFvvE>

08026d34 <__cxa_init_primary_exception>:
 8026d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d36:	2500      	movs	r5, #0
 8026d38:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8026d3c:	f840 5c80 	str.w	r5, [r0, #-128]
 8026d40:	4604      	mov	r4, r0
 8026d42:	f000 f9bb 	bl	80270bc <_ZSt14get_unexpectedv>
 8026d46:	f844 0c70 	str.w	r0, [r4, #-112]
 8026d4a:	f000 f9af 	bl	80270ac <_ZSt13get_terminatev>
 8026d4e:	2347      	movs	r3, #71	; 0x47
 8026d50:	2243      	movs	r2, #67	; 0x43
 8026d52:	274e      	movs	r7, #78	; 0x4e
 8026d54:	2655      	movs	r6, #85	; 0x55
 8026d56:	490c      	ldr	r1, [pc, #48]	; (8026d88 <__cxa_init_primary_exception+0x54>)
 8026d58:	f804 3c58 	strb.w	r3, [r4, #-88]
 8026d5c:	232b      	movs	r3, #43	; 0x2b
 8026d5e:	f804 5c51 	strb.w	r5, [r4, #-81]
 8026d62:	f804 7c57 	strb.w	r7, [r4, #-87]
 8026d66:	f804 6c56 	strb.w	r6, [r4, #-86]
 8026d6a:	f844 1c50 	str.w	r1, [r4, #-80]
 8026d6e:	f804 2c55 	strb.w	r2, [r4, #-85]
 8026d72:	f804 2c54 	strb.w	r2, [r4, #-84]
 8026d76:	f804 3c53 	strb.w	r3, [r4, #-83]
 8026d7a:	f804 3c52 	strb.w	r3, [r4, #-82]
 8026d7e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8026d82:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8026d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026d88:	08026cf1 	.word	0x08026cf1

08026d8c <__cxa_throw>:
 8026d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d8e:	4605      	mov	r5, r0
 8026d90:	460e      	mov	r6, r1
 8026d92:	4617      	mov	r7, r2
 8026d94:	f000 fb2c 	bl	80273f0 <__cxa_get_globals>
 8026d98:	6843      	ldr	r3, [r0, #4]
 8026d9a:	4604      	mov	r4, r0
 8026d9c:	3301      	adds	r3, #1
 8026d9e:	463a      	mov	r2, r7
 8026da0:	4631      	mov	r1, r6
 8026da2:	6063      	str	r3, [r4, #4]
 8026da4:	4628      	mov	r0, r5
 8026da6:	f7ff ffc5 	bl	8026d34 <__cxa_init_primary_exception>
 8026daa:	4604      	mov	r4, r0
 8026dac:	2301      	movs	r3, #1
 8026dae:	f844 3b28 	str.w	r3, [r4], #40
 8026db2:	4620      	mov	r0, r4
 8026db4:	f7e1 fbd2 	bl	800855c <_Unwind_RaiseException>
 8026db8:	4620      	mov	r0, r4
 8026dba:	f000 f83b 	bl	8026e34 <__cxa_begin_catch>
 8026dbe:	f000 f95d 	bl	802707c <_ZSt9terminatev>
 8026dc2:	bf00      	nop

08026dc4 <__cxa_rethrow>:
 8026dc4:	b510      	push	{r4, lr}
 8026dc6:	f000 fb13 	bl	80273f0 <__cxa_get_globals>
 8026dca:	e9d0 4200 	ldrd	r4, r2, [r0]
 8026dce:	3201      	adds	r2, #1
 8026dd0:	6042      	str	r2, [r0, #4]
 8026dd2:	b164      	cbz	r4, 8026dee <__cxa_rethrow+0x2a>
 8026dd4:	f894 2020 	ldrb.w	r2, [r4, #32]
 8026dd8:	2a47      	cmp	r2, #71	; 0x47
 8026dda:	d00a      	beq.n	8026df2 <__cxa_rethrow+0x2e>
 8026ddc:	2200      	movs	r2, #0
 8026dde:	6002      	str	r2, [r0, #0]
 8026de0:	3420      	adds	r4, #32
 8026de2:	4620      	mov	r0, r4
 8026de4:	f7e1 fbde 	bl	80085a4 <_Unwind_Resume_or_Rethrow>
 8026de8:	4620      	mov	r0, r4
 8026dea:	f000 f823 	bl	8026e34 <__cxa_begin_catch>
 8026dee:	f000 f945 	bl	802707c <_ZSt9terminatev>
 8026df2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8026df6:	2a4e      	cmp	r2, #78	; 0x4e
 8026df8:	d1f0      	bne.n	8026ddc <__cxa_rethrow+0x18>
 8026dfa:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8026dfe:	2a55      	cmp	r2, #85	; 0x55
 8026e00:	d1ec      	bne.n	8026ddc <__cxa_rethrow+0x18>
 8026e02:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8026e06:	2a43      	cmp	r2, #67	; 0x43
 8026e08:	d1e8      	bne.n	8026ddc <__cxa_rethrow+0x18>
 8026e0a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8026e0e:	2a43      	cmp	r2, #67	; 0x43
 8026e10:	d1e4      	bne.n	8026ddc <__cxa_rethrow+0x18>
 8026e12:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8026e16:	2a2b      	cmp	r2, #43	; 0x2b
 8026e18:	d1e0      	bne.n	8026ddc <__cxa_rethrow+0x18>
 8026e1a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8026e1e:	2a2b      	cmp	r2, #43	; 0x2b
 8026e20:	d1dc      	bne.n	8026ddc <__cxa_rethrow+0x18>
 8026e22:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8026e26:	2a01      	cmp	r2, #1
 8026e28:	d8d8      	bhi.n	8026ddc <__cxa_rethrow+0x18>
 8026e2a:	6962      	ldr	r2, [r4, #20]
 8026e2c:	4252      	negs	r2, r2
 8026e2e:	6162      	str	r2, [r4, #20]
 8026e30:	e7d6      	b.n	8026de0 <__cxa_rethrow+0x1c>
 8026e32:	bf00      	nop

08026e34 <__cxa_begin_catch>:
 8026e34:	b538      	push	{r3, r4, r5, lr}
 8026e36:	4604      	mov	r4, r0
 8026e38:	f000 fada 	bl	80273f0 <__cxa_get_globals>
 8026e3c:	7822      	ldrb	r2, [r4, #0]
 8026e3e:	6803      	ldr	r3, [r0, #0]
 8026e40:	2a47      	cmp	r2, #71	; 0x47
 8026e42:	f1a4 0120 	sub.w	r1, r4, #32
 8026e46:	d004      	beq.n	8026e52 <__cxa_begin_catch+0x1e>
 8026e48:	bb8b      	cbnz	r3, 8026eae <__cxa_begin_catch+0x7a>
 8026e4a:	461c      	mov	r4, r3
 8026e4c:	6001      	str	r1, [r0, #0]
 8026e4e:	4620      	mov	r0, r4
 8026e50:	bd38      	pop	{r3, r4, r5, pc}
 8026e52:	7862      	ldrb	r2, [r4, #1]
 8026e54:	2a4e      	cmp	r2, #78	; 0x4e
 8026e56:	d1f7      	bne.n	8026e48 <__cxa_begin_catch+0x14>
 8026e58:	78a2      	ldrb	r2, [r4, #2]
 8026e5a:	2a55      	cmp	r2, #85	; 0x55
 8026e5c:	d1f4      	bne.n	8026e48 <__cxa_begin_catch+0x14>
 8026e5e:	78e2      	ldrb	r2, [r4, #3]
 8026e60:	2a43      	cmp	r2, #67	; 0x43
 8026e62:	d1f1      	bne.n	8026e48 <__cxa_begin_catch+0x14>
 8026e64:	7922      	ldrb	r2, [r4, #4]
 8026e66:	2a43      	cmp	r2, #67	; 0x43
 8026e68:	d1ee      	bne.n	8026e48 <__cxa_begin_catch+0x14>
 8026e6a:	7962      	ldrb	r2, [r4, #5]
 8026e6c:	2a2b      	cmp	r2, #43	; 0x2b
 8026e6e:	d1eb      	bne.n	8026e48 <__cxa_begin_catch+0x14>
 8026e70:	79a2      	ldrb	r2, [r4, #6]
 8026e72:	2a2b      	cmp	r2, #43	; 0x2b
 8026e74:	d1e8      	bne.n	8026e48 <__cxa_begin_catch+0x14>
 8026e76:	79e2      	ldrb	r2, [r4, #7]
 8026e78:	2a01      	cmp	r2, #1
 8026e7a:	d8e5      	bhi.n	8026e48 <__cxa_begin_catch+0x14>
 8026e7c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8026e80:	2a00      	cmp	r2, #0
 8026e82:	db11      	blt.n	8026ea8 <__cxa_begin_catch+0x74>
 8026e84:	3201      	adds	r2, #1
 8026e86:	6845      	ldr	r5, [r0, #4]
 8026e88:	f844 2c0c 	str.w	r2, [r4, #-12]
 8026e8c:	428b      	cmp	r3, r1
 8026e8e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8026e92:	6045      	str	r5, [r0, #4]
 8026e94:	bf1c      	itt	ne
 8026e96:	f844 3c10 	strne.w	r3, [r4, #-16]
 8026e9a:	6001      	strne	r1, [r0, #0]
 8026e9c:	4620      	mov	r0, r4
 8026e9e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8026ea0:	f7e0 ffaa 	bl	8007df8 <_Unwind_Complete>
 8026ea4:	4620      	mov	r0, r4
 8026ea6:	bd38      	pop	{r3, r4, r5, pc}
 8026ea8:	f1c2 0201 	rsb	r2, r2, #1
 8026eac:	e7eb      	b.n	8026e86 <__cxa_begin_catch+0x52>
 8026eae:	f000 f8e5 	bl	802707c <_ZSt9terminatev>
 8026eb2:	bf00      	nop

08026eb4 <__cxa_end_catch>:
 8026eb4:	b508      	push	{r3, lr}
 8026eb6:	f000 fa97 	bl	80273e8 <__cxa_get_globals_fast>
 8026eba:	4602      	mov	r2, r0
 8026ebc:	6800      	ldr	r0, [r0, #0]
 8026ebe:	b370      	cbz	r0, 8026f1e <__cxa_end_catch+0x6a>
 8026ec0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8026ec4:	2b47      	cmp	r3, #71	; 0x47
 8026ec6:	d006      	beq.n	8026ed6 <__cxa_end_catch+0x22>
 8026ec8:	2300      	movs	r3, #0
 8026eca:	6013      	str	r3, [r2, #0]
 8026ecc:	3020      	adds	r0, #32
 8026ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8026ed2:	f7e0 bf93 	b.w	8007dfc <_Unwind_DeleteException>
 8026ed6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8026eda:	2b4e      	cmp	r3, #78	; 0x4e
 8026edc:	d1f4      	bne.n	8026ec8 <__cxa_end_catch+0x14>
 8026ede:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8026ee2:	2b55      	cmp	r3, #85	; 0x55
 8026ee4:	d1f0      	bne.n	8026ec8 <__cxa_end_catch+0x14>
 8026ee6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8026eea:	2b43      	cmp	r3, #67	; 0x43
 8026eec:	d1ec      	bne.n	8026ec8 <__cxa_end_catch+0x14>
 8026eee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8026ef2:	2b43      	cmp	r3, #67	; 0x43
 8026ef4:	d1e8      	bne.n	8026ec8 <__cxa_end_catch+0x14>
 8026ef6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8026efa:	2b2b      	cmp	r3, #43	; 0x2b
 8026efc:	d1e4      	bne.n	8026ec8 <__cxa_end_catch+0x14>
 8026efe:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8026f02:	2b2b      	cmp	r3, #43	; 0x2b
 8026f04:	d1e0      	bne.n	8026ec8 <__cxa_end_catch+0x14>
 8026f06:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8026f0a:	2b01      	cmp	r3, #1
 8026f0c:	d8dc      	bhi.n	8026ec8 <__cxa_end_catch+0x14>
 8026f0e:	6943      	ldr	r3, [r0, #20]
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	db05      	blt.n	8026f20 <__cxa_end_catch+0x6c>
 8026f14:	3b01      	subs	r3, #1
 8026f16:	2b00      	cmp	r3, #0
 8026f18:	d007      	beq.n	8026f2a <__cxa_end_catch+0x76>
 8026f1a:	db0d      	blt.n	8026f38 <__cxa_end_catch+0x84>
 8026f1c:	6143      	str	r3, [r0, #20]
 8026f1e:	bd08      	pop	{r3, pc}
 8026f20:	3301      	adds	r3, #1
 8026f22:	d1fb      	bne.n	8026f1c <__cxa_end_catch+0x68>
 8026f24:	6901      	ldr	r1, [r0, #16]
 8026f26:	6011      	str	r1, [r2, #0]
 8026f28:	e7f8      	b.n	8026f1c <__cxa_end_catch+0x68>
 8026f2a:	6903      	ldr	r3, [r0, #16]
 8026f2c:	6013      	str	r3, [r2, #0]
 8026f2e:	3020      	adds	r0, #32
 8026f30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8026f34:	f7e0 bf62 	b.w	8007dfc <_Unwind_DeleteException>
 8026f38:	f000 f8a0 	bl	802707c <_ZSt9terminatev>

08026f3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8026f3c:	b510      	push	{r4, lr}
 8026f3e:	4b03      	ldr	r3, [pc, #12]	; (8026f4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8026f40:	6003      	str	r3, [r0, #0]
 8026f42:	4604      	mov	r4, r0
 8026f44:	f000 fdb2 	bl	8027aac <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8026f48:	4620      	mov	r0, r4
 8026f4a:	bd10      	pop	{r4, pc}
 8026f4c:	080b37cc 	.word	0x080b37cc

08026f50 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8026f50:	b510      	push	{r4, lr}
 8026f52:	4b05      	ldr	r3, [pc, #20]	; (8026f68 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8026f54:	6003      	str	r3, [r0, #0]
 8026f56:	4604      	mov	r4, r0
 8026f58:	f000 fda8 	bl	8027aac <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8026f5c:	4620      	mov	r0, r4
 8026f5e:	210c      	movs	r1, #12
 8026f60:	f7ff fec4 	bl	8026cec <_ZdlPvj>
 8026f64:	4620      	mov	r0, r4
 8026f66:	bd10      	pop	{r4, pc}
 8026f68:	080b37cc 	.word	0x080b37cc

08026f6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8026f6c:	b570      	push	{r4, r5, r6, lr}
 8026f6e:	b082      	sub	sp, #8
 8026f70:	460e      	mov	r6, r1
 8026f72:	9c06      	ldr	r4, [sp, #24]
 8026f74:	4294      	cmp	r4, r2
 8026f76:	4605      	mov	r5, r0
 8026f78:	d009      	beq.n	8026f8e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 8026f7a:	68a8      	ldr	r0, [r5, #8]
 8026f7c:	6805      	ldr	r5, [r0, #0]
 8026f7e:	9406      	str	r4, [sp, #24]
 8026f80:	6a2c      	ldr	r4, [r5, #32]
 8026f82:	4631      	mov	r1, r6
 8026f84:	46a4      	mov	ip, r4
 8026f86:	b002      	add	sp, #8
 8026f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026f8c:	4760      	bx	ip
 8026f8e:	4619      	mov	r1, r3
 8026f90:	9201      	str	r2, [sp, #4]
 8026f92:	9300      	str	r3, [sp, #0]
 8026f94:	f000 f8ae 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 8026f98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8026f9c:	2800      	cmp	r0, #0
 8026f9e:	d0ec      	beq.n	8026f7a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8026fa0:	2006      	movs	r0, #6
 8026fa2:	b002      	add	sp, #8
 8026fa4:	bd70      	pop	{r4, r5, r6, pc}
 8026fa6:	bf00      	nop

08026fa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8026fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fac:	460e      	mov	r6, r1
 8026fae:	b081      	sub	sp, #4
 8026fb0:	4619      	mov	r1, r3
 8026fb2:	461f      	mov	r7, r3
 8026fb4:	4691      	mov	r9, r2
 8026fb6:	4683      	mov	fp, r0
 8026fb8:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8026fbc:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8026fc0:	f000 f898 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 8026fc4:	b170      	cbz	r0, 8026fe4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8026fc6:	2e00      	cmp	r6, #0
 8026fc8:	602c      	str	r4, [r5, #0]
 8026fca:	f885 9004 	strb.w	r9, [r5, #4]
 8026fce:	db1d      	blt.n	802700c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8026fd0:	4434      	add	r4, r6
 8026fd2:	45a0      	cmp	r8, r4
 8026fd4:	bf0c      	ite	eq
 8026fd6:	2406      	moveq	r4, #6
 8026fd8:	2401      	movne	r4, #1
 8026fda:	71ac      	strb	r4, [r5, #6]
 8026fdc:	2000      	movs	r0, #0
 8026fde:	b001      	add	sp, #4
 8026fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fe4:	4544      	cmp	r4, r8
 8026fe6:	d016      	beq.n	8027016 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8026fe8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8026fec:	f8d0 c000 	ldr.w	ip, [r0]
 8026ff0:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8026ff4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8026ff8:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8026ffc:	463b      	mov	r3, r7
 8026ffe:	464a      	mov	r2, r9
 8027000:	4631      	mov	r1, r6
 8027002:	46a4      	mov	ip, r4
 8027004:	b001      	add	sp, #4
 8027006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802700a:	4760      	bx	ip
 802700c:	3602      	adds	r6, #2
 802700e:	d1e5      	bne.n	8026fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8027010:	2301      	movs	r3, #1
 8027012:	71ab      	strb	r3, [r5, #6]
 8027014:	e7e2      	b.n	8026fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8027016:	4651      	mov	r1, sl
 8027018:	4658      	mov	r0, fp
 802701a:	f000 f86b 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 802701e:	2800      	cmp	r0, #0
 8027020:	d0e2      	beq.n	8026fe8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8027022:	f885 9005 	strb.w	r9, [r5, #5]
 8027026:	e7d9      	b.n	8026fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08027028 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8027028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802702c:	4607      	mov	r7, r0
 802702e:	460c      	mov	r4, r1
 8027030:	4615      	mov	r5, r2
 8027032:	461e      	mov	r6, r3
 8027034:	f000 fd74 	bl	8027b20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8027038:	b108      	cbz	r0, 802703e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 802703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802703e:	68b8      	ldr	r0, [r7, #8]
 8027040:	6807      	ldr	r7, [r0, #0]
 8027042:	4621      	mov	r1, r4
 8027044:	69bc      	ldr	r4, [r7, #24]
 8027046:	4633      	mov	r3, r6
 8027048:	462a      	mov	r2, r5
 802704a:	46a4      	mov	ip, r4
 802704c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027050:	4760      	bx	ip
 8027052:	bf00      	nop

08027054 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8027054:	b508      	push	{r3, lr}
 8027056:	4780      	blx	r0
 8027058:	f001 fa96 	bl	8028588 <abort>
 802705c:	f7ff feea 	bl	8026e34 <__cxa_begin_catch>
 8027060:	f001 fa92 	bl	8028588 <abort>
 8027064:	460d      	mov	r5, r1
 8027066:	4604      	mov	r4, r0
 8027068:	f7ff ff24 	bl	8026eb4 <__cxa_end_catch>
 802706c:	3501      	adds	r5, #1
 802706e:	d001      	beq.n	8027074 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8027070:	f000 f8f2 	bl	8027258 <__cxa_end_cleanup>
 8027074:	4620      	mov	r0, r4
 8027076:	f000 f881 	bl	802717c <__cxa_call_unexpected>
 802707a:	bf00      	nop

0802707c <_ZSt9terminatev>:
 802707c:	b508      	push	{r3, lr}
 802707e:	4b03      	ldr	r3, [pc, #12]	; (802708c <_ZSt9terminatev+0x10>)
 8027080:	6818      	ldr	r0, [r3, #0]
 8027082:	f3bf 8f5b 	dmb	ish
 8027086:	f7ff ffe5 	bl	8027054 <_ZN10__cxxabiv111__terminateEPFvvE>
 802708a:	bf00      	nop
 802708c:	20008428 	.word	0x20008428

08027090 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8027090:	b508      	push	{r3, lr}
 8027092:	4780      	blx	r0
 8027094:	f7ff fff2 	bl	802707c <_ZSt9terminatev>

08027098 <_ZSt10unexpectedv>:
 8027098:	b508      	push	{r3, lr}
 802709a:	4b03      	ldr	r3, [pc, #12]	; (80270a8 <_ZSt10unexpectedv+0x10>)
 802709c:	6818      	ldr	r0, [r3, #0]
 802709e:	f3bf 8f5b 	dmb	ish
 80270a2:	f7ff fff5 	bl	8027090 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80270a6:	bf00      	nop
 80270a8:	20008424 	.word	0x20008424

080270ac <_ZSt13get_terminatev>:
 80270ac:	4b02      	ldr	r3, [pc, #8]	; (80270b8 <_ZSt13get_terminatev+0xc>)
 80270ae:	6818      	ldr	r0, [r3, #0]
 80270b0:	f3bf 8f5b 	dmb	ish
 80270b4:	4770      	bx	lr
 80270b6:	bf00      	nop
 80270b8:	20008428 	.word	0x20008428

080270bc <_ZSt14get_unexpectedv>:
 80270bc:	4b02      	ldr	r3, [pc, #8]	; (80270c8 <_ZSt14get_unexpectedv+0xc>)
 80270be:	6818      	ldr	r0, [r3, #0]
 80270c0:	f3bf 8f5b 	dmb	ish
 80270c4:	4770      	bx	lr
 80270c6:	bf00      	nop
 80270c8:	20008424 	.word	0x20008424

080270cc <_ZNSt9exceptionD1Ev>:
 80270cc:	4770      	bx	lr
 80270ce:	bf00      	nop

080270d0 <_ZNSt13bad_exceptionD1Ev>:
 80270d0:	4770      	bx	lr
 80270d2:	bf00      	nop

080270d4 <_ZGTtNKSt13bad_exception4whatEv>:
 80270d4:	4800      	ldr	r0, [pc, #0]	; (80270d8 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 80270d6:	4770      	bx	lr
 80270d8:	080b37f0 	.word	0x080b37f0

080270dc <_ZNSt13bad_exceptionD0Ev>:
 80270dc:	b510      	push	{r4, lr}
 80270de:	2104      	movs	r1, #4
 80270e0:	4604      	mov	r4, r0
 80270e2:	f7ff fe03 	bl	8026cec <_ZdlPvj>
 80270e6:	4620      	mov	r0, r4
 80270e8:	bd10      	pop	{r4, pc}
 80270ea:	bf00      	nop

080270ec <_ZNSt9type_infoD1Ev>:
 80270ec:	4770      	bx	lr
 80270ee:	bf00      	nop

080270f0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80270f0:	2000      	movs	r0, #0
 80270f2:	4770      	bx	lr

080270f4 <_ZNKSt9type_infoeqERKS_>:
 80270f4:	4281      	cmp	r1, r0
 80270f6:	d00f      	beq.n	8027118 <_ZNKSt9type_infoeqERKS_+0x24>
 80270f8:	b508      	push	{r3, lr}
 80270fa:	6840      	ldr	r0, [r0, #4]
 80270fc:	7803      	ldrb	r3, [r0, #0]
 80270fe:	2b2a      	cmp	r3, #42	; 0x2a
 8027100:	d00c      	beq.n	802711c <_ZNKSt9type_infoeqERKS_+0x28>
 8027102:	6849      	ldr	r1, [r1, #4]
 8027104:	780b      	ldrb	r3, [r1, #0]
 8027106:	2b2a      	cmp	r3, #42	; 0x2a
 8027108:	bf08      	it	eq
 802710a:	3101      	addeq	r1, #1
 802710c:	f7df fe40 	bl	8006d90 <strcmp>
 8027110:	fab0 f080 	clz	r0, r0
 8027114:	0940      	lsrs	r0, r0, #5
 8027116:	bd08      	pop	{r3, pc}
 8027118:	2001      	movs	r0, #1
 802711a:	4770      	bx	lr
 802711c:	2000      	movs	r0, #0
 802711e:	bd08      	pop	{r3, pc}

08027120 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8027120:	7803      	ldrb	r3, [r0, #0]
 8027122:	2b47      	cmp	r3, #71	; 0x47
 8027124:	d001      	beq.n	802712a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 8027126:	2000      	movs	r0, #0
 8027128:	4770      	bx	lr
 802712a:	7843      	ldrb	r3, [r0, #1]
 802712c:	2b4e      	cmp	r3, #78	; 0x4e
 802712e:	d1fa      	bne.n	8027126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8027130:	7883      	ldrb	r3, [r0, #2]
 8027132:	2b55      	cmp	r3, #85	; 0x55
 8027134:	d1f7      	bne.n	8027126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8027136:	78c3      	ldrb	r3, [r0, #3]
 8027138:	2b43      	cmp	r3, #67	; 0x43
 802713a:	d1f4      	bne.n	8027126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802713c:	7903      	ldrb	r3, [r0, #4]
 802713e:	2b43      	cmp	r3, #67	; 0x43
 8027140:	d1f1      	bne.n	8027126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8027142:	7943      	ldrb	r3, [r0, #5]
 8027144:	2b2b      	cmp	r3, #43	; 0x2b
 8027146:	d1ee      	bne.n	8027126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8027148:	7983      	ldrb	r3, [r0, #6]
 802714a:	2b2b      	cmp	r3, #43	; 0x2b
 802714c:	d1eb      	bne.n	8027126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 802714e:	79c0      	ldrb	r0, [r0, #7]
 8027150:	2801      	cmp	r0, #1
 8027152:	bf8c      	ite	hi
 8027154:	2000      	movhi	r0, #0
 8027156:	2001      	movls	r0, #1
 8027158:	4770      	bx	lr
 802715a:	bf00      	nop

0802715c <__cxa_call_terminate>:
 802715c:	b510      	push	{r4, lr}
 802715e:	b130      	cbz	r0, 802716e <__cxa_call_terminate+0x12>
 8027160:	4604      	mov	r4, r0
 8027162:	f7ff fe67 	bl	8026e34 <__cxa_begin_catch>
 8027166:	4620      	mov	r0, r4
 8027168:	f7ff ffda 	bl	8027120 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 802716c:	b908      	cbnz	r0, 8027172 <__cxa_call_terminate+0x16>
 802716e:	f7ff ff85 	bl	802707c <_ZSt9terminatev>
 8027172:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8027176:	f7ff ff6d 	bl	8027054 <_ZN10__cxxabiv111__terminateEPFvvE>
 802717a:	bf00      	nop

0802717c <__cxa_call_unexpected>:
 802717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027180:	b085      	sub	sp, #20
 8027182:	4602      	mov	r2, r0
 8027184:	f7ff ffcc 	bl	8027120 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8027188:	b150      	cbz	r0, 80271a0 <__cxa_call_unexpected+0x24>
 802718a:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 802718e:	4610      	mov	r0, r2
 8027190:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8027192:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 8027196:	f7ff fe4d 	bl	8026e34 <__cxa_begin_catch>
 802719a:	4640      	mov	r0, r8
 802719c:	f7ff ff78 	bl	8027090 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80271a0:	4610      	mov	r0, r2
 80271a2:	f7ff fe47 	bl	8026e34 <__cxa_begin_catch>
 80271a6:	f7ff ff77 	bl	8027098 <_ZSt10unexpectedv>
 80271aa:	f7ff fe43 	bl	8026e34 <__cxa_begin_catch>
 80271ae:	f7ff ff65 	bl	802707c <_ZSt9terminatev>
 80271b2:	f7ff fe3f 	bl	8026e34 <__cxa_begin_catch>
 80271b6:	f000 f917 	bl	80273e8 <__cxa_get_globals_fast>
 80271ba:	6803      	ldr	r3, [r0, #0]
 80271bc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80271c0:	f10d 0a10 	add.w	sl, sp, #16
 80271c4:	2a01      	cmp	r2, #1
 80271c6:	bf0c      	ite	eq
 80271c8:	681a      	ldreq	r2, [r3, #0]
 80271ca:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 80271ce:	f04f 0800 	mov.w	r8, #0
 80271d2:	3320      	adds	r3, #32
 80271d4:	f84a 2d08 	str.w	r2, [sl, #-8]!
 80271d8:	f027 0b03 	bic.w	fp, r7, #3
 80271dc:	9301      	str	r3, [sp, #4]
 80271de:	46c1      	mov	r9, r8
 80271e0:	45b1      	cmp	r9, r6
 80271e2:	da1b      	bge.n	802721c <__cxa_call_unexpected+0xa0>
 80271e4:	6827      	ldr	r7, [r4, #0]
 80271e6:	b107      	cbz	r7, 80271ea <__cxa_call_unexpected+0x6e>
 80271e8:	4427      	add	r7, r4
 80271ea:	4653      	mov	r3, sl
 80271ec:	2200      	movs	r2, #0
 80271ee:	4639      	mov	r1, r7
 80271f0:	9801      	ldr	r0, [sp, #4]
 80271f2:	f000 f837 	bl	8027264 <__cxa_type_match>
 80271f6:	b9e8      	cbnz	r0, 8027234 <__cxa_call_unexpected+0xb8>
 80271f8:	683b      	ldr	r3, [r7, #0]
 80271fa:	4914      	ldr	r1, [pc, #80]	; (802724c <__cxa_call_unexpected+0xd0>)
 80271fc:	691b      	ldr	r3, [r3, #16]
 80271fe:	9300      	str	r3, [sp, #0]
 8027200:	aa04      	add	r2, sp, #16
 8027202:	2301      	movs	r3, #1
 8027204:	f842 0d04 	str.w	r0, [r2, #-4]!
 8027208:	4638      	mov	r0, r7
 802720a:	9f00      	ldr	r7, [sp, #0]
 802720c:	47b8      	blx	r7
 802720e:	2800      	cmp	r0, #0
 8027210:	bf18      	it	ne
 8027212:	4680      	movne	r8, r0
 8027214:	f109 0901 	add.w	r9, r9, #1
 8027218:	445c      	add	r4, fp
 802721a:	e7e1      	b.n	80271e0 <__cxa_call_unexpected+0x64>
 802721c:	f1b8 0f00 	cmp.w	r8, #0
 8027220:	d010      	beq.n	8027244 <__cxa_call_unexpected+0xc8>
 8027222:	2004      	movs	r0, #4
 8027224:	f7ff fd0a 	bl	8026c3c <__cxa_allocate_exception>
 8027228:	4b09      	ldr	r3, [pc, #36]	; (8027250 <__cxa_call_unexpected+0xd4>)
 802722a:	6003      	str	r3, [r0, #0]
 802722c:	4a09      	ldr	r2, [pc, #36]	; (8027254 <__cxa_call_unexpected+0xd8>)
 802722e:	4907      	ldr	r1, [pc, #28]	; (802724c <__cxa_call_unexpected+0xd0>)
 8027230:	f7ff fdac 	bl	8026d8c <__cxa_throw>
 8027234:	f7ff fdc6 	bl	8026dc4 <__cxa_rethrow>
 8027238:	f7ff fe3c 	bl	8026eb4 <__cxa_end_catch>
 802723c:	f7ff fe3a 	bl	8026eb4 <__cxa_end_catch>
 8027240:	f000 f80a 	bl	8027258 <__cxa_end_cleanup>
 8027244:	4628      	mov	r0, r5
 8027246:	f7ff ff05 	bl	8027054 <_ZN10__cxxabiv111__terminateEPFvvE>
 802724a:	bf00      	nop
 802724c:	080b3814 	.word	0x080b3814
 8027250:	080b3898 	.word	0x080b3898
 8027254:	080270d1 	.word	0x080270d1

08027258 <__cxa_end_cleanup>:
 8027258:	b41e      	push	{r1, r2, r3, r4}
 802725a:	f000 f88d 	bl	8027378 <__gnu_end_cleanup>
 802725e:	bc1e      	pop	{r1, r2, r3, r4}
 8027260:	f7e1 f98e 	bl	8008580 <_Unwind_Resume>

08027264 <__cxa_type_match>:
 8027264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027266:	7802      	ldrb	r2, [r0, #0]
 8027268:	2a47      	cmp	r2, #71	; 0x47
 802726a:	b083      	sub	sp, #12
 802726c:	460d      	mov	r5, r1
 802726e:	461f      	mov	r7, r3
 8027270:	d01e      	beq.n	80272b0 <__cxa_type_match+0x4c>
 8027272:	2300      	movs	r3, #0
 8027274:	4c25      	ldr	r4, [pc, #148]	; (802730c <__cxa_type_match+0xa8>)
 8027276:	9301      	str	r3, [sp, #4]
 8027278:	6823      	ldr	r3, [r4, #0]
 802727a:	4620      	mov	r0, r4
 802727c:	689b      	ldr	r3, [r3, #8]
 802727e:	4798      	blx	r3
 8027280:	b180      	cbz	r0, 80272a4 <__cxa_type_match+0x40>
 8027282:	9b01      	ldr	r3, [sp, #4]
 8027284:	681b      	ldr	r3, [r3, #0]
 8027286:	9301      	str	r3, [sp, #4]
 8027288:	2602      	movs	r6, #2
 802728a:	682b      	ldr	r3, [r5, #0]
 802728c:	4621      	mov	r1, r4
 802728e:	4628      	mov	r0, r5
 8027290:	691c      	ldr	r4, [r3, #16]
 8027292:	aa01      	add	r2, sp, #4
 8027294:	2301      	movs	r3, #1
 8027296:	47a0      	blx	r4
 8027298:	b130      	cbz	r0, 80272a8 <__cxa_type_match+0x44>
 802729a:	9b01      	ldr	r3, [sp, #4]
 802729c:	603b      	str	r3, [r7, #0]
 802729e:	4630      	mov	r0, r6
 80272a0:	b003      	add	sp, #12
 80272a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80272a4:	2601      	movs	r6, #1
 80272a6:	e7f0      	b.n	802728a <__cxa_type_match+0x26>
 80272a8:	4606      	mov	r6, r0
 80272aa:	4630      	mov	r0, r6
 80272ac:	b003      	add	sp, #12
 80272ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80272b0:	7843      	ldrb	r3, [r0, #1]
 80272b2:	2b4e      	cmp	r3, #78	; 0x4e
 80272b4:	d1dd      	bne.n	8027272 <__cxa_type_match+0xe>
 80272b6:	7883      	ldrb	r3, [r0, #2]
 80272b8:	2b55      	cmp	r3, #85	; 0x55
 80272ba:	d1da      	bne.n	8027272 <__cxa_type_match+0xe>
 80272bc:	78c3      	ldrb	r3, [r0, #3]
 80272be:	2b43      	cmp	r3, #67	; 0x43
 80272c0:	d1d7      	bne.n	8027272 <__cxa_type_match+0xe>
 80272c2:	7903      	ldrb	r3, [r0, #4]
 80272c4:	2b46      	cmp	r3, #70	; 0x46
 80272c6:	d015      	beq.n	80272f4 <__cxa_type_match+0x90>
 80272c8:	7903      	ldrb	r3, [r0, #4]
 80272ca:	2b43      	cmp	r3, #67	; 0x43
 80272cc:	d1d1      	bne.n	8027272 <__cxa_type_match+0xe>
 80272ce:	7943      	ldrb	r3, [r0, #5]
 80272d0:	2b2b      	cmp	r3, #43	; 0x2b
 80272d2:	d1ce      	bne.n	8027272 <__cxa_type_match+0xe>
 80272d4:	7983      	ldrb	r3, [r0, #6]
 80272d6:	2b2b      	cmp	r3, #43	; 0x2b
 80272d8:	d1cb      	bne.n	8027272 <__cxa_type_match+0xe>
 80272da:	79c3      	ldrb	r3, [r0, #7]
 80272dc:	2b01      	cmp	r3, #1
 80272de:	d8c8      	bhi.n	8027272 <__cxa_type_match+0xe>
 80272e0:	f850 4c20 	ldr.w	r4, [r0, #-32]
 80272e4:	d002      	beq.n	80272ec <__cxa_type_match+0x88>
 80272e6:	3058      	adds	r0, #88	; 0x58
 80272e8:	9001      	str	r0, [sp, #4]
 80272ea:	e7c5      	b.n	8027278 <__cxa_type_match+0x14>
 80272ec:	4620      	mov	r0, r4
 80272ee:	f854 4c78 	ldr.w	r4, [r4, #-120]
 80272f2:	e7f9      	b.n	80272e8 <__cxa_type_match+0x84>
 80272f4:	7943      	ldrb	r3, [r0, #5]
 80272f6:	2b4f      	cmp	r3, #79	; 0x4f
 80272f8:	d1e6      	bne.n	80272c8 <__cxa_type_match+0x64>
 80272fa:	7983      	ldrb	r3, [r0, #6]
 80272fc:	2b52      	cmp	r3, #82	; 0x52
 80272fe:	d1e3      	bne.n	80272c8 <__cxa_type_match+0x64>
 8027300:	79c3      	ldrb	r3, [r0, #7]
 8027302:	2b00      	cmp	r3, #0
 8027304:	d1e0      	bne.n	80272c8 <__cxa_type_match+0x64>
 8027306:	9301      	str	r3, [sp, #4]
 8027308:	4c01      	ldr	r4, [pc, #4]	; (8027310 <__cxa_type_match+0xac>)
 802730a:	e7b5      	b.n	8027278 <__cxa_type_match+0x14>
 802730c:	080b380c 	.word	0x080b380c
 8027310:	080b3804 	.word	0x080b3804

08027314 <__cxa_begin_cleanup>:
 8027314:	b510      	push	{r4, lr}
 8027316:	4604      	mov	r4, r0
 8027318:	f000 f86a 	bl	80273f0 <__cxa_get_globals>
 802731c:	7823      	ldrb	r3, [r4, #0]
 802731e:	2b47      	cmp	r3, #71	; 0x47
 8027320:	f1a4 0220 	sub.w	r2, r4, #32
 8027324:	d004      	beq.n	8027330 <__cxa_begin_cleanup+0x1c>
 8027326:	6883      	ldr	r3, [r0, #8]
 8027328:	bb23      	cbnz	r3, 8027374 <__cxa_begin_cleanup+0x60>
 802732a:	6082      	str	r2, [r0, #8]
 802732c:	2001      	movs	r0, #1
 802732e:	bd10      	pop	{r4, pc}
 8027330:	7863      	ldrb	r3, [r4, #1]
 8027332:	2b4e      	cmp	r3, #78	; 0x4e
 8027334:	d1f7      	bne.n	8027326 <__cxa_begin_cleanup+0x12>
 8027336:	78a3      	ldrb	r3, [r4, #2]
 8027338:	2b55      	cmp	r3, #85	; 0x55
 802733a:	d1f4      	bne.n	8027326 <__cxa_begin_cleanup+0x12>
 802733c:	78e3      	ldrb	r3, [r4, #3]
 802733e:	2b43      	cmp	r3, #67	; 0x43
 8027340:	d1f1      	bne.n	8027326 <__cxa_begin_cleanup+0x12>
 8027342:	7923      	ldrb	r3, [r4, #4]
 8027344:	2b43      	cmp	r3, #67	; 0x43
 8027346:	d1ee      	bne.n	8027326 <__cxa_begin_cleanup+0x12>
 8027348:	7963      	ldrb	r3, [r4, #5]
 802734a:	2b2b      	cmp	r3, #43	; 0x2b
 802734c:	d1eb      	bne.n	8027326 <__cxa_begin_cleanup+0x12>
 802734e:	79a3      	ldrb	r3, [r4, #6]
 8027350:	2b2b      	cmp	r3, #43	; 0x2b
 8027352:	d1e8      	bne.n	8027326 <__cxa_begin_cleanup+0x12>
 8027354:	79e3      	ldrb	r3, [r4, #7]
 8027356:	2b01      	cmp	r3, #1
 8027358:	d8e5      	bhi.n	8027326 <__cxa_begin_cleanup+0x12>
 802735a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802735e:	3301      	adds	r3, #1
 8027360:	2b01      	cmp	r3, #1
 8027362:	f844 3c04 	str.w	r3, [r4, #-4]
 8027366:	d1e1      	bne.n	802732c <__cxa_begin_cleanup+0x18>
 8027368:	6883      	ldr	r3, [r0, #8]
 802736a:	f844 3c08 	str.w	r3, [r4, #-8]
 802736e:	6082      	str	r2, [r0, #8]
 8027370:	2001      	movs	r0, #1
 8027372:	bd10      	pop	{r4, pc}
 8027374:	f7ff fe82 	bl	802707c <_ZSt9terminatev>

08027378 <__gnu_end_cleanup>:
 8027378:	b508      	push	{r3, lr}
 802737a:	f000 f839 	bl	80273f0 <__cxa_get_globals>
 802737e:	6883      	ldr	r3, [r0, #8]
 8027380:	b383      	cbz	r3, 80273e4 <__gnu_end_cleanup+0x6c>
 8027382:	f893 2020 	ldrb.w	r2, [r3, #32]
 8027386:	2a47      	cmp	r2, #71	; 0x47
 8027388:	d004      	beq.n	8027394 <__gnu_end_cleanup+0x1c>
 802738a:	2200      	movs	r2, #0
 802738c:	6082      	str	r2, [r0, #8]
 802738e:	f103 0020 	add.w	r0, r3, #32
 8027392:	bd08      	pop	{r3, pc}
 8027394:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8027398:	2a4e      	cmp	r2, #78	; 0x4e
 802739a:	d1f6      	bne.n	802738a <__gnu_end_cleanup+0x12>
 802739c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80273a0:	2a55      	cmp	r2, #85	; 0x55
 80273a2:	d1f2      	bne.n	802738a <__gnu_end_cleanup+0x12>
 80273a4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80273a8:	2a43      	cmp	r2, #67	; 0x43
 80273aa:	d1ee      	bne.n	802738a <__gnu_end_cleanup+0x12>
 80273ac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80273b0:	2a43      	cmp	r2, #67	; 0x43
 80273b2:	d1ea      	bne.n	802738a <__gnu_end_cleanup+0x12>
 80273b4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80273b8:	2a2b      	cmp	r2, #43	; 0x2b
 80273ba:	d1e6      	bne.n	802738a <__gnu_end_cleanup+0x12>
 80273bc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80273c0:	2a2b      	cmp	r2, #43	; 0x2b
 80273c2:	d1e2      	bne.n	802738a <__gnu_end_cleanup+0x12>
 80273c4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80273c8:	2a01      	cmp	r2, #1
 80273ca:	d8de      	bhi.n	802738a <__gnu_end_cleanup+0x12>
 80273cc:	69da      	ldr	r2, [r3, #28]
 80273ce:	3a01      	subs	r2, #1
 80273d0:	61da      	str	r2, [r3, #28]
 80273d2:	2a00      	cmp	r2, #0
 80273d4:	d1db      	bne.n	802738e <__gnu_end_cleanup+0x16>
 80273d6:	699a      	ldr	r2, [r3, #24]
 80273d8:	6082      	str	r2, [r0, #8]
 80273da:	2200      	movs	r2, #0
 80273dc:	619a      	str	r2, [r3, #24]
 80273de:	f103 0020 	add.w	r0, r3, #32
 80273e2:	bd08      	pop	{r3, pc}
 80273e4:	f7ff fe4a 	bl	802707c <_ZSt9terminatev>

080273e8 <__cxa_get_globals_fast>:
 80273e8:	4800      	ldr	r0, [pc, #0]	; (80273ec <__cxa_get_globals_fast+0x4>)
 80273ea:	4770      	bx	lr
 80273ec:	2003cf3c 	.word	0x2003cf3c

080273f0 <__cxa_get_globals>:
 80273f0:	4800      	ldr	r0, [pc, #0]	; (80273f4 <__cxa_get_globals+0x4>)
 80273f2:	4770      	bx	lr
 80273f4:	2003cf3c 	.word	0x2003cf3c

080273f8 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80273f8:	2850      	cmp	r0, #80	; 0x50
 80273fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273fc:	d01c      	beq.n	8027438 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80273fe:	f000 040f 	and.w	r4, r0, #15
 8027402:	2c0c      	cmp	r4, #12
 8027404:	d856      	bhi.n	80274b4 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 8027406:	e8df f004 	tbb	[pc, r4]
 802740a:	4107      	.short	0x4107
 802740c:	551f0751 	.word	0x551f0751
 8027410:	27555555 	.word	0x27555555
 8027414:	0723      	.short	0x0723
 8027416:	1f          	.byte	0x1f
 8027417:	00          	.byte	0x00
 8027418:	4614      	mov	r4, r2
 802741a:	f854 5b04 	ldr.w	r5, [r4], #4
 802741e:	b145      	cbz	r5, 8027432 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 8027420:	f000 0670 	and.w	r6, r0, #112	; 0x70
 8027424:	2e10      	cmp	r6, #16
 8027426:	bf08      	it	eq
 8027428:	4611      	moveq	r1, r2
 802742a:	440d      	add	r5, r1
 802742c:	0602      	lsls	r2, r0, #24
 802742e:	bf48      	it	mi
 8027430:	682d      	ldrmi	r5, [r5, #0]
 8027432:	601d      	str	r5, [r3, #0]
 8027434:	4620      	mov	r0, r4
 8027436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027438:	3203      	adds	r2, #3
 802743a:	f022 0403 	bic.w	r4, r2, #3
 802743e:	f854 5b04 	ldr.w	r5, [r4], #4
 8027442:	601d      	str	r5, [r3, #0]
 8027444:	4620      	mov	r0, r4
 8027446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027448:	4614      	mov	r4, r2
 802744a:	f854 5b08 	ldr.w	r5, [r4], #8
 802744e:	e7e6      	b.n	802741e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8027450:	4614      	mov	r4, r2
 8027452:	f934 5b02 	ldrsh.w	r5, [r4], #2
 8027456:	e7e2      	b.n	802741e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8027458:	2500      	movs	r5, #0
 802745a:	462f      	mov	r7, r5
 802745c:	4614      	mov	r4, r2
 802745e:	f814 cb01 	ldrb.w	ip, [r4], #1
 8027462:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 8027466:	40be      	lsls	r6, r7
 8027468:	f01c 0f80 	tst.w	ip, #128	; 0x80
 802746c:	ea45 0506 	orr.w	r5, r5, r6
 8027470:	f107 0707 	add.w	r7, r7, #7
 8027474:	d1f3      	bne.n	802745e <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 8027476:	2f1f      	cmp	r7, #31
 8027478:	d8d1      	bhi.n	802741e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 802747a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 802747e:	d0ce      	beq.n	802741e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8027480:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8027484:	fa06 f707 	lsl.w	r7, r6, r7
 8027488:	433d      	orrs	r5, r7
 802748a:	e7c9      	b.n	8027420 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 802748c:	2500      	movs	r5, #0
 802748e:	462f      	mov	r7, r5
 8027490:	4614      	mov	r4, r2
 8027492:	f814 cb01 	ldrb.w	ip, [r4], #1
 8027496:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 802749a:	40be      	lsls	r6, r7
 802749c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80274a0:	ea45 0506 	orr.w	r5, r5, r6
 80274a4:	f107 0707 	add.w	r7, r7, #7
 80274a8:	d1f3      	bne.n	8027492 <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 80274aa:	e7b8      	b.n	802741e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80274ac:	4614      	mov	r4, r2
 80274ae:	f834 5b02 	ldrh.w	r5, [r4], #2
 80274b2:	e7b4      	b.n	802741e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80274b4:	f001 f868 	bl	8028588 <abort>

080274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 80274b8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80274bc:	2820      	cmp	r0, #32
 80274be:	d011      	beq.n	80274e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 80274c0:	d90b      	bls.n	80274da <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 80274c2:	2840      	cmp	r0, #64	; 0x40
 80274c4:	d006      	beq.n	80274d4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 80274c6:	2850      	cmp	r0, #80	; 0x50
 80274c8:	d00a      	beq.n	80274e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 80274ca:	2830      	cmp	r0, #48	; 0x30
 80274cc:	d10d      	bne.n	80274ea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 80274ce:	4608      	mov	r0, r1
 80274d0:	f7e1 ba50 	b.w	8008974 <_Unwind_GetDataRelBase>
 80274d4:	4608      	mov	r0, r1
 80274d6:	f7e1 ba3d 	b.w	8008954 <_Unwind_GetRegionStart>
 80274da:	b108      	cbz	r0, 80274e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 80274dc:	2810      	cmp	r0, #16
 80274de:	d104      	bne.n	80274ea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 80274e0:	2000      	movs	r0, #0
 80274e2:	4770      	bx	lr
 80274e4:	4608      	mov	r0, r1
 80274e6:	f7e1 ba49 	b.w	800897c <_Unwind_GetTextRelBase>
 80274ea:	b508      	push	{r3, lr}
 80274ec:	f001 f84c 	bl	8028588 <abort>

080274f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80274f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80274f2:	460c      	mov	r4, r1
 80274f4:	4615      	mov	r5, r2
 80274f6:	4607      	mov	r7, r0
 80274f8:	b108      	cbz	r0, 80274fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80274fa:	f7e1 fa2b 	bl	8008954 <_Unwind_GetRegionStart>
 80274fe:	6028      	str	r0, [r5, #0]
 8027500:	7826      	ldrb	r6, [r4, #0]
 8027502:	2eff      	cmp	r6, #255	; 0xff
 8027504:	f104 0401 	add.w	r4, r4, #1
 8027508:	d129      	bne.n	802755e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 802750a:	6068      	str	r0, [r5, #4]
 802750c:	7823      	ldrb	r3, [r4, #0]
 802750e:	752b      	strb	r3, [r5, #20]
 8027510:	2bff      	cmp	r3, #255	; 0xff
 8027512:	f104 0001 	add.w	r0, r4, #1
 8027516:	d032      	beq.n	802757e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 8027518:	2310      	movs	r3, #16
 802751a:	2400      	movs	r4, #0
 802751c:	752b      	strb	r3, [r5, #20]
 802751e:	4622      	mov	r2, r4
 8027520:	f810 1b01 	ldrb.w	r1, [r0], #1
 8027524:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8027528:	4093      	lsls	r3, r2
 802752a:	0609      	lsls	r1, r1, #24
 802752c:	ea44 0403 	orr.w	r4, r4, r3
 8027530:	f102 0207 	add.w	r2, r2, #7
 8027534:	d4f4      	bmi.n	8027520 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 8027536:	4404      	add	r4, r0
 8027538:	60ec      	str	r4, [r5, #12]
 802753a:	7803      	ldrb	r3, [r0, #0]
 802753c:	756b      	strb	r3, [r5, #21]
 802753e:	2400      	movs	r4, #0
 8027540:	3001      	adds	r0, #1
 8027542:	4622      	mov	r2, r4
 8027544:	f810 1b01 	ldrb.w	r1, [r0], #1
 8027548:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 802754c:	4093      	lsls	r3, r2
 802754e:	431c      	orrs	r4, r3
 8027550:	060b      	lsls	r3, r1, #24
 8027552:	f102 0207 	add.w	r2, r2, #7
 8027556:	d4f5      	bmi.n	8027544 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8027558:	4404      	add	r4, r0
 802755a:	612c      	str	r4, [r5, #16]
 802755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802755e:	4639      	mov	r1, r7
 8027560:	4630      	mov	r0, r6
 8027562:	f7ff ffa9 	bl	80274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8027566:	4622      	mov	r2, r4
 8027568:	4601      	mov	r1, r0
 802756a:	1d2b      	adds	r3, r5, #4
 802756c:	4630      	mov	r0, r6
 802756e:	f7ff ff43 	bl	80273f8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8027572:	4604      	mov	r4, r0
 8027574:	1c60      	adds	r0, r4, #1
 8027576:	7823      	ldrb	r3, [r4, #0]
 8027578:	752b      	strb	r3, [r5, #20]
 802757a:	2bff      	cmp	r3, #255	; 0xff
 802757c:	d1cc      	bne.n	8027518 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 802757e:	2300      	movs	r3, #0
 8027580:	60eb      	str	r3, [r5, #12]
 8027582:	e7da      	b.n	802753a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

08027584 <__gxx_personality_v0>:
 8027584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027588:	f000 0403 	and.w	r4, r0, #3
 802758c:	b099      	sub	sp, #100	; 0x64
 802758e:	2300      	movs	r3, #0
 8027590:	2c01      	cmp	r4, #1
 8027592:	4688      	mov	r8, r1
 8027594:	4617      	mov	r7, r2
 8027596:	930c      	str	r3, [sp, #48]	; 0x30
 8027598:	f000 8096 	beq.w	80276c8 <__gxx_personality_v0+0x144>
 802759c:	d30d      	bcc.n	80275ba <__gxx_personality_v0+0x36>
 802759e:	2c02      	cmp	r4, #2
 80275a0:	f040 825f 	bne.w	8027a62 <__gxx_personality_v0+0x4de>
 80275a4:	4639      	mov	r1, r7
 80275a6:	4640      	mov	r0, r8
 80275a8:	f7e1 f9c0 	bl	800892c <__gnu_unwind_frame>
 80275ac:	2800      	cmp	r0, #0
 80275ae:	f000 809b 	beq.w	80276e8 <__gxx_personality_v0+0x164>
 80275b2:	2009      	movs	r0, #9
 80275b4:	b019      	add	sp, #100	; 0x64
 80275b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275ba:	0702      	lsls	r2, r0, #28
 80275bc:	d4f2      	bmi.n	80275a4 <__gxx_personality_v0+0x20>
 80275be:	2301      	movs	r3, #1
 80275c0:	9304      	str	r3, [sp, #16]
 80275c2:	aa18      	add	r2, sp, #96	; 0x60
 80275c4:	2300      	movs	r3, #0
 80275c6:	f842 8d2c 	str.w	r8, [r2, #-44]!
 80275ca:	4619      	mov	r1, r3
 80275cc:	9200      	str	r2, [sp, #0]
 80275ce:	4638      	mov	r0, r7
 80275d0:	220c      	movs	r2, #12
 80275d2:	f7e0 fc3b 	bl	8007e4c <_Unwind_VRS_Set>
 80275d6:	4638      	mov	r0, r7
 80275d8:	f7e1 f9c2 	bl	8008960 <_Unwind_GetLanguageSpecificData>
 80275dc:	9005      	str	r0, [sp, #20]
 80275de:	2800      	cmp	r0, #0
 80275e0:	d0e0      	beq.n	80275a4 <__gxx_personality_v0+0x20>
 80275e2:	ab12      	add	r3, sp, #72	; 0x48
 80275e4:	461a      	mov	r2, r3
 80275e6:	9905      	ldr	r1, [sp, #20]
 80275e8:	9306      	str	r3, [sp, #24]
 80275ea:	4638      	mov	r0, r7
 80275ec:	f7ff ff80 	bl	80274f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80275f0:	4605      	mov	r5, r0
 80275f2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80275f6:	28ff      	cmp	r0, #255	; 0xff
 80275f8:	f000 80e5 	beq.w	80277c6 <__gxx_personality_v0+0x242>
 80275fc:	4639      	mov	r1, r7
 80275fe:	f7ff ff5b 	bl	80274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8027602:	4604      	mov	r4, r0
 8027604:	2300      	movs	r3, #0
 8027606:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 802760a:	4619      	mov	r1, r3
 802760c:	f8cd b000 	str.w	fp, [sp]
 8027610:	220f      	movs	r2, #15
 8027612:	4638      	mov	r0, r7
 8027614:	9414      	str	r4, [sp, #80]	; 0x50
 8027616:	f7e0 fbf7 	bl	8007e08 <_Unwind_VRS_Get>
 802761a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802761c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802761e:	f026 0601 	bic.w	r6, r6, #1
 8027622:	429d      	cmp	r5, r3
 8027624:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8027628:	f080 80d4 	bcs.w	80277d4 <__gxx_personality_v0+0x250>
 802762c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8027630:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8027634:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8027638:	2cff      	cmp	r4, #255	; 0xff
 802763a:	f04f 0100 	mov.w	r1, #0
 802763e:	d003      	beq.n	8027648 <__gxx_personality_v0+0xc4>
 8027640:	4620      	mov	r0, r4
 8027642:	f7ff ff39 	bl	80274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8027646:	4601      	mov	r1, r0
 8027648:	462a      	mov	r2, r5
 802764a:	4620      	mov	r0, r4
 802764c:	4653      	mov	r3, sl
 802764e:	f7ff fed3 	bl	80273f8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8027652:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8027656:	2cff      	cmp	r4, #255	; 0xff
 8027658:	4605      	mov	r5, r0
 802765a:	f04f 0100 	mov.w	r1, #0
 802765e:	d003      	beq.n	8027668 <__gxx_personality_v0+0xe4>
 8027660:	4620      	mov	r0, r4
 8027662:	f7ff ff29 	bl	80274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8027666:	4601      	mov	r1, r0
 8027668:	462a      	mov	r2, r5
 802766a:	4620      	mov	r0, r4
 802766c:	464b      	mov	r3, r9
 802766e:	f7ff fec3 	bl	80273f8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8027672:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8027676:	2cff      	cmp	r4, #255	; 0xff
 8027678:	4605      	mov	r5, r0
 802767a:	f04f 0100 	mov.w	r1, #0
 802767e:	d003      	beq.n	8027688 <__gxx_personality_v0+0x104>
 8027680:	4620      	mov	r0, r4
 8027682:	f7ff ff19 	bl	80274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8027686:	4601      	mov	r1, r0
 8027688:	462a      	mov	r2, r5
 802768a:	4620      	mov	r0, r4
 802768c:	465b      	mov	r3, fp
 802768e:	f7ff feb3 	bl	80273f8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8027692:	2400      	movs	r4, #0
 8027694:	4605      	mov	r5, r0
 8027696:	4621      	mov	r1, r4
 8027698:	f815 2b01 	ldrb.w	r2, [r5], #1
 802769c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80276a0:	408b      	lsls	r3, r1
 80276a2:	431c      	orrs	r4, r3
 80276a4:	0613      	lsls	r3, r2, #24
 80276a6:	f101 0107 	add.w	r1, r1, #7
 80276aa:	d4f5      	bmi.n	8027698 <__gxx_personality_v0+0x114>
 80276ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80276ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80276b0:	4413      	add	r3, r2
 80276b2:	42b3      	cmp	r3, r6
 80276b4:	d91f      	bls.n	80276f6 <__gxx_personality_v0+0x172>
 80276b6:	9b04      	ldr	r3, [sp, #16]
 80276b8:	07db      	lsls	r3, r3, #31
 80276ba:	f100 8091 	bmi.w	80277e0 <__gxx_personality_v0+0x25c>
 80276be:	9b04      	ldr	r3, [sp, #16]
 80276c0:	071c      	lsls	r4, r3, #28
 80276c2:	d515      	bpl.n	80276f0 <__gxx_personality_v0+0x16c>
 80276c4:	f7ff fcda 	bl	802707c <_ZSt9terminatev>
 80276c8:	f010 0408 	ands.w	r4, r0, #8
 80276cc:	d01c      	beq.n	8027708 <__gxx_personality_v0+0x184>
 80276ce:	aa18      	add	r2, sp, #96	; 0x60
 80276d0:	f044 0402 	orr.w	r4, r4, #2
 80276d4:	f842 1d2c 	str.w	r1, [r2, #-44]!
 80276d8:	4638      	mov	r0, r7
 80276da:	9200      	str	r2, [sp, #0]
 80276dc:	4619      	mov	r1, r3
 80276de:	220c      	movs	r2, #12
 80276e0:	9404      	str	r4, [sp, #16]
 80276e2:	f7e0 fbb3 	bl	8007e4c <_Unwind_VRS_Set>
 80276e6:	e776      	b.n	80275d6 <__gxx_personality_v0+0x52>
 80276e8:	2008      	movs	r0, #8
 80276ea:	b019      	add	sp, #100	; 0x64
 80276ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276f0:	4640      	mov	r0, r8
 80276f2:	f7ff fd33 	bl	802715c <__cxa_call_terminate>
 80276f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80276f8:	4413      	add	r3, r2
 80276fa:	42b3      	cmp	r3, r6
 80276fc:	f200 8088 	bhi.w	8027810 <__gxx_personality_v0+0x28c>
 8027700:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027702:	42ab      	cmp	r3, r5
 8027704:	d896      	bhi.n	8027634 <__gxx_personality_v0+0xb0>
 8027706:	e7d6      	b.n	80276b6 <__gxx_personality_v0+0x132>
 8027708:	ab12      	add	r3, sp, #72	; 0x48
 802770a:	9300      	str	r3, [sp, #0]
 802770c:	9306      	str	r3, [sp, #24]
 802770e:	220d      	movs	r2, #13
 8027710:	4623      	mov	r3, r4
 8027712:	4621      	mov	r1, r4
 8027714:	4638      	mov	r0, r7
 8027716:	f8d8 5020 	ldr.w	r5, [r8, #32]
 802771a:	f7e0 fb75 	bl	8007e08 <_Unwind_VRS_Get>
 802771e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027720:	429d      	cmp	r5, r3
 8027722:	d002      	beq.n	802772a <__gxx_personality_v0+0x1a6>
 8027724:	2302      	movs	r3, #2
 8027726:	9304      	str	r3, [sp, #16]
 8027728:	e74b      	b.n	80275c2 <__gxx_personality_v0+0x3e>
 802772a:	aa18      	add	r2, sp, #96	; 0x60
 802772c:	4623      	mov	r3, r4
 802772e:	f842 8d2c 	str.w	r8, [r2, #-44]!
 8027732:	4621      	mov	r1, r4
 8027734:	9200      	str	r2, [sp, #0]
 8027736:	4638      	mov	r0, r7
 8027738:	220c      	movs	r2, #12
 802773a:	f7e0 fb87 	bl	8007e4c <_Unwind_VRS_Set>
 802773e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8027742:	9303      	str	r3, [sp, #12]
 8027744:	2b00      	cmp	r3, #0
 8027746:	d0d3      	beq.n	80276f0 <__gxx_personality_v0+0x16c>
 8027748:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802774c:	461a      	mov	r2, r3
 802774e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8027752:	9305      	str	r3, [sp, #20]
 8027754:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8027758:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 802775c:	4613      	mov	r3, r2
 802775e:	2b00      	cmp	r3, #0
 8027760:	461c      	mov	r4, r3
 8027762:	f2c0 8127 	blt.w	80279b4 <__gxx_personality_v0+0x430>
 8027766:	2503      	movs	r5, #3
 8027768:	a918      	add	r1, sp, #96	; 0x60
 802776a:	2300      	movs	r3, #0
 802776c:	f841 8d28 	str.w	r8, [r1, #-40]!
 8027770:	461a      	mov	r2, r3
 8027772:	9100      	str	r1, [sp, #0]
 8027774:	4638      	mov	r0, r7
 8027776:	4619      	mov	r1, r3
 8027778:	f7e0 fb68 	bl	8007e4c <_Unwind_VRS_Set>
 802777c:	2300      	movs	r3, #0
 802777e:	4619      	mov	r1, r3
 8027780:	2201      	movs	r2, #1
 8027782:	f8cd a000 	str.w	sl, [sp]
 8027786:	4638      	mov	r0, r7
 8027788:	940f      	str	r4, [sp, #60]	; 0x3c
 802778a:	f7e0 fb5f 	bl	8007e4c <_Unwind_VRS_Set>
 802778e:	2300      	movs	r3, #0
 8027790:	4619      	mov	r1, r3
 8027792:	220f      	movs	r2, #15
 8027794:	f8cd 9000 	str.w	r9, [sp]
 8027798:	4638      	mov	r0, r7
 802779a:	f7e0 fb35 	bl	8007e08 <_Unwind_VRS_Get>
 802779e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80277a0:	9a03      	ldr	r2, [sp, #12]
 80277a2:	f8cd 9000 	str.w	r9, [sp]
 80277a6:	f003 0401 	and.w	r4, r3, #1
 80277aa:	2300      	movs	r3, #0
 80277ac:	4314      	orrs	r4, r2
 80277ae:	4638      	mov	r0, r7
 80277b0:	4619      	mov	r1, r3
 80277b2:	220f      	movs	r2, #15
 80277b4:	9410      	str	r4, [sp, #64]	; 0x40
 80277b6:	f7e0 fb49 	bl	8007e4c <_Unwind_VRS_Set>
 80277ba:	2d02      	cmp	r5, #2
 80277bc:	d005      	beq.n	80277ca <__gxx_personality_v0+0x246>
 80277be:	2007      	movs	r0, #7
 80277c0:	b019      	add	sp, #100	; 0x64
 80277c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277c6:	2400      	movs	r4, #0
 80277c8:	e71c      	b.n	8027604 <__gxx_personality_v0+0x80>
 80277ca:	4640      	mov	r0, r8
 80277cc:	f7ff fda2 	bl	8027314 <__cxa_begin_cleanup>
 80277d0:	2007      	movs	r0, #7
 80277d2:	e6ef      	b.n	80275b4 <__gxx_personality_v0+0x30>
 80277d4:	9b04      	ldr	r3, [sp, #16]
 80277d6:	07d9      	lsls	r1, r3, #31
 80277d8:	f57f af71 	bpl.w	80276be <__gxx_personality_v0+0x13a>
 80277dc:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 80277e0:	2400      	movs	r4, #0
 80277e2:	9403      	str	r4, [sp, #12]
 80277e4:	2300      	movs	r3, #0
 80277e6:	4619      	mov	r1, r3
 80277e8:	220d      	movs	r2, #13
 80277ea:	f8cd 9000 	str.w	r9, [sp]
 80277ee:	4638      	mov	r0, r7
 80277f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80277f2:	f7e0 fb09 	bl	8007e08 <_Unwind_VRS_Get>
 80277f6:	9a05      	ldr	r2, [sp, #20]
 80277f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80277fa:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 80277fe:	9a03      	ldr	r2, [sp, #12]
 8027800:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8027804:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 8027808:	f8c8 3020 	str.w	r3, [r8, #32]
 802780c:	2006      	movs	r0, #6
 802780e:	e6d1      	b.n	80275b4 <__gxx_personality_v0+0x30>
 8027810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027812:	2b00      	cmp	r3, #0
 8027814:	f43f aec6 	beq.w	80275a4 <__gxx_personality_v0+0x20>
 8027818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802781a:	189a      	adds	r2, r3, r2
 802781c:	9203      	str	r2, [sp, #12]
 802781e:	2c00      	cmp	r4, #0
 8027820:	f000 80f0 	beq.w	8027a04 <__gxx_personality_v0+0x480>
 8027824:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027826:	3c01      	subs	r4, #1
 8027828:	4423      	add	r3, r4
 802782a:	2a00      	cmp	r2, #0
 802782c:	f43f aeba 	beq.w	80275a4 <__gxx_personality_v0+0x20>
 8027830:	2b00      	cmp	r3, #0
 8027832:	f000 80f8 	beq.w	8027a26 <__gxx_personality_v0+0x4a2>
 8027836:	9a04      	ldr	r2, [sp, #16]
 8027838:	f012 0208 	ands.w	r2, r2, #8
 802783c:	9209      	str	r2, [sp, #36]	; 0x24
 802783e:	f000 8103 	beq.w	8027a48 <__gxx_personality_v0+0x4c4>
 8027842:	2147      	movs	r1, #71	; 0x47
 8027844:	224e      	movs	r2, #78	; 0x4e
 8027846:	f888 1000 	strb.w	r1, [r8]
 802784a:	f888 2001 	strb.w	r2, [r8, #1]
 802784e:	2155      	movs	r1, #85	; 0x55
 8027850:	2243      	movs	r2, #67	; 0x43
 8027852:	f888 1002 	strb.w	r1, [r8, #2]
 8027856:	f888 2003 	strb.w	r2, [r8, #3]
 802785a:	2146      	movs	r1, #70	; 0x46
 802785c:	224f      	movs	r2, #79	; 0x4f
 802785e:	f888 1004 	strb.w	r1, [r8, #4]
 8027862:	f888 2005 	strb.w	r2, [r8, #5]
 8027866:	2152      	movs	r1, #82	; 0x52
 8027868:	2200      	movs	r2, #0
 802786a:	f888 1006 	strb.w	r1, [r8, #6]
 802786e:	f888 2007 	strb.w	r2, [r8, #7]
 8027872:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 8027876:	2200      	movs	r2, #0
 8027878:	9207      	str	r2, [sp, #28]
 802787a:	f8cd 9020 	str.w	r9, [sp, #32]
 802787e:	2400      	movs	r4, #0
 8027880:	4621      	mov	r1, r4
 8027882:	e000      	b.n	8027886 <__gxx_personality_v0+0x302>
 8027884:	462b      	mov	r3, r5
 8027886:	461d      	mov	r5, r3
 8027888:	f815 0b01 	ldrb.w	r0, [r5], #1
 802788c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8027890:	408a      	lsls	r2, r1
 8027892:	0606      	lsls	r6, r0, #24
 8027894:	ea44 0402 	orr.w	r4, r4, r2
 8027898:	f101 0107 	add.w	r1, r1, #7
 802789c:	d4f2      	bmi.n	8027884 <__gxx_personality_v0+0x300>
 802789e:	291f      	cmp	r1, #31
 80278a0:	d805      	bhi.n	80278ae <__gxx_personality_v0+0x32a>
 80278a2:	0640      	lsls	r0, r0, #25
 80278a4:	d503      	bpl.n	80278ae <__gxx_personality_v0+0x32a>
 80278a6:	2201      	movs	r2, #1
 80278a8:	408a      	lsls	r2, r1
 80278aa:	4252      	negs	r2, r2
 80278ac:	4314      	orrs	r4, r2
 80278ae:	2600      	movs	r6, #0
 80278b0:	4631      	mov	r1, r6
 80278b2:	46a1      	mov	r9, r4
 80278b4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80278b8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80278bc:	408a      	lsls	r2, r1
 80278be:	4316      	orrs	r6, r2
 80278c0:	0602      	lsls	r2, r0, #24
 80278c2:	f101 0107 	add.w	r1, r1, #7
 80278c6:	d4f5      	bmi.n	80278b4 <__gxx_personality_v0+0x330>
 80278c8:	291f      	cmp	r1, #31
 80278ca:	d805      	bhi.n	80278d8 <__gxx_personality_v0+0x354>
 80278cc:	0647      	lsls	r7, r0, #25
 80278ce:	d503      	bpl.n	80278d8 <__gxx_personality_v0+0x354>
 80278d0:	2301      	movs	r3, #1
 80278d2:	408b      	lsls	r3, r1
 80278d4:	425b      	negs	r3, r3
 80278d6:	431e      	orrs	r6, r3
 80278d8:	2c00      	cmp	r4, #0
 80278da:	d04c      	beq.n	8027976 <__gxx_personality_v0+0x3f2>
 80278dc:	dc4e      	bgt.n	802797c <__gxx_personality_v0+0x3f8>
 80278de:	f104 0a01 	add.w	sl, r4, #1
 80278e2:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 80278e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80278e8:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80278ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80278f0:	f1b8 0f00 	cmp.w	r8, #0
 80278f4:	d001      	beq.n	80278fa <__gxx_personality_v0+0x376>
 80278f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278f8:	b12b      	cbz	r3, 8027906 <__gxx_personality_v0+0x382>
 80278fa:	b351      	cbz	r1, 8027952 <__gxx_personality_v0+0x3ce>
 80278fc:	2e00      	cmp	r6, #0
 80278fe:	f000 808b 	beq.w	8027a18 <__gxx_personality_v0+0x494>
 8027902:	19ab      	adds	r3, r5, r6
 8027904:	e7bb      	b.n	802787e <__gxx_personality_v0+0x2fa>
 8027906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027908:	9311      	str	r3, [sp, #68]	; 0x44
 802790a:	b929      	cbnz	r1, 8027918 <__gxx_personality_v0+0x394>
 802790c:	e091      	b.n	8027a32 <__gxx_personality_v0+0x4ae>
 802790e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8027912:	2900      	cmp	r1, #0
 8027914:	f000 808d 	beq.w	8027a32 <__gxx_personality_v0+0x4ae>
 8027918:	4439      	add	r1, r7
 802791a:	465b      	mov	r3, fp
 802791c:	2200      	movs	r2, #0
 802791e:	4640      	mov	r0, r8
 8027920:	f7ff fca0 	bl	8027264 <__cxa_type_match>
 8027924:	2800      	cmp	r0, #0
 8027926:	d0f2      	beq.n	802790e <__gxx_personality_v0+0x38a>
 8027928:	e7e8      	b.n	80278fc <__gxx_personality_v0+0x378>
 802792a:	00e2      	lsls	r2, r4, #3
 802792c:	4252      	negs	r2, r2
 802792e:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 8027932:	441a      	add	r2, r3
 8027934:	9b08      	ldr	r3, [sp, #32]
 8027936:	f7ff fd5f 	bl	80273f8 <_ZL28read_encoded_value_with_basehjPKhPj>
 802793a:	9910      	ldr	r1, [sp, #64]	; 0x40
 802793c:	b149      	cbz	r1, 8027952 <__gxx_personality_v0+0x3ce>
 802793e:	f1b8 0f00 	cmp.w	r8, #0
 8027942:	d0db      	beq.n	80278fc <__gxx_personality_v0+0x378>
 8027944:	ab0c      	add	r3, sp, #48	; 0x30
 8027946:	2200      	movs	r2, #0
 8027948:	4640      	mov	r0, r8
 802794a:	f7ff fc8b 	bl	8027264 <__cxa_type_match>
 802794e:	2800      	cmp	r0, #0
 8027950:	d0d4      	beq.n	80278fc <__gxx_personality_v0+0x378>
 8027952:	9b04      	ldr	r3, [sp, #16]
 8027954:	07d8      	lsls	r0, r3, #31
 8027956:	464a      	mov	r2, r9
 8027958:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 802795c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8027960:	f53f af40 	bmi.w	80277e4 <__gxx_personality_v0+0x260>
 8027964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027966:	2b00      	cmp	r3, #0
 8027968:	f43f aef8 	beq.w	802775c <__gxx_personality_v0+0x1d8>
 802796c:	2c00      	cmp	r4, #0
 802796e:	f6bf aefa 	bge.w	8027766 <__gxx_personality_v0+0x1e2>
 8027972:	f7ff fb91 	bl	8027098 <_ZSt10unexpectedv>
 8027976:	2301      	movs	r3, #1
 8027978:	9307      	str	r3, [sp, #28]
 802797a:	e7bf      	b.n	80278fc <__gxx_personality_v0+0x378>
 802797c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8027980:	28ff      	cmp	r0, #255	; 0xff
 8027982:	d03b      	beq.n	80279fc <__gxx_personality_v0+0x478>
 8027984:	f000 0307 	and.w	r3, r0, #7
 8027988:	2b04      	cmp	r3, #4
 802798a:	d86a      	bhi.n	8027a62 <__gxx_personality_v0+0x4de>
 802798c:	a201      	add	r2, pc, #4	; (adr r2, 8027994 <__gxx_personality_v0+0x410>)
 802798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027992:	bf00      	nop
 8027994:	080279af 	.word	0x080279af
 8027998:	08027a63 	.word	0x08027a63
 802799c:	080279a9 	.word	0x080279a9
 80279a0:	080279af 	.word	0x080279af
 80279a4:	0802792b 	.word	0x0802792b
 80279a8:	0062      	lsls	r2, r4, #1
 80279aa:	4252      	negs	r2, r2
 80279ac:	e7bf      	b.n	802792e <__gxx_personality_v0+0x3aa>
 80279ae:	00a2      	lsls	r2, r4, #2
 80279b0:	4252      	negs	r2, r2
 80279b2:	e7bc      	b.n	802792e <__gxx_personality_v0+0x3aa>
 80279b4:	3301      	adds	r3, #1
 80279b6:	461d      	mov	r5, r3
 80279b8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80279bc:	4638      	mov	r0, r7
 80279be:	f7ff fd97 	bl	80274f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80279c2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80279c6:	28ff      	cmp	r0, #255	; 0xff
 80279c8:	d01a      	beq.n	8027a00 <__gxx_personality_v0+0x47c>
 80279ca:	4639      	mov	r1, r7
 80279cc:	f7ff fd74 	bl	80274b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 80279d0:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 80279d4:	0092      	lsls	r2, r2, #2
 80279d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80279d8:	9014      	str	r0, [sp, #80]	; 0x50
 80279da:	58ab      	ldr	r3, [r5, r2]
 80279dc:	4415      	add	r5, r2
 80279de:	b133      	cbz	r3, 80279ee <__gxx_personality_v0+0x46a>
 80279e0:	462a      	mov	r2, r5
 80279e2:	2300      	movs	r3, #0
 80279e4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80279e8:	3301      	adds	r3, #1
 80279ea:	2900      	cmp	r1, #0
 80279ec:	d1fa      	bne.n	80279e4 <__gxx_personality_v0+0x460>
 80279ee:	2204      	movs	r2, #4
 80279f0:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 80279f4:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 80279f8:	2503      	movs	r5, #3
 80279fa:	e6b5      	b.n	8027768 <__gxx_personality_v0+0x1e4>
 80279fc:	2200      	movs	r2, #0
 80279fe:	e796      	b.n	802792e <__gxx_personality_v0+0x3aa>
 8027a00:	2000      	movs	r0, #0
 8027a02:	e7e5      	b.n	80279d0 <__gxx_personality_v0+0x44c>
 8027a04:	9b03      	ldr	r3, [sp, #12]
 8027a06:	2b00      	cmp	r3, #0
 8027a08:	f43f adcc 	beq.w	80275a4 <__gxx_personality_v0+0x20>
 8027a0c:	9b04      	ldr	r3, [sp, #16]
 8027a0e:	07da      	lsls	r2, r3, #31
 8027a10:	f53f adc8 	bmi.w	80275a4 <__gxx_personality_v0+0x20>
 8027a14:	2502      	movs	r5, #2
 8027a16:	e6a7      	b.n	8027768 <__gxx_personality_v0+0x1e4>
 8027a18:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 8027a1c:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8027a20:	2b00      	cmp	r3, #0
 8027a22:	f43f adbf 	beq.w	80275a4 <__gxx_personality_v0+0x20>
 8027a26:	9b04      	ldr	r3, [sp, #16]
 8027a28:	07dd      	lsls	r5, r3, #31
 8027a2a:	f53f adbb 	bmi.w	80275a4 <__gxx_personality_v0+0x20>
 8027a2e:	2400      	movs	r4, #0
 8027a30:	e7f0      	b.n	8027a14 <__gxx_personality_v0+0x490>
 8027a32:	9b04      	ldr	r3, [sp, #16]
 8027a34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027a36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8027a3a:	07de      	lsls	r6, r3, #31
 8027a3c:	4655      	mov	r5, sl
 8027a3e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8027a42:	f53f aecf 	bmi.w	80277e4 <__gxx_personality_v0+0x260>
 8027a46:	e7b7      	b.n	80279b8 <__gxx_personality_v0+0x434>
 8027a48:	f898 2007 	ldrb.w	r2, [r8, #7]
 8027a4c:	2a01      	cmp	r2, #1
 8027a4e:	bf0c      	ite	eq
 8027a50:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 8027a54:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 8027a58:	920c      	str	r2, [sp, #48]	; 0x30
 8027a5a:	e70a      	b.n	8027872 <__gxx_personality_v0+0x2ee>
 8027a5c:	f7ff f9ea 	bl	8026e34 <__cxa_begin_catch>
 8027a60:	e630      	b.n	80276c4 <__gxx_personality_v0+0x140>
 8027a62:	f000 fd91 	bl	8028588 <abort>
 8027a66:	bf00      	nop

08027a68 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8027a68:	b570      	push	{r4, r5, r6, lr}
 8027a6a:	6803      	ldr	r3, [r0, #0]
 8027a6c:	b084      	sub	sp, #16
 8027a6e:	2400      	movs	r4, #0
 8027a70:	699e      	ldr	r6, [r3, #24]
 8027a72:	9400      	str	r4, [sp, #0]
 8027a74:	2310      	movs	r3, #16
 8027a76:	4615      	mov	r5, r2
 8027a78:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8027a7c:	6812      	ldr	r2, [r2, #0]
 8027a7e:	f88d 4004 	strb.w	r4, [sp, #4]
 8027a82:	466b      	mov	r3, sp
 8027a84:	47b0      	blx	r6
 8027a86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8027a8a:	f003 0306 	and.w	r3, r3, #6
 8027a8e:	2b06      	cmp	r3, #6
 8027a90:	bf03      	ittte	eq
 8027a92:	9b00      	ldreq	r3, [sp, #0]
 8027a94:	602b      	streq	r3, [r5, #0]
 8027a96:	2001      	moveq	r0, #1
 8027a98:	4620      	movne	r0, r4
 8027a9a:	b004      	add	sp, #16
 8027a9c:	bd70      	pop	{r4, r5, r6, pc}
 8027a9e:	bf00      	nop

08027aa0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8027aa0:	9800      	ldr	r0, [sp, #0]
 8027aa2:	4290      	cmp	r0, r2
 8027aa4:	bf0c      	ite	eq
 8027aa6:	2006      	moveq	r0, #6
 8027aa8:	2001      	movne	r0, #1
 8027aaa:	4770      	bx	lr

08027aac <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8027aac:	b510      	push	{r4, lr}
 8027aae:	4b03      	ldr	r3, [pc, #12]	; (8027abc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8027ab0:	6003      	str	r3, [r0, #0]
 8027ab2:	4604      	mov	r4, r0
 8027ab4:	f7ff fb1a 	bl	80270ec <_ZNSt9type_infoD1Ev>
 8027ab8:	4620      	mov	r0, r4
 8027aba:	bd10      	pop	{r4, pc}
 8027abc:	080b38f4 	.word	0x080b38f4

08027ac0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8027ac0:	b510      	push	{r4, lr}
 8027ac2:	4b05      	ldr	r3, [pc, #20]	; (8027ad8 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8027ac4:	6003      	str	r3, [r0, #0]
 8027ac6:	4604      	mov	r4, r0
 8027ac8:	f7ff fb10 	bl	80270ec <_ZNSt9type_infoD1Ev>
 8027acc:	4620      	mov	r0, r4
 8027ace:	2108      	movs	r1, #8
 8027ad0:	f7ff f90c 	bl	8026cec <_ZdlPvj>
 8027ad4:	4620      	mov	r0, r4
 8027ad6:	bd10      	pop	{r4, pc}
 8027ad8:	080b38f4 	.word	0x080b38f4

08027adc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8027adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027ae0:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 8027ae4:	9d06      	ldr	r5, [sp, #24]
 8027ae6:	428d      	cmp	r5, r1
 8027ae8:	4690      	mov	r8, r2
 8027aea:	461f      	mov	r7, r3
 8027aec:	4606      	mov	r6, r0
 8027aee:	d00c      	beq.n	8027b0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8027af0:	4639      	mov	r1, r7
 8027af2:	4630      	mov	r0, r6
 8027af4:	f7ff fafe 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 8027af8:	b120      	cbz	r0, 8027b04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 8027afa:	2301      	movs	r3, #1
 8027afc:	6025      	str	r5, [r4, #0]
 8027afe:	f884 8004 	strb.w	r8, [r4, #4]
 8027b02:	71a3      	strb	r3, [r4, #6]
 8027b04:	2000      	movs	r0, #0
 8027b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b0a:	9907      	ldr	r1, [sp, #28]
 8027b0c:	f7ff faf2 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 8027b10:	2800      	cmp	r0, #0
 8027b12:	d0ed      	beq.n	8027af0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 8027b14:	f884 8005 	strb.w	r8, [r4, #5]
 8027b18:	2000      	movs	r0, #0
 8027b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b1e:	bf00      	nop

08027b20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8027b20:	b538      	push	{r3, r4, r5, lr}
 8027b22:	4615      	mov	r5, r2
 8027b24:	461c      	mov	r4, r3
 8027b26:	f7ff fae5 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 8027b2a:	b120      	cbz	r0, 8027b36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8027b2c:	2208      	movs	r2, #8
 8027b2e:	2306      	movs	r3, #6
 8027b30:	6025      	str	r5, [r4, #0]
 8027b32:	60e2      	str	r2, [r4, #12]
 8027b34:	7123      	strb	r3, [r4, #4]
 8027b36:	bd38      	pop	{r3, r4, r5, pc}

08027b38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8027b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b3c:	4617      	mov	r7, r2
 8027b3e:	461c      	mov	r4, r3
 8027b40:	4606      	mov	r6, r0
 8027b42:	460d      	mov	r5, r1
 8027b44:	f7ff fad6 	bl	80270f4 <_ZNKSt9type_infoeqERKS_>
 8027b48:	b908      	cbnz	r0, 8027b4e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8027b4a:	2c03      	cmp	r4, #3
 8027b4c:	d901      	bls.n	8027b52 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 8027b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b52:	682b      	ldr	r3, [r5, #0]
 8027b54:	463a      	mov	r2, r7
 8027b56:	4631      	mov	r1, r6
 8027b58:	4628      	mov	r0, r5
 8027b5a:	695b      	ldr	r3, [r3, #20]
 8027b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027b60:	4718      	bx	r3
 8027b62:	bf00      	nop

08027b64 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8027b64:	b570      	push	{r4, r5, r6, lr}
 8027b66:	4b3c      	ldr	r3, [pc, #240]	; (8027c58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8027b68:	781a      	ldrb	r2, [r3, #0]
 8027b6a:	b082      	sub	sp, #8
 8027b6c:	2a00      	cmp	r2, #0
 8027b6e:	d135      	bne.n	8027bdc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8027b70:	2401      	movs	r4, #1
 8027b72:	701c      	strb	r4, [r3, #0]
 8027b74:	f000 f87e 	bl	8027c74 <__cxa_current_exception_type>
 8027b78:	2800      	cmp	r0, #0
 8027b7a:	d03d      	beq.n	8027bf8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 8027b7c:	6844      	ldr	r4, [r0, #4]
 8027b7e:	4d37      	ldr	r5, [pc, #220]	; (8027c5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8027b80:	7823      	ldrb	r3, [r4, #0]
 8027b82:	2b2a      	cmp	r3, #42	; 0x2a
 8027b84:	ab02      	add	r3, sp, #8
 8027b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027b8a:	bf08      	it	eq
 8027b8c:	3401      	addeq	r4, #1
 8027b8e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8027b92:	2200      	movs	r2, #0
 8027b94:	4611      	mov	r1, r2
 8027b96:	4620      	mov	r0, r4
 8027b98:	f7df f832 	bl	8006c00 <__cxa_demangle>
 8027b9c:	682b      	ldr	r3, [r5, #0]
 8027b9e:	4606      	mov	r6, r0
 8027ba0:	68db      	ldr	r3, [r3, #12]
 8027ba2:	482f      	ldr	r0, [pc, #188]	; (8027c60 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8027ba4:	2230      	movs	r2, #48	; 0x30
 8027ba6:	2101      	movs	r1, #1
 8027ba8:	f000 ff02 	bl	80289b0 <fwrite>
 8027bac:	9b01      	ldr	r3, [sp, #4]
 8027bae:	b17b      	cbz	r3, 8027bd0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8027bb0:	682b      	ldr	r3, [r5, #0]
 8027bb2:	4620      	mov	r0, r4
 8027bb4:	68d9      	ldr	r1, [r3, #12]
 8027bb6:	f000 fd5b 	bl	8028670 <fputs>
 8027bba:	682b      	ldr	r3, [r5, #0]
 8027bbc:	4829      	ldr	r0, [pc, #164]	; (8027c64 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8027bbe:	68db      	ldr	r3, [r3, #12]
 8027bc0:	2202      	movs	r2, #2
 8027bc2:	2101      	movs	r1, #1
 8027bc4:	f000 fef4 	bl	80289b0 <fwrite>
 8027bc8:	9b01      	ldr	r3, [sp, #4]
 8027bca:	b18b      	cbz	r3, 8027bf0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8027bcc:	f7ff f8fa 	bl	8026dc4 <__cxa_rethrow>
 8027bd0:	682b      	ldr	r3, [r5, #0]
 8027bd2:	4630      	mov	r0, r6
 8027bd4:	68d9      	ldr	r1, [r3, #12]
 8027bd6:	f000 fd4b 	bl	8028670 <fputs>
 8027bda:	e7ee      	b.n	8027bba <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8027bdc:	4b1f      	ldr	r3, [pc, #124]	; (8027c5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8027bde:	4822      	ldr	r0, [pc, #136]	; (8027c68 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8027be0:	681b      	ldr	r3, [r3, #0]
 8027be2:	221d      	movs	r2, #29
 8027be4:	68db      	ldr	r3, [r3, #12]
 8027be6:	2101      	movs	r1, #1
 8027be8:	f000 fee2 	bl	80289b0 <fwrite>
 8027bec:	f000 fccc 	bl	8028588 <abort>
 8027bf0:	4630      	mov	r0, r6
 8027bf2:	f000 ff1b 	bl	8028a2c <free>
 8027bf6:	e7e9      	b.n	8027bcc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 8027bf8:	4b18      	ldr	r3, [pc, #96]	; (8027c5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8027bfa:	481c      	ldr	r0, [pc, #112]	; (8027c6c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8027bfc:	681b      	ldr	r3, [r3, #0]
 8027bfe:	4621      	mov	r1, r4
 8027c00:	68db      	ldr	r3, [r3, #12]
 8027c02:	222d      	movs	r2, #45	; 0x2d
 8027c04:	f000 fed4 	bl	80289b0 <fwrite>
 8027c08:	f000 fcbe 	bl	8028588 <abort>
 8027c0c:	2901      	cmp	r1, #1
 8027c0e:	460c      	mov	r4, r1
 8027c10:	d119      	bne.n	8027c46 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 8027c12:	f7ff f90f 	bl	8026e34 <__cxa_begin_catch>
 8027c16:	6803      	ldr	r3, [r0, #0]
 8027c18:	689b      	ldr	r3, [r3, #8]
 8027c1a:	4798      	blx	r3
 8027c1c:	682b      	ldr	r3, [r5, #0]
 8027c1e:	4606      	mov	r6, r0
 8027c20:	68db      	ldr	r3, [r3, #12]
 8027c22:	4813      	ldr	r0, [pc, #76]	; (8027c70 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8027c24:	4621      	mov	r1, r4
 8027c26:	220b      	movs	r2, #11
 8027c28:	f000 fec2 	bl	80289b0 <fwrite>
 8027c2c:	682b      	ldr	r3, [r5, #0]
 8027c2e:	4630      	mov	r0, r6
 8027c30:	68d9      	ldr	r1, [r3, #12]
 8027c32:	f000 fd1d 	bl	8028670 <fputs>
 8027c36:	682b      	ldr	r3, [r5, #0]
 8027c38:	200a      	movs	r0, #10
 8027c3a:	68d9      	ldr	r1, [r3, #12]
 8027c3c:	f000 fcd6 	bl	80285ec <fputc>
 8027c40:	f7ff f938 	bl	8026eb4 <__cxa_end_catch>
 8027c44:	e7e0      	b.n	8027c08 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8027c46:	f7ff f8f5 	bl	8026e34 <__cxa_begin_catch>
 8027c4a:	f7ff f933 	bl	8026eb4 <__cxa_end_catch>
 8027c4e:	e7db      	b.n	8027c08 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8027c50:	f7ff f930 	bl	8026eb4 <__cxa_end_catch>
 8027c54:	f7ff fb00 	bl	8027258 <__cxa_end_cleanup>
 8027c58:	2003cf48 	.word	0x2003cf48
 8027c5c:	20008430 	.word	0x20008430
 8027c60:	080b3938 	.word	0x080b3938
 8027c64:	080b396c 	.word	0x080b396c
 8027c68:	080b3918 	.word	0x080b3918
 8027c6c:	080b3970 	.word	0x080b3970
 8027c70:	080b39a0 	.word	0x080b39a0

08027c74 <__cxa_current_exception_type>:
 8027c74:	b508      	push	{r3, lr}
 8027c76:	f7ff fbbb 	bl	80273f0 <__cxa_get_globals>
 8027c7a:	6800      	ldr	r0, [r0, #0]
 8027c7c:	b130      	cbz	r0, 8027c8c <__cxa_current_exception_type+0x18>
 8027c7e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8027c82:	6800      	ldr	r0, [r0, #0]
 8027c84:	2b01      	cmp	r3, #1
 8027c86:	bf08      	it	eq
 8027c88:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 8027c8c:	bd08      	pop	{r3, pc}
 8027c8e:	bf00      	nop

08027c90 <round>:
 8027c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c92:	ec57 6b10 	vmov	r6, r7, d0
 8027c96:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8027c9a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8027c9e:	2c13      	cmp	r4, #19
 8027ca0:	463b      	mov	r3, r7
 8027ca2:	463d      	mov	r5, r7
 8027ca4:	dc17      	bgt.n	8027cd6 <round+0x46>
 8027ca6:	2c00      	cmp	r4, #0
 8027ca8:	da09      	bge.n	8027cbe <round+0x2e>
 8027caa:	3401      	adds	r4, #1
 8027cac:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8027cb0:	d103      	bne.n	8027cba <round+0x2a>
 8027cb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8027cb6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027cba:	2100      	movs	r1, #0
 8027cbc:	e02c      	b.n	8027d18 <round+0x88>
 8027cbe:	4a18      	ldr	r2, [pc, #96]	; (8027d20 <round+0x90>)
 8027cc0:	4122      	asrs	r2, r4
 8027cc2:	4217      	tst	r7, r2
 8027cc4:	d100      	bne.n	8027cc8 <round+0x38>
 8027cc6:	b19e      	cbz	r6, 8027cf0 <round+0x60>
 8027cc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8027ccc:	4123      	asrs	r3, r4
 8027cce:	442b      	add	r3, r5
 8027cd0:	ea23 0302 	bic.w	r3, r3, r2
 8027cd4:	e7f1      	b.n	8027cba <round+0x2a>
 8027cd6:	2c33      	cmp	r4, #51	; 0x33
 8027cd8:	dd0d      	ble.n	8027cf6 <round+0x66>
 8027cda:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8027cde:	d107      	bne.n	8027cf0 <round+0x60>
 8027ce0:	4630      	mov	r0, r6
 8027ce2:	4639      	mov	r1, r7
 8027ce4:	ee10 2a10 	vmov	r2, s0
 8027ce8:	f7df f86a 	bl	8006dc0 <__adddf3>
 8027cec:	4606      	mov	r6, r0
 8027cee:	460f      	mov	r7, r1
 8027cf0:	ec47 6b10 	vmov	d0, r6, r7
 8027cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027cf6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8027cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027cfe:	40d0      	lsrs	r0, r2
 8027d00:	4206      	tst	r6, r0
 8027d02:	d0f5      	beq.n	8027cf0 <round+0x60>
 8027d04:	2201      	movs	r2, #1
 8027d06:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8027d0a:	fa02 f404 	lsl.w	r4, r2, r4
 8027d0e:	1931      	adds	r1, r6, r4
 8027d10:	bf28      	it	cs
 8027d12:	189b      	addcs	r3, r3, r2
 8027d14:	ea21 0100 	bic.w	r1, r1, r0
 8027d18:	461f      	mov	r7, r3
 8027d1a:	460e      	mov	r6, r1
 8027d1c:	e7e8      	b.n	8027cf0 <round+0x60>
 8027d1e:	bf00      	nop
 8027d20:	000fffff 	.word	0x000fffff
 8027d24:	00000000 	.word	0x00000000

08027d28 <exp>:
 8027d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d2a:	ed2d 8b02 	vpush	{d8}
 8027d2e:	4e38      	ldr	r6, [pc, #224]	; (8027e10 <exp+0xe8>)
 8027d30:	b08b      	sub	sp, #44	; 0x2c
 8027d32:	ec55 4b10 	vmov	r4, r5, d0
 8027d36:	f000 f8f3 	bl	8027f20 <__ieee754_exp>
 8027d3a:	f996 3000 	ldrsb.w	r3, [r6]
 8027d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8027d42:	eef0 8a60 	vmov.f32	s17, s1
 8027d46:	3301      	adds	r3, #1
 8027d48:	d02c      	beq.n	8027da4 <exp+0x7c>
 8027d4a:	ec45 4b10 	vmov	d0, r4, r5
 8027d4e:	f000 fc09 	bl	8028564 <finite>
 8027d52:	b338      	cbz	r0, 8027da4 <exp+0x7c>
 8027d54:	a32a      	add	r3, pc, #168	; (adr r3, 8027e00 <exp+0xd8>)
 8027d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d5a:	4620      	mov	r0, r4
 8027d5c:	4629      	mov	r1, r5
 8027d5e:	f7df fc75 	bl	800764c <__aeabi_dcmpgt>
 8027d62:	4607      	mov	r7, r0
 8027d64:	2800      	cmp	r0, #0
 8027d66:	d030      	beq.n	8027dca <exp+0xa2>
 8027d68:	2303      	movs	r3, #3
 8027d6a:	9300      	str	r3, [sp, #0]
 8027d6c:	4b29      	ldr	r3, [pc, #164]	; (8027e14 <exp+0xec>)
 8027d6e:	9301      	str	r3, [sp, #4]
 8027d70:	2300      	movs	r3, #0
 8027d72:	9308      	str	r3, [sp, #32]
 8027d74:	f996 3000 	ldrsb.w	r3, [r6]
 8027d78:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8027d7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8027d80:	b9c3      	cbnz	r3, 8027db4 <exp+0x8c>
 8027d82:	4b25      	ldr	r3, [pc, #148]	; (8027e18 <exp+0xf0>)
 8027d84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8027d88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027d8c:	4668      	mov	r0, sp
 8027d8e:	f000 fbf1 	bl	8028574 <matherr>
 8027d92:	b1a8      	cbz	r0, 8027dc0 <exp+0x98>
 8027d94:	9b08      	ldr	r3, [sp, #32]
 8027d96:	b11b      	cbz	r3, 8027da0 <exp+0x78>
 8027d98:	f000 fbfe 	bl	8028598 <__errno>
 8027d9c:	9b08      	ldr	r3, [sp, #32]
 8027d9e:	6003      	str	r3, [r0, #0]
 8027da0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8027da4:	eeb0 0a48 	vmov.f32	s0, s16
 8027da8:	eef0 0a68 	vmov.f32	s1, s17
 8027dac:	b00b      	add	sp, #44	; 0x2c
 8027dae:	ecbd 8b02 	vpop	{d8}
 8027db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027db4:	4919      	ldr	r1, [pc, #100]	; (8027e1c <exp+0xf4>)
 8027db6:	2000      	movs	r0, #0
 8027db8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027dbc:	2b02      	cmp	r3, #2
 8027dbe:	d1e5      	bne.n	8027d8c <exp+0x64>
 8027dc0:	f000 fbea 	bl	8028598 <__errno>
 8027dc4:	2322      	movs	r3, #34	; 0x22
 8027dc6:	6003      	str	r3, [r0, #0]
 8027dc8:	e7e4      	b.n	8027d94 <exp+0x6c>
 8027dca:	a30f      	add	r3, pc, #60	; (adr r3, 8027e08 <exp+0xe0>)
 8027dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027dd0:	4620      	mov	r0, r4
 8027dd2:	4629      	mov	r1, r5
 8027dd4:	f7df fc1c 	bl	8007610 <__aeabi_dcmplt>
 8027dd8:	2800      	cmp	r0, #0
 8027dda:	d0e3      	beq.n	8027da4 <exp+0x7c>
 8027ddc:	2304      	movs	r3, #4
 8027dde:	9300      	str	r3, [sp, #0]
 8027de0:	4b0c      	ldr	r3, [pc, #48]	; (8027e14 <exp+0xec>)
 8027de2:	9301      	str	r3, [sp, #4]
 8027de4:	2200      	movs	r2, #0
 8027de6:	2300      	movs	r3, #0
 8027de8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027dec:	9708      	str	r7, [sp, #32]
 8027dee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8027df2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8027df6:	f996 3000 	ldrsb.w	r3, [r6]
 8027dfa:	e7df      	b.n	8027dbc <exp+0x94>
 8027dfc:	f3af 8000 	nop.w
 8027e00:	fefa39ef 	.word	0xfefa39ef
 8027e04:	40862e42 	.word	0x40862e42
 8027e08:	d52d3051 	.word	0xd52d3051
 8027e0c:	c0874910 	.word	0xc0874910
 8027e10:	2000842c 	.word	0x2000842c
 8027e14:	080b4210 	.word	0x080b4210
 8027e18:	47efffff 	.word	0x47efffff
 8027e1c:	7ff00000 	.word	0x7ff00000

08027e20 <log>:
 8027e20:	b570      	push	{r4, r5, r6, lr}
 8027e22:	ed2d 8b02 	vpush	{d8}
 8027e26:	b08a      	sub	sp, #40	; 0x28
 8027e28:	ec55 4b10 	vmov	r4, r5, d0
 8027e2c:	f000 f9e8 	bl	8028200 <__ieee754_log>
 8027e30:	4b36      	ldr	r3, [pc, #216]	; (8027f0c <log+0xec>)
 8027e32:	eeb0 8a40 	vmov.f32	s16, s0
 8027e36:	eef0 8a60 	vmov.f32	s17, s1
 8027e3a:	f993 6000 	ldrsb.w	r6, [r3]
 8027e3e:	1c73      	adds	r3, r6, #1
 8027e40:	d05b      	beq.n	8027efa <log+0xda>
 8027e42:	4622      	mov	r2, r4
 8027e44:	462b      	mov	r3, r5
 8027e46:	4620      	mov	r0, r4
 8027e48:	4629      	mov	r1, r5
 8027e4a:	f7df fc09 	bl	8007660 <__aeabi_dcmpun>
 8027e4e:	2800      	cmp	r0, #0
 8027e50:	d153      	bne.n	8027efa <log+0xda>
 8027e52:	2200      	movs	r2, #0
 8027e54:	2300      	movs	r3, #0
 8027e56:	4620      	mov	r0, r4
 8027e58:	4629      	mov	r1, r5
 8027e5a:	f7df fbf7 	bl	800764c <__aeabi_dcmpgt>
 8027e5e:	2800      	cmp	r0, #0
 8027e60:	d14b      	bne.n	8027efa <log+0xda>
 8027e62:	4b2b      	ldr	r3, [pc, #172]	; (8027f10 <log+0xf0>)
 8027e64:	9301      	str	r3, [sp, #4]
 8027e66:	9008      	str	r0, [sp, #32]
 8027e68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8027e6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8027e70:	b9a6      	cbnz	r6, 8027e9c <log+0x7c>
 8027e72:	4b28      	ldr	r3, [pc, #160]	; (8027f14 <log+0xf4>)
 8027e74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8027e78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027e7c:	4620      	mov	r0, r4
 8027e7e:	2200      	movs	r2, #0
 8027e80:	2300      	movs	r3, #0
 8027e82:	4629      	mov	r1, r5
 8027e84:	f7df fbba 	bl	80075fc <__aeabi_dcmpeq>
 8027e88:	bb40      	cbnz	r0, 8027edc <log+0xbc>
 8027e8a:	2301      	movs	r3, #1
 8027e8c:	2e02      	cmp	r6, #2
 8027e8e:	9300      	str	r3, [sp, #0]
 8027e90:	d119      	bne.n	8027ec6 <log+0xa6>
 8027e92:	f000 fb81 	bl	8028598 <__errno>
 8027e96:	2321      	movs	r3, #33	; 0x21
 8027e98:	6003      	str	r3, [r0, #0]
 8027e9a:	e019      	b.n	8027ed0 <log+0xb0>
 8027e9c:	4b1e      	ldr	r3, [pc, #120]	; (8027f18 <log+0xf8>)
 8027e9e:	2200      	movs	r2, #0
 8027ea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027ea4:	4620      	mov	r0, r4
 8027ea6:	2200      	movs	r2, #0
 8027ea8:	2300      	movs	r3, #0
 8027eaa:	4629      	mov	r1, r5
 8027eac:	f7df fba6 	bl	80075fc <__aeabi_dcmpeq>
 8027eb0:	2800      	cmp	r0, #0
 8027eb2:	d0ea      	beq.n	8027e8a <log+0x6a>
 8027eb4:	2302      	movs	r3, #2
 8027eb6:	429e      	cmp	r6, r3
 8027eb8:	9300      	str	r3, [sp, #0]
 8027eba:	d111      	bne.n	8027ee0 <log+0xc0>
 8027ebc:	f000 fb6c 	bl	8028598 <__errno>
 8027ec0:	2322      	movs	r3, #34	; 0x22
 8027ec2:	6003      	str	r3, [r0, #0]
 8027ec4:	e011      	b.n	8027eea <log+0xca>
 8027ec6:	4668      	mov	r0, sp
 8027ec8:	f000 fb54 	bl	8028574 <matherr>
 8027ecc:	2800      	cmp	r0, #0
 8027ece:	d0e0      	beq.n	8027e92 <log+0x72>
 8027ed0:	4812      	ldr	r0, [pc, #72]	; (8027f1c <log+0xfc>)
 8027ed2:	f000 fb51 	bl	8028578 <nan>
 8027ed6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8027eda:	e006      	b.n	8027eea <log+0xca>
 8027edc:	2302      	movs	r3, #2
 8027ede:	9300      	str	r3, [sp, #0]
 8027ee0:	4668      	mov	r0, sp
 8027ee2:	f000 fb47 	bl	8028574 <matherr>
 8027ee6:	2800      	cmp	r0, #0
 8027ee8:	d0e8      	beq.n	8027ebc <log+0x9c>
 8027eea:	9b08      	ldr	r3, [sp, #32]
 8027eec:	b11b      	cbz	r3, 8027ef6 <log+0xd6>
 8027eee:	f000 fb53 	bl	8028598 <__errno>
 8027ef2:	9b08      	ldr	r3, [sp, #32]
 8027ef4:	6003      	str	r3, [r0, #0]
 8027ef6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8027efa:	eeb0 0a48 	vmov.f32	s0, s16
 8027efe:	eef0 0a68 	vmov.f32	s1, s17
 8027f02:	b00a      	add	sp, #40	; 0x28
 8027f04:	ecbd 8b02 	vpop	{d8}
 8027f08:	bd70      	pop	{r4, r5, r6, pc}
 8027f0a:	bf00      	nop
 8027f0c:	2000842c 	.word	0x2000842c
 8027f10:	080b4214 	.word	0x080b4214
 8027f14:	c7efffff 	.word	0xc7efffff
 8027f18:	fff00000 	.word	0xfff00000
 8027f1c:	080b43b5 	.word	0x080b43b5

08027f20 <__ieee754_exp>:
 8027f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027f24:	ec55 4b10 	vmov	r4, r5, d0
 8027f28:	4aab      	ldr	r2, [pc, #684]	; (80281d8 <__ieee754_exp+0x2b8>)
 8027f2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8027f2e:	4296      	cmp	r6, r2
 8027f30:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8027f34:	d932      	bls.n	8027f9c <__ieee754_exp+0x7c>
 8027f36:	4aa9      	ldr	r2, [pc, #676]	; (80281dc <__ieee754_exp+0x2bc>)
 8027f38:	4296      	cmp	r6, r2
 8027f3a:	d913      	bls.n	8027f64 <__ieee754_exp+0x44>
 8027f3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8027f40:	4323      	orrs	r3, r4
 8027f42:	ee10 2a10 	vmov	r2, s0
 8027f46:	d007      	beq.n	8027f58 <__ieee754_exp+0x38>
 8027f48:	462b      	mov	r3, r5
 8027f4a:	4620      	mov	r0, r4
 8027f4c:	4629      	mov	r1, r5
 8027f4e:	f7de ff37 	bl	8006dc0 <__adddf3>
 8027f52:	4604      	mov	r4, r0
 8027f54:	460d      	mov	r5, r1
 8027f56:	e000      	b.n	8027f5a <__ieee754_exp+0x3a>
 8027f58:	b9ef      	cbnz	r7, 8027f96 <__ieee754_exp+0x76>
 8027f5a:	ec45 4b10 	vmov	d0, r4, r5
 8027f5e:	b004      	add	sp, #16
 8027f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027f64:	a386      	add	r3, pc, #536	; (adr r3, 8028180 <__ieee754_exp+0x260>)
 8027f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f6a:	ee10 0a10 	vmov	r0, s0
 8027f6e:	4629      	mov	r1, r5
 8027f70:	f7df fb6c 	bl	800764c <__aeabi_dcmpgt>
 8027f74:	b138      	cbz	r0, 8027f86 <__ieee754_exp+0x66>
 8027f76:	a384      	add	r3, pc, #528	; (adr r3, 8028188 <__ieee754_exp+0x268>)
 8027f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f7c:	4610      	mov	r0, r2
 8027f7e:	4619      	mov	r1, r3
 8027f80:	f7df f8d4 	bl	800712c <__aeabi_dmul>
 8027f84:	e7e5      	b.n	8027f52 <__ieee754_exp+0x32>
 8027f86:	a382      	add	r3, pc, #520	; (adr r3, 8028190 <__ieee754_exp+0x270>)
 8027f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f8c:	4620      	mov	r0, r4
 8027f8e:	4629      	mov	r1, r5
 8027f90:	f7df fb3e 	bl	8007610 <__aeabi_dcmplt>
 8027f94:	b130      	cbz	r0, 8027fa4 <__ieee754_exp+0x84>
 8027f96:	2400      	movs	r4, #0
 8027f98:	2500      	movs	r5, #0
 8027f9a:	e7de      	b.n	8027f5a <__ieee754_exp+0x3a>
 8027f9c:	4b90      	ldr	r3, [pc, #576]	; (80281e0 <__ieee754_exp+0x2c0>)
 8027f9e:	429e      	cmp	r6, r3
 8027fa0:	f240 80a6 	bls.w	80280f0 <__ieee754_exp+0x1d0>
 8027fa4:	4b8f      	ldr	r3, [pc, #572]	; (80281e4 <__ieee754_exp+0x2c4>)
 8027fa6:	429e      	cmp	r6, r3
 8027fa8:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8027fac:	d875      	bhi.n	802809a <__ieee754_exp+0x17a>
 8027fae:	4b8e      	ldr	r3, [pc, #568]	; (80281e8 <__ieee754_exp+0x2c8>)
 8027fb0:	4e8e      	ldr	r6, [pc, #568]	; (80281ec <__ieee754_exp+0x2cc>)
 8027fb2:	4443      	add	r3, r8
 8027fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027fb8:	4620      	mov	r0, r4
 8027fba:	4629      	mov	r1, r5
 8027fbc:	f7de fefe 	bl	8006dbc <__aeabi_dsub>
 8027fc0:	4446      	add	r6, r8
 8027fc2:	e9cd 0100 	strd	r0, r1, [sp]
 8027fc6:	e9d6 8900 	ldrd	r8, r9, [r6]
 8027fca:	f1c7 0a01 	rsb	sl, r7, #1
 8027fce:	ebaa 0a07 	sub.w	sl, sl, r7
 8027fd2:	4642      	mov	r2, r8
 8027fd4:	464b      	mov	r3, r9
 8027fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027fda:	f7de feef 	bl	8006dbc <__aeabi_dsub>
 8027fde:	4604      	mov	r4, r0
 8027fe0:	460d      	mov	r5, r1
 8027fe2:	4622      	mov	r2, r4
 8027fe4:	462b      	mov	r3, r5
 8027fe6:	4620      	mov	r0, r4
 8027fe8:	4629      	mov	r1, r5
 8027fea:	f7df f89f 	bl	800712c <__aeabi_dmul>
 8027fee:	a36a      	add	r3, pc, #424	; (adr r3, 8028198 <__ieee754_exp+0x278>)
 8027ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ff4:	4606      	mov	r6, r0
 8027ff6:	460f      	mov	r7, r1
 8027ff8:	f7df f898 	bl	800712c <__aeabi_dmul>
 8027ffc:	a368      	add	r3, pc, #416	; (adr r3, 80281a0 <__ieee754_exp+0x280>)
 8027ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028002:	f7de fedb 	bl	8006dbc <__aeabi_dsub>
 8028006:	4632      	mov	r2, r6
 8028008:	463b      	mov	r3, r7
 802800a:	f7df f88f 	bl	800712c <__aeabi_dmul>
 802800e:	a366      	add	r3, pc, #408	; (adr r3, 80281a8 <__ieee754_exp+0x288>)
 8028010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028014:	f7de fed4 	bl	8006dc0 <__adddf3>
 8028018:	4632      	mov	r2, r6
 802801a:	463b      	mov	r3, r7
 802801c:	f7df f886 	bl	800712c <__aeabi_dmul>
 8028020:	a363      	add	r3, pc, #396	; (adr r3, 80281b0 <__ieee754_exp+0x290>)
 8028022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028026:	f7de fec9 	bl	8006dbc <__aeabi_dsub>
 802802a:	4632      	mov	r2, r6
 802802c:	463b      	mov	r3, r7
 802802e:	f7df f87d 	bl	800712c <__aeabi_dmul>
 8028032:	a361      	add	r3, pc, #388	; (adr r3, 80281b8 <__ieee754_exp+0x298>)
 8028034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028038:	f7de fec2 	bl	8006dc0 <__adddf3>
 802803c:	4632      	mov	r2, r6
 802803e:	463b      	mov	r3, r7
 8028040:	f7df f874 	bl	800712c <__aeabi_dmul>
 8028044:	4602      	mov	r2, r0
 8028046:	460b      	mov	r3, r1
 8028048:	4620      	mov	r0, r4
 802804a:	4629      	mov	r1, r5
 802804c:	f7de feb6 	bl	8006dbc <__aeabi_dsub>
 8028050:	4602      	mov	r2, r0
 8028052:	460b      	mov	r3, r1
 8028054:	4606      	mov	r6, r0
 8028056:	460f      	mov	r7, r1
 8028058:	4620      	mov	r0, r4
 802805a:	4629      	mov	r1, r5
 802805c:	f7df f866 	bl	800712c <__aeabi_dmul>
 8028060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028064:	f1ba 0f00 	cmp.w	sl, #0
 8028068:	d15c      	bne.n	8028124 <__ieee754_exp+0x204>
 802806a:	2200      	movs	r2, #0
 802806c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028070:	4630      	mov	r0, r6
 8028072:	4639      	mov	r1, r7
 8028074:	f7de fea2 	bl	8006dbc <__aeabi_dsub>
 8028078:	4602      	mov	r2, r0
 802807a:	460b      	mov	r3, r1
 802807c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028080:	f7df f97e 	bl	8007380 <__aeabi_ddiv>
 8028084:	4622      	mov	r2, r4
 8028086:	462b      	mov	r3, r5
 8028088:	f7de fe98 	bl	8006dbc <__aeabi_dsub>
 802808c:	4602      	mov	r2, r0
 802808e:	460b      	mov	r3, r1
 8028090:	2000      	movs	r0, #0
 8028092:	4957      	ldr	r1, [pc, #348]	; (80281f0 <__ieee754_exp+0x2d0>)
 8028094:	f7de fe92 	bl	8006dbc <__aeabi_dsub>
 8028098:	e75b      	b.n	8027f52 <__ieee754_exp+0x32>
 802809a:	4e56      	ldr	r6, [pc, #344]	; (80281f4 <__ieee754_exp+0x2d4>)
 802809c:	a348      	add	r3, pc, #288	; (adr r3, 80281c0 <__ieee754_exp+0x2a0>)
 802809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280a2:	4446      	add	r6, r8
 80280a4:	4620      	mov	r0, r4
 80280a6:	4629      	mov	r1, r5
 80280a8:	f7df f840 	bl	800712c <__aeabi_dmul>
 80280ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80280b0:	f7de fe86 	bl	8006dc0 <__adddf3>
 80280b4:	f7df faea 	bl	800768c <__aeabi_d2iz>
 80280b8:	4682      	mov	sl, r0
 80280ba:	f7de ffcd 	bl	8007058 <__aeabi_i2d>
 80280be:	a342      	add	r3, pc, #264	; (adr r3, 80281c8 <__ieee754_exp+0x2a8>)
 80280c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280c4:	4606      	mov	r6, r0
 80280c6:	460f      	mov	r7, r1
 80280c8:	f7df f830 	bl	800712c <__aeabi_dmul>
 80280cc:	4602      	mov	r2, r0
 80280ce:	460b      	mov	r3, r1
 80280d0:	4620      	mov	r0, r4
 80280d2:	4629      	mov	r1, r5
 80280d4:	f7de fe72 	bl	8006dbc <__aeabi_dsub>
 80280d8:	a33d      	add	r3, pc, #244	; (adr r3, 80281d0 <__ieee754_exp+0x2b0>)
 80280da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280de:	e9cd 0100 	strd	r0, r1, [sp]
 80280e2:	4630      	mov	r0, r6
 80280e4:	4639      	mov	r1, r7
 80280e6:	f7df f821 	bl	800712c <__aeabi_dmul>
 80280ea:	4680      	mov	r8, r0
 80280ec:	4689      	mov	r9, r1
 80280ee:	e770      	b.n	8027fd2 <__ieee754_exp+0xb2>
 80280f0:	4b41      	ldr	r3, [pc, #260]	; (80281f8 <__ieee754_exp+0x2d8>)
 80280f2:	429e      	cmp	r6, r3
 80280f4:	d811      	bhi.n	802811a <__ieee754_exp+0x1fa>
 80280f6:	a324      	add	r3, pc, #144	; (adr r3, 8028188 <__ieee754_exp+0x268>)
 80280f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280fc:	ee10 0a10 	vmov	r0, s0
 8028100:	4629      	mov	r1, r5
 8028102:	f7de fe5d 	bl	8006dc0 <__adddf3>
 8028106:	2200      	movs	r2, #0
 8028108:	4b39      	ldr	r3, [pc, #228]	; (80281f0 <__ieee754_exp+0x2d0>)
 802810a:	f7df fa9f 	bl	800764c <__aeabi_dcmpgt>
 802810e:	b138      	cbz	r0, 8028120 <__ieee754_exp+0x200>
 8028110:	2200      	movs	r2, #0
 8028112:	4b37      	ldr	r3, [pc, #220]	; (80281f0 <__ieee754_exp+0x2d0>)
 8028114:	4620      	mov	r0, r4
 8028116:	4629      	mov	r1, r5
 8028118:	e719      	b.n	8027f4e <__ieee754_exp+0x2e>
 802811a:	f04f 0a00 	mov.w	sl, #0
 802811e:	e760      	b.n	8027fe2 <__ieee754_exp+0xc2>
 8028120:	4682      	mov	sl, r0
 8028122:	e75e      	b.n	8027fe2 <__ieee754_exp+0xc2>
 8028124:	4632      	mov	r2, r6
 8028126:	463b      	mov	r3, r7
 8028128:	2000      	movs	r0, #0
 802812a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802812e:	f7de fe45 	bl	8006dbc <__aeabi_dsub>
 8028132:	4602      	mov	r2, r0
 8028134:	460b      	mov	r3, r1
 8028136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802813a:	f7df f921 	bl	8007380 <__aeabi_ddiv>
 802813e:	4602      	mov	r2, r0
 8028140:	460b      	mov	r3, r1
 8028142:	4640      	mov	r0, r8
 8028144:	4649      	mov	r1, r9
 8028146:	f7de fe39 	bl	8006dbc <__aeabi_dsub>
 802814a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802814e:	f7de fe35 	bl	8006dbc <__aeabi_dsub>
 8028152:	4602      	mov	r2, r0
 8028154:	460b      	mov	r3, r1
 8028156:	2000      	movs	r0, #0
 8028158:	4925      	ldr	r1, [pc, #148]	; (80281f0 <__ieee754_exp+0x2d0>)
 802815a:	f7de fe2f 	bl	8006dbc <__aeabi_dsub>
 802815e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8028162:	4592      	cmp	sl, r2
 8028164:	db02      	blt.n	802816c <__ieee754_exp+0x24c>
 8028166:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802816a:	e6f2      	b.n	8027f52 <__ieee754_exp+0x32>
 802816c:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8028170:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8028174:	2200      	movs	r2, #0
 8028176:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802817a:	e701      	b.n	8027f80 <__ieee754_exp+0x60>
 802817c:	f3af 8000 	nop.w
 8028180:	fefa39ef 	.word	0xfefa39ef
 8028184:	40862e42 	.word	0x40862e42
 8028188:	8800759c 	.word	0x8800759c
 802818c:	7e37e43c 	.word	0x7e37e43c
 8028190:	d52d3051 	.word	0xd52d3051
 8028194:	c0874910 	.word	0xc0874910
 8028198:	72bea4d0 	.word	0x72bea4d0
 802819c:	3e663769 	.word	0x3e663769
 80281a0:	c5d26bf1 	.word	0xc5d26bf1
 80281a4:	3ebbbd41 	.word	0x3ebbbd41
 80281a8:	af25de2c 	.word	0xaf25de2c
 80281ac:	3f11566a 	.word	0x3f11566a
 80281b0:	16bebd93 	.word	0x16bebd93
 80281b4:	3f66c16c 	.word	0x3f66c16c
 80281b8:	5555553e 	.word	0x5555553e
 80281bc:	3fc55555 	.word	0x3fc55555
 80281c0:	652b82fe 	.word	0x652b82fe
 80281c4:	3ff71547 	.word	0x3ff71547
 80281c8:	fee00000 	.word	0xfee00000
 80281cc:	3fe62e42 	.word	0x3fe62e42
 80281d0:	35793c76 	.word	0x35793c76
 80281d4:	3dea39ef 	.word	0x3dea39ef
 80281d8:	40862e41 	.word	0x40862e41
 80281dc:	7fefffff 	.word	0x7fefffff
 80281e0:	3fd62e42 	.word	0x3fd62e42
 80281e4:	3ff0a2b1 	.word	0x3ff0a2b1
 80281e8:	080b4228 	.word	0x080b4228
 80281ec:	080b4238 	.word	0x080b4238
 80281f0:	3ff00000 	.word	0x3ff00000
 80281f4:	080b4218 	.word	0x080b4218
 80281f8:	3e2fffff 	.word	0x3e2fffff
 80281fc:	00000000 	.word	0x00000000

08028200 <__ieee754_log>:
 8028200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028204:	ec51 0b10 	vmov	r0, r1, d0
 8028208:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802820c:	b087      	sub	sp, #28
 802820e:	460d      	mov	r5, r1
 8028210:	da27      	bge.n	8028262 <__ieee754_log+0x62>
 8028212:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8028216:	4303      	orrs	r3, r0
 8028218:	ee10 2a10 	vmov	r2, s0
 802821c:	d10a      	bne.n	8028234 <__ieee754_log+0x34>
 802821e:	49cc      	ldr	r1, [pc, #816]	; (8028550 <__ieee754_log+0x350>)
 8028220:	2200      	movs	r2, #0
 8028222:	2300      	movs	r3, #0
 8028224:	2000      	movs	r0, #0
 8028226:	f7df f8ab 	bl	8007380 <__aeabi_ddiv>
 802822a:	ec41 0b10 	vmov	d0, r0, r1
 802822e:	b007      	add	sp, #28
 8028230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028234:	2900      	cmp	r1, #0
 8028236:	da05      	bge.n	8028244 <__ieee754_log+0x44>
 8028238:	460b      	mov	r3, r1
 802823a:	f7de fdbf 	bl	8006dbc <__aeabi_dsub>
 802823e:	2200      	movs	r2, #0
 8028240:	2300      	movs	r3, #0
 8028242:	e7f0      	b.n	8028226 <__ieee754_log+0x26>
 8028244:	4bc3      	ldr	r3, [pc, #780]	; (8028554 <__ieee754_log+0x354>)
 8028246:	2200      	movs	r2, #0
 8028248:	f7de ff70 	bl	800712c <__aeabi_dmul>
 802824c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8028250:	460d      	mov	r5, r1
 8028252:	4ac1      	ldr	r2, [pc, #772]	; (8028558 <__ieee754_log+0x358>)
 8028254:	4295      	cmp	r5, r2
 8028256:	dd06      	ble.n	8028266 <__ieee754_log+0x66>
 8028258:	4602      	mov	r2, r0
 802825a:	460b      	mov	r3, r1
 802825c:	f7de fdb0 	bl	8006dc0 <__adddf3>
 8028260:	e7e3      	b.n	802822a <__ieee754_log+0x2a>
 8028262:	2300      	movs	r3, #0
 8028264:	e7f5      	b.n	8028252 <__ieee754_log+0x52>
 8028266:	152c      	asrs	r4, r5, #20
 8028268:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 802826c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8028270:	441c      	add	r4, r3
 8028272:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8028276:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802827a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802827e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8028282:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8028286:	ea42 0105 	orr.w	r1, r2, r5
 802828a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802828e:	2200      	movs	r2, #0
 8028290:	4bb2      	ldr	r3, [pc, #712]	; (802855c <__ieee754_log+0x35c>)
 8028292:	f7de fd93 	bl	8006dbc <__aeabi_dsub>
 8028296:	1cab      	adds	r3, r5, #2
 8028298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802829c:	2b02      	cmp	r3, #2
 802829e:	4682      	mov	sl, r0
 80282a0:	468b      	mov	fp, r1
 80282a2:	f04f 0200 	mov.w	r2, #0
 80282a6:	dc53      	bgt.n	8028350 <__ieee754_log+0x150>
 80282a8:	2300      	movs	r3, #0
 80282aa:	f7df f9a7 	bl	80075fc <__aeabi_dcmpeq>
 80282ae:	b1d0      	cbz	r0, 80282e6 <__ieee754_log+0xe6>
 80282b0:	2c00      	cmp	r4, #0
 80282b2:	f000 8120 	beq.w	80284f6 <__ieee754_log+0x2f6>
 80282b6:	4620      	mov	r0, r4
 80282b8:	f7de fece 	bl	8007058 <__aeabi_i2d>
 80282bc:	a390      	add	r3, pc, #576	; (adr r3, 8028500 <__ieee754_log+0x300>)
 80282be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282c2:	4606      	mov	r6, r0
 80282c4:	460f      	mov	r7, r1
 80282c6:	f7de ff31 	bl	800712c <__aeabi_dmul>
 80282ca:	a38f      	add	r3, pc, #572	; (adr r3, 8028508 <__ieee754_log+0x308>)
 80282cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282d0:	4604      	mov	r4, r0
 80282d2:	460d      	mov	r5, r1
 80282d4:	4630      	mov	r0, r6
 80282d6:	4639      	mov	r1, r7
 80282d8:	f7de ff28 	bl	800712c <__aeabi_dmul>
 80282dc:	4602      	mov	r2, r0
 80282de:	460b      	mov	r3, r1
 80282e0:	4620      	mov	r0, r4
 80282e2:	4629      	mov	r1, r5
 80282e4:	e7ba      	b.n	802825c <__ieee754_log+0x5c>
 80282e6:	a38a      	add	r3, pc, #552	; (adr r3, 8028510 <__ieee754_log+0x310>)
 80282e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282ec:	4650      	mov	r0, sl
 80282ee:	4659      	mov	r1, fp
 80282f0:	f7de ff1c 	bl	800712c <__aeabi_dmul>
 80282f4:	4602      	mov	r2, r0
 80282f6:	460b      	mov	r3, r1
 80282f8:	2000      	movs	r0, #0
 80282fa:	4999      	ldr	r1, [pc, #612]	; (8028560 <__ieee754_log+0x360>)
 80282fc:	f7de fd5e 	bl	8006dbc <__aeabi_dsub>
 8028300:	4652      	mov	r2, sl
 8028302:	4606      	mov	r6, r0
 8028304:	460f      	mov	r7, r1
 8028306:	465b      	mov	r3, fp
 8028308:	4650      	mov	r0, sl
 802830a:	4659      	mov	r1, fp
 802830c:	f7de ff0e 	bl	800712c <__aeabi_dmul>
 8028310:	4602      	mov	r2, r0
 8028312:	460b      	mov	r3, r1
 8028314:	4630      	mov	r0, r6
 8028316:	4639      	mov	r1, r7
 8028318:	f7de ff08 	bl	800712c <__aeabi_dmul>
 802831c:	4606      	mov	r6, r0
 802831e:	460f      	mov	r7, r1
 8028320:	b914      	cbnz	r4, 8028328 <__ieee754_log+0x128>
 8028322:	4632      	mov	r2, r6
 8028324:	463b      	mov	r3, r7
 8028326:	e0a0      	b.n	802846a <__ieee754_log+0x26a>
 8028328:	4620      	mov	r0, r4
 802832a:	f7de fe95 	bl	8007058 <__aeabi_i2d>
 802832e:	a374      	add	r3, pc, #464	; (adr r3, 8028500 <__ieee754_log+0x300>)
 8028330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028334:	4680      	mov	r8, r0
 8028336:	4689      	mov	r9, r1
 8028338:	f7de fef8 	bl	800712c <__aeabi_dmul>
 802833c:	a372      	add	r3, pc, #456	; (adr r3, 8028508 <__ieee754_log+0x308>)
 802833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028342:	4604      	mov	r4, r0
 8028344:	460d      	mov	r5, r1
 8028346:	4640      	mov	r0, r8
 8028348:	4649      	mov	r1, r9
 802834a:	f7de feef 	bl	800712c <__aeabi_dmul>
 802834e:	e0a5      	b.n	802849c <__ieee754_log+0x29c>
 8028350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028354:	f7de fd34 	bl	8006dc0 <__adddf3>
 8028358:	4602      	mov	r2, r0
 802835a:	460b      	mov	r3, r1
 802835c:	4650      	mov	r0, sl
 802835e:	4659      	mov	r1, fp
 8028360:	f7df f80e 	bl	8007380 <__aeabi_ddiv>
 8028364:	e9cd 0100 	strd	r0, r1, [sp]
 8028368:	4620      	mov	r0, r4
 802836a:	f7de fe75 	bl	8007058 <__aeabi_i2d>
 802836e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028376:	4610      	mov	r0, r2
 8028378:	4619      	mov	r1, r3
 802837a:	f7de fed7 	bl	800712c <__aeabi_dmul>
 802837e:	4602      	mov	r2, r0
 8028380:	460b      	mov	r3, r1
 8028382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8028386:	f7de fed1 	bl	800712c <__aeabi_dmul>
 802838a:	a363      	add	r3, pc, #396	; (adr r3, 8028518 <__ieee754_log+0x318>)
 802838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028390:	4680      	mov	r8, r0
 8028392:	4689      	mov	r9, r1
 8028394:	f7de feca 	bl	800712c <__aeabi_dmul>
 8028398:	a361      	add	r3, pc, #388	; (adr r3, 8028520 <__ieee754_log+0x320>)
 802839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802839e:	f7de fd0f 	bl	8006dc0 <__adddf3>
 80283a2:	4642      	mov	r2, r8
 80283a4:	464b      	mov	r3, r9
 80283a6:	f7de fec1 	bl	800712c <__aeabi_dmul>
 80283aa:	a35f      	add	r3, pc, #380	; (adr r3, 8028528 <__ieee754_log+0x328>)
 80283ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283b0:	f7de fd06 	bl	8006dc0 <__adddf3>
 80283b4:	4642      	mov	r2, r8
 80283b6:	464b      	mov	r3, r9
 80283b8:	f7de feb8 	bl	800712c <__aeabi_dmul>
 80283bc:	a35c      	add	r3, pc, #368	; (adr r3, 8028530 <__ieee754_log+0x330>)
 80283be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283c2:	f7de fcfd 	bl	8006dc0 <__adddf3>
 80283c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80283ca:	f7de feaf 	bl	800712c <__aeabi_dmul>
 80283ce:	a35a      	add	r3, pc, #360	; (adr r3, 8028538 <__ieee754_log+0x338>)
 80283d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80283d8:	4640      	mov	r0, r8
 80283da:	4649      	mov	r1, r9
 80283dc:	f7de fea6 	bl	800712c <__aeabi_dmul>
 80283e0:	a357      	add	r3, pc, #348	; (adr r3, 8028540 <__ieee754_log+0x340>)
 80283e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283e6:	f7de fceb 	bl	8006dc0 <__adddf3>
 80283ea:	4642      	mov	r2, r8
 80283ec:	464b      	mov	r3, r9
 80283ee:	f7de fe9d 	bl	800712c <__aeabi_dmul>
 80283f2:	a355      	add	r3, pc, #340	; (adr r3, 8028548 <__ieee754_log+0x348>)
 80283f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283f8:	f7de fce2 	bl	8006dc0 <__adddf3>
 80283fc:	4642      	mov	r2, r8
 80283fe:	464b      	mov	r3, r9
 8028400:	f7de fe94 	bl	800712c <__aeabi_dmul>
 8028404:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8028408:	4602      	mov	r2, r0
 802840a:	460b      	mov	r3, r1
 802840c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8028410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8028414:	f7de fcd4 	bl	8006dc0 <__adddf3>
 8028418:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 802841c:	3551      	adds	r5, #81	; 0x51
 802841e:	4335      	orrs	r5, r6
 8028420:	2d00      	cmp	r5, #0
 8028422:	4680      	mov	r8, r0
 8028424:	4689      	mov	r9, r1
 8028426:	dd48      	ble.n	80284ba <__ieee754_log+0x2ba>
 8028428:	2200      	movs	r2, #0
 802842a:	4b4d      	ldr	r3, [pc, #308]	; (8028560 <__ieee754_log+0x360>)
 802842c:	4650      	mov	r0, sl
 802842e:	4659      	mov	r1, fp
 8028430:	f7de fe7c 	bl	800712c <__aeabi_dmul>
 8028434:	4652      	mov	r2, sl
 8028436:	465b      	mov	r3, fp
 8028438:	f7de fe78 	bl	800712c <__aeabi_dmul>
 802843c:	4602      	mov	r2, r0
 802843e:	460b      	mov	r3, r1
 8028440:	4606      	mov	r6, r0
 8028442:	460f      	mov	r7, r1
 8028444:	4640      	mov	r0, r8
 8028446:	4649      	mov	r1, r9
 8028448:	f7de fcba 	bl	8006dc0 <__adddf3>
 802844c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028450:	f7de fe6c 	bl	800712c <__aeabi_dmul>
 8028454:	4680      	mov	r8, r0
 8028456:	4689      	mov	r9, r1
 8028458:	b964      	cbnz	r4, 8028474 <__ieee754_log+0x274>
 802845a:	4602      	mov	r2, r0
 802845c:	460b      	mov	r3, r1
 802845e:	4630      	mov	r0, r6
 8028460:	4639      	mov	r1, r7
 8028462:	f7de fcab 	bl	8006dbc <__aeabi_dsub>
 8028466:	4602      	mov	r2, r0
 8028468:	460b      	mov	r3, r1
 802846a:	4650      	mov	r0, sl
 802846c:	4659      	mov	r1, fp
 802846e:	f7de fca5 	bl	8006dbc <__aeabi_dsub>
 8028472:	e6da      	b.n	802822a <__ieee754_log+0x2a>
 8028474:	a322      	add	r3, pc, #136	; (adr r3, 8028500 <__ieee754_log+0x300>)
 8028476:	e9d3 2300 	ldrd	r2, r3, [r3]
 802847a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802847e:	f7de fe55 	bl	800712c <__aeabi_dmul>
 8028482:	a321      	add	r3, pc, #132	; (adr r3, 8028508 <__ieee754_log+0x308>)
 8028484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028488:	4604      	mov	r4, r0
 802848a:	460d      	mov	r5, r1
 802848c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028490:	f7de fe4c 	bl	800712c <__aeabi_dmul>
 8028494:	4642      	mov	r2, r8
 8028496:	464b      	mov	r3, r9
 8028498:	f7de fc92 	bl	8006dc0 <__adddf3>
 802849c:	4602      	mov	r2, r0
 802849e:	460b      	mov	r3, r1
 80284a0:	4630      	mov	r0, r6
 80284a2:	4639      	mov	r1, r7
 80284a4:	f7de fc8a 	bl	8006dbc <__aeabi_dsub>
 80284a8:	4652      	mov	r2, sl
 80284aa:	465b      	mov	r3, fp
 80284ac:	f7de fc86 	bl	8006dbc <__aeabi_dsub>
 80284b0:	4602      	mov	r2, r0
 80284b2:	460b      	mov	r3, r1
 80284b4:	4620      	mov	r0, r4
 80284b6:	4629      	mov	r1, r5
 80284b8:	e7d9      	b.n	802846e <__ieee754_log+0x26e>
 80284ba:	4602      	mov	r2, r0
 80284bc:	460b      	mov	r3, r1
 80284be:	4650      	mov	r0, sl
 80284c0:	4659      	mov	r1, fp
 80284c2:	f7de fc7b 	bl	8006dbc <__aeabi_dsub>
 80284c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80284ca:	f7de fe2f 	bl	800712c <__aeabi_dmul>
 80284ce:	4606      	mov	r6, r0
 80284d0:	460f      	mov	r7, r1
 80284d2:	2c00      	cmp	r4, #0
 80284d4:	f43f af25 	beq.w	8028322 <__ieee754_log+0x122>
 80284d8:	a309      	add	r3, pc, #36	; (adr r3, 8028500 <__ieee754_log+0x300>)
 80284da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80284de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80284e2:	f7de fe23 	bl	800712c <__aeabi_dmul>
 80284e6:	a308      	add	r3, pc, #32	; (adr r3, 8028508 <__ieee754_log+0x308>)
 80284e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80284ec:	4604      	mov	r4, r0
 80284ee:	460d      	mov	r5, r1
 80284f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80284f4:	e729      	b.n	802834a <__ieee754_log+0x14a>
 80284f6:	2000      	movs	r0, #0
 80284f8:	2100      	movs	r1, #0
 80284fa:	e696      	b.n	802822a <__ieee754_log+0x2a>
 80284fc:	f3af 8000 	nop.w
 8028500:	fee00000 	.word	0xfee00000
 8028504:	3fe62e42 	.word	0x3fe62e42
 8028508:	35793c76 	.word	0x35793c76
 802850c:	3dea39ef 	.word	0x3dea39ef
 8028510:	55555555 	.word	0x55555555
 8028514:	3fd55555 	.word	0x3fd55555
 8028518:	df3e5244 	.word	0xdf3e5244
 802851c:	3fc2f112 	.word	0x3fc2f112
 8028520:	96cb03de 	.word	0x96cb03de
 8028524:	3fc74664 	.word	0x3fc74664
 8028528:	94229359 	.word	0x94229359
 802852c:	3fd24924 	.word	0x3fd24924
 8028530:	55555593 	.word	0x55555593
 8028534:	3fe55555 	.word	0x3fe55555
 8028538:	d078c69f 	.word	0xd078c69f
 802853c:	3fc39a09 	.word	0x3fc39a09
 8028540:	1d8e78af 	.word	0x1d8e78af
 8028544:	3fcc71c5 	.word	0x3fcc71c5
 8028548:	9997fa04 	.word	0x9997fa04
 802854c:	3fd99999 	.word	0x3fd99999
 8028550:	c3500000 	.word	0xc3500000
 8028554:	43500000 	.word	0x43500000
 8028558:	7fefffff 	.word	0x7fefffff
 802855c:	3ff00000 	.word	0x3ff00000
 8028560:	3fe00000 	.word	0x3fe00000

08028564 <finite>:
 8028564:	ee10 3a90 	vmov	r3, s1
 8028568:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802856c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8028570:	0fc0      	lsrs	r0, r0, #31
 8028572:	4770      	bx	lr

08028574 <matherr>:
 8028574:	2000      	movs	r0, #0
 8028576:	4770      	bx	lr

08028578 <nan>:
 8028578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028580 <nan+0x8>
 802857c:	4770      	bx	lr
 802857e:	bf00      	nop
 8028580:	00000000 	.word	0x00000000
 8028584:	7ff80000 	.word	0x7ff80000

08028588 <abort>:
 8028588:	b508      	push	{r3, lr}
 802858a:	2006      	movs	r0, #6
 802858c:	f000 fef2 	bl	8029374 <raise>
 8028590:	2001      	movs	r0, #1
 8028592:	f7fe faab 	bl	8026aec <_exit>
	...

08028598 <__errno>:
 8028598:	4b01      	ldr	r3, [pc, #4]	; (80285a0 <__errno+0x8>)
 802859a:	6818      	ldr	r0, [r3, #0]
 802859c:	4770      	bx	lr
 802859e:	bf00      	nop
 80285a0:	20008430 	.word	0x20008430

080285a4 <_fputc_r>:
 80285a4:	b570      	push	{r4, r5, r6, lr}
 80285a6:	460e      	mov	r6, r1
 80285a8:	4614      	mov	r4, r2
 80285aa:	4605      	mov	r5, r0
 80285ac:	b118      	cbz	r0, 80285b6 <_fputc_r+0x12>
 80285ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80285b0:	b90b      	cbnz	r3, 80285b6 <_fputc_r+0x12>
 80285b2:	f003 f94b 	bl	802b84c <__sinit>
 80285b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80285b8:	07d8      	lsls	r0, r3, #31
 80285ba:	d405      	bmi.n	80285c8 <_fputc_r+0x24>
 80285bc:	89a3      	ldrh	r3, [r4, #12]
 80285be:	0599      	lsls	r1, r3, #22
 80285c0:	d402      	bmi.n	80285c8 <_fputc_r+0x24>
 80285c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80285c4:	f000 fa28 	bl	8028a18 <__retarget_lock_acquire_recursive>
 80285c8:	4622      	mov	r2, r4
 80285ca:	4628      	mov	r0, r5
 80285cc:	4631      	mov	r1, r6
 80285ce:	f000 fcb3 	bl	8028f38 <_putc_r>
 80285d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80285d4:	07da      	lsls	r2, r3, #31
 80285d6:	4605      	mov	r5, r0
 80285d8:	d405      	bmi.n	80285e6 <_fputc_r+0x42>
 80285da:	89a3      	ldrh	r3, [r4, #12]
 80285dc:	059b      	lsls	r3, r3, #22
 80285de:	d402      	bmi.n	80285e6 <_fputc_r+0x42>
 80285e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80285e2:	f000 fa1a 	bl	8028a1a <__retarget_lock_release_recursive>
 80285e6:	4628      	mov	r0, r5
 80285e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080285ec <fputc>:
 80285ec:	4b02      	ldr	r3, [pc, #8]	; (80285f8 <fputc+0xc>)
 80285ee:	460a      	mov	r2, r1
 80285f0:	4601      	mov	r1, r0
 80285f2:	6818      	ldr	r0, [r3, #0]
 80285f4:	f7ff bfd6 	b.w	80285a4 <_fputc_r>
 80285f8:	20008430 	.word	0x20008430

080285fc <_fputs_r>:
 80285fc:	b530      	push	{r4, r5, lr}
 80285fe:	b087      	sub	sp, #28
 8028600:	4605      	mov	r5, r0
 8028602:	4608      	mov	r0, r1
 8028604:	4614      	mov	r4, r2
 8028606:	9101      	str	r1, [sp, #4]
 8028608:	f7de fbcc 	bl	8006da4 <strlen>
 802860c:	ab01      	add	r3, sp, #4
 802860e:	9303      	str	r3, [sp, #12]
 8028610:	2301      	movs	r3, #1
 8028612:	9005      	str	r0, [sp, #20]
 8028614:	9002      	str	r0, [sp, #8]
 8028616:	9304      	str	r3, [sp, #16]
 8028618:	b125      	cbz	r5, 8028624 <_fputs_r+0x28>
 802861a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802861c:	b913      	cbnz	r3, 8028624 <_fputs_r+0x28>
 802861e:	4628      	mov	r0, r5
 8028620:	f003 f914 	bl	802b84c <__sinit>
 8028624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028626:	07db      	lsls	r3, r3, #31
 8028628:	d405      	bmi.n	8028636 <_fputs_r+0x3a>
 802862a:	89a3      	ldrh	r3, [r4, #12]
 802862c:	0598      	lsls	r0, r3, #22
 802862e:	d402      	bmi.n	8028636 <_fputs_r+0x3a>
 8028630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028632:	f000 f9f1 	bl	8028a18 <__retarget_lock_acquire_recursive>
 8028636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802863a:	0499      	lsls	r1, r3, #18
 802863c:	d406      	bmi.n	802864c <_fputs_r+0x50>
 802863e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8028642:	81a3      	strh	r3, [r4, #12]
 8028644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802864a:	6663      	str	r3, [r4, #100]	; 0x64
 802864c:	aa03      	add	r2, sp, #12
 802864e:	4628      	mov	r0, r5
 8028650:	4621      	mov	r1, r4
 8028652:	f000 f815 	bl	8028680 <__sfvwrite_r>
 8028656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028658:	07da      	lsls	r2, r3, #31
 802865a:	4605      	mov	r5, r0
 802865c:	d405      	bmi.n	802866a <_fputs_r+0x6e>
 802865e:	89a3      	ldrh	r3, [r4, #12]
 8028660:	059b      	lsls	r3, r3, #22
 8028662:	d402      	bmi.n	802866a <_fputs_r+0x6e>
 8028664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028666:	f000 f9d8 	bl	8028a1a <__retarget_lock_release_recursive>
 802866a:	4628      	mov	r0, r5
 802866c:	b007      	add	sp, #28
 802866e:	bd30      	pop	{r4, r5, pc}

08028670 <fputs>:
 8028670:	4b02      	ldr	r3, [pc, #8]	; (802867c <fputs+0xc>)
 8028672:	460a      	mov	r2, r1
 8028674:	4601      	mov	r1, r0
 8028676:	6818      	ldr	r0, [r3, #0]
 8028678:	f7ff bfc0 	b.w	80285fc <_fputs_r>
 802867c:	20008430 	.word	0x20008430

08028680 <__sfvwrite_r>:
 8028680:	6893      	ldr	r3, [r2, #8]
 8028682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028686:	4680      	mov	r8, r0
 8028688:	460c      	mov	r4, r1
 802868a:	4691      	mov	r9, r2
 802868c:	b91b      	cbnz	r3, 8028696 <__sfvwrite_r+0x16>
 802868e:	2000      	movs	r0, #0
 8028690:	b003      	add	sp, #12
 8028692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028696:	898b      	ldrh	r3, [r1, #12]
 8028698:	0718      	lsls	r0, r3, #28
 802869a:	d54f      	bpl.n	802873c <__sfvwrite_r+0xbc>
 802869c:	690b      	ldr	r3, [r1, #16]
 802869e:	2b00      	cmp	r3, #0
 80286a0:	d04c      	beq.n	802873c <__sfvwrite_r+0xbc>
 80286a2:	89a5      	ldrh	r5, [r4, #12]
 80286a4:	f8d9 6000 	ldr.w	r6, [r9]
 80286a8:	f015 0702 	ands.w	r7, r5, #2
 80286ac:	d169      	bne.n	8028782 <__sfvwrite_r+0x102>
 80286ae:	f015 0501 	ands.w	r5, r5, #1
 80286b2:	f000 809a 	beq.w	80287ea <__sfvwrite_r+0x16a>
 80286b6:	4638      	mov	r0, r7
 80286b8:	46ba      	mov	sl, r7
 80286ba:	46bb      	mov	fp, r7
 80286bc:	f1bb 0f00 	cmp.w	fp, #0
 80286c0:	f000 8103 	beq.w	80288ca <__sfvwrite_r+0x24a>
 80286c4:	b950      	cbnz	r0, 80286dc <__sfvwrite_r+0x5c>
 80286c6:	465a      	mov	r2, fp
 80286c8:	210a      	movs	r1, #10
 80286ca:	4650      	mov	r0, sl
 80286cc:	f7de fb10 	bl	8006cf0 <memchr>
 80286d0:	2800      	cmp	r0, #0
 80286d2:	f000 80ff 	beq.w	80288d4 <__sfvwrite_r+0x254>
 80286d6:	3001      	adds	r0, #1
 80286d8:	eba0 070a 	sub.w	r7, r0, sl
 80286dc:	6820      	ldr	r0, [r4, #0]
 80286de:	6921      	ldr	r1, [r4, #16]
 80286e0:	6962      	ldr	r2, [r4, #20]
 80286e2:	455f      	cmp	r7, fp
 80286e4:	463b      	mov	r3, r7
 80286e6:	bf28      	it	cs
 80286e8:	465b      	movcs	r3, fp
 80286ea:	4288      	cmp	r0, r1
 80286ec:	f240 80f5 	bls.w	80288da <__sfvwrite_r+0x25a>
 80286f0:	68a5      	ldr	r5, [r4, #8]
 80286f2:	4415      	add	r5, r2
 80286f4:	42ab      	cmp	r3, r5
 80286f6:	f340 80f0 	ble.w	80288da <__sfvwrite_r+0x25a>
 80286fa:	4651      	mov	r1, sl
 80286fc:	462a      	mov	r2, r5
 80286fe:	f000 fbed 	bl	8028edc <memmove>
 8028702:	6823      	ldr	r3, [r4, #0]
 8028704:	442b      	add	r3, r5
 8028706:	6023      	str	r3, [r4, #0]
 8028708:	4621      	mov	r1, r4
 802870a:	4640      	mov	r0, r8
 802870c:	f003 f832 	bl	802b774 <_fflush_r>
 8028710:	2800      	cmp	r0, #0
 8028712:	d165      	bne.n	80287e0 <__sfvwrite_r+0x160>
 8028714:	1b7f      	subs	r7, r7, r5
 8028716:	f040 80fa 	bne.w	802890e <__sfvwrite_r+0x28e>
 802871a:	4621      	mov	r1, r4
 802871c:	4640      	mov	r0, r8
 802871e:	f003 f829 	bl	802b774 <_fflush_r>
 8028722:	2800      	cmp	r0, #0
 8028724:	d15c      	bne.n	80287e0 <__sfvwrite_r+0x160>
 8028726:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802872a:	44aa      	add	sl, r5
 802872c:	ebab 0b05 	sub.w	fp, fp, r5
 8028730:	1b5d      	subs	r5, r3, r5
 8028732:	f8c9 5008 	str.w	r5, [r9, #8]
 8028736:	2d00      	cmp	r5, #0
 8028738:	d1c0      	bne.n	80286bc <__sfvwrite_r+0x3c>
 802873a:	e7a8      	b.n	802868e <__sfvwrite_r+0xe>
 802873c:	4621      	mov	r1, r4
 802873e:	4640      	mov	r0, r8
 8028740:	f002 f8ec 	bl	802a91c <__swsetup_r>
 8028744:	2800      	cmp	r0, #0
 8028746:	d0ac      	beq.n	80286a2 <__sfvwrite_r+0x22>
 8028748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802874c:	e7a0      	b.n	8028690 <__sfvwrite_r+0x10>
 802874e:	e9d6 a700 	ldrd	sl, r7, [r6]
 8028752:	3608      	adds	r6, #8
 8028754:	2f00      	cmp	r7, #0
 8028756:	d0fa      	beq.n	802874e <__sfvwrite_r+0xce>
 8028758:	455f      	cmp	r7, fp
 802875a:	463b      	mov	r3, r7
 802875c:	4652      	mov	r2, sl
 802875e:	bf28      	it	cs
 8028760:	465b      	movcs	r3, fp
 8028762:	69e1      	ldr	r1, [r4, #28]
 8028764:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8028766:	4640      	mov	r0, r8
 8028768:	47a8      	blx	r5
 802876a:	2800      	cmp	r0, #0
 802876c:	dd38      	ble.n	80287e0 <__sfvwrite_r+0x160>
 802876e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028772:	4482      	add	sl, r0
 8028774:	1a3f      	subs	r7, r7, r0
 8028776:	1a18      	subs	r0, r3, r0
 8028778:	f8c9 0008 	str.w	r0, [r9, #8]
 802877c:	2800      	cmp	r0, #0
 802877e:	d1e9      	bne.n	8028754 <__sfvwrite_r+0xd4>
 8028780:	e785      	b.n	802868e <__sfvwrite_r+0xe>
 8028782:	f04f 0a00 	mov.w	sl, #0
 8028786:	4657      	mov	r7, sl
 8028788:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8028918 <__sfvwrite_r+0x298>
 802878c:	e7e2      	b.n	8028754 <__sfvwrite_r+0xd4>
 802878e:	e9d6 5a00 	ldrd	r5, sl, [r6]
 8028792:	3608      	adds	r6, #8
 8028794:	f1ba 0f00 	cmp.w	sl, #0
 8028798:	d0f9      	beq.n	802878e <__sfvwrite_r+0x10e>
 802879a:	89a2      	ldrh	r2, [r4, #12]
 802879c:	68a3      	ldr	r3, [r4, #8]
 802879e:	6820      	ldr	r0, [r4, #0]
 80287a0:	0591      	lsls	r1, r2, #22
 80287a2:	d564      	bpl.n	802886e <__sfvwrite_r+0x1ee>
 80287a4:	4553      	cmp	r3, sl
 80287a6:	d836      	bhi.n	8028816 <__sfvwrite_r+0x196>
 80287a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80287ac:	d033      	beq.n	8028816 <__sfvwrite_r+0x196>
 80287ae:	6921      	ldr	r1, [r4, #16]
 80287b0:	6967      	ldr	r7, [r4, #20]
 80287b2:	eba0 0b01 	sub.w	fp, r0, r1
 80287b6:	2302      	movs	r3, #2
 80287b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80287bc:	fb97 f7f3 	sdiv	r7, r7, r3
 80287c0:	f10b 0301 	add.w	r3, fp, #1
 80287c4:	4453      	add	r3, sl
 80287c6:	429f      	cmp	r7, r3
 80287c8:	bf38      	it	cc
 80287ca:	461f      	movcc	r7, r3
 80287cc:	0553      	lsls	r3, r2, #21
 80287ce:	d53e      	bpl.n	802884e <__sfvwrite_r+0x1ce>
 80287d0:	4639      	mov	r1, r7
 80287d2:	4640      	mov	r0, r8
 80287d4:	f000 f932 	bl	8028a3c <_malloc_r>
 80287d8:	b948      	cbnz	r0, 80287ee <__sfvwrite_r+0x16e>
 80287da:	230c      	movs	r3, #12
 80287dc:	f8c8 3000 	str.w	r3, [r8]
 80287e0:	89a3      	ldrh	r3, [r4, #12]
 80287e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80287e6:	81a3      	strh	r3, [r4, #12]
 80287e8:	e7ae      	b.n	8028748 <__sfvwrite_r+0xc8>
 80287ea:	46aa      	mov	sl, r5
 80287ec:	e7d2      	b.n	8028794 <__sfvwrite_r+0x114>
 80287ee:	465a      	mov	r2, fp
 80287f0:	6921      	ldr	r1, [r4, #16]
 80287f2:	9001      	str	r0, [sp, #4]
 80287f4:	f000 fb67 	bl	8028ec6 <memcpy>
 80287f8:	89a2      	ldrh	r2, [r4, #12]
 80287fa:	9b01      	ldr	r3, [sp, #4]
 80287fc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8028800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8028804:	81a2      	strh	r2, [r4, #12]
 8028806:	6123      	str	r3, [r4, #16]
 8028808:	6167      	str	r7, [r4, #20]
 802880a:	445b      	add	r3, fp
 802880c:	eba7 070b 	sub.w	r7, r7, fp
 8028810:	6023      	str	r3, [r4, #0]
 8028812:	60a7      	str	r7, [r4, #8]
 8028814:	4653      	mov	r3, sl
 8028816:	4553      	cmp	r3, sl
 8028818:	bf28      	it	cs
 802881a:	4653      	movcs	r3, sl
 802881c:	461a      	mov	r2, r3
 802881e:	4629      	mov	r1, r5
 8028820:	6820      	ldr	r0, [r4, #0]
 8028822:	9301      	str	r3, [sp, #4]
 8028824:	f000 fb5a 	bl	8028edc <memmove>
 8028828:	68a2      	ldr	r2, [r4, #8]
 802882a:	9b01      	ldr	r3, [sp, #4]
 802882c:	1ad2      	subs	r2, r2, r3
 802882e:	60a2      	str	r2, [r4, #8]
 8028830:	6822      	ldr	r2, [r4, #0]
 8028832:	4413      	add	r3, r2
 8028834:	4657      	mov	r7, sl
 8028836:	6023      	str	r3, [r4, #0]
 8028838:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802883c:	443d      	add	r5, r7
 802883e:	ebaa 0a07 	sub.w	sl, sl, r7
 8028842:	1bdf      	subs	r7, r3, r7
 8028844:	f8c9 7008 	str.w	r7, [r9, #8]
 8028848:	2f00      	cmp	r7, #0
 802884a:	d1a3      	bne.n	8028794 <__sfvwrite_r+0x114>
 802884c:	e71f      	b.n	802868e <__sfvwrite_r+0xe>
 802884e:	463a      	mov	r2, r7
 8028850:	4640      	mov	r0, r8
 8028852:	f000 fbad 	bl	8028fb0 <_realloc_r>
 8028856:	4603      	mov	r3, r0
 8028858:	2800      	cmp	r0, #0
 802885a:	d1d4      	bne.n	8028806 <__sfvwrite_r+0x186>
 802885c:	6921      	ldr	r1, [r4, #16]
 802885e:	4640      	mov	r0, r8
 8028860:	f003 f884 	bl	802b96c <_free_r>
 8028864:	89a3      	ldrh	r3, [r4, #12]
 8028866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802886a:	81a3      	strh	r3, [r4, #12]
 802886c:	e7b5      	b.n	80287da <__sfvwrite_r+0x15a>
 802886e:	6922      	ldr	r2, [r4, #16]
 8028870:	4282      	cmp	r2, r0
 8028872:	d302      	bcc.n	802887a <__sfvwrite_r+0x1fa>
 8028874:	6962      	ldr	r2, [r4, #20]
 8028876:	4552      	cmp	r2, sl
 8028878:	d916      	bls.n	80288a8 <__sfvwrite_r+0x228>
 802887a:	4553      	cmp	r3, sl
 802887c:	bf28      	it	cs
 802887e:	4653      	movcs	r3, sl
 8028880:	461a      	mov	r2, r3
 8028882:	4629      	mov	r1, r5
 8028884:	461f      	mov	r7, r3
 8028886:	f000 fb29 	bl	8028edc <memmove>
 802888a:	68a3      	ldr	r3, [r4, #8]
 802888c:	6822      	ldr	r2, [r4, #0]
 802888e:	1bdb      	subs	r3, r3, r7
 8028890:	443a      	add	r2, r7
 8028892:	60a3      	str	r3, [r4, #8]
 8028894:	6022      	str	r2, [r4, #0]
 8028896:	2b00      	cmp	r3, #0
 8028898:	d1ce      	bne.n	8028838 <__sfvwrite_r+0x1b8>
 802889a:	4621      	mov	r1, r4
 802889c:	4640      	mov	r0, r8
 802889e:	f002 ff69 	bl	802b774 <_fflush_r>
 80288a2:	2800      	cmp	r0, #0
 80288a4:	d0c8      	beq.n	8028838 <__sfvwrite_r+0x1b8>
 80288a6:	e79b      	b.n	80287e0 <__sfvwrite_r+0x160>
 80288a8:	4b1a      	ldr	r3, [pc, #104]	; (8028914 <__sfvwrite_r+0x294>)
 80288aa:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80288ac:	69e1      	ldr	r1, [r4, #28]
 80288ae:	459a      	cmp	sl, r3
 80288b0:	bf94      	ite	ls
 80288b2:	4653      	movls	r3, sl
 80288b4:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 80288b8:	4640      	mov	r0, r8
 80288ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80288be:	4353      	muls	r3, r2
 80288c0:	462a      	mov	r2, r5
 80288c2:	47b8      	blx	r7
 80288c4:	1e07      	subs	r7, r0, #0
 80288c6:	dcb7      	bgt.n	8028838 <__sfvwrite_r+0x1b8>
 80288c8:	e78a      	b.n	80287e0 <__sfvwrite_r+0x160>
 80288ca:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80288ce:	2000      	movs	r0, #0
 80288d0:	3608      	adds	r6, #8
 80288d2:	e6f3      	b.n	80286bc <__sfvwrite_r+0x3c>
 80288d4:	f10b 0701 	add.w	r7, fp, #1
 80288d8:	e700      	b.n	80286dc <__sfvwrite_r+0x5c>
 80288da:	429a      	cmp	r2, r3
 80288dc:	dc09      	bgt.n	80288f2 <__sfvwrite_r+0x272>
 80288de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80288e0:	69e1      	ldr	r1, [r4, #28]
 80288e2:	4613      	mov	r3, r2
 80288e4:	4640      	mov	r0, r8
 80288e6:	4652      	mov	r2, sl
 80288e8:	47a8      	blx	r5
 80288ea:	1e05      	subs	r5, r0, #0
 80288ec:	f73f af12 	bgt.w	8028714 <__sfvwrite_r+0x94>
 80288f0:	e776      	b.n	80287e0 <__sfvwrite_r+0x160>
 80288f2:	461a      	mov	r2, r3
 80288f4:	4651      	mov	r1, sl
 80288f6:	9301      	str	r3, [sp, #4]
 80288f8:	f000 faf0 	bl	8028edc <memmove>
 80288fc:	9b01      	ldr	r3, [sp, #4]
 80288fe:	68a2      	ldr	r2, [r4, #8]
 8028900:	1ad2      	subs	r2, r2, r3
 8028902:	60a2      	str	r2, [r4, #8]
 8028904:	6822      	ldr	r2, [r4, #0]
 8028906:	441a      	add	r2, r3
 8028908:	6022      	str	r2, [r4, #0]
 802890a:	461d      	mov	r5, r3
 802890c:	e702      	b.n	8028714 <__sfvwrite_r+0x94>
 802890e:	2001      	movs	r0, #1
 8028910:	e709      	b.n	8028726 <__sfvwrite_r+0xa6>
 8028912:	bf00      	nop
 8028914:	7ffffffe 	.word	0x7ffffffe
 8028918:	7ffffc00 	.word	0x7ffffc00

0802891c <_fwrite_r>:
 802891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028920:	b086      	sub	sp, #24
 8028922:	fb02 f503 	mul.w	r5, r2, r3
 8028926:	461e      	mov	r6, r3
 8028928:	ab01      	add	r3, sp, #4
 802892a:	9303      	str	r3, [sp, #12]
 802892c:	2301      	movs	r3, #1
 802892e:	4617      	mov	r7, r2
 8028930:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028932:	9101      	str	r1, [sp, #4]
 8028934:	9502      	str	r5, [sp, #8]
 8028936:	9505      	str	r5, [sp, #20]
 8028938:	9304      	str	r3, [sp, #16]
 802893a:	4680      	mov	r8, r0
 802893c:	b118      	cbz	r0, 8028946 <_fwrite_r+0x2a>
 802893e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028940:	b90b      	cbnz	r3, 8028946 <_fwrite_r+0x2a>
 8028942:	f002 ff83 	bl	802b84c <__sinit>
 8028946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028948:	07d8      	lsls	r0, r3, #31
 802894a:	d405      	bmi.n	8028958 <_fwrite_r+0x3c>
 802894c:	89a3      	ldrh	r3, [r4, #12]
 802894e:	0599      	lsls	r1, r3, #22
 8028950:	d402      	bmi.n	8028958 <_fwrite_r+0x3c>
 8028952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028954:	f000 f860 	bl	8028a18 <__retarget_lock_acquire_recursive>
 8028958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802895c:	049a      	lsls	r2, r3, #18
 802895e:	d406      	bmi.n	802896e <_fwrite_r+0x52>
 8028960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8028964:	81a3      	strh	r3, [r4, #12]
 8028966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802896c:	6663      	str	r3, [r4, #100]	; 0x64
 802896e:	aa03      	add	r2, sp, #12
 8028970:	4621      	mov	r1, r4
 8028972:	4640      	mov	r0, r8
 8028974:	f7ff fe84 	bl	8028680 <__sfvwrite_r>
 8028978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802897a:	b958      	cbnz	r0, 8028994 <_fwrite_r+0x78>
 802897c:	07d8      	lsls	r0, r3, #31
 802897e:	d405      	bmi.n	802898c <_fwrite_r+0x70>
 8028980:	89a3      	ldrh	r3, [r4, #12]
 8028982:	0599      	lsls	r1, r3, #22
 8028984:	d402      	bmi.n	802898c <_fwrite_r+0x70>
 8028986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028988:	f000 f847 	bl	8028a1a <__retarget_lock_release_recursive>
 802898c:	4630      	mov	r0, r6
 802898e:	b006      	add	sp, #24
 8028990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028994:	07da      	lsls	r2, r3, #31
 8028996:	d405      	bmi.n	80289a4 <_fwrite_r+0x88>
 8028998:	89a3      	ldrh	r3, [r4, #12]
 802899a:	059b      	lsls	r3, r3, #22
 802899c:	d402      	bmi.n	80289a4 <_fwrite_r+0x88>
 802899e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80289a0:	f000 f83b 	bl	8028a1a <__retarget_lock_release_recursive>
 80289a4:	9b05      	ldr	r3, [sp, #20]
 80289a6:	1aed      	subs	r5, r5, r3
 80289a8:	fbb5 f6f7 	udiv	r6, r5, r7
 80289ac:	e7ee      	b.n	802898c <_fwrite_r+0x70>
	...

080289b0 <fwrite>:
 80289b0:	b507      	push	{r0, r1, r2, lr}
 80289b2:	9300      	str	r3, [sp, #0]
 80289b4:	4613      	mov	r3, r2
 80289b6:	460a      	mov	r2, r1
 80289b8:	4601      	mov	r1, r0
 80289ba:	4803      	ldr	r0, [pc, #12]	; (80289c8 <fwrite+0x18>)
 80289bc:	6800      	ldr	r0, [r0, #0]
 80289be:	f7ff ffad 	bl	802891c <_fwrite_r>
 80289c2:	b003      	add	sp, #12
 80289c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80289c8:	20008430 	.word	0x20008430

080289cc <__libc_init_array>:
 80289cc:	b570      	push	{r4, r5, r6, lr}
 80289ce:	4e0d      	ldr	r6, [pc, #52]	; (8028a04 <__libc_init_array+0x38>)
 80289d0:	4c0d      	ldr	r4, [pc, #52]	; (8028a08 <__libc_init_array+0x3c>)
 80289d2:	1ba4      	subs	r4, r4, r6
 80289d4:	10a4      	asrs	r4, r4, #2
 80289d6:	2500      	movs	r5, #0
 80289d8:	42a5      	cmp	r5, r4
 80289da:	d109      	bne.n	80289f0 <__libc_init_array+0x24>
 80289dc:	4e0b      	ldr	r6, [pc, #44]	; (8028a0c <__libc_init_array+0x40>)
 80289de:	4c0c      	ldr	r4, [pc, #48]	; (8028a10 <__libc_init_array+0x44>)
 80289e0:	f003 fe3e 	bl	802c660 <_init>
 80289e4:	1ba4      	subs	r4, r4, r6
 80289e6:	10a4      	asrs	r4, r4, #2
 80289e8:	2500      	movs	r5, #0
 80289ea:	42a5      	cmp	r5, r4
 80289ec:	d105      	bne.n	80289fa <__libc_init_array+0x2e>
 80289ee:	bd70      	pop	{r4, r5, r6, pc}
 80289f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80289f4:	4798      	blx	r3
 80289f6:	3501      	adds	r5, #1
 80289f8:	e7ee      	b.n	80289d8 <__libc_init_array+0xc>
 80289fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80289fe:	4798      	blx	r3
 8028a00:	3501      	adds	r5, #1
 8028a02:	e7f2      	b.n	80289ea <__libc_init_array+0x1e>
 8028a04:	080b4734 	.word	0x080b4734
 8028a08:	080b4734 	.word	0x080b4734
 8028a0c:	080b4734 	.word	0x080b4734
 8028a10:	080b4744 	.word	0x080b4744

08028a14 <__retarget_lock_init_recursive>:
 8028a14:	4770      	bx	lr

08028a16 <__retarget_lock_close_recursive>:
 8028a16:	4770      	bx	lr

08028a18 <__retarget_lock_acquire_recursive>:
 8028a18:	4770      	bx	lr

08028a1a <__retarget_lock_release_recursive>:
 8028a1a:	4770      	bx	lr

08028a1c <malloc>:
 8028a1c:	4b02      	ldr	r3, [pc, #8]	; (8028a28 <malloc+0xc>)
 8028a1e:	4601      	mov	r1, r0
 8028a20:	6818      	ldr	r0, [r3, #0]
 8028a22:	f000 b80b 	b.w	8028a3c <_malloc_r>
 8028a26:	bf00      	nop
 8028a28:	20008430 	.word	0x20008430

08028a2c <free>:
 8028a2c:	4b02      	ldr	r3, [pc, #8]	; (8028a38 <free+0xc>)
 8028a2e:	4601      	mov	r1, r0
 8028a30:	6818      	ldr	r0, [r3, #0]
 8028a32:	f002 bf9b 	b.w	802b96c <_free_r>
 8028a36:	bf00      	nop
 8028a38:	20008430 	.word	0x20008430

08028a3c <_malloc_r>:
 8028a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a40:	f101 050b 	add.w	r5, r1, #11
 8028a44:	2d16      	cmp	r5, #22
 8028a46:	4606      	mov	r6, r0
 8028a48:	d906      	bls.n	8028a58 <_malloc_r+0x1c>
 8028a4a:	f035 0507 	bics.w	r5, r5, #7
 8028a4e:	d504      	bpl.n	8028a5a <_malloc_r+0x1e>
 8028a50:	230c      	movs	r3, #12
 8028a52:	6033      	str	r3, [r6, #0]
 8028a54:	2400      	movs	r4, #0
 8028a56:	e1a8      	b.n	8028daa <_malloc_r+0x36e>
 8028a58:	2510      	movs	r5, #16
 8028a5a:	428d      	cmp	r5, r1
 8028a5c:	d3f8      	bcc.n	8028a50 <_malloc_r+0x14>
 8028a5e:	4630      	mov	r0, r6
 8028a60:	f000 fa5e 	bl	8028f20 <__malloc_lock>
 8028a64:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8028a68:	4fc0      	ldr	r7, [pc, #768]	; (8028d6c <_malloc_r+0x330>)
 8028a6a:	d238      	bcs.n	8028ade <_malloc_r+0xa2>
 8028a6c:	f105 0208 	add.w	r2, r5, #8
 8028a70:	443a      	add	r2, r7
 8028a72:	f1a2 0108 	sub.w	r1, r2, #8
 8028a76:	6854      	ldr	r4, [r2, #4]
 8028a78:	428c      	cmp	r4, r1
 8028a7a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8028a7e:	d102      	bne.n	8028a86 <_malloc_r+0x4a>
 8028a80:	68d4      	ldr	r4, [r2, #12]
 8028a82:	42a2      	cmp	r2, r4
 8028a84:	d010      	beq.n	8028aa8 <_malloc_r+0x6c>
 8028a86:	6863      	ldr	r3, [r4, #4]
 8028a88:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8028a8c:	f023 0303 	bic.w	r3, r3, #3
 8028a90:	60ca      	str	r2, [r1, #12]
 8028a92:	4423      	add	r3, r4
 8028a94:	6091      	str	r1, [r2, #8]
 8028a96:	685a      	ldr	r2, [r3, #4]
 8028a98:	f042 0201 	orr.w	r2, r2, #1
 8028a9c:	605a      	str	r2, [r3, #4]
 8028a9e:	4630      	mov	r0, r6
 8028aa0:	f000 fa44 	bl	8028f2c <__malloc_unlock>
 8028aa4:	3408      	adds	r4, #8
 8028aa6:	e180      	b.n	8028daa <_malloc_r+0x36e>
 8028aa8:	3302      	adds	r3, #2
 8028aaa:	4ab1      	ldr	r2, [pc, #708]	; (8028d70 <_malloc_r+0x334>)
 8028aac:	693c      	ldr	r4, [r7, #16]
 8028aae:	4294      	cmp	r4, r2
 8028ab0:	4611      	mov	r1, r2
 8028ab2:	d075      	beq.n	8028ba0 <_malloc_r+0x164>
 8028ab4:	6860      	ldr	r0, [r4, #4]
 8028ab6:	f020 0c03 	bic.w	ip, r0, #3
 8028aba:	ebac 0005 	sub.w	r0, ip, r5
 8028abe:	280f      	cmp	r0, #15
 8028ac0:	dd48      	ble.n	8028b54 <_malloc_r+0x118>
 8028ac2:	1963      	adds	r3, r4, r5
 8028ac4:	f045 0501 	orr.w	r5, r5, #1
 8028ac8:	6065      	str	r5, [r4, #4]
 8028aca:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8028ace:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8028ad2:	f040 0201 	orr.w	r2, r0, #1
 8028ad6:	605a      	str	r2, [r3, #4]
 8028ad8:	f844 000c 	str.w	r0, [r4, ip]
 8028adc:	e7df      	b.n	8028a9e <_malloc_r+0x62>
 8028ade:	0a6b      	lsrs	r3, r5, #9
 8028ae0:	d02a      	beq.n	8028b38 <_malloc_r+0xfc>
 8028ae2:	2b04      	cmp	r3, #4
 8028ae4:	d812      	bhi.n	8028b0c <_malloc_r+0xd0>
 8028ae6:	09ab      	lsrs	r3, r5, #6
 8028ae8:	3338      	adds	r3, #56	; 0x38
 8028aea:	1c5a      	adds	r2, r3, #1
 8028aec:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8028af0:	f1a2 0c08 	sub.w	ip, r2, #8
 8028af4:	6854      	ldr	r4, [r2, #4]
 8028af6:	4564      	cmp	r4, ip
 8028af8:	d006      	beq.n	8028b08 <_malloc_r+0xcc>
 8028afa:	6862      	ldr	r2, [r4, #4]
 8028afc:	f022 0203 	bic.w	r2, r2, #3
 8028b00:	1b50      	subs	r0, r2, r5
 8028b02:	280f      	cmp	r0, #15
 8028b04:	dd1c      	ble.n	8028b40 <_malloc_r+0x104>
 8028b06:	3b01      	subs	r3, #1
 8028b08:	3301      	adds	r3, #1
 8028b0a:	e7ce      	b.n	8028aaa <_malloc_r+0x6e>
 8028b0c:	2b14      	cmp	r3, #20
 8028b0e:	d801      	bhi.n	8028b14 <_malloc_r+0xd8>
 8028b10:	335b      	adds	r3, #91	; 0x5b
 8028b12:	e7ea      	b.n	8028aea <_malloc_r+0xae>
 8028b14:	2b54      	cmp	r3, #84	; 0x54
 8028b16:	d802      	bhi.n	8028b1e <_malloc_r+0xe2>
 8028b18:	0b2b      	lsrs	r3, r5, #12
 8028b1a:	336e      	adds	r3, #110	; 0x6e
 8028b1c:	e7e5      	b.n	8028aea <_malloc_r+0xae>
 8028b1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8028b22:	d802      	bhi.n	8028b2a <_malloc_r+0xee>
 8028b24:	0beb      	lsrs	r3, r5, #15
 8028b26:	3377      	adds	r3, #119	; 0x77
 8028b28:	e7df      	b.n	8028aea <_malloc_r+0xae>
 8028b2a:	f240 5254 	movw	r2, #1364	; 0x554
 8028b2e:	4293      	cmp	r3, r2
 8028b30:	d804      	bhi.n	8028b3c <_malloc_r+0x100>
 8028b32:	0cab      	lsrs	r3, r5, #18
 8028b34:	337c      	adds	r3, #124	; 0x7c
 8028b36:	e7d8      	b.n	8028aea <_malloc_r+0xae>
 8028b38:	233f      	movs	r3, #63	; 0x3f
 8028b3a:	e7d6      	b.n	8028aea <_malloc_r+0xae>
 8028b3c:	237e      	movs	r3, #126	; 0x7e
 8028b3e:	e7d4      	b.n	8028aea <_malloc_r+0xae>
 8028b40:	2800      	cmp	r0, #0
 8028b42:	68e1      	ldr	r1, [r4, #12]
 8028b44:	db04      	blt.n	8028b50 <_malloc_r+0x114>
 8028b46:	68a3      	ldr	r3, [r4, #8]
 8028b48:	60d9      	str	r1, [r3, #12]
 8028b4a:	608b      	str	r3, [r1, #8]
 8028b4c:	18a3      	adds	r3, r4, r2
 8028b4e:	e7a2      	b.n	8028a96 <_malloc_r+0x5a>
 8028b50:	460c      	mov	r4, r1
 8028b52:	e7d0      	b.n	8028af6 <_malloc_r+0xba>
 8028b54:	2800      	cmp	r0, #0
 8028b56:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8028b5a:	db07      	blt.n	8028b6c <_malloc_r+0x130>
 8028b5c:	44a4      	add	ip, r4
 8028b5e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028b62:	f043 0301 	orr.w	r3, r3, #1
 8028b66:	f8cc 3004 	str.w	r3, [ip, #4]
 8028b6a:	e798      	b.n	8028a9e <_malloc_r+0x62>
 8028b6c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8028b70:	6878      	ldr	r0, [r7, #4]
 8028b72:	f080 8099 	bcs.w	8028ca8 <_malloc_r+0x26c>
 8028b76:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8028b7a:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8028b7e:	2201      	movs	r2, #1
 8028b80:	f10c 0c01 	add.w	ip, ip, #1
 8028b84:	fa02 f20e 	lsl.w	r2, r2, lr
 8028b88:	4310      	orrs	r0, r2
 8028b8a:	6078      	str	r0, [r7, #4]
 8028b8c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8028b90:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8028b94:	3a08      	subs	r2, #8
 8028b96:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8028b9a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8028b9e:	60c4      	str	r4, [r0, #12]
 8028ba0:	2001      	movs	r0, #1
 8028ba2:	109a      	asrs	r2, r3, #2
 8028ba4:	fa00 f202 	lsl.w	r2, r0, r2
 8028ba8:	6878      	ldr	r0, [r7, #4]
 8028baa:	4290      	cmp	r0, r2
 8028bac:	d326      	bcc.n	8028bfc <_malloc_r+0x1c0>
 8028bae:	4210      	tst	r0, r2
 8028bb0:	d106      	bne.n	8028bc0 <_malloc_r+0x184>
 8028bb2:	f023 0303 	bic.w	r3, r3, #3
 8028bb6:	0052      	lsls	r2, r2, #1
 8028bb8:	4210      	tst	r0, r2
 8028bba:	f103 0304 	add.w	r3, r3, #4
 8028bbe:	d0fa      	beq.n	8028bb6 <_malloc_r+0x17a>
 8028bc0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8028bc4:	46e1      	mov	r9, ip
 8028bc6:	4698      	mov	r8, r3
 8028bc8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8028bcc:	454c      	cmp	r4, r9
 8028bce:	f040 80af 	bne.w	8028d30 <_malloc_r+0x2f4>
 8028bd2:	f108 0801 	add.w	r8, r8, #1
 8028bd6:	f018 0f03 	tst.w	r8, #3
 8028bda:	f109 0908 	add.w	r9, r9, #8
 8028bde:	d1f3      	bne.n	8028bc8 <_malloc_r+0x18c>
 8028be0:	0798      	lsls	r0, r3, #30
 8028be2:	f040 80e8 	bne.w	8028db6 <_malloc_r+0x37a>
 8028be6:	687b      	ldr	r3, [r7, #4]
 8028be8:	ea23 0302 	bic.w	r3, r3, r2
 8028bec:	607b      	str	r3, [r7, #4]
 8028bee:	6878      	ldr	r0, [r7, #4]
 8028bf0:	0052      	lsls	r2, r2, #1
 8028bf2:	4290      	cmp	r0, r2
 8028bf4:	d302      	bcc.n	8028bfc <_malloc_r+0x1c0>
 8028bf6:	2a00      	cmp	r2, #0
 8028bf8:	f040 80ec 	bne.w	8028dd4 <_malloc_r+0x398>
 8028bfc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8028c00:	f8da 4004 	ldr.w	r4, [sl, #4]
 8028c04:	f024 0203 	bic.w	r2, r4, #3
 8028c08:	42aa      	cmp	r2, r5
 8028c0a:	d303      	bcc.n	8028c14 <_malloc_r+0x1d8>
 8028c0c:	1b53      	subs	r3, r2, r5
 8028c0e:	2b0f      	cmp	r3, #15
 8028c10:	f300 8140 	bgt.w	8028e94 <_malloc_r+0x458>
 8028c14:	4b57      	ldr	r3, [pc, #348]	; (8028d74 <_malloc_r+0x338>)
 8028c16:	9200      	str	r2, [sp, #0]
 8028c18:	2008      	movs	r0, #8
 8028c1a:	681c      	ldr	r4, [r3, #0]
 8028c1c:	f001 fe16 	bl	802a84c <sysconf>
 8028c20:	4b55      	ldr	r3, [pc, #340]	; (8028d78 <_malloc_r+0x33c>)
 8028c22:	9a00      	ldr	r2, [sp, #0]
 8028c24:	6819      	ldr	r1, [r3, #0]
 8028c26:	3410      	adds	r4, #16
 8028c28:	3101      	adds	r1, #1
 8028c2a:	442c      	add	r4, r5
 8028c2c:	bf1f      	itttt	ne
 8028c2e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8028c32:	1824      	addne	r4, r4, r0
 8028c34:	4241      	negne	r1, r0
 8028c36:	400c      	andne	r4, r1
 8028c38:	4680      	mov	r8, r0
 8028c3a:	4621      	mov	r1, r4
 8028c3c:	4630      	mov	r0, r6
 8028c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8028c42:	f000 fb5d 	bl	8029300 <_sbrk_r>
 8028c46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8028c4a:	4683      	mov	fp, r0
 8028c4c:	f000 80fb 	beq.w	8028e46 <_malloc_r+0x40a>
 8028c50:	9a00      	ldr	r2, [sp, #0]
 8028c52:	9b01      	ldr	r3, [sp, #4]
 8028c54:	eb0a 0102 	add.w	r1, sl, r2
 8028c58:	4281      	cmp	r1, r0
 8028c5a:	d902      	bls.n	8028c62 <_malloc_r+0x226>
 8028c5c:	45ba      	cmp	sl, r7
 8028c5e:	f040 80f2 	bne.w	8028e46 <_malloc_r+0x40a>
 8028c62:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8028d84 <_malloc_r+0x348>
 8028c66:	f8d9 0000 	ldr.w	r0, [r9]
 8028c6a:	4559      	cmp	r1, fp
 8028c6c:	eb00 0e04 	add.w	lr, r0, r4
 8028c70:	f8c9 e000 	str.w	lr, [r9]
 8028c74:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8028c78:	f040 80ae 	bne.w	8028dd8 <_malloc_r+0x39c>
 8028c7c:	ea11 0f0c 	tst.w	r1, ip
 8028c80:	f040 80aa 	bne.w	8028dd8 <_malloc_r+0x39c>
 8028c84:	68bb      	ldr	r3, [r7, #8]
 8028c86:	4414      	add	r4, r2
 8028c88:	f044 0401 	orr.w	r4, r4, #1
 8028c8c:	605c      	str	r4, [r3, #4]
 8028c8e:	4a3b      	ldr	r2, [pc, #236]	; (8028d7c <_malloc_r+0x340>)
 8028c90:	f8d9 3000 	ldr.w	r3, [r9]
 8028c94:	6811      	ldr	r1, [r2, #0]
 8028c96:	428b      	cmp	r3, r1
 8028c98:	bf88      	it	hi
 8028c9a:	6013      	strhi	r3, [r2, #0]
 8028c9c:	4a38      	ldr	r2, [pc, #224]	; (8028d80 <_malloc_r+0x344>)
 8028c9e:	6811      	ldr	r1, [r2, #0]
 8028ca0:	428b      	cmp	r3, r1
 8028ca2:	bf88      	it	hi
 8028ca4:	6013      	strhi	r3, [r2, #0]
 8028ca6:	e0ce      	b.n	8028e46 <_malloc_r+0x40a>
 8028ca8:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8028cac:	2a04      	cmp	r2, #4
 8028cae:	d818      	bhi.n	8028ce2 <_malloc_r+0x2a6>
 8028cb0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8028cb4:	3238      	adds	r2, #56	; 0x38
 8028cb6:	f102 0e01 	add.w	lr, r2, #1
 8028cba:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8028cbe:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8028cc2:	45f0      	cmp	r8, lr
 8028cc4:	d12b      	bne.n	8028d1e <_malloc_r+0x2e2>
 8028cc6:	1092      	asrs	r2, r2, #2
 8028cc8:	f04f 0c01 	mov.w	ip, #1
 8028ccc:	fa0c f202 	lsl.w	r2, ip, r2
 8028cd0:	4310      	orrs	r0, r2
 8028cd2:	6078      	str	r0, [r7, #4]
 8028cd4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8028cd8:	f8c8 4008 	str.w	r4, [r8, #8]
 8028cdc:	f8ce 400c 	str.w	r4, [lr, #12]
 8028ce0:	e75e      	b.n	8028ba0 <_malloc_r+0x164>
 8028ce2:	2a14      	cmp	r2, #20
 8028ce4:	d801      	bhi.n	8028cea <_malloc_r+0x2ae>
 8028ce6:	325b      	adds	r2, #91	; 0x5b
 8028ce8:	e7e5      	b.n	8028cb6 <_malloc_r+0x27a>
 8028cea:	2a54      	cmp	r2, #84	; 0x54
 8028cec:	d803      	bhi.n	8028cf6 <_malloc_r+0x2ba>
 8028cee:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8028cf2:	326e      	adds	r2, #110	; 0x6e
 8028cf4:	e7df      	b.n	8028cb6 <_malloc_r+0x27a>
 8028cf6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8028cfa:	d803      	bhi.n	8028d04 <_malloc_r+0x2c8>
 8028cfc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8028d00:	3277      	adds	r2, #119	; 0x77
 8028d02:	e7d8      	b.n	8028cb6 <_malloc_r+0x27a>
 8028d04:	f240 5e54 	movw	lr, #1364	; 0x554
 8028d08:	4572      	cmp	r2, lr
 8028d0a:	bf9a      	itte	ls
 8028d0c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8028d10:	327c      	addls	r2, #124	; 0x7c
 8028d12:	227e      	movhi	r2, #126	; 0x7e
 8028d14:	e7cf      	b.n	8028cb6 <_malloc_r+0x27a>
 8028d16:	f8de e008 	ldr.w	lr, [lr, #8]
 8028d1a:	45f0      	cmp	r8, lr
 8028d1c:	d005      	beq.n	8028d2a <_malloc_r+0x2ee>
 8028d1e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8028d22:	f022 0203 	bic.w	r2, r2, #3
 8028d26:	4562      	cmp	r2, ip
 8028d28:	d8f5      	bhi.n	8028d16 <_malloc_r+0x2da>
 8028d2a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8028d2e:	e7d1      	b.n	8028cd4 <_malloc_r+0x298>
 8028d30:	6860      	ldr	r0, [r4, #4]
 8028d32:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8028d36:	f020 0003 	bic.w	r0, r0, #3
 8028d3a:	eba0 0a05 	sub.w	sl, r0, r5
 8028d3e:	f1ba 0f0f 	cmp.w	sl, #15
 8028d42:	dd21      	ble.n	8028d88 <_malloc_r+0x34c>
 8028d44:	68a2      	ldr	r2, [r4, #8]
 8028d46:	1963      	adds	r3, r4, r5
 8028d48:	f045 0501 	orr.w	r5, r5, #1
 8028d4c:	6065      	str	r5, [r4, #4]
 8028d4e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8028d52:	f8ce 2008 	str.w	r2, [lr, #8]
 8028d56:	f04a 0201 	orr.w	r2, sl, #1
 8028d5a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8028d5e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8028d62:	605a      	str	r2, [r3, #4]
 8028d64:	f844 a000 	str.w	sl, [r4, r0]
 8028d68:	e699      	b.n	8028a9e <_malloc_r+0x62>
 8028d6a:	bf00      	nop
 8028d6c:	20008860 	.word	0x20008860
 8028d70:	20008868 	.word	0x20008868
 8028d74:	2003cf7c 	.word	0x2003cf7c
 8028d78:	20008c68 	.word	0x20008c68
 8028d7c:	2003cf74 	.word	0x2003cf74
 8028d80:	2003cf78 	.word	0x2003cf78
 8028d84:	2003cf4c 	.word	0x2003cf4c
 8028d88:	f1ba 0f00 	cmp.w	sl, #0
 8028d8c:	db11      	blt.n	8028db2 <_malloc_r+0x376>
 8028d8e:	4420      	add	r0, r4
 8028d90:	6843      	ldr	r3, [r0, #4]
 8028d92:	f043 0301 	orr.w	r3, r3, #1
 8028d96:	6043      	str	r3, [r0, #4]
 8028d98:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8028d9c:	4630      	mov	r0, r6
 8028d9e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8028da2:	f8ce 3008 	str.w	r3, [lr, #8]
 8028da6:	f000 f8c1 	bl	8028f2c <__malloc_unlock>
 8028daa:	4620      	mov	r0, r4
 8028dac:	b003      	add	sp, #12
 8028dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028db2:	4674      	mov	r4, lr
 8028db4:	e70a      	b.n	8028bcc <_malloc_r+0x190>
 8028db6:	f1ac 0008 	sub.w	r0, ip, #8
 8028dba:	f8dc c000 	ldr.w	ip, [ip]
 8028dbe:	4584      	cmp	ip, r0
 8028dc0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8028dc4:	f43f af0c 	beq.w	8028be0 <_malloc_r+0x1a4>
 8028dc8:	e711      	b.n	8028bee <_malloc_r+0x1b2>
 8028dca:	3304      	adds	r3, #4
 8028dcc:	0052      	lsls	r2, r2, #1
 8028dce:	4210      	tst	r0, r2
 8028dd0:	d0fb      	beq.n	8028dca <_malloc_r+0x38e>
 8028dd2:	e6f5      	b.n	8028bc0 <_malloc_r+0x184>
 8028dd4:	4643      	mov	r3, r8
 8028dd6:	e7fa      	b.n	8028dce <_malloc_r+0x392>
 8028dd8:	6818      	ldr	r0, [r3, #0]
 8028dda:	9200      	str	r2, [sp, #0]
 8028ddc:	3001      	adds	r0, #1
 8028dde:	bf1b      	ittet	ne
 8028de0:	ebab 0101 	subne.w	r1, fp, r1
 8028de4:	4471      	addne	r1, lr
 8028de6:	f8c3 b000 	streq.w	fp, [r3]
 8028dea:	f8c9 1000 	strne.w	r1, [r9]
 8028dee:	f01b 0307 	ands.w	r3, fp, #7
 8028df2:	bf1c      	itt	ne
 8028df4:	f1c3 0308 	rsbne	r3, r3, #8
 8028df8:	449b      	addne	fp, r3
 8028dfa:	445c      	add	r4, fp
 8028dfc:	4498      	add	r8, r3
 8028dfe:	ea04 030c 	and.w	r3, r4, ip
 8028e02:	eba8 0803 	sub.w	r8, r8, r3
 8028e06:	4641      	mov	r1, r8
 8028e08:	4630      	mov	r0, r6
 8028e0a:	f000 fa79 	bl	8029300 <_sbrk_r>
 8028e0e:	1c43      	adds	r3, r0, #1
 8028e10:	bf04      	itt	eq
 8028e12:	4658      	moveq	r0, fp
 8028e14:	f04f 0800 	moveq.w	r8, #0
 8028e18:	f8d9 3000 	ldr.w	r3, [r9]
 8028e1c:	f8c7 b008 	str.w	fp, [r7, #8]
 8028e20:	eba0 000b 	sub.w	r0, r0, fp
 8028e24:	4440      	add	r0, r8
 8028e26:	4443      	add	r3, r8
 8028e28:	f040 0001 	orr.w	r0, r0, #1
 8028e2c:	45ba      	cmp	sl, r7
 8028e2e:	9a00      	ldr	r2, [sp, #0]
 8028e30:	f8c9 3000 	str.w	r3, [r9]
 8028e34:	f8cb 0004 	str.w	r0, [fp, #4]
 8028e38:	f43f af29 	beq.w	8028c8e <_malloc_r+0x252>
 8028e3c:	2a0f      	cmp	r2, #15
 8028e3e:	d810      	bhi.n	8028e62 <_malloc_r+0x426>
 8028e40:	2301      	movs	r3, #1
 8028e42:	f8cb 3004 	str.w	r3, [fp, #4]
 8028e46:	68bb      	ldr	r3, [r7, #8]
 8028e48:	685a      	ldr	r2, [r3, #4]
 8028e4a:	f022 0203 	bic.w	r2, r2, #3
 8028e4e:	42aa      	cmp	r2, r5
 8028e50:	eba2 0305 	sub.w	r3, r2, r5
 8028e54:	d301      	bcc.n	8028e5a <_malloc_r+0x41e>
 8028e56:	2b0f      	cmp	r3, #15
 8028e58:	dc1c      	bgt.n	8028e94 <_malloc_r+0x458>
 8028e5a:	4630      	mov	r0, r6
 8028e5c:	f000 f866 	bl	8028f2c <__malloc_unlock>
 8028e60:	e5f8      	b.n	8028a54 <_malloc_r+0x18>
 8028e62:	f8da 3004 	ldr.w	r3, [sl, #4]
 8028e66:	f1a2 040c 	sub.w	r4, r2, #12
 8028e6a:	f024 0407 	bic.w	r4, r4, #7
 8028e6e:	f003 0301 	and.w	r3, r3, #1
 8028e72:	4323      	orrs	r3, r4
 8028e74:	f8ca 3004 	str.w	r3, [sl, #4]
 8028e78:	2205      	movs	r2, #5
 8028e7a:	eb0a 0304 	add.w	r3, sl, r4
 8028e7e:	2c0f      	cmp	r4, #15
 8028e80:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8028e84:	f67f af03 	bls.w	8028c8e <_malloc_r+0x252>
 8028e88:	f10a 0108 	add.w	r1, sl, #8
 8028e8c:	4630      	mov	r0, r6
 8028e8e:	f002 fd6d 	bl	802b96c <_free_r>
 8028e92:	e6fc      	b.n	8028c8e <_malloc_r+0x252>
 8028e94:	68bc      	ldr	r4, [r7, #8]
 8028e96:	f045 0201 	orr.w	r2, r5, #1
 8028e9a:	4425      	add	r5, r4
 8028e9c:	f043 0301 	orr.w	r3, r3, #1
 8028ea0:	6062      	str	r2, [r4, #4]
 8028ea2:	60bd      	str	r5, [r7, #8]
 8028ea4:	606b      	str	r3, [r5, #4]
 8028ea6:	e5fa      	b.n	8028a9e <_malloc_r+0x62>

08028ea8 <memcmp>:
 8028ea8:	b530      	push	{r4, r5, lr}
 8028eaa:	2400      	movs	r4, #0
 8028eac:	42a2      	cmp	r2, r4
 8028eae:	d101      	bne.n	8028eb4 <memcmp+0xc>
 8028eb0:	2000      	movs	r0, #0
 8028eb2:	e007      	b.n	8028ec4 <memcmp+0x1c>
 8028eb4:	5d03      	ldrb	r3, [r0, r4]
 8028eb6:	3401      	adds	r4, #1
 8028eb8:	190d      	adds	r5, r1, r4
 8028eba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8028ebe:	42ab      	cmp	r3, r5
 8028ec0:	d0f4      	beq.n	8028eac <memcmp+0x4>
 8028ec2:	1b58      	subs	r0, r3, r5
 8028ec4:	bd30      	pop	{r4, r5, pc}

08028ec6 <memcpy>:
 8028ec6:	b510      	push	{r4, lr}
 8028ec8:	1e43      	subs	r3, r0, #1
 8028eca:	440a      	add	r2, r1
 8028ecc:	4291      	cmp	r1, r2
 8028ece:	d100      	bne.n	8028ed2 <memcpy+0xc>
 8028ed0:	bd10      	pop	{r4, pc}
 8028ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028eda:	e7f7      	b.n	8028ecc <memcpy+0x6>

08028edc <memmove>:
 8028edc:	4288      	cmp	r0, r1
 8028ede:	b510      	push	{r4, lr}
 8028ee0:	eb01 0302 	add.w	r3, r1, r2
 8028ee4:	d807      	bhi.n	8028ef6 <memmove+0x1a>
 8028ee6:	1e42      	subs	r2, r0, #1
 8028ee8:	4299      	cmp	r1, r3
 8028eea:	d00a      	beq.n	8028f02 <memmove+0x26>
 8028eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028ef0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8028ef4:	e7f8      	b.n	8028ee8 <memmove+0xc>
 8028ef6:	4283      	cmp	r3, r0
 8028ef8:	d9f5      	bls.n	8028ee6 <memmove+0xa>
 8028efa:	1881      	adds	r1, r0, r2
 8028efc:	1ad2      	subs	r2, r2, r3
 8028efe:	42d3      	cmn	r3, r2
 8028f00:	d100      	bne.n	8028f04 <memmove+0x28>
 8028f02:	bd10      	pop	{r4, pc}
 8028f04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8028f08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8028f0c:	e7f7      	b.n	8028efe <memmove+0x22>

08028f0e <memset>:
 8028f0e:	4402      	add	r2, r0
 8028f10:	4603      	mov	r3, r0
 8028f12:	4293      	cmp	r3, r2
 8028f14:	d100      	bne.n	8028f18 <memset+0xa>
 8028f16:	4770      	bx	lr
 8028f18:	f803 1b01 	strb.w	r1, [r3], #1
 8028f1c:	e7f9      	b.n	8028f12 <memset+0x4>
	...

08028f20 <__malloc_lock>:
 8028f20:	4801      	ldr	r0, [pc, #4]	; (8028f28 <__malloc_lock+0x8>)
 8028f22:	f7ff bd79 	b.w	8028a18 <__retarget_lock_acquire_recursive>
 8028f26:	bf00      	nop
 8028f28:	2003cfe8 	.word	0x2003cfe8

08028f2c <__malloc_unlock>:
 8028f2c:	4801      	ldr	r0, [pc, #4]	; (8028f34 <__malloc_unlock+0x8>)
 8028f2e:	f7ff bd74 	b.w	8028a1a <__retarget_lock_release_recursive>
 8028f32:	bf00      	nop
 8028f34:	2003cfe8 	.word	0x2003cfe8

08028f38 <_putc_r>:
 8028f38:	b570      	push	{r4, r5, r6, lr}
 8028f3a:	460d      	mov	r5, r1
 8028f3c:	4614      	mov	r4, r2
 8028f3e:	4606      	mov	r6, r0
 8028f40:	b118      	cbz	r0, 8028f4a <_putc_r+0x12>
 8028f42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028f44:	b90b      	cbnz	r3, 8028f4a <_putc_r+0x12>
 8028f46:	f002 fc81 	bl	802b84c <__sinit>
 8028f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028f4c:	07d8      	lsls	r0, r3, #31
 8028f4e:	d405      	bmi.n	8028f5c <_putc_r+0x24>
 8028f50:	89a3      	ldrh	r3, [r4, #12]
 8028f52:	0599      	lsls	r1, r3, #22
 8028f54:	d402      	bmi.n	8028f5c <_putc_r+0x24>
 8028f56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f58:	f7ff fd5e 	bl	8028a18 <__retarget_lock_acquire_recursive>
 8028f5c:	68a3      	ldr	r3, [r4, #8]
 8028f5e:	3b01      	subs	r3, #1
 8028f60:	2b00      	cmp	r3, #0
 8028f62:	60a3      	str	r3, [r4, #8]
 8028f64:	da05      	bge.n	8028f72 <_putc_r+0x3a>
 8028f66:	69a2      	ldr	r2, [r4, #24]
 8028f68:	4293      	cmp	r3, r2
 8028f6a:	db12      	blt.n	8028f92 <_putc_r+0x5a>
 8028f6c:	b2eb      	uxtb	r3, r5
 8028f6e:	2b0a      	cmp	r3, #10
 8028f70:	d00f      	beq.n	8028f92 <_putc_r+0x5a>
 8028f72:	6823      	ldr	r3, [r4, #0]
 8028f74:	1c5a      	adds	r2, r3, #1
 8028f76:	6022      	str	r2, [r4, #0]
 8028f78:	701d      	strb	r5, [r3, #0]
 8028f7a:	b2ed      	uxtb	r5, r5
 8028f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028f7e:	07da      	lsls	r2, r3, #31
 8028f80:	d405      	bmi.n	8028f8e <_putc_r+0x56>
 8028f82:	89a3      	ldrh	r3, [r4, #12]
 8028f84:	059b      	lsls	r3, r3, #22
 8028f86:	d402      	bmi.n	8028f8e <_putc_r+0x56>
 8028f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f8a:	f7ff fd46 	bl	8028a1a <__retarget_lock_release_recursive>
 8028f8e:	4628      	mov	r0, r5
 8028f90:	bd70      	pop	{r4, r5, r6, pc}
 8028f92:	4629      	mov	r1, r5
 8028f94:	4622      	mov	r2, r4
 8028f96:	4630      	mov	r0, r6
 8028f98:	f001 fc65 	bl	802a866 <__swbuf_r>
 8028f9c:	4605      	mov	r5, r0
 8028f9e:	e7ed      	b.n	8028f7c <_putc_r+0x44>

08028fa0 <realloc>:
 8028fa0:	4b02      	ldr	r3, [pc, #8]	; (8028fac <realloc+0xc>)
 8028fa2:	460a      	mov	r2, r1
 8028fa4:	4601      	mov	r1, r0
 8028fa6:	6818      	ldr	r0, [r3, #0]
 8028fa8:	f000 b802 	b.w	8028fb0 <_realloc_r>
 8028fac:	20008430 	.word	0x20008430

08028fb0 <_realloc_r>:
 8028fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fb4:	4682      	mov	sl, r0
 8028fb6:	460c      	mov	r4, r1
 8028fb8:	b929      	cbnz	r1, 8028fc6 <_realloc_r+0x16>
 8028fba:	4611      	mov	r1, r2
 8028fbc:	b003      	add	sp, #12
 8028fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fc2:	f7ff bd3b 	b.w	8028a3c <_malloc_r>
 8028fc6:	9201      	str	r2, [sp, #4]
 8028fc8:	f7ff ffaa 	bl	8028f20 <__malloc_lock>
 8028fcc:	9a01      	ldr	r2, [sp, #4]
 8028fce:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8028fd2:	f102 080b 	add.w	r8, r2, #11
 8028fd6:	f1b8 0f16 	cmp.w	r8, #22
 8028fda:	f1a4 0908 	sub.w	r9, r4, #8
 8028fde:	f025 0603 	bic.w	r6, r5, #3
 8028fe2:	d90b      	bls.n	8028ffc <_realloc_r+0x4c>
 8028fe4:	f038 0807 	bics.w	r8, r8, #7
 8028fe8:	d50a      	bpl.n	8029000 <_realloc_r+0x50>
 8028fea:	230c      	movs	r3, #12
 8028fec:	f8ca 3000 	str.w	r3, [sl]
 8028ff0:	f04f 0b00 	mov.w	fp, #0
 8028ff4:	4658      	mov	r0, fp
 8028ff6:	b003      	add	sp, #12
 8028ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ffc:	f04f 0810 	mov.w	r8, #16
 8029000:	4590      	cmp	r8, r2
 8029002:	d3f2      	bcc.n	8028fea <_realloc_r+0x3a>
 8029004:	45b0      	cmp	r8, r6
 8029006:	f340 8170 	ble.w	80292ea <_realloc_r+0x33a>
 802900a:	49a9      	ldr	r1, [pc, #676]	; (80292b0 <_realloc_r+0x300>)
 802900c:	9101      	str	r1, [sp, #4]
 802900e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8029012:	eb09 0306 	add.w	r3, r9, r6
 8029016:	459c      	cmp	ip, r3
 8029018:	6858      	ldr	r0, [r3, #4]
 802901a:	d005      	beq.n	8029028 <_realloc_r+0x78>
 802901c:	f020 0101 	bic.w	r1, r0, #1
 8029020:	4419      	add	r1, r3
 8029022:	6849      	ldr	r1, [r1, #4]
 8029024:	07cf      	lsls	r7, r1, #31
 8029026:	d447      	bmi.n	80290b8 <_realloc_r+0x108>
 8029028:	f020 0003 	bic.w	r0, r0, #3
 802902c:	459c      	cmp	ip, r3
 802902e:	eb06 0700 	add.w	r7, r6, r0
 8029032:	d119      	bne.n	8029068 <_realloc_r+0xb8>
 8029034:	f108 0110 	add.w	r1, r8, #16
 8029038:	42b9      	cmp	r1, r7
 802903a:	dc3f      	bgt.n	80290bc <_realloc_r+0x10c>
 802903c:	eb09 0308 	add.w	r3, r9, r8
 8029040:	9a01      	ldr	r2, [sp, #4]
 8029042:	eba7 0708 	sub.w	r7, r7, r8
 8029046:	f047 0701 	orr.w	r7, r7, #1
 802904a:	6093      	str	r3, [r2, #8]
 802904c:	605f      	str	r7, [r3, #4]
 802904e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8029052:	f003 0301 	and.w	r3, r3, #1
 8029056:	ea43 0308 	orr.w	r3, r3, r8
 802905a:	f844 3c04 	str.w	r3, [r4, #-4]
 802905e:	4650      	mov	r0, sl
 8029060:	f7ff ff64 	bl	8028f2c <__malloc_unlock>
 8029064:	46a3      	mov	fp, r4
 8029066:	e7c5      	b.n	8028ff4 <_realloc_r+0x44>
 8029068:	45b8      	cmp	r8, r7
 802906a:	dc27      	bgt.n	80290bc <_realloc_r+0x10c>
 802906c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8029070:	60da      	str	r2, [r3, #12]
 8029072:	6093      	str	r3, [r2, #8]
 8029074:	eba7 0008 	sub.w	r0, r7, r8
 8029078:	f8d9 2004 	ldr.w	r2, [r9, #4]
 802907c:	280f      	cmp	r0, #15
 802907e:	f002 0201 	and.w	r2, r2, #1
 8029082:	eb09 0307 	add.w	r3, r9, r7
 8029086:	f240 8132 	bls.w	80292ee <_realloc_r+0x33e>
 802908a:	eb09 0108 	add.w	r1, r9, r8
 802908e:	ea48 0202 	orr.w	r2, r8, r2
 8029092:	f040 0001 	orr.w	r0, r0, #1
 8029096:	f8c9 2004 	str.w	r2, [r9, #4]
 802909a:	6048      	str	r0, [r1, #4]
 802909c:	685a      	ldr	r2, [r3, #4]
 802909e:	f042 0201 	orr.w	r2, r2, #1
 80290a2:	605a      	str	r2, [r3, #4]
 80290a4:	3108      	adds	r1, #8
 80290a6:	4650      	mov	r0, sl
 80290a8:	f002 fc60 	bl	802b96c <_free_r>
 80290ac:	4650      	mov	r0, sl
 80290ae:	f7ff ff3d 	bl	8028f2c <__malloc_unlock>
 80290b2:	f109 0b08 	add.w	fp, r9, #8
 80290b6:	e79d      	b.n	8028ff4 <_realloc_r+0x44>
 80290b8:	2000      	movs	r0, #0
 80290ba:	4603      	mov	r3, r0
 80290bc:	07e9      	lsls	r1, r5, #31
 80290be:	f100 80c6 	bmi.w	802924e <_realloc_r+0x29e>
 80290c2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80290c6:	eba9 0505 	sub.w	r5, r9, r5
 80290ca:	6869      	ldr	r1, [r5, #4]
 80290cc:	f021 0103 	bic.w	r1, r1, #3
 80290d0:	eb01 0b06 	add.w	fp, r1, r6
 80290d4:	2b00      	cmp	r3, #0
 80290d6:	f000 8086 	beq.w	80291e6 <_realloc_r+0x236>
 80290da:	459c      	cmp	ip, r3
 80290dc:	eb00 070b 	add.w	r7, r0, fp
 80290e0:	d149      	bne.n	8029176 <_realloc_r+0x1c6>
 80290e2:	f108 0310 	add.w	r3, r8, #16
 80290e6:	42bb      	cmp	r3, r7
 80290e8:	dc7d      	bgt.n	80291e6 <_realloc_r+0x236>
 80290ea:	46ab      	mov	fp, r5
 80290ec:	68eb      	ldr	r3, [r5, #12]
 80290ee:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80290f2:	60d3      	str	r3, [r2, #12]
 80290f4:	609a      	str	r2, [r3, #8]
 80290f6:	1f32      	subs	r2, r6, #4
 80290f8:	2a24      	cmp	r2, #36	; 0x24
 80290fa:	d837      	bhi.n	802916c <_realloc_r+0x1bc>
 80290fc:	2a13      	cmp	r2, #19
 80290fe:	d933      	bls.n	8029168 <_realloc_r+0x1b8>
 8029100:	6823      	ldr	r3, [r4, #0]
 8029102:	60ab      	str	r3, [r5, #8]
 8029104:	6863      	ldr	r3, [r4, #4]
 8029106:	60eb      	str	r3, [r5, #12]
 8029108:	2a1b      	cmp	r2, #27
 802910a:	d81b      	bhi.n	8029144 <_realloc_r+0x194>
 802910c:	3408      	adds	r4, #8
 802910e:	f105 0310 	add.w	r3, r5, #16
 8029112:	6822      	ldr	r2, [r4, #0]
 8029114:	601a      	str	r2, [r3, #0]
 8029116:	6862      	ldr	r2, [r4, #4]
 8029118:	605a      	str	r2, [r3, #4]
 802911a:	68a2      	ldr	r2, [r4, #8]
 802911c:	609a      	str	r2, [r3, #8]
 802911e:	eb05 0308 	add.w	r3, r5, r8
 8029122:	9a01      	ldr	r2, [sp, #4]
 8029124:	eba7 0708 	sub.w	r7, r7, r8
 8029128:	f047 0701 	orr.w	r7, r7, #1
 802912c:	6093      	str	r3, [r2, #8]
 802912e:	605f      	str	r7, [r3, #4]
 8029130:	686b      	ldr	r3, [r5, #4]
 8029132:	f003 0301 	and.w	r3, r3, #1
 8029136:	ea43 0308 	orr.w	r3, r3, r8
 802913a:	606b      	str	r3, [r5, #4]
 802913c:	4650      	mov	r0, sl
 802913e:	f7ff fef5 	bl	8028f2c <__malloc_unlock>
 8029142:	e757      	b.n	8028ff4 <_realloc_r+0x44>
 8029144:	68a3      	ldr	r3, [r4, #8]
 8029146:	612b      	str	r3, [r5, #16]
 8029148:	68e3      	ldr	r3, [r4, #12]
 802914a:	616b      	str	r3, [r5, #20]
 802914c:	2a24      	cmp	r2, #36	; 0x24
 802914e:	bf01      	itttt	eq
 8029150:	6923      	ldreq	r3, [r4, #16]
 8029152:	61ab      	streq	r3, [r5, #24]
 8029154:	6962      	ldreq	r2, [r4, #20]
 8029156:	61ea      	streq	r2, [r5, #28]
 8029158:	bf19      	ittee	ne
 802915a:	3410      	addne	r4, #16
 802915c:	f105 0318 	addne.w	r3, r5, #24
 8029160:	f105 0320 	addeq.w	r3, r5, #32
 8029164:	3418      	addeq	r4, #24
 8029166:	e7d4      	b.n	8029112 <_realloc_r+0x162>
 8029168:	465b      	mov	r3, fp
 802916a:	e7d2      	b.n	8029112 <_realloc_r+0x162>
 802916c:	4621      	mov	r1, r4
 802916e:	4658      	mov	r0, fp
 8029170:	f7ff feb4 	bl	8028edc <memmove>
 8029174:	e7d3      	b.n	802911e <_realloc_r+0x16e>
 8029176:	45b8      	cmp	r8, r7
 8029178:	dc35      	bgt.n	80291e6 <_realloc_r+0x236>
 802917a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 802917e:	4628      	mov	r0, r5
 8029180:	60da      	str	r2, [r3, #12]
 8029182:	6093      	str	r3, [r2, #8]
 8029184:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8029188:	68eb      	ldr	r3, [r5, #12]
 802918a:	60d3      	str	r3, [r2, #12]
 802918c:	609a      	str	r2, [r3, #8]
 802918e:	1f32      	subs	r2, r6, #4
 8029190:	2a24      	cmp	r2, #36	; 0x24
 8029192:	d824      	bhi.n	80291de <_realloc_r+0x22e>
 8029194:	2a13      	cmp	r2, #19
 8029196:	d908      	bls.n	80291aa <_realloc_r+0x1fa>
 8029198:	6823      	ldr	r3, [r4, #0]
 802919a:	60ab      	str	r3, [r5, #8]
 802919c:	6863      	ldr	r3, [r4, #4]
 802919e:	60eb      	str	r3, [r5, #12]
 80291a0:	2a1b      	cmp	r2, #27
 80291a2:	d80a      	bhi.n	80291ba <_realloc_r+0x20a>
 80291a4:	3408      	adds	r4, #8
 80291a6:	f105 0010 	add.w	r0, r5, #16
 80291aa:	6823      	ldr	r3, [r4, #0]
 80291ac:	6003      	str	r3, [r0, #0]
 80291ae:	6863      	ldr	r3, [r4, #4]
 80291b0:	6043      	str	r3, [r0, #4]
 80291b2:	68a3      	ldr	r3, [r4, #8]
 80291b4:	6083      	str	r3, [r0, #8]
 80291b6:	46a9      	mov	r9, r5
 80291b8:	e75c      	b.n	8029074 <_realloc_r+0xc4>
 80291ba:	68a3      	ldr	r3, [r4, #8]
 80291bc:	612b      	str	r3, [r5, #16]
 80291be:	68e3      	ldr	r3, [r4, #12]
 80291c0:	616b      	str	r3, [r5, #20]
 80291c2:	2a24      	cmp	r2, #36	; 0x24
 80291c4:	bf01      	itttt	eq
 80291c6:	6923      	ldreq	r3, [r4, #16]
 80291c8:	61ab      	streq	r3, [r5, #24]
 80291ca:	6963      	ldreq	r3, [r4, #20]
 80291cc:	61eb      	streq	r3, [r5, #28]
 80291ce:	bf19      	ittee	ne
 80291d0:	3410      	addne	r4, #16
 80291d2:	f105 0018 	addne.w	r0, r5, #24
 80291d6:	f105 0020 	addeq.w	r0, r5, #32
 80291da:	3418      	addeq	r4, #24
 80291dc:	e7e5      	b.n	80291aa <_realloc_r+0x1fa>
 80291de:	4621      	mov	r1, r4
 80291e0:	f7ff fe7c 	bl	8028edc <memmove>
 80291e4:	e7e7      	b.n	80291b6 <_realloc_r+0x206>
 80291e6:	45d8      	cmp	r8, fp
 80291e8:	dc31      	bgt.n	802924e <_realloc_r+0x29e>
 80291ea:	4628      	mov	r0, r5
 80291ec:	68eb      	ldr	r3, [r5, #12]
 80291ee:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80291f2:	60d3      	str	r3, [r2, #12]
 80291f4:	609a      	str	r2, [r3, #8]
 80291f6:	1f32      	subs	r2, r6, #4
 80291f8:	2a24      	cmp	r2, #36	; 0x24
 80291fa:	d824      	bhi.n	8029246 <_realloc_r+0x296>
 80291fc:	2a13      	cmp	r2, #19
 80291fe:	d908      	bls.n	8029212 <_realloc_r+0x262>
 8029200:	6823      	ldr	r3, [r4, #0]
 8029202:	60ab      	str	r3, [r5, #8]
 8029204:	6863      	ldr	r3, [r4, #4]
 8029206:	60eb      	str	r3, [r5, #12]
 8029208:	2a1b      	cmp	r2, #27
 802920a:	d80a      	bhi.n	8029222 <_realloc_r+0x272>
 802920c:	3408      	adds	r4, #8
 802920e:	f105 0010 	add.w	r0, r5, #16
 8029212:	6823      	ldr	r3, [r4, #0]
 8029214:	6003      	str	r3, [r0, #0]
 8029216:	6863      	ldr	r3, [r4, #4]
 8029218:	6043      	str	r3, [r0, #4]
 802921a:	68a3      	ldr	r3, [r4, #8]
 802921c:	6083      	str	r3, [r0, #8]
 802921e:	465f      	mov	r7, fp
 8029220:	e7c9      	b.n	80291b6 <_realloc_r+0x206>
 8029222:	68a3      	ldr	r3, [r4, #8]
 8029224:	612b      	str	r3, [r5, #16]
 8029226:	68e3      	ldr	r3, [r4, #12]
 8029228:	616b      	str	r3, [r5, #20]
 802922a:	2a24      	cmp	r2, #36	; 0x24
 802922c:	bf01      	itttt	eq
 802922e:	6923      	ldreq	r3, [r4, #16]
 8029230:	61ab      	streq	r3, [r5, #24]
 8029232:	6963      	ldreq	r3, [r4, #20]
 8029234:	61eb      	streq	r3, [r5, #28]
 8029236:	bf19      	ittee	ne
 8029238:	3410      	addne	r4, #16
 802923a:	f105 0018 	addne.w	r0, r5, #24
 802923e:	f105 0020 	addeq.w	r0, r5, #32
 8029242:	3418      	addeq	r4, #24
 8029244:	e7e5      	b.n	8029212 <_realloc_r+0x262>
 8029246:	4621      	mov	r1, r4
 8029248:	f7ff fe48 	bl	8028edc <memmove>
 802924c:	e7e7      	b.n	802921e <_realloc_r+0x26e>
 802924e:	4611      	mov	r1, r2
 8029250:	4650      	mov	r0, sl
 8029252:	f7ff fbf3 	bl	8028a3c <_malloc_r>
 8029256:	4683      	mov	fp, r0
 8029258:	2800      	cmp	r0, #0
 802925a:	f43f af6f 	beq.w	802913c <_realloc_r+0x18c>
 802925e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8029262:	f023 0301 	bic.w	r3, r3, #1
 8029266:	444b      	add	r3, r9
 8029268:	f1a0 0208 	sub.w	r2, r0, #8
 802926c:	4293      	cmp	r3, r2
 802926e:	d105      	bne.n	802927c <_realloc_r+0x2cc>
 8029270:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8029274:	f027 0703 	bic.w	r7, r7, #3
 8029278:	4437      	add	r7, r6
 802927a:	e6fb      	b.n	8029074 <_realloc_r+0xc4>
 802927c:	1f32      	subs	r2, r6, #4
 802927e:	2a24      	cmp	r2, #36	; 0x24
 8029280:	d82f      	bhi.n	80292e2 <_realloc_r+0x332>
 8029282:	2a13      	cmp	r2, #19
 8029284:	d92a      	bls.n	80292dc <_realloc_r+0x32c>
 8029286:	6823      	ldr	r3, [r4, #0]
 8029288:	6003      	str	r3, [r0, #0]
 802928a:	6863      	ldr	r3, [r4, #4]
 802928c:	6043      	str	r3, [r0, #4]
 802928e:	2a1b      	cmp	r2, #27
 8029290:	d810      	bhi.n	80292b4 <_realloc_r+0x304>
 8029292:	f104 0208 	add.w	r2, r4, #8
 8029296:	f100 0308 	add.w	r3, r0, #8
 802929a:	6811      	ldr	r1, [r2, #0]
 802929c:	6019      	str	r1, [r3, #0]
 802929e:	6851      	ldr	r1, [r2, #4]
 80292a0:	6059      	str	r1, [r3, #4]
 80292a2:	6892      	ldr	r2, [r2, #8]
 80292a4:	609a      	str	r2, [r3, #8]
 80292a6:	4621      	mov	r1, r4
 80292a8:	4650      	mov	r0, sl
 80292aa:	f002 fb5f 	bl	802b96c <_free_r>
 80292ae:	e745      	b.n	802913c <_realloc_r+0x18c>
 80292b0:	20008860 	.word	0x20008860
 80292b4:	68a3      	ldr	r3, [r4, #8]
 80292b6:	6083      	str	r3, [r0, #8]
 80292b8:	68e3      	ldr	r3, [r4, #12]
 80292ba:	60c3      	str	r3, [r0, #12]
 80292bc:	2a24      	cmp	r2, #36	; 0x24
 80292be:	bf01      	itttt	eq
 80292c0:	6923      	ldreq	r3, [r4, #16]
 80292c2:	6103      	streq	r3, [r0, #16]
 80292c4:	6961      	ldreq	r1, [r4, #20]
 80292c6:	6141      	streq	r1, [r0, #20]
 80292c8:	bf19      	ittee	ne
 80292ca:	f104 0210 	addne.w	r2, r4, #16
 80292ce:	f100 0310 	addne.w	r3, r0, #16
 80292d2:	f104 0218 	addeq.w	r2, r4, #24
 80292d6:	f100 0318 	addeq.w	r3, r0, #24
 80292da:	e7de      	b.n	802929a <_realloc_r+0x2ea>
 80292dc:	4603      	mov	r3, r0
 80292de:	4622      	mov	r2, r4
 80292e0:	e7db      	b.n	802929a <_realloc_r+0x2ea>
 80292e2:	4621      	mov	r1, r4
 80292e4:	f7ff fdfa 	bl	8028edc <memmove>
 80292e8:	e7dd      	b.n	80292a6 <_realloc_r+0x2f6>
 80292ea:	4637      	mov	r7, r6
 80292ec:	e6c2      	b.n	8029074 <_realloc_r+0xc4>
 80292ee:	4317      	orrs	r7, r2
 80292f0:	f8c9 7004 	str.w	r7, [r9, #4]
 80292f4:	685a      	ldr	r2, [r3, #4]
 80292f6:	f042 0201 	orr.w	r2, r2, #1
 80292fa:	605a      	str	r2, [r3, #4]
 80292fc:	e6d6      	b.n	80290ac <_realloc_r+0xfc>
 80292fe:	bf00      	nop

08029300 <_sbrk_r>:
 8029300:	b538      	push	{r3, r4, r5, lr}
 8029302:	4c06      	ldr	r4, [pc, #24]	; (802931c <_sbrk_r+0x1c>)
 8029304:	2300      	movs	r3, #0
 8029306:	4605      	mov	r5, r0
 8029308:	4608      	mov	r0, r1
 802930a:	6023      	str	r3, [r4, #0]
 802930c:	f003 f99a 	bl	802c644 <_sbrk>
 8029310:	1c43      	adds	r3, r0, #1
 8029312:	d102      	bne.n	802931a <_sbrk_r+0x1a>
 8029314:	6823      	ldr	r3, [r4, #0]
 8029316:	b103      	cbz	r3, 802931a <_sbrk_r+0x1a>
 8029318:	602b      	str	r3, [r5, #0]
 802931a:	bd38      	pop	{r3, r4, r5, pc}
 802931c:	2003cff0 	.word	0x2003cff0

08029320 <_raise_r>:
 8029320:	291f      	cmp	r1, #31
 8029322:	b538      	push	{r3, r4, r5, lr}
 8029324:	4604      	mov	r4, r0
 8029326:	460d      	mov	r5, r1
 8029328:	d904      	bls.n	8029334 <_raise_r+0x14>
 802932a:	2316      	movs	r3, #22
 802932c:	6003      	str	r3, [r0, #0]
 802932e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029332:	bd38      	pop	{r3, r4, r5, pc}
 8029334:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8029338:	b112      	cbz	r2, 8029340 <_raise_r+0x20>
 802933a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802933e:	b94b      	cbnz	r3, 8029354 <_raise_r+0x34>
 8029340:	4620      	mov	r0, r4
 8029342:	f000 f831 	bl	80293a8 <_getpid_r>
 8029346:	462a      	mov	r2, r5
 8029348:	4601      	mov	r1, r0
 802934a:	4620      	mov	r0, r4
 802934c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029350:	f000 b818 	b.w	8029384 <_kill_r>
 8029354:	2b01      	cmp	r3, #1
 8029356:	d00a      	beq.n	802936e <_raise_r+0x4e>
 8029358:	1c59      	adds	r1, r3, #1
 802935a:	d103      	bne.n	8029364 <_raise_r+0x44>
 802935c:	2316      	movs	r3, #22
 802935e:	6003      	str	r3, [r0, #0]
 8029360:	2001      	movs	r0, #1
 8029362:	e7e6      	b.n	8029332 <_raise_r+0x12>
 8029364:	2400      	movs	r4, #0
 8029366:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802936a:	4628      	mov	r0, r5
 802936c:	4798      	blx	r3
 802936e:	2000      	movs	r0, #0
 8029370:	e7df      	b.n	8029332 <_raise_r+0x12>
	...

08029374 <raise>:
 8029374:	4b02      	ldr	r3, [pc, #8]	; (8029380 <raise+0xc>)
 8029376:	4601      	mov	r1, r0
 8029378:	6818      	ldr	r0, [r3, #0]
 802937a:	f7ff bfd1 	b.w	8029320 <_raise_r>
 802937e:	bf00      	nop
 8029380:	20008430 	.word	0x20008430

08029384 <_kill_r>:
 8029384:	b538      	push	{r3, r4, r5, lr}
 8029386:	4c07      	ldr	r4, [pc, #28]	; (80293a4 <_kill_r+0x20>)
 8029388:	2300      	movs	r3, #0
 802938a:	4605      	mov	r5, r0
 802938c:	4608      	mov	r0, r1
 802938e:	4611      	mov	r1, r2
 8029390:	6023      	str	r3, [r4, #0]
 8029392:	f003 f94f 	bl	802c634 <_kill>
 8029396:	1c43      	adds	r3, r0, #1
 8029398:	d102      	bne.n	80293a0 <_kill_r+0x1c>
 802939a:	6823      	ldr	r3, [r4, #0]
 802939c:	b103      	cbz	r3, 80293a0 <_kill_r+0x1c>
 802939e:	602b      	str	r3, [r5, #0]
 80293a0:	bd38      	pop	{r3, r4, r5, pc}
 80293a2:	bf00      	nop
 80293a4:	2003cff0 	.word	0x2003cff0

080293a8 <_getpid_r>:
 80293a8:	f003 b93c 	b.w	802c624 <_getpid>

080293ac <sprintf>:
 80293ac:	b40e      	push	{r1, r2, r3}
 80293ae:	b500      	push	{lr}
 80293b0:	b09c      	sub	sp, #112	; 0x70
 80293b2:	ab1d      	add	r3, sp, #116	; 0x74
 80293b4:	9002      	str	r0, [sp, #8]
 80293b6:	9006      	str	r0, [sp, #24]
 80293b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80293bc:	4809      	ldr	r0, [pc, #36]	; (80293e4 <sprintf+0x38>)
 80293be:	9107      	str	r1, [sp, #28]
 80293c0:	9104      	str	r1, [sp, #16]
 80293c2:	4909      	ldr	r1, [pc, #36]	; (80293e8 <sprintf+0x3c>)
 80293c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80293c8:	9105      	str	r1, [sp, #20]
 80293ca:	6800      	ldr	r0, [r0, #0]
 80293cc:	9301      	str	r3, [sp, #4]
 80293ce:	a902      	add	r1, sp, #8
 80293d0:	f000 f81e 	bl	8029410 <_svfprintf_r>
 80293d4:	9b02      	ldr	r3, [sp, #8]
 80293d6:	2200      	movs	r2, #0
 80293d8:	701a      	strb	r2, [r3, #0]
 80293da:	b01c      	add	sp, #112	; 0x70
 80293dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80293e0:	b003      	add	sp, #12
 80293e2:	4770      	bx	lr
 80293e4:	20008430 	.word	0x20008430
 80293e8:	ffff0208 	.word	0xffff0208

080293ec <strncmp>:
 80293ec:	b510      	push	{r4, lr}
 80293ee:	b16a      	cbz	r2, 802940c <strncmp+0x20>
 80293f0:	3901      	subs	r1, #1
 80293f2:	1884      	adds	r4, r0, r2
 80293f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80293f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80293fc:	4293      	cmp	r3, r2
 80293fe:	d103      	bne.n	8029408 <strncmp+0x1c>
 8029400:	42a0      	cmp	r0, r4
 8029402:	d001      	beq.n	8029408 <strncmp+0x1c>
 8029404:	2b00      	cmp	r3, #0
 8029406:	d1f5      	bne.n	80293f4 <strncmp+0x8>
 8029408:	1a98      	subs	r0, r3, r2
 802940a:	bd10      	pop	{r4, pc}
 802940c:	4610      	mov	r0, r2
 802940e:	e7fc      	b.n	802940a <strncmp+0x1e>

08029410 <_svfprintf_r>:
 8029410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029414:	b0d3      	sub	sp, #332	; 0x14c
 8029416:	4688      	mov	r8, r1
 8029418:	4693      	mov	fp, r2
 802941a:	461e      	mov	r6, r3
 802941c:	9003      	str	r0, [sp, #12]
 802941e:	f002 fb7f 	bl	802bb20 <_localeconv_r>
 8029422:	6803      	ldr	r3, [r0, #0]
 8029424:	9316      	str	r3, [sp, #88]	; 0x58
 8029426:	4618      	mov	r0, r3
 8029428:	f7dd fcbc 	bl	8006da4 <strlen>
 802942c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8029430:	900d      	str	r0, [sp, #52]	; 0x34
 8029432:	0618      	lsls	r0, r3, #24
 8029434:	d518      	bpl.n	8029468 <_svfprintf_r+0x58>
 8029436:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802943a:	b9ab      	cbnz	r3, 8029468 <_svfprintf_r+0x58>
 802943c:	2140      	movs	r1, #64	; 0x40
 802943e:	9803      	ldr	r0, [sp, #12]
 8029440:	f7ff fafc 	bl	8028a3c <_malloc_r>
 8029444:	f8c8 0000 	str.w	r0, [r8]
 8029448:	f8c8 0010 	str.w	r0, [r8, #16]
 802944c:	b948      	cbnz	r0, 8029462 <_svfprintf_r+0x52>
 802944e:	9a03      	ldr	r2, [sp, #12]
 8029450:	230c      	movs	r3, #12
 8029452:	6013      	str	r3, [r2, #0]
 8029454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8029458:	930e      	str	r3, [sp, #56]	; 0x38
 802945a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802945c:	b053      	add	sp, #332	; 0x14c
 802945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029462:	2340      	movs	r3, #64	; 0x40
 8029464:	f8c8 3014 	str.w	r3, [r8, #20]
 8029468:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8029790 <_svfprintf_r+0x380>
 802946c:	2300      	movs	r3, #0
 802946e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8029472:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8029476:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 802947a:	ac29      	add	r4, sp, #164	; 0xa4
 802947c:	9426      	str	r4, [sp, #152]	; 0x98
 802947e:	9304      	str	r3, [sp, #16]
 8029480:	9309      	str	r3, [sp, #36]	; 0x24
 8029482:	9312      	str	r3, [sp, #72]	; 0x48
 8029484:	9319      	str	r3, [sp, #100]	; 0x64
 8029486:	930e      	str	r3, [sp, #56]	; 0x38
 8029488:	465d      	mov	r5, fp
 802948a:	462b      	mov	r3, r5
 802948c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029490:	b112      	cbz	r2, 8029498 <_svfprintf_r+0x88>
 8029492:	2a25      	cmp	r2, #37	; 0x25
 8029494:	f040 80e4 	bne.w	8029660 <_svfprintf_r+0x250>
 8029498:	ebb5 070b 	subs.w	r7, r5, fp
 802949c:	d00e      	beq.n	80294bc <_svfprintf_r+0xac>
 802949e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80294a0:	443b      	add	r3, r7
 80294a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80294a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80294a6:	3301      	adds	r3, #1
 80294a8:	2b07      	cmp	r3, #7
 80294aa:	e9c4 b700 	strd	fp, r7, [r4]
 80294ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80294b0:	f300 80d8 	bgt.w	8029664 <_svfprintf_r+0x254>
 80294b4:	3408      	adds	r4, #8
 80294b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80294b8:	443b      	add	r3, r7
 80294ba:	930e      	str	r3, [sp, #56]	; 0x38
 80294bc:	782b      	ldrb	r3, [r5, #0]
 80294be:	2b00      	cmp	r3, #0
 80294c0:	f001 81b4 	beq.w	802a82c <_svfprintf_r+0x141c>
 80294c4:	1c6b      	adds	r3, r5, #1
 80294c6:	930c      	str	r3, [sp, #48]	; 0x30
 80294c8:	2300      	movs	r3, #0
 80294ca:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80294ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80294d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80294d4:	469a      	mov	sl, r3
 80294d6:	270a      	movs	r7, #10
 80294d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80294da:	781b      	ldrb	r3, [r3, #0]
 80294dc:	9306      	str	r3, [sp, #24]
 80294de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80294e0:	3301      	adds	r3, #1
 80294e2:	930c      	str	r3, [sp, #48]	; 0x30
 80294e4:	9b06      	ldr	r3, [sp, #24]
 80294e6:	3b20      	subs	r3, #32
 80294e8:	2b5a      	cmp	r3, #90	; 0x5a
 80294ea:	f200 8624 	bhi.w	802a136 <_svfprintf_r+0xd26>
 80294ee:	a201      	add	r2, pc, #4	; (adr r2, 80294f4 <_svfprintf_r+0xe4>)
 80294f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80294f4:	080296f7 	.word	0x080296f7
 80294f8:	0802a137 	.word	0x0802a137
 80294fc:	0802a137 	.word	0x0802a137
 8029500:	08029709 	.word	0x08029709
 8029504:	0802a137 	.word	0x0802a137
 8029508:	0802a137 	.word	0x0802a137
 802950c:	0802a137 	.word	0x0802a137
 8029510:	080296bd 	.word	0x080296bd
 8029514:	0802a137 	.word	0x0802a137
 8029518:	0802a137 	.word	0x0802a137
 802951c:	0802970f 	.word	0x0802970f
 8029520:	08029727 	.word	0x08029727
 8029524:	0802a137 	.word	0x0802a137
 8029528:	08029721 	.word	0x08029721
 802952c:	0802972b 	.word	0x0802972b
 8029530:	0802a137 	.word	0x0802a137
 8029534:	0802975f 	.word	0x0802975f
 8029538:	08029765 	.word	0x08029765
 802953c:	08029765 	.word	0x08029765
 8029540:	08029765 	.word	0x08029765
 8029544:	08029765 	.word	0x08029765
 8029548:	08029765 	.word	0x08029765
 802954c:	08029765 	.word	0x08029765
 8029550:	08029765 	.word	0x08029765
 8029554:	08029765 	.word	0x08029765
 8029558:	08029765 	.word	0x08029765
 802955c:	0802a137 	.word	0x0802a137
 8029560:	0802a137 	.word	0x0802a137
 8029564:	0802a137 	.word	0x0802a137
 8029568:	0802a137 	.word	0x0802a137
 802956c:	0802a137 	.word	0x0802a137
 8029570:	0802a137 	.word	0x0802a137
 8029574:	0802a137 	.word	0x0802a137
 8029578:	08029867 	.word	0x08029867
 802957c:	0802a137 	.word	0x0802a137
 8029580:	080297d1 	.word	0x080297d1
 8029584:	080297f3 	.word	0x080297f3
 8029588:	08029867 	.word	0x08029867
 802958c:	08029867 	.word	0x08029867
 8029590:	08029867 	.word	0x08029867
 8029594:	0802a137 	.word	0x0802a137
 8029598:	0802a137 	.word	0x0802a137
 802959c:	0802a137 	.word	0x0802a137
 80295a0:	0802a137 	.word	0x0802a137
 80295a4:	08029785 	.word	0x08029785
 80295a8:	0802a137 	.word	0x0802a137
 80295ac:	0802a137 	.word	0x0802a137
 80295b0:	08029d39 	.word	0x08029d39
 80295b4:	0802a137 	.word	0x0802a137
 80295b8:	0802a137 	.word	0x0802a137
 80295bc:	0802a137 	.word	0x0802a137
 80295c0:	08029dc5 	.word	0x08029dc5
 80295c4:	0802a137 	.word	0x0802a137
 80295c8:	08029fa7 	.word	0x08029fa7
 80295cc:	0802a137 	.word	0x0802a137
 80295d0:	0802a137 	.word	0x0802a137
 80295d4:	0802967d 	.word	0x0802967d
 80295d8:	0802a137 	.word	0x0802a137
 80295dc:	0802a137 	.word	0x0802a137
 80295e0:	0802a137 	.word	0x0802a137
 80295e4:	0802a137 	.word	0x0802a137
 80295e8:	0802a137 	.word	0x0802a137
 80295ec:	0802a137 	.word	0x0802a137
 80295f0:	0802a137 	.word	0x0802a137
 80295f4:	0802a137 	.word	0x0802a137
 80295f8:	08029867 	.word	0x08029867
 80295fc:	0802a137 	.word	0x0802a137
 8029600:	080297d1 	.word	0x080297d1
 8029604:	080297f7 	.word	0x080297f7
 8029608:	08029867 	.word	0x08029867
 802960c:	08029867 	.word	0x08029867
 8029610:	08029867 	.word	0x08029867
 8029614:	0802979d 	.word	0x0802979d
 8029618:	080297f7 	.word	0x080297f7
 802961c:	080297c5 	.word	0x080297c5
 8029620:	0802a137 	.word	0x0802a137
 8029624:	080297b7 	.word	0x080297b7
 8029628:	0802a137 	.word	0x0802a137
 802962c:	08029cf3 	.word	0x08029cf3
 8029630:	08029d3d 	.word	0x08029d3d
 8029634:	08029da5 	.word	0x08029da5
 8029638:	080297c5 	.word	0x080297c5
 802963c:	0802a137 	.word	0x0802a137
 8029640:	08029dc5 	.word	0x08029dc5
 8029644:	080294d9 	.word	0x080294d9
 8029648:	08029fab 	.word	0x08029fab
 802964c:	0802a137 	.word	0x0802a137
 8029650:	0802a137 	.word	0x0802a137
 8029654:	08029fe9 	.word	0x08029fe9
 8029658:	0802a137 	.word	0x0802a137
 802965c:	080294d9 	.word	0x080294d9
 8029660:	461d      	mov	r5, r3
 8029662:	e712      	b.n	802948a <_svfprintf_r+0x7a>
 8029664:	aa26      	add	r2, sp, #152	; 0x98
 8029666:	4641      	mov	r1, r8
 8029668:	9803      	ldr	r0, [sp, #12]
 802966a:	f002 fe11 	bl	802c290 <__ssprint_r>
 802966e:	2800      	cmp	r0, #0
 8029670:	f040 8166 	bne.w	8029940 <_svfprintf_r+0x530>
 8029674:	ac29      	add	r4, sp, #164	; 0xa4
 8029676:	e71e      	b.n	80294b6 <_svfprintf_r+0xa6>
 8029678:	461e      	mov	r6, r3
 802967a:	e72d      	b.n	80294d8 <_svfprintf_r+0xc8>
 802967c:	4b46      	ldr	r3, [pc, #280]	; (8029798 <_svfprintf_r+0x388>)
 802967e:	9318      	str	r3, [sp, #96]	; 0x60
 8029680:	f01a 0f20 	tst.w	sl, #32
 8029684:	f000 84b3 	beq.w	8029fee <_svfprintf_r+0xbde>
 8029688:	3607      	adds	r6, #7
 802968a:	f026 0607 	bic.w	r6, r6, #7
 802968e:	f106 0308 	add.w	r3, r6, #8
 8029692:	e9d6 6700 	ldrd	r6, r7, [r6]
 8029696:	9308      	str	r3, [sp, #32]
 8029698:	f01a 0f01 	tst.w	sl, #1
 802969c:	d00a      	beq.n	80296b4 <_svfprintf_r+0x2a4>
 802969e:	ea56 0307 	orrs.w	r3, r6, r7
 80296a2:	d007      	beq.n	80296b4 <_svfprintf_r+0x2a4>
 80296a4:	2330      	movs	r3, #48	; 0x30
 80296a6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80296aa:	9b06      	ldr	r3, [sp, #24]
 80296ac:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80296b0:	f04a 0a02 	orr.w	sl, sl, #2
 80296b4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80296b8:	2302      	movs	r3, #2
 80296ba:	e34d      	b.n	8029d58 <_svfprintf_r+0x948>
 80296bc:	9803      	ldr	r0, [sp, #12]
 80296be:	f002 fa2f 	bl	802bb20 <_localeconv_r>
 80296c2:	6843      	ldr	r3, [r0, #4]
 80296c4:	9319      	str	r3, [sp, #100]	; 0x64
 80296c6:	4618      	mov	r0, r3
 80296c8:	f7dd fb6c 	bl	8006da4 <strlen>
 80296cc:	9012      	str	r0, [sp, #72]	; 0x48
 80296ce:	9803      	ldr	r0, [sp, #12]
 80296d0:	f002 fa26 	bl	802bb20 <_localeconv_r>
 80296d4:	6883      	ldr	r3, [r0, #8]
 80296d6:	9309      	str	r3, [sp, #36]	; 0x24
 80296d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80296da:	2b00      	cmp	r3, #0
 80296dc:	f43f aefc 	beq.w	80294d8 <_svfprintf_r+0xc8>
 80296e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	f43f aef8 	beq.w	80294d8 <_svfprintf_r+0xc8>
 80296e8:	781b      	ldrb	r3, [r3, #0]
 80296ea:	2b00      	cmp	r3, #0
 80296ec:	f43f aef4 	beq.w	80294d8 <_svfprintf_r+0xc8>
 80296f0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80296f4:	e6f0      	b.n	80294d8 <_svfprintf_r+0xc8>
 80296f6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80296fa:	2b00      	cmp	r3, #0
 80296fc:	f47f aeec 	bne.w	80294d8 <_svfprintf_r+0xc8>
 8029700:	2320      	movs	r3, #32
 8029702:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8029706:	e6e7      	b.n	80294d8 <_svfprintf_r+0xc8>
 8029708:	f04a 0a01 	orr.w	sl, sl, #1
 802970c:	e6e4      	b.n	80294d8 <_svfprintf_r+0xc8>
 802970e:	6832      	ldr	r2, [r6, #0]
 8029710:	920f      	str	r2, [sp, #60]	; 0x3c
 8029712:	2a00      	cmp	r2, #0
 8029714:	f106 0304 	add.w	r3, r6, #4
 8029718:	daae      	bge.n	8029678 <_svfprintf_r+0x268>
 802971a:	4252      	negs	r2, r2
 802971c:	920f      	str	r2, [sp, #60]	; 0x3c
 802971e:	461e      	mov	r6, r3
 8029720:	f04a 0a04 	orr.w	sl, sl, #4
 8029724:	e6d8      	b.n	80294d8 <_svfprintf_r+0xc8>
 8029726:	232b      	movs	r3, #43	; 0x2b
 8029728:	e7eb      	b.n	8029702 <_svfprintf_r+0x2f2>
 802972a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802972c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802972e:	7812      	ldrb	r2, [r2, #0]
 8029730:	9206      	str	r2, [sp, #24]
 8029732:	2a2a      	cmp	r2, #42	; 0x2a
 8029734:	f103 0301 	add.w	r3, r3, #1
 8029738:	d10f      	bne.n	802975a <_svfprintf_r+0x34a>
 802973a:	6835      	ldr	r5, [r6, #0]
 802973c:	930c      	str	r3, [sp, #48]	; 0x30
 802973e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8029742:	3604      	adds	r6, #4
 8029744:	e6c8      	b.n	80294d8 <_svfprintf_r+0xc8>
 8029746:	fb07 2505 	mla	r5, r7, r5, r2
 802974a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802974e:	9206      	str	r2, [sp, #24]
 8029750:	9a06      	ldr	r2, [sp, #24]
 8029752:	3a30      	subs	r2, #48	; 0x30
 8029754:	2a09      	cmp	r2, #9
 8029756:	d9f6      	bls.n	8029746 <_svfprintf_r+0x336>
 8029758:	e6c3      	b.n	80294e2 <_svfprintf_r+0xd2>
 802975a:	2500      	movs	r5, #0
 802975c:	e7f8      	b.n	8029750 <_svfprintf_r+0x340>
 802975e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8029762:	e6b9      	b.n	80294d8 <_svfprintf_r+0xc8>
 8029764:	2200      	movs	r2, #0
 8029766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029768:	920f      	str	r2, [sp, #60]	; 0x3c
 802976a:	9a06      	ldr	r2, [sp, #24]
 802976c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802976e:	3a30      	subs	r2, #48	; 0x30
 8029770:	fb07 2201 	mla	r2, r7, r1, r2
 8029774:	920f      	str	r2, [sp, #60]	; 0x3c
 8029776:	f813 2b01 	ldrb.w	r2, [r3], #1
 802977a:	9206      	str	r2, [sp, #24]
 802977c:	3a30      	subs	r2, #48	; 0x30
 802977e:	2a09      	cmp	r2, #9
 8029780:	d9f3      	bls.n	802976a <_svfprintf_r+0x35a>
 8029782:	e6ae      	b.n	80294e2 <_svfprintf_r+0xd2>
 8029784:	f04a 0a08 	orr.w	sl, sl, #8
 8029788:	e6a6      	b.n	80294d8 <_svfprintf_r+0xc8>
 802978a:	bf00      	nop
 802978c:	f3af 8000 	nop.w
	...
 8029798:	080b426d 	.word	0x080b426d
 802979c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802979e:	781b      	ldrb	r3, [r3, #0]
 80297a0:	2b68      	cmp	r3, #104	; 0x68
 80297a2:	bf01      	itttt	eq
 80297a4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 80297a6:	3301      	addeq	r3, #1
 80297a8:	930c      	streq	r3, [sp, #48]	; 0x30
 80297aa:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80297ae:	bf18      	it	ne
 80297b0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80297b4:	e690      	b.n	80294d8 <_svfprintf_r+0xc8>
 80297b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80297b8:	781b      	ldrb	r3, [r3, #0]
 80297ba:	2b6c      	cmp	r3, #108	; 0x6c
 80297bc:	d105      	bne.n	80297ca <_svfprintf_r+0x3ba>
 80297be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80297c0:	3301      	adds	r3, #1
 80297c2:	930c      	str	r3, [sp, #48]	; 0x30
 80297c4:	f04a 0a20 	orr.w	sl, sl, #32
 80297c8:	e686      	b.n	80294d8 <_svfprintf_r+0xc8>
 80297ca:	f04a 0a10 	orr.w	sl, sl, #16
 80297ce:	e683      	b.n	80294d8 <_svfprintf_r+0xc8>
 80297d0:	1d33      	adds	r3, r6, #4
 80297d2:	9308      	str	r3, [sp, #32]
 80297d4:	2000      	movs	r0, #0
 80297d6:	6833      	ldr	r3, [r6, #0]
 80297d8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80297dc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80297e0:	4681      	mov	r9, r0
 80297e2:	2501      	movs	r5, #1
 80297e4:	9010      	str	r0, [sp, #64]	; 0x40
 80297e6:	4607      	mov	r7, r0
 80297e8:	9007      	str	r0, [sp, #28]
 80297ea:	4606      	mov	r6, r0
 80297ec:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80297f0:	e301      	b.n	8029df6 <_svfprintf_r+0x9e6>
 80297f2:	f04a 0a10 	orr.w	sl, sl, #16
 80297f6:	f01a 0f20 	tst.w	sl, #32
 80297fa:	d021      	beq.n	8029840 <_svfprintf_r+0x430>
 80297fc:	3607      	adds	r6, #7
 80297fe:	f026 0607 	bic.w	r6, r6, #7
 8029802:	f106 0308 	add.w	r3, r6, #8
 8029806:	e9d6 6700 	ldrd	r6, r7, [r6]
 802980a:	9308      	str	r3, [sp, #32]
 802980c:	2e00      	cmp	r6, #0
 802980e:	f177 0300 	sbcs.w	r3, r7, #0
 8029812:	da06      	bge.n	8029822 <_svfprintf_r+0x412>
 8029814:	4276      	negs	r6, r6
 8029816:	f04f 032d 	mov.w	r3, #45	; 0x2d
 802981a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802981e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8029822:	1c6b      	adds	r3, r5, #1
 8029824:	f040 83f6 	bne.w	802a014 <_svfprintf_r+0xc04>
 8029828:	2f00      	cmp	r7, #0
 802982a:	bf08      	it	eq
 802982c:	2e0a      	cmpeq	r6, #10
 802982e:	f080 8427 	bcs.w	802a080 <_svfprintf_r+0xc70>
 8029832:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8029836:	3630      	adds	r6, #48	; 0x30
 8029838:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 802983c:	f000 bc0d 	b.w	802a05a <_svfprintf_r+0xc4a>
 8029840:	1d33      	adds	r3, r6, #4
 8029842:	f01a 0f10 	tst.w	sl, #16
 8029846:	9308      	str	r3, [sp, #32]
 8029848:	d002      	beq.n	8029850 <_svfprintf_r+0x440>
 802984a:	6836      	ldr	r6, [r6, #0]
 802984c:	17f7      	asrs	r7, r6, #31
 802984e:	e7dd      	b.n	802980c <_svfprintf_r+0x3fc>
 8029850:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8029854:	6836      	ldr	r6, [r6, #0]
 8029856:	d001      	beq.n	802985c <_svfprintf_r+0x44c>
 8029858:	b236      	sxth	r6, r6
 802985a:	e7f7      	b.n	802984c <_svfprintf_r+0x43c>
 802985c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8029860:	bf18      	it	ne
 8029862:	b276      	sxtbne	r6, r6
 8029864:	e7f2      	b.n	802984c <_svfprintf_r+0x43c>
 8029866:	3607      	adds	r6, #7
 8029868:	f026 0607 	bic.w	r6, r6, #7
 802986c:	ed96 7b00 	vldr	d7, [r6]
 8029870:	f106 0308 	add.w	r3, r6, #8
 8029874:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8029878:	9308      	str	r3, [sp, #32]
 802987a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802987c:	931a      	str	r3, [sp, #104]	; 0x68
 802987e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029884:	931b      	str	r3, [sp, #108]	; 0x6c
 8029886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802988a:	4bb2      	ldr	r3, [pc, #712]	; (8029b54 <_svfprintf_r+0x744>)
 802988c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8029890:	f7dd fee6 	bl	8007660 <__aeabi_dcmpun>
 8029894:	bb00      	cbnz	r0, 80298d8 <_svfprintf_r+0x4c8>
 8029896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802989a:	4bae      	ldr	r3, [pc, #696]	; (8029b54 <_svfprintf_r+0x744>)
 802989c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80298a0:	f7dd fec0 	bl	8007624 <__aeabi_dcmple>
 80298a4:	b9c0      	cbnz	r0, 80298d8 <_svfprintf_r+0x4c8>
 80298a6:	2200      	movs	r2, #0
 80298a8:	2300      	movs	r3, #0
 80298aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80298ae:	f7dd feaf 	bl	8007610 <__aeabi_dcmplt>
 80298b2:	b110      	cbz	r0, 80298ba <_svfprintf_r+0x4aa>
 80298b4:	232d      	movs	r3, #45	; 0x2d
 80298b6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80298ba:	4aa7      	ldr	r2, [pc, #668]	; (8029b58 <_svfprintf_r+0x748>)
 80298bc:	4ba7      	ldr	r3, [pc, #668]	; (8029b5c <_svfprintf_r+0x74c>)
 80298be:	9906      	ldr	r1, [sp, #24]
 80298c0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80298c4:	2947      	cmp	r1, #71	; 0x47
 80298c6:	bfcc      	ite	gt
 80298c8:	4693      	movgt	fp, r2
 80298ca:	469b      	movle	fp, r3
 80298cc:	f04f 0900 	mov.w	r9, #0
 80298d0:	2503      	movs	r5, #3
 80298d2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80298d6:	e3c6      	b.n	802a066 <_svfprintf_r+0xc56>
 80298d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80298dc:	4610      	mov	r0, r2
 80298de:	4619      	mov	r1, r3
 80298e0:	f7dd febe 	bl	8007660 <__aeabi_dcmpun>
 80298e4:	4681      	mov	r9, r0
 80298e6:	b140      	cbz	r0, 80298fa <_svfprintf_r+0x4ea>
 80298e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80298ea:	4a9d      	ldr	r2, [pc, #628]	; (8029b60 <_svfprintf_r+0x750>)
 80298ec:	2b00      	cmp	r3, #0
 80298ee:	bfbc      	itt	lt
 80298f0:	232d      	movlt	r3, #45	; 0x2d
 80298f2:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80298f6:	4b9b      	ldr	r3, [pc, #620]	; (8029b64 <_svfprintf_r+0x754>)
 80298f8:	e7e1      	b.n	80298be <_svfprintf_r+0x4ae>
 80298fa:	9b06      	ldr	r3, [sp, #24]
 80298fc:	f023 0320 	bic.w	r3, r3, #32
 8029900:	2b41      	cmp	r3, #65	; 0x41
 8029902:	9307      	str	r3, [sp, #28]
 8029904:	d125      	bne.n	8029952 <_svfprintf_r+0x542>
 8029906:	2330      	movs	r3, #48	; 0x30
 8029908:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 802990c:	9b06      	ldr	r3, [sp, #24]
 802990e:	2b61      	cmp	r3, #97	; 0x61
 8029910:	bf14      	ite	ne
 8029912:	2358      	movne	r3, #88	; 0x58
 8029914:	2378      	moveq	r3, #120	; 0x78
 8029916:	2d63      	cmp	r5, #99	; 0x63
 8029918:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 802991c:	f04a 0a02 	orr.w	sl, sl, #2
 8029920:	f340 8108 	ble.w	8029b34 <_svfprintf_r+0x724>
 8029924:	1c69      	adds	r1, r5, #1
 8029926:	9803      	ldr	r0, [sp, #12]
 8029928:	f7ff f888 	bl	8028a3c <_malloc_r>
 802992c:	4683      	mov	fp, r0
 802992e:	2800      	cmp	r0, #0
 8029930:	f040 8103 	bne.w	8029b3a <_svfprintf_r+0x72a>
 8029934:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8029938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802993c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8029940:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8029944:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802994a:	bf18      	it	ne
 802994c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8029950:	e582      	b.n	8029458 <_svfprintf_r+0x48>
 8029952:	1c69      	adds	r1, r5, #1
 8029954:	f000 80f3 	beq.w	8029b3e <_svfprintf_r+0x72e>
 8029958:	9b07      	ldr	r3, [sp, #28]
 802995a:	2b47      	cmp	r3, #71	; 0x47
 802995c:	d102      	bne.n	8029964 <_svfprintf_r+0x554>
 802995e:	2d00      	cmp	r5, #0
 8029960:	f000 80ef 	beq.w	8029b42 <_svfprintf_r+0x732>
 8029964:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8029968:	9310      	str	r3, [sp, #64]	; 0x40
 802996a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802996c:	2b00      	cmp	r3, #0
 802996e:	f280 80eb 	bge.w	8029b48 <_svfprintf_r+0x738>
 8029972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029974:	9314      	str	r3, [sp, #80]	; 0x50
 8029976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029978:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802997c:	9315      	str	r3, [sp, #84]	; 0x54
 802997e:	232d      	movs	r3, #45	; 0x2d
 8029980:	9313      	str	r3, [sp, #76]	; 0x4c
 8029982:	9b07      	ldr	r3, [sp, #28]
 8029984:	2b41      	cmp	r3, #65	; 0x41
 8029986:	f040 8105 	bne.w	8029b94 <_svfprintf_r+0x784>
 802998a:	a820      	add	r0, sp, #128	; 0x80
 802998c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8029990:	f002 fbf0 	bl	802c174 <frexp>
 8029994:	2200      	movs	r2, #0
 8029996:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802999a:	ec51 0b10 	vmov	r0, r1, d0
 802999e:	f7dd fbc5 	bl	800712c <__aeabi_dmul>
 80299a2:	2200      	movs	r2, #0
 80299a4:	2300      	movs	r3, #0
 80299a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80299aa:	f7dd fe27 	bl	80075fc <__aeabi_dcmpeq>
 80299ae:	b108      	cbz	r0, 80299b4 <_svfprintf_r+0x5a4>
 80299b0:	2301      	movs	r3, #1
 80299b2:	9320      	str	r3, [sp, #128]	; 0x80
 80299b4:	4f6c      	ldr	r7, [pc, #432]	; (8029b68 <_svfprintf_r+0x758>)
 80299b6:	4b6d      	ldr	r3, [pc, #436]	; (8029b6c <_svfprintf_r+0x75c>)
 80299b8:	9a06      	ldr	r2, [sp, #24]
 80299ba:	2a61      	cmp	r2, #97	; 0x61
 80299bc:	bf08      	it	eq
 80299be:	461f      	moveq	r7, r3
 80299c0:	9711      	str	r7, [sp, #68]	; 0x44
 80299c2:	465e      	mov	r6, fp
 80299c4:	1e6f      	subs	r7, r5, #1
 80299c6:	2200      	movs	r2, #0
 80299c8:	4b69      	ldr	r3, [pc, #420]	; (8029b70 <_svfprintf_r+0x760>)
 80299ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80299ce:	f7dd fbad 	bl	800712c <__aeabi_dmul>
 80299d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80299d6:	f7dd fe59 	bl	800768c <__aeabi_d2iz>
 80299da:	901c      	str	r0, [sp, #112]	; 0x70
 80299dc:	f7dd fb3c 	bl	8007058 <__aeabi_i2d>
 80299e0:	4602      	mov	r2, r0
 80299e2:	460b      	mov	r3, r1
 80299e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80299e8:	f7dd f9e8 	bl	8006dbc <__aeabi_dsub>
 80299ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80299ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80299f0:	971d      	str	r7, [sp, #116]	; 0x74
 80299f2:	5c9b      	ldrb	r3, [r3, r2]
 80299f4:	f806 3b01 	strb.w	r3, [r6], #1
 80299f8:	1c7a      	adds	r2, r7, #1
 80299fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80299fe:	d006      	beq.n	8029a0e <_svfprintf_r+0x5fe>
 8029a00:	2200      	movs	r2, #0
 8029a02:	2300      	movs	r3, #0
 8029a04:	3f01      	subs	r7, #1
 8029a06:	f7dd fdf9 	bl	80075fc <__aeabi_dcmpeq>
 8029a0a:	2800      	cmp	r0, #0
 8029a0c:	d0db      	beq.n	80299c6 <_svfprintf_r+0x5b6>
 8029a0e:	2200      	movs	r2, #0
 8029a10:	4b58      	ldr	r3, [pc, #352]	; (8029b74 <_svfprintf_r+0x764>)
 8029a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029a16:	f7dd fe19 	bl	800764c <__aeabi_dcmpgt>
 8029a1a:	b960      	cbnz	r0, 8029a36 <_svfprintf_r+0x626>
 8029a1c:	2200      	movs	r2, #0
 8029a1e:	4b55      	ldr	r3, [pc, #340]	; (8029b74 <_svfprintf_r+0x764>)
 8029a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029a24:	f7dd fdea 	bl	80075fc <__aeabi_dcmpeq>
 8029a28:	2800      	cmp	r0, #0
 8029a2a:	f000 80ae 	beq.w	8029b8a <_svfprintf_r+0x77a>
 8029a2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029a30:	07db      	lsls	r3, r3, #31
 8029a32:	f140 80aa 	bpl.w	8029b8a <_svfprintf_r+0x77a>
 8029a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029a38:	9624      	str	r6, [sp, #144]	; 0x90
 8029a3a:	7bd9      	ldrb	r1, [r3, #15]
 8029a3c:	2030      	movs	r0, #48	; 0x30
 8029a3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8029a40:	1e53      	subs	r3, r2, #1
 8029a42:	9324      	str	r3, [sp, #144]	; 0x90
 8029a44:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8029a48:	428b      	cmp	r3, r1
 8029a4a:	f000 8095 	beq.w	8029b78 <_svfprintf_r+0x768>
 8029a4e:	2b39      	cmp	r3, #57	; 0x39
 8029a50:	bf0b      	itete	eq
 8029a52:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8029a54:	3301      	addne	r3, #1
 8029a56:	7a9b      	ldrbeq	r3, [r3, #10]
 8029a58:	b2db      	uxtbne	r3, r3
 8029a5a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029a5e:	4633      	mov	r3, r6
 8029a60:	eba3 030b 	sub.w	r3, r3, fp
 8029a64:	9304      	str	r3, [sp, #16]
 8029a66:	9b07      	ldr	r3, [sp, #28]
 8029a68:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8029a6a:	2b47      	cmp	r3, #71	; 0x47
 8029a6c:	f040 80d7 	bne.w	8029c1e <_svfprintf_r+0x80e>
 8029a70:	1cf7      	adds	r7, r6, #3
 8029a72:	db02      	blt.n	8029a7a <_svfprintf_r+0x66a>
 8029a74:	42b5      	cmp	r5, r6
 8029a76:	f280 80fd 	bge.w	8029c74 <_svfprintf_r+0x864>
 8029a7a:	9b06      	ldr	r3, [sp, #24]
 8029a7c:	3b02      	subs	r3, #2
 8029a7e:	9306      	str	r3, [sp, #24]
 8029a80:	9906      	ldr	r1, [sp, #24]
 8029a82:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8029a86:	f021 0120 	bic.w	r1, r1, #32
 8029a8a:	2941      	cmp	r1, #65	; 0x41
 8029a8c:	bf08      	it	eq
 8029a8e:	320f      	addeq	r2, #15
 8029a90:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 8029a94:	bf06      	itte	eq
 8029a96:	b2d2      	uxtbeq	r2, r2
 8029a98:	2101      	moveq	r1, #1
 8029a9a:	2100      	movne	r1, #0
 8029a9c:	2b00      	cmp	r3, #0
 8029a9e:	9320      	str	r3, [sp, #128]	; 0x80
 8029aa0:	bfb8      	it	lt
 8029aa2:	f1c6 0301 	rsblt	r3, r6, #1
 8029aa6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8029aaa:	bfb4      	ite	lt
 8029aac:	222d      	movlt	r2, #45	; 0x2d
 8029aae:	222b      	movge	r2, #43	; 0x2b
 8029ab0:	2b09      	cmp	r3, #9
 8029ab2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8029ab6:	f340 80c9 	ble.w	8029c4c <_svfprintf_r+0x83c>
 8029aba:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8029abe:	250a      	movs	r5, #10
 8029ac0:	fb93 f0f5 	sdiv	r0, r3, r5
 8029ac4:	fb05 3310 	mls	r3, r5, r0, r3
 8029ac8:	3330      	adds	r3, #48	; 0x30
 8029aca:	2809      	cmp	r0, #9
 8029acc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029ad0:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8029ad4:	4603      	mov	r3, r0
 8029ad6:	f300 80b2 	bgt.w	8029c3e <_svfprintf_r+0x82e>
 8029ada:	3330      	adds	r3, #48	; 0x30
 8029adc:	f801 3c01 	strb.w	r3, [r1, #-1]
 8029ae0:	3a02      	subs	r2, #2
 8029ae2:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8029ae6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8029aea:	4282      	cmp	r2, r0
 8029aec:	4619      	mov	r1, r3
 8029aee:	f0c0 80a8 	bcc.w	8029c42 <_svfprintf_r+0x832>
 8029af2:	9a04      	ldr	r2, [sp, #16]
 8029af4:	ab22      	add	r3, sp, #136	; 0x88
 8029af6:	1acb      	subs	r3, r1, r3
 8029af8:	2a01      	cmp	r2, #1
 8029afa:	9317      	str	r3, [sp, #92]	; 0x5c
 8029afc:	eb03 0502 	add.w	r5, r3, r2
 8029b00:	dc02      	bgt.n	8029b08 <_svfprintf_r+0x6f8>
 8029b02:	f01a 0f01 	tst.w	sl, #1
 8029b06:	d001      	beq.n	8029b0c <_svfprintf_r+0x6fc>
 8029b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029b0a:	441d      	add	r5, r3
 8029b0c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8029b10:	2700      	movs	r7, #0
 8029b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8029b16:	9310      	str	r3, [sp, #64]	; 0x40
 8029b18:	9707      	str	r7, [sp, #28]
 8029b1a:	463e      	mov	r6, r7
 8029b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8029b1e:	2b00      	cmp	r3, #0
 8029b20:	f000 8315 	beq.w	802a14e <_svfprintf_r+0xd3e>
 8029b24:	232d      	movs	r3, #45	; 0x2d
 8029b26:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8029b2a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8029b2e:	2300      	movs	r3, #0
 8029b30:	9310      	str	r3, [sp, #64]	; 0x40
 8029b32:	e160      	b.n	8029df6 <_svfprintf_r+0x9e6>
 8029b34:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8029b38:	e714      	b.n	8029964 <_svfprintf_r+0x554>
 8029b3a:	4681      	mov	r9, r0
 8029b3c:	e712      	b.n	8029964 <_svfprintf_r+0x554>
 8029b3e:	2506      	movs	r5, #6
 8029b40:	e710      	b.n	8029964 <_svfprintf_r+0x554>
 8029b42:	46a9      	mov	r9, r5
 8029b44:	2501      	movs	r5, #1
 8029b46:	e70d      	b.n	8029964 <_svfprintf_r+0x554>
 8029b48:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8029b4c:	2300      	movs	r3, #0
 8029b4e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8029b52:	e715      	b.n	8029980 <_svfprintf_r+0x570>
 8029b54:	7fefffff 	.word	0x7fefffff
 8029b58:	080b4250 	.word	0x080b4250
 8029b5c:	080b424c 	.word	0x080b424c
 8029b60:	080b4258 	.word	0x080b4258
 8029b64:	080b4254 	.word	0x080b4254
 8029b68:	080b426d 	.word	0x080b426d
 8029b6c:	080b425c 	.word	0x080b425c
 8029b70:	40300000 	.word	0x40300000
 8029b74:	3fe00000 	.word	0x3fe00000
 8029b78:	f802 0c01 	strb.w	r0, [r2, #-1]
 8029b7c:	e75f      	b.n	8029a3e <_svfprintf_r+0x62e>
 8029b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8029b82:	1af2      	subs	r2, r6, r3
 8029b84:	2a00      	cmp	r2, #0
 8029b86:	dafa      	bge.n	8029b7e <_svfprintf_r+0x76e>
 8029b88:	e76a      	b.n	8029a60 <_svfprintf_r+0x650>
 8029b8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8029b8c:	4633      	mov	r3, r6
 8029b8e:	2130      	movs	r1, #48	; 0x30
 8029b90:	4416      	add	r6, r2
 8029b92:	e7f6      	b.n	8029b82 <_svfprintf_r+0x772>
 8029b94:	9b07      	ldr	r3, [sp, #28]
 8029b96:	2b46      	cmp	r3, #70	; 0x46
 8029b98:	d004      	beq.n	8029ba4 <_svfprintf_r+0x794>
 8029b9a:	2b45      	cmp	r3, #69	; 0x45
 8029b9c:	d13a      	bne.n	8029c14 <_svfprintf_r+0x804>
 8029b9e:	1c6e      	adds	r6, r5, #1
 8029ba0:	2102      	movs	r1, #2
 8029ba2:	e001      	b.n	8029ba8 <_svfprintf_r+0x798>
 8029ba4:	462e      	mov	r6, r5
 8029ba6:	2103      	movs	r1, #3
 8029ba8:	ab24      	add	r3, sp, #144	; 0x90
 8029baa:	9301      	str	r3, [sp, #4]
 8029bac:	ab21      	add	r3, sp, #132	; 0x84
 8029bae:	9300      	str	r3, [sp, #0]
 8029bb0:	4632      	mov	r2, r6
 8029bb2:	ab20      	add	r3, sp, #128	; 0x80
 8029bb4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8029bb8:	9803      	ldr	r0, [sp, #12]
 8029bba:	f000 ffa5 	bl	802ab08 <_dtoa_r>
 8029bbe:	9b07      	ldr	r3, [sp, #28]
 8029bc0:	2b47      	cmp	r3, #71	; 0x47
 8029bc2:	4683      	mov	fp, r0
 8029bc4:	d102      	bne.n	8029bcc <_svfprintf_r+0x7bc>
 8029bc6:	f01a 0f01 	tst.w	sl, #1
 8029bca:	d026      	beq.n	8029c1a <_svfprintf_r+0x80a>
 8029bcc:	9b07      	ldr	r3, [sp, #28]
 8029bce:	2b46      	cmp	r3, #70	; 0x46
 8029bd0:	eb0b 0706 	add.w	r7, fp, r6
 8029bd4:	d10f      	bne.n	8029bf6 <_svfprintf_r+0x7e6>
 8029bd6:	f89b 3000 	ldrb.w	r3, [fp]
 8029bda:	2b30      	cmp	r3, #48	; 0x30
 8029bdc:	d109      	bne.n	8029bf2 <_svfprintf_r+0x7e2>
 8029bde:	2200      	movs	r2, #0
 8029be0:	2300      	movs	r3, #0
 8029be2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8029be6:	f7dd fd09 	bl	80075fc <__aeabi_dcmpeq>
 8029bea:	b910      	cbnz	r0, 8029bf2 <_svfprintf_r+0x7e2>
 8029bec:	f1c6 0601 	rsb	r6, r6, #1
 8029bf0:	9620      	str	r6, [sp, #128]	; 0x80
 8029bf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029bf4:	441f      	add	r7, r3
 8029bf6:	2200      	movs	r2, #0
 8029bf8:	2300      	movs	r3, #0
 8029bfa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8029bfe:	f7dd fcfd 	bl	80075fc <__aeabi_dcmpeq>
 8029c02:	b948      	cbnz	r0, 8029c18 <_svfprintf_r+0x808>
 8029c04:	2230      	movs	r2, #48	; 0x30
 8029c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029c08:	429f      	cmp	r7, r3
 8029c0a:	d906      	bls.n	8029c1a <_svfprintf_r+0x80a>
 8029c0c:	1c59      	adds	r1, r3, #1
 8029c0e:	9124      	str	r1, [sp, #144]	; 0x90
 8029c10:	701a      	strb	r2, [r3, #0]
 8029c12:	e7f8      	b.n	8029c06 <_svfprintf_r+0x7f6>
 8029c14:	462e      	mov	r6, r5
 8029c16:	e7c3      	b.n	8029ba0 <_svfprintf_r+0x790>
 8029c18:	9724      	str	r7, [sp, #144]	; 0x90
 8029c1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029c1c:	e720      	b.n	8029a60 <_svfprintf_r+0x650>
 8029c1e:	9b07      	ldr	r3, [sp, #28]
 8029c20:	2b46      	cmp	r3, #70	; 0x46
 8029c22:	f47f af2d 	bne.w	8029a80 <_svfprintf_r+0x670>
 8029c26:	2e00      	cmp	r6, #0
 8029c28:	dd1d      	ble.n	8029c66 <_svfprintf_r+0x856>
 8029c2a:	b915      	cbnz	r5, 8029c32 <_svfprintf_r+0x822>
 8029c2c:	f01a 0f01 	tst.w	sl, #1
 8029c30:	d034      	beq.n	8029c9c <_svfprintf_r+0x88c>
 8029c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029c34:	18f3      	adds	r3, r6, r3
 8029c36:	441d      	add	r5, r3
 8029c38:	2366      	movs	r3, #102	; 0x66
 8029c3a:	9306      	str	r3, [sp, #24]
 8029c3c:	e033      	b.n	8029ca6 <_svfprintf_r+0x896>
 8029c3e:	460a      	mov	r2, r1
 8029c40:	e73e      	b.n	8029ac0 <_svfprintf_r+0x6b0>
 8029c42:	f812 1b01 	ldrb.w	r1, [r2], #1
 8029c46:	f803 1b01 	strb.w	r1, [r3], #1
 8029c4a:	e74e      	b.n	8029aea <_svfprintf_r+0x6da>
 8029c4c:	b941      	cbnz	r1, 8029c60 <_svfprintf_r+0x850>
 8029c4e:	2230      	movs	r2, #48	; 0x30
 8029c50:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8029c54:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8029c58:	3330      	adds	r3, #48	; 0x30
 8029c5a:	1c51      	adds	r1, r2, #1
 8029c5c:	7013      	strb	r3, [r2, #0]
 8029c5e:	e748      	b.n	8029af2 <_svfprintf_r+0x6e2>
 8029c60:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8029c64:	e7f8      	b.n	8029c58 <_svfprintf_r+0x848>
 8029c66:	b915      	cbnz	r5, 8029c6e <_svfprintf_r+0x85e>
 8029c68:	f01a 0f01 	tst.w	sl, #1
 8029c6c:	d018      	beq.n	8029ca0 <_svfprintf_r+0x890>
 8029c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029c70:	3301      	adds	r3, #1
 8029c72:	e7e0      	b.n	8029c36 <_svfprintf_r+0x826>
 8029c74:	9b04      	ldr	r3, [sp, #16]
 8029c76:	42b3      	cmp	r3, r6
 8029c78:	dc06      	bgt.n	8029c88 <_svfprintf_r+0x878>
 8029c7a:	f01a 0f01 	tst.w	sl, #1
 8029c7e:	d025      	beq.n	8029ccc <_svfprintf_r+0x8bc>
 8029c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029c82:	18f5      	adds	r5, r6, r3
 8029c84:	2367      	movs	r3, #103	; 0x67
 8029c86:	e7d8      	b.n	8029c3a <_svfprintf_r+0x82a>
 8029c88:	9b04      	ldr	r3, [sp, #16]
 8029c8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029c8c:	2e00      	cmp	r6, #0
 8029c8e:	eb03 0502 	add.w	r5, r3, r2
 8029c92:	dcf7      	bgt.n	8029c84 <_svfprintf_r+0x874>
 8029c94:	f1c6 0301 	rsb	r3, r6, #1
 8029c98:	441d      	add	r5, r3
 8029c9a:	e7f3      	b.n	8029c84 <_svfprintf_r+0x874>
 8029c9c:	4635      	mov	r5, r6
 8029c9e:	e7cb      	b.n	8029c38 <_svfprintf_r+0x828>
 8029ca0:	2366      	movs	r3, #102	; 0x66
 8029ca2:	9306      	str	r3, [sp, #24]
 8029ca4:	2501      	movs	r5, #1
 8029ca6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8029caa:	9307      	str	r3, [sp, #28]
 8029cac:	d01f      	beq.n	8029cee <_svfprintf_r+0x8de>
 8029cae:	2700      	movs	r7, #0
 8029cb0:	2e00      	cmp	r6, #0
 8029cb2:	9707      	str	r7, [sp, #28]
 8029cb4:	f77f af32 	ble.w	8029b1c <_svfprintf_r+0x70c>
 8029cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029cba:	781b      	ldrb	r3, [r3, #0]
 8029cbc:	2bff      	cmp	r3, #255	; 0xff
 8029cbe:	d107      	bne.n	8029cd0 <_svfprintf_r+0x8c0>
 8029cc0:	9b07      	ldr	r3, [sp, #28]
 8029cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8029cc4:	443b      	add	r3, r7
 8029cc6:	fb02 5503 	mla	r5, r2, r3, r5
 8029cca:	e727      	b.n	8029b1c <_svfprintf_r+0x70c>
 8029ccc:	4635      	mov	r5, r6
 8029cce:	e7d9      	b.n	8029c84 <_svfprintf_r+0x874>
 8029cd0:	42b3      	cmp	r3, r6
 8029cd2:	daf5      	bge.n	8029cc0 <_svfprintf_r+0x8b0>
 8029cd4:	1af6      	subs	r6, r6, r3
 8029cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029cd8:	785b      	ldrb	r3, [r3, #1]
 8029cda:	b133      	cbz	r3, 8029cea <_svfprintf_r+0x8da>
 8029cdc:	9b07      	ldr	r3, [sp, #28]
 8029cde:	3301      	adds	r3, #1
 8029ce0:	9307      	str	r3, [sp, #28]
 8029ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ce4:	3301      	adds	r3, #1
 8029ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8029ce8:	e7e6      	b.n	8029cb8 <_svfprintf_r+0x8a8>
 8029cea:	3701      	adds	r7, #1
 8029cec:	e7e4      	b.n	8029cb8 <_svfprintf_r+0x8a8>
 8029cee:	9f07      	ldr	r7, [sp, #28]
 8029cf0:	e714      	b.n	8029b1c <_svfprintf_r+0x70c>
 8029cf2:	4632      	mov	r2, r6
 8029cf4:	f01a 0f20 	tst.w	sl, #32
 8029cf8:	f852 3b04 	ldr.w	r3, [r2], #4
 8029cfc:	9208      	str	r2, [sp, #32]
 8029cfe:	d009      	beq.n	8029d14 <_svfprintf_r+0x904>
 8029d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029d02:	4610      	mov	r0, r2
 8029d04:	17d1      	asrs	r1, r2, #31
 8029d06:	e9c3 0100 	strd	r0, r1, [r3]
 8029d0a:	9e08      	ldr	r6, [sp, #32]
 8029d0c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8029d10:	f7ff bbba 	b.w	8029488 <_svfprintf_r+0x78>
 8029d14:	f01a 0f10 	tst.w	sl, #16
 8029d18:	d002      	beq.n	8029d20 <_svfprintf_r+0x910>
 8029d1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029d1c:	601a      	str	r2, [r3, #0]
 8029d1e:	e7f4      	b.n	8029d0a <_svfprintf_r+0x8fa>
 8029d20:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8029d24:	d002      	beq.n	8029d2c <_svfprintf_r+0x91c>
 8029d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029d28:	801a      	strh	r2, [r3, #0]
 8029d2a:	e7ee      	b.n	8029d0a <_svfprintf_r+0x8fa>
 8029d2c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8029d30:	d0f3      	beq.n	8029d1a <_svfprintf_r+0x90a>
 8029d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029d34:	701a      	strb	r2, [r3, #0]
 8029d36:	e7e8      	b.n	8029d0a <_svfprintf_r+0x8fa>
 8029d38:	f04a 0a10 	orr.w	sl, sl, #16
 8029d3c:	f01a 0f20 	tst.w	sl, #32
 8029d40:	d01e      	beq.n	8029d80 <_svfprintf_r+0x970>
 8029d42:	3607      	adds	r6, #7
 8029d44:	f026 0607 	bic.w	r6, r6, #7
 8029d48:	f106 0308 	add.w	r3, r6, #8
 8029d4c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8029d50:	9308      	str	r3, [sp, #32]
 8029d52:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8029d56:	2300      	movs	r3, #0
 8029d58:	2200      	movs	r2, #0
 8029d5a:	1c69      	adds	r1, r5, #1
 8029d5c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8029d60:	f000 815b 	beq.w	802a01a <_svfprintf_r+0xc0a>
 8029d64:	4652      	mov	r2, sl
 8029d66:	ea56 0107 	orrs.w	r1, r6, r7
 8029d6a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8029d6e:	f040 8154 	bne.w	802a01a <_svfprintf_r+0xc0a>
 8029d72:	2d00      	cmp	r5, #0
 8029d74:	f000 81d5 	beq.w	802a122 <_svfprintf_r+0xd12>
 8029d78:	2b01      	cmp	r3, #1
 8029d7a:	f040 8151 	bne.w	802a020 <_svfprintf_r+0xc10>
 8029d7e:	e558      	b.n	8029832 <_svfprintf_r+0x422>
 8029d80:	1d33      	adds	r3, r6, #4
 8029d82:	f01a 0f10 	tst.w	sl, #16
 8029d86:	9308      	str	r3, [sp, #32]
 8029d88:	d001      	beq.n	8029d8e <_svfprintf_r+0x97e>
 8029d8a:	6836      	ldr	r6, [r6, #0]
 8029d8c:	e003      	b.n	8029d96 <_svfprintf_r+0x986>
 8029d8e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8029d92:	d002      	beq.n	8029d9a <_svfprintf_r+0x98a>
 8029d94:	8836      	ldrh	r6, [r6, #0]
 8029d96:	2700      	movs	r7, #0
 8029d98:	e7db      	b.n	8029d52 <_svfprintf_r+0x942>
 8029d9a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8029d9e:	d0f4      	beq.n	8029d8a <_svfprintf_r+0x97a>
 8029da0:	7836      	ldrb	r6, [r6, #0]
 8029da2:	e7f8      	b.n	8029d96 <_svfprintf_r+0x986>
 8029da4:	1d33      	adds	r3, r6, #4
 8029da6:	9308      	str	r3, [sp, #32]
 8029da8:	f647 0330 	movw	r3, #30768	; 0x7830
 8029dac:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8029db0:	2278      	movs	r2, #120	; 0x78
 8029db2:	4bb0      	ldr	r3, [pc, #704]	; (802a074 <_svfprintf_r+0xc64>)
 8029db4:	9318      	str	r3, [sp, #96]	; 0x60
 8029db6:	6836      	ldr	r6, [r6, #0]
 8029db8:	9206      	str	r2, [sp, #24]
 8029dba:	2700      	movs	r7, #0
 8029dbc:	f04a 0a02 	orr.w	sl, sl, #2
 8029dc0:	2302      	movs	r3, #2
 8029dc2:	e7c9      	b.n	8029d58 <_svfprintf_r+0x948>
 8029dc4:	1d33      	adds	r3, r6, #4
 8029dc6:	f8d6 b000 	ldr.w	fp, [r6]
 8029dca:	9308      	str	r3, [sp, #32]
 8029dcc:	2600      	movs	r6, #0
 8029dce:	1c68      	adds	r0, r5, #1
 8029dd0:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8029dd4:	f000 80e1 	beq.w	8029f9a <_svfprintf_r+0xb8a>
 8029dd8:	462a      	mov	r2, r5
 8029dda:	4631      	mov	r1, r6
 8029ddc:	4658      	mov	r0, fp
 8029dde:	f7dc ff87 	bl	8006cf0 <memchr>
 8029de2:	4681      	mov	r9, r0
 8029de4:	2800      	cmp	r0, #0
 8029de6:	f43f ad74 	beq.w	80298d2 <_svfprintf_r+0x4c2>
 8029dea:	eba0 050b 	sub.w	r5, r0, fp
 8029dee:	46b1      	mov	r9, r6
 8029df0:	9610      	str	r6, [sp, #64]	; 0x40
 8029df2:	4637      	mov	r7, r6
 8029df4:	9607      	str	r6, [sp, #28]
 8029df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029df8:	42ab      	cmp	r3, r5
 8029dfa:	bfb8      	it	lt
 8029dfc:	462b      	movlt	r3, r5
 8029dfe:	9311      	str	r3, [sp, #68]	; 0x44
 8029e00:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8029e04:	b113      	cbz	r3, 8029e0c <_svfprintf_r+0x9fc>
 8029e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029e08:	3301      	adds	r3, #1
 8029e0a:	9311      	str	r3, [sp, #68]	; 0x44
 8029e0c:	f01a 0302 	ands.w	r3, sl, #2
 8029e10:	931c      	str	r3, [sp, #112]	; 0x70
 8029e12:	bf1e      	ittt	ne
 8029e14:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8029e16:	3302      	addne	r3, #2
 8029e18:	9311      	strne	r3, [sp, #68]	; 0x44
 8029e1a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8029e1e:	931d      	str	r3, [sp, #116]	; 0x74
 8029e20:	d122      	bne.n	8029e68 <_svfprintf_r+0xa58>
 8029e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029e26:	1a9b      	subs	r3, r3, r2
 8029e28:	2b00      	cmp	r3, #0
 8029e2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8029e2c:	dd1c      	ble.n	8029e68 <_svfprintf_r+0xa58>
 8029e2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029e30:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8029e34:	2810      	cmp	r0, #16
 8029e36:	4890      	ldr	r0, [pc, #576]	; (802a078 <_svfprintf_r+0xc68>)
 8029e38:	6020      	str	r0, [r4, #0]
 8029e3a:	f102 0201 	add.w	r2, r2, #1
 8029e3e:	f104 0108 	add.w	r1, r4, #8
 8029e42:	f300 8188 	bgt.w	802a156 <_svfprintf_r+0xd46>
 8029e46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029e48:	6060      	str	r0, [r4, #4]
 8029e4a:	4403      	add	r3, r0
 8029e4c:	2a07      	cmp	r2, #7
 8029e4e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8029e52:	f340 8195 	ble.w	802a180 <_svfprintf_r+0xd70>
 8029e56:	aa26      	add	r2, sp, #152	; 0x98
 8029e58:	4641      	mov	r1, r8
 8029e5a:	9803      	ldr	r0, [sp, #12]
 8029e5c:	f002 fa18 	bl	802c290 <__ssprint_r>
 8029e60:	2800      	cmp	r0, #0
 8029e62:	f040 84c1 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 8029e66:	ac29      	add	r4, sp, #164	; 0xa4
 8029e68:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8029e6c:	b173      	cbz	r3, 8029e8c <_svfprintf_r+0xa7c>
 8029e6e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8029e72:	6023      	str	r3, [r4, #0]
 8029e74:	2301      	movs	r3, #1
 8029e76:	6063      	str	r3, [r4, #4]
 8029e78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029e7a:	3301      	adds	r3, #1
 8029e7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8029e7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029e80:	3301      	adds	r3, #1
 8029e82:	2b07      	cmp	r3, #7
 8029e84:	9327      	str	r3, [sp, #156]	; 0x9c
 8029e86:	f300 817d 	bgt.w	802a184 <_svfprintf_r+0xd74>
 8029e8a:	3408      	adds	r4, #8
 8029e8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029e8e:	b16b      	cbz	r3, 8029eac <_svfprintf_r+0xa9c>
 8029e90:	ab1f      	add	r3, sp, #124	; 0x7c
 8029e92:	6023      	str	r3, [r4, #0]
 8029e94:	2302      	movs	r3, #2
 8029e96:	6063      	str	r3, [r4, #4]
 8029e98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029e9a:	3302      	adds	r3, #2
 8029e9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8029e9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029ea0:	3301      	adds	r3, #1
 8029ea2:	2b07      	cmp	r3, #7
 8029ea4:	9327      	str	r3, [sp, #156]	; 0x9c
 8029ea6:	f300 8177 	bgt.w	802a198 <_svfprintf_r+0xd88>
 8029eaa:	3408      	adds	r4, #8
 8029eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029eae:	2b80      	cmp	r3, #128	; 0x80
 8029eb0:	d122      	bne.n	8029ef8 <_svfprintf_r+0xae8>
 8029eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029eb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029eb6:	1a9b      	subs	r3, r3, r2
 8029eb8:	2b00      	cmp	r3, #0
 8029eba:	9313      	str	r3, [sp, #76]	; 0x4c
 8029ebc:	dd1c      	ble.n	8029ef8 <_svfprintf_r+0xae8>
 8029ebe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029ec0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8029ec4:	2810      	cmp	r0, #16
 8029ec6:	486d      	ldr	r0, [pc, #436]	; (802a07c <_svfprintf_r+0xc6c>)
 8029ec8:	6020      	str	r0, [r4, #0]
 8029eca:	f102 0201 	add.w	r2, r2, #1
 8029ece:	f104 0108 	add.w	r1, r4, #8
 8029ed2:	f300 816b 	bgt.w	802a1ac <_svfprintf_r+0xd9c>
 8029ed6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029ed8:	6060      	str	r0, [r4, #4]
 8029eda:	4403      	add	r3, r0
 8029edc:	2a07      	cmp	r2, #7
 8029ede:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8029ee2:	f340 8178 	ble.w	802a1d6 <_svfprintf_r+0xdc6>
 8029ee6:	aa26      	add	r2, sp, #152	; 0x98
 8029ee8:	4641      	mov	r1, r8
 8029eea:	9803      	ldr	r0, [sp, #12]
 8029eec:	f002 f9d0 	bl	802c290 <__ssprint_r>
 8029ef0:	2800      	cmp	r0, #0
 8029ef2:	f040 8479 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 8029ef6:	ac29      	add	r4, sp, #164	; 0xa4
 8029ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029efa:	1b5b      	subs	r3, r3, r5
 8029efc:	2b00      	cmp	r3, #0
 8029efe:	9310      	str	r3, [sp, #64]	; 0x40
 8029f00:	dd1c      	ble.n	8029f3c <_svfprintf_r+0xb2c>
 8029f02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8029f04:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8029f08:	2810      	cmp	r0, #16
 8029f0a:	485c      	ldr	r0, [pc, #368]	; (802a07c <_svfprintf_r+0xc6c>)
 8029f0c:	6020      	str	r0, [r4, #0]
 8029f0e:	f102 0201 	add.w	r2, r2, #1
 8029f12:	f104 0108 	add.w	r1, r4, #8
 8029f16:	f300 8160 	bgt.w	802a1da <_svfprintf_r+0xdca>
 8029f1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8029f1c:	6060      	str	r0, [r4, #4]
 8029f1e:	4403      	add	r3, r0
 8029f20:	2a07      	cmp	r2, #7
 8029f22:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8029f26:	f340 816d 	ble.w	802a204 <_svfprintf_r+0xdf4>
 8029f2a:	aa26      	add	r2, sp, #152	; 0x98
 8029f2c:	4641      	mov	r1, r8
 8029f2e:	9803      	ldr	r0, [sp, #12]
 8029f30:	f002 f9ae 	bl	802c290 <__ssprint_r>
 8029f34:	2800      	cmp	r0, #0
 8029f36:	f040 8457 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 8029f3a:	ac29      	add	r4, sp, #164	; 0xa4
 8029f3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8029f40:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8029f44:	f040 8160 	bne.w	802a208 <_svfprintf_r+0xdf8>
 8029f48:	e9c4 b500 	strd	fp, r5, [r4]
 8029f4c:	441d      	add	r5, r3
 8029f4e:	9528      	str	r5, [sp, #160]	; 0xa0
 8029f50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029f52:	3301      	adds	r3, #1
 8029f54:	2b07      	cmp	r3, #7
 8029f56:	9327      	str	r3, [sp, #156]	; 0x9c
 8029f58:	f300 819c 	bgt.w	802a294 <_svfprintf_r+0xe84>
 8029f5c:	3408      	adds	r4, #8
 8029f5e:	f01a 0f04 	tst.w	sl, #4
 8029f62:	f040 8423 	bne.w	802a7ac <_svfprintf_r+0x139c>
 8029f66:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8029f6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8029f6c:	428a      	cmp	r2, r1
 8029f6e:	bfac      	ite	ge
 8029f70:	189b      	addge	r3, r3, r2
 8029f72:	185b      	addlt	r3, r3, r1
 8029f74:	930e      	str	r3, [sp, #56]	; 0x38
 8029f76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f78:	b13b      	cbz	r3, 8029f8a <_svfprintf_r+0xb7a>
 8029f7a:	aa26      	add	r2, sp, #152	; 0x98
 8029f7c:	4641      	mov	r1, r8
 8029f7e:	9803      	ldr	r0, [sp, #12]
 8029f80:	f002 f986 	bl	802c290 <__ssprint_r>
 8029f84:	2800      	cmp	r0, #0
 8029f86:	f040 842f 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 8029f8a:	2300      	movs	r3, #0
 8029f8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8029f8e:	f1b9 0f00 	cmp.w	r9, #0
 8029f92:	f040 8445 	bne.w	802a820 <_svfprintf_r+0x1410>
 8029f96:	ac29      	add	r4, sp, #164	; 0xa4
 8029f98:	e6b7      	b.n	8029d0a <_svfprintf_r+0x8fa>
 8029f9a:	4658      	mov	r0, fp
 8029f9c:	f7dc ff02 	bl	8006da4 <strlen>
 8029fa0:	46b1      	mov	r9, r6
 8029fa2:	4605      	mov	r5, r0
 8029fa4:	e495      	b.n	80298d2 <_svfprintf_r+0x4c2>
 8029fa6:	f04a 0a10 	orr.w	sl, sl, #16
 8029faa:	f01a 0f20 	tst.w	sl, #32
 8029fae:	d009      	beq.n	8029fc4 <_svfprintf_r+0xbb4>
 8029fb0:	3607      	adds	r6, #7
 8029fb2:	f026 0607 	bic.w	r6, r6, #7
 8029fb6:	f106 0308 	add.w	r3, r6, #8
 8029fba:	e9d6 6700 	ldrd	r6, r7, [r6]
 8029fbe:	9308      	str	r3, [sp, #32]
 8029fc0:	2301      	movs	r3, #1
 8029fc2:	e6c9      	b.n	8029d58 <_svfprintf_r+0x948>
 8029fc4:	1d33      	adds	r3, r6, #4
 8029fc6:	f01a 0f10 	tst.w	sl, #16
 8029fca:	9308      	str	r3, [sp, #32]
 8029fcc:	d001      	beq.n	8029fd2 <_svfprintf_r+0xbc2>
 8029fce:	6836      	ldr	r6, [r6, #0]
 8029fd0:	e003      	b.n	8029fda <_svfprintf_r+0xbca>
 8029fd2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8029fd6:	d002      	beq.n	8029fde <_svfprintf_r+0xbce>
 8029fd8:	8836      	ldrh	r6, [r6, #0]
 8029fda:	2700      	movs	r7, #0
 8029fdc:	e7f0      	b.n	8029fc0 <_svfprintf_r+0xbb0>
 8029fde:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8029fe2:	d0f4      	beq.n	8029fce <_svfprintf_r+0xbbe>
 8029fe4:	7836      	ldrb	r6, [r6, #0]
 8029fe6:	e7f8      	b.n	8029fda <_svfprintf_r+0xbca>
 8029fe8:	4b22      	ldr	r3, [pc, #136]	; (802a074 <_svfprintf_r+0xc64>)
 8029fea:	f7ff bb48 	b.w	802967e <_svfprintf_r+0x26e>
 8029fee:	1d33      	adds	r3, r6, #4
 8029ff0:	f01a 0f10 	tst.w	sl, #16
 8029ff4:	9308      	str	r3, [sp, #32]
 8029ff6:	d001      	beq.n	8029ffc <_svfprintf_r+0xbec>
 8029ff8:	6836      	ldr	r6, [r6, #0]
 8029ffa:	e003      	b.n	802a004 <_svfprintf_r+0xbf4>
 8029ffc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802a000:	d003      	beq.n	802a00a <_svfprintf_r+0xbfa>
 802a002:	8836      	ldrh	r6, [r6, #0]
 802a004:	2700      	movs	r7, #0
 802a006:	f7ff bb47 	b.w	8029698 <_svfprintf_r+0x288>
 802a00a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802a00e:	d0f3      	beq.n	8029ff8 <_svfprintf_r+0xbe8>
 802a010:	7836      	ldrb	r6, [r6, #0]
 802a012:	e7f7      	b.n	802a004 <_svfprintf_r+0xbf4>
 802a014:	4652      	mov	r2, sl
 802a016:	2301      	movs	r3, #1
 802a018:	e6a5      	b.n	8029d66 <_svfprintf_r+0x956>
 802a01a:	2b01      	cmp	r3, #1
 802a01c:	f43f ac04 	beq.w	8029828 <_svfprintf_r+0x418>
 802a020:	2b02      	cmp	r3, #2
 802a022:	d06c      	beq.n	802a0fe <_svfprintf_r+0xcee>
 802a024:	ab52      	add	r3, sp, #328	; 0x148
 802a026:	08f1      	lsrs	r1, r6, #3
 802a028:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 802a02c:	08f8      	lsrs	r0, r7, #3
 802a02e:	f006 0207 	and.w	r2, r6, #7
 802a032:	4607      	mov	r7, r0
 802a034:	460e      	mov	r6, r1
 802a036:	3230      	adds	r2, #48	; 0x30
 802a038:	ea56 0107 	orrs.w	r1, r6, r7
 802a03c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 802a040:	f803 2c01 	strb.w	r2, [r3, #-1]
 802a044:	d114      	bne.n	802a070 <_svfprintf_r+0xc60>
 802a046:	f01a 0f01 	tst.w	sl, #1
 802a04a:	d006      	beq.n	802a05a <_svfprintf_r+0xc4a>
 802a04c:	2a30      	cmp	r2, #48	; 0x30
 802a04e:	d004      	beq.n	802a05a <_svfprintf_r+0xc4a>
 802a050:	2230      	movs	r2, #48	; 0x30
 802a052:	f80b 2c01 	strb.w	r2, [fp, #-1]
 802a056:	f1a3 0b02 	sub.w	fp, r3, #2
 802a05a:	ab52      	add	r3, sp, #328	; 0x148
 802a05c:	9510      	str	r5, [sp, #64]	; 0x40
 802a05e:	f04f 0900 	mov.w	r9, #0
 802a062:	eba3 050b 	sub.w	r5, r3, fp
 802a066:	464f      	mov	r7, r9
 802a068:	f8cd 901c 	str.w	r9, [sp, #28]
 802a06c:	464e      	mov	r6, r9
 802a06e:	e6c2      	b.n	8029df6 <_svfprintf_r+0x9e6>
 802a070:	465b      	mov	r3, fp
 802a072:	e7d8      	b.n	802a026 <_svfprintf_r+0xc16>
 802a074:	080b425c 	.word	0x080b425c
 802a078:	080b4280 	.word	0x080b4280
 802a07c:	080b4290 	.word	0x080b4290
 802a080:	2300      	movs	r3, #0
 802a082:	9304      	str	r3, [sp, #16]
 802a084:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 802a088:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 802a08c:	9307      	str	r3, [sp, #28]
 802a08e:	220a      	movs	r2, #10
 802a090:	2300      	movs	r3, #0
 802a092:	4630      	mov	r0, r6
 802a094:	4639      	mov	r1, r7
 802a096:	f7dd fb71 	bl	800777c <__aeabi_uldivmod>
 802a09a:	9b04      	ldr	r3, [sp, #16]
 802a09c:	3301      	adds	r3, #1
 802a09e:	9304      	str	r3, [sp, #16]
 802a0a0:	9b07      	ldr	r3, [sp, #28]
 802a0a2:	3230      	adds	r2, #48	; 0x30
 802a0a4:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 802a0a8:	f809 2c01 	strb.w	r2, [r9, #-1]
 802a0ac:	b1d3      	cbz	r3, 802a0e4 <_svfprintf_r+0xcd4>
 802a0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0b0:	9a04      	ldr	r2, [sp, #16]
 802a0b2:	781b      	ldrb	r3, [r3, #0]
 802a0b4:	429a      	cmp	r2, r3
 802a0b6:	d115      	bne.n	802a0e4 <_svfprintf_r+0xcd4>
 802a0b8:	2aff      	cmp	r2, #255	; 0xff
 802a0ba:	d013      	beq.n	802a0e4 <_svfprintf_r+0xcd4>
 802a0bc:	2f00      	cmp	r7, #0
 802a0be:	bf08      	it	eq
 802a0c0:	2e0a      	cmpeq	r6, #10
 802a0c2:	d30f      	bcc.n	802a0e4 <_svfprintf_r+0xcd4>
 802a0c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a0c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 802a0c8:	ebab 0b03 	sub.w	fp, fp, r3
 802a0cc:	461a      	mov	r2, r3
 802a0ce:	4658      	mov	r0, fp
 802a0d0:	f002 f8c9 	bl	802c266 <strncpy>
 802a0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0d6:	785b      	ldrb	r3, [r3, #1]
 802a0d8:	b11b      	cbz	r3, 802a0e2 <_svfprintf_r+0xcd2>
 802a0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0dc:	3301      	adds	r3, #1
 802a0de:	9309      	str	r3, [sp, #36]	; 0x24
 802a0e0:	2300      	movs	r3, #0
 802a0e2:	9304      	str	r3, [sp, #16]
 802a0e4:	2300      	movs	r3, #0
 802a0e6:	4630      	mov	r0, r6
 802a0e8:	4639      	mov	r1, r7
 802a0ea:	220a      	movs	r2, #10
 802a0ec:	f7dd fb46 	bl	800777c <__aeabi_uldivmod>
 802a0f0:	4606      	mov	r6, r0
 802a0f2:	460f      	mov	r7, r1
 802a0f4:	ea56 0307 	orrs.w	r3, r6, r7
 802a0f8:	d0af      	beq.n	802a05a <_svfprintf_r+0xc4a>
 802a0fa:	46d9      	mov	r9, fp
 802a0fc:	e7c7      	b.n	802a08e <_svfprintf_r+0xc7e>
 802a0fe:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 802a102:	f006 030f 	and.w	r3, r6, #15
 802a106:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a108:	5cd3      	ldrb	r3, [r2, r3]
 802a10a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 802a10e:	0933      	lsrs	r3, r6, #4
 802a110:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 802a114:	093a      	lsrs	r2, r7, #4
 802a116:	461e      	mov	r6, r3
 802a118:	4617      	mov	r7, r2
 802a11a:	ea56 0307 	orrs.w	r3, r6, r7
 802a11e:	d1f0      	bne.n	802a102 <_svfprintf_r+0xcf2>
 802a120:	e79b      	b.n	802a05a <_svfprintf_r+0xc4a>
 802a122:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 802a126:	2b00      	cmp	r3, #0
 802a128:	d197      	bne.n	802a05a <_svfprintf_r+0xc4a>
 802a12a:	07d2      	lsls	r2, r2, #31
 802a12c:	bf44      	itt	mi
 802a12e:	2330      	movmi	r3, #48	; 0x30
 802a130:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 802a134:	e791      	b.n	802a05a <_svfprintf_r+0xc4a>
 802a136:	9b06      	ldr	r3, [sp, #24]
 802a138:	2b00      	cmp	r3, #0
 802a13a:	f000 8377 	beq.w	802a82c <_svfprintf_r+0x141c>
 802a13e:	2000      	movs	r0, #0
 802a140:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 802a144:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 802a148:	9608      	str	r6, [sp, #32]
 802a14a:	f7ff bb49 	b.w	80297e0 <_svfprintf_r+0x3d0>
 802a14e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 802a152:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802a154:	e4ec      	b.n	8029b30 <_svfprintf_r+0x720>
 802a156:	2010      	movs	r0, #16
 802a158:	4403      	add	r3, r0
 802a15a:	2a07      	cmp	r2, #7
 802a15c:	6060      	str	r0, [r4, #4]
 802a15e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802a162:	dd08      	ble.n	802a176 <_svfprintf_r+0xd66>
 802a164:	aa26      	add	r2, sp, #152	; 0x98
 802a166:	4641      	mov	r1, r8
 802a168:	9803      	ldr	r0, [sp, #12]
 802a16a:	f002 f891 	bl	802c290 <__ssprint_r>
 802a16e:	2800      	cmp	r0, #0
 802a170:	f040 833a 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a174:	a929      	add	r1, sp, #164	; 0xa4
 802a176:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802a178:	3b10      	subs	r3, #16
 802a17a:	9313      	str	r3, [sp, #76]	; 0x4c
 802a17c:	460c      	mov	r4, r1
 802a17e:	e656      	b.n	8029e2e <_svfprintf_r+0xa1e>
 802a180:	460c      	mov	r4, r1
 802a182:	e671      	b.n	8029e68 <_svfprintf_r+0xa58>
 802a184:	aa26      	add	r2, sp, #152	; 0x98
 802a186:	4641      	mov	r1, r8
 802a188:	9803      	ldr	r0, [sp, #12]
 802a18a:	f002 f881 	bl	802c290 <__ssprint_r>
 802a18e:	2800      	cmp	r0, #0
 802a190:	f040 832a 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a194:	ac29      	add	r4, sp, #164	; 0xa4
 802a196:	e679      	b.n	8029e8c <_svfprintf_r+0xa7c>
 802a198:	aa26      	add	r2, sp, #152	; 0x98
 802a19a:	4641      	mov	r1, r8
 802a19c:	9803      	ldr	r0, [sp, #12]
 802a19e:	f002 f877 	bl	802c290 <__ssprint_r>
 802a1a2:	2800      	cmp	r0, #0
 802a1a4:	f040 8320 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a1a8:	ac29      	add	r4, sp, #164	; 0xa4
 802a1aa:	e67f      	b.n	8029eac <_svfprintf_r+0xa9c>
 802a1ac:	2010      	movs	r0, #16
 802a1ae:	4403      	add	r3, r0
 802a1b0:	2a07      	cmp	r2, #7
 802a1b2:	6060      	str	r0, [r4, #4]
 802a1b4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802a1b8:	dd08      	ble.n	802a1cc <_svfprintf_r+0xdbc>
 802a1ba:	aa26      	add	r2, sp, #152	; 0x98
 802a1bc:	4641      	mov	r1, r8
 802a1be:	9803      	ldr	r0, [sp, #12]
 802a1c0:	f002 f866 	bl	802c290 <__ssprint_r>
 802a1c4:	2800      	cmp	r0, #0
 802a1c6:	f040 830f 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a1ca:	a929      	add	r1, sp, #164	; 0xa4
 802a1cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802a1ce:	3b10      	subs	r3, #16
 802a1d0:	9313      	str	r3, [sp, #76]	; 0x4c
 802a1d2:	460c      	mov	r4, r1
 802a1d4:	e673      	b.n	8029ebe <_svfprintf_r+0xaae>
 802a1d6:	460c      	mov	r4, r1
 802a1d8:	e68e      	b.n	8029ef8 <_svfprintf_r+0xae8>
 802a1da:	2010      	movs	r0, #16
 802a1dc:	4403      	add	r3, r0
 802a1de:	2a07      	cmp	r2, #7
 802a1e0:	6060      	str	r0, [r4, #4]
 802a1e2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802a1e6:	dd08      	ble.n	802a1fa <_svfprintf_r+0xdea>
 802a1e8:	aa26      	add	r2, sp, #152	; 0x98
 802a1ea:	4641      	mov	r1, r8
 802a1ec:	9803      	ldr	r0, [sp, #12]
 802a1ee:	f002 f84f 	bl	802c290 <__ssprint_r>
 802a1f2:	2800      	cmp	r0, #0
 802a1f4:	f040 82f8 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a1f8:	a929      	add	r1, sp, #164	; 0xa4
 802a1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a1fc:	3b10      	subs	r3, #16
 802a1fe:	9310      	str	r3, [sp, #64]	; 0x40
 802a200:	460c      	mov	r4, r1
 802a202:	e67e      	b.n	8029f02 <_svfprintf_r+0xaf2>
 802a204:	460c      	mov	r4, r1
 802a206:	e699      	b.n	8029f3c <_svfprintf_r+0xb2c>
 802a208:	9b06      	ldr	r3, [sp, #24]
 802a20a:	2b65      	cmp	r3, #101	; 0x65
 802a20c:	f340 8234 	ble.w	802a678 <_svfprintf_r+0x1268>
 802a210:	2200      	movs	r2, #0
 802a212:	2300      	movs	r3, #0
 802a214:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802a218:	f7dd f9f0 	bl	80075fc <__aeabi_dcmpeq>
 802a21c:	2800      	cmp	r0, #0
 802a21e:	d069      	beq.n	802a2f4 <_svfprintf_r+0xee4>
 802a220:	4b6e      	ldr	r3, [pc, #440]	; (802a3dc <_svfprintf_r+0xfcc>)
 802a222:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a224:	6023      	str	r3, [r4, #0]
 802a226:	2301      	movs	r3, #1
 802a228:	441d      	add	r5, r3
 802a22a:	6063      	str	r3, [r4, #4]
 802a22c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a22e:	9528      	str	r5, [sp, #160]	; 0xa0
 802a230:	3301      	adds	r3, #1
 802a232:	2b07      	cmp	r3, #7
 802a234:	9327      	str	r3, [sp, #156]	; 0x9c
 802a236:	dc37      	bgt.n	802a2a8 <_svfprintf_r+0xe98>
 802a238:	3408      	adds	r4, #8
 802a23a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a23c:	9a04      	ldr	r2, [sp, #16]
 802a23e:	4293      	cmp	r3, r2
 802a240:	db03      	blt.n	802a24a <_svfprintf_r+0xe3a>
 802a242:	f01a 0f01 	tst.w	sl, #1
 802a246:	f43f ae8a 	beq.w	8029f5e <_svfprintf_r+0xb4e>
 802a24a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a24c:	6023      	str	r3, [r4, #0]
 802a24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a250:	6063      	str	r3, [r4, #4]
 802a252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a254:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a256:	4413      	add	r3, r2
 802a258:	9328      	str	r3, [sp, #160]	; 0xa0
 802a25a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a25c:	3301      	adds	r3, #1
 802a25e:	2b07      	cmp	r3, #7
 802a260:	9327      	str	r3, [sp, #156]	; 0x9c
 802a262:	dc2b      	bgt.n	802a2bc <_svfprintf_r+0xeac>
 802a264:	3408      	adds	r4, #8
 802a266:	9b04      	ldr	r3, [sp, #16]
 802a268:	1e5d      	subs	r5, r3, #1
 802a26a:	2d00      	cmp	r5, #0
 802a26c:	f77f ae77 	ble.w	8029f5e <_svfprintf_r+0xb4e>
 802a270:	4e5b      	ldr	r6, [pc, #364]	; (802a3e0 <_svfprintf_r+0xfd0>)
 802a272:	2710      	movs	r7, #16
 802a274:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802a278:	2d10      	cmp	r5, #16
 802a27a:	f103 0301 	add.w	r3, r3, #1
 802a27e:	f104 0108 	add.w	r1, r4, #8
 802a282:	6026      	str	r6, [r4, #0]
 802a284:	dc24      	bgt.n	802a2d0 <_svfprintf_r+0xec0>
 802a286:	6065      	str	r5, [r4, #4]
 802a288:	2b07      	cmp	r3, #7
 802a28a:	4415      	add	r5, r2
 802a28c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802a290:	f340 8289 	ble.w	802a7a6 <_svfprintf_r+0x1396>
 802a294:	aa26      	add	r2, sp, #152	; 0x98
 802a296:	4641      	mov	r1, r8
 802a298:	9803      	ldr	r0, [sp, #12]
 802a29a:	f001 fff9 	bl	802c290 <__ssprint_r>
 802a29e:	2800      	cmp	r0, #0
 802a2a0:	f040 82a2 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a2a4:	ac29      	add	r4, sp, #164	; 0xa4
 802a2a6:	e65a      	b.n	8029f5e <_svfprintf_r+0xb4e>
 802a2a8:	aa26      	add	r2, sp, #152	; 0x98
 802a2aa:	4641      	mov	r1, r8
 802a2ac:	9803      	ldr	r0, [sp, #12]
 802a2ae:	f001 ffef 	bl	802c290 <__ssprint_r>
 802a2b2:	2800      	cmp	r0, #0
 802a2b4:	f040 8298 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a2b8:	ac29      	add	r4, sp, #164	; 0xa4
 802a2ba:	e7be      	b.n	802a23a <_svfprintf_r+0xe2a>
 802a2bc:	aa26      	add	r2, sp, #152	; 0x98
 802a2be:	4641      	mov	r1, r8
 802a2c0:	9803      	ldr	r0, [sp, #12]
 802a2c2:	f001 ffe5 	bl	802c290 <__ssprint_r>
 802a2c6:	2800      	cmp	r0, #0
 802a2c8:	f040 828e 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a2cc:	ac29      	add	r4, sp, #164	; 0xa4
 802a2ce:	e7ca      	b.n	802a266 <_svfprintf_r+0xe56>
 802a2d0:	3210      	adds	r2, #16
 802a2d2:	2b07      	cmp	r3, #7
 802a2d4:	6067      	str	r7, [r4, #4]
 802a2d6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802a2da:	dd08      	ble.n	802a2ee <_svfprintf_r+0xede>
 802a2dc:	aa26      	add	r2, sp, #152	; 0x98
 802a2de:	4641      	mov	r1, r8
 802a2e0:	9803      	ldr	r0, [sp, #12]
 802a2e2:	f001 ffd5 	bl	802c290 <__ssprint_r>
 802a2e6:	2800      	cmp	r0, #0
 802a2e8:	f040 827e 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a2ec:	a929      	add	r1, sp, #164	; 0xa4
 802a2ee:	3d10      	subs	r5, #16
 802a2f0:	460c      	mov	r4, r1
 802a2f2:	e7bf      	b.n	802a274 <_svfprintf_r+0xe64>
 802a2f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a2f6:	2b00      	cmp	r3, #0
 802a2f8:	dc74      	bgt.n	802a3e4 <_svfprintf_r+0xfd4>
 802a2fa:	4b38      	ldr	r3, [pc, #224]	; (802a3dc <_svfprintf_r+0xfcc>)
 802a2fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a2fe:	6023      	str	r3, [r4, #0]
 802a300:	2301      	movs	r3, #1
 802a302:	441d      	add	r5, r3
 802a304:	6063      	str	r3, [r4, #4]
 802a306:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a308:	9528      	str	r5, [sp, #160]	; 0xa0
 802a30a:	3301      	adds	r3, #1
 802a30c:	2b07      	cmp	r3, #7
 802a30e:	9327      	str	r3, [sp, #156]	; 0x9c
 802a310:	dc3e      	bgt.n	802a390 <_svfprintf_r+0xf80>
 802a312:	3408      	adds	r4, #8
 802a314:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a316:	b92b      	cbnz	r3, 802a324 <_svfprintf_r+0xf14>
 802a318:	9b04      	ldr	r3, [sp, #16]
 802a31a:	b91b      	cbnz	r3, 802a324 <_svfprintf_r+0xf14>
 802a31c:	f01a 0f01 	tst.w	sl, #1
 802a320:	f43f ae1d 	beq.w	8029f5e <_svfprintf_r+0xb4e>
 802a324:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a326:	6023      	str	r3, [r4, #0]
 802a328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a32a:	6063      	str	r3, [r4, #4]
 802a32c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a32e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a330:	4413      	add	r3, r2
 802a332:	9328      	str	r3, [sp, #160]	; 0xa0
 802a334:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a336:	3301      	adds	r3, #1
 802a338:	2b07      	cmp	r3, #7
 802a33a:	9327      	str	r3, [sp, #156]	; 0x9c
 802a33c:	dc32      	bgt.n	802a3a4 <_svfprintf_r+0xf94>
 802a33e:	3408      	adds	r4, #8
 802a340:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802a342:	2d00      	cmp	r5, #0
 802a344:	da1b      	bge.n	802a37e <_svfprintf_r+0xf6e>
 802a346:	4e26      	ldr	r6, [pc, #152]	; (802a3e0 <_svfprintf_r+0xfd0>)
 802a348:	426d      	negs	r5, r5
 802a34a:	4623      	mov	r3, r4
 802a34c:	2710      	movs	r7, #16
 802a34e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 802a352:	2d10      	cmp	r5, #16
 802a354:	f102 0201 	add.w	r2, r2, #1
 802a358:	f104 0408 	add.w	r4, r4, #8
 802a35c:	601e      	str	r6, [r3, #0]
 802a35e:	dc2b      	bgt.n	802a3b8 <_svfprintf_r+0xfa8>
 802a360:	605d      	str	r5, [r3, #4]
 802a362:	2a07      	cmp	r2, #7
 802a364:	440d      	add	r5, r1
 802a366:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 802a36a:	dd08      	ble.n	802a37e <_svfprintf_r+0xf6e>
 802a36c:	aa26      	add	r2, sp, #152	; 0x98
 802a36e:	4641      	mov	r1, r8
 802a370:	9803      	ldr	r0, [sp, #12]
 802a372:	f001 ff8d 	bl	802c290 <__ssprint_r>
 802a376:	2800      	cmp	r0, #0
 802a378:	f040 8236 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a37c:	ac29      	add	r4, sp, #164	; 0xa4
 802a37e:	9b04      	ldr	r3, [sp, #16]
 802a380:	6063      	str	r3, [r4, #4]
 802a382:	9a04      	ldr	r2, [sp, #16]
 802a384:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a386:	f8c4 b000 	str.w	fp, [r4]
 802a38a:	4413      	add	r3, r2
 802a38c:	9328      	str	r3, [sp, #160]	; 0xa0
 802a38e:	e5df      	b.n	8029f50 <_svfprintf_r+0xb40>
 802a390:	aa26      	add	r2, sp, #152	; 0x98
 802a392:	4641      	mov	r1, r8
 802a394:	9803      	ldr	r0, [sp, #12]
 802a396:	f001 ff7b 	bl	802c290 <__ssprint_r>
 802a39a:	2800      	cmp	r0, #0
 802a39c:	f040 8224 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a3a0:	ac29      	add	r4, sp, #164	; 0xa4
 802a3a2:	e7b7      	b.n	802a314 <_svfprintf_r+0xf04>
 802a3a4:	aa26      	add	r2, sp, #152	; 0x98
 802a3a6:	4641      	mov	r1, r8
 802a3a8:	9803      	ldr	r0, [sp, #12]
 802a3aa:	f001 ff71 	bl	802c290 <__ssprint_r>
 802a3ae:	2800      	cmp	r0, #0
 802a3b0:	f040 821a 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a3b4:	ac29      	add	r4, sp, #164	; 0xa4
 802a3b6:	e7c3      	b.n	802a340 <_svfprintf_r+0xf30>
 802a3b8:	3110      	adds	r1, #16
 802a3ba:	2a07      	cmp	r2, #7
 802a3bc:	605f      	str	r7, [r3, #4]
 802a3be:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 802a3c2:	dd08      	ble.n	802a3d6 <_svfprintf_r+0xfc6>
 802a3c4:	aa26      	add	r2, sp, #152	; 0x98
 802a3c6:	4641      	mov	r1, r8
 802a3c8:	9803      	ldr	r0, [sp, #12]
 802a3ca:	f001 ff61 	bl	802c290 <__ssprint_r>
 802a3ce:	2800      	cmp	r0, #0
 802a3d0:	f040 820a 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a3d4:	ac29      	add	r4, sp, #164	; 0xa4
 802a3d6:	3d10      	subs	r5, #16
 802a3d8:	4623      	mov	r3, r4
 802a3da:	e7b8      	b.n	802a34e <_svfprintf_r+0xf3e>
 802a3dc:	080b427e 	.word	0x080b427e
 802a3e0:	080b4290 	.word	0x080b4290
 802a3e4:	9b04      	ldr	r3, [sp, #16]
 802a3e6:	42b3      	cmp	r3, r6
 802a3e8:	bfa8      	it	ge
 802a3ea:	4633      	movge	r3, r6
 802a3ec:	2b00      	cmp	r3, #0
 802a3ee:	461d      	mov	r5, r3
 802a3f0:	dd0b      	ble.n	802a40a <_svfprintf_r+0xffa>
 802a3f2:	e9c4 b300 	strd	fp, r3, [r4]
 802a3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a3f8:	442b      	add	r3, r5
 802a3fa:	9328      	str	r3, [sp, #160]	; 0xa0
 802a3fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a3fe:	3301      	adds	r3, #1
 802a400:	2b07      	cmp	r3, #7
 802a402:	9327      	str	r3, [sp, #156]	; 0x9c
 802a404:	f300 8086 	bgt.w	802a514 <_svfprintf_r+0x1104>
 802a408:	3408      	adds	r4, #8
 802a40a:	2d00      	cmp	r5, #0
 802a40c:	bfac      	ite	ge
 802a40e:	1b75      	subge	r5, r6, r5
 802a410:	4635      	movlt	r5, r6
 802a412:	2d00      	cmp	r5, #0
 802a414:	dd19      	ble.n	802a44a <_svfprintf_r+0x103a>
 802a416:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802a41a:	4896      	ldr	r0, [pc, #600]	; (802a674 <_svfprintf_r+0x1264>)
 802a41c:	6020      	str	r0, [r4, #0]
 802a41e:	2d10      	cmp	r5, #16
 802a420:	f103 0301 	add.w	r3, r3, #1
 802a424:	f104 0108 	add.w	r1, r4, #8
 802a428:	dc7e      	bgt.n	802a528 <_svfprintf_r+0x1118>
 802a42a:	6065      	str	r5, [r4, #4]
 802a42c:	2b07      	cmp	r3, #7
 802a42e:	4415      	add	r5, r2
 802a430:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802a434:	f340 808b 	ble.w	802a54e <_svfprintf_r+0x113e>
 802a438:	aa26      	add	r2, sp, #152	; 0x98
 802a43a:	4641      	mov	r1, r8
 802a43c:	9803      	ldr	r0, [sp, #12]
 802a43e:	f001 ff27 	bl	802c290 <__ssprint_r>
 802a442:	2800      	cmp	r0, #0
 802a444:	f040 81d0 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a448:	ac29      	add	r4, sp, #164	; 0xa4
 802a44a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 802a44e:	445e      	add	r6, fp
 802a450:	d009      	beq.n	802a466 <_svfprintf_r+0x1056>
 802a452:	9b07      	ldr	r3, [sp, #28]
 802a454:	2b00      	cmp	r3, #0
 802a456:	d17c      	bne.n	802a552 <_svfprintf_r+0x1142>
 802a458:	2f00      	cmp	r7, #0
 802a45a:	d17c      	bne.n	802a556 <_svfprintf_r+0x1146>
 802a45c:	9b04      	ldr	r3, [sp, #16]
 802a45e:	445b      	add	r3, fp
 802a460:	429e      	cmp	r6, r3
 802a462:	bf28      	it	cs
 802a464:	461e      	movcs	r6, r3
 802a466:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a468:	9a04      	ldr	r2, [sp, #16]
 802a46a:	4293      	cmp	r3, r2
 802a46c:	db02      	blt.n	802a474 <_svfprintf_r+0x1064>
 802a46e:	f01a 0f01 	tst.w	sl, #1
 802a472:	d00e      	beq.n	802a492 <_svfprintf_r+0x1082>
 802a474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a476:	6023      	str	r3, [r4, #0]
 802a478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a47a:	6063      	str	r3, [r4, #4]
 802a47c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a47e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a480:	4413      	add	r3, r2
 802a482:	9328      	str	r3, [sp, #160]	; 0xa0
 802a484:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a486:	3301      	adds	r3, #1
 802a488:	2b07      	cmp	r3, #7
 802a48a:	9327      	str	r3, [sp, #156]	; 0x9c
 802a48c:	f300 80dd 	bgt.w	802a64a <_svfprintf_r+0x123a>
 802a490:	3408      	adds	r4, #8
 802a492:	9b04      	ldr	r3, [sp, #16]
 802a494:	9a04      	ldr	r2, [sp, #16]
 802a496:	eb0b 0503 	add.w	r5, fp, r3
 802a49a:	1bab      	subs	r3, r5, r6
 802a49c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802a49e:	1b55      	subs	r5, r2, r5
 802a4a0:	429d      	cmp	r5, r3
 802a4a2:	bfa8      	it	ge
 802a4a4:	461d      	movge	r5, r3
 802a4a6:	2d00      	cmp	r5, #0
 802a4a8:	dd0b      	ble.n	802a4c2 <_svfprintf_r+0x10b2>
 802a4aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a4ac:	442b      	add	r3, r5
 802a4ae:	9328      	str	r3, [sp, #160]	; 0xa0
 802a4b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a4b2:	3301      	adds	r3, #1
 802a4b4:	2b07      	cmp	r3, #7
 802a4b6:	e9c4 6500 	strd	r6, r5, [r4]
 802a4ba:	9327      	str	r3, [sp, #156]	; 0x9c
 802a4bc:	f300 80cf 	bgt.w	802a65e <_svfprintf_r+0x124e>
 802a4c0:	3408      	adds	r4, #8
 802a4c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a4c4:	9a04      	ldr	r2, [sp, #16]
 802a4c6:	2d00      	cmp	r5, #0
 802a4c8:	eba2 0303 	sub.w	r3, r2, r3
 802a4cc:	bfac      	ite	ge
 802a4ce:	1b5d      	subge	r5, r3, r5
 802a4d0:	461d      	movlt	r5, r3
 802a4d2:	2d00      	cmp	r5, #0
 802a4d4:	f77f ad43 	ble.w	8029f5e <_svfprintf_r+0xb4e>
 802a4d8:	4e66      	ldr	r6, [pc, #408]	; (802a674 <_svfprintf_r+0x1264>)
 802a4da:	2710      	movs	r7, #16
 802a4dc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802a4e0:	2d10      	cmp	r5, #16
 802a4e2:	f103 0301 	add.w	r3, r3, #1
 802a4e6:	f104 0108 	add.w	r1, r4, #8
 802a4ea:	6026      	str	r6, [r4, #0]
 802a4ec:	f77f aecb 	ble.w	802a286 <_svfprintf_r+0xe76>
 802a4f0:	3210      	adds	r2, #16
 802a4f2:	2b07      	cmp	r3, #7
 802a4f4:	6067      	str	r7, [r4, #4]
 802a4f6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802a4fa:	dd08      	ble.n	802a50e <_svfprintf_r+0x10fe>
 802a4fc:	aa26      	add	r2, sp, #152	; 0x98
 802a4fe:	4641      	mov	r1, r8
 802a500:	9803      	ldr	r0, [sp, #12]
 802a502:	f001 fec5 	bl	802c290 <__ssprint_r>
 802a506:	2800      	cmp	r0, #0
 802a508:	f040 816e 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a50c:	a929      	add	r1, sp, #164	; 0xa4
 802a50e:	3d10      	subs	r5, #16
 802a510:	460c      	mov	r4, r1
 802a512:	e7e3      	b.n	802a4dc <_svfprintf_r+0x10cc>
 802a514:	aa26      	add	r2, sp, #152	; 0x98
 802a516:	4641      	mov	r1, r8
 802a518:	9803      	ldr	r0, [sp, #12]
 802a51a:	f001 feb9 	bl	802c290 <__ssprint_r>
 802a51e:	2800      	cmp	r0, #0
 802a520:	f040 8162 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a524:	ac29      	add	r4, sp, #164	; 0xa4
 802a526:	e770      	b.n	802a40a <_svfprintf_r+0xffa>
 802a528:	2010      	movs	r0, #16
 802a52a:	4402      	add	r2, r0
 802a52c:	2b07      	cmp	r3, #7
 802a52e:	6060      	str	r0, [r4, #4]
 802a530:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802a534:	dd08      	ble.n	802a548 <_svfprintf_r+0x1138>
 802a536:	aa26      	add	r2, sp, #152	; 0x98
 802a538:	4641      	mov	r1, r8
 802a53a:	9803      	ldr	r0, [sp, #12]
 802a53c:	f001 fea8 	bl	802c290 <__ssprint_r>
 802a540:	2800      	cmp	r0, #0
 802a542:	f040 8151 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a546:	a929      	add	r1, sp, #164	; 0xa4
 802a548:	3d10      	subs	r5, #16
 802a54a:	460c      	mov	r4, r1
 802a54c:	e763      	b.n	802a416 <_svfprintf_r+0x1006>
 802a54e:	460c      	mov	r4, r1
 802a550:	e77b      	b.n	802a44a <_svfprintf_r+0x103a>
 802a552:	2f00      	cmp	r7, #0
 802a554:	d049      	beq.n	802a5ea <_svfprintf_r+0x11da>
 802a556:	3f01      	subs	r7, #1
 802a558:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802a55a:	6023      	str	r3, [r4, #0]
 802a55c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a55e:	6063      	str	r3, [r4, #4]
 802a560:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a562:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a564:	4413      	add	r3, r2
 802a566:	9328      	str	r3, [sp, #160]	; 0xa0
 802a568:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a56a:	3301      	adds	r3, #1
 802a56c:	2b07      	cmp	r3, #7
 802a56e:	9327      	str	r3, [sp, #156]	; 0x9c
 802a570:	dc42      	bgt.n	802a5f8 <_svfprintf_r+0x11e8>
 802a572:	3408      	adds	r4, #8
 802a574:	9b04      	ldr	r3, [sp, #16]
 802a576:	445b      	add	r3, fp
 802a578:	1b9a      	subs	r2, r3, r6
 802a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a57c:	781b      	ldrb	r3, [r3, #0]
 802a57e:	4293      	cmp	r3, r2
 802a580:	bfa8      	it	ge
 802a582:	4613      	movge	r3, r2
 802a584:	2b00      	cmp	r3, #0
 802a586:	461d      	mov	r5, r3
 802a588:	dd0a      	ble.n	802a5a0 <_svfprintf_r+0x1190>
 802a58a:	e9c4 6300 	strd	r6, r3, [r4]
 802a58e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a590:	442b      	add	r3, r5
 802a592:	9328      	str	r3, [sp, #160]	; 0xa0
 802a594:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a596:	3301      	adds	r3, #1
 802a598:	2b07      	cmp	r3, #7
 802a59a:	9327      	str	r3, [sp, #156]	; 0x9c
 802a59c:	dc36      	bgt.n	802a60c <_svfprintf_r+0x11fc>
 802a59e:	3408      	adds	r4, #8
 802a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a5a2:	781b      	ldrb	r3, [r3, #0]
 802a5a4:	2d00      	cmp	r5, #0
 802a5a6:	bfac      	ite	ge
 802a5a8:	1b5d      	subge	r5, r3, r5
 802a5aa:	461d      	movlt	r5, r3
 802a5ac:	2d00      	cmp	r5, #0
 802a5ae:	dd18      	ble.n	802a5e2 <_svfprintf_r+0x11d2>
 802a5b0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 802a5b4:	482f      	ldr	r0, [pc, #188]	; (802a674 <_svfprintf_r+0x1264>)
 802a5b6:	6020      	str	r0, [r4, #0]
 802a5b8:	2d10      	cmp	r5, #16
 802a5ba:	f102 0201 	add.w	r2, r2, #1
 802a5be:	f104 0108 	add.w	r1, r4, #8
 802a5c2:	dc2d      	bgt.n	802a620 <_svfprintf_r+0x1210>
 802a5c4:	442b      	add	r3, r5
 802a5c6:	2a07      	cmp	r2, #7
 802a5c8:	6065      	str	r5, [r4, #4]
 802a5ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802a5ce:	dd3a      	ble.n	802a646 <_svfprintf_r+0x1236>
 802a5d0:	aa26      	add	r2, sp, #152	; 0x98
 802a5d2:	4641      	mov	r1, r8
 802a5d4:	9803      	ldr	r0, [sp, #12]
 802a5d6:	f001 fe5b 	bl	802c290 <__ssprint_r>
 802a5da:	2800      	cmp	r0, #0
 802a5dc:	f040 8104 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a5e0:	ac29      	add	r4, sp, #164	; 0xa4
 802a5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a5e4:	781b      	ldrb	r3, [r3, #0]
 802a5e6:	441e      	add	r6, r3
 802a5e8:	e733      	b.n	802a452 <_svfprintf_r+0x1042>
 802a5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a5ec:	3b01      	subs	r3, #1
 802a5ee:	9309      	str	r3, [sp, #36]	; 0x24
 802a5f0:	9b07      	ldr	r3, [sp, #28]
 802a5f2:	3b01      	subs	r3, #1
 802a5f4:	9307      	str	r3, [sp, #28]
 802a5f6:	e7af      	b.n	802a558 <_svfprintf_r+0x1148>
 802a5f8:	aa26      	add	r2, sp, #152	; 0x98
 802a5fa:	4641      	mov	r1, r8
 802a5fc:	9803      	ldr	r0, [sp, #12]
 802a5fe:	f001 fe47 	bl	802c290 <__ssprint_r>
 802a602:	2800      	cmp	r0, #0
 802a604:	f040 80f0 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a608:	ac29      	add	r4, sp, #164	; 0xa4
 802a60a:	e7b3      	b.n	802a574 <_svfprintf_r+0x1164>
 802a60c:	aa26      	add	r2, sp, #152	; 0x98
 802a60e:	4641      	mov	r1, r8
 802a610:	9803      	ldr	r0, [sp, #12]
 802a612:	f001 fe3d 	bl	802c290 <__ssprint_r>
 802a616:	2800      	cmp	r0, #0
 802a618:	f040 80e6 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a61c:	ac29      	add	r4, sp, #164	; 0xa4
 802a61e:	e7bf      	b.n	802a5a0 <_svfprintf_r+0x1190>
 802a620:	2010      	movs	r0, #16
 802a622:	4403      	add	r3, r0
 802a624:	2a07      	cmp	r2, #7
 802a626:	6060      	str	r0, [r4, #4]
 802a628:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802a62c:	dd08      	ble.n	802a640 <_svfprintf_r+0x1230>
 802a62e:	aa26      	add	r2, sp, #152	; 0x98
 802a630:	4641      	mov	r1, r8
 802a632:	9803      	ldr	r0, [sp, #12]
 802a634:	f001 fe2c 	bl	802c290 <__ssprint_r>
 802a638:	2800      	cmp	r0, #0
 802a63a:	f040 80d5 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a63e:	a929      	add	r1, sp, #164	; 0xa4
 802a640:	3d10      	subs	r5, #16
 802a642:	460c      	mov	r4, r1
 802a644:	e7b4      	b.n	802a5b0 <_svfprintf_r+0x11a0>
 802a646:	460c      	mov	r4, r1
 802a648:	e7cb      	b.n	802a5e2 <_svfprintf_r+0x11d2>
 802a64a:	aa26      	add	r2, sp, #152	; 0x98
 802a64c:	4641      	mov	r1, r8
 802a64e:	9803      	ldr	r0, [sp, #12]
 802a650:	f001 fe1e 	bl	802c290 <__ssprint_r>
 802a654:	2800      	cmp	r0, #0
 802a656:	f040 80c7 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a65a:	ac29      	add	r4, sp, #164	; 0xa4
 802a65c:	e719      	b.n	802a492 <_svfprintf_r+0x1082>
 802a65e:	aa26      	add	r2, sp, #152	; 0x98
 802a660:	4641      	mov	r1, r8
 802a662:	9803      	ldr	r0, [sp, #12]
 802a664:	f001 fe14 	bl	802c290 <__ssprint_r>
 802a668:	2800      	cmp	r0, #0
 802a66a:	f040 80bd 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a66e:	ac29      	add	r4, sp, #164	; 0xa4
 802a670:	e727      	b.n	802a4c2 <_svfprintf_r+0x10b2>
 802a672:	bf00      	nop
 802a674:	080b4290 	.word	0x080b4290
 802a678:	9a04      	ldr	r2, [sp, #16]
 802a67a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a67c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a67e:	2a01      	cmp	r2, #1
 802a680:	f105 0501 	add.w	r5, r5, #1
 802a684:	f103 0301 	add.w	r3, r3, #1
 802a688:	f104 0608 	add.w	r6, r4, #8
 802a68c:	dc02      	bgt.n	802a694 <_svfprintf_r+0x1284>
 802a68e:	f01a 0f01 	tst.w	sl, #1
 802a692:	d07d      	beq.n	802a790 <_svfprintf_r+0x1380>
 802a694:	2201      	movs	r2, #1
 802a696:	2b07      	cmp	r3, #7
 802a698:	f8c4 b000 	str.w	fp, [r4]
 802a69c:	6062      	str	r2, [r4, #4]
 802a69e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802a6a2:	dd08      	ble.n	802a6b6 <_svfprintf_r+0x12a6>
 802a6a4:	aa26      	add	r2, sp, #152	; 0x98
 802a6a6:	4641      	mov	r1, r8
 802a6a8:	9803      	ldr	r0, [sp, #12]
 802a6aa:	f001 fdf1 	bl	802c290 <__ssprint_r>
 802a6ae:	2800      	cmp	r0, #0
 802a6b0:	f040 809a 	bne.w	802a7e8 <_svfprintf_r+0x13d8>
 802a6b4:	ae29      	add	r6, sp, #164	; 0xa4
 802a6b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a6b8:	6033      	str	r3, [r6, #0]
 802a6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a6bc:	6073      	str	r3, [r6, #4]
 802a6be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a6c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a6c2:	4413      	add	r3, r2
 802a6c4:	9328      	str	r3, [sp, #160]	; 0xa0
 802a6c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a6c8:	3301      	adds	r3, #1
 802a6ca:	2b07      	cmp	r3, #7
 802a6cc:	9327      	str	r3, [sp, #156]	; 0x9c
 802a6ce:	dc31      	bgt.n	802a734 <_svfprintf_r+0x1324>
 802a6d0:	3608      	adds	r6, #8
 802a6d2:	9b04      	ldr	r3, [sp, #16]
 802a6d4:	2200      	movs	r2, #0
 802a6d6:	1e5c      	subs	r4, r3, #1
 802a6d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802a6dc:	2300      	movs	r3, #0
 802a6de:	f7dc ff8d 	bl	80075fc <__aeabi_dcmpeq>
 802a6e2:	2800      	cmp	r0, #0
 802a6e4:	d12f      	bne.n	802a746 <_svfprintf_r+0x1336>
 802a6e6:	f10b 0301 	add.w	r3, fp, #1
 802a6ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802a6ec:	9904      	ldr	r1, [sp, #16]
 802a6ee:	e9c6 3400 	strd	r3, r4, [r6]
 802a6f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a6f4:	3201      	adds	r2, #1
 802a6f6:	3b01      	subs	r3, #1
 802a6f8:	440b      	add	r3, r1
 802a6fa:	2a07      	cmp	r2, #7
 802a6fc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802a700:	dd4f      	ble.n	802a7a2 <_svfprintf_r+0x1392>
 802a702:	aa26      	add	r2, sp, #152	; 0x98
 802a704:	4641      	mov	r1, r8
 802a706:	9803      	ldr	r0, [sp, #12]
 802a708:	f001 fdc2 	bl	802c290 <__ssprint_r>
 802a70c:	2800      	cmp	r0, #0
 802a70e:	d16b      	bne.n	802a7e8 <_svfprintf_r+0x13d8>
 802a710:	ae29      	add	r6, sp, #164	; 0xa4
 802a712:	ab22      	add	r3, sp, #136	; 0x88
 802a714:	6033      	str	r3, [r6, #0]
 802a716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a718:	6073      	str	r3, [r6, #4]
 802a71a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802a71c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a71e:	4413      	add	r3, r2
 802a720:	9328      	str	r3, [sp, #160]	; 0xa0
 802a722:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a724:	3301      	adds	r3, #1
 802a726:	2b07      	cmp	r3, #7
 802a728:	9327      	str	r3, [sp, #156]	; 0x9c
 802a72a:	f73f adb3 	bgt.w	802a294 <_svfprintf_r+0xe84>
 802a72e:	f106 0408 	add.w	r4, r6, #8
 802a732:	e414      	b.n	8029f5e <_svfprintf_r+0xb4e>
 802a734:	aa26      	add	r2, sp, #152	; 0x98
 802a736:	4641      	mov	r1, r8
 802a738:	9803      	ldr	r0, [sp, #12]
 802a73a:	f001 fda9 	bl	802c290 <__ssprint_r>
 802a73e:	2800      	cmp	r0, #0
 802a740:	d152      	bne.n	802a7e8 <_svfprintf_r+0x13d8>
 802a742:	ae29      	add	r6, sp, #164	; 0xa4
 802a744:	e7c5      	b.n	802a6d2 <_svfprintf_r+0x12c2>
 802a746:	2c00      	cmp	r4, #0
 802a748:	dde3      	ble.n	802a712 <_svfprintf_r+0x1302>
 802a74a:	4d3e      	ldr	r5, [pc, #248]	; (802a844 <_svfprintf_r+0x1434>)
 802a74c:	2710      	movs	r7, #16
 802a74e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802a752:	2c10      	cmp	r4, #16
 802a754:	f103 0301 	add.w	r3, r3, #1
 802a758:	f106 0108 	add.w	r1, r6, #8
 802a75c:	6035      	str	r5, [r6, #0]
 802a75e:	dc07      	bgt.n	802a770 <_svfprintf_r+0x1360>
 802a760:	6074      	str	r4, [r6, #4]
 802a762:	2b07      	cmp	r3, #7
 802a764:	4414      	add	r4, r2
 802a766:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 802a76a:	dcca      	bgt.n	802a702 <_svfprintf_r+0x12f2>
 802a76c:	460e      	mov	r6, r1
 802a76e:	e7d0      	b.n	802a712 <_svfprintf_r+0x1302>
 802a770:	3210      	adds	r2, #16
 802a772:	2b07      	cmp	r3, #7
 802a774:	6077      	str	r7, [r6, #4]
 802a776:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802a77a:	dd06      	ble.n	802a78a <_svfprintf_r+0x137a>
 802a77c:	aa26      	add	r2, sp, #152	; 0x98
 802a77e:	4641      	mov	r1, r8
 802a780:	9803      	ldr	r0, [sp, #12]
 802a782:	f001 fd85 	bl	802c290 <__ssprint_r>
 802a786:	bb78      	cbnz	r0, 802a7e8 <_svfprintf_r+0x13d8>
 802a788:	a929      	add	r1, sp, #164	; 0xa4
 802a78a:	3c10      	subs	r4, #16
 802a78c:	460e      	mov	r6, r1
 802a78e:	e7de      	b.n	802a74e <_svfprintf_r+0x133e>
 802a790:	2201      	movs	r2, #1
 802a792:	2b07      	cmp	r3, #7
 802a794:	f8c4 b000 	str.w	fp, [r4]
 802a798:	6062      	str	r2, [r4, #4]
 802a79a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802a79e:	ddb8      	ble.n	802a712 <_svfprintf_r+0x1302>
 802a7a0:	e7af      	b.n	802a702 <_svfprintf_r+0x12f2>
 802a7a2:	3608      	adds	r6, #8
 802a7a4:	e7b5      	b.n	802a712 <_svfprintf_r+0x1302>
 802a7a6:	460c      	mov	r4, r1
 802a7a8:	f7ff bbd9 	b.w	8029f5e <_svfprintf_r+0xb4e>
 802a7ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a7ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a7b0:	1a9d      	subs	r5, r3, r2
 802a7b2:	2d00      	cmp	r5, #0
 802a7b4:	f77f abd7 	ble.w	8029f66 <_svfprintf_r+0xb56>
 802a7b8:	4e23      	ldr	r6, [pc, #140]	; (802a848 <_svfprintf_r+0x1438>)
 802a7ba:	2710      	movs	r7, #16
 802a7bc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802a7c0:	2d10      	cmp	r5, #16
 802a7c2:	f103 0301 	add.w	r3, r3, #1
 802a7c6:	6026      	str	r6, [r4, #0]
 802a7c8:	dc18      	bgt.n	802a7fc <_svfprintf_r+0x13ec>
 802a7ca:	6065      	str	r5, [r4, #4]
 802a7cc:	2b07      	cmp	r3, #7
 802a7ce:	4415      	add	r5, r2
 802a7d0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802a7d4:	f77f abc7 	ble.w	8029f66 <_svfprintf_r+0xb56>
 802a7d8:	aa26      	add	r2, sp, #152	; 0x98
 802a7da:	4641      	mov	r1, r8
 802a7dc:	9803      	ldr	r0, [sp, #12]
 802a7de:	f001 fd57 	bl	802c290 <__ssprint_r>
 802a7e2:	2800      	cmp	r0, #0
 802a7e4:	f43f abbf 	beq.w	8029f66 <_svfprintf_r+0xb56>
 802a7e8:	f1b9 0f00 	cmp.w	r9, #0
 802a7ec:	f43f a8a8 	beq.w	8029940 <_svfprintf_r+0x530>
 802a7f0:	4649      	mov	r1, r9
 802a7f2:	9803      	ldr	r0, [sp, #12]
 802a7f4:	f001 f8ba 	bl	802b96c <_free_r>
 802a7f8:	f7ff b8a2 	b.w	8029940 <_svfprintf_r+0x530>
 802a7fc:	3210      	adds	r2, #16
 802a7fe:	2b07      	cmp	r3, #7
 802a800:	6067      	str	r7, [r4, #4]
 802a802:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802a806:	dc02      	bgt.n	802a80e <_svfprintf_r+0x13fe>
 802a808:	3408      	adds	r4, #8
 802a80a:	3d10      	subs	r5, #16
 802a80c:	e7d6      	b.n	802a7bc <_svfprintf_r+0x13ac>
 802a80e:	aa26      	add	r2, sp, #152	; 0x98
 802a810:	4641      	mov	r1, r8
 802a812:	9803      	ldr	r0, [sp, #12]
 802a814:	f001 fd3c 	bl	802c290 <__ssprint_r>
 802a818:	2800      	cmp	r0, #0
 802a81a:	d1e5      	bne.n	802a7e8 <_svfprintf_r+0x13d8>
 802a81c:	ac29      	add	r4, sp, #164	; 0xa4
 802a81e:	e7f4      	b.n	802a80a <_svfprintf_r+0x13fa>
 802a820:	4649      	mov	r1, r9
 802a822:	9803      	ldr	r0, [sp, #12]
 802a824:	f001 f8a2 	bl	802b96c <_free_r>
 802a828:	f7ff bbb5 	b.w	8029f96 <_svfprintf_r+0xb86>
 802a82c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a82e:	2b00      	cmp	r3, #0
 802a830:	f43f a886 	beq.w	8029940 <_svfprintf_r+0x530>
 802a834:	aa26      	add	r2, sp, #152	; 0x98
 802a836:	4641      	mov	r1, r8
 802a838:	9803      	ldr	r0, [sp, #12]
 802a83a:	f001 fd29 	bl	802c290 <__ssprint_r>
 802a83e:	f7ff b87f 	b.w	8029940 <_svfprintf_r+0x530>
 802a842:	bf00      	nop
 802a844:	080b4290 	.word	0x080b4290
 802a848:	080b4280 	.word	0x080b4280

0802a84c <sysconf>:
 802a84c:	2808      	cmp	r0, #8
 802a84e:	b508      	push	{r3, lr}
 802a850:	d006      	beq.n	802a860 <sysconf+0x14>
 802a852:	f7fd fea1 	bl	8028598 <__errno>
 802a856:	2316      	movs	r3, #22
 802a858:	6003      	str	r3, [r0, #0]
 802a85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a85e:	bd08      	pop	{r3, pc}
 802a860:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 802a864:	e7fb      	b.n	802a85e <sysconf+0x12>

0802a866 <__swbuf_r>:
 802a866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a868:	460d      	mov	r5, r1
 802a86a:	4614      	mov	r4, r2
 802a86c:	4606      	mov	r6, r0
 802a86e:	b118      	cbz	r0, 802a878 <__swbuf_r+0x12>
 802a870:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802a872:	b90b      	cbnz	r3, 802a878 <__swbuf_r+0x12>
 802a874:	f000 ffea 	bl	802b84c <__sinit>
 802a878:	69a3      	ldr	r3, [r4, #24]
 802a87a:	60a3      	str	r3, [r4, #8]
 802a87c:	89a3      	ldrh	r3, [r4, #12]
 802a87e:	0719      	lsls	r1, r3, #28
 802a880:	d528      	bpl.n	802a8d4 <__swbuf_r+0x6e>
 802a882:	6923      	ldr	r3, [r4, #16]
 802a884:	b333      	cbz	r3, 802a8d4 <__swbuf_r+0x6e>
 802a886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a88a:	b2ed      	uxtb	r5, r5
 802a88c:	049a      	lsls	r2, r3, #18
 802a88e:	462f      	mov	r7, r5
 802a890:	d52a      	bpl.n	802a8e8 <__swbuf_r+0x82>
 802a892:	6923      	ldr	r3, [r4, #16]
 802a894:	6820      	ldr	r0, [r4, #0]
 802a896:	1ac0      	subs	r0, r0, r3
 802a898:	6963      	ldr	r3, [r4, #20]
 802a89a:	4283      	cmp	r3, r0
 802a89c:	dc04      	bgt.n	802a8a8 <__swbuf_r+0x42>
 802a89e:	4621      	mov	r1, r4
 802a8a0:	4630      	mov	r0, r6
 802a8a2:	f000 ff67 	bl	802b774 <_fflush_r>
 802a8a6:	b9d8      	cbnz	r0, 802a8e0 <__swbuf_r+0x7a>
 802a8a8:	68a3      	ldr	r3, [r4, #8]
 802a8aa:	3b01      	subs	r3, #1
 802a8ac:	60a3      	str	r3, [r4, #8]
 802a8ae:	6823      	ldr	r3, [r4, #0]
 802a8b0:	1c5a      	adds	r2, r3, #1
 802a8b2:	6022      	str	r2, [r4, #0]
 802a8b4:	701d      	strb	r5, [r3, #0]
 802a8b6:	6963      	ldr	r3, [r4, #20]
 802a8b8:	3001      	adds	r0, #1
 802a8ba:	4283      	cmp	r3, r0
 802a8bc:	d004      	beq.n	802a8c8 <__swbuf_r+0x62>
 802a8be:	89a3      	ldrh	r3, [r4, #12]
 802a8c0:	07db      	lsls	r3, r3, #31
 802a8c2:	d50f      	bpl.n	802a8e4 <__swbuf_r+0x7e>
 802a8c4:	2d0a      	cmp	r5, #10
 802a8c6:	d10d      	bne.n	802a8e4 <__swbuf_r+0x7e>
 802a8c8:	4621      	mov	r1, r4
 802a8ca:	4630      	mov	r0, r6
 802a8cc:	f000 ff52 	bl	802b774 <_fflush_r>
 802a8d0:	b140      	cbz	r0, 802a8e4 <__swbuf_r+0x7e>
 802a8d2:	e005      	b.n	802a8e0 <__swbuf_r+0x7a>
 802a8d4:	4621      	mov	r1, r4
 802a8d6:	4630      	mov	r0, r6
 802a8d8:	f000 f820 	bl	802a91c <__swsetup_r>
 802a8dc:	2800      	cmp	r0, #0
 802a8de:	d0d2      	beq.n	802a886 <__swbuf_r+0x20>
 802a8e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802a8e4:	4638      	mov	r0, r7
 802a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a8e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802a8ec:	81a3      	strh	r3, [r4, #12]
 802a8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a8f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a8f4:	6663      	str	r3, [r4, #100]	; 0x64
 802a8f6:	e7cc      	b.n	802a892 <__swbuf_r+0x2c>

0802a8f8 <_write_r>:
 802a8f8:	b538      	push	{r3, r4, r5, lr}
 802a8fa:	4c07      	ldr	r4, [pc, #28]	; (802a918 <_write_r+0x20>)
 802a8fc:	4605      	mov	r5, r0
 802a8fe:	4608      	mov	r0, r1
 802a900:	4611      	mov	r1, r2
 802a902:	2200      	movs	r2, #0
 802a904:	6022      	str	r2, [r4, #0]
 802a906:	461a      	mov	r2, r3
 802a908:	f7fc f8c4 	bl	8026a94 <_write>
 802a90c:	1c43      	adds	r3, r0, #1
 802a90e:	d102      	bne.n	802a916 <_write_r+0x1e>
 802a910:	6823      	ldr	r3, [r4, #0]
 802a912:	b103      	cbz	r3, 802a916 <_write_r+0x1e>
 802a914:	602b      	str	r3, [r5, #0]
 802a916:	bd38      	pop	{r3, r4, r5, pc}
 802a918:	2003cff0 	.word	0x2003cff0

0802a91c <__swsetup_r>:
 802a91c:	b538      	push	{r3, r4, r5, lr}
 802a91e:	4b2a      	ldr	r3, [pc, #168]	; (802a9c8 <__swsetup_r+0xac>)
 802a920:	4605      	mov	r5, r0
 802a922:	6818      	ldr	r0, [r3, #0]
 802a924:	460c      	mov	r4, r1
 802a926:	b118      	cbz	r0, 802a930 <__swsetup_r+0x14>
 802a928:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802a92a:	b90b      	cbnz	r3, 802a930 <__swsetup_r+0x14>
 802a92c:	f000 ff8e 	bl	802b84c <__sinit>
 802a930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a934:	b29a      	uxth	r2, r3
 802a936:	0711      	lsls	r1, r2, #28
 802a938:	d422      	bmi.n	802a980 <__swsetup_r+0x64>
 802a93a:	06d0      	lsls	r0, r2, #27
 802a93c:	d407      	bmi.n	802a94e <__swsetup_r+0x32>
 802a93e:	2209      	movs	r2, #9
 802a940:	602a      	str	r2, [r5, #0]
 802a942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a946:	81a3      	strh	r3, [r4, #12]
 802a948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a94c:	e034      	b.n	802a9b8 <__swsetup_r+0x9c>
 802a94e:	0751      	lsls	r1, r2, #29
 802a950:	d512      	bpl.n	802a978 <__swsetup_r+0x5c>
 802a952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802a954:	b141      	cbz	r1, 802a968 <__swsetup_r+0x4c>
 802a956:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802a95a:	4299      	cmp	r1, r3
 802a95c:	d002      	beq.n	802a964 <__swsetup_r+0x48>
 802a95e:	4628      	mov	r0, r5
 802a960:	f001 f804 	bl	802b96c <_free_r>
 802a964:	2300      	movs	r3, #0
 802a966:	6323      	str	r3, [r4, #48]	; 0x30
 802a968:	89a3      	ldrh	r3, [r4, #12]
 802a96a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a96e:	81a3      	strh	r3, [r4, #12]
 802a970:	2300      	movs	r3, #0
 802a972:	6063      	str	r3, [r4, #4]
 802a974:	6923      	ldr	r3, [r4, #16]
 802a976:	6023      	str	r3, [r4, #0]
 802a978:	89a3      	ldrh	r3, [r4, #12]
 802a97a:	f043 0308 	orr.w	r3, r3, #8
 802a97e:	81a3      	strh	r3, [r4, #12]
 802a980:	6923      	ldr	r3, [r4, #16]
 802a982:	b94b      	cbnz	r3, 802a998 <__swsetup_r+0x7c>
 802a984:	89a3      	ldrh	r3, [r4, #12]
 802a986:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a98e:	d003      	beq.n	802a998 <__swsetup_r+0x7c>
 802a990:	4621      	mov	r1, r4
 802a992:	4628      	mov	r0, r5
 802a994:	f001 f8fe 	bl	802bb94 <__smakebuf_r>
 802a998:	89a2      	ldrh	r2, [r4, #12]
 802a99a:	f012 0301 	ands.w	r3, r2, #1
 802a99e:	d00c      	beq.n	802a9ba <__swsetup_r+0x9e>
 802a9a0:	2300      	movs	r3, #0
 802a9a2:	60a3      	str	r3, [r4, #8]
 802a9a4:	6963      	ldr	r3, [r4, #20]
 802a9a6:	425b      	negs	r3, r3
 802a9a8:	61a3      	str	r3, [r4, #24]
 802a9aa:	6923      	ldr	r3, [r4, #16]
 802a9ac:	b953      	cbnz	r3, 802a9c4 <__swsetup_r+0xa8>
 802a9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a9b2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802a9b6:	d1c4      	bne.n	802a942 <__swsetup_r+0x26>
 802a9b8:	bd38      	pop	{r3, r4, r5, pc}
 802a9ba:	0792      	lsls	r2, r2, #30
 802a9bc:	bf58      	it	pl
 802a9be:	6963      	ldrpl	r3, [r4, #20]
 802a9c0:	60a3      	str	r3, [r4, #8]
 802a9c2:	e7f2      	b.n	802a9aa <__swsetup_r+0x8e>
 802a9c4:	2000      	movs	r0, #0
 802a9c6:	e7f7      	b.n	802a9b8 <__swsetup_r+0x9c>
 802a9c8:	20008430 	.word	0x20008430

0802a9cc <register_fini>:
 802a9cc:	4b02      	ldr	r3, [pc, #8]	; (802a9d8 <register_fini+0xc>)
 802a9ce:	b113      	cbz	r3, 802a9d6 <register_fini+0xa>
 802a9d0:	4802      	ldr	r0, [pc, #8]	; (802a9dc <register_fini+0x10>)
 802a9d2:	f000 b805 	b.w	802a9e0 <atexit>
 802a9d6:	4770      	bx	lr
 802a9d8:	00000000 	.word	0x00000000
 802a9dc:	0802b89d 	.word	0x0802b89d

0802a9e0 <atexit>:
 802a9e0:	2300      	movs	r3, #0
 802a9e2:	4601      	mov	r1, r0
 802a9e4:	461a      	mov	r2, r3
 802a9e6:	4618      	mov	r0, r3
 802a9e8:	f001 bcca 	b.w	802c380 <__register_exitproc>

0802a9ec <quorem>:
 802a9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9f0:	6903      	ldr	r3, [r0, #16]
 802a9f2:	690c      	ldr	r4, [r1, #16]
 802a9f4:	42a3      	cmp	r3, r4
 802a9f6:	4680      	mov	r8, r0
 802a9f8:	f2c0 8082 	blt.w	802ab00 <quorem+0x114>
 802a9fc:	3c01      	subs	r4, #1
 802a9fe:	f101 0714 	add.w	r7, r1, #20
 802aa02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802aa06:	f100 0614 	add.w	r6, r0, #20
 802aa0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802aa0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802aa12:	eb06 030c 	add.w	r3, r6, ip
 802aa16:	3501      	adds	r5, #1
 802aa18:	eb07 090c 	add.w	r9, r7, ip
 802aa1c:	9301      	str	r3, [sp, #4]
 802aa1e:	fbb0 f5f5 	udiv	r5, r0, r5
 802aa22:	b395      	cbz	r5, 802aa8a <quorem+0x9e>
 802aa24:	f04f 0a00 	mov.w	sl, #0
 802aa28:	4638      	mov	r0, r7
 802aa2a:	46b6      	mov	lr, r6
 802aa2c:	46d3      	mov	fp, sl
 802aa2e:	f850 2b04 	ldr.w	r2, [r0], #4
 802aa32:	b293      	uxth	r3, r2
 802aa34:	fb05 a303 	mla	r3, r5, r3, sl
 802aa38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802aa3c:	b29b      	uxth	r3, r3
 802aa3e:	ebab 0303 	sub.w	r3, fp, r3
 802aa42:	0c12      	lsrs	r2, r2, #16
 802aa44:	f8de b000 	ldr.w	fp, [lr]
 802aa48:	fb05 a202 	mla	r2, r5, r2, sl
 802aa4c:	fa13 f38b 	uxtah	r3, r3, fp
 802aa50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802aa54:	fa1f fb82 	uxth.w	fp, r2
 802aa58:	f8de 2000 	ldr.w	r2, [lr]
 802aa5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802aa60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802aa64:	b29b      	uxth	r3, r3
 802aa66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802aa6a:	4581      	cmp	r9, r0
 802aa6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802aa70:	f84e 3b04 	str.w	r3, [lr], #4
 802aa74:	d2db      	bcs.n	802aa2e <quorem+0x42>
 802aa76:	f856 300c 	ldr.w	r3, [r6, ip]
 802aa7a:	b933      	cbnz	r3, 802aa8a <quorem+0x9e>
 802aa7c:	9b01      	ldr	r3, [sp, #4]
 802aa7e:	3b04      	subs	r3, #4
 802aa80:	429e      	cmp	r6, r3
 802aa82:	461a      	mov	r2, r3
 802aa84:	d330      	bcc.n	802aae8 <quorem+0xfc>
 802aa86:	f8c8 4010 	str.w	r4, [r8, #16]
 802aa8a:	4640      	mov	r0, r8
 802aa8c:	f001 faac 	bl	802bfe8 <__mcmp>
 802aa90:	2800      	cmp	r0, #0
 802aa92:	db25      	blt.n	802aae0 <quorem+0xf4>
 802aa94:	3501      	adds	r5, #1
 802aa96:	4630      	mov	r0, r6
 802aa98:	f04f 0c00 	mov.w	ip, #0
 802aa9c:	f857 2b04 	ldr.w	r2, [r7], #4
 802aaa0:	f8d0 e000 	ldr.w	lr, [r0]
 802aaa4:	b293      	uxth	r3, r2
 802aaa6:	ebac 0303 	sub.w	r3, ip, r3
 802aaaa:	0c12      	lsrs	r2, r2, #16
 802aaac:	fa13 f38e 	uxtah	r3, r3, lr
 802aab0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802aab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802aab8:	b29b      	uxth	r3, r3
 802aaba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802aabe:	45b9      	cmp	r9, r7
 802aac0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802aac4:	f840 3b04 	str.w	r3, [r0], #4
 802aac8:	d2e8      	bcs.n	802aa9c <quorem+0xb0>
 802aaca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802aace:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802aad2:	b92a      	cbnz	r2, 802aae0 <quorem+0xf4>
 802aad4:	3b04      	subs	r3, #4
 802aad6:	429e      	cmp	r6, r3
 802aad8:	461a      	mov	r2, r3
 802aada:	d30b      	bcc.n	802aaf4 <quorem+0x108>
 802aadc:	f8c8 4010 	str.w	r4, [r8, #16]
 802aae0:	4628      	mov	r0, r5
 802aae2:	b003      	add	sp, #12
 802aae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aae8:	6812      	ldr	r2, [r2, #0]
 802aaea:	3b04      	subs	r3, #4
 802aaec:	2a00      	cmp	r2, #0
 802aaee:	d1ca      	bne.n	802aa86 <quorem+0x9a>
 802aaf0:	3c01      	subs	r4, #1
 802aaf2:	e7c5      	b.n	802aa80 <quorem+0x94>
 802aaf4:	6812      	ldr	r2, [r2, #0]
 802aaf6:	3b04      	subs	r3, #4
 802aaf8:	2a00      	cmp	r2, #0
 802aafa:	d1ef      	bne.n	802aadc <quorem+0xf0>
 802aafc:	3c01      	subs	r4, #1
 802aafe:	e7ea      	b.n	802aad6 <quorem+0xea>
 802ab00:	2000      	movs	r0, #0
 802ab02:	e7ee      	b.n	802aae2 <quorem+0xf6>
 802ab04:	0000      	movs	r0, r0
	...

0802ab08 <_dtoa_r>:
 802ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab0c:	b097      	sub	sp, #92	; 0x5c
 802ab0e:	ec57 6b10 	vmov	r6, r7, d0
 802ab12:	9106      	str	r1, [sp, #24]
 802ab14:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802ab16:	920b      	str	r2, [sp, #44]	; 0x2c
 802ab18:	4604      	mov	r4, r0
 802ab1a:	9312      	str	r3, [sp, #72]	; 0x48
 802ab1c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802ab1e:	e9cd 6700 	strd	r6, r7, [sp]
 802ab22:	b141      	cbz	r1, 802ab36 <_dtoa_r+0x2e>
 802ab24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ab26:	604a      	str	r2, [r1, #4]
 802ab28:	2301      	movs	r3, #1
 802ab2a:	4093      	lsls	r3, r2
 802ab2c:	608b      	str	r3, [r1, #8]
 802ab2e:	f001 f896 	bl	802bc5e <_Bfree>
 802ab32:	2300      	movs	r3, #0
 802ab34:	6423      	str	r3, [r4, #64]	; 0x40
 802ab36:	1e3b      	subs	r3, r7, #0
 802ab38:	bfb9      	ittee	lt
 802ab3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802ab3e:	9301      	strlt	r3, [sp, #4]
 802ab40:	2300      	movge	r3, #0
 802ab42:	602b      	strge	r3, [r5, #0]
 802ab44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802ab48:	4baf      	ldr	r3, [pc, #700]	; (802ae08 <_dtoa_r+0x300>)
 802ab4a:	bfbc      	itt	lt
 802ab4c:	2201      	movlt	r2, #1
 802ab4e:	602a      	strlt	r2, [r5, #0]
 802ab50:	ea33 0308 	bics.w	r3, r3, r8
 802ab54:	d116      	bne.n	802ab84 <_dtoa_r+0x7c>
 802ab56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802ab58:	f242 730f 	movw	r3, #9999	; 0x270f
 802ab5c:	6013      	str	r3, [r2, #0]
 802ab5e:	9b00      	ldr	r3, [sp, #0]
 802ab60:	b923      	cbnz	r3, 802ab6c <_dtoa_r+0x64>
 802ab62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802ab66:	2800      	cmp	r0, #0
 802ab68:	f000 8543 	beq.w	802b5f2 <_dtoa_r+0xaea>
 802ab6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802ab6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802ae1c <_dtoa_r+0x314>
 802ab72:	b11b      	cbz	r3, 802ab7c <_dtoa_r+0x74>
 802ab74:	f10b 0303 	add.w	r3, fp, #3
 802ab78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802ab7a:	6013      	str	r3, [r2, #0]
 802ab7c:	4658      	mov	r0, fp
 802ab7e:	b017      	add	sp, #92	; 0x5c
 802ab80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab84:	e9dd 6700 	ldrd	r6, r7, [sp]
 802ab88:	2200      	movs	r2, #0
 802ab8a:	2300      	movs	r3, #0
 802ab8c:	4630      	mov	r0, r6
 802ab8e:	4639      	mov	r1, r7
 802ab90:	f7dc fd34 	bl	80075fc <__aeabi_dcmpeq>
 802ab94:	4681      	mov	r9, r0
 802ab96:	b160      	cbz	r0, 802abb2 <_dtoa_r+0xaa>
 802ab98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802ab9a:	2301      	movs	r3, #1
 802ab9c:	6013      	str	r3, [r2, #0]
 802ab9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802aba0:	2b00      	cmp	r3, #0
 802aba2:	f000 8522 	beq.w	802b5ea <_dtoa_r+0xae2>
 802aba6:	4b99      	ldr	r3, [pc, #612]	; (802ae0c <_dtoa_r+0x304>)
 802aba8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802abaa:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 802abae:	6013      	str	r3, [r2, #0]
 802abb0:	e7e4      	b.n	802ab7c <_dtoa_r+0x74>
 802abb2:	aa14      	add	r2, sp, #80	; 0x50
 802abb4:	a915      	add	r1, sp, #84	; 0x54
 802abb6:	ec47 6b10 	vmov	d0, r6, r7
 802abba:	4620      	mov	r0, r4
 802abbc:	f001 fa8b 	bl	802c0d6 <__d2b>
 802abc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802abc4:	9004      	str	r0, [sp, #16]
 802abc6:	2d00      	cmp	r5, #0
 802abc8:	d07c      	beq.n	802acc4 <_dtoa_r+0x1bc>
 802abca:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802abce:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802abd2:	46b2      	mov	sl, r6
 802abd4:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802abd8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802abdc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802abe0:	2200      	movs	r2, #0
 802abe2:	4b8b      	ldr	r3, [pc, #556]	; (802ae10 <_dtoa_r+0x308>)
 802abe4:	4650      	mov	r0, sl
 802abe6:	4659      	mov	r1, fp
 802abe8:	f7dc f8e8 	bl	8006dbc <__aeabi_dsub>
 802abec:	a380      	add	r3, pc, #512	; (adr r3, 802adf0 <_dtoa_r+0x2e8>)
 802abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802abf2:	f7dc fa9b 	bl	800712c <__aeabi_dmul>
 802abf6:	a380      	add	r3, pc, #512	; (adr r3, 802adf8 <_dtoa_r+0x2f0>)
 802abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802abfc:	f7dc f8e0 	bl	8006dc0 <__adddf3>
 802ac00:	4606      	mov	r6, r0
 802ac02:	4628      	mov	r0, r5
 802ac04:	460f      	mov	r7, r1
 802ac06:	f7dc fa27 	bl	8007058 <__aeabi_i2d>
 802ac0a:	a37d      	add	r3, pc, #500	; (adr r3, 802ae00 <_dtoa_r+0x2f8>)
 802ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ac10:	f7dc fa8c 	bl	800712c <__aeabi_dmul>
 802ac14:	4602      	mov	r2, r0
 802ac16:	460b      	mov	r3, r1
 802ac18:	4630      	mov	r0, r6
 802ac1a:	4639      	mov	r1, r7
 802ac1c:	f7dc f8d0 	bl	8006dc0 <__adddf3>
 802ac20:	4606      	mov	r6, r0
 802ac22:	460f      	mov	r7, r1
 802ac24:	f7dc fd32 	bl	800768c <__aeabi_d2iz>
 802ac28:	2200      	movs	r2, #0
 802ac2a:	4682      	mov	sl, r0
 802ac2c:	2300      	movs	r3, #0
 802ac2e:	4630      	mov	r0, r6
 802ac30:	4639      	mov	r1, r7
 802ac32:	f7dc fced 	bl	8007610 <__aeabi_dcmplt>
 802ac36:	b148      	cbz	r0, 802ac4c <_dtoa_r+0x144>
 802ac38:	4650      	mov	r0, sl
 802ac3a:	f7dc fa0d 	bl	8007058 <__aeabi_i2d>
 802ac3e:	4632      	mov	r2, r6
 802ac40:	463b      	mov	r3, r7
 802ac42:	f7dc fcdb 	bl	80075fc <__aeabi_dcmpeq>
 802ac46:	b908      	cbnz	r0, 802ac4c <_dtoa_r+0x144>
 802ac48:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802ac4c:	f1ba 0f16 	cmp.w	sl, #22
 802ac50:	d859      	bhi.n	802ad06 <_dtoa_r+0x1fe>
 802ac52:	4970      	ldr	r1, [pc, #448]	; (802ae14 <_dtoa_r+0x30c>)
 802ac54:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802ac58:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ac5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802ac60:	f7dc fcf4 	bl	800764c <__aeabi_dcmpgt>
 802ac64:	2800      	cmp	r0, #0
 802ac66:	d050      	beq.n	802ad0a <_dtoa_r+0x202>
 802ac68:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802ac6c:	2300      	movs	r3, #0
 802ac6e:	930f      	str	r3, [sp, #60]	; 0x3c
 802ac70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802ac72:	1b5d      	subs	r5, r3, r5
 802ac74:	f1b5 0801 	subs.w	r8, r5, #1
 802ac78:	bf49      	itett	mi
 802ac7a:	f1c5 0301 	rsbmi	r3, r5, #1
 802ac7e:	2300      	movpl	r3, #0
 802ac80:	9305      	strmi	r3, [sp, #20]
 802ac82:	f04f 0800 	movmi.w	r8, #0
 802ac86:	bf58      	it	pl
 802ac88:	9305      	strpl	r3, [sp, #20]
 802ac8a:	f1ba 0f00 	cmp.w	sl, #0
 802ac8e:	db3e      	blt.n	802ad0e <_dtoa_r+0x206>
 802ac90:	2300      	movs	r3, #0
 802ac92:	44d0      	add	r8, sl
 802ac94:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802ac98:	9307      	str	r3, [sp, #28]
 802ac9a:	9b06      	ldr	r3, [sp, #24]
 802ac9c:	2b09      	cmp	r3, #9
 802ac9e:	f200 808d 	bhi.w	802adbc <_dtoa_r+0x2b4>
 802aca2:	2b05      	cmp	r3, #5
 802aca4:	bfc4      	itt	gt
 802aca6:	3b04      	subgt	r3, #4
 802aca8:	9306      	strgt	r3, [sp, #24]
 802acaa:	9b06      	ldr	r3, [sp, #24]
 802acac:	f1a3 0302 	sub.w	r3, r3, #2
 802acb0:	bfcc      	ite	gt
 802acb2:	2500      	movgt	r5, #0
 802acb4:	2501      	movle	r5, #1
 802acb6:	2b03      	cmp	r3, #3
 802acb8:	f200 808c 	bhi.w	802add4 <_dtoa_r+0x2cc>
 802acbc:	e8df f003 	tbb	[pc, r3]
 802acc0:	6e317c7a 	.word	0x6e317c7a
 802acc4:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802acc8:	441d      	add	r5, r3
 802acca:	f205 4032 	addw	r0, r5, #1074	; 0x432
 802acce:	2820      	cmp	r0, #32
 802acd0:	dd13      	ble.n	802acfa <_dtoa_r+0x1f2>
 802acd2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802acd6:	9b00      	ldr	r3, [sp, #0]
 802acd8:	fa08 f800 	lsl.w	r8, r8, r0
 802acdc:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802ace0:	fa23 f000 	lsr.w	r0, r3, r0
 802ace4:	ea48 0000 	orr.w	r0, r8, r0
 802ace8:	f7dc f9a6 	bl	8007038 <__aeabi_ui2d>
 802acec:	2301      	movs	r3, #1
 802acee:	4682      	mov	sl, r0
 802acf0:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802acf4:	3d01      	subs	r5, #1
 802acf6:	9313      	str	r3, [sp, #76]	; 0x4c
 802acf8:	e772      	b.n	802abe0 <_dtoa_r+0xd8>
 802acfa:	9b00      	ldr	r3, [sp, #0]
 802acfc:	f1c0 0020 	rsb	r0, r0, #32
 802ad00:	fa03 f000 	lsl.w	r0, r3, r0
 802ad04:	e7f0      	b.n	802ace8 <_dtoa_r+0x1e0>
 802ad06:	2301      	movs	r3, #1
 802ad08:	e7b1      	b.n	802ac6e <_dtoa_r+0x166>
 802ad0a:	900f      	str	r0, [sp, #60]	; 0x3c
 802ad0c:	e7b0      	b.n	802ac70 <_dtoa_r+0x168>
 802ad0e:	9b05      	ldr	r3, [sp, #20]
 802ad10:	eba3 030a 	sub.w	r3, r3, sl
 802ad14:	9305      	str	r3, [sp, #20]
 802ad16:	f1ca 0300 	rsb	r3, sl, #0
 802ad1a:	9307      	str	r3, [sp, #28]
 802ad1c:	2300      	movs	r3, #0
 802ad1e:	930e      	str	r3, [sp, #56]	; 0x38
 802ad20:	e7bb      	b.n	802ac9a <_dtoa_r+0x192>
 802ad22:	2301      	movs	r3, #1
 802ad24:	930a      	str	r3, [sp, #40]	; 0x28
 802ad26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	dd56      	ble.n	802adda <_dtoa_r+0x2d2>
 802ad2c:	9302      	str	r3, [sp, #8]
 802ad2e:	4699      	mov	r9, r3
 802ad30:	2200      	movs	r2, #0
 802ad32:	6462      	str	r2, [r4, #68]	; 0x44
 802ad34:	2204      	movs	r2, #4
 802ad36:	f102 0014 	add.w	r0, r2, #20
 802ad3a:	4298      	cmp	r0, r3
 802ad3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802ad3e:	d951      	bls.n	802ade4 <_dtoa_r+0x2dc>
 802ad40:	4620      	mov	r0, r4
 802ad42:	f000 ff67 	bl	802bc14 <_Balloc>
 802ad46:	f1b9 0f0e 	cmp.w	r9, #14
 802ad4a:	4683      	mov	fp, r0
 802ad4c:	6420      	str	r0, [r4, #64]	; 0x40
 802ad4e:	f200 80e8 	bhi.w	802af22 <_dtoa_r+0x41a>
 802ad52:	2d00      	cmp	r5, #0
 802ad54:	f000 80e5 	beq.w	802af22 <_dtoa_r+0x41a>
 802ad58:	ed9d 7b00 	vldr	d7, [sp]
 802ad5c:	f1ba 0f00 	cmp.w	sl, #0
 802ad60:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802ad64:	dd76      	ble.n	802ae54 <_dtoa_r+0x34c>
 802ad66:	4a2b      	ldr	r2, [pc, #172]	; (802ae14 <_dtoa_r+0x30c>)
 802ad68:	f00a 030f 	and.w	r3, sl, #15
 802ad6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802ad70:	ed93 7b00 	vldr	d7, [r3]
 802ad74:	ea4f 162a 	mov.w	r6, sl, asr #4
 802ad78:	06f0      	lsls	r0, r6, #27
 802ad7a:	ed8d 7b08 	vstr	d7, [sp, #32]
 802ad7e:	d567      	bpl.n	802ae50 <_dtoa_r+0x348>
 802ad80:	4b25      	ldr	r3, [pc, #148]	; (802ae18 <_dtoa_r+0x310>)
 802ad82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802ad86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802ad8a:	f7dc faf9 	bl	8007380 <__aeabi_ddiv>
 802ad8e:	e9cd 0100 	strd	r0, r1, [sp]
 802ad92:	f006 060f 	and.w	r6, r6, #15
 802ad96:	2503      	movs	r5, #3
 802ad98:	4f1f      	ldr	r7, [pc, #124]	; (802ae18 <_dtoa_r+0x310>)
 802ad9a:	e04e      	b.n	802ae3a <_dtoa_r+0x332>
 802ad9c:	2301      	movs	r3, #1
 802ad9e:	930a      	str	r3, [sp, #40]	; 0x28
 802ada0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ada2:	4453      	add	r3, sl
 802ada4:	f103 0901 	add.w	r9, r3, #1
 802ada8:	9302      	str	r3, [sp, #8]
 802adaa:	464b      	mov	r3, r9
 802adac:	2b01      	cmp	r3, #1
 802adae:	bfb8      	it	lt
 802adb0:	2301      	movlt	r3, #1
 802adb2:	e7bd      	b.n	802ad30 <_dtoa_r+0x228>
 802adb4:	2300      	movs	r3, #0
 802adb6:	e7b5      	b.n	802ad24 <_dtoa_r+0x21c>
 802adb8:	2300      	movs	r3, #0
 802adba:	e7f0      	b.n	802ad9e <_dtoa_r+0x296>
 802adbc:	2501      	movs	r5, #1
 802adbe:	2300      	movs	r3, #0
 802adc0:	9306      	str	r3, [sp, #24]
 802adc2:	950a      	str	r5, [sp, #40]	; 0x28
 802adc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802adc8:	9302      	str	r3, [sp, #8]
 802adca:	4699      	mov	r9, r3
 802adcc:	2200      	movs	r2, #0
 802adce:	2312      	movs	r3, #18
 802add0:	920b      	str	r2, [sp, #44]	; 0x2c
 802add2:	e7ad      	b.n	802ad30 <_dtoa_r+0x228>
 802add4:	2301      	movs	r3, #1
 802add6:	930a      	str	r3, [sp, #40]	; 0x28
 802add8:	e7f4      	b.n	802adc4 <_dtoa_r+0x2bc>
 802adda:	2301      	movs	r3, #1
 802addc:	9302      	str	r3, [sp, #8]
 802adde:	4699      	mov	r9, r3
 802ade0:	461a      	mov	r2, r3
 802ade2:	e7f5      	b.n	802add0 <_dtoa_r+0x2c8>
 802ade4:	3101      	adds	r1, #1
 802ade6:	6461      	str	r1, [r4, #68]	; 0x44
 802ade8:	0052      	lsls	r2, r2, #1
 802adea:	e7a4      	b.n	802ad36 <_dtoa_r+0x22e>
 802adec:	f3af 8000 	nop.w
 802adf0:	636f4361 	.word	0x636f4361
 802adf4:	3fd287a7 	.word	0x3fd287a7
 802adf8:	8b60c8b3 	.word	0x8b60c8b3
 802adfc:	3fc68a28 	.word	0x3fc68a28
 802ae00:	509f79fb 	.word	0x509f79fb
 802ae04:	3fd34413 	.word	0x3fd34413
 802ae08:	7ff00000 	.word	0x7ff00000
 802ae0c:	080b427f 	.word	0x080b427f
 802ae10:	3ff80000 	.word	0x3ff80000
 802ae14:	080b42d8 	.word	0x080b42d8
 802ae18:	080b42b0 	.word	0x080b42b0
 802ae1c:	080b42a9 	.word	0x080b42a9
 802ae20:	07f1      	lsls	r1, r6, #31
 802ae22:	d508      	bpl.n	802ae36 <_dtoa_r+0x32e>
 802ae24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802ae28:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ae2c:	f7dc f97e 	bl	800712c <__aeabi_dmul>
 802ae30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802ae34:	3501      	adds	r5, #1
 802ae36:	1076      	asrs	r6, r6, #1
 802ae38:	3708      	adds	r7, #8
 802ae3a:	2e00      	cmp	r6, #0
 802ae3c:	d1f0      	bne.n	802ae20 <_dtoa_r+0x318>
 802ae3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802ae42:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ae46:	f7dc fa9b 	bl	8007380 <__aeabi_ddiv>
 802ae4a:	e9cd 0100 	strd	r0, r1, [sp]
 802ae4e:	e01a      	b.n	802ae86 <_dtoa_r+0x37e>
 802ae50:	2502      	movs	r5, #2
 802ae52:	e7a1      	b.n	802ad98 <_dtoa_r+0x290>
 802ae54:	f000 80a0 	beq.w	802af98 <_dtoa_r+0x490>
 802ae58:	f1ca 0600 	rsb	r6, sl, #0
 802ae5c:	4b9f      	ldr	r3, [pc, #636]	; (802b0dc <_dtoa_r+0x5d4>)
 802ae5e:	4fa0      	ldr	r7, [pc, #640]	; (802b0e0 <_dtoa_r+0x5d8>)
 802ae60:	f006 020f 	and.w	r2, r6, #15
 802ae64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ae6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802ae70:	f7dc f95c 	bl	800712c <__aeabi_dmul>
 802ae74:	e9cd 0100 	strd	r0, r1, [sp]
 802ae78:	1136      	asrs	r6, r6, #4
 802ae7a:	2300      	movs	r3, #0
 802ae7c:	2502      	movs	r5, #2
 802ae7e:	2e00      	cmp	r6, #0
 802ae80:	d17f      	bne.n	802af82 <_dtoa_r+0x47a>
 802ae82:	2b00      	cmp	r3, #0
 802ae84:	d1e1      	bne.n	802ae4a <_dtoa_r+0x342>
 802ae86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ae88:	2b00      	cmp	r3, #0
 802ae8a:	f000 8087 	beq.w	802af9c <_dtoa_r+0x494>
 802ae8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 802ae92:	2200      	movs	r2, #0
 802ae94:	4b93      	ldr	r3, [pc, #588]	; (802b0e4 <_dtoa_r+0x5dc>)
 802ae96:	4630      	mov	r0, r6
 802ae98:	4639      	mov	r1, r7
 802ae9a:	f7dc fbb9 	bl	8007610 <__aeabi_dcmplt>
 802ae9e:	2800      	cmp	r0, #0
 802aea0:	d07c      	beq.n	802af9c <_dtoa_r+0x494>
 802aea2:	f1b9 0f00 	cmp.w	r9, #0
 802aea6:	d079      	beq.n	802af9c <_dtoa_r+0x494>
 802aea8:	9b02      	ldr	r3, [sp, #8]
 802aeaa:	2b00      	cmp	r3, #0
 802aeac:	dd35      	ble.n	802af1a <_dtoa_r+0x412>
 802aeae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802aeb2:	9308      	str	r3, [sp, #32]
 802aeb4:	4639      	mov	r1, r7
 802aeb6:	2200      	movs	r2, #0
 802aeb8:	4b8b      	ldr	r3, [pc, #556]	; (802b0e8 <_dtoa_r+0x5e0>)
 802aeba:	4630      	mov	r0, r6
 802aebc:	f7dc f936 	bl	800712c <__aeabi_dmul>
 802aec0:	e9cd 0100 	strd	r0, r1, [sp]
 802aec4:	9f02      	ldr	r7, [sp, #8]
 802aec6:	3501      	adds	r5, #1
 802aec8:	4628      	mov	r0, r5
 802aeca:	f7dc f8c5 	bl	8007058 <__aeabi_i2d>
 802aece:	e9dd 2300 	ldrd	r2, r3, [sp]
 802aed2:	f7dc f92b 	bl	800712c <__aeabi_dmul>
 802aed6:	2200      	movs	r2, #0
 802aed8:	4b84      	ldr	r3, [pc, #528]	; (802b0ec <_dtoa_r+0x5e4>)
 802aeda:	f7db ff71 	bl	8006dc0 <__adddf3>
 802aede:	4605      	mov	r5, r0
 802aee0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802aee4:	2f00      	cmp	r7, #0
 802aee6:	d15d      	bne.n	802afa4 <_dtoa_r+0x49c>
 802aee8:	2200      	movs	r2, #0
 802aeea:	4b81      	ldr	r3, [pc, #516]	; (802b0f0 <_dtoa_r+0x5e8>)
 802aeec:	e9dd 0100 	ldrd	r0, r1, [sp]
 802aef0:	f7db ff64 	bl	8006dbc <__aeabi_dsub>
 802aef4:	462a      	mov	r2, r5
 802aef6:	4633      	mov	r3, r6
 802aef8:	e9cd 0100 	strd	r0, r1, [sp]
 802aefc:	f7dc fba6 	bl	800764c <__aeabi_dcmpgt>
 802af00:	2800      	cmp	r0, #0
 802af02:	f040 8288 	bne.w	802b416 <_dtoa_r+0x90e>
 802af06:	462a      	mov	r2, r5
 802af08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802af0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802af10:	f7dc fb7e 	bl	8007610 <__aeabi_dcmplt>
 802af14:	2800      	cmp	r0, #0
 802af16:	f040 827c 	bne.w	802b412 <_dtoa_r+0x90a>
 802af1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802af1e:	e9cd 2300 	strd	r2, r3, [sp]
 802af22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802af24:	2b00      	cmp	r3, #0
 802af26:	f2c0 8150 	blt.w	802b1ca <_dtoa_r+0x6c2>
 802af2a:	f1ba 0f0e 	cmp.w	sl, #14
 802af2e:	f300 814c 	bgt.w	802b1ca <_dtoa_r+0x6c2>
 802af32:	4b6a      	ldr	r3, [pc, #424]	; (802b0dc <_dtoa_r+0x5d4>)
 802af34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802af38:	ed93 7b00 	vldr	d7, [r3]
 802af3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802af3e:	2b00      	cmp	r3, #0
 802af40:	ed8d 7b02 	vstr	d7, [sp, #8]
 802af44:	f280 80d8 	bge.w	802b0f8 <_dtoa_r+0x5f0>
 802af48:	f1b9 0f00 	cmp.w	r9, #0
 802af4c:	f300 80d4 	bgt.w	802b0f8 <_dtoa_r+0x5f0>
 802af50:	f040 825e 	bne.w	802b410 <_dtoa_r+0x908>
 802af54:	2200      	movs	r2, #0
 802af56:	4b66      	ldr	r3, [pc, #408]	; (802b0f0 <_dtoa_r+0x5e8>)
 802af58:	ec51 0b17 	vmov	r0, r1, d7
 802af5c:	f7dc f8e6 	bl	800712c <__aeabi_dmul>
 802af60:	e9dd 2300 	ldrd	r2, r3, [sp]
 802af64:	f7dc fb68 	bl	8007638 <__aeabi_dcmpge>
 802af68:	464f      	mov	r7, r9
 802af6a:	464e      	mov	r6, r9
 802af6c:	2800      	cmp	r0, #0
 802af6e:	f040 8234 	bne.w	802b3da <_dtoa_r+0x8d2>
 802af72:	2331      	movs	r3, #49	; 0x31
 802af74:	f10b 0501 	add.w	r5, fp, #1
 802af78:	f88b 3000 	strb.w	r3, [fp]
 802af7c:	f10a 0a01 	add.w	sl, sl, #1
 802af80:	e22f      	b.n	802b3e2 <_dtoa_r+0x8da>
 802af82:	07f2      	lsls	r2, r6, #31
 802af84:	d505      	bpl.n	802af92 <_dtoa_r+0x48a>
 802af86:	e9d7 2300 	ldrd	r2, r3, [r7]
 802af8a:	f7dc f8cf 	bl	800712c <__aeabi_dmul>
 802af8e:	3501      	adds	r5, #1
 802af90:	2301      	movs	r3, #1
 802af92:	1076      	asrs	r6, r6, #1
 802af94:	3708      	adds	r7, #8
 802af96:	e772      	b.n	802ae7e <_dtoa_r+0x376>
 802af98:	2502      	movs	r5, #2
 802af9a:	e774      	b.n	802ae86 <_dtoa_r+0x37e>
 802af9c:	f8cd a020 	str.w	sl, [sp, #32]
 802afa0:	464f      	mov	r7, r9
 802afa2:	e791      	b.n	802aec8 <_dtoa_r+0x3c0>
 802afa4:	4b4d      	ldr	r3, [pc, #308]	; (802b0dc <_dtoa_r+0x5d4>)
 802afa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802afaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802afae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802afb0:	2b00      	cmp	r3, #0
 802afb2:	d047      	beq.n	802b044 <_dtoa_r+0x53c>
 802afb4:	4602      	mov	r2, r0
 802afb6:	460b      	mov	r3, r1
 802afb8:	2000      	movs	r0, #0
 802afba:	494e      	ldr	r1, [pc, #312]	; (802b0f4 <_dtoa_r+0x5ec>)
 802afbc:	f7dc f9e0 	bl	8007380 <__aeabi_ddiv>
 802afc0:	462a      	mov	r2, r5
 802afc2:	4633      	mov	r3, r6
 802afc4:	f7db fefa 	bl	8006dbc <__aeabi_dsub>
 802afc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802afcc:	465d      	mov	r5, fp
 802afce:	e9dd 0100 	ldrd	r0, r1, [sp]
 802afd2:	f7dc fb5b 	bl	800768c <__aeabi_d2iz>
 802afd6:	4606      	mov	r6, r0
 802afd8:	f7dc f83e 	bl	8007058 <__aeabi_i2d>
 802afdc:	4602      	mov	r2, r0
 802afde:	460b      	mov	r3, r1
 802afe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802afe4:	f7db feea 	bl	8006dbc <__aeabi_dsub>
 802afe8:	3630      	adds	r6, #48	; 0x30
 802afea:	f805 6b01 	strb.w	r6, [r5], #1
 802afee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802aff2:	e9cd 0100 	strd	r0, r1, [sp]
 802aff6:	f7dc fb0b 	bl	8007610 <__aeabi_dcmplt>
 802affa:	2800      	cmp	r0, #0
 802affc:	d163      	bne.n	802b0c6 <_dtoa_r+0x5be>
 802affe:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b002:	2000      	movs	r0, #0
 802b004:	4937      	ldr	r1, [pc, #220]	; (802b0e4 <_dtoa_r+0x5dc>)
 802b006:	f7db fed9 	bl	8006dbc <__aeabi_dsub>
 802b00a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b00e:	f7dc faff 	bl	8007610 <__aeabi_dcmplt>
 802b012:	2800      	cmp	r0, #0
 802b014:	f040 80b7 	bne.w	802b186 <_dtoa_r+0x67e>
 802b018:	eba5 030b 	sub.w	r3, r5, fp
 802b01c:	429f      	cmp	r7, r3
 802b01e:	f77f af7c 	ble.w	802af1a <_dtoa_r+0x412>
 802b022:	2200      	movs	r2, #0
 802b024:	4b30      	ldr	r3, [pc, #192]	; (802b0e8 <_dtoa_r+0x5e0>)
 802b026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b02a:	f7dc f87f 	bl	800712c <__aeabi_dmul>
 802b02e:	2200      	movs	r2, #0
 802b030:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b034:	4b2c      	ldr	r3, [pc, #176]	; (802b0e8 <_dtoa_r+0x5e0>)
 802b036:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b03a:	f7dc f877 	bl	800712c <__aeabi_dmul>
 802b03e:	e9cd 0100 	strd	r0, r1, [sp]
 802b042:	e7c4      	b.n	802afce <_dtoa_r+0x4c6>
 802b044:	462a      	mov	r2, r5
 802b046:	4633      	mov	r3, r6
 802b048:	f7dc f870 	bl	800712c <__aeabi_dmul>
 802b04c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b050:	eb0b 0507 	add.w	r5, fp, r7
 802b054:	465e      	mov	r6, fp
 802b056:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b05a:	f7dc fb17 	bl	800768c <__aeabi_d2iz>
 802b05e:	4607      	mov	r7, r0
 802b060:	f7db fffa 	bl	8007058 <__aeabi_i2d>
 802b064:	3730      	adds	r7, #48	; 0x30
 802b066:	4602      	mov	r2, r0
 802b068:	460b      	mov	r3, r1
 802b06a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b06e:	f7db fea5 	bl	8006dbc <__aeabi_dsub>
 802b072:	f806 7b01 	strb.w	r7, [r6], #1
 802b076:	42ae      	cmp	r6, r5
 802b078:	e9cd 0100 	strd	r0, r1, [sp]
 802b07c:	f04f 0200 	mov.w	r2, #0
 802b080:	d126      	bne.n	802b0d0 <_dtoa_r+0x5c8>
 802b082:	4b1c      	ldr	r3, [pc, #112]	; (802b0f4 <_dtoa_r+0x5ec>)
 802b084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b088:	f7db fe9a 	bl	8006dc0 <__adddf3>
 802b08c:	4602      	mov	r2, r0
 802b08e:	460b      	mov	r3, r1
 802b090:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b094:	f7dc fada 	bl	800764c <__aeabi_dcmpgt>
 802b098:	2800      	cmp	r0, #0
 802b09a:	d174      	bne.n	802b186 <_dtoa_r+0x67e>
 802b09c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b0a0:	2000      	movs	r0, #0
 802b0a2:	4914      	ldr	r1, [pc, #80]	; (802b0f4 <_dtoa_r+0x5ec>)
 802b0a4:	f7db fe8a 	bl	8006dbc <__aeabi_dsub>
 802b0a8:	4602      	mov	r2, r0
 802b0aa:	460b      	mov	r3, r1
 802b0ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b0b0:	f7dc faae 	bl	8007610 <__aeabi_dcmplt>
 802b0b4:	2800      	cmp	r0, #0
 802b0b6:	f43f af30 	beq.w	802af1a <_dtoa_r+0x412>
 802b0ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b0be:	2b30      	cmp	r3, #48	; 0x30
 802b0c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802b0c4:	d002      	beq.n	802b0cc <_dtoa_r+0x5c4>
 802b0c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b0ca:	e04a      	b.n	802b162 <_dtoa_r+0x65a>
 802b0cc:	4615      	mov	r5, r2
 802b0ce:	e7f4      	b.n	802b0ba <_dtoa_r+0x5b2>
 802b0d0:	4b05      	ldr	r3, [pc, #20]	; (802b0e8 <_dtoa_r+0x5e0>)
 802b0d2:	f7dc f82b 	bl	800712c <__aeabi_dmul>
 802b0d6:	e9cd 0100 	strd	r0, r1, [sp]
 802b0da:	e7bc      	b.n	802b056 <_dtoa_r+0x54e>
 802b0dc:	080b42d8 	.word	0x080b42d8
 802b0e0:	080b42b0 	.word	0x080b42b0
 802b0e4:	3ff00000 	.word	0x3ff00000
 802b0e8:	40240000 	.word	0x40240000
 802b0ec:	401c0000 	.word	0x401c0000
 802b0f0:	40140000 	.word	0x40140000
 802b0f4:	3fe00000 	.word	0x3fe00000
 802b0f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b0fc:	465d      	mov	r5, fp
 802b0fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b102:	4630      	mov	r0, r6
 802b104:	4639      	mov	r1, r7
 802b106:	f7dc f93b 	bl	8007380 <__aeabi_ddiv>
 802b10a:	f7dc fabf 	bl	800768c <__aeabi_d2iz>
 802b10e:	4680      	mov	r8, r0
 802b110:	f7db ffa2 	bl	8007058 <__aeabi_i2d>
 802b114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b118:	f7dc f808 	bl	800712c <__aeabi_dmul>
 802b11c:	4602      	mov	r2, r0
 802b11e:	460b      	mov	r3, r1
 802b120:	4630      	mov	r0, r6
 802b122:	4639      	mov	r1, r7
 802b124:	f108 0630 	add.w	r6, r8, #48	; 0x30
 802b128:	f7db fe48 	bl	8006dbc <__aeabi_dsub>
 802b12c:	f805 6b01 	strb.w	r6, [r5], #1
 802b130:	eba5 060b 	sub.w	r6, r5, fp
 802b134:	45b1      	cmp	r9, r6
 802b136:	4602      	mov	r2, r0
 802b138:	460b      	mov	r3, r1
 802b13a:	d139      	bne.n	802b1b0 <_dtoa_r+0x6a8>
 802b13c:	f7db fe40 	bl	8006dc0 <__adddf3>
 802b140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b144:	4606      	mov	r6, r0
 802b146:	460f      	mov	r7, r1
 802b148:	f7dc fa80 	bl	800764c <__aeabi_dcmpgt>
 802b14c:	b9c8      	cbnz	r0, 802b182 <_dtoa_r+0x67a>
 802b14e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b152:	4630      	mov	r0, r6
 802b154:	4639      	mov	r1, r7
 802b156:	f7dc fa51 	bl	80075fc <__aeabi_dcmpeq>
 802b15a:	b110      	cbz	r0, 802b162 <_dtoa_r+0x65a>
 802b15c:	f018 0f01 	tst.w	r8, #1
 802b160:	d10f      	bne.n	802b182 <_dtoa_r+0x67a>
 802b162:	9904      	ldr	r1, [sp, #16]
 802b164:	4620      	mov	r0, r4
 802b166:	f000 fd7a 	bl	802bc5e <_Bfree>
 802b16a:	2300      	movs	r3, #0
 802b16c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b16e:	702b      	strb	r3, [r5, #0]
 802b170:	f10a 0301 	add.w	r3, sl, #1
 802b174:	6013      	str	r3, [r2, #0]
 802b176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b178:	2b00      	cmp	r3, #0
 802b17a:	f43f acff 	beq.w	802ab7c <_dtoa_r+0x74>
 802b17e:	601d      	str	r5, [r3, #0]
 802b180:	e4fc      	b.n	802ab7c <_dtoa_r+0x74>
 802b182:	f8cd a020 	str.w	sl, [sp, #32]
 802b186:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802b18a:	2a39      	cmp	r2, #57	; 0x39
 802b18c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 802b190:	d108      	bne.n	802b1a4 <_dtoa_r+0x69c>
 802b192:	459b      	cmp	fp, r3
 802b194:	d10a      	bne.n	802b1ac <_dtoa_r+0x6a4>
 802b196:	9b08      	ldr	r3, [sp, #32]
 802b198:	3301      	adds	r3, #1
 802b19a:	9308      	str	r3, [sp, #32]
 802b19c:	2330      	movs	r3, #48	; 0x30
 802b19e:	f88b 3000 	strb.w	r3, [fp]
 802b1a2:	465b      	mov	r3, fp
 802b1a4:	781a      	ldrb	r2, [r3, #0]
 802b1a6:	3201      	adds	r2, #1
 802b1a8:	701a      	strb	r2, [r3, #0]
 802b1aa:	e78c      	b.n	802b0c6 <_dtoa_r+0x5be>
 802b1ac:	461d      	mov	r5, r3
 802b1ae:	e7ea      	b.n	802b186 <_dtoa_r+0x67e>
 802b1b0:	2200      	movs	r2, #0
 802b1b2:	4b9b      	ldr	r3, [pc, #620]	; (802b420 <_dtoa_r+0x918>)
 802b1b4:	f7db ffba 	bl	800712c <__aeabi_dmul>
 802b1b8:	2200      	movs	r2, #0
 802b1ba:	2300      	movs	r3, #0
 802b1bc:	4606      	mov	r6, r0
 802b1be:	460f      	mov	r7, r1
 802b1c0:	f7dc fa1c 	bl	80075fc <__aeabi_dcmpeq>
 802b1c4:	2800      	cmp	r0, #0
 802b1c6:	d09a      	beq.n	802b0fe <_dtoa_r+0x5f6>
 802b1c8:	e7cb      	b.n	802b162 <_dtoa_r+0x65a>
 802b1ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b1cc:	2a00      	cmp	r2, #0
 802b1ce:	f000 808b 	beq.w	802b2e8 <_dtoa_r+0x7e0>
 802b1d2:	9a06      	ldr	r2, [sp, #24]
 802b1d4:	2a01      	cmp	r2, #1
 802b1d6:	dc6e      	bgt.n	802b2b6 <_dtoa_r+0x7ae>
 802b1d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b1da:	2a00      	cmp	r2, #0
 802b1dc:	d067      	beq.n	802b2ae <_dtoa_r+0x7a6>
 802b1de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b1e2:	9f07      	ldr	r7, [sp, #28]
 802b1e4:	9d05      	ldr	r5, [sp, #20]
 802b1e6:	9a05      	ldr	r2, [sp, #20]
 802b1e8:	2101      	movs	r1, #1
 802b1ea:	441a      	add	r2, r3
 802b1ec:	4620      	mov	r0, r4
 802b1ee:	9205      	str	r2, [sp, #20]
 802b1f0:	4498      	add	r8, r3
 802b1f2:	f000 fdc6 	bl	802bd82 <__i2b>
 802b1f6:	4606      	mov	r6, r0
 802b1f8:	2d00      	cmp	r5, #0
 802b1fa:	dd0c      	ble.n	802b216 <_dtoa_r+0x70e>
 802b1fc:	f1b8 0f00 	cmp.w	r8, #0
 802b200:	dd09      	ble.n	802b216 <_dtoa_r+0x70e>
 802b202:	4545      	cmp	r5, r8
 802b204:	9a05      	ldr	r2, [sp, #20]
 802b206:	462b      	mov	r3, r5
 802b208:	bfa8      	it	ge
 802b20a:	4643      	movge	r3, r8
 802b20c:	1ad2      	subs	r2, r2, r3
 802b20e:	9205      	str	r2, [sp, #20]
 802b210:	1aed      	subs	r5, r5, r3
 802b212:	eba8 0803 	sub.w	r8, r8, r3
 802b216:	9b07      	ldr	r3, [sp, #28]
 802b218:	b1eb      	cbz	r3, 802b256 <_dtoa_r+0x74e>
 802b21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b21c:	2b00      	cmp	r3, #0
 802b21e:	d067      	beq.n	802b2f0 <_dtoa_r+0x7e8>
 802b220:	b18f      	cbz	r7, 802b246 <_dtoa_r+0x73e>
 802b222:	4631      	mov	r1, r6
 802b224:	463a      	mov	r2, r7
 802b226:	4620      	mov	r0, r4
 802b228:	f000 fe4a 	bl	802bec0 <__pow5mult>
 802b22c:	9a04      	ldr	r2, [sp, #16]
 802b22e:	4601      	mov	r1, r0
 802b230:	4606      	mov	r6, r0
 802b232:	4620      	mov	r0, r4
 802b234:	f000 fdae 	bl	802bd94 <__multiply>
 802b238:	9904      	ldr	r1, [sp, #16]
 802b23a:	9008      	str	r0, [sp, #32]
 802b23c:	4620      	mov	r0, r4
 802b23e:	f000 fd0e 	bl	802bc5e <_Bfree>
 802b242:	9b08      	ldr	r3, [sp, #32]
 802b244:	9304      	str	r3, [sp, #16]
 802b246:	9b07      	ldr	r3, [sp, #28]
 802b248:	1bda      	subs	r2, r3, r7
 802b24a:	d004      	beq.n	802b256 <_dtoa_r+0x74e>
 802b24c:	9904      	ldr	r1, [sp, #16]
 802b24e:	4620      	mov	r0, r4
 802b250:	f000 fe36 	bl	802bec0 <__pow5mult>
 802b254:	9004      	str	r0, [sp, #16]
 802b256:	2101      	movs	r1, #1
 802b258:	4620      	mov	r0, r4
 802b25a:	f000 fd92 	bl	802bd82 <__i2b>
 802b25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b260:	4607      	mov	r7, r0
 802b262:	2b00      	cmp	r3, #0
 802b264:	f000 81cf 	beq.w	802b606 <_dtoa_r+0xafe>
 802b268:	461a      	mov	r2, r3
 802b26a:	4601      	mov	r1, r0
 802b26c:	4620      	mov	r0, r4
 802b26e:	f000 fe27 	bl	802bec0 <__pow5mult>
 802b272:	9b06      	ldr	r3, [sp, #24]
 802b274:	2b01      	cmp	r3, #1
 802b276:	4607      	mov	r7, r0
 802b278:	dc40      	bgt.n	802b2fc <_dtoa_r+0x7f4>
 802b27a:	9b00      	ldr	r3, [sp, #0]
 802b27c:	2b00      	cmp	r3, #0
 802b27e:	d139      	bne.n	802b2f4 <_dtoa_r+0x7ec>
 802b280:	9b01      	ldr	r3, [sp, #4]
 802b282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b286:	2b00      	cmp	r3, #0
 802b288:	d136      	bne.n	802b2f8 <_dtoa_r+0x7f0>
 802b28a:	9b01      	ldr	r3, [sp, #4]
 802b28c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b290:	0d1b      	lsrs	r3, r3, #20
 802b292:	051b      	lsls	r3, r3, #20
 802b294:	b12b      	cbz	r3, 802b2a2 <_dtoa_r+0x79a>
 802b296:	9b05      	ldr	r3, [sp, #20]
 802b298:	3301      	adds	r3, #1
 802b29a:	9305      	str	r3, [sp, #20]
 802b29c:	f108 0801 	add.w	r8, r8, #1
 802b2a0:	2301      	movs	r3, #1
 802b2a2:	9307      	str	r3, [sp, #28]
 802b2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b2a6:	2b00      	cmp	r3, #0
 802b2a8:	d12a      	bne.n	802b300 <_dtoa_r+0x7f8>
 802b2aa:	2001      	movs	r0, #1
 802b2ac:	e030      	b.n	802b310 <_dtoa_r+0x808>
 802b2ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b2b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b2b4:	e795      	b.n	802b1e2 <_dtoa_r+0x6da>
 802b2b6:	9b07      	ldr	r3, [sp, #28]
 802b2b8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 802b2bc:	42bb      	cmp	r3, r7
 802b2be:	bfbf      	itttt	lt
 802b2c0:	9b07      	ldrlt	r3, [sp, #28]
 802b2c2:	9707      	strlt	r7, [sp, #28]
 802b2c4:	1afa      	sublt	r2, r7, r3
 802b2c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b2c8:	bfbb      	ittet	lt
 802b2ca:	189b      	addlt	r3, r3, r2
 802b2cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 802b2ce:	1bdf      	subge	r7, r3, r7
 802b2d0:	2700      	movlt	r7, #0
 802b2d2:	f1b9 0f00 	cmp.w	r9, #0
 802b2d6:	bfb5      	itete	lt
 802b2d8:	9b05      	ldrlt	r3, [sp, #20]
 802b2da:	9d05      	ldrge	r5, [sp, #20]
 802b2dc:	eba3 0509 	sublt.w	r5, r3, r9
 802b2e0:	464b      	movge	r3, r9
 802b2e2:	bfb8      	it	lt
 802b2e4:	2300      	movlt	r3, #0
 802b2e6:	e77e      	b.n	802b1e6 <_dtoa_r+0x6de>
 802b2e8:	9f07      	ldr	r7, [sp, #28]
 802b2ea:	9d05      	ldr	r5, [sp, #20]
 802b2ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802b2ee:	e783      	b.n	802b1f8 <_dtoa_r+0x6f0>
 802b2f0:	9a07      	ldr	r2, [sp, #28]
 802b2f2:	e7ab      	b.n	802b24c <_dtoa_r+0x744>
 802b2f4:	2300      	movs	r3, #0
 802b2f6:	e7d4      	b.n	802b2a2 <_dtoa_r+0x79a>
 802b2f8:	9b00      	ldr	r3, [sp, #0]
 802b2fa:	e7d2      	b.n	802b2a2 <_dtoa_r+0x79a>
 802b2fc:	2300      	movs	r3, #0
 802b2fe:	9307      	str	r3, [sp, #28]
 802b300:	693b      	ldr	r3, [r7, #16]
 802b302:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802b306:	6918      	ldr	r0, [r3, #16]
 802b308:	f000 fced 	bl	802bce6 <__hi0bits>
 802b30c:	f1c0 0020 	rsb	r0, r0, #32
 802b310:	4440      	add	r0, r8
 802b312:	f010 001f 	ands.w	r0, r0, #31
 802b316:	d047      	beq.n	802b3a8 <_dtoa_r+0x8a0>
 802b318:	f1c0 0320 	rsb	r3, r0, #32
 802b31c:	2b04      	cmp	r3, #4
 802b31e:	dd3b      	ble.n	802b398 <_dtoa_r+0x890>
 802b320:	9b05      	ldr	r3, [sp, #20]
 802b322:	f1c0 001c 	rsb	r0, r0, #28
 802b326:	4403      	add	r3, r0
 802b328:	9305      	str	r3, [sp, #20]
 802b32a:	4405      	add	r5, r0
 802b32c:	4480      	add	r8, r0
 802b32e:	9b05      	ldr	r3, [sp, #20]
 802b330:	2b00      	cmp	r3, #0
 802b332:	dd05      	ble.n	802b340 <_dtoa_r+0x838>
 802b334:	461a      	mov	r2, r3
 802b336:	9904      	ldr	r1, [sp, #16]
 802b338:	4620      	mov	r0, r4
 802b33a:	f000 fe01 	bl	802bf40 <__lshift>
 802b33e:	9004      	str	r0, [sp, #16]
 802b340:	f1b8 0f00 	cmp.w	r8, #0
 802b344:	dd05      	ble.n	802b352 <_dtoa_r+0x84a>
 802b346:	4639      	mov	r1, r7
 802b348:	4642      	mov	r2, r8
 802b34a:	4620      	mov	r0, r4
 802b34c:	f000 fdf8 	bl	802bf40 <__lshift>
 802b350:	4607      	mov	r7, r0
 802b352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b354:	b353      	cbz	r3, 802b3ac <_dtoa_r+0x8a4>
 802b356:	4639      	mov	r1, r7
 802b358:	9804      	ldr	r0, [sp, #16]
 802b35a:	f000 fe45 	bl	802bfe8 <__mcmp>
 802b35e:	2800      	cmp	r0, #0
 802b360:	da24      	bge.n	802b3ac <_dtoa_r+0x8a4>
 802b362:	2300      	movs	r3, #0
 802b364:	220a      	movs	r2, #10
 802b366:	9904      	ldr	r1, [sp, #16]
 802b368:	4620      	mov	r0, r4
 802b36a:	f000 fc81 	bl	802bc70 <__multadd>
 802b36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b370:	9004      	str	r0, [sp, #16]
 802b372:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802b376:	2b00      	cmp	r3, #0
 802b378:	f000 814c 	beq.w	802b614 <_dtoa_r+0xb0c>
 802b37c:	2300      	movs	r3, #0
 802b37e:	4631      	mov	r1, r6
 802b380:	220a      	movs	r2, #10
 802b382:	4620      	mov	r0, r4
 802b384:	f000 fc74 	bl	802bc70 <__multadd>
 802b388:	9b02      	ldr	r3, [sp, #8]
 802b38a:	2b00      	cmp	r3, #0
 802b38c:	4606      	mov	r6, r0
 802b38e:	dc4f      	bgt.n	802b430 <_dtoa_r+0x928>
 802b390:	9b06      	ldr	r3, [sp, #24]
 802b392:	2b02      	cmp	r3, #2
 802b394:	dd4c      	ble.n	802b430 <_dtoa_r+0x928>
 802b396:	e011      	b.n	802b3bc <_dtoa_r+0x8b4>
 802b398:	d0c9      	beq.n	802b32e <_dtoa_r+0x826>
 802b39a:	9a05      	ldr	r2, [sp, #20]
 802b39c:	331c      	adds	r3, #28
 802b39e:	441a      	add	r2, r3
 802b3a0:	9205      	str	r2, [sp, #20]
 802b3a2:	441d      	add	r5, r3
 802b3a4:	4498      	add	r8, r3
 802b3a6:	e7c2      	b.n	802b32e <_dtoa_r+0x826>
 802b3a8:	4603      	mov	r3, r0
 802b3aa:	e7f6      	b.n	802b39a <_dtoa_r+0x892>
 802b3ac:	f1b9 0f00 	cmp.w	r9, #0
 802b3b0:	dc38      	bgt.n	802b424 <_dtoa_r+0x91c>
 802b3b2:	9b06      	ldr	r3, [sp, #24]
 802b3b4:	2b02      	cmp	r3, #2
 802b3b6:	dd35      	ble.n	802b424 <_dtoa_r+0x91c>
 802b3b8:	f8cd 9008 	str.w	r9, [sp, #8]
 802b3bc:	9b02      	ldr	r3, [sp, #8]
 802b3be:	b963      	cbnz	r3, 802b3da <_dtoa_r+0x8d2>
 802b3c0:	4639      	mov	r1, r7
 802b3c2:	2205      	movs	r2, #5
 802b3c4:	4620      	mov	r0, r4
 802b3c6:	f000 fc53 	bl	802bc70 <__multadd>
 802b3ca:	4601      	mov	r1, r0
 802b3cc:	4607      	mov	r7, r0
 802b3ce:	9804      	ldr	r0, [sp, #16]
 802b3d0:	f000 fe0a 	bl	802bfe8 <__mcmp>
 802b3d4:	2800      	cmp	r0, #0
 802b3d6:	f73f adcc 	bgt.w	802af72 <_dtoa_r+0x46a>
 802b3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b3dc:	465d      	mov	r5, fp
 802b3de:	ea6f 0a03 	mvn.w	sl, r3
 802b3e2:	f04f 0900 	mov.w	r9, #0
 802b3e6:	4639      	mov	r1, r7
 802b3e8:	4620      	mov	r0, r4
 802b3ea:	f000 fc38 	bl	802bc5e <_Bfree>
 802b3ee:	2e00      	cmp	r6, #0
 802b3f0:	f43f aeb7 	beq.w	802b162 <_dtoa_r+0x65a>
 802b3f4:	f1b9 0f00 	cmp.w	r9, #0
 802b3f8:	d005      	beq.n	802b406 <_dtoa_r+0x8fe>
 802b3fa:	45b1      	cmp	r9, r6
 802b3fc:	d003      	beq.n	802b406 <_dtoa_r+0x8fe>
 802b3fe:	4649      	mov	r1, r9
 802b400:	4620      	mov	r0, r4
 802b402:	f000 fc2c 	bl	802bc5e <_Bfree>
 802b406:	4631      	mov	r1, r6
 802b408:	4620      	mov	r0, r4
 802b40a:	f000 fc28 	bl	802bc5e <_Bfree>
 802b40e:	e6a8      	b.n	802b162 <_dtoa_r+0x65a>
 802b410:	2700      	movs	r7, #0
 802b412:	463e      	mov	r6, r7
 802b414:	e7e1      	b.n	802b3da <_dtoa_r+0x8d2>
 802b416:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b41a:	463e      	mov	r6, r7
 802b41c:	e5a9      	b.n	802af72 <_dtoa_r+0x46a>
 802b41e:	bf00      	nop
 802b420:	40240000 	.word	0x40240000
 802b424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b426:	f8cd 9008 	str.w	r9, [sp, #8]
 802b42a:	2b00      	cmp	r3, #0
 802b42c:	f000 80f9 	beq.w	802b622 <_dtoa_r+0xb1a>
 802b430:	2d00      	cmp	r5, #0
 802b432:	dd05      	ble.n	802b440 <_dtoa_r+0x938>
 802b434:	4631      	mov	r1, r6
 802b436:	462a      	mov	r2, r5
 802b438:	4620      	mov	r0, r4
 802b43a:	f000 fd81 	bl	802bf40 <__lshift>
 802b43e:	4606      	mov	r6, r0
 802b440:	9b07      	ldr	r3, [sp, #28]
 802b442:	2b00      	cmp	r3, #0
 802b444:	d04c      	beq.n	802b4e0 <_dtoa_r+0x9d8>
 802b446:	6871      	ldr	r1, [r6, #4]
 802b448:	4620      	mov	r0, r4
 802b44a:	f000 fbe3 	bl	802bc14 <_Balloc>
 802b44e:	6932      	ldr	r2, [r6, #16]
 802b450:	3202      	adds	r2, #2
 802b452:	4605      	mov	r5, r0
 802b454:	0092      	lsls	r2, r2, #2
 802b456:	f106 010c 	add.w	r1, r6, #12
 802b45a:	300c      	adds	r0, #12
 802b45c:	f7fd fd33 	bl	8028ec6 <memcpy>
 802b460:	2201      	movs	r2, #1
 802b462:	4629      	mov	r1, r5
 802b464:	4620      	mov	r0, r4
 802b466:	f000 fd6b 	bl	802bf40 <__lshift>
 802b46a:	9b00      	ldr	r3, [sp, #0]
 802b46c:	f8cd b014 	str.w	fp, [sp, #20]
 802b470:	f003 0301 	and.w	r3, r3, #1
 802b474:	46b1      	mov	r9, r6
 802b476:	9307      	str	r3, [sp, #28]
 802b478:	4606      	mov	r6, r0
 802b47a:	4639      	mov	r1, r7
 802b47c:	9804      	ldr	r0, [sp, #16]
 802b47e:	f7ff fab5 	bl	802a9ec <quorem>
 802b482:	4649      	mov	r1, r9
 802b484:	4605      	mov	r5, r0
 802b486:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802b48a:	9804      	ldr	r0, [sp, #16]
 802b48c:	f000 fdac 	bl	802bfe8 <__mcmp>
 802b490:	4632      	mov	r2, r6
 802b492:	9000      	str	r0, [sp, #0]
 802b494:	4639      	mov	r1, r7
 802b496:	4620      	mov	r0, r4
 802b498:	f000 fdc0 	bl	802c01c <__mdiff>
 802b49c:	68c3      	ldr	r3, [r0, #12]
 802b49e:	4602      	mov	r2, r0
 802b4a0:	bb03      	cbnz	r3, 802b4e4 <_dtoa_r+0x9dc>
 802b4a2:	4601      	mov	r1, r0
 802b4a4:	9008      	str	r0, [sp, #32]
 802b4a6:	9804      	ldr	r0, [sp, #16]
 802b4a8:	f000 fd9e 	bl	802bfe8 <__mcmp>
 802b4ac:	9a08      	ldr	r2, [sp, #32]
 802b4ae:	4603      	mov	r3, r0
 802b4b0:	4611      	mov	r1, r2
 802b4b2:	4620      	mov	r0, r4
 802b4b4:	9308      	str	r3, [sp, #32]
 802b4b6:	f000 fbd2 	bl	802bc5e <_Bfree>
 802b4ba:	9b08      	ldr	r3, [sp, #32]
 802b4bc:	b9a3      	cbnz	r3, 802b4e8 <_dtoa_r+0x9e0>
 802b4be:	9a06      	ldr	r2, [sp, #24]
 802b4c0:	b992      	cbnz	r2, 802b4e8 <_dtoa_r+0x9e0>
 802b4c2:	9a07      	ldr	r2, [sp, #28]
 802b4c4:	b982      	cbnz	r2, 802b4e8 <_dtoa_r+0x9e0>
 802b4c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b4ca:	d029      	beq.n	802b520 <_dtoa_r+0xa18>
 802b4cc:	9b00      	ldr	r3, [sp, #0]
 802b4ce:	2b00      	cmp	r3, #0
 802b4d0:	dd01      	ble.n	802b4d6 <_dtoa_r+0x9ce>
 802b4d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802b4d6:	9b05      	ldr	r3, [sp, #20]
 802b4d8:	1c5d      	adds	r5, r3, #1
 802b4da:	f883 8000 	strb.w	r8, [r3]
 802b4de:	e782      	b.n	802b3e6 <_dtoa_r+0x8de>
 802b4e0:	4630      	mov	r0, r6
 802b4e2:	e7c2      	b.n	802b46a <_dtoa_r+0x962>
 802b4e4:	2301      	movs	r3, #1
 802b4e6:	e7e3      	b.n	802b4b0 <_dtoa_r+0x9a8>
 802b4e8:	9a00      	ldr	r2, [sp, #0]
 802b4ea:	2a00      	cmp	r2, #0
 802b4ec:	db04      	blt.n	802b4f8 <_dtoa_r+0x9f0>
 802b4ee:	d125      	bne.n	802b53c <_dtoa_r+0xa34>
 802b4f0:	9a06      	ldr	r2, [sp, #24]
 802b4f2:	bb1a      	cbnz	r2, 802b53c <_dtoa_r+0xa34>
 802b4f4:	9a07      	ldr	r2, [sp, #28]
 802b4f6:	bb0a      	cbnz	r2, 802b53c <_dtoa_r+0xa34>
 802b4f8:	2b00      	cmp	r3, #0
 802b4fa:	ddec      	ble.n	802b4d6 <_dtoa_r+0x9ce>
 802b4fc:	2201      	movs	r2, #1
 802b4fe:	9904      	ldr	r1, [sp, #16]
 802b500:	4620      	mov	r0, r4
 802b502:	f000 fd1d 	bl	802bf40 <__lshift>
 802b506:	4639      	mov	r1, r7
 802b508:	9004      	str	r0, [sp, #16]
 802b50a:	f000 fd6d 	bl	802bfe8 <__mcmp>
 802b50e:	2800      	cmp	r0, #0
 802b510:	dc03      	bgt.n	802b51a <_dtoa_r+0xa12>
 802b512:	d1e0      	bne.n	802b4d6 <_dtoa_r+0x9ce>
 802b514:	f018 0f01 	tst.w	r8, #1
 802b518:	d0dd      	beq.n	802b4d6 <_dtoa_r+0x9ce>
 802b51a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b51e:	d1d8      	bne.n	802b4d2 <_dtoa_r+0x9ca>
 802b520:	9b05      	ldr	r3, [sp, #20]
 802b522:	9a05      	ldr	r2, [sp, #20]
 802b524:	1c5d      	adds	r5, r3, #1
 802b526:	2339      	movs	r3, #57	; 0x39
 802b528:	7013      	strb	r3, [r2, #0]
 802b52a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b52e:	2b39      	cmp	r3, #57	; 0x39
 802b530:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802b534:	d04f      	beq.n	802b5d6 <_dtoa_r+0xace>
 802b536:	3301      	adds	r3, #1
 802b538:	7013      	strb	r3, [r2, #0]
 802b53a:	e754      	b.n	802b3e6 <_dtoa_r+0x8de>
 802b53c:	9a05      	ldr	r2, [sp, #20]
 802b53e:	2b00      	cmp	r3, #0
 802b540:	f102 0501 	add.w	r5, r2, #1
 802b544:	dd06      	ble.n	802b554 <_dtoa_r+0xa4c>
 802b546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802b54a:	d0e9      	beq.n	802b520 <_dtoa_r+0xa18>
 802b54c:	f108 0801 	add.w	r8, r8, #1
 802b550:	9b05      	ldr	r3, [sp, #20]
 802b552:	e7c2      	b.n	802b4da <_dtoa_r+0x9d2>
 802b554:	9a02      	ldr	r2, [sp, #8]
 802b556:	f805 8c01 	strb.w	r8, [r5, #-1]
 802b55a:	eba5 030b 	sub.w	r3, r5, fp
 802b55e:	4293      	cmp	r3, r2
 802b560:	d021      	beq.n	802b5a6 <_dtoa_r+0xa9e>
 802b562:	2300      	movs	r3, #0
 802b564:	220a      	movs	r2, #10
 802b566:	9904      	ldr	r1, [sp, #16]
 802b568:	4620      	mov	r0, r4
 802b56a:	f000 fb81 	bl	802bc70 <__multadd>
 802b56e:	45b1      	cmp	r9, r6
 802b570:	9004      	str	r0, [sp, #16]
 802b572:	f04f 0300 	mov.w	r3, #0
 802b576:	f04f 020a 	mov.w	r2, #10
 802b57a:	4649      	mov	r1, r9
 802b57c:	4620      	mov	r0, r4
 802b57e:	d105      	bne.n	802b58c <_dtoa_r+0xa84>
 802b580:	f000 fb76 	bl	802bc70 <__multadd>
 802b584:	4681      	mov	r9, r0
 802b586:	4606      	mov	r6, r0
 802b588:	9505      	str	r5, [sp, #20]
 802b58a:	e776      	b.n	802b47a <_dtoa_r+0x972>
 802b58c:	f000 fb70 	bl	802bc70 <__multadd>
 802b590:	4631      	mov	r1, r6
 802b592:	4681      	mov	r9, r0
 802b594:	2300      	movs	r3, #0
 802b596:	220a      	movs	r2, #10
 802b598:	4620      	mov	r0, r4
 802b59a:	f000 fb69 	bl	802bc70 <__multadd>
 802b59e:	4606      	mov	r6, r0
 802b5a0:	e7f2      	b.n	802b588 <_dtoa_r+0xa80>
 802b5a2:	f04f 0900 	mov.w	r9, #0
 802b5a6:	2201      	movs	r2, #1
 802b5a8:	9904      	ldr	r1, [sp, #16]
 802b5aa:	4620      	mov	r0, r4
 802b5ac:	f000 fcc8 	bl	802bf40 <__lshift>
 802b5b0:	4639      	mov	r1, r7
 802b5b2:	9004      	str	r0, [sp, #16]
 802b5b4:	f000 fd18 	bl	802bfe8 <__mcmp>
 802b5b8:	2800      	cmp	r0, #0
 802b5ba:	dcb6      	bgt.n	802b52a <_dtoa_r+0xa22>
 802b5bc:	d102      	bne.n	802b5c4 <_dtoa_r+0xabc>
 802b5be:	f018 0f01 	tst.w	r8, #1
 802b5c2:	d1b2      	bne.n	802b52a <_dtoa_r+0xa22>
 802b5c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b5c8:	2b30      	cmp	r3, #48	; 0x30
 802b5ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802b5ce:	f47f af0a 	bne.w	802b3e6 <_dtoa_r+0x8de>
 802b5d2:	4615      	mov	r5, r2
 802b5d4:	e7f6      	b.n	802b5c4 <_dtoa_r+0xabc>
 802b5d6:	4593      	cmp	fp, r2
 802b5d8:	d105      	bne.n	802b5e6 <_dtoa_r+0xade>
 802b5da:	2331      	movs	r3, #49	; 0x31
 802b5dc:	f10a 0a01 	add.w	sl, sl, #1
 802b5e0:	f88b 3000 	strb.w	r3, [fp]
 802b5e4:	e6ff      	b.n	802b3e6 <_dtoa_r+0x8de>
 802b5e6:	4615      	mov	r5, r2
 802b5e8:	e79f      	b.n	802b52a <_dtoa_r+0xa22>
 802b5ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 802b650 <_dtoa_r+0xb48>
 802b5ee:	f7ff bac5 	b.w	802ab7c <_dtoa_r+0x74>
 802b5f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b5f4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 802b654 <_dtoa_r+0xb4c>
 802b5f8:	2b00      	cmp	r3, #0
 802b5fa:	f43f aabf 	beq.w	802ab7c <_dtoa_r+0x74>
 802b5fe:	f10b 0308 	add.w	r3, fp, #8
 802b602:	f7ff bab9 	b.w	802ab78 <_dtoa_r+0x70>
 802b606:	9b06      	ldr	r3, [sp, #24]
 802b608:	2b01      	cmp	r3, #1
 802b60a:	f77f ae36 	ble.w	802b27a <_dtoa_r+0x772>
 802b60e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b610:	9307      	str	r3, [sp, #28]
 802b612:	e64a      	b.n	802b2aa <_dtoa_r+0x7a2>
 802b614:	9b02      	ldr	r3, [sp, #8]
 802b616:	2b00      	cmp	r3, #0
 802b618:	dc03      	bgt.n	802b622 <_dtoa_r+0xb1a>
 802b61a:	9b06      	ldr	r3, [sp, #24]
 802b61c:	2b02      	cmp	r3, #2
 802b61e:	f73f aecd 	bgt.w	802b3bc <_dtoa_r+0x8b4>
 802b622:	465d      	mov	r5, fp
 802b624:	4639      	mov	r1, r7
 802b626:	9804      	ldr	r0, [sp, #16]
 802b628:	f7ff f9e0 	bl	802a9ec <quorem>
 802b62c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802b630:	f805 8b01 	strb.w	r8, [r5], #1
 802b634:	9a02      	ldr	r2, [sp, #8]
 802b636:	eba5 030b 	sub.w	r3, r5, fp
 802b63a:	429a      	cmp	r2, r3
 802b63c:	ddb1      	ble.n	802b5a2 <_dtoa_r+0xa9a>
 802b63e:	2300      	movs	r3, #0
 802b640:	220a      	movs	r2, #10
 802b642:	9904      	ldr	r1, [sp, #16]
 802b644:	4620      	mov	r0, r4
 802b646:	f000 fb13 	bl	802bc70 <__multadd>
 802b64a:	9004      	str	r0, [sp, #16]
 802b64c:	e7ea      	b.n	802b624 <_dtoa_r+0xb1c>
 802b64e:	bf00      	nop
 802b650:	080b427e 	.word	0x080b427e
 802b654:	080b42a0 	.word	0x080b42a0

0802b658 <__sflush_r>:
 802b658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b65c:	b293      	uxth	r3, r2
 802b65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b662:	4605      	mov	r5, r0
 802b664:	0718      	lsls	r0, r3, #28
 802b666:	460c      	mov	r4, r1
 802b668:	d45f      	bmi.n	802b72a <__sflush_r+0xd2>
 802b66a:	684b      	ldr	r3, [r1, #4]
 802b66c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802b670:	2b00      	cmp	r3, #0
 802b672:	818a      	strh	r2, [r1, #12]
 802b674:	dc05      	bgt.n	802b682 <__sflush_r+0x2a>
 802b676:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 802b678:	2b00      	cmp	r3, #0
 802b67a:	dc02      	bgt.n	802b682 <__sflush_r+0x2a>
 802b67c:	2000      	movs	r0, #0
 802b67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b684:	2e00      	cmp	r6, #0
 802b686:	d0f9      	beq.n	802b67c <__sflush_r+0x24>
 802b688:	2300      	movs	r3, #0
 802b68a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b68e:	682f      	ldr	r7, [r5, #0]
 802b690:	69e1      	ldr	r1, [r4, #28]
 802b692:	602b      	str	r3, [r5, #0]
 802b694:	d036      	beq.n	802b704 <__sflush_r+0xac>
 802b696:	6d20      	ldr	r0, [r4, #80]	; 0x50
 802b698:	89a3      	ldrh	r3, [r4, #12]
 802b69a:	075a      	lsls	r2, r3, #29
 802b69c:	d505      	bpl.n	802b6aa <__sflush_r+0x52>
 802b69e:	6863      	ldr	r3, [r4, #4]
 802b6a0:	1ac0      	subs	r0, r0, r3
 802b6a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802b6a4:	b10b      	cbz	r3, 802b6aa <__sflush_r+0x52>
 802b6a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b6a8:	1ac0      	subs	r0, r0, r3
 802b6aa:	2300      	movs	r3, #0
 802b6ac:	4602      	mov	r2, r0
 802b6ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b6b0:	69e1      	ldr	r1, [r4, #28]
 802b6b2:	4628      	mov	r0, r5
 802b6b4:	47b0      	blx	r6
 802b6b6:	1c43      	adds	r3, r0, #1
 802b6b8:	89a3      	ldrh	r3, [r4, #12]
 802b6ba:	d106      	bne.n	802b6ca <__sflush_r+0x72>
 802b6bc:	6829      	ldr	r1, [r5, #0]
 802b6be:	291d      	cmp	r1, #29
 802b6c0:	d84c      	bhi.n	802b75c <__sflush_r+0x104>
 802b6c2:	4a2b      	ldr	r2, [pc, #172]	; (802b770 <__sflush_r+0x118>)
 802b6c4:	40ca      	lsrs	r2, r1
 802b6c6:	07d6      	lsls	r6, r2, #31
 802b6c8:	d548      	bpl.n	802b75c <__sflush_r+0x104>
 802b6ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802b6ce:	b21b      	sxth	r3, r3
 802b6d0:	2200      	movs	r2, #0
 802b6d2:	6062      	str	r2, [r4, #4]
 802b6d4:	04d9      	lsls	r1, r3, #19
 802b6d6:	6922      	ldr	r2, [r4, #16]
 802b6d8:	81a3      	strh	r3, [r4, #12]
 802b6da:	6022      	str	r2, [r4, #0]
 802b6dc:	d504      	bpl.n	802b6e8 <__sflush_r+0x90>
 802b6de:	1c42      	adds	r2, r0, #1
 802b6e0:	d101      	bne.n	802b6e6 <__sflush_r+0x8e>
 802b6e2:	682b      	ldr	r3, [r5, #0]
 802b6e4:	b903      	cbnz	r3, 802b6e8 <__sflush_r+0x90>
 802b6e6:	6520      	str	r0, [r4, #80]	; 0x50
 802b6e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802b6ea:	602f      	str	r7, [r5, #0]
 802b6ec:	2900      	cmp	r1, #0
 802b6ee:	d0c5      	beq.n	802b67c <__sflush_r+0x24>
 802b6f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802b6f4:	4299      	cmp	r1, r3
 802b6f6:	d002      	beq.n	802b6fe <__sflush_r+0xa6>
 802b6f8:	4628      	mov	r0, r5
 802b6fa:	f000 f937 	bl	802b96c <_free_r>
 802b6fe:	2000      	movs	r0, #0
 802b700:	6320      	str	r0, [r4, #48]	; 0x30
 802b702:	e7bc      	b.n	802b67e <__sflush_r+0x26>
 802b704:	2301      	movs	r3, #1
 802b706:	4628      	mov	r0, r5
 802b708:	47b0      	blx	r6
 802b70a:	1c41      	adds	r1, r0, #1
 802b70c:	d1c4      	bne.n	802b698 <__sflush_r+0x40>
 802b70e:	682b      	ldr	r3, [r5, #0]
 802b710:	2b00      	cmp	r3, #0
 802b712:	d0c1      	beq.n	802b698 <__sflush_r+0x40>
 802b714:	2b1d      	cmp	r3, #29
 802b716:	d001      	beq.n	802b71c <__sflush_r+0xc4>
 802b718:	2b16      	cmp	r3, #22
 802b71a:	d101      	bne.n	802b720 <__sflush_r+0xc8>
 802b71c:	602f      	str	r7, [r5, #0]
 802b71e:	e7ad      	b.n	802b67c <__sflush_r+0x24>
 802b720:	89a3      	ldrh	r3, [r4, #12]
 802b722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b726:	81a3      	strh	r3, [r4, #12]
 802b728:	e7a9      	b.n	802b67e <__sflush_r+0x26>
 802b72a:	690f      	ldr	r7, [r1, #16]
 802b72c:	2f00      	cmp	r7, #0
 802b72e:	d0a5      	beq.n	802b67c <__sflush_r+0x24>
 802b730:	079b      	lsls	r3, r3, #30
 802b732:	680e      	ldr	r6, [r1, #0]
 802b734:	bf08      	it	eq
 802b736:	694b      	ldreq	r3, [r1, #20]
 802b738:	600f      	str	r7, [r1, #0]
 802b73a:	bf18      	it	ne
 802b73c:	2300      	movne	r3, #0
 802b73e:	eba6 0807 	sub.w	r8, r6, r7
 802b742:	608b      	str	r3, [r1, #8]
 802b744:	f1b8 0f00 	cmp.w	r8, #0
 802b748:	dd98      	ble.n	802b67c <__sflush_r+0x24>
 802b74a:	4643      	mov	r3, r8
 802b74c:	463a      	mov	r2, r7
 802b74e:	69e1      	ldr	r1, [r4, #28]
 802b750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802b752:	4628      	mov	r0, r5
 802b754:	47b0      	blx	r6
 802b756:	2800      	cmp	r0, #0
 802b758:	dc06      	bgt.n	802b768 <__sflush_r+0x110>
 802b75a:	89a3      	ldrh	r3, [r4, #12]
 802b75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b760:	81a3      	strh	r3, [r4, #12]
 802b762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b766:	e78a      	b.n	802b67e <__sflush_r+0x26>
 802b768:	4407      	add	r7, r0
 802b76a:	eba8 0800 	sub.w	r8, r8, r0
 802b76e:	e7e9      	b.n	802b744 <__sflush_r+0xec>
 802b770:	20400001 	.word	0x20400001

0802b774 <_fflush_r>:
 802b774:	b538      	push	{r3, r4, r5, lr}
 802b776:	460c      	mov	r4, r1
 802b778:	4605      	mov	r5, r0
 802b77a:	b118      	cbz	r0, 802b784 <_fflush_r+0x10>
 802b77c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802b77e:	b90b      	cbnz	r3, 802b784 <_fflush_r+0x10>
 802b780:	f000 f864 	bl	802b84c <__sinit>
 802b784:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802b788:	b1b8      	cbz	r0, 802b7ba <_fflush_r+0x46>
 802b78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b78c:	07db      	lsls	r3, r3, #31
 802b78e:	d404      	bmi.n	802b79a <_fflush_r+0x26>
 802b790:	0581      	lsls	r1, r0, #22
 802b792:	d402      	bmi.n	802b79a <_fflush_r+0x26>
 802b794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b796:	f7fd f93f 	bl	8028a18 <__retarget_lock_acquire_recursive>
 802b79a:	4628      	mov	r0, r5
 802b79c:	4621      	mov	r1, r4
 802b79e:	f7ff ff5b 	bl	802b658 <__sflush_r>
 802b7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b7a4:	07da      	lsls	r2, r3, #31
 802b7a6:	4605      	mov	r5, r0
 802b7a8:	d405      	bmi.n	802b7b6 <_fflush_r+0x42>
 802b7aa:	89a3      	ldrh	r3, [r4, #12]
 802b7ac:	059b      	lsls	r3, r3, #22
 802b7ae:	d402      	bmi.n	802b7b6 <_fflush_r+0x42>
 802b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b7b2:	f7fd f932 	bl	8028a1a <__retarget_lock_release_recursive>
 802b7b6:	4628      	mov	r0, r5
 802b7b8:	bd38      	pop	{r3, r4, r5, pc}
 802b7ba:	4605      	mov	r5, r0
 802b7bc:	e7fb      	b.n	802b7b6 <_fflush_r+0x42>
	...

0802b7c0 <std>:
 802b7c0:	2300      	movs	r3, #0
 802b7c2:	b510      	push	{r4, lr}
 802b7c4:	4604      	mov	r4, r0
 802b7c6:	e9c0 3300 	strd	r3, r3, [r0]
 802b7ca:	6083      	str	r3, [r0, #8]
 802b7cc:	8181      	strh	r1, [r0, #12]
 802b7ce:	6643      	str	r3, [r0, #100]	; 0x64
 802b7d0:	81c2      	strh	r2, [r0, #14]
 802b7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b7d6:	6183      	str	r3, [r0, #24]
 802b7d8:	4619      	mov	r1, r3
 802b7da:	2208      	movs	r2, #8
 802b7dc:	305c      	adds	r0, #92	; 0x5c
 802b7de:	f7fd fb96 	bl	8028f0e <memset>
 802b7e2:	4b07      	ldr	r3, [pc, #28]	; (802b800 <std+0x40>)
 802b7e4:	6223      	str	r3, [r4, #32]
 802b7e6:	4b07      	ldr	r3, [pc, #28]	; (802b804 <std+0x44>)
 802b7e8:	6263      	str	r3, [r4, #36]	; 0x24
 802b7ea:	4b07      	ldr	r3, [pc, #28]	; (802b808 <std+0x48>)
 802b7ec:	62a3      	str	r3, [r4, #40]	; 0x28
 802b7ee:	4b07      	ldr	r3, [pc, #28]	; (802b80c <std+0x4c>)
 802b7f0:	61e4      	str	r4, [r4, #28]
 802b7f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b7f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b7fc:	f7fd b90a 	b.w	8028a14 <__retarget_lock_init_recursive>
 802b800:	0802c1e1 	.word	0x0802c1e1
 802b804:	0802c203 	.word	0x0802c203
 802b808:	0802c23b 	.word	0x0802c23b
 802b80c:	0802c25f 	.word	0x0802c25f

0802b810 <_cleanup_r>:
 802b810:	4901      	ldr	r1, [pc, #4]	; (802b818 <_cleanup_r+0x8>)
 802b812:	f000 b967 	b.w	802bae4 <_fwalk_reent>
 802b816:	bf00      	nop
 802b818:	0802c4a9 	.word	0x0802c4a9

0802b81c <__sfp_lock_acquire>:
 802b81c:	4801      	ldr	r0, [pc, #4]	; (802b824 <__sfp_lock_acquire+0x8>)
 802b81e:	f7fd b8fb 	b.w	8028a18 <__retarget_lock_acquire_recursive>
 802b822:	bf00      	nop
 802b824:	2003cfec 	.word	0x2003cfec

0802b828 <__sfp_lock_release>:
 802b828:	4801      	ldr	r0, [pc, #4]	; (802b830 <__sfp_lock_release+0x8>)
 802b82a:	f7fd b8f6 	b.w	8028a1a <__retarget_lock_release_recursive>
 802b82e:	bf00      	nop
 802b830:	2003cfec 	.word	0x2003cfec

0802b834 <__sinit_lock_acquire>:
 802b834:	4801      	ldr	r0, [pc, #4]	; (802b83c <__sinit_lock_acquire+0x8>)
 802b836:	f7fd b8ef 	b.w	8028a18 <__retarget_lock_acquire_recursive>
 802b83a:	bf00      	nop
 802b83c:	2003cfe7 	.word	0x2003cfe7

0802b840 <__sinit_lock_release>:
 802b840:	4801      	ldr	r0, [pc, #4]	; (802b848 <__sinit_lock_release+0x8>)
 802b842:	f7fd b8ea 	b.w	8028a1a <__retarget_lock_release_recursive>
 802b846:	bf00      	nop
 802b848:	2003cfe7 	.word	0x2003cfe7

0802b84c <__sinit>:
 802b84c:	b510      	push	{r4, lr}
 802b84e:	4604      	mov	r4, r0
 802b850:	f7ff fff0 	bl	802b834 <__sinit_lock_acquire>
 802b854:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802b856:	b11a      	cbz	r2, 802b860 <__sinit+0x14>
 802b858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b85c:	f7ff bff0 	b.w	802b840 <__sinit_lock_release>
 802b860:	4b0d      	ldr	r3, [pc, #52]	; (802b898 <__sinit+0x4c>)
 802b862:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b864:	2303      	movs	r3, #3
 802b866:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 802b86a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 802b86e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 802b872:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 802b876:	2104      	movs	r1, #4
 802b878:	6860      	ldr	r0, [r4, #4]
 802b87a:	f7ff ffa1 	bl	802b7c0 <std>
 802b87e:	2201      	movs	r2, #1
 802b880:	2109      	movs	r1, #9
 802b882:	68a0      	ldr	r0, [r4, #8]
 802b884:	f7ff ff9c 	bl	802b7c0 <std>
 802b888:	2202      	movs	r2, #2
 802b88a:	2112      	movs	r1, #18
 802b88c:	68e0      	ldr	r0, [r4, #12]
 802b88e:	f7ff ff97 	bl	802b7c0 <std>
 802b892:	2301      	movs	r3, #1
 802b894:	63a3      	str	r3, [r4, #56]	; 0x38
 802b896:	e7df      	b.n	802b858 <__sinit+0xc>
 802b898:	0802b811 	.word	0x0802b811

0802b89c <__libc_fini_array>:
 802b89c:	b538      	push	{r3, r4, r5, lr}
 802b89e:	4d07      	ldr	r5, [pc, #28]	; (802b8bc <__libc_fini_array+0x20>)
 802b8a0:	4c07      	ldr	r4, [pc, #28]	; (802b8c0 <__libc_fini_array+0x24>)
 802b8a2:	1b64      	subs	r4, r4, r5
 802b8a4:	10a4      	asrs	r4, r4, #2
 802b8a6:	b91c      	cbnz	r4, 802b8b0 <__libc_fini_array+0x14>
 802b8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b8ac:	f000 bede 	b.w	802c66c <_fini>
 802b8b0:	3c01      	subs	r4, #1
 802b8b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802b8b6:	4798      	blx	r3
 802b8b8:	e7f5      	b.n	802b8a6 <__libc_fini_array+0xa>
 802b8ba:	bf00      	nop
 802b8bc:	080b4744 	.word	0x080b4744
 802b8c0:	080b474c 	.word	0x080b474c

0802b8c4 <_malloc_trim_r>:
 802b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b8c8:	4605      	mov	r5, r0
 802b8ca:	2008      	movs	r0, #8
 802b8cc:	460c      	mov	r4, r1
 802b8ce:	f7fe ffbd 	bl	802a84c <sysconf>
 802b8d2:	4f23      	ldr	r7, [pc, #140]	; (802b960 <_malloc_trim_r+0x9c>)
 802b8d4:	4680      	mov	r8, r0
 802b8d6:	4628      	mov	r0, r5
 802b8d8:	f7fd fb22 	bl	8028f20 <__malloc_lock>
 802b8dc:	68bb      	ldr	r3, [r7, #8]
 802b8de:	685e      	ldr	r6, [r3, #4]
 802b8e0:	f026 0603 	bic.w	r6, r6, #3
 802b8e4:	1b34      	subs	r4, r6, r4
 802b8e6:	3c11      	subs	r4, #17
 802b8e8:	4444      	add	r4, r8
 802b8ea:	fbb4 f4f8 	udiv	r4, r4, r8
 802b8ee:	3c01      	subs	r4, #1
 802b8f0:	fb08 f404 	mul.w	r4, r8, r4
 802b8f4:	45a0      	cmp	r8, r4
 802b8f6:	dd05      	ble.n	802b904 <_malloc_trim_r+0x40>
 802b8f8:	4628      	mov	r0, r5
 802b8fa:	f7fd fb17 	bl	8028f2c <__malloc_unlock>
 802b8fe:	2000      	movs	r0, #0
 802b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b904:	2100      	movs	r1, #0
 802b906:	4628      	mov	r0, r5
 802b908:	f7fd fcfa 	bl	8029300 <_sbrk_r>
 802b90c:	68bb      	ldr	r3, [r7, #8]
 802b90e:	4433      	add	r3, r6
 802b910:	4298      	cmp	r0, r3
 802b912:	d1f1      	bne.n	802b8f8 <_malloc_trim_r+0x34>
 802b914:	4261      	negs	r1, r4
 802b916:	4628      	mov	r0, r5
 802b918:	f7fd fcf2 	bl	8029300 <_sbrk_r>
 802b91c:	3001      	adds	r0, #1
 802b91e:	d110      	bne.n	802b942 <_malloc_trim_r+0x7e>
 802b920:	2100      	movs	r1, #0
 802b922:	4628      	mov	r0, r5
 802b924:	f7fd fcec 	bl	8029300 <_sbrk_r>
 802b928:	68ba      	ldr	r2, [r7, #8]
 802b92a:	1a83      	subs	r3, r0, r2
 802b92c:	2b0f      	cmp	r3, #15
 802b92e:	dde3      	ble.n	802b8f8 <_malloc_trim_r+0x34>
 802b930:	490c      	ldr	r1, [pc, #48]	; (802b964 <_malloc_trim_r+0xa0>)
 802b932:	6809      	ldr	r1, [r1, #0]
 802b934:	1a40      	subs	r0, r0, r1
 802b936:	490c      	ldr	r1, [pc, #48]	; (802b968 <_malloc_trim_r+0xa4>)
 802b938:	f043 0301 	orr.w	r3, r3, #1
 802b93c:	6008      	str	r0, [r1, #0]
 802b93e:	6053      	str	r3, [r2, #4]
 802b940:	e7da      	b.n	802b8f8 <_malloc_trim_r+0x34>
 802b942:	68bb      	ldr	r3, [r7, #8]
 802b944:	4a08      	ldr	r2, [pc, #32]	; (802b968 <_malloc_trim_r+0xa4>)
 802b946:	1b36      	subs	r6, r6, r4
 802b948:	f046 0601 	orr.w	r6, r6, #1
 802b94c:	605e      	str	r6, [r3, #4]
 802b94e:	6813      	ldr	r3, [r2, #0]
 802b950:	4628      	mov	r0, r5
 802b952:	1b1c      	subs	r4, r3, r4
 802b954:	6014      	str	r4, [r2, #0]
 802b956:	f7fd fae9 	bl	8028f2c <__malloc_unlock>
 802b95a:	2001      	movs	r0, #1
 802b95c:	e7d0      	b.n	802b900 <_malloc_trim_r+0x3c>
 802b95e:	bf00      	nop
 802b960:	20008860 	.word	0x20008860
 802b964:	20008c68 	.word	0x20008c68
 802b968:	2003cf4c 	.word	0x2003cf4c

0802b96c <_free_r>:
 802b96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b970:	4604      	mov	r4, r0
 802b972:	4688      	mov	r8, r1
 802b974:	2900      	cmp	r1, #0
 802b976:	f000 80ab 	beq.w	802bad0 <_free_r+0x164>
 802b97a:	f7fd fad1 	bl	8028f20 <__malloc_lock>
 802b97e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 802b982:	4d54      	ldr	r5, [pc, #336]	; (802bad4 <_free_r+0x168>)
 802b984:	f022 0001 	bic.w	r0, r2, #1
 802b988:	f1a8 0308 	sub.w	r3, r8, #8
 802b98c:	181f      	adds	r7, r3, r0
 802b98e:	68a9      	ldr	r1, [r5, #8]
 802b990:	687e      	ldr	r6, [r7, #4]
 802b992:	42b9      	cmp	r1, r7
 802b994:	f026 0603 	bic.w	r6, r6, #3
 802b998:	f002 0201 	and.w	r2, r2, #1
 802b99c:	d11b      	bne.n	802b9d6 <_free_r+0x6a>
 802b99e:	4430      	add	r0, r6
 802b9a0:	b93a      	cbnz	r2, 802b9b2 <_free_r+0x46>
 802b9a2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 802b9a6:	1a9b      	subs	r3, r3, r2
 802b9a8:	4410      	add	r0, r2
 802b9aa:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802b9ae:	60ca      	str	r2, [r1, #12]
 802b9b0:	6091      	str	r1, [r2, #8]
 802b9b2:	f040 0201 	orr.w	r2, r0, #1
 802b9b6:	605a      	str	r2, [r3, #4]
 802b9b8:	60ab      	str	r3, [r5, #8]
 802b9ba:	4b47      	ldr	r3, [pc, #284]	; (802bad8 <_free_r+0x16c>)
 802b9bc:	681b      	ldr	r3, [r3, #0]
 802b9be:	4283      	cmp	r3, r0
 802b9c0:	d804      	bhi.n	802b9cc <_free_r+0x60>
 802b9c2:	4b46      	ldr	r3, [pc, #280]	; (802badc <_free_r+0x170>)
 802b9c4:	4620      	mov	r0, r4
 802b9c6:	6819      	ldr	r1, [r3, #0]
 802b9c8:	f7ff ff7c 	bl	802b8c4 <_malloc_trim_r>
 802b9cc:	4620      	mov	r0, r4
 802b9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b9d2:	f7fd baab 	b.w	8028f2c <__malloc_unlock>
 802b9d6:	607e      	str	r6, [r7, #4]
 802b9d8:	2a00      	cmp	r2, #0
 802b9da:	d139      	bne.n	802ba50 <_free_r+0xe4>
 802b9dc:	f858 1c08 	ldr.w	r1, [r8, #-8]
 802b9e0:	1a5b      	subs	r3, r3, r1
 802b9e2:	4408      	add	r0, r1
 802b9e4:	6899      	ldr	r1, [r3, #8]
 802b9e6:	f105 0c08 	add.w	ip, r5, #8
 802b9ea:	4561      	cmp	r1, ip
 802b9ec:	d032      	beq.n	802ba54 <_free_r+0xe8>
 802b9ee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 802b9f2:	f8c1 c00c 	str.w	ip, [r1, #12]
 802b9f6:	f8cc 1008 	str.w	r1, [ip, #8]
 802b9fa:	19b9      	adds	r1, r7, r6
 802b9fc:	6849      	ldr	r1, [r1, #4]
 802b9fe:	07c9      	lsls	r1, r1, #31
 802ba00:	d40a      	bmi.n	802ba18 <_free_r+0xac>
 802ba02:	4430      	add	r0, r6
 802ba04:	68b9      	ldr	r1, [r7, #8]
 802ba06:	bb3a      	cbnz	r2, 802ba58 <_free_r+0xec>
 802ba08:	4e35      	ldr	r6, [pc, #212]	; (802bae0 <_free_r+0x174>)
 802ba0a:	42b1      	cmp	r1, r6
 802ba0c:	d124      	bne.n	802ba58 <_free_r+0xec>
 802ba0e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802ba12:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802ba16:	2201      	movs	r2, #1
 802ba18:	f040 0101 	orr.w	r1, r0, #1
 802ba1c:	6059      	str	r1, [r3, #4]
 802ba1e:	5018      	str	r0, [r3, r0]
 802ba20:	2a00      	cmp	r2, #0
 802ba22:	d1d3      	bne.n	802b9cc <_free_r+0x60>
 802ba24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802ba28:	d21a      	bcs.n	802ba60 <_free_r+0xf4>
 802ba2a:	08c0      	lsrs	r0, r0, #3
 802ba2c:	1081      	asrs	r1, r0, #2
 802ba2e:	2201      	movs	r2, #1
 802ba30:	408a      	lsls	r2, r1
 802ba32:	6869      	ldr	r1, [r5, #4]
 802ba34:	3001      	adds	r0, #1
 802ba36:	430a      	orrs	r2, r1
 802ba38:	606a      	str	r2, [r5, #4]
 802ba3a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 802ba3e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 802ba42:	3a08      	subs	r2, #8
 802ba44:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802ba48:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 802ba4c:	60cb      	str	r3, [r1, #12]
 802ba4e:	e7bd      	b.n	802b9cc <_free_r+0x60>
 802ba50:	2200      	movs	r2, #0
 802ba52:	e7d2      	b.n	802b9fa <_free_r+0x8e>
 802ba54:	2201      	movs	r2, #1
 802ba56:	e7d0      	b.n	802b9fa <_free_r+0x8e>
 802ba58:	68fe      	ldr	r6, [r7, #12]
 802ba5a:	60ce      	str	r6, [r1, #12]
 802ba5c:	60b1      	str	r1, [r6, #8]
 802ba5e:	e7db      	b.n	802ba18 <_free_r+0xac>
 802ba60:	0a42      	lsrs	r2, r0, #9
 802ba62:	2a04      	cmp	r2, #4
 802ba64:	d813      	bhi.n	802ba8e <_free_r+0x122>
 802ba66:	0982      	lsrs	r2, r0, #6
 802ba68:	3238      	adds	r2, #56	; 0x38
 802ba6a:	1c51      	adds	r1, r2, #1
 802ba6c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802ba70:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802ba74:	428e      	cmp	r6, r1
 802ba76:	d124      	bne.n	802bac2 <_free_r+0x156>
 802ba78:	2001      	movs	r0, #1
 802ba7a:	1092      	asrs	r2, r2, #2
 802ba7c:	fa00 f202 	lsl.w	r2, r0, r2
 802ba80:	6868      	ldr	r0, [r5, #4]
 802ba82:	4302      	orrs	r2, r0
 802ba84:	606a      	str	r2, [r5, #4]
 802ba86:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802ba8a:	60b3      	str	r3, [r6, #8]
 802ba8c:	e7de      	b.n	802ba4c <_free_r+0xe0>
 802ba8e:	2a14      	cmp	r2, #20
 802ba90:	d801      	bhi.n	802ba96 <_free_r+0x12a>
 802ba92:	325b      	adds	r2, #91	; 0x5b
 802ba94:	e7e9      	b.n	802ba6a <_free_r+0xfe>
 802ba96:	2a54      	cmp	r2, #84	; 0x54
 802ba98:	d802      	bhi.n	802baa0 <_free_r+0x134>
 802ba9a:	0b02      	lsrs	r2, r0, #12
 802ba9c:	326e      	adds	r2, #110	; 0x6e
 802ba9e:	e7e4      	b.n	802ba6a <_free_r+0xfe>
 802baa0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802baa4:	d802      	bhi.n	802baac <_free_r+0x140>
 802baa6:	0bc2      	lsrs	r2, r0, #15
 802baa8:	3277      	adds	r2, #119	; 0x77
 802baaa:	e7de      	b.n	802ba6a <_free_r+0xfe>
 802baac:	f240 5154 	movw	r1, #1364	; 0x554
 802bab0:	428a      	cmp	r2, r1
 802bab2:	bf9a      	itte	ls
 802bab4:	0c82      	lsrls	r2, r0, #18
 802bab6:	327c      	addls	r2, #124	; 0x7c
 802bab8:	227e      	movhi	r2, #126	; 0x7e
 802baba:	e7d6      	b.n	802ba6a <_free_r+0xfe>
 802babc:	6889      	ldr	r1, [r1, #8]
 802babe:	428e      	cmp	r6, r1
 802bac0:	d004      	beq.n	802bacc <_free_r+0x160>
 802bac2:	684a      	ldr	r2, [r1, #4]
 802bac4:	f022 0203 	bic.w	r2, r2, #3
 802bac8:	4282      	cmp	r2, r0
 802baca:	d8f7      	bhi.n	802babc <_free_r+0x150>
 802bacc:	68ce      	ldr	r6, [r1, #12]
 802bace:	e7da      	b.n	802ba86 <_free_r+0x11a>
 802bad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bad4:	20008860 	.word	0x20008860
 802bad8:	20008c6c 	.word	0x20008c6c
 802badc:	2003cf7c 	.word	0x2003cf7c
 802bae0:	20008868 	.word	0x20008868

0802bae4 <_fwalk_reent>:
 802bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bae8:	4680      	mov	r8, r0
 802baea:	4689      	mov	r9, r1
 802baec:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 802baf0:	2600      	movs	r6, #0
 802baf2:	b914      	cbnz	r4, 802bafa <_fwalk_reent+0x16>
 802baf4:	4630      	mov	r0, r6
 802baf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bafa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802bafe:	3f01      	subs	r7, #1
 802bb00:	d501      	bpl.n	802bb06 <_fwalk_reent+0x22>
 802bb02:	6824      	ldr	r4, [r4, #0]
 802bb04:	e7f5      	b.n	802baf2 <_fwalk_reent+0xe>
 802bb06:	89ab      	ldrh	r3, [r5, #12]
 802bb08:	2b01      	cmp	r3, #1
 802bb0a:	d907      	bls.n	802bb1c <_fwalk_reent+0x38>
 802bb0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bb10:	3301      	adds	r3, #1
 802bb12:	d003      	beq.n	802bb1c <_fwalk_reent+0x38>
 802bb14:	4629      	mov	r1, r5
 802bb16:	4640      	mov	r0, r8
 802bb18:	47c8      	blx	r9
 802bb1a:	4306      	orrs	r6, r0
 802bb1c:	3568      	adds	r5, #104	; 0x68
 802bb1e:	e7ee      	b.n	802bafe <_fwalk_reent+0x1a>

0802bb20 <_localeconv_r>:
 802bb20:	4b04      	ldr	r3, [pc, #16]	; (802bb34 <_localeconv_r+0x14>)
 802bb22:	681b      	ldr	r3, [r3, #0]
 802bb24:	6b58      	ldr	r0, [r3, #52]	; 0x34
 802bb26:	4b04      	ldr	r3, [pc, #16]	; (802bb38 <_localeconv_r+0x18>)
 802bb28:	2800      	cmp	r0, #0
 802bb2a:	bf08      	it	eq
 802bb2c:	4618      	moveq	r0, r3
 802bb2e:	30f0      	adds	r0, #240	; 0xf0
 802bb30:	4770      	bx	lr
 802bb32:	bf00      	nop
 802bb34:	20008430 	.word	0x20008430
 802bb38:	20008c74 	.word	0x20008c74

0802bb3c <__swhatbuf_r>:
 802bb3c:	b570      	push	{r4, r5, r6, lr}
 802bb3e:	460e      	mov	r6, r1
 802bb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bb44:	2900      	cmp	r1, #0
 802bb46:	b096      	sub	sp, #88	; 0x58
 802bb48:	4614      	mov	r4, r2
 802bb4a:	461d      	mov	r5, r3
 802bb4c:	da09      	bge.n	802bb62 <__swhatbuf_r+0x26>
 802bb4e:	89b3      	ldrh	r3, [r6, #12]
 802bb50:	2200      	movs	r2, #0
 802bb52:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802bb56:	602a      	str	r2, [r5, #0]
 802bb58:	d116      	bne.n	802bb88 <__swhatbuf_r+0x4c>
 802bb5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb5e:	6023      	str	r3, [r4, #0]
 802bb60:	e015      	b.n	802bb8e <__swhatbuf_r+0x52>
 802bb62:	466a      	mov	r2, sp
 802bb64:	f000 fcf8 	bl	802c558 <_fstat_r>
 802bb68:	2800      	cmp	r0, #0
 802bb6a:	dbf0      	blt.n	802bb4e <__swhatbuf_r+0x12>
 802bb6c:	9a01      	ldr	r2, [sp, #4]
 802bb6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bb72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802bb76:	425a      	negs	r2, r3
 802bb78:	415a      	adcs	r2, r3
 802bb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb7e:	602a      	str	r2, [r5, #0]
 802bb80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802bb84:	6023      	str	r3, [r4, #0]
 802bb86:	e002      	b.n	802bb8e <__swhatbuf_r+0x52>
 802bb88:	2340      	movs	r3, #64	; 0x40
 802bb8a:	6023      	str	r3, [r4, #0]
 802bb8c:	4610      	mov	r0, r2
 802bb8e:	b016      	add	sp, #88	; 0x58
 802bb90:	bd70      	pop	{r4, r5, r6, pc}
	...

0802bb94 <__smakebuf_r>:
 802bb94:	898b      	ldrh	r3, [r1, #12]
 802bb96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bb98:	079d      	lsls	r5, r3, #30
 802bb9a:	4606      	mov	r6, r0
 802bb9c:	460c      	mov	r4, r1
 802bb9e:	d507      	bpl.n	802bbb0 <__smakebuf_r+0x1c>
 802bba0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 802bba4:	6023      	str	r3, [r4, #0]
 802bba6:	6123      	str	r3, [r4, #16]
 802bba8:	2301      	movs	r3, #1
 802bbaa:	6163      	str	r3, [r4, #20]
 802bbac:	b002      	add	sp, #8
 802bbae:	bd70      	pop	{r4, r5, r6, pc}
 802bbb0:	ab01      	add	r3, sp, #4
 802bbb2:	466a      	mov	r2, sp
 802bbb4:	f7ff ffc2 	bl	802bb3c <__swhatbuf_r>
 802bbb8:	9900      	ldr	r1, [sp, #0]
 802bbba:	4605      	mov	r5, r0
 802bbbc:	4630      	mov	r0, r6
 802bbbe:	f7fc ff3d 	bl	8028a3c <_malloc_r>
 802bbc2:	b948      	cbnz	r0, 802bbd8 <__smakebuf_r+0x44>
 802bbc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bbc8:	059a      	lsls	r2, r3, #22
 802bbca:	d4ef      	bmi.n	802bbac <__smakebuf_r+0x18>
 802bbcc:	f023 0303 	bic.w	r3, r3, #3
 802bbd0:	f043 0302 	orr.w	r3, r3, #2
 802bbd4:	81a3      	strh	r3, [r4, #12]
 802bbd6:	e7e3      	b.n	802bba0 <__smakebuf_r+0xc>
 802bbd8:	4b0d      	ldr	r3, [pc, #52]	; (802bc10 <__smakebuf_r+0x7c>)
 802bbda:	63f3      	str	r3, [r6, #60]	; 0x3c
 802bbdc:	89a3      	ldrh	r3, [r4, #12]
 802bbde:	6020      	str	r0, [r4, #0]
 802bbe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bbe4:	81a3      	strh	r3, [r4, #12]
 802bbe6:	9b00      	ldr	r3, [sp, #0]
 802bbe8:	6163      	str	r3, [r4, #20]
 802bbea:	9b01      	ldr	r3, [sp, #4]
 802bbec:	6120      	str	r0, [r4, #16]
 802bbee:	b15b      	cbz	r3, 802bc08 <__smakebuf_r+0x74>
 802bbf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bbf4:	4630      	mov	r0, r6
 802bbf6:	f000 fcc1 	bl	802c57c <_isatty_r>
 802bbfa:	b128      	cbz	r0, 802bc08 <__smakebuf_r+0x74>
 802bbfc:	89a3      	ldrh	r3, [r4, #12]
 802bbfe:	f023 0303 	bic.w	r3, r3, #3
 802bc02:	f043 0301 	orr.w	r3, r3, #1
 802bc06:	81a3      	strh	r3, [r4, #12]
 802bc08:	89a3      	ldrh	r3, [r4, #12]
 802bc0a:	431d      	orrs	r5, r3
 802bc0c:	81a5      	strh	r5, [r4, #12]
 802bc0e:	e7cd      	b.n	802bbac <__smakebuf_r+0x18>
 802bc10:	0802b811 	.word	0x0802b811

0802bc14 <_Balloc>:
 802bc14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802bc16:	b570      	push	{r4, r5, r6, lr}
 802bc18:	4605      	mov	r5, r0
 802bc1a:	460c      	mov	r4, r1
 802bc1c:	b17b      	cbz	r3, 802bc3e <_Balloc+0x2a>
 802bc1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802bc20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802bc24:	b9a0      	cbnz	r0, 802bc50 <_Balloc+0x3c>
 802bc26:	2101      	movs	r1, #1
 802bc28:	fa01 f604 	lsl.w	r6, r1, r4
 802bc2c:	1d72      	adds	r2, r6, #5
 802bc2e:	0092      	lsls	r2, r2, #2
 802bc30:	4628      	mov	r0, r5
 802bc32:	f000 fbfb 	bl	802c42c <_calloc_r>
 802bc36:	b148      	cbz	r0, 802bc4c <_Balloc+0x38>
 802bc38:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802bc3c:	e00b      	b.n	802bc56 <_Balloc+0x42>
 802bc3e:	2221      	movs	r2, #33	; 0x21
 802bc40:	2104      	movs	r1, #4
 802bc42:	f000 fbf3 	bl	802c42c <_calloc_r>
 802bc46:	64e8      	str	r0, [r5, #76]	; 0x4c
 802bc48:	2800      	cmp	r0, #0
 802bc4a:	d1e8      	bne.n	802bc1e <_Balloc+0xa>
 802bc4c:	2000      	movs	r0, #0
 802bc4e:	bd70      	pop	{r4, r5, r6, pc}
 802bc50:	6802      	ldr	r2, [r0, #0]
 802bc52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802bc56:	2300      	movs	r3, #0
 802bc58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802bc5c:	e7f7      	b.n	802bc4e <_Balloc+0x3a>

0802bc5e <_Bfree>:
 802bc5e:	b131      	cbz	r1, 802bc6e <_Bfree+0x10>
 802bc60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802bc62:	684a      	ldr	r2, [r1, #4]
 802bc64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802bc68:	6008      	str	r0, [r1, #0]
 802bc6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802bc6e:	4770      	bx	lr

0802bc70 <__multadd>:
 802bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc74:	690d      	ldr	r5, [r1, #16]
 802bc76:	461f      	mov	r7, r3
 802bc78:	4606      	mov	r6, r0
 802bc7a:	460c      	mov	r4, r1
 802bc7c:	f101 0c14 	add.w	ip, r1, #20
 802bc80:	2300      	movs	r3, #0
 802bc82:	f8dc 0000 	ldr.w	r0, [ip]
 802bc86:	b281      	uxth	r1, r0
 802bc88:	fb02 7101 	mla	r1, r2, r1, r7
 802bc8c:	0c0f      	lsrs	r7, r1, #16
 802bc8e:	0c00      	lsrs	r0, r0, #16
 802bc90:	fb02 7000 	mla	r0, r2, r0, r7
 802bc94:	b289      	uxth	r1, r1
 802bc96:	3301      	adds	r3, #1
 802bc98:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802bc9c:	429d      	cmp	r5, r3
 802bc9e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802bca2:	f84c 1b04 	str.w	r1, [ip], #4
 802bca6:	dcec      	bgt.n	802bc82 <__multadd+0x12>
 802bca8:	b1d7      	cbz	r7, 802bce0 <__multadd+0x70>
 802bcaa:	68a3      	ldr	r3, [r4, #8]
 802bcac:	42ab      	cmp	r3, r5
 802bcae:	dc12      	bgt.n	802bcd6 <__multadd+0x66>
 802bcb0:	6861      	ldr	r1, [r4, #4]
 802bcb2:	4630      	mov	r0, r6
 802bcb4:	3101      	adds	r1, #1
 802bcb6:	f7ff ffad 	bl	802bc14 <_Balloc>
 802bcba:	6922      	ldr	r2, [r4, #16]
 802bcbc:	3202      	adds	r2, #2
 802bcbe:	f104 010c 	add.w	r1, r4, #12
 802bcc2:	4680      	mov	r8, r0
 802bcc4:	0092      	lsls	r2, r2, #2
 802bcc6:	300c      	adds	r0, #12
 802bcc8:	f7fd f8fd 	bl	8028ec6 <memcpy>
 802bccc:	4621      	mov	r1, r4
 802bcce:	4630      	mov	r0, r6
 802bcd0:	f7ff ffc5 	bl	802bc5e <_Bfree>
 802bcd4:	4644      	mov	r4, r8
 802bcd6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802bcda:	3501      	adds	r5, #1
 802bcdc:	615f      	str	r7, [r3, #20]
 802bcde:	6125      	str	r5, [r4, #16]
 802bce0:	4620      	mov	r0, r4
 802bce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802bce6 <__hi0bits>:
 802bce6:	0c02      	lsrs	r2, r0, #16
 802bce8:	0412      	lsls	r2, r2, #16
 802bcea:	4603      	mov	r3, r0
 802bcec:	b9b2      	cbnz	r2, 802bd1c <__hi0bits+0x36>
 802bcee:	0403      	lsls	r3, r0, #16
 802bcf0:	2010      	movs	r0, #16
 802bcf2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802bcf6:	bf04      	itt	eq
 802bcf8:	021b      	lsleq	r3, r3, #8
 802bcfa:	3008      	addeq	r0, #8
 802bcfc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802bd00:	bf04      	itt	eq
 802bd02:	011b      	lsleq	r3, r3, #4
 802bd04:	3004      	addeq	r0, #4
 802bd06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802bd0a:	bf04      	itt	eq
 802bd0c:	009b      	lsleq	r3, r3, #2
 802bd0e:	3002      	addeq	r0, #2
 802bd10:	2b00      	cmp	r3, #0
 802bd12:	db06      	blt.n	802bd22 <__hi0bits+0x3c>
 802bd14:	005b      	lsls	r3, r3, #1
 802bd16:	d503      	bpl.n	802bd20 <__hi0bits+0x3a>
 802bd18:	3001      	adds	r0, #1
 802bd1a:	4770      	bx	lr
 802bd1c:	2000      	movs	r0, #0
 802bd1e:	e7e8      	b.n	802bcf2 <__hi0bits+0xc>
 802bd20:	2020      	movs	r0, #32
 802bd22:	4770      	bx	lr

0802bd24 <__lo0bits>:
 802bd24:	6803      	ldr	r3, [r0, #0]
 802bd26:	f013 0207 	ands.w	r2, r3, #7
 802bd2a:	4601      	mov	r1, r0
 802bd2c:	d00b      	beq.n	802bd46 <__lo0bits+0x22>
 802bd2e:	07da      	lsls	r2, r3, #31
 802bd30:	d423      	bmi.n	802bd7a <__lo0bits+0x56>
 802bd32:	0798      	lsls	r0, r3, #30
 802bd34:	bf49      	itett	mi
 802bd36:	085b      	lsrmi	r3, r3, #1
 802bd38:	089b      	lsrpl	r3, r3, #2
 802bd3a:	2001      	movmi	r0, #1
 802bd3c:	600b      	strmi	r3, [r1, #0]
 802bd3e:	bf5c      	itt	pl
 802bd40:	600b      	strpl	r3, [r1, #0]
 802bd42:	2002      	movpl	r0, #2
 802bd44:	4770      	bx	lr
 802bd46:	b298      	uxth	r0, r3
 802bd48:	b9a8      	cbnz	r0, 802bd76 <__lo0bits+0x52>
 802bd4a:	0c1b      	lsrs	r3, r3, #16
 802bd4c:	2010      	movs	r0, #16
 802bd4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 802bd52:	bf04      	itt	eq
 802bd54:	0a1b      	lsreq	r3, r3, #8
 802bd56:	3008      	addeq	r0, #8
 802bd58:	071a      	lsls	r2, r3, #28
 802bd5a:	bf04      	itt	eq
 802bd5c:	091b      	lsreq	r3, r3, #4
 802bd5e:	3004      	addeq	r0, #4
 802bd60:	079a      	lsls	r2, r3, #30
 802bd62:	bf04      	itt	eq
 802bd64:	089b      	lsreq	r3, r3, #2
 802bd66:	3002      	addeq	r0, #2
 802bd68:	07da      	lsls	r2, r3, #31
 802bd6a:	d402      	bmi.n	802bd72 <__lo0bits+0x4e>
 802bd6c:	085b      	lsrs	r3, r3, #1
 802bd6e:	d006      	beq.n	802bd7e <__lo0bits+0x5a>
 802bd70:	3001      	adds	r0, #1
 802bd72:	600b      	str	r3, [r1, #0]
 802bd74:	4770      	bx	lr
 802bd76:	4610      	mov	r0, r2
 802bd78:	e7e9      	b.n	802bd4e <__lo0bits+0x2a>
 802bd7a:	2000      	movs	r0, #0
 802bd7c:	4770      	bx	lr
 802bd7e:	2020      	movs	r0, #32
 802bd80:	4770      	bx	lr

0802bd82 <__i2b>:
 802bd82:	b510      	push	{r4, lr}
 802bd84:	460c      	mov	r4, r1
 802bd86:	2101      	movs	r1, #1
 802bd88:	f7ff ff44 	bl	802bc14 <_Balloc>
 802bd8c:	2201      	movs	r2, #1
 802bd8e:	6144      	str	r4, [r0, #20]
 802bd90:	6102      	str	r2, [r0, #16]
 802bd92:	bd10      	pop	{r4, pc}

0802bd94 <__multiply>:
 802bd94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd98:	4614      	mov	r4, r2
 802bd9a:	690a      	ldr	r2, [r1, #16]
 802bd9c:	6923      	ldr	r3, [r4, #16]
 802bd9e:	429a      	cmp	r2, r3
 802bda0:	bfb8      	it	lt
 802bda2:	460b      	movlt	r3, r1
 802bda4:	4688      	mov	r8, r1
 802bda6:	bfbc      	itt	lt
 802bda8:	46a0      	movlt	r8, r4
 802bdaa:	461c      	movlt	r4, r3
 802bdac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802bdb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802bdb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802bdb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802bdbc:	eb07 0609 	add.w	r6, r7, r9
 802bdc0:	42b3      	cmp	r3, r6
 802bdc2:	bfb8      	it	lt
 802bdc4:	3101      	addlt	r1, #1
 802bdc6:	f7ff ff25 	bl	802bc14 <_Balloc>
 802bdca:	f100 0514 	add.w	r5, r0, #20
 802bdce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802bdd2:	462b      	mov	r3, r5
 802bdd4:	2200      	movs	r2, #0
 802bdd6:	4573      	cmp	r3, lr
 802bdd8:	d316      	bcc.n	802be08 <__multiply+0x74>
 802bdda:	f104 0214 	add.w	r2, r4, #20
 802bdde:	f108 0114 	add.w	r1, r8, #20
 802bde2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802bde6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802bdea:	9300      	str	r3, [sp, #0]
 802bdec:	9b00      	ldr	r3, [sp, #0]
 802bdee:	9201      	str	r2, [sp, #4]
 802bdf0:	4293      	cmp	r3, r2
 802bdf2:	d80c      	bhi.n	802be0e <__multiply+0x7a>
 802bdf4:	2e00      	cmp	r6, #0
 802bdf6:	dd03      	ble.n	802be00 <__multiply+0x6c>
 802bdf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802bdfc:	2b00      	cmp	r3, #0
 802bdfe:	d05d      	beq.n	802bebc <__multiply+0x128>
 802be00:	6106      	str	r6, [r0, #16]
 802be02:	b003      	add	sp, #12
 802be04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be08:	f843 2b04 	str.w	r2, [r3], #4
 802be0c:	e7e3      	b.n	802bdd6 <__multiply+0x42>
 802be0e:	f8b2 b000 	ldrh.w	fp, [r2]
 802be12:	f1bb 0f00 	cmp.w	fp, #0
 802be16:	d023      	beq.n	802be60 <__multiply+0xcc>
 802be18:	4689      	mov	r9, r1
 802be1a:	46ac      	mov	ip, r5
 802be1c:	f04f 0800 	mov.w	r8, #0
 802be20:	f859 4b04 	ldr.w	r4, [r9], #4
 802be24:	f8dc a000 	ldr.w	sl, [ip]
 802be28:	b2a3      	uxth	r3, r4
 802be2a:	fa1f fa8a 	uxth.w	sl, sl
 802be2e:	fb0b a303 	mla	r3, fp, r3, sl
 802be32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802be36:	f8dc 4000 	ldr.w	r4, [ip]
 802be3a:	4443      	add	r3, r8
 802be3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802be40:	fb0b 840a 	mla	r4, fp, sl, r8
 802be44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802be48:	46e2      	mov	sl, ip
 802be4a:	b29b      	uxth	r3, r3
 802be4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802be50:	454f      	cmp	r7, r9
 802be52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802be56:	f84a 3b04 	str.w	r3, [sl], #4
 802be5a:	d82b      	bhi.n	802beb4 <__multiply+0x120>
 802be5c:	f8cc 8004 	str.w	r8, [ip, #4]
 802be60:	9b01      	ldr	r3, [sp, #4]
 802be62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802be66:	3204      	adds	r2, #4
 802be68:	f1ba 0f00 	cmp.w	sl, #0
 802be6c:	d020      	beq.n	802beb0 <__multiply+0x11c>
 802be6e:	682b      	ldr	r3, [r5, #0]
 802be70:	4689      	mov	r9, r1
 802be72:	46a8      	mov	r8, r5
 802be74:	f04f 0b00 	mov.w	fp, #0
 802be78:	f8b9 c000 	ldrh.w	ip, [r9]
 802be7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802be80:	fb0a 440c 	mla	r4, sl, ip, r4
 802be84:	445c      	add	r4, fp
 802be86:	46c4      	mov	ip, r8
 802be88:	b29b      	uxth	r3, r3
 802be8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802be8e:	f84c 3b04 	str.w	r3, [ip], #4
 802be92:	f859 3b04 	ldr.w	r3, [r9], #4
 802be96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802be9a:	0c1b      	lsrs	r3, r3, #16
 802be9c:	fb0a b303 	mla	r3, sl, r3, fp
 802bea0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802bea4:	454f      	cmp	r7, r9
 802bea6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802beaa:	d805      	bhi.n	802beb8 <__multiply+0x124>
 802beac:	f8c8 3004 	str.w	r3, [r8, #4]
 802beb0:	3504      	adds	r5, #4
 802beb2:	e79b      	b.n	802bdec <__multiply+0x58>
 802beb4:	46d4      	mov	ip, sl
 802beb6:	e7b3      	b.n	802be20 <__multiply+0x8c>
 802beb8:	46e0      	mov	r8, ip
 802beba:	e7dd      	b.n	802be78 <__multiply+0xe4>
 802bebc:	3e01      	subs	r6, #1
 802bebe:	e799      	b.n	802bdf4 <__multiply+0x60>

0802bec0 <__pow5mult>:
 802bec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bec4:	4615      	mov	r5, r2
 802bec6:	f012 0203 	ands.w	r2, r2, #3
 802beca:	4606      	mov	r6, r0
 802becc:	460f      	mov	r7, r1
 802bece:	d007      	beq.n	802bee0 <__pow5mult+0x20>
 802bed0:	3a01      	subs	r2, #1
 802bed2:	4c1a      	ldr	r4, [pc, #104]	; (802bf3c <__pow5mult+0x7c>)
 802bed4:	2300      	movs	r3, #0
 802bed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802beda:	f7ff fec9 	bl	802bc70 <__multadd>
 802bede:	4607      	mov	r7, r0
 802bee0:	10ad      	asrs	r5, r5, #2
 802bee2:	d027      	beq.n	802bf34 <__pow5mult+0x74>
 802bee4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 802bee6:	b944      	cbnz	r4, 802befa <__pow5mult+0x3a>
 802bee8:	f240 2171 	movw	r1, #625	; 0x271
 802beec:	4630      	mov	r0, r6
 802beee:	f7ff ff48 	bl	802bd82 <__i2b>
 802bef2:	2300      	movs	r3, #0
 802bef4:	64b0      	str	r0, [r6, #72]	; 0x48
 802bef6:	4604      	mov	r4, r0
 802bef8:	6003      	str	r3, [r0, #0]
 802befa:	f04f 0800 	mov.w	r8, #0
 802befe:	07eb      	lsls	r3, r5, #31
 802bf00:	d50a      	bpl.n	802bf18 <__pow5mult+0x58>
 802bf02:	4639      	mov	r1, r7
 802bf04:	4622      	mov	r2, r4
 802bf06:	4630      	mov	r0, r6
 802bf08:	f7ff ff44 	bl	802bd94 <__multiply>
 802bf0c:	4639      	mov	r1, r7
 802bf0e:	4681      	mov	r9, r0
 802bf10:	4630      	mov	r0, r6
 802bf12:	f7ff fea4 	bl	802bc5e <_Bfree>
 802bf16:	464f      	mov	r7, r9
 802bf18:	106d      	asrs	r5, r5, #1
 802bf1a:	d00b      	beq.n	802bf34 <__pow5mult+0x74>
 802bf1c:	6820      	ldr	r0, [r4, #0]
 802bf1e:	b938      	cbnz	r0, 802bf30 <__pow5mult+0x70>
 802bf20:	4622      	mov	r2, r4
 802bf22:	4621      	mov	r1, r4
 802bf24:	4630      	mov	r0, r6
 802bf26:	f7ff ff35 	bl	802bd94 <__multiply>
 802bf2a:	6020      	str	r0, [r4, #0]
 802bf2c:	f8c0 8000 	str.w	r8, [r0]
 802bf30:	4604      	mov	r4, r0
 802bf32:	e7e4      	b.n	802befe <__pow5mult+0x3e>
 802bf34:	4638      	mov	r0, r7
 802bf36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bf3a:	bf00      	nop
 802bf3c:	080b43a0 	.word	0x080b43a0

0802bf40 <__lshift>:
 802bf40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bf44:	460c      	mov	r4, r1
 802bf46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802bf4a:	6923      	ldr	r3, [r4, #16]
 802bf4c:	6849      	ldr	r1, [r1, #4]
 802bf4e:	eb0a 0903 	add.w	r9, sl, r3
 802bf52:	68a3      	ldr	r3, [r4, #8]
 802bf54:	4607      	mov	r7, r0
 802bf56:	4616      	mov	r6, r2
 802bf58:	f109 0501 	add.w	r5, r9, #1
 802bf5c:	42ab      	cmp	r3, r5
 802bf5e:	db32      	blt.n	802bfc6 <__lshift+0x86>
 802bf60:	4638      	mov	r0, r7
 802bf62:	f7ff fe57 	bl	802bc14 <_Balloc>
 802bf66:	2300      	movs	r3, #0
 802bf68:	4680      	mov	r8, r0
 802bf6a:	f100 0114 	add.w	r1, r0, #20
 802bf6e:	461a      	mov	r2, r3
 802bf70:	4553      	cmp	r3, sl
 802bf72:	db2b      	blt.n	802bfcc <__lshift+0x8c>
 802bf74:	6920      	ldr	r0, [r4, #16]
 802bf76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802bf7a:	f104 0314 	add.w	r3, r4, #20
 802bf7e:	f016 021f 	ands.w	r2, r6, #31
 802bf82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802bf86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802bf8a:	d025      	beq.n	802bfd8 <__lshift+0x98>
 802bf8c:	f1c2 0e20 	rsb	lr, r2, #32
 802bf90:	2000      	movs	r0, #0
 802bf92:	681e      	ldr	r6, [r3, #0]
 802bf94:	468a      	mov	sl, r1
 802bf96:	4096      	lsls	r6, r2
 802bf98:	4330      	orrs	r0, r6
 802bf9a:	f84a 0b04 	str.w	r0, [sl], #4
 802bf9e:	f853 0b04 	ldr.w	r0, [r3], #4
 802bfa2:	459c      	cmp	ip, r3
 802bfa4:	fa20 f00e 	lsr.w	r0, r0, lr
 802bfa8:	d814      	bhi.n	802bfd4 <__lshift+0x94>
 802bfaa:	6048      	str	r0, [r1, #4]
 802bfac:	b108      	cbz	r0, 802bfb2 <__lshift+0x72>
 802bfae:	f109 0502 	add.w	r5, r9, #2
 802bfb2:	3d01      	subs	r5, #1
 802bfb4:	4638      	mov	r0, r7
 802bfb6:	f8c8 5010 	str.w	r5, [r8, #16]
 802bfba:	4621      	mov	r1, r4
 802bfbc:	f7ff fe4f 	bl	802bc5e <_Bfree>
 802bfc0:	4640      	mov	r0, r8
 802bfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bfc6:	3101      	adds	r1, #1
 802bfc8:	005b      	lsls	r3, r3, #1
 802bfca:	e7c7      	b.n	802bf5c <__lshift+0x1c>
 802bfcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802bfd0:	3301      	adds	r3, #1
 802bfd2:	e7cd      	b.n	802bf70 <__lshift+0x30>
 802bfd4:	4651      	mov	r1, sl
 802bfd6:	e7dc      	b.n	802bf92 <__lshift+0x52>
 802bfd8:	3904      	subs	r1, #4
 802bfda:	f853 2b04 	ldr.w	r2, [r3], #4
 802bfde:	f841 2f04 	str.w	r2, [r1, #4]!
 802bfe2:	459c      	cmp	ip, r3
 802bfe4:	d8f9      	bhi.n	802bfda <__lshift+0x9a>
 802bfe6:	e7e4      	b.n	802bfb2 <__lshift+0x72>

0802bfe8 <__mcmp>:
 802bfe8:	6903      	ldr	r3, [r0, #16]
 802bfea:	690a      	ldr	r2, [r1, #16]
 802bfec:	1a9b      	subs	r3, r3, r2
 802bfee:	b530      	push	{r4, r5, lr}
 802bff0:	d10c      	bne.n	802c00c <__mcmp+0x24>
 802bff2:	0092      	lsls	r2, r2, #2
 802bff4:	3014      	adds	r0, #20
 802bff6:	3114      	adds	r1, #20
 802bff8:	1884      	adds	r4, r0, r2
 802bffa:	4411      	add	r1, r2
 802bffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802c000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802c004:	4295      	cmp	r5, r2
 802c006:	d003      	beq.n	802c010 <__mcmp+0x28>
 802c008:	d305      	bcc.n	802c016 <__mcmp+0x2e>
 802c00a:	2301      	movs	r3, #1
 802c00c:	4618      	mov	r0, r3
 802c00e:	bd30      	pop	{r4, r5, pc}
 802c010:	42a0      	cmp	r0, r4
 802c012:	d3f3      	bcc.n	802bffc <__mcmp+0x14>
 802c014:	e7fa      	b.n	802c00c <__mcmp+0x24>
 802c016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c01a:	e7f7      	b.n	802c00c <__mcmp+0x24>

0802c01c <__mdiff>:
 802c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c020:	460d      	mov	r5, r1
 802c022:	4607      	mov	r7, r0
 802c024:	4611      	mov	r1, r2
 802c026:	4628      	mov	r0, r5
 802c028:	4614      	mov	r4, r2
 802c02a:	f7ff ffdd 	bl	802bfe8 <__mcmp>
 802c02e:	1e06      	subs	r6, r0, #0
 802c030:	d108      	bne.n	802c044 <__mdiff+0x28>
 802c032:	4631      	mov	r1, r6
 802c034:	4638      	mov	r0, r7
 802c036:	f7ff fded 	bl	802bc14 <_Balloc>
 802c03a:	2301      	movs	r3, #1
 802c03c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802c040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c044:	bfa4      	itt	ge
 802c046:	4623      	movge	r3, r4
 802c048:	462c      	movge	r4, r5
 802c04a:	4638      	mov	r0, r7
 802c04c:	6861      	ldr	r1, [r4, #4]
 802c04e:	bfa6      	itte	ge
 802c050:	461d      	movge	r5, r3
 802c052:	2600      	movge	r6, #0
 802c054:	2601      	movlt	r6, #1
 802c056:	f7ff fddd 	bl	802bc14 <_Balloc>
 802c05a:	692b      	ldr	r3, [r5, #16]
 802c05c:	60c6      	str	r6, [r0, #12]
 802c05e:	6926      	ldr	r6, [r4, #16]
 802c060:	f105 0914 	add.w	r9, r5, #20
 802c064:	f104 0214 	add.w	r2, r4, #20
 802c068:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802c06c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802c070:	f100 0514 	add.w	r5, r0, #20
 802c074:	f04f 0e00 	mov.w	lr, #0
 802c078:	f852 ab04 	ldr.w	sl, [r2], #4
 802c07c:	f859 4b04 	ldr.w	r4, [r9], #4
 802c080:	fa1e f18a 	uxtah	r1, lr, sl
 802c084:	b2a3      	uxth	r3, r4
 802c086:	1ac9      	subs	r1, r1, r3
 802c088:	0c23      	lsrs	r3, r4, #16
 802c08a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802c08e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802c092:	b289      	uxth	r1, r1
 802c094:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802c098:	45c8      	cmp	r8, r9
 802c09a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802c09e:	4694      	mov	ip, r2
 802c0a0:	f845 3b04 	str.w	r3, [r5], #4
 802c0a4:	d8e8      	bhi.n	802c078 <__mdiff+0x5c>
 802c0a6:	45bc      	cmp	ip, r7
 802c0a8:	d304      	bcc.n	802c0b4 <__mdiff+0x98>
 802c0aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802c0ae:	b183      	cbz	r3, 802c0d2 <__mdiff+0xb6>
 802c0b0:	6106      	str	r6, [r0, #16]
 802c0b2:	e7c5      	b.n	802c040 <__mdiff+0x24>
 802c0b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 802c0b8:	fa1e f381 	uxtah	r3, lr, r1
 802c0bc:	141a      	asrs	r2, r3, #16
 802c0be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802c0c2:	b29b      	uxth	r3, r3
 802c0c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802c0c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802c0cc:	f845 3b04 	str.w	r3, [r5], #4
 802c0d0:	e7e9      	b.n	802c0a6 <__mdiff+0x8a>
 802c0d2:	3e01      	subs	r6, #1
 802c0d4:	e7e9      	b.n	802c0aa <__mdiff+0x8e>

0802c0d6 <__d2b>:
 802c0d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c0da:	460e      	mov	r6, r1
 802c0dc:	2101      	movs	r1, #1
 802c0de:	ec59 8b10 	vmov	r8, r9, d0
 802c0e2:	4615      	mov	r5, r2
 802c0e4:	f7ff fd96 	bl	802bc14 <_Balloc>
 802c0e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 802c0ec:	4607      	mov	r7, r0
 802c0ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802c0f2:	bb34      	cbnz	r4, 802c142 <__d2b+0x6c>
 802c0f4:	9301      	str	r3, [sp, #4]
 802c0f6:	f1b8 0300 	subs.w	r3, r8, #0
 802c0fa:	d027      	beq.n	802c14c <__d2b+0x76>
 802c0fc:	a802      	add	r0, sp, #8
 802c0fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 802c102:	f7ff fe0f 	bl	802bd24 <__lo0bits>
 802c106:	9900      	ldr	r1, [sp, #0]
 802c108:	b1f0      	cbz	r0, 802c148 <__d2b+0x72>
 802c10a:	9a01      	ldr	r2, [sp, #4]
 802c10c:	f1c0 0320 	rsb	r3, r0, #32
 802c110:	fa02 f303 	lsl.w	r3, r2, r3
 802c114:	430b      	orrs	r3, r1
 802c116:	40c2      	lsrs	r2, r0
 802c118:	617b      	str	r3, [r7, #20]
 802c11a:	9201      	str	r2, [sp, #4]
 802c11c:	9b01      	ldr	r3, [sp, #4]
 802c11e:	61bb      	str	r3, [r7, #24]
 802c120:	2b00      	cmp	r3, #0
 802c122:	bf14      	ite	ne
 802c124:	2102      	movne	r1, #2
 802c126:	2101      	moveq	r1, #1
 802c128:	6139      	str	r1, [r7, #16]
 802c12a:	b1c4      	cbz	r4, 802c15e <__d2b+0x88>
 802c12c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802c130:	4404      	add	r4, r0
 802c132:	6034      	str	r4, [r6, #0]
 802c134:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c138:	6028      	str	r0, [r5, #0]
 802c13a:	4638      	mov	r0, r7
 802c13c:	b003      	add	sp, #12
 802c13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c146:	e7d5      	b.n	802c0f4 <__d2b+0x1e>
 802c148:	6179      	str	r1, [r7, #20]
 802c14a:	e7e7      	b.n	802c11c <__d2b+0x46>
 802c14c:	a801      	add	r0, sp, #4
 802c14e:	f7ff fde9 	bl	802bd24 <__lo0bits>
 802c152:	9b01      	ldr	r3, [sp, #4]
 802c154:	617b      	str	r3, [r7, #20]
 802c156:	2101      	movs	r1, #1
 802c158:	6139      	str	r1, [r7, #16]
 802c15a:	3020      	adds	r0, #32
 802c15c:	e7e5      	b.n	802c12a <__d2b+0x54>
 802c15e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802c162:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c166:	6030      	str	r0, [r6, #0]
 802c168:	6918      	ldr	r0, [r3, #16]
 802c16a:	f7ff fdbc 	bl	802bce6 <__hi0bits>
 802c16e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802c172:	e7e1      	b.n	802c138 <__d2b+0x62>

0802c174 <frexp>:
 802c174:	b570      	push	{r4, r5, r6, lr}
 802c176:	2100      	movs	r1, #0
 802c178:	ec55 4b10 	vmov	r4, r5, d0
 802c17c:	6001      	str	r1, [r0, #0]
 802c17e:	4916      	ldr	r1, [pc, #88]	; (802c1d8 <frexp+0x64>)
 802c180:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802c184:	428b      	cmp	r3, r1
 802c186:	4606      	mov	r6, r0
 802c188:	462a      	mov	r2, r5
 802c18a:	dc22      	bgt.n	802c1d2 <frexp+0x5e>
 802c18c:	ee10 1a10 	vmov	r1, s0
 802c190:	4319      	orrs	r1, r3
 802c192:	d01e      	beq.n	802c1d2 <frexp+0x5e>
 802c194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802c198:	da0d      	bge.n	802c1b6 <frexp+0x42>
 802c19a:	2200      	movs	r2, #0
 802c19c:	4b0f      	ldr	r3, [pc, #60]	; (802c1dc <frexp+0x68>)
 802c19e:	ee10 0a10 	vmov	r0, s0
 802c1a2:	4629      	mov	r1, r5
 802c1a4:	f7da ffc2 	bl	800712c <__aeabi_dmul>
 802c1a8:	460a      	mov	r2, r1
 802c1aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802c1ae:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802c1b2:	4604      	mov	r4, r0
 802c1b4:	6031      	str	r1, [r6, #0]
 802c1b6:	6831      	ldr	r1, [r6, #0]
 802c1b8:	151b      	asrs	r3, r3, #20
 802c1ba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802c1be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802c1c2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 802c1c6:	440b      	add	r3, r1
 802c1c8:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802c1cc:	6033      	str	r3, [r6, #0]
 802c1ce:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802c1d2:	ec45 4b10 	vmov	d0, r4, r5
 802c1d6:	bd70      	pop	{r4, r5, r6, pc}
 802c1d8:	7fefffff 	.word	0x7fefffff
 802c1dc:	43500000 	.word	0x43500000

0802c1e0 <__sread>:
 802c1e0:	b510      	push	{r4, lr}
 802c1e2:	460c      	mov	r4, r1
 802c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1e8:	f000 f9fc 	bl	802c5e4 <_read_r>
 802c1ec:	2800      	cmp	r0, #0
 802c1ee:	bfab      	itete	ge
 802c1f0:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 802c1f2:	89a3      	ldrhlt	r3, [r4, #12]
 802c1f4:	181b      	addge	r3, r3, r0
 802c1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c1fa:	bfac      	ite	ge
 802c1fc:	6523      	strge	r3, [r4, #80]	; 0x50
 802c1fe:	81a3      	strhlt	r3, [r4, #12]
 802c200:	bd10      	pop	{r4, pc}

0802c202 <__swrite>:
 802c202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c206:	461f      	mov	r7, r3
 802c208:	898b      	ldrh	r3, [r1, #12]
 802c20a:	05db      	lsls	r3, r3, #23
 802c20c:	4605      	mov	r5, r0
 802c20e:	460c      	mov	r4, r1
 802c210:	4616      	mov	r6, r2
 802c212:	d505      	bpl.n	802c220 <__swrite+0x1e>
 802c214:	2302      	movs	r3, #2
 802c216:	2200      	movs	r2, #0
 802c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c21c:	f000 f9be 	bl	802c59c <_lseek_r>
 802c220:	89a3      	ldrh	r3, [r4, #12]
 802c222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c22a:	81a3      	strh	r3, [r4, #12]
 802c22c:	4632      	mov	r2, r6
 802c22e:	463b      	mov	r3, r7
 802c230:	4628      	mov	r0, r5
 802c232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c236:	f7fe bb5f 	b.w	802a8f8 <_write_r>

0802c23a <__sseek>:
 802c23a:	b510      	push	{r4, lr}
 802c23c:	460c      	mov	r4, r1
 802c23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c242:	f000 f9ab 	bl	802c59c <_lseek_r>
 802c246:	1c43      	adds	r3, r0, #1
 802c248:	89a3      	ldrh	r3, [r4, #12]
 802c24a:	bf15      	itete	ne
 802c24c:	6520      	strne	r0, [r4, #80]	; 0x50
 802c24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c256:	81a3      	strheq	r3, [r4, #12]
 802c258:	bf18      	it	ne
 802c25a:	81a3      	strhne	r3, [r4, #12]
 802c25c:	bd10      	pop	{r4, pc}

0802c25e <__sclose>:
 802c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c262:	f000 b911 	b.w	802c488 <_close_r>

0802c266 <strncpy>:
 802c266:	b570      	push	{r4, r5, r6, lr}
 802c268:	3901      	subs	r1, #1
 802c26a:	4604      	mov	r4, r0
 802c26c:	b902      	cbnz	r2, 802c270 <strncpy+0xa>
 802c26e:	bd70      	pop	{r4, r5, r6, pc}
 802c270:	4623      	mov	r3, r4
 802c272:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 802c276:	f803 5b01 	strb.w	r5, [r3], #1
 802c27a:	1e56      	subs	r6, r2, #1
 802c27c:	b92d      	cbnz	r5, 802c28a <strncpy+0x24>
 802c27e:	4414      	add	r4, r2
 802c280:	42a3      	cmp	r3, r4
 802c282:	d0f4      	beq.n	802c26e <strncpy+0x8>
 802c284:	f803 5b01 	strb.w	r5, [r3], #1
 802c288:	e7fa      	b.n	802c280 <strncpy+0x1a>
 802c28a:	461c      	mov	r4, r3
 802c28c:	4632      	mov	r2, r6
 802c28e:	e7ed      	b.n	802c26c <strncpy+0x6>

0802c290 <__ssprint_r>:
 802c290:	6893      	ldr	r3, [r2, #8]
 802c292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c296:	4681      	mov	r9, r0
 802c298:	460c      	mov	r4, r1
 802c29a:	4616      	mov	r6, r2
 802c29c:	2b00      	cmp	r3, #0
 802c29e:	d05e      	beq.n	802c35e <__ssprint_r+0xce>
 802c2a0:	f04f 0b00 	mov.w	fp, #0
 802c2a4:	f8d2 a000 	ldr.w	sl, [r2]
 802c2a8:	465f      	mov	r7, fp
 802c2aa:	b357      	cbz	r7, 802c302 <__ssprint_r+0x72>
 802c2ac:	68a3      	ldr	r3, [r4, #8]
 802c2ae:	429f      	cmp	r7, r3
 802c2b0:	d340      	bcc.n	802c334 <__ssprint_r+0xa4>
 802c2b2:	89a2      	ldrh	r2, [r4, #12]
 802c2b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802c2b8:	d03c      	beq.n	802c334 <__ssprint_r+0xa4>
 802c2ba:	6825      	ldr	r5, [r4, #0]
 802c2bc:	6921      	ldr	r1, [r4, #16]
 802c2be:	eba5 0801 	sub.w	r8, r5, r1
 802c2c2:	6965      	ldr	r5, [r4, #20]
 802c2c4:	2302      	movs	r3, #2
 802c2c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c2ca:	fb95 f5f3 	sdiv	r5, r5, r3
 802c2ce:	f108 0301 	add.w	r3, r8, #1
 802c2d2:	443b      	add	r3, r7
 802c2d4:	429d      	cmp	r5, r3
 802c2d6:	bf38      	it	cc
 802c2d8:	461d      	movcc	r5, r3
 802c2da:	0553      	lsls	r3, r2, #21
 802c2dc:	d544      	bpl.n	802c368 <__ssprint_r+0xd8>
 802c2de:	4629      	mov	r1, r5
 802c2e0:	4648      	mov	r0, r9
 802c2e2:	f7fc fbab 	bl	8028a3c <_malloc_r>
 802c2e6:	b988      	cbnz	r0, 802c30c <__ssprint_r+0x7c>
 802c2e8:	230c      	movs	r3, #12
 802c2ea:	f8c9 3000 	str.w	r3, [r9]
 802c2ee:	89a3      	ldrh	r3, [r4, #12]
 802c2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c2f4:	81a3      	strh	r3, [r4, #12]
 802c2f6:	2300      	movs	r3, #0
 802c2f8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 802c2fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c300:	e02f      	b.n	802c362 <__ssprint_r+0xd2>
 802c302:	e9da b700 	ldrd	fp, r7, [sl]
 802c306:	f10a 0a08 	add.w	sl, sl, #8
 802c30a:	e7ce      	b.n	802c2aa <__ssprint_r+0x1a>
 802c30c:	4642      	mov	r2, r8
 802c30e:	6921      	ldr	r1, [r4, #16]
 802c310:	9001      	str	r0, [sp, #4]
 802c312:	f7fc fdd8 	bl	8028ec6 <memcpy>
 802c316:	89a2      	ldrh	r2, [r4, #12]
 802c318:	9b01      	ldr	r3, [sp, #4]
 802c31a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802c31e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802c322:	81a2      	strh	r2, [r4, #12]
 802c324:	6123      	str	r3, [r4, #16]
 802c326:	6165      	str	r5, [r4, #20]
 802c328:	4443      	add	r3, r8
 802c32a:	eba5 0508 	sub.w	r5, r5, r8
 802c32e:	6023      	str	r3, [r4, #0]
 802c330:	60a5      	str	r5, [r4, #8]
 802c332:	463b      	mov	r3, r7
 802c334:	42bb      	cmp	r3, r7
 802c336:	bf28      	it	cs
 802c338:	463b      	movcs	r3, r7
 802c33a:	461a      	mov	r2, r3
 802c33c:	4659      	mov	r1, fp
 802c33e:	6820      	ldr	r0, [r4, #0]
 802c340:	9301      	str	r3, [sp, #4]
 802c342:	f7fc fdcb 	bl	8028edc <memmove>
 802c346:	68a2      	ldr	r2, [r4, #8]
 802c348:	9b01      	ldr	r3, [sp, #4]
 802c34a:	1ad2      	subs	r2, r2, r3
 802c34c:	60a2      	str	r2, [r4, #8]
 802c34e:	6822      	ldr	r2, [r4, #0]
 802c350:	4413      	add	r3, r2
 802c352:	6023      	str	r3, [r4, #0]
 802c354:	68b3      	ldr	r3, [r6, #8]
 802c356:	1bdf      	subs	r7, r3, r7
 802c358:	60b7      	str	r7, [r6, #8]
 802c35a:	2f00      	cmp	r7, #0
 802c35c:	d1d1      	bne.n	802c302 <__ssprint_r+0x72>
 802c35e:	2000      	movs	r0, #0
 802c360:	6070      	str	r0, [r6, #4]
 802c362:	b003      	add	sp, #12
 802c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c368:	462a      	mov	r2, r5
 802c36a:	4648      	mov	r0, r9
 802c36c:	f7fc fe20 	bl	8028fb0 <_realloc_r>
 802c370:	4603      	mov	r3, r0
 802c372:	2800      	cmp	r0, #0
 802c374:	d1d6      	bne.n	802c324 <__ssprint_r+0x94>
 802c376:	6921      	ldr	r1, [r4, #16]
 802c378:	4648      	mov	r0, r9
 802c37a:	f7ff faf7 	bl	802b96c <_free_r>
 802c37e:	e7b3      	b.n	802c2e8 <__ssprint_r+0x58>

0802c380 <__register_exitproc>:
 802c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c384:	4c26      	ldr	r4, [pc, #152]	; (802c420 <__register_exitproc+0xa0>)
 802c386:	4606      	mov	r6, r0
 802c388:	6820      	ldr	r0, [r4, #0]
 802c38a:	4698      	mov	r8, r3
 802c38c:	460f      	mov	r7, r1
 802c38e:	4691      	mov	r9, r2
 802c390:	f7fc fb42 	bl	8028a18 <__retarget_lock_acquire_recursive>
 802c394:	4b23      	ldr	r3, [pc, #140]	; (802c424 <__register_exitproc+0xa4>)
 802c396:	681d      	ldr	r5, [r3, #0]
 802c398:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 802c39c:	b918      	cbnz	r0, 802c3a6 <__register_exitproc+0x26>
 802c39e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 802c3a2:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 802c3a6:	6843      	ldr	r3, [r0, #4]
 802c3a8:	2b1f      	cmp	r3, #31
 802c3aa:	dd19      	ble.n	802c3e0 <__register_exitproc+0x60>
 802c3ac:	4b1e      	ldr	r3, [pc, #120]	; (802c428 <__register_exitproc+0xa8>)
 802c3ae:	b933      	cbnz	r3, 802c3be <__register_exitproc+0x3e>
 802c3b0:	6820      	ldr	r0, [r4, #0]
 802c3b2:	f7fc fb32 	bl	8028a1a <__retarget_lock_release_recursive>
 802c3b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c3be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802c3c2:	f7fc fb2b 	bl	8028a1c <malloc>
 802c3c6:	2800      	cmp	r0, #0
 802c3c8:	d0f2      	beq.n	802c3b0 <__register_exitproc+0x30>
 802c3ca:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 802c3ce:	6003      	str	r3, [r0, #0]
 802c3d0:	2200      	movs	r2, #0
 802c3d2:	6042      	str	r2, [r0, #4]
 802c3d4:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 802c3d8:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 802c3dc:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 802c3e0:	6843      	ldr	r3, [r0, #4]
 802c3e2:	b19e      	cbz	r6, 802c40c <__register_exitproc+0x8c>
 802c3e4:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 802c3e8:	2201      	movs	r2, #1
 802c3ea:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 802c3ee:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 802c3f2:	409a      	lsls	r2, r3
 802c3f4:	4311      	orrs	r1, r2
 802c3f6:	2e02      	cmp	r6, #2
 802c3f8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 802c3fc:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 802c400:	bf02      	ittt	eq
 802c402:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 802c406:	430a      	orreq	r2, r1
 802c408:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 802c40c:	1c5a      	adds	r2, r3, #1
 802c40e:	3302      	adds	r3, #2
 802c410:	6042      	str	r2, [r0, #4]
 802c412:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 802c416:	6820      	ldr	r0, [r4, #0]
 802c418:	f7fc faff 	bl	8028a1a <__retarget_lock_release_recursive>
 802c41c:	2000      	movs	r0, #0
 802c41e:	e7cc      	b.n	802c3ba <__register_exitproc+0x3a>
 802c420:	20008c70 	.word	0x20008c70
 802c424:	080b4248 	.word	0x080b4248
 802c428:	08028a1d 	.word	0x08028a1d

0802c42c <_calloc_r>:
 802c42c:	b510      	push	{r4, lr}
 802c42e:	4351      	muls	r1, r2
 802c430:	f7fc fb04 	bl	8028a3c <_malloc_r>
 802c434:	4604      	mov	r4, r0
 802c436:	b198      	cbz	r0, 802c460 <_calloc_r+0x34>
 802c438:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802c43c:	f022 0203 	bic.w	r2, r2, #3
 802c440:	3a04      	subs	r2, #4
 802c442:	2a24      	cmp	r2, #36	; 0x24
 802c444:	d81b      	bhi.n	802c47e <_calloc_r+0x52>
 802c446:	2a13      	cmp	r2, #19
 802c448:	d917      	bls.n	802c47a <_calloc_r+0x4e>
 802c44a:	2100      	movs	r1, #0
 802c44c:	2a1b      	cmp	r2, #27
 802c44e:	e9c0 1100 	strd	r1, r1, [r0]
 802c452:	d807      	bhi.n	802c464 <_calloc_r+0x38>
 802c454:	f100 0308 	add.w	r3, r0, #8
 802c458:	2200      	movs	r2, #0
 802c45a:	e9c3 2200 	strd	r2, r2, [r3]
 802c45e:	609a      	str	r2, [r3, #8]
 802c460:	4620      	mov	r0, r4
 802c462:	bd10      	pop	{r4, pc}
 802c464:	2a24      	cmp	r2, #36	; 0x24
 802c466:	e9c0 1102 	strd	r1, r1, [r0, #8]
 802c46a:	bf11      	iteee	ne
 802c46c:	f100 0310 	addne.w	r3, r0, #16
 802c470:	6101      	streq	r1, [r0, #16]
 802c472:	f100 0318 	addeq.w	r3, r0, #24
 802c476:	6141      	streq	r1, [r0, #20]
 802c478:	e7ee      	b.n	802c458 <_calloc_r+0x2c>
 802c47a:	4603      	mov	r3, r0
 802c47c:	e7ec      	b.n	802c458 <_calloc_r+0x2c>
 802c47e:	2100      	movs	r1, #0
 802c480:	f7fc fd45 	bl	8028f0e <memset>
 802c484:	e7ec      	b.n	802c460 <_calloc_r+0x34>
	...

0802c488 <_close_r>:
 802c488:	b538      	push	{r3, r4, r5, lr}
 802c48a:	4c06      	ldr	r4, [pc, #24]	; (802c4a4 <_close_r+0x1c>)
 802c48c:	2300      	movs	r3, #0
 802c48e:	4605      	mov	r5, r0
 802c490:	4608      	mov	r0, r1
 802c492:	6023      	str	r3, [r4, #0]
 802c494:	f7fa fb1a 	bl	8026acc <_close>
 802c498:	1c43      	adds	r3, r0, #1
 802c49a:	d102      	bne.n	802c4a2 <_close_r+0x1a>
 802c49c:	6823      	ldr	r3, [r4, #0]
 802c49e:	b103      	cbz	r3, 802c4a2 <_close_r+0x1a>
 802c4a0:	602b      	str	r3, [r5, #0]
 802c4a2:	bd38      	pop	{r3, r4, r5, pc}
 802c4a4:	2003cff0 	.word	0x2003cff0

0802c4a8 <_fclose_r>:
 802c4a8:	b570      	push	{r4, r5, r6, lr}
 802c4aa:	4606      	mov	r6, r0
 802c4ac:	460c      	mov	r4, r1
 802c4ae:	b911      	cbnz	r1, 802c4b6 <_fclose_r+0xe>
 802c4b0:	2500      	movs	r5, #0
 802c4b2:	4628      	mov	r0, r5
 802c4b4:	bd70      	pop	{r4, r5, r6, pc}
 802c4b6:	b118      	cbz	r0, 802c4c0 <_fclose_r+0x18>
 802c4b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802c4ba:	b90b      	cbnz	r3, 802c4c0 <_fclose_r+0x18>
 802c4bc:	f7ff f9c6 	bl	802b84c <__sinit>
 802c4c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c4c2:	07d8      	lsls	r0, r3, #31
 802c4c4:	d405      	bmi.n	802c4d2 <_fclose_r+0x2a>
 802c4c6:	89a3      	ldrh	r3, [r4, #12]
 802c4c8:	0599      	lsls	r1, r3, #22
 802c4ca:	d402      	bmi.n	802c4d2 <_fclose_r+0x2a>
 802c4cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c4ce:	f7fc faa3 	bl	8028a18 <__retarget_lock_acquire_recursive>
 802c4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c4d6:	b93b      	cbnz	r3, 802c4e8 <_fclose_r+0x40>
 802c4d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802c4da:	f015 0501 	ands.w	r5, r5, #1
 802c4de:	d1e7      	bne.n	802c4b0 <_fclose_r+0x8>
 802c4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c4e2:	f7fc fa9a 	bl	8028a1a <__retarget_lock_release_recursive>
 802c4e6:	e7e4      	b.n	802c4b2 <_fclose_r+0xa>
 802c4e8:	4621      	mov	r1, r4
 802c4ea:	4630      	mov	r0, r6
 802c4ec:	f7ff f8b4 	bl	802b658 <__sflush_r>
 802c4f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802c4f2:	4605      	mov	r5, r0
 802c4f4:	b133      	cbz	r3, 802c504 <_fclose_r+0x5c>
 802c4f6:	69e1      	ldr	r1, [r4, #28]
 802c4f8:	4630      	mov	r0, r6
 802c4fa:	4798      	blx	r3
 802c4fc:	2800      	cmp	r0, #0
 802c4fe:	bfb8      	it	lt
 802c500:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 802c504:	89a3      	ldrh	r3, [r4, #12]
 802c506:	061a      	lsls	r2, r3, #24
 802c508:	d503      	bpl.n	802c512 <_fclose_r+0x6a>
 802c50a:	6921      	ldr	r1, [r4, #16]
 802c50c:	4630      	mov	r0, r6
 802c50e:	f7ff fa2d 	bl	802b96c <_free_r>
 802c512:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802c514:	b141      	cbz	r1, 802c528 <_fclose_r+0x80>
 802c516:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802c51a:	4299      	cmp	r1, r3
 802c51c:	d002      	beq.n	802c524 <_fclose_r+0x7c>
 802c51e:	4630      	mov	r0, r6
 802c520:	f7ff fa24 	bl	802b96c <_free_r>
 802c524:	2300      	movs	r3, #0
 802c526:	6323      	str	r3, [r4, #48]	; 0x30
 802c528:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c52a:	b121      	cbz	r1, 802c536 <_fclose_r+0x8e>
 802c52c:	4630      	mov	r0, r6
 802c52e:	f7ff fa1d 	bl	802b96c <_free_r>
 802c532:	2300      	movs	r3, #0
 802c534:	6463      	str	r3, [r4, #68]	; 0x44
 802c536:	f7ff f971 	bl	802b81c <__sfp_lock_acquire>
 802c53a:	2300      	movs	r3, #0
 802c53c:	81a3      	strh	r3, [r4, #12]
 802c53e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c540:	07db      	lsls	r3, r3, #31
 802c542:	d402      	bmi.n	802c54a <_fclose_r+0xa2>
 802c544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c546:	f7fc fa68 	bl	8028a1a <__retarget_lock_release_recursive>
 802c54a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c54c:	f7fc fa63 	bl	8028a16 <__retarget_lock_close_recursive>
 802c550:	f7ff f96a 	bl	802b828 <__sfp_lock_release>
 802c554:	e7ad      	b.n	802c4b2 <_fclose_r+0xa>
	...

0802c558 <_fstat_r>:
 802c558:	b538      	push	{r3, r4, r5, lr}
 802c55a:	4c07      	ldr	r4, [pc, #28]	; (802c578 <_fstat_r+0x20>)
 802c55c:	2300      	movs	r3, #0
 802c55e:	4605      	mov	r5, r0
 802c560:	4608      	mov	r0, r1
 802c562:	4611      	mov	r1, r2
 802c564:	6023      	str	r3, [r4, #0]
 802c566:	f7fa fab5 	bl	8026ad4 <_fstat>
 802c56a:	1c43      	adds	r3, r0, #1
 802c56c:	d102      	bne.n	802c574 <_fstat_r+0x1c>
 802c56e:	6823      	ldr	r3, [r4, #0]
 802c570:	b103      	cbz	r3, 802c574 <_fstat_r+0x1c>
 802c572:	602b      	str	r3, [r5, #0]
 802c574:	bd38      	pop	{r3, r4, r5, pc}
 802c576:	bf00      	nop
 802c578:	2003cff0 	.word	0x2003cff0

0802c57c <_isatty_r>:
 802c57c:	b538      	push	{r3, r4, r5, lr}
 802c57e:	4c06      	ldr	r4, [pc, #24]	; (802c598 <_isatty_r+0x1c>)
 802c580:	2300      	movs	r3, #0
 802c582:	4605      	mov	r5, r0
 802c584:	4608      	mov	r0, r1
 802c586:	6023      	str	r3, [r4, #0]
 802c588:	f7fa faa8 	bl	8026adc <_isatty>
 802c58c:	1c43      	adds	r3, r0, #1
 802c58e:	d102      	bne.n	802c596 <_isatty_r+0x1a>
 802c590:	6823      	ldr	r3, [r4, #0]
 802c592:	b103      	cbz	r3, 802c596 <_isatty_r+0x1a>
 802c594:	602b      	str	r3, [r5, #0]
 802c596:	bd38      	pop	{r3, r4, r5, pc}
 802c598:	2003cff0 	.word	0x2003cff0

0802c59c <_lseek_r>:
 802c59c:	b538      	push	{r3, r4, r5, lr}
 802c59e:	4c07      	ldr	r4, [pc, #28]	; (802c5bc <_lseek_r+0x20>)
 802c5a0:	4605      	mov	r5, r0
 802c5a2:	4608      	mov	r0, r1
 802c5a4:	4611      	mov	r1, r2
 802c5a6:	2200      	movs	r2, #0
 802c5a8:	6022      	str	r2, [r4, #0]
 802c5aa:	461a      	mov	r2, r3
 802c5ac:	f7fa fa9a 	bl	8026ae4 <_lseek>
 802c5b0:	1c43      	adds	r3, r0, #1
 802c5b2:	d102      	bne.n	802c5ba <_lseek_r+0x1e>
 802c5b4:	6823      	ldr	r3, [r4, #0]
 802c5b6:	b103      	cbz	r3, 802c5ba <_lseek_r+0x1e>
 802c5b8:	602b      	str	r3, [r5, #0]
 802c5ba:	bd38      	pop	{r3, r4, r5, pc}
 802c5bc:	2003cff0 	.word	0x2003cff0

0802c5c0 <__ascii_mbtowc>:
 802c5c0:	b082      	sub	sp, #8
 802c5c2:	b901      	cbnz	r1, 802c5c6 <__ascii_mbtowc+0x6>
 802c5c4:	a901      	add	r1, sp, #4
 802c5c6:	b142      	cbz	r2, 802c5da <__ascii_mbtowc+0x1a>
 802c5c8:	b14b      	cbz	r3, 802c5de <__ascii_mbtowc+0x1e>
 802c5ca:	7813      	ldrb	r3, [r2, #0]
 802c5cc:	600b      	str	r3, [r1, #0]
 802c5ce:	7812      	ldrb	r2, [r2, #0]
 802c5d0:	1c10      	adds	r0, r2, #0
 802c5d2:	bf18      	it	ne
 802c5d4:	2001      	movne	r0, #1
 802c5d6:	b002      	add	sp, #8
 802c5d8:	4770      	bx	lr
 802c5da:	4610      	mov	r0, r2
 802c5dc:	e7fb      	b.n	802c5d6 <__ascii_mbtowc+0x16>
 802c5de:	f06f 0001 	mvn.w	r0, #1
 802c5e2:	e7f8      	b.n	802c5d6 <__ascii_mbtowc+0x16>

0802c5e4 <_read_r>:
 802c5e4:	b538      	push	{r3, r4, r5, lr}
 802c5e6:	4c07      	ldr	r4, [pc, #28]	; (802c604 <_read_r+0x20>)
 802c5e8:	4605      	mov	r5, r0
 802c5ea:	4608      	mov	r0, r1
 802c5ec:	4611      	mov	r1, r2
 802c5ee:	2200      	movs	r2, #0
 802c5f0:	6022      	str	r2, [r4, #0]
 802c5f2:	461a      	mov	r2, r3
 802c5f4:	f7fa fa5c 	bl	8026ab0 <_read>
 802c5f8:	1c43      	adds	r3, r0, #1
 802c5fa:	d102      	bne.n	802c602 <_read_r+0x1e>
 802c5fc:	6823      	ldr	r3, [r4, #0]
 802c5fe:	b103      	cbz	r3, 802c602 <_read_r+0x1e>
 802c600:	602b      	str	r3, [r5, #0]
 802c602:	bd38      	pop	{r3, r4, r5, pc}
 802c604:	2003cff0 	.word	0x2003cff0

0802c608 <__ascii_wctomb>:
 802c608:	b149      	cbz	r1, 802c61e <__ascii_wctomb+0x16>
 802c60a:	2aff      	cmp	r2, #255	; 0xff
 802c60c:	bf85      	ittet	hi
 802c60e:	238a      	movhi	r3, #138	; 0x8a
 802c610:	6003      	strhi	r3, [r0, #0]
 802c612:	700a      	strbls	r2, [r1, #0]
 802c614:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802c618:	bf98      	it	ls
 802c61a:	2001      	movls	r0, #1
 802c61c:	4770      	bx	lr
 802c61e:	4608      	mov	r0, r1
 802c620:	4770      	bx	lr
	...

0802c624 <_getpid>:
 802c624:	4b02      	ldr	r3, [pc, #8]	; (802c630 <_getpid+0xc>)
 802c626:	2258      	movs	r2, #88	; 0x58
 802c628:	601a      	str	r2, [r3, #0]
 802c62a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c62e:	4770      	bx	lr
 802c630:	2003cff0 	.word	0x2003cff0

0802c634 <_kill>:
 802c634:	4b02      	ldr	r3, [pc, #8]	; (802c640 <_kill+0xc>)
 802c636:	2258      	movs	r2, #88	; 0x58
 802c638:	601a      	str	r2, [r3, #0]
 802c63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c63e:	4770      	bx	lr
 802c640:	2003cff0 	.word	0x2003cff0

0802c644 <_sbrk>:
 802c644:	4b04      	ldr	r3, [pc, #16]	; (802c658 <_sbrk+0x14>)
 802c646:	6819      	ldr	r1, [r3, #0]
 802c648:	4602      	mov	r2, r0
 802c64a:	b909      	cbnz	r1, 802c650 <_sbrk+0xc>
 802c64c:	4903      	ldr	r1, [pc, #12]	; (802c65c <_sbrk+0x18>)
 802c64e:	6019      	str	r1, [r3, #0]
 802c650:	6818      	ldr	r0, [r3, #0]
 802c652:	4402      	add	r2, r0
 802c654:	601a      	str	r2, [r3, #0]
 802c656:	4770      	bx	lr
 802c658:	2003cf80 	.word	0x2003cf80
 802c65c:	2003cff4 	.word	0x2003cff4

0802c660 <_init>:
 802c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c662:	bf00      	nop
 802c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c666:	bc08      	pop	{r3}
 802c668:	469e      	mov	lr, r3
 802c66a:	4770      	bx	lr

0802c66c <_fini>:
 802c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c66e:	bf00      	nop
 802c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c672:	bc08      	pop	{r3}
 802c674:	469e      	mov	lr, r3
 802c676:	4770      	bx	lr
